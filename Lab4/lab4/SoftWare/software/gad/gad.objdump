
gad.elf:     file format elf32-littlenios2
gad.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00009c80 memsz 0x00009c80 flags r-x
    LOAD off    0x0000aca0 vaddr 0x00009ca0 paddr 0x0000ba9c align 2**12
         filesz 0x00001dfc memsz 0x00001dfc flags rw-
    LOAD off    0x0000d898 vaddr 0x0000d898 paddr 0x0000d898 align 2**12
         filesz 0x00000000 memsz 0x003d0cb4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000961c  000001b8  000001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000004cc  000097d4  000097d4  0000a7d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001dfc  00009ca0  0000ba9c  0000aca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          003d0f8e  0000d898  0000d898  0000d898  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  0000ca9c  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000ad8  00000000  00000000  0000cac8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001bdd  00000000  00000000  0000d5a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000223ef  00000000  00000000  0000f17d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000618e  00000000  00000000  0003156c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00010b52  00000000  00000000  000376fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001b98  00000000  00000000  0004824c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001e8e  00000000  00000000  00049de4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000041e9  00000000  00000000  0004bc72  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000050  00000000  00000000  0004fe5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001c0  00000000  00000000  0004feb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00053b9b  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00053b9e  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00053ba1  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00053ba2  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00053ba3  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00053ba7  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00053bab  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00053baf  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00053bb8  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00053bc1  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  00053bca  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000001e  00000000  00000000  00053bd5  2**0
                  CONTENTS, READONLY
 29 .jdi          00004aa3  00000000  00000000  00053bf3  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00108489  00000000  00000000  00058696  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b8 l    d  .text	00000000 .text
000097d4 l    d  .rodata	00000000 .rodata
00009ca0 l    d  .rwdata	00000000 .rwdata
0000d898 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 PS2_ISR.c
00000000 l    df *ABS*	00000000 audio_ISR.c
00000000 l    df *ABS*	00000000 globals.c
00000000 l    df *ABS*	00000000 interval_timer_ISR.c
00000000 l    df *ABS*	00000000 media_interrupt_HAL.c
00009ad6 l     O .rodata	00000010 C.27.2149
00000000 l    df *ABS*	00000000 pushbutton_ISR.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
000012c4 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00009ca0 l     O .rwdata	00001060 JTAG_UART
0000ad00 l     O .rwdata	00000030 AV_Config
0000ad30 l     O .rwdata	00000030 Audio
0000ad60 l     O .rwdata	0000002c Char_LCD_16x2
0000ad8c l     O .rwdata	0000003c Ethernet
0000adc8 l     O .rwdata	0000002c IrDA_UART
0000adf4 l     O .rwdata	0000002c Expansion_JP1
0000ae20 l     O .rwdata	0000002c Expansion_JP2
0000ae4c l     O .rwdata	0000002c Green_LEDs
0000ae78 l     O .rwdata	0000002c HEX3_HEX0
0000aea4 l     O .rwdata	0000002c HEX7_HEX4
0000aed0 l     O .rwdata	0000002c Pushbuttons
0000aefc l     O .rwdata	0000002c Red_LEDs
0000af28 l     O .rwdata	0000002c Slider_Switches
0000af54 l     O .rwdata	00000038 PS2_Port
0000af8c l     O .rwdata	0000002c Serial_Port
0000afb8 l     O .rwdata	00000034 USB
0000afec l     O .rwdata	00000048 VGA_Char_Buffer
0000b034 l     O .rwdata	00000054 VGA_Pixel_Buffer
0000b088 l     O .rwdata	0000002c SD_Card
00001a68 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00001ca0 l     F .text	0000022c altera_avalon_jtag_uart_irq
00001ecc l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00002548 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_audio.c
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ethernet.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ethernet_low_level_driver.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_parallel_port.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00006034 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000060b0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00006190 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000637c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
000064b8 l     F .text	000000dc alt_file_locked
0000671c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
0000b25c l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
000074fc l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000078e0 l     F .text	00000058 std
000079ec l     F .text	00000008 __fp_lock
000079f4 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_exit.c
00008fd0 l     F .text	00000040 alt_sim_halt
00000000 l    df *ABS*	00000000 alt_fstat.c
00009104 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00009224 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
00009374 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00009534 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sbrk.c
0000ba98 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00009770 l     F .text	00000060 alt_get_errno
00008e70 g     F .text	00000070 _isatty_r
00001330 g     F .text	0000006c alt_main
000054e4 g     F .text	000003d0 alt_up_pixel_buffer_dma_draw_vline
00000570 g     F .text	00000060 interval_timer_ISR
00003d28 g     F .text	00000058 alt_up_ps2_disable_read_interrupt
003de2bc g     O .bss	00000100 alt_irq
00008ee0 g     F .text	00000078 _lseek_r
0000ba9c g       *ABS*	00000000 __flash_rwdata_start
00002ecc g     F .text	00000034 alt_up_character_lcd_send_cmd
0000d8a0 g     O .bss	00000001 byte2
000028bc g     F .text	00000070 alt_up_audio_read_fifo_avail
003de54c g       *ABS*	00000000 __alt_heap_start
0000292c g     F .text	00000070 alt_up_audio_record_r
0000d8a1 g     O .bss	00000001 byte3
00008aac g     F .text	00000068 __sseek
00007948 g     F .text	000000a4 __sinit
00007140 g     F .text	00000130 __swbuf_r
00004708 g     F .text	00000114 alt_up_char_buffer_string
00003b40 g     F .text	00000034 read_CE_bit
00007a48 g     F .text	00000068 __sfmoreglue
000093f4 g     F .text	00000020 __malloc_unlock
00003ed4 g     F .text	000000b0 alt_up_ps2_read_data_byte_timeout
00004410 g     F .text	00000090 alt_up_rs232_read_fd
00004638 g     F .text	000000d0 alt_up_char_buffer_draw
00002834 g     F .text	00000088 alt_up_audio_reset_audio_core
0000d8a2 g     O .bss	00000001 byte1
00007a38 g     F .text	00000010 _cleanup
000048b8 g     F .text	000001a0 alt_up_pixel_buffer_dma_draw
00000000  w      *UND*	00000000 __errno
00002e50 g     F .text	0000007c get_DDRAM_addr
00004878 g     F .text	00000040 alt_up_pixel_buffer_dma_open_dev
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00008dfc g     F .text	00000074 _fstat_r
0000d8c8 g     O .bss	00000004 errno
000027f8 g     F .text	0000003c alt_up_audio_write_interrupt_pending
0000d8b8 g     O .bss	00000004 alt_argv
00013a64 g       *ABS*	00000000 _gp
00006980 g     F .text	00000030 usleep
00004a58 g     F .text	00000058 alt_up_pixel_buffer_dma_change_back_buffer_address
0000d900 g     O .bss	000000a0 average
0000b0dc g     O .rwdata	00000180 alt_fd_list
000062b8 g     F .text	00000094 alt_find_dev
00000f4c g     F .text	000000a0 memcpy
00003064 g     F .text	0000004c alt_up_character_lcd_write_fd
0000481c g     F .text	0000005c alt_up_char_buffer_clear
00007a2c g     F .text	0000000c _cleanup_r
00006440 g     F .text	00000078 alt_io_redirect
000097d4 g       *ABS*	00000000 __DTOR_END__
000039cc g     F .text	00000090 alt_up_irda_write_fd
0000439c g     F .text	00000074 alt_up_rs232_read_data
00002d90 g     F .text	00000060 alt_up_audio_read_fifo_head
00004b08 g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
000037b4 g     F .text	0000003c alt_up_irda_get_used_space_in_read_FIFO
000020e4 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00009164 g     F .text	000000c0 isatty
0000350c g     F .text	00000044 alt_up_ethernet_reg_write
00005194 g     F .text	00000350 alt_up_pixel_buffer_dma_draw_hline
0000375c g     F .text	00000058 alt_up_irda_disable_read_interrupt
00006cd4 g     F .text	00000090 alt_icache_flush
0000d8cc g     O .bss	00000004 __malloc_top_pad
0000d898 g     O .bss	00000004 flag
00008a34 g     F .text	00000070 _sbrk_r
003de2a0 g     O .bss	0000001c up_dev
00005978 g     F .text	000000d0 helper_plot_pixel
00008f58 g     F .text	00000078 _read_r
0000ba78 g     O .rwdata	00000004 alt_max_fd
00004304 g     F .text	00000050 alt_up_rs232_check_parity
00002df0 g     F .text	00000060 alt_up_audio_write_fifo_head
00003380 g     F .text	00000110 alt_up_ethernet_init
00008cd8 g     F .text	00000110 _fclose_r
00003b74 g     F .text	00000034 read_num_bytes_available
000078ac g     F .text	00000034 fflush
0000d8d0 g     O .bss	00000004 __malloc_max_sbrked_mem
00001084 g     F .text	000001c0 alt_irq_register
00003adc g     F .text	00000034 read_RI_bit
00004b3c g     F .text	00000164 alt_up_pixel_buffer_dma_clear_screen
00009284 g     F .text	000000f0 lseek
0000ba8c g     O .rwdata	00000004 _global_impure_ptr
003de54c g       *ABS*	00000000 __bss_end
00004ca0 g     F .text	000004f4 alt_up_pixel_buffer_dma_draw_box
00006874 g     F .text	0000010c alt_tick
0c000000 g       *ABS*	00000000 __alt_mem_Flash_flash_data
00002644 g     F .text	00000040 alt_up_audio_open_dev
00003bdc g     F .text	0000002c read_data_byte
00007a14 g     F .text	00000018 __fp_lock_all
00002a80 g     F .text	00000070 alt_up_audio_play_r
000067dc g     F .text	00000098 alt_alarm_stop
00003b10 g     F .text	00000030 read_RE_bit
0000d8b0 g     O .bss	00000004 alt_irq_active
000037f0 g     F .text	00000040 alt_up_irda_get_available_space_in_write_FIFO
000000ec g     F .exceptions	000000cc alt_irq_handler
0000b0b4 g     O .rwdata	00000028 alt_dev_null
0000334c g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
00003a9c g     F .text	00000040 alt_up_parallel_port_open_dev
00003d80 g     F .text	00000078 alt_up_ps2_write_data_byte
00006094 g     F .text	0000001c alt_dcache_flush_all
000058b4 g     F .text	000000c4 alt_up_pixel_buffer_dma_draw_rectangle
0000ba9c g       *ABS*	00000000 __ram_rwdata_end
0000ba70 g     O .rwdata	00000008 alt_dev_list
00009650 g     F .text	00000120 write
00006f28 g     F .text	000000e8 _putc_r
00005a48 g     F .text	0000039c alt_up_pixel_buffer_dma_draw_line
00009ca0 g       *ABS*	00000000 __ram_rodata_end
00009030 g     F .text	000000d4 fstat
000044a0 g     F .text	00000094 alt_up_rs232_write_fd
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
003de54c g       *ABS*	00000000 end
000040f4 g     F .text	000000a8 alt_up_ps2_write_fd
00003830 g     F .text	00000050 alt_up_irda_check_parity
00004574 g     F .text	00000084 alt_up_char_buffer_init
0000d9a0 g     O .bss	001e8480 r_buf
00001be8 g     F .text	000000b8 altera_avalon_jtag_uart_init
000097d0 g       *ABS*	00000000 __CTOR_LIST__
00800000 g       *ABS*	00000000 __alt_stack_pointer
00000d70 g     F .text	00000124 HEX_PS2
000025bc g     F .text	00000088 alt_avalon_timer_sc_init
00002308 g     F .text	00000240 altera_avalon_jtag_uart_write
00007938 g     F .text	00000004 __sfp_lock_acquire
00002f74 g     F .text	00000078 alt_up_character_lcd_write
00007ccc g     F .text	00000314 _free_r
0000139c g     F .text	00000258 alt_printf
00007500 g     F .text	000001b0 __call_exitprocs
0000ba94 g     O .rwdata	00000004 __malloc_sbrk_base
000001b8 g     F .text	0000003c _start
0000d8c0 g     O .bss	00000004 _alt_tick_rate
00002c64 g     F .text	0000012c alt_up_audio_write_fifo
0000d8c4 g     O .bss	00000004 _alt_nticks
0000d89c g     O .bss	00000004 flag1
00009414 g     F .text	00000120 read
00001668 g     F .text	00000400 alt_sys_init
000031d8 g     F .text	000000b0 alt_up_character_lcd_shift_display
00002b60 g     F .text	00000104 alt_up_audio_read_fifo
000073c8 g     F .text	00000134 __register_exitproc
0000276c g     F .text	00000050 alt_up_audio_disable_write_interrupt
00004000 g     F .text	00000058 alt_up_ps2_clear_fifo
000042c4 g     F .text	00000040 alt_up_rs232_get_available_space_in_write_FIFO
00003288 g     F .text	00000090 alt_up_character_lcd_erase_pos
00001f7c g     F .text	00000074 altera_avalon_jtag_uart_close
00009ca0 g       *ABS*	00000000 __ram_rwdata_start
000097d4 g       *ABS*	00000000 __ram_rodata_start
0000d8d8 g     O .bss	00000028 __malloc_current_mallinfo
00001aa0 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00006c1c g     F .text	000000b8 alt_get_fd
000069d0 g     F .text	0000012c alt_busy_sleep
00008c68 g     F .text	00000070 _close_r
00002720 g     F .text	0000004c alt_up_audio_enable_write_interrupt
00006db0 g     F .text	00000074 memcmp
00001b50 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
003de54c g       *ABS*	00000000 __alt_stack_base
00001b98 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00003708 g     F .text	00000054 alt_up_irda_enable_read_interrupt
0000728c g     F .text	0000013c __swsetup_r
000026d0 g     F .text	00000050 alt_up_audio_disable_read_interrupt
00007ab0 g     F .text	000000f0 __sfp
0000b65c g     O .rwdata	00000408 __malloc_av_
00007944 g     F .text	00000004 __sinit_lock_release
00008b90 g     F .text	00000060 __sread
00004230 g     F .text	00000058 alt_up_rs232_disable_read_interrupt
00006afc g     F .text	00000120 alt_find_file
000060dc g     F .text	000000b4 alt_dev_llist_insert
000093d4 g     F .text	00000020 __malloc_lock
00009594 g     F .text	000000bc sbrk
000076b0 g     F .text	000001fc _fflush_r
0000d898 g       *ABS*	00000000 __bss_start
00000fec g     F .text	00000098 memset
000005d0 g     F .text	000007a0 main
00002a0c g     F .text	00000074 alt_up_audio_write_fifo_space
0000d8bc g     O .bss	00000004 alt_envp
0000d8d4 g     O .bss	00000004 __malloc_max_total_mem
00004ab0 g     F .text	00000058 alt_up_pixel_buffer_dma_swap_buffers
000045f8 g     F .text	00000040 alt_up_char_buffer_open_dev
00001af8 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00007270 g     F .text	0000001c __swbuf
00003128 g     F .text	000000b0 alt_up_character_lcd_shift_cursor
00008aa4 g     F .text	00000008 __sclose
00800000 g       *ABS*	00000000 __alt_heap_limit
00008de8 g     F .text	00000014 fclose
00003f84 g     F .text	0000007c alt_up_ps2_read_data_byte
0000d8a4 g     O .bss	00000004 timeout
003de3bc g     O .bss	00000190 _atexit0
000082f4 g     F .text	00000740 _malloc_r
0000ba7c g     O .rwdata	00000004 alt_errno
000080a8 g     F .text	000000b8 _fwalk
00003880 g     F .text	00000048 alt_up_irda_write_data
0000419c g     F .text	00000040 alt_up_ps2_open_dev
00006e24 g     F .text	00000104 putc
00002f34 g     F .text	00000040 alt_up_character_lcd_open_dev
00007ba0 g     F .text	0000012c _malloc_trim_r
00003cd4 g     F .text	00000054 alt_up_ps2_enable_read_interrupt
000097d4 g       *ABS*	00000000 __CTOR_END__
00002f00 g     F .text	00000034 alt_up_character_lcd_init
00007010 g     F .text	000000bc strcmp
000097d4 g       *ABS*	00000000 __flash_rodata_start
000097d4 g       *ABS*	00000000 __DTOR_LIST__
00004534 g     F .text	00000040 alt_up_rs232_open_dev
00001634 g     F .text	00000034 alt_irq_init
0000677c g     F .text	00000060 alt_release_fd
00003ba8 g     F .text	00000034 read_data_valid
00003318 g     F .text	00000034 alt_up_character_lcd_cursor_off
00003e68 g     F .text	0000006c alt_up_ps2_write_data_byte_with_ack
00006d64 g     F .text	00000014 atexit
00008bf0 g     F .text	00000078 _write_r
00000e94 g     F .text	000000b8 pushbutton_ISR
000001f4 g     F .text	000000c4 PS2_ISR
0000ba88 g     O .rwdata	00000004 _impure_ptr
0000d8a8 g     O .bss	00000004 buf_index_play
0000d8b4 g     O .bss	00000004 alt_argc
00006254 g     F .text	00000064 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
000079fc g     F .text	00000018 __fp_unlock_all
0000ba68 g     O .rwdata	00000008 alt_fs_list
000041dc g     F .text	00000054 alt_up_rs232_enable_read_interrupt
0000299c g     F .text	00000070 alt_up_audio_record_l
00004354 g     F .text	00000048 alt_up_rs232_write_data
00003550 g     F .text	000000e0 alt_up_ethernet_phy_reg_read
00000020 g       *ABS*	00000000 __ram_exceptions_start
0000ba9c g       *ABS*	00000000 _edata
003de54c g       *ABS*	00000000 _end
000001b8 g       *ABS*	00000000 __ram_exceptions_end
00001ff0 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
000002b8 g     F .text	000002b8 audio_ISR
001f5e20 g     O .bss	001e8480 l_buf
00002af0 g     F .text	00000070 alt_up_audio_play_l
00008b14 g     F .text	0000007c __swrite
0000ba90 g     O .rwdata	00000004 __malloc_trim_threshold
000069b0 g     F .text	00000020 altera_nios2_qsys_irq_init
00006d78 g     F .text	00000038 exit
000038c8 g     F .text	00000074 alt_up_irda_read_data
00007fe0 g     F .text	000000c8 _fwalk_reent
00003c08 g     F .text	000000cc alt_up_ps2_init
00800000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
0000793c g     F .text	00000004 __sfp_lock_release
00002fec g     F .text	00000078 alt_up_character_lcd_string
00003a5c g     F .text	00000040 alt_up_irda_open_dev
00009010 g     F .text	00000020 _exit
00005de4 g     F .text	00000154 alt_alarm_start
00008160 g     F .text	00000194 __smakebuf_r
00003df8 g     F .text	00000070 alt_up_ps2_wait_for_ack
000070cc g     F .text	00000074 strlen
00003490 g     F .text	00000040 alt_up_ethernet_open_dev
00006594 g     F .text	00000188 open
000015f4 g     F .text	00000040 alt_putchar
0000d8ac g     O .bss	00000004 buf_index_record
0000634c g     F .text	00000030 alt_icache_flush_all
00003630 g     F .text	000000d8 alt_up_ethernet_phy_reg_write
000030b0 g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
0000ba64 g     O .rwdata	00000004 alt_priority_mask
00004058 g     F .text	0000009c alt_up_ps2_read_fd
0000393c g     F .text	00000090 alt_up_irda_read_fd
0000ba80 g     O .rwdata	00000008 alt_alarm_list
000061f0 g     F .text	00000064 _do_ctors
00004288 g     F .text	0000003c alt_up_rs232_get_used_space_in_read_FIFO
00005f38 g     F .text	000000fc close
00001244 g     F .text	00000080 alt_load
000034d0 g     F .text	0000003c alt_up_ethernet_reg_read
00002684 g     F .text	0000004c alt_up_audio_enable_read_interrupt
00000000  w      *UND*	00000000 free
00007940 g     F .text	00000004 __sinit_lock_acquire
000027bc g     F .text	0000003c alt_up_audio_read_interrupt_pending



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406e14 	ori	at,at,440
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  fc:	0005313a 	rdctl	r2,ipending
 100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 10c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 110:	00800044 	movi	r2,1
 114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 118:	e0ffff17 	ldw	r3,-4(fp)
 11c:	e0bffe17 	ldw	r2,-8(fp)
 120:	1884703a 	and	r2,r3,r2
 124:	1005003a 	cmpeq	r2,r2,zero
 128:	1000171e 	bne	r2,zero,188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 12c:	e0bffd17 	ldw	r2,-12(fp)
 130:	00c00fb4 	movhi	r3,62
 134:	18f8af04 	addi	r3,r3,-7492
 138:	100490fa 	slli	r2,r2,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	11800017 	ldw	r6,0(r2)
 144:	e0bffd17 	ldw	r2,-12(fp)
 148:	00c00fb4 	movhi	r3,62
 14c:	18f8af04 	addi	r3,r3,-7492
 150:	100490fa 	slli	r2,r2,3
 154:	10c5883a 	add	r2,r2,r3
 158:	10800104 	addi	r2,r2,4
 15c:	11000017 	ldw	r4,0(r2)
 160:	e17ffd17 	ldw	r5,-12(fp)
 164:	303ee83a 	callr	r6
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 168:	0005313a 	rdctl	r2,ipending
 16c:	e0bffb15 	stw	r2,-20(fp)

  return active;
 170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 178:	e0bfff17 	ldw	r2,-4(fp)
 17c:	1004c03a 	cmpne	r2,r2,zero
 180:	103fe21e 	bne	r2,zero,10c <alt_irq_handler+0x20>
 184:	00000706 	br	1a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 188:	e0bffe17 	ldw	r2,-8(fp)
 18c:	1085883a 	add	r2,r2,r2
 190:	e0bffe15 	stw	r2,-8(fp)
      i++;
 194:	e0bffd17 	ldw	r2,-12(fp)
 198:	10800044 	addi	r2,r2,1
 19c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a0:	003fdd06 	br	118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a4:	e037883a 	mov	sp,fp
 1a8:	dfc00117 	ldw	ra,4(sp)
 1ac:	df000017 	ldw	fp,0(sp)
 1b0:	dec00204 	addi	sp,sp,8
 1b4:	f800283a 	ret

Disassembly of section .text:

000001b8 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1b8:	06c02034 	movhi	sp,128
    ori sp, sp, %lo(__alt_stack_pointer)
     1bc:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1c0:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1c4:	d68e9914 	ori	gp,gp,14948
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1c8:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     1cc:	10b62614 	ori	r2,r2,55448

    movhi r3, %hi(__bss_end)
     1d0:	00c00f74 	movhi	r3,61
    ori r3, r3, %lo(__bss_end)
     1d4:	18f95314 	ori	r3,r3,58700

    beq r2, r3, 1f
     1d8:	10c00326 	beq	r2,r3,1e8 <_start+0x30>

0:
    stw zero, (r2)
     1dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1e4:	10fffd36 	bltu	r2,r3,1dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1e8:	00012440 	call	1244 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1ec:	00013300 	call	1330 <alt_main>

000001f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1f0:	003fff06 	br	1f0 <alt_after_alt_main>

000001f4 <PS2_ISR>:
 * This routine checks which KEY has been pressed. If it is KEY1 or KEY2, it writes this 
 * value to the global variable key_pressed. If it is KEY3 then it loads the SW switch 
 * values and stores in the variable pattern
****************************************************************************************/
void PS2_ISR(struct alt_up_dev *up_dev, unsigned int id)
{
     1f4:	defffb04 	addi	sp,sp,-20
     1f8:	dfc00415 	stw	ra,16(sp)
     1fc:	df000315 	stw	fp,12(sp)
     200:	df000304 	addi	fp,sp,12
     204:	e13ffe15 	stw	r4,-8(fp)
     208:	e17fff15 	stw	r5,-4(fp)
	unsigned char PS2_data;

	/* check for PS/2 data--display on HEX displays */
	if (alt_up_ps2_read_data_byte (up_dev->PS2_dev, &PS2_data) == 0)
     20c:	e0bffe17 	ldw	r2,-8(fp)
     210:	11000217 	ldw	r4,8(r2)
     214:	e17ffd04 	addi	r5,fp,-12
     218:	0003f840 	call	3f84 <alt_up_ps2_read_data_byte>
     21c:	1004c03a 	cmpne	r2,r2,zero
     220:	1000201e 	bne	r2,zero,2a4 <PS2_ISR+0xb0>
	{
		/* allows save the last three bytes of data */
		byte1 = byte2;
     224:	00800074 	movhi	r2,1
     228:	10b62804 	addi	r2,r2,-10080
     22c:	10c00003 	ldbu	r3,0(r2)
     230:	00800074 	movhi	r2,1
     234:	10b62884 	addi	r2,r2,-10078
     238:	10c00005 	stb	r3,0(r2)
		byte2 = byte3;
     23c:	00800074 	movhi	r2,1
     240:	10b62844 	addi	r2,r2,-10079
     244:	10c00003 	ldbu	r3,0(r2)
     248:	00800074 	movhi	r2,1
     24c:	10b62804 	addi	r2,r2,-10080
     250:	10c00005 	stb	r3,0(r2)
		byte3 = PS2_data;
     254:	e0fffd03 	ldbu	r3,-12(fp)
     258:	00800074 	movhi	r2,1
     25c:	10b62844 	addi	r2,r2,-10079
     260:	10c00005 	stb	r3,0(r2)
		if ( (byte2 == (unsigned char) 0xAA) && (byte3 == (unsigned char) 0x00) )
     264:	00800074 	movhi	r2,1
     268:	10b62804 	addi	r2,r2,-10080
     26c:	10800003 	ldbu	r2,0(r2)
     270:	10803fcc 	andi	r2,r2,255
     274:	10802a98 	cmpnei	r2,r2,170
     278:	10000a1e 	bne	r2,zero,2a4 <PS2_ISR+0xb0>
     27c:	00800074 	movhi	r2,1
     280:	10b62844 	addi	r2,r2,-10079
     284:	10800003 	ldbu	r2,0(r2)
     288:	10803fcc 	andi	r2,r2,255
     28c:	1004c03a 	cmpne	r2,r2,zero
     290:	1000041e 	bne	r2,zero,2a4 <PS2_ISR+0xb0>
			// mouse inserted; initialize sending of data
			(void) alt_up_ps2_write_data_byte (up_dev->PS2_dev, (unsigned char) 0xF4);
     294:	e0bffe17 	ldw	r2,-8(fp)
     298:	11000217 	ldw	r4,8(r2)
     29c:	01403d04 	movi	r5,244
     2a0:	0003d800 	call	3d80 <alt_up_ps2_write_data_byte>
	}
	return;
}
     2a4:	e037883a 	mov	sp,fp
     2a8:	dfc00117 	ldw	ra,4(sp)
     2ac:	df000017 	ldw	fp,0(sp)
     2b0:	dec00204 	addi	sp,sp,8
     2b4:	f800283a 	ret

000002b8 <audio_ISR>:
 *                                                                          
 * This interrupt service routine records or plays back audio, depending on which type
 * interrupt (read or write) is pending in the audio device.
****************************************************************************************/
void audio_ISR(struct alt_up_dev *up_dev, unsigned int id)
{
     2b8:	defff804 	addi	sp,sp,-32
     2bc:	dfc00715 	stw	ra,28(sp)
     2c0:	df000615 	stw	fp,24(sp)
     2c4:	df000604 	addi	fp,sp,24
     2c8:	e13ffe15 	stw	r4,-8(fp)
     2cc:	e17fff15 	stw	r5,-4(fp)
	int num_read; int num_written;

	unsigned int fifospace;
	int k;
		
	if (alt_up_audio_read_interrupt_pending(up_dev->audio_dev))	// check for read interrupt
     2d0:	e0bffe17 	ldw	r2,-8(fp)
     2d4:	11000417 	ldw	r4,16(r2)
     2d8:	00027bc0 	call	27bc <alt_up_audio_read_interrupt_pending>
     2dc:	1005003a 	cmpeq	r2,r2,zero
     2e0:	1000541e 	bne	r2,zero,434 <audio_ISR+0x17c>
	{
		alt_up_parallel_port_write_data (up_dev->green_LEDs_dev, 0x1); // set LEDG[0] on
     2e4:	e0bffe17 	ldw	r2,-8(fp)
     2e8:	10800117 	ldw	r2,4(r2)
     2ec:	10800a17 	ldw	r2,40(r2)
     2f0:	1007883a 	mov	r3,r2
     2f4:	00800044 	movi	r2,1
     2f8:	18800035 	stwio	r2,0(r3)

		// store data until the buffer is full
		if (buf_index_record < BUF_SIZE)
     2fc:	00800074 	movhi	r2,1
     300:	10b62b04 	addi	r2,r2,-10068
     304:	10c00017 	ldw	r3,0(r2)
     308:	00800234 	movhi	r2,8
     30c:	10a847c4 	addi	r2,r2,-24289
     310:	10c04816 	blt	r2,r3,434 <audio_ISR+0x17c>
		{
			num_read = alt_up_audio_record_r (up_dev->audio_dev, &(r_buf[buf_index_record]), 
     314:	e0bffe17 	ldw	r2,-8(fp)
     318:	11000417 	ldw	r4,16(r2)
     31c:	00800074 	movhi	r2,1
     320:	10b62b04 	addi	r2,r2,-10068
     324:	10800017 	ldw	r2,0(r2)
     328:	1085883a 	add	r2,r2,r2
     32c:	1085883a 	add	r2,r2,r2
     330:	1007883a 	mov	r3,r2
     334:	00800074 	movhi	r2,1
     338:	10b66804 	addi	r2,r2,-9824
     33c:	1885883a 	add	r2,r3,r2
     340:	100b883a 	mov	r5,r2
     344:	00800074 	movhi	r2,1
     348:	10b62b04 	addi	r2,r2,-10068
     34c:	10c00017 	ldw	r3,0(r2)
     350:	00800234 	movhi	r2,8
     354:	10a84804 	addi	r2,r2,-24288
     358:	10cdc83a 	sub	r6,r2,r3
     35c:	000292c0 	call	292c <alt_up_audio_record_r>
     360:	e0bffd15 	stw	r2,-12(fp)
				BUF_SIZE - buf_index_record);
			/* assume we can read same # words from the left and right */
			(void) alt_up_audio_record_l (up_dev->audio_dev, &(l_buf[buf_index_record]), 
     364:	e0bffe17 	ldw	r2,-8(fp)
     368:	11000417 	ldw	r4,16(r2)
     36c:	00800074 	movhi	r2,1
     370:	10b62b04 	addi	r2,r2,-10068
     374:	10800017 	ldw	r2,0(r2)
     378:	1085883a 	add	r2,r2,r2
     37c:	1085883a 	add	r2,r2,r2
     380:	1007883a 	mov	r3,r2
     384:	008007f4 	movhi	r2,31
     388:	10978804 	addi	r2,r2,24096
     38c:	1885883a 	add	r2,r3,r2
     390:	100b883a 	mov	r5,r2
     394:	e1bffd17 	ldw	r6,-12(fp)
     398:	000299c0 	call	299c <alt_up_audio_record_l>
				num_read);
			buf_index_record += num_read;
     39c:	00800074 	movhi	r2,1
     3a0:	10b62b04 	addi	r2,r2,-10068
     3a4:	10c00017 	ldw	r3,0(r2)
     3a8:	e0bffd17 	ldw	r2,-12(fp)
     3ac:	1887883a 	add	r3,r3,r2
     3b0:	00800074 	movhi	r2,1
     3b4:	10b62b04 	addi	r2,r2,-10068
     3b8:	10c00015 	stw	r3,0(r2)

			if (buf_index_record == BUF_SIZE)
     3bc:	00800074 	movhi	r2,1
     3c0:	10b62b04 	addi	r2,r2,-10068
     3c4:	10c00017 	ldw	r3,0(r2)
     3c8:	00800234 	movhi	r2,8
     3cc:	10a84804 	addi	r2,r2,-24288
     3d0:	1880181e 	bne	r3,r2,434 <audio_ISR+0x17c>
			{
				// done recording
				for (k=0;k<N;k++)
     3d4:	e03ffa15 	stw	zero,-24(fp)
     3d8:	00000a06 	br	404 <audio_ISR+0x14c>
					average[k]=0;
     3dc:	e0bffa17 	ldw	r2,-24(fp)
     3e0:	00c00074 	movhi	r3,1
     3e4:	18f64004 	addi	r3,r3,-9984
     3e8:	100490fa 	slli	r2,r2,3
     3ec:	10c5883a 	add	r2,r2,r3
     3f0:	10000015 	stw	zero,0(r2)
     3f4:	10000115 	stw	zero,4(r2)
			buf_index_record += num_read;

			if (buf_index_record == BUF_SIZE)
			{
				// done recording
				for (k=0;k<N;k++)
     3f8:	e0bffa17 	ldw	r2,-24(fp)
     3fc:	10800044 	addi	r2,r2,1
     400:	e0bffa15 	stw	r2,-24(fp)
     404:	e0bffa17 	ldw	r2,-24(fp)
     408:	10800510 	cmplti	r2,r2,20
     40c:	103ff31e 	bne	r2,zero,3dc <audio_ISR+0x124>
					average[k]=0;
				flag=1;
     410:	00800044 	movi	r2,1
     414:	d0a78d15 	stw	r2,-25036(gp)
				alt_up_parallel_port_write_data (up_dev->green_LEDs_dev, 0); // turn off LEDG
     418:	e0bffe17 	ldw	r2,-8(fp)
     41c:	10800117 	ldw	r2,4(r2)
     420:	10800a17 	ldw	r2,40(r2)
     424:	10000035 	stwio	zero,0(r2)
				alt_up_audio_disable_read_interrupt(up_dev->audio_dev);
     428:	e0bffe17 	ldw	r2,-8(fp)
     42c:	11000417 	ldw	r4,16(r2)
     430:	00026d00 	call	26d0 <alt_up_audio_disable_read_interrupt>
			}
		}
	}
	if (alt_up_audio_write_interrupt_pending(up_dev->audio_dev))	// check for write interrupt
     434:	e0bffe17 	ldw	r2,-8(fp)
     438:	11000417 	ldw	r4,16(r2)
     43c:	00027f80 	call	27f8 <alt_up_audio_write_interrupt_pending>
     440:	1005003a 	cmpeq	r2,r2,zero
     444:	1000451e 	bne	r2,zero,55c <audio_ISR+0x2a4>
	{
		alt_up_parallel_port_write_data (up_dev->green_LEDs_dev, 0x2); // set LEDG[1] on
     448:	e0bffe17 	ldw	r2,-8(fp)
     44c:	10800117 	ldw	r2,4(r2)
     450:	10800a17 	ldw	r2,40(r2)
     454:	1007883a 	mov	r3,r2
     458:	00800084 	movi	r2,2
     45c:	18800035 	stwio	r2,0(r3)
		flag1=1;
     460:	00800044 	movi	r2,1
     464:	d0a78e15 	stw	r2,-25032(gp)
		// output data until the buffer is empty 
		if (buf_index_play < BUF_SIZE)
     468:	00800074 	movhi	r2,1
     46c:	10b62a04 	addi	r2,r2,-10072
     470:	10c00017 	ldw	r3,0(r2)
     474:	00800234 	movhi	r2,8
     478:	10a847c4 	addi	r2,r2,-24289
     47c:	10c03716 	blt	r2,r3,55c <audio_ISR+0x2a4>
		{
			num_written = alt_up_audio_play_r (up_dev->audio_dev, &(r_buf[buf_index_play]), 
     480:	e0bffe17 	ldw	r2,-8(fp)
     484:	11000417 	ldw	r4,16(r2)
     488:	00800074 	movhi	r2,1
     48c:	10b62a04 	addi	r2,r2,-10072
     490:	10800017 	ldw	r2,0(r2)
     494:	1085883a 	add	r2,r2,r2
     498:	1085883a 	add	r2,r2,r2
     49c:	1007883a 	mov	r3,r2
     4a0:	00800074 	movhi	r2,1
     4a4:	10b66804 	addi	r2,r2,-9824
     4a8:	1885883a 	add	r2,r3,r2
     4ac:	100b883a 	mov	r5,r2
     4b0:	00800074 	movhi	r2,1
     4b4:	10b62a04 	addi	r2,r2,-10072
     4b8:	10c00017 	ldw	r3,0(r2)
     4bc:	00800234 	movhi	r2,8
     4c0:	10a84804 	addi	r2,r2,-24288
     4c4:	10cdc83a 	sub	r6,r2,r3
     4c8:	0002a800 	call	2a80 <alt_up_audio_play_r>
     4cc:	e0bffc15 	stw	r2,-16(fp)
			 	BUF_SIZE - buf_index_play);
			/* assume that we can write the same # words to the left and right */
			(void) alt_up_audio_play_l (up_dev->audio_dev, &(l_buf[buf_index_play]), 
     4d0:	e0bffe17 	ldw	r2,-8(fp)
     4d4:	11000417 	ldw	r4,16(r2)
     4d8:	00800074 	movhi	r2,1
     4dc:	10b62a04 	addi	r2,r2,-10072
     4e0:	10800017 	ldw	r2,0(r2)
     4e4:	1085883a 	add	r2,r2,r2
     4e8:	1085883a 	add	r2,r2,r2
     4ec:	1007883a 	mov	r3,r2
     4f0:	008007f4 	movhi	r2,31
     4f4:	10978804 	addi	r2,r2,24096
     4f8:	1885883a 	add	r2,r3,r2
     4fc:	100b883a 	mov	r5,r2
     500:	e1bffc17 	ldw	r6,-16(fp)
     504:	0002af00 	call	2af0 <alt_up_audio_play_l>
				num_written);
			buf_index_play += num_written;
     508:	00800074 	movhi	r2,1
     50c:	10b62a04 	addi	r2,r2,-10072
     510:	10c00017 	ldw	r3,0(r2)
     514:	e0bffc17 	ldw	r2,-16(fp)
     518:	1887883a 	add	r3,r3,r2
     51c:	00800074 	movhi	r2,1
     520:	10b62a04 	addi	r2,r2,-10072
     524:	10c00015 	stw	r3,0(r2)
	
			if (buf_index_play == BUF_SIZE)
     528:	00800074 	movhi	r2,1
     52c:	10b62a04 	addi	r2,r2,-10072
     530:	10c00017 	ldw	r3,0(r2)
     534:	00800234 	movhi	r2,8
     538:	10a84804 	addi	r2,r2,-24288
     53c:	1880071e 	bne	r3,r2,55c <audio_ISR+0x2a4>
			{
				// done playback
				alt_up_parallel_port_write_data (up_dev->green_LEDs_dev, 0); // turn off LEDG
     540:	e0bffe17 	ldw	r2,-8(fp)
     544:	10800117 	ldw	r2,4(r2)
     548:	10800a17 	ldw	r2,40(r2)
     54c:	10000035 	stwio	zero,0(r2)
				alt_up_audio_disable_write_interrupt(up_dev->audio_dev);
     550:	e0bffe17 	ldw	r2,-8(fp)
     554:	11000417 	ldw	r4,16(r2)
     558:	000276c0 	call	276c <alt_up_audio_disable_write_interrupt>
			}
		}
	}
	return;
}
     55c:	e037883a 	mov	sp,fp
     560:	dfc00117 	ldw	ra,4(sp)
     564:	df000017 	ldw	fp,0(sp)
     568:	dec00204 	addi	sp,sp,8
     56c:	f800283a 	ret

00000570 <interval_timer_ISR>:
 * Shifts a PATTERN being displayed on the LCD character display. The shift 
 * direction is determined by the external variable KEY_PRESSED.
 * 
******************************************************************************/
void interval_timer_ISR(struct alt_up_dev *up_dev, unsigned int id)
{
     570:	defffb04 	addi	sp,sp,-20
     574:	dfc00415 	stw	ra,16(sp)
     578:	df000315 	stw	fp,12(sp)
     57c:	df000304 	addi	fp,sp,12
     580:	e13ffe15 	stw	r4,-8(fp)
     584:	e17fff15 	stw	r5,-4(fp)
	volatile int *interval_timer_ptr = (int *) 0x10002000;
     588:	00840034 	movhi	r2,4096
     58c:	10880004 	addi	r2,r2,8192
     590:	e0bffd15 	stw	r2,-12(fp)

	*(interval_timer_ptr) = 0; 										// clear the interrupt
     594:	e0bffd17 	ldw	r2,-12(fp)
     598:	10000015 	stw	zero,0(r2)
	timeout = 1;															// set global variable
     59c:	00c00074 	movhi	r3,1
     5a0:	18f62904 	addi	r3,r3,-10076
     5a4:	00800044 	movi	r2,1
     5a8:	18800015 	stw	r2,0(r3)

	/* shift the LCD display to the left */
	alt_up_character_lcd_shift_display (up_dev->lcd_dev, -1);
     5ac:	e0bffe17 	ldw	r2,-8(fp)
     5b0:	11000317 	ldw	r4,12(r2)
     5b4:	017fffc4 	movi	r5,-1
     5b8:	00031d80 	call	31d8 <alt_up_character_lcd_shift_display>

	return;
}
     5bc:	e037883a 	mov	sp,fp
     5c0:	dfc00117 	ldw	ra,4(sp)
     5c4:	df000017 	ldw	fp,0(sp)
     5c8:	dec00204 	addi	sp,sp,8
     5cc:	f800283a 	ret

000005d0 <main>:
 * 	   interrupts
 * 	6. The speed of scrolling the LCD display and of refreshing the VGA screen
 * 	   are controlled by interrupts from the interval timer
********************************************************************************/
int main(void)
{
     5d0:	deffb904 	addi	sp,sp,-284
     5d4:	dfc04615 	stw	ra,280(sp)
     5d8:	df004515 	stw	fp,276(sp)
     5dc:	df004504 	addi	fp,sp,276
	alt_up_character_lcd_dev *lcd_dev;
	alt_up_audio_dev *audio_dev;
	alt_up_char_buffer_dev *char_buffer_dev;
	alt_up_pixel_buffer_dma_dev *pixel_buffer_dev;
	/* declare volatile pointer for interval timer, which does not have HAL functions */
	volatile int * interval_timer_ptr = (int *) 0x10002000;	// interal timer base address
     5e0:	00840034 	movhi	r2,4096
     5e4:	10880004 	addi	r2,r2,8192
     5e8:	e0bfd015 	stw	r2,-192(fp)
	int i,j;
	int k=(320/N)-2;
     5ec:	00800384 	movi	r2,14
     5f0:	e0bfcd15 	stw	r2,-204(fp)

	/* initialize some variables */
	byte1 = 0; byte2 = 0; byte3 = 0; 			// used to hold PS/2 data
     5f4:	00800074 	movhi	r2,1
     5f8:	10b62884 	addi	r2,r2,-10078
     5fc:	10000005 	stb	zero,0(r2)
     600:	00800074 	movhi	r2,1
     604:	10b62804 	addi	r2,r2,-10080
     608:	10000005 	stb	zero,0(r2)
     60c:	00800074 	movhi	r2,1
     610:	10b62844 	addi	r2,r2,-10079
     614:	10000005 	stb	zero,0(r2)
	timeout = 0;										// synchronize with the timer
     618:	00800074 	movhi	r2,1
     61c:	10b62904 	addi	r2,r2,-10076
     620:	10000015 	stw	zero,0(r2)
	int ALT_x1; int ALT_x2; int ALT_y; 
	int ALT_inc_x; int ALT_inc_y;
	int blue_x1; int blue_y1; int blue_x2; int blue_y2; 
	int screen_x; int screen_y; int char_buffer_x; int char_buffer_y;
	short color;
	flag1=0;
     624:	d0278e15 	stw	zero,-25032(gp)
	/* set the interval timer period for scrolling the HEX displays */
	int counter = 0x960000;				// 1/(50 MHz) x (0x960000) ~= 200 msec
     628:	008025b4 	movhi	r2,150
     62c:	e0bfbe15 	stw	r2,-264(fp)
	*(interval_timer_ptr + 0x2) = (counter & 0xFFFF);
     630:	e0bfd017 	ldw	r2,-192(fp)
     634:	10c00204 	addi	r3,r2,8
     638:	e0bfbe17 	ldw	r2,-264(fp)
     63c:	10bfffcc 	andi	r2,r2,65535
     640:	18800015 	stw	r2,0(r3)
	*(interval_timer_ptr + 0x3) = (counter >> 16) & 0xFFFF;
     644:	e0bfd017 	ldw	r2,-192(fp)
     648:	10c00304 	addi	r3,r2,12
     64c:	e0bfbe17 	ldw	r2,-264(fp)
     650:	1005d43a 	srai	r2,r2,16
     654:	10bfffcc 	andi	r2,r2,65535
     658:	18800015 	stw	r2,0(r3)

	/* start interval timer, enable its interrupts */
	*(interval_timer_ptr + 1) = 0x7;	// STOP = 0, START = 1, CONT = 1, ITO = 1 
     65c:	e0bfd017 	ldw	r2,-192(fp)
     660:	10c00104 	addi	r3,r2,4
     664:	008001c4 	movi	r2,7
     668:	18800015 	stw	r2,0(r3)
	flag=0;
     66c:	d0278d15 	stw	zero,-25036(gp)
	// open the pushbuttom KEY parallel port
	KEY_dev = alt_up_parallel_port_open_dev ("/dev/Pushbuttons");
     670:	01000074 	movhi	r4,1
     674:	2125f504 	addi	r4,r4,-26668
     678:	0003a9c0 	call	3a9c <alt_up_parallel_port_open_dev>
     67c:	e0bfd715 	stw	r2,-164(fp)
	if ( KEY_dev == NULL)
     680:	e0bfd717 	ldw	r2,-164(fp)
     684:	1004c03a 	cmpne	r2,r2,zero
     688:	1000061e 	bne	r2,zero,6a4 <main+0xd4>
	{
		alt_printf ("Error: could not open pushbutton KEY device\n");
     68c:	01000074 	movhi	r4,1
     690:	2125fa04 	addi	r4,r4,-26648
     694:	000139c0 	call	139c <alt_printf>
		return -1;
     698:	00bfffc4 	movi	r2,-1
     69c:	e0bfff15 	stw	r2,-4(fp)
     6a0:	0001ad06 	br	d58 <main+0x788>
	}
	else
	{
		alt_printf ("Opened pushbutton KEY device\n");
     6a4:	01000074 	movhi	r4,1
     6a8:	21260604 	addi	r4,r4,-26600
     6ac:	000139c0 	call	139c <alt_printf>
		up_dev.KEY_dev = KEY_dev;	// store for use by ISRs
     6b0:	00c00fb4 	movhi	r3,62
     6b4:	18f8a804 	addi	r3,r3,-7520
     6b8:	e0bfd717 	ldw	r2,-164(fp)
     6bc:	18800015 	stw	r2,0(r3)
	}
	/* write to the pushbutton interrupt mask register, and set 3 mask bits to 1 
	 * (bit 0 is Nios II reset) */
	alt_up_parallel_port_set_interrupt_mask (KEY_dev, 0xE);
     6c0:	e0bfd717 	ldw	r2,-164(fp)
     6c4:	10800a17 	ldw	r2,40(r2)
     6c8:	10800204 	addi	r2,r2,8
     6cc:	1007883a 	mov	r3,r2
     6d0:	00800384 	movi	r2,14
     6d4:	18800035 	stwio	r2,0(r3)

	// open the green LEDs parallel port
	green_LEDs_dev = alt_up_parallel_port_open_dev ("/dev/Green_LEDs");
     6d8:	01000074 	movhi	r4,1
     6dc:	21260e04 	addi	r4,r4,-26568
     6e0:	0003a9c0 	call	3a9c <alt_up_parallel_port_open_dev>
     6e4:	e0bfd615 	stw	r2,-168(fp)
	if ( green_LEDs_dev == NULL)
     6e8:	e0bfd617 	ldw	r2,-168(fp)
     6ec:	1004c03a 	cmpne	r2,r2,zero
     6f0:	1000061e 	bne	r2,zero,70c <main+0x13c>
	{
		alt_printf ("Error: could not open green LEDs device\n");
     6f4:	01000074 	movhi	r4,1
     6f8:	21261204 	addi	r4,r4,-26552
     6fc:	000139c0 	call	139c <alt_printf>
		return -1;
     700:	00ffffc4 	movi	r3,-1
     704:	e0ffff15 	stw	r3,-4(fp)
     708:	00019306 	br	d58 <main+0x788>
	}
	else
	{
		alt_printf ("Opened green LEDs device\n");
     70c:	01000074 	movhi	r4,1
     710:	21261d04 	addi	r4,r4,-26508
     714:	000139c0 	call	139c <alt_printf>
		up_dev.green_LEDs_dev = green_LEDs_dev;	// store for use by ISRs
     718:	00c00fb4 	movhi	r3,62
     71c:	18f8a804 	addi	r3,r3,-7520
     720:	e0bfd617 	ldw	r2,-168(fp)
     724:	18800115 	stw	r2,4(r3)
	}

	// open the PS2 port
	PS2_dev = alt_up_ps2_open_dev ("/dev/PS2_Port");
     728:	01000074 	movhi	r4,1
     72c:	21262404 	addi	r4,r4,-26480
     730:	000419c0 	call	419c <alt_up_ps2_open_dev>
     734:	e0bfd515 	stw	r2,-172(fp)
	if ( PS2_dev == NULL)
     738:	e0bfd517 	ldw	r2,-172(fp)
     73c:	1004c03a 	cmpne	r2,r2,zero
     740:	1000061e 	bne	r2,zero,75c <main+0x18c>
	{
		alt_printf ("Error: could not open PS2 device\n");
     744:	01000074 	movhi	r4,1
     748:	21262804 	addi	r4,r4,-26464
     74c:	000139c0 	call	139c <alt_printf>
		return -1;
     750:	01bfffc4 	movi	r6,-1
     754:	e1bfff15 	stw	r6,-4(fp)
     758:	00017f06 	br	d58 <main+0x788>
	}
	else
	{
		alt_printf ("Opened PS2 device\n");
     75c:	01000074 	movhi	r4,1
     760:	21263104 	addi	r4,r4,-26428
     764:	000139c0 	call	139c <alt_printf>
		up_dev.PS2_dev = PS2_dev;	// store for use by ISRs
     768:	00c00fb4 	movhi	r3,62
     76c:	18f8a804 	addi	r3,r3,-7520
     770:	e0bfd517 	ldw	r2,-172(fp)
     774:	18800215 	stw	r2,8(r3)
	}
	(void) alt_up_ps2_write_data_byte (PS2_dev, 0xFF);		// reset
     778:	e13fd517 	ldw	r4,-172(fp)
     77c:	01403fc4 	movi	r5,255
     780:	0003d800 	call	3d80 <alt_up_ps2_write_data_byte>
	alt_up_ps2_enable_read_interrupt (PS2_dev); // enable interrupts from PS/2 port
     784:	e13fd517 	ldw	r4,-172(fp)
     788:	0003cd40 	call	3cd4 <alt_up_ps2_enable_read_interrupt>

	// open the audio port
	audio_dev = alt_up_audio_open_dev ("/dev/Audio");
     78c:	01000074 	movhi	r4,1
     790:	21263604 	addi	r4,r4,-26408
     794:	00026440 	call	2644 <alt_up_audio_open_dev>
     798:	e0bfd315 	stw	r2,-180(fp)
	if ( audio_dev == NULL)
     79c:	e0bfd317 	ldw	r2,-180(fp)
     7a0:	1004c03a 	cmpne	r2,r2,zero
     7a4:	1000061e 	bne	r2,zero,7c0 <main+0x1f0>
	{
		alt_printf ("Error: could not open audio device\n");
     7a8:	01000074 	movhi	r4,1
     7ac:	21263904 	addi	r4,r4,-26396
     7b0:	000139c0 	call	139c <alt_printf>
		return -1;
     7b4:	01ffffc4 	movi	r7,-1
     7b8:	e1ffff15 	stw	r7,-4(fp)
     7bc:	00016606 	br	d58 <main+0x788>
	}
	else
	{
		alt_printf ("Opened audio device\n");
     7c0:	01000074 	movhi	r4,1
     7c4:	21264204 	addi	r4,r4,-26360
     7c8:	000139c0 	call	139c <alt_printf>
		up_dev.audio_dev = audio_dev;	// store for use by ISRs
     7cc:	00c00fb4 	movhi	r3,62
     7d0:	18f8a804 	addi	r3,r3,-7520
     7d4:	e0bfd317 	ldw	r2,-180(fp)
     7d8:	18800415 	stw	r2,16(r3)
	}

	// open the 16x2 character display port
	lcd_dev = alt_up_character_lcd_open_dev ("/dev/Char_LCD_16x2");
     7dc:	01000074 	movhi	r4,1
     7e0:	21264804 	addi	r4,r4,-26336
     7e4:	0002f340 	call	2f34 <alt_up_character_lcd_open_dev>
     7e8:	e0bfd415 	stw	r2,-176(fp)
	if ( lcd_dev == NULL)
     7ec:	e0bfd417 	ldw	r2,-176(fp)
     7f0:	1004c03a 	cmpne	r2,r2,zero
     7f4:	1000061e 	bne	r2,zero,810 <main+0x240>
	{
		alt_printf ("Error: could not open character LCD device\n");
     7f8:	01000074 	movhi	r4,1
     7fc:	21264d04 	addi	r4,r4,-26316
     800:	000139c0 	call	139c <alt_printf>
		return -1;
     804:	00bfffc4 	movi	r2,-1
     808:	e0bfff15 	stw	r2,-4(fp)
     80c:	00015206 	br	d58 <main+0x788>
	}
	else
	{
		alt_printf ("Opened character LCD device\n");
     810:	01000074 	movhi	r4,1
     814:	21265804 	addi	r4,r4,-26272
     818:	000139c0 	call	139c <alt_printf>
		up_dev.lcd_dev = lcd_dev;	// store for use by ISRs
     81c:	00c00fb4 	movhi	r3,62
     820:	18f8a804 	addi	r3,r3,-7520
     824:	e0bfd417 	ldw	r2,-176(fp)
     828:	18800315 	stw	r2,12(r3)
	/* use the HAL facility for registering interrupt service routines. */
	/* Note: we are passsing a pointer to up_dev to each ISR (using the context argument) as 
	 * a way of giving the ISR a pointer to every open device. This is useful because some of the
	 * ISRs need to access more than just one device (e.g. the pushbutton ISR accesses both
	 * the pushbutton device and the audio device) */
	alt_irq_register (0, (void *) &up_dev, (void *) interval_timer_ISR);
     82c:	01800034 	movhi	r6,0
     830:	31815c04 	addi	r6,r6,1392
     834:	0009883a 	mov	r4,zero
     838:	01400fb4 	movhi	r5,62
     83c:	2978a804 	addi	r5,r5,-7520
     840:	00010840 	call	1084 <alt_irq_register>
	alt_irq_register (1, (void *) &up_dev, (void *) pushbutton_ISR);
     844:	01800034 	movhi	r6,0
     848:	3183a504 	addi	r6,r6,3732
     84c:	01000044 	movi	r4,1
     850:	01400fb4 	movhi	r5,62
     854:	2978a804 	addi	r5,r5,-7520
     858:	00010840 	call	1084 <alt_irq_register>
	alt_irq_register (6, (void *) &up_dev, (void *) audio_ISR);
     85c:	01800034 	movhi	r6,0
     860:	3180ae04 	addi	r6,r6,696
     864:	01000184 	movi	r4,6
     868:	01400fb4 	movhi	r5,62
     86c:	2978a804 	addi	r5,r5,-7520
     870:	00010840 	call	1084 <alt_irq_register>
	alt_irq_register (7, (void *) &up_dev, (void *) PS2_ISR);
     874:	01800034 	movhi	r6,0
     878:	31807d04 	addi	r6,r6,500
     87c:	010001c4 	movi	r4,7
     880:	01400fb4 	movhi	r5,62
     884:	2978a804 	addi	r5,r5,-7520
     888:	00010840 	call	1084 <alt_irq_register>

	/* create a messages to be displayed on the VGA and LCD displays */
	char text_top_LCD[80] = "Welcome to the DE2 Media Computer...\0";
     88c:	00c00074 	movhi	r3,1
     890:	18e69204 	addi	r3,r3,-26040
     894:	18800017 	ldw	r2,0(r3)
     898:	e0bfd815 	stw	r2,-160(fp)
     89c:	18800117 	ldw	r2,4(r3)
     8a0:	e0bfd915 	stw	r2,-156(fp)
     8a4:	18800217 	ldw	r2,8(r3)
     8a8:	e0bfda15 	stw	r2,-152(fp)
     8ac:	18800317 	ldw	r2,12(r3)
     8b0:	e0bfdb15 	stw	r2,-148(fp)
     8b4:	18800417 	ldw	r2,16(r3)
     8b8:	e0bfdc15 	stw	r2,-144(fp)
     8bc:	18800517 	ldw	r2,20(r3)
     8c0:	e0bfdd15 	stw	r2,-140(fp)
     8c4:	18800617 	ldw	r2,24(r3)
     8c8:	e0bfde15 	stw	r2,-136(fp)
     8cc:	18800717 	ldw	r2,28(r3)
     8d0:	e0bfdf15 	stw	r2,-132(fp)
     8d4:	18800817 	ldw	r2,32(r3)
     8d8:	e0bfe015 	stw	r2,-128(fp)
     8dc:	1880090b 	ldhu	r2,36(r3)
     8e0:	e0bfe10d 	sth	r2,-124(fp)
     8e4:	e13fe184 	addi	r4,fp,-122
     8e8:	01800a84 	movi	r6,42
     8ec:	000b883a 	mov	r5,zero
     8f0:	0000fec0 	call	fec <memset>
	char text_top_VGA[20] = "Altera DE2\0";
     8f4:	00c00074 	movhi	r3,1
     8f8:	18e6a604 	addi	r3,r3,-25960
     8fc:	18800017 	ldw	r2,0(r3)
     900:	e0bfec15 	stw	r2,-80(fp)
     904:	18800117 	ldw	r2,4(r3)
     908:	e0bfed15 	stw	r2,-76(fp)
     90c:	18800217 	ldw	r2,8(r3)
     910:	e0bfee15 	stw	r2,-72(fp)
     914:	e03fef15 	stw	zero,-68(fp)
     918:	e03ff015 	stw	zero,-64(fp)
	char text_bottom_VGA[20] = "Media Computer\0";
     91c:	00c00074 	movhi	r3,1
     920:	18e6ab04 	addi	r3,r3,-25940
     924:	18800017 	ldw	r2,0(r3)
     928:	e0bff115 	stw	r2,-60(fp)
     92c:	18800117 	ldw	r2,4(r3)
     930:	e0bff215 	stw	r2,-56(fp)
     934:	18800217 	ldw	r2,8(r3)
     938:	e0bff315 	stw	r2,-52(fp)
     93c:	18800317 	ldw	r2,12(r3)
     940:	e0bff415 	stw	r2,-48(fp)
     944:	e03ff515 	stw	zero,-44(fp)
	char text_ALTERA[10] = "ALTERA\0";
     948:	00c00074 	movhi	r3,1
     94c:	18e6b004 	addi	r3,r3,-25920
     950:	18800017 	ldw	r2,0(r3)
     954:	e0bff615 	stw	r2,-40(fp)
     958:	18800117 	ldw	r2,4(r3)
     95c:	e0bff715 	stw	r2,-36(fp)
     960:	e03ff80d 	sth	zero,-32(fp)
	char text_erase[10] = "      \0";
     964:	00c00074 	movhi	r3,1
     968:	18e6b304 	addi	r3,r3,-25908
     96c:	1880000b 	ldhu	r2,0(r3)
     970:	e0bff88d 	sth	r2,-30(fp)
     974:	1880008b 	ldhu	r2,2(r3)
     978:	e0bff90d 	sth	r2,-28(fp)
     97c:	1880010b 	ldhu	r2,4(r3)
     980:	e0bff98d 	sth	r2,-26(fp)
     984:	1880018b 	ldhu	r2,6(r3)
     988:	e0bffa0d 	sth	r2,-24(fp)
     98c:	e03ffa8d 	sth	zero,-22(fp)

	/* output text message to the LCD */
	alt_up_character_lcd_set_cursor_pos (lcd_dev, 0, 0);	// set LCD cursor location to top row
     990:	e13fd417 	ldw	r4,-176(fp)
     994:	000b883a 	mov	r5,zero
     998:	000d883a 	mov	r6,zero
     99c:	00030b00 	call	30b0 <alt_up_character_lcd_set_cursor_pos>
	alt_up_character_lcd_string (lcd_dev, text_top_LCD);
     9a0:	e17fd804 	addi	r5,fp,-160
     9a4:	e13fd417 	ldw	r4,-176(fp)
     9a8:	0002fec0 	call	2fec <alt_up_character_lcd_string>
	alt_up_character_lcd_cursor_off (lcd_dev);				// turn off the LCD cursor 
     9ac:	e13fd417 	ldw	r4,-176(fp)
     9b0:	00033180 	call	3318 <alt_up_character_lcd_cursor_off>

	/* open the pixel buffer */
	pixel_buffer_dev = alt_up_pixel_buffer_dma_open_dev ("/dev/VGA_Pixel_Buffer");
     9b4:	01000074 	movhi	r4,1
     9b8:	21266004 	addi	r4,r4,-26240
     9bc:	00048780 	call	4878 <alt_up_pixel_buffer_dma_open_dev>
     9c0:	e0bfd115 	stw	r2,-188(fp)
	if ( pixel_buffer_dev == NULL)
     9c4:	e0bfd117 	ldw	r2,-188(fp)
     9c8:	1004c03a 	cmpne	r2,r2,zero
     9cc:	1000041e 	bne	r2,zero,9e0 <main+0x410>
		alt_printf ("Error: could not open pixel buffer device\n");
     9d0:	01000074 	movhi	r4,1
     9d4:	21266604 	addi	r4,r4,-26216
     9d8:	000139c0 	call	139c <alt_printf>
     9dc:	00000306 	br	9ec <main+0x41c>
	else
		alt_printf ("Opened pixel buffer device\n");
     9e0:	01000074 	movhi	r4,1
     9e4:	21267104 	addi	r4,r4,-26172
     9e8:	000139c0 	call	139c <alt_printf>

	/* the following variables give the size of the pixel buffer */
	screen_x = 319; screen_y = 239;
     9ec:	00804fc4 	movi	r2,319
     9f0:	e0bfc315 	stw	r2,-244(fp)
     9f4:	00803bc4 	movi	r2,239
     9f8:	e0bfc215 	stw	r2,-248(fp)
	color = 0x1863;		// a dark grey color
     9fc:	008618c4 	movi	r2,6243
     a00:	e0bfbf0d 	sth	r2,-260(fp)
	alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, 0, 0, screen_x, 
     a04:	e0ffbf0f 	ldh	r3,-260(fp)
     a08:	e0bfc217 	ldw	r2,-248(fp)
     a0c:	d8800015 	stw	r2,0(sp)
     a10:	d8c00115 	stw	r3,4(sp)
     a14:	d8000215 	stw	zero,8(sp)
     a18:	e13fd117 	ldw	r4,-188(fp)
     a1c:	000b883a 	mov	r5,zero
     a20:	000d883a 	mov	r6,zero
     a24:	e1ffc317 	ldw	r7,-244(fp)
     a28:	0004ca00 	call	4ca0 <alt_up_pixel_buffer_dma_draw_box>
		screen_y, color, 0); // fill the screen
	
	// draw a medium-blue box in the middle of the screen, using character buffer coordinates
	blue_x1 = 28; blue_x2 = 52; blue_y1 = 26; blue_y2 = 34;
     a2c:	00800704 	movi	r2,28
     a30:	e0bfc715 	stw	r2,-228(fp)
     a34:	00800d04 	movi	r2,52
     a38:	e0bfc515 	stw	r2,-236(fp)
     a3c:	00800684 	movi	r2,26
     a40:	e0bfc615 	stw	r2,-232(fp)
     a44:	00800884 	movi	r2,34
     a48:	e0bfc415 	stw	r2,-240(fp)
	// character coords * 4 since characters are 4 x 4 pixel buffer coords (8 x 8 VGA coords)
	color = 0x187F;		// a medium blue color
     a4c:	00861fc4 	movi	r2,6271
     a50:	e0bfbf0d 	sth	r2,-260(fp)
//alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, blue_x1 * 4, blue_y1 * 4, blue_x2 * 4,
	//blue_y2 * 4, color, 0);

	/* output text message in the middle of the VGA monitor */
	char_buffer_dev = alt_up_char_buffer_open_dev ("/dev/VGA_Char_Buffer");
     a54:	01000074 	movhi	r4,1
     a58:	21267804 	addi	r4,r4,-26144
     a5c:	00045f80 	call	45f8 <alt_up_char_buffer_open_dev>
     a60:	e0bfd215 	stw	r2,-184(fp)
	if ( char_buffer_dev == NULL)
     a64:	e0bfd217 	ldw	r2,-184(fp)
     a68:	1004c03a 	cmpne	r2,r2,zero
     a6c:	1000041e 	bne	r2,zero,a80 <main+0x4b0>
		alt_printf ("Error: could not open character buffer device\n");
     a70:	01000074 	movhi	r4,1
     a74:	21267e04 	addi	r4,r4,-26120
     a78:	000139c0 	call	139c <alt_printf>
     a7c:	00000406 	br	a90 <main+0x4c0>
	else
		alt_printf ("Opened character buffer device\n");
     a80:	01000074 	movhi	r4,1
     a84:	21268a04 	addi	r4,r4,-26072
     a88:	000139c0 	call	139c <alt_printf>
     a8c:	00000006 	br	a90 <main+0x4c0>
	//alt_up_char_buffer_string (char_buffer_dev, text_ALTERA, ALT_x1, ALT_y);

	/* this loops "bounces" the word ALTERA around on the VGA screen */
	while (1)
	{
		while (!timeout)
     a90:	00800074 	movhi	r2,1
     a94:	10b62904 	addi	r2,r2,-10076
     a98:	10800017 	ldw	r2,0(r2)
     a9c:	1005003a 	cmpeq	r2,r2,zero
     aa0:	103ffb1e 	bne	r2,zero,a90 <main+0x4c0>
			;	// wait to synchronize with timeout, which is set by the interval timer ISR 
		if (flag==1){
     aa4:	d0a78d17 	ldw	r2,-25036(gp)
     aa8:	10800058 	cmpnei	r2,r2,1
     aac:	1000821e 	bne	r2,zero,cb8 <main+0x6e8>
			for(i=0;i<N;i++){
     ab0:	e03fcf15 	stw	zero,-196(fp)
     ab4:	00004806 	br	bd8 <main+0x608>
				for(j=0;j<(BUF_SIZE/N);j++){
     ab8:	e03fce15 	stw	zero,-200(fp)
     abc:	00003606 	br	b98 <main+0x5c8>
					average[i]=average[i]+abs(r_buf[i*(BUF_SIZE/N)+j]/(BUF_SIZE/N));
     ac0:	e0ffcf17 	ldw	r3,-196(fp)
     ac4:	e0fffe15 	stw	r3,-8(fp)
     ac8:	e0bfcf17 	ldw	r2,-196(fp)
     acc:	00c00074 	movhi	r3,1
     ad0:	18f64004 	addi	r3,r3,-9984
     ad4:	100490fa 	slli	r2,r2,3
     ad8:	10c5883a 	add	r2,r2,r3
     adc:	11800017 	ldw	r6,0(r2)
     ae0:	e1bffc15 	stw	r6,-16(fp)
     ae4:	10800117 	ldw	r2,4(r2)
     ae8:	e0bffd15 	stw	r2,-12(fp)
     aec:	e0bfcf17 	ldw	r2,-196(fp)
     af0:	10d86a24 	muli	r3,r2,25000
     af4:	e0bfce17 	ldw	r2,-200(fp)
     af8:	1885883a 	add	r2,r3,r2
     afc:	00c00074 	movhi	r3,1
     b00:	18f66804 	addi	r3,r3,-9824
     b04:	1085883a 	add	r2,r2,r2
     b08:	1085883a 	add	r2,r2,r2
     b0c:	10c5883a 	add	r2,r2,r3
     b10:	10c00017 	ldw	r3,0(r2)
     b14:	00986a04 	movi	r2,25000
     b18:	1885283a 	div	r2,r3,r2
     b1c:	e0bffb15 	stw	r2,-20(fp)
     b20:	e1fffb17 	ldw	r7,-20(fp)
     b24:	3804403a 	cmpge	r2,r7,zero
     b28:	1000031e 	bne	r2,zero,b38 <main+0x568>
     b2c:	e0bffb17 	ldw	r2,-20(fp)
     b30:	0085c83a 	sub	r2,zero,r2
     b34:	e0bffb15 	stw	r2,-20(fp)
     b38:	e0fffb17 	ldw	r3,-20(fp)
     b3c:	1805d7fa 	srai	r2,r3,31
     b40:	e13ffb17 	ldw	r4,-20(fp)
     b44:	100b883a 	mov	r5,r2
     b48:	e1bffc17 	ldw	r6,-16(fp)
     b4c:	3105883a 	add	r2,r6,r4
     b50:	e1fffc17 	ldw	r7,-16(fp)
     b54:	11cd803a 	cmpltu	r6,r2,r7
     b58:	e1fffd17 	ldw	r7,-12(fp)
     b5c:	3947883a 	add	r3,r7,r5
     b60:	30c9883a 	add	r4,r6,r3
     b64:	2007883a 	mov	r3,r4
     b68:	1009883a 	mov	r4,r2
     b6c:	180b883a 	mov	r5,r3
     b70:	00c00074 	movhi	r3,1
     b74:	18f64004 	addi	r3,r3,-9984
     b78:	e1bffe17 	ldw	r6,-8(fp)
     b7c:	300490fa 	slli	r2,r6,3
     b80:	10c5883a 	add	r2,r2,r3
     b84:	11000015 	stw	r4,0(r2)
     b88:	11400115 	stw	r5,4(r2)
	{
		while (!timeout)
			;	// wait to synchronize with timeout, which is set by the interval timer ISR 
		if (flag==1){
			for(i=0;i<N;i++){
				for(j=0;j<(BUF_SIZE/N);j++){
     b8c:	e0bfce17 	ldw	r2,-200(fp)
     b90:	10800044 	addi	r2,r2,1
     b94:	e0bfce15 	stw	r2,-200(fp)
     b98:	e0bfce17 	ldw	r2,-200(fp)
     b9c:	10986a10 	cmplti	r2,r2,25000
     ba0:	103fc71e 	bne	r2,zero,ac0 <main+0x4f0>
					average[i]=average[i]+abs(r_buf[i*(BUF_SIZE/N)+j]/(BUF_SIZE/N));

				}
				alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, 0, 0, screen_x,
     ba4:	e0bfc217 	ldw	r2,-248(fp)
     ba8:	d8800015 	stw	r2,0(sp)
     bac:	008618c4 	movi	r2,6243
     bb0:	d8800115 	stw	r2,4(sp)
     bb4:	d8000215 	stw	zero,8(sp)
     bb8:	e13fd117 	ldw	r4,-188(fp)
     bbc:	000b883a 	mov	r5,zero
     bc0:	000d883a 	mov	r6,zero
     bc4:	e1ffc317 	ldw	r7,-244(fp)
     bc8:	0004ca00 	call	4ca0 <alt_up_pixel_buffer_dma_draw_box>
	while (1)
	{
		while (!timeout)
			;	// wait to synchronize with timeout, which is set by the interval timer ISR 
		if (flag==1){
			for(i=0;i<N;i++){
     bcc:	e0bfcf17 	ldw	r2,-196(fp)
     bd0:	10800044 	addi	r2,r2,1
     bd4:	e0bfcf15 	stw	r2,-196(fp)
     bd8:	e0bfcf17 	ldw	r2,-196(fp)
     bdc:	10800510 	cmplti	r2,r2,20
     be0:	103fb51e 	bne	r2,zero,ab8 <main+0x4e8>
				alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, 0, 0, screen_x,
						screen_y,  0x1863, 0); // fill the screen


			}
			for (j=0;j<N;j++){
     be4:	e03fce15 	stw	zero,-200(fp)
     be8:	00002f06 	br	ca8 <main+0x6d8>
				average[j]=(average[j])>>25;
     bec:	e1ffce17 	ldw	r7,-200(fp)
     bf0:	e0bfce17 	ldw	r2,-200(fp)
     bf4:	00c00074 	movhi	r3,1
     bf8:	18f64004 	addi	r3,r3,-9984
     bfc:	100490fa 	slli	r2,r2,3
     c00:	10c5883a 	add	r2,r2,r3
     c04:	11000017 	ldw	r4,0(r2)
     c08:	11400117 	ldw	r5,4(r2)
     c0c:	280c91fa 	slli	r6,r5,7
     c10:	2004d67a 	srli	r2,r4,25
     c14:	1184b03a 	or	r2,r2,r6
     c18:	2807d67a 	srai	r3,r5,25
     c1c:	01400074 	movhi	r5,1
     c20:	29764004 	addi	r5,r5,-9984
     c24:	380890fa 	slli	r4,r7,3
     c28:	2149883a 	add	r4,r4,r5
     c2c:	20800015 	stw	r2,0(r4)
     c30:	20c00115 	stw	r3,4(r4)
				alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, 5+j*k+2, 220, 5+(j+1)*k,
     c34:	e0ffce17 	ldw	r3,-200(fp)
     c38:	e0bfcd17 	ldw	r2,-204(fp)
     c3c:	1885383a 	mul	r2,r3,r2
     c40:	114001c4 	addi	r5,r2,7
     c44:	e0bfce17 	ldw	r2,-200(fp)
     c48:	10c00044 	addi	r3,r2,1
     c4c:	e0bfcd17 	ldw	r2,-204(fp)
     c50:	1885383a 	mul	r2,r3,r2
     c54:	11c00144 	addi	r7,r2,5
     c58:	e0bfce17 	ldw	r2,-200(fp)
     c5c:	00c00074 	movhi	r3,1
     c60:	18f64004 	addi	r3,r3,-9984
     c64:	100490fa 	slli	r2,r2,3
     c68:	10c9883a 	add	r4,r2,r3
     c6c:	20800017 	ldw	r2,0(r4)
     c70:	20c00117 	ldw	r3,4(r4)
     c74:	1007883a 	mov	r3,r2
     c78:	00803704 	movi	r2,220
     c7c:	10c5c83a 	sub	r2,r2,r3
     c80:	e0ffbf0f 	ldh	r3,-260(fp)
     c84:	d8800015 	stw	r2,0(sp)
     c88:	d8c00115 	stw	r3,4(sp)
     c8c:	d8000215 	stw	zero,8(sp)
     c90:	e13fd117 	ldw	r4,-188(fp)
     c94:	01803704 	movi	r6,220
     c98:	0004ca00 	call	4ca0 <alt_up_pixel_buffer_dma_draw_box>
				alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, 0, 0, screen_x,
						screen_y,  0x1863, 0); // fill the screen


			}
			for (j=0;j<N;j++){
     c9c:	e0bfce17 	ldw	r2,-200(fp)
     ca0:	10800044 	addi	r2,r2,1
     ca4:	e0bfce15 	stw	r2,-200(fp)
     ca8:	e0bfce17 	ldw	r2,-200(fp)
     cac:	10800510 	cmplti	r2,r2,20
     cb0:	103fce1e 	bne	r2,zero,bec <main+0x61c>
				alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, 5+j*k+2, 220, 5+(j+1)*k,
					220-average[j], color, 0);

			}

			flag=0;
     cb4:	d0278d15 	stw	zero,-25036(gp)
		}
		if(flag1==1){
     cb8:	d0a78e17 	ldw	r2,-25032(gp)
     cbc:	10800058 	cmpnei	r2,r2,1
     cc0:	1000211e 	bne	r2,zero,d48 <main+0x778>
			for(j=1;j<N+1;j++){
     cc4:	00800044 	movi	r2,1
     cc8:	e0bfce15 	stw	r2,-200(fp)
     ccc:	00001a06 	br	d38 <main+0x768>
				while(buf_index_play<(j*(BUF_SIZE/N)));
     cd0:	e0bfce17 	ldw	r2,-200(fp)
     cd4:	10d86a24 	muli	r3,r2,25000
     cd8:	00800074 	movhi	r2,1
     cdc:	10b62a04 	addi	r2,r2,-10072
     ce0:	10800017 	ldw	r2,0(r2)
     ce4:	10fffa16 	blt	r2,r3,cd0 <main+0x700>
				alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, 5+(j-1)*k+2, 230, 5+j*k,
     ce8:	e0bfce17 	ldw	r2,-200(fp)
     cec:	10ffffc4 	addi	r3,r2,-1
     cf0:	e0bfcd17 	ldw	r2,-204(fp)
     cf4:	1885383a 	mul	r2,r3,r2
     cf8:	114001c4 	addi	r5,r2,7
     cfc:	e0ffce17 	ldw	r3,-200(fp)
     d00:	e0bfcd17 	ldw	r2,-204(fp)
     d04:	1885383a 	mul	r2,r3,r2
     d08:	11c00144 	addi	r7,r2,5
     d0c:	e0ffbf0f 	ldh	r3,-260(fp)
     d10:	00803ac4 	movi	r2,235
     d14:	d8800015 	stw	r2,0(sp)
     d18:	d8c00115 	stw	r3,4(sp)
     d1c:	d8000215 	stw	zero,8(sp)
     d20:	e13fd117 	ldw	r4,-188(fp)
     d24:	01803984 	movi	r6,230
     d28:	0004ca00 	call	4ca0 <alt_up_pixel_buffer_dma_draw_box>
			}

			flag=0;
		}
		if(flag1==1){
			for(j=1;j<N+1;j++){
     d2c:	e0bfce17 	ldw	r2,-200(fp)
     d30:	10800044 	addi	r2,r2,1
     d34:	e0bfce15 	stw	r2,-200(fp)
     d38:	e0bfce17 	ldw	r2,-200(fp)
     d3c:	10800550 	cmplti	r2,r2,21
     d40:	103fe31e 	bne	r2,zero,cd0 <main+0x700>
				alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, 5+(j-1)*k+2, 230, 5+j*k,
									235, color, 0);


			}
			flag1=0;
     d44:	d0278e15 	stw	zero,-25032(gp)
		}
		/* move the ALTERA text around on the VGA screen */

		timeout = 0;
     d48:	00800074 	movhi	r2,1
     d4c:	10b62904 	addi	r2,r2,-10076
     d50:	10000015 	stw	zero,0(r2)
	}
     d54:	003f4e06 	br	a90 <main+0x4c0>
     d58:	e0bfff17 	ldw	r2,-4(fp)
}
     d5c:	e037883a 	mov	sp,fp
     d60:	dfc00117 	ldw	ra,4(sp)
     d64:	df000017 	ldw	fp,0(sp)
     d68:	dec00204 	addi	sp,sp,8
     d6c:	f800283a 	ret

00000d70 <HEX_PS2>:
 * Subroutine to show a string of HEX data on the HEX displays
 * Note that we are using pointer accesses for the HEX displays parallel port. We could
 * also use the HAL functions for these ports instead
****************************************************************************************/
void HEX_PS2(unsigned char b1, unsigned char b2, unsigned char b3)
{
     d70:	deffef04 	addi	sp,sp,-68
     d74:	dfc01015 	stw	ra,64(sp)
     d78:	df000f15 	stw	fp,60(sp)
     d7c:	df000f04 	addi	fp,sp,60
     d80:	e13ffd05 	stb	r4,-12(fp)
     d84:	e17ffe05 	stb	r5,-8(fp)
     d88:	e1bfff05 	stb	r6,-4(fp)
	volatile int *HEX3_HEX0_ptr = (int *) 0x10000020;
     d8c:	00840034 	movhi	r2,4096
     d90:	10800804 	addi	r2,r2,32
     d94:	e0bff615 	stw	r2,-40(fp)
	volatile int *HEX7_HEX4_ptr = (int *) 0x10000030;
     d98:	00840034 	movhi	r2,4096
     d9c:	10800c04 	addi	r2,r2,48
     da0:	e0bff515 	stw	r2,-44(fp)

	/* SEVEN_SEGMENT_DECODE_TABLE gives the on/off settings for all segments in 
	 * a single 7-seg display in the DE2 Media Computer, for the hex digits 0 - F */
	unsigned char	seven_seg_decode_table[] = {	0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 
		  										0x7F, 0x67, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71 };
     da4:	00800074 	movhi	r2,1
     da8:	10a6b584 	addi	r2,r2,-25898
     dac:	e13ff704 	addi	r4,fp,-36
     db0:	100b883a 	mov	r5,r2
     db4:	01800404 	movi	r6,16
     db8:	0000f4c0 	call	f4c <memcpy>
	unsigned char	hex_segs[] = { 0, 0, 0, 0, 0, 0, 0, 0 };
     dbc:	e03ffb05 	stb	zero,-20(fp)
     dc0:	e03ffb45 	stb	zero,-19(fp)
     dc4:	e03ffb85 	stb	zero,-18(fp)
     dc8:	e03ffbc5 	stb	zero,-17(fp)
     dcc:	e03ffc05 	stb	zero,-16(fp)
     dd0:	e03ffc45 	stb	zero,-15(fp)
     dd4:	e03ffc85 	stb	zero,-14(fp)
     dd8:	e03ffcc5 	stb	zero,-13(fp)
	unsigned int shift_buffer, nibble;
	unsigned char code;
	int i;

	shift_buffer = (b1 << 16) | (b2 << 8) | b3;
     ddc:	e0bffd03 	ldbu	r2,-12(fp)
     de0:	1006943a 	slli	r3,r2,16
     de4:	e0bffe03 	ldbu	r2,-8(fp)
     de8:	1004923a 	slli	r2,r2,8
     dec:	1886b03a 	or	r3,r3,r2
     df0:	e0bfff03 	ldbu	r2,-4(fp)
     df4:	1884b03a 	or	r2,r3,r2
     df8:	e0bff415 	stw	r2,-48(fp)
	for ( i = 0; i < 6; ++i )
     dfc:	e03ff115 	stw	zero,-60(fp)
     e00:	00001306 	br	e50 <HEX_PS2+0xe0>
	{
		nibble = shift_buffer & 0x0000000F;		// character is in rightmost nibble
     e04:	e0bff417 	ldw	r2,-48(fp)
     e08:	108003cc 	andi	r2,r2,15
     e0c:	e0bff315 	stw	r2,-52(fp)
		code = seven_seg_decode_table[nibble];
     e10:	e0fff317 	ldw	r3,-52(fp)
     e14:	e0bff704 	addi	r2,fp,-36
     e18:	10c5883a 	add	r2,r2,r3
     e1c:	10800003 	ldbu	r2,0(r2)
     e20:	e0bff205 	stb	r2,-56(fp)
		hex_segs[i] = code;
     e24:	e0fff117 	ldw	r3,-60(fp)
     e28:	e0bffb04 	addi	r2,fp,-20
     e2c:	10c7883a 	add	r3,r2,r3
     e30:	e0bff203 	ldbu	r2,-56(fp)
     e34:	18800005 	stb	r2,0(r3)
		shift_buffer = shift_buffer >> 4;
     e38:	e0bff417 	ldw	r2,-48(fp)
     e3c:	1004d13a 	srli	r2,r2,4
     e40:	e0bff415 	stw	r2,-48(fp)
	unsigned int shift_buffer, nibble;
	unsigned char code;
	int i;

	shift_buffer = (b1 << 16) | (b2 << 8) | b3;
	for ( i = 0; i < 6; ++i )
     e44:	e0bff117 	ldw	r2,-60(fp)
     e48:	10800044 	addi	r2,r2,1
     e4c:	e0bff115 	stw	r2,-60(fp)
     e50:	e0bff117 	ldw	r2,-60(fp)
     e54:	10800190 	cmplti	r2,r2,6
     e58:	103fea1e 	bne	r2,zero,e04 <HEX_PS2+0x94>
		code = seven_seg_decode_table[nibble];
		hex_segs[i] = code;
		shift_buffer = shift_buffer >> 4;
	}
	/* drive the hex displays */
	*(HEX3_HEX0_ptr) = *(int *) (hex_segs);
     e5c:	e0bffb04 	addi	r2,fp,-20
     e60:	10c00017 	ldw	r3,0(r2)
     e64:	e0bff617 	ldw	r2,-40(fp)
     e68:	10c00015 	stw	r3,0(r2)
	*(HEX7_HEX4_ptr) = *(int *) (hex_segs+4);
     e6c:	e0bffb04 	addi	r2,fp,-20
     e70:	10800104 	addi	r2,r2,4
     e74:	10c00017 	ldw	r3,0(r2)
     e78:	e0bff517 	ldw	r2,-44(fp)
     e7c:	10c00015 	stw	r3,0(r2)
}
     e80:	e037883a 	mov	sp,fp
     e84:	dfc00117 	ldw	ra,4(sp)
     e88:	df000017 	ldw	fp,0(sp)
     e8c:	dec00204 	addi	sp,sp,8
     e90:	f800283a 	ret

00000e94 <pushbutton_ISR>:
 *                                                                          
 * This ISR checks which KEY has been pressed. If KEY1, then it enables audio-in
 * interrupts (recording). If KEY2, it enables audio-out interrupts (playback).
****************************************************************************************/
void pushbutton_ISR(struct alt_up_dev *up_dev, unsigned int id)
{
     e94:	defffa04 	addi	sp,sp,-24
     e98:	dfc00515 	stw	ra,20(sp)
     e9c:	df000415 	stw	fp,16(sp)
     ea0:	df000404 	addi	fp,sp,16
     ea4:	e13ffe15 	stw	r4,-8(fp)
     ea8:	e17fff15 	stw	r5,-4(fp)
	alt_up_audio_dev *audio_dev;

	audio_dev = up_dev->audio_dev;
     eac:	e0bffe17 	ldw	r2,-8(fp)
     eb0:	10800417 	ldw	r2,16(r2)
     eb4:	e0bffd15 	stw	r2,-12(fp)
	
	int KEY_value;

	/* read the pushbutton interrupt register */
	KEY_value = alt_up_parallel_port_read_edge_capture (up_dev->KEY_dev);
     eb8:	e0bffe17 	ldw	r2,-8(fp)
     ebc:	10800017 	ldw	r2,0(r2)
     ec0:	10800a17 	ldw	r2,40(r2)
     ec4:	10800304 	addi	r2,r2,12
     ec8:	10800037 	ldwio	r2,0(r2)
     ecc:	e0bffc15 	stw	r2,-16(fp)
	alt_up_parallel_port_clear_edge_capture (up_dev->KEY_dev);	// Clear the interrupt
     ed0:	e0bffe17 	ldw	r2,-8(fp)
     ed4:	10800017 	ldw	r2,0(r2)
     ed8:	10800a17 	ldw	r2,40(r2)
     edc:	10800304 	addi	r2,r2,12
     ee0:	10000035 	stwio	zero,0(r2)

	if (KEY_value == 0x2)										// check KEY1
     ee4:	e0bffc17 	ldw	r2,-16(fp)
     ee8:	10800098 	cmpnei	r2,r2,2
     eec:	1000081e 	bne	r2,zero,f10 <pushbutton_ISR+0x7c>
	{
		// reset the buffer index for recording
		buf_index_record = 0;
     ef0:	00800074 	movhi	r2,1
     ef4:	10b62b04 	addi	r2,r2,-10068
     ef8:	10000015 	stw	zero,0(r2)
		// clear audio FIFOs
		alt_up_audio_reset_audio_core (audio_dev);
     efc:	e13ffd17 	ldw	r4,-12(fp)
     f00:	00028340 	call	2834 <alt_up_audio_reset_audio_core>
		// enable audio-in interrupts
		alt_up_audio_enable_read_interrupt (audio_dev);
     f04:	e13ffd17 	ldw	r4,-12(fp)
     f08:	00026840 	call	2684 <alt_up_audio_enable_read_interrupt>
     f0c:	00000a06 	br	f38 <pushbutton_ISR+0xa4>
	}
	else if (KEY_value == 0x4)									// check KEY2
     f10:	e0bffc17 	ldw	r2,-16(fp)
     f14:	10800118 	cmpnei	r2,r2,4
     f18:	1000071e 	bne	r2,zero,f38 <pushbutton_ISR+0xa4>
	{
		// reset counter to start playback
		buf_index_play = 0;
     f1c:	00800074 	movhi	r2,1
     f20:	10b62a04 	addi	r2,r2,-10072
     f24:	10000015 	stw	zero,0(r2)
		// clear audio FIFOs
		alt_up_audio_reset_audio_core (audio_dev);
     f28:	e13ffd17 	ldw	r4,-12(fp)
     f2c:	00028340 	call	2834 <alt_up_audio_reset_audio_core>
		// enable audio-out interrupts
		alt_up_audio_enable_write_interrupt (audio_dev);
     f30:	e13ffd17 	ldw	r4,-12(fp)
     f34:	00027200 	call	2720 <alt_up_audio_enable_write_interrupt>
	}
	return;
}
     f38:	e037883a 	mov	sp,fp
     f3c:	dfc00117 	ldw	ra,4(sp)
     f40:	df000017 	ldw	fp,0(sp)
     f44:	dec00204 	addi	sp,sp,8
     f48:	f800283a 	ret

00000f4c <memcpy>:
     f4c:	01c003c4 	movi	r7,15
     f50:	2007883a 	mov	r3,r4
     f54:	3980032e 	bgeu	r7,r6,f64 <memcpy+0x18>
     f58:	2904b03a 	or	r2,r5,r4
     f5c:	108000cc 	andi	r2,r2,3
     f60:	10000926 	beq	r2,zero,f88 <memcpy+0x3c>
     f64:	30000626 	beq	r6,zero,f80 <memcpy+0x34>
     f68:	30cd883a 	add	r6,r6,r3
     f6c:	28800003 	ldbu	r2,0(r5)
     f70:	29400044 	addi	r5,r5,1
     f74:	18800005 	stb	r2,0(r3)
     f78:	18c00044 	addi	r3,r3,1
     f7c:	30fffb1e 	bne	r6,r3,f6c <memcpy+0x20>
     f80:	2005883a 	mov	r2,r4
     f84:	f800283a 	ret
     f88:	3811883a 	mov	r8,r7
     f8c:	200f883a 	mov	r7,r4
     f90:	28c00017 	ldw	r3,0(r5)
     f94:	31bffc04 	addi	r6,r6,-16
     f98:	38c00015 	stw	r3,0(r7)
     f9c:	28800117 	ldw	r2,4(r5)
     fa0:	38800115 	stw	r2,4(r7)
     fa4:	28c00217 	ldw	r3,8(r5)
     fa8:	38c00215 	stw	r3,8(r7)
     fac:	28800317 	ldw	r2,12(r5)
     fb0:	29400404 	addi	r5,r5,16
     fb4:	38800315 	stw	r2,12(r7)
     fb8:	39c00404 	addi	r7,r7,16
     fbc:	41bff436 	bltu	r8,r6,f90 <memcpy+0x44>
     fc0:	008000c4 	movi	r2,3
     fc4:	1180072e 	bgeu	r2,r6,fe4 <memcpy+0x98>
     fc8:	1007883a 	mov	r3,r2
     fcc:	28800017 	ldw	r2,0(r5)
     fd0:	31bfff04 	addi	r6,r6,-4
     fd4:	29400104 	addi	r5,r5,4
     fd8:	38800015 	stw	r2,0(r7)
     fdc:	39c00104 	addi	r7,r7,4
     fe0:	19bffa36 	bltu	r3,r6,fcc <memcpy+0x80>
     fe4:	3807883a 	mov	r3,r7
     fe8:	003fde06 	br	f64 <memcpy+0x18>

00000fec <memset>:
     fec:	008000c4 	movi	r2,3
     ff0:	29403fcc 	andi	r5,r5,255
     ff4:	2007883a 	mov	r3,r4
     ff8:	1180022e 	bgeu	r2,r6,1004 <memset+0x18>
     ffc:	2084703a 	and	r2,r4,r2
    1000:	10000826 	beq	r2,zero,1024 <memset+0x38>
    1004:	30000526 	beq	r6,zero,101c <memset+0x30>
    1008:	2805883a 	mov	r2,r5
    100c:	30cd883a 	add	r6,r6,r3
    1010:	18800005 	stb	r2,0(r3)
    1014:	18c00044 	addi	r3,r3,1
    1018:	19bffd1e 	bne	r3,r6,1010 <memset+0x24>
    101c:	2005883a 	mov	r2,r4
    1020:	f800283a 	ret
    1024:	2804923a 	slli	r2,r5,8
    1028:	020003c4 	movi	r8,15
    102c:	200f883a 	mov	r7,r4
    1030:	2884b03a 	or	r2,r5,r2
    1034:	1006943a 	slli	r3,r2,16
    1038:	10c6b03a 	or	r3,r2,r3
    103c:	41800a2e 	bgeu	r8,r6,1068 <memset+0x7c>
    1040:	4005883a 	mov	r2,r8
    1044:	31bffc04 	addi	r6,r6,-16
    1048:	38c00015 	stw	r3,0(r7)
    104c:	38c00115 	stw	r3,4(r7)
    1050:	38c00215 	stw	r3,8(r7)
    1054:	38c00315 	stw	r3,12(r7)
    1058:	39c00404 	addi	r7,r7,16
    105c:	11bff936 	bltu	r2,r6,1044 <memset+0x58>
    1060:	008000c4 	movi	r2,3
    1064:	1180052e 	bgeu	r2,r6,107c <memset+0x90>
    1068:	31bfff04 	addi	r6,r6,-4
    106c:	008000c4 	movi	r2,3
    1070:	38c00015 	stw	r3,0(r7)
    1074:	39c00104 	addi	r7,r7,4
    1078:	11bffb36 	bltu	r2,r6,1068 <memset+0x7c>
    107c:	3807883a 	mov	r3,r7
    1080:	003fe006 	br	1004 <memset+0x18>

00001084 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    1084:	deffef04 	addi	sp,sp,-68
    1088:	df001015 	stw	fp,64(sp)
    108c:	df001004 	addi	fp,sp,64
    1090:	e13ffc15 	stw	r4,-16(fp)
    1094:	e17ffd15 	stw	r5,-12(fp)
    1098:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
    109c:	00bffa84 	movi	r2,-22
    10a0:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    10a4:	e0bffc17 	ldw	r2,-16(fp)
    10a8:	10800828 	cmpgeui	r2,r2,32
    10ac:	1000601e 	bne	r2,zero,1230 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    10b0:	0005303a 	rdctl	r2,status
    10b4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    10b8:	e0fff917 	ldw	r3,-28(fp)
    10bc:	00bfff84 	movi	r2,-2
    10c0:	1884703a 	and	r2,r3,r2
    10c4:	1001703a 	wrctl	status,r2
  
  return context;
    10c8:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
    10cc:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
    10d0:	e0bffc17 	ldw	r2,-16(fp)
    10d4:	00c00fb4 	movhi	r3,62
    10d8:	18f8af04 	addi	r3,r3,-7492
    10dc:	100490fa 	slli	r2,r2,3
    10e0:	10c7883a 	add	r3,r2,r3
    10e4:	e0bffe17 	ldw	r2,-8(fp)
    10e8:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
    10ec:	e0bffc17 	ldw	r2,-16(fp)
    10f0:	00c00fb4 	movhi	r3,62
    10f4:	18f8af04 	addi	r3,r3,-7492
    10f8:	100490fa 	slli	r2,r2,3
    10fc:	10c5883a 	add	r2,r2,r3
    1100:	10c00104 	addi	r3,r2,4
    1104:	e0bffd17 	ldw	r2,-12(fp)
    1108:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    110c:	e0bffe17 	ldw	r2,-8(fp)
    1110:	1005003a 	cmpeq	r2,r2,zero
    1114:	1000201e 	bne	r2,zero,1198 <alt_irq_register+0x114>
    1118:	e0bffc17 	ldw	r2,-16(fp)
    111c:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1120:	0005303a 	rdctl	r2,status
    1124:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1128:	e0fff617 	ldw	r3,-40(fp)
    112c:	00bfff84 	movi	r2,-2
    1130:	1884703a 	and	r2,r3,r2
    1134:	1001703a 	wrctl	status,r2
  
  return context;
    1138:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    113c:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
    1140:	e0fff717 	ldw	r3,-36(fp)
    1144:	00800044 	movi	r2,1
    1148:	10c4983a 	sll	r2,r2,r3
    114c:	1007883a 	mov	r3,r2
    1150:	00800074 	movhi	r2,1
    1154:	10b62c04 	addi	r2,r2,-10064
    1158:	10800017 	ldw	r2,0(r2)
    115c:	1886b03a 	or	r3,r3,r2
    1160:	00800074 	movhi	r2,1
    1164:	10b62c04 	addi	r2,r2,-10064
    1168:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    116c:	00800074 	movhi	r2,1
    1170:	10b62c04 	addi	r2,r2,-10064
    1174:	10800017 	ldw	r2,0(r2)
    1178:	100170fa 	wrctl	ienable,r2
    117c:	e0bff817 	ldw	r2,-32(fp)
    1180:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1184:	e0bff517 	ldw	r2,-44(fp)
    1188:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    118c:	0005883a 	mov	r2,zero
    1190:	e0bfff15 	stw	r2,-4(fp)
    1194:	00002006 	br	1218 <alt_irq_register+0x194>
    1198:	e0bffc17 	ldw	r2,-16(fp)
    119c:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    11a0:	0005303a 	rdctl	r2,status
    11a4:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    11a8:	e0fff217 	ldw	r3,-56(fp)
    11ac:	00bfff84 	movi	r2,-2
    11b0:	1884703a 	and	r2,r3,r2
    11b4:	1001703a 	wrctl	status,r2
  
  return context;
    11b8:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    11bc:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
    11c0:	e0fff317 	ldw	r3,-52(fp)
    11c4:	00800044 	movi	r2,1
    11c8:	10c4983a 	sll	r2,r2,r3
    11cc:	0084303a 	nor	r2,zero,r2
    11d0:	1007883a 	mov	r3,r2
    11d4:	00800074 	movhi	r2,1
    11d8:	10b62c04 	addi	r2,r2,-10064
    11dc:	10800017 	ldw	r2,0(r2)
    11e0:	1886703a 	and	r3,r3,r2
    11e4:	00800074 	movhi	r2,1
    11e8:	10b62c04 	addi	r2,r2,-10064
    11ec:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    11f0:	00800074 	movhi	r2,1
    11f4:	10b62c04 	addi	r2,r2,-10064
    11f8:	10800017 	ldw	r2,0(r2)
    11fc:	100170fa 	wrctl	ienable,r2
    1200:	e0bff417 	ldw	r2,-48(fp)
    1204:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1208:	e0bff117 	ldw	r2,-60(fp)
    120c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    1210:	0005883a 	mov	r2,zero
    1214:	e0bfff15 	stw	r2,-4(fp)
    1218:	e0bfff17 	ldw	r2,-4(fp)
    121c:	e0bffb15 	stw	r2,-20(fp)
    1220:	e0bffa17 	ldw	r2,-24(fp)
    1224:	e0bff015 	stw	r2,-64(fp)
    1228:	e0bff017 	ldw	r2,-64(fp)
    122c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
    1230:	e0bffb17 	ldw	r2,-20(fp)
}
    1234:	e037883a 	mov	sp,fp
    1238:	df000017 	ldw	fp,0(sp)
    123c:	dec00104 	addi	sp,sp,4
    1240:	f800283a 	ret

00001244 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    1244:	defffe04 	addi	sp,sp,-8
    1248:	dfc00115 	stw	ra,4(sp)
    124c:	df000015 	stw	fp,0(sp)
    1250:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    1254:	01000074 	movhi	r4,1
    1258:	212ea704 	addi	r4,r4,-17764
    125c:	01400074 	movhi	r5,1
    1260:	29672804 	addi	r5,r5,-25440
    1264:	01800074 	movhi	r6,1
    1268:	31aea704 	addi	r6,r6,-17764
    126c:	00012c40 	call	12c4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    1270:	01000034 	movhi	r4,0
    1274:	21000804 	addi	r4,r4,32
    1278:	01400034 	movhi	r5,0
    127c:	29400804 	addi	r5,r5,32
    1280:	01800034 	movhi	r6,0
    1284:	31806e04 	addi	r6,r6,440
    1288:	00012c40 	call	12c4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    128c:	01000074 	movhi	r4,1
    1290:	2125f504 	addi	r4,r4,-26668
    1294:	01400074 	movhi	r5,1
    1298:	2965f504 	addi	r5,r5,-26668
    129c:	01800074 	movhi	r6,1
    12a0:	31a72804 	addi	r6,r6,-25440
    12a4:	00012c40 	call	12c4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    12a8:	00060940 	call	6094 <alt_dcache_flush_all>
  alt_icache_flush_all();
    12ac:	000634c0 	call	634c <alt_icache_flush_all>
}
    12b0:	e037883a 	mov	sp,fp
    12b4:	dfc00117 	ldw	ra,4(sp)
    12b8:	df000017 	ldw	fp,0(sp)
    12bc:	dec00204 	addi	sp,sp,8
    12c0:	f800283a 	ret

000012c4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    12c4:	defffc04 	addi	sp,sp,-16
    12c8:	df000315 	stw	fp,12(sp)
    12cc:	df000304 	addi	fp,sp,12
    12d0:	e13ffd15 	stw	r4,-12(fp)
    12d4:	e17ffe15 	stw	r5,-8(fp)
    12d8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    12dc:	e0fffe17 	ldw	r3,-8(fp)
    12e0:	e0bffd17 	ldw	r2,-12(fp)
    12e4:	18800e26 	beq	r3,r2,1320 <alt_load_section+0x5c>
  {
    while( to != end )
    12e8:	00000a06 	br	1314 <alt_load_section+0x50>
    {
      *to++ = *from++;
    12ec:	e0bffd17 	ldw	r2,-12(fp)
    12f0:	10c00017 	ldw	r3,0(r2)
    12f4:	e0bffe17 	ldw	r2,-8(fp)
    12f8:	10c00015 	stw	r3,0(r2)
    12fc:	e0bffe17 	ldw	r2,-8(fp)
    1300:	10800104 	addi	r2,r2,4
    1304:	e0bffe15 	stw	r2,-8(fp)
    1308:	e0bffd17 	ldw	r2,-12(fp)
    130c:	10800104 	addi	r2,r2,4
    1310:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    1314:	e0fffe17 	ldw	r3,-8(fp)
    1318:	e0bfff17 	ldw	r2,-4(fp)
    131c:	18bff31e 	bne	r3,r2,12ec <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    1320:	e037883a 	mov	sp,fp
    1324:	df000017 	ldw	fp,0(sp)
    1328:	dec00104 	addi	sp,sp,4
    132c:	f800283a 	ret

00001330 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1330:	defffd04 	addi	sp,sp,-12
    1334:	dfc00215 	stw	ra,8(sp)
    1338:	df000115 	stw	fp,4(sp)
    133c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    1340:	0009883a 	mov	r4,zero
    1344:	00016340 	call	1634 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    1348:	00016680 	call	1668 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    134c:	01000074 	movhi	r4,1
    1350:	2126ba04 	addi	r4,r4,-25880
    1354:	01400074 	movhi	r5,1
    1358:	2966ba04 	addi	r5,r5,-25880
    135c:	01800074 	movhi	r6,1
    1360:	31a6ba04 	addi	r6,r6,-25880
    1364:	00064400 	call	6440 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    1368:	00061f00 	call	61f0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    136c:	01000034 	movhi	r4,0
    1370:	21189504 	addi	r4,r4,25172
    1374:	0006d640 	call	6d64 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    1378:	d1279417 	ldw	r4,-25008(gp)
    137c:	d1679517 	ldw	r5,-25004(gp)
    1380:	d1a79617 	ldw	r6,-25000(gp)
    1384:	00005d00 	call	5d0 <main>
    1388:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    138c:	01000044 	movi	r4,1
    1390:	0005f380 	call	5f38 <close>
  exit (result);
    1394:	e13fff17 	ldw	r4,-4(fp)
    1398:	0006d780 	call	6d78 <exit>

0000139c <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    139c:	defff204 	addi	sp,sp,-56
    13a0:	dfc00a15 	stw	ra,40(sp)
    13a4:	df000915 	stw	fp,36(sp)
    13a8:	df000904 	addi	fp,sp,36
    13ac:	e1400215 	stw	r5,8(fp)
    13b0:	e1800315 	stw	r6,12(fp)
    13b4:	e1c00415 	stw	r7,16(fp)
    13b8:	e13fff15 	stw	r4,-4(fp)
	va_list args;
	va_start(args, fmt);
    13bc:	e0800204 	addi	r2,fp,8
    13c0:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    13c4:	e0bfff17 	ldw	r2,-4(fp)
    13c8:	e0bffd15 	stw	r2,-12(fp)
    while ((c = *w++) != 0)
    13cc:	00007806 	br	15b0 <alt_printf+0x214>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    13d0:	e0bffc07 	ldb	r2,-16(fp)
    13d4:	10800960 	cmpeqi	r2,r2,37
    13d8:	1000031e 	bne	r2,zero,13e8 <alt_printf+0x4c>
        {
            alt_putchar(c);
    13dc:	e13ffc07 	ldb	r4,-16(fp)
    13e0:	00015f40 	call	15f4 <alt_putchar>
    13e4:	00007206 	br	15b0 <alt_printf+0x214>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
    13e8:	e0bffd17 	ldw	r2,-12(fp)
    13ec:	10800003 	ldbu	r2,0(r2)
    13f0:	e0bffc05 	stb	r2,-16(fp)
    13f4:	e0bffc07 	ldb	r2,-16(fp)
    13f8:	1004c03a 	cmpne	r2,r2,zero
    13fc:	1007883a 	mov	r3,r2
    1400:	e0bffd17 	ldw	r2,-12(fp)
    1404:	10800044 	addi	r2,r2,1
    1408:	e0bffd15 	stw	r2,-12(fp)
    140c:	18803fcc 	andi	r2,r3,255
    1410:	1005003a 	cmpeq	r2,r2,zero
    1414:	1000721e 	bne	r2,zero,15e0 <alt_printf+0x244>
            {
                if (c == '%')
    1418:	e0bffc07 	ldb	r2,-16(fp)
    141c:	10800958 	cmpnei	r2,r2,37
    1420:	1000031e 	bne	r2,zero,1430 <alt_printf+0x94>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
    1424:	e13ffc07 	ldb	r4,-16(fp)
    1428:	00015f40 	call	15f4 <alt_putchar>
    142c:	00006006 	br	15b0 <alt_printf+0x214>
                } 
                else if (c == 'c')
    1430:	e0bffc07 	ldb	r2,-16(fp)
    1434:	108018d8 	cmpnei	r2,r2,99
    1438:	1000091e 	bne	r2,zero,1460 <alt_printf+0xc4>
                {
                    int v = va_arg(args, int);
    143c:	e0fffe17 	ldw	r3,-8(fp)
    1440:	18800104 	addi	r2,r3,4
    1444:	e0bffe15 	stw	r2,-8(fp)
    1448:	1805883a 	mov	r2,r3
    144c:	10800017 	ldw	r2,0(r2)
    1450:	e0bffb15 	stw	r2,-20(fp)
                    alt_putchar(v);
    1454:	e13ffb17 	ldw	r4,-20(fp)
    1458:	00015f40 	call	15f4 <alt_putchar>
    145c:	00005406 	br	15b0 <alt_printf+0x214>
                }
                else if (c == 'x')
    1460:	e0bffc07 	ldb	r2,-16(fp)
    1464:	10801e18 	cmpnei	r2,r2,120
    1468:	1000371e 	bne	r2,zero,1548 <alt_printf+0x1ac>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
    146c:	e0fffe17 	ldw	r3,-8(fp)
    1470:	18800104 	addi	r2,r3,4
    1474:	e0bffe15 	stw	r2,-8(fp)
    1478:	1805883a 	mov	r2,r3
    147c:	10800017 	ldw	r2,0(r2)
    1480:	e0bffa15 	stw	r2,-24(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    1484:	e0bffa17 	ldw	r2,-24(fp)
    1488:	1004c03a 	cmpne	r2,r2,zero
    148c:	1000031e 	bne	r2,zero,149c <alt_printf+0x100>
                    {
                        alt_putchar('0');
    1490:	01000c04 	movi	r4,48
    1494:	00015f40 	call	15f4 <alt_putchar>
                        continue;
    1498:	00004506 	br	15b0 <alt_printf+0x214>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
    149c:	00800704 	movi	r2,28
    14a0:	e0bff815 	stw	r2,-32(fp)
                    while (!(v & (0xF << digit_shift)))
    14a4:	00000306 	br	14b4 <alt_printf+0x118>
                        digit_shift -= 4;
    14a8:	e0bff817 	ldw	r2,-32(fp)
    14ac:	10bfff04 	addi	r2,r2,-4
    14b0:	e0bff815 	stw	r2,-32(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    14b4:	00c003c4 	movi	r3,15
    14b8:	e0bff817 	ldw	r2,-32(fp)
    14bc:	1884983a 	sll	r2,r3,r2
    14c0:	1007883a 	mov	r3,r2
    14c4:	e0bffa17 	ldw	r2,-24(fp)
    14c8:	1884703a 	and	r2,r3,r2
    14cc:	1005003a 	cmpeq	r2,r2,zero
    14d0:	103ff51e 	bne	r2,zero,14a8 <alt_printf+0x10c>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    14d4:	00001806 	br	1538 <alt_printf+0x19c>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    14d8:	00c003c4 	movi	r3,15
    14dc:	e0bff817 	ldw	r2,-32(fp)
    14e0:	1884983a 	sll	r2,r3,r2
    14e4:	1007883a 	mov	r3,r2
    14e8:	e0bffa17 	ldw	r2,-24(fp)
    14ec:	1886703a 	and	r3,r3,r2
    14f0:	e0bff817 	ldw	r2,-32(fp)
    14f4:	1884d83a 	srl	r2,r3,r2
    14f8:	e0bff915 	stw	r2,-28(fp)
                        if (digit <= 9)
    14fc:	e0bff917 	ldw	r2,-28(fp)
    1500:	108002a8 	cmpgeui	r2,r2,10
    1504:	1000041e 	bne	r2,zero,1518 <alt_printf+0x17c>
                            c = '0' + digit;
    1508:	e0bff917 	ldw	r2,-28(fp)
    150c:	10800c04 	addi	r2,r2,48
    1510:	e0bffc05 	stb	r2,-16(fp)
    1514:	00000306 	br	1524 <alt_printf+0x188>
                        else
                            c = 'a' + digit - 10;
    1518:	e0bff917 	ldw	r2,-28(fp)
    151c:	108015c4 	addi	r2,r2,87
    1520:	e0bffc05 	stb	r2,-16(fp)
                        alt_putchar(c);
    1524:	e13ffc07 	ldb	r4,-16(fp)
    1528:	00015f40 	call	15f4 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    152c:	e0bff817 	ldw	r2,-32(fp)
    1530:	10bfff04 	addi	r2,r2,-4
    1534:	e0bff815 	stw	r2,-32(fp)
    1538:	e0bff817 	ldw	r2,-32(fp)
    153c:	1004403a 	cmpge	r2,r2,zero
    1540:	103fe51e 	bne	r2,zero,14d8 <alt_printf+0x13c>
    1544:	00001a06 	br	15b0 <alt_printf+0x214>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    1548:	e0bffc07 	ldb	r2,-16(fp)
    154c:	10801cd8 	cmpnei	r2,r2,115
    1550:	1000171e 	bne	r2,zero,15b0 <alt_printf+0x214>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
    1554:	e0fffe17 	ldw	r3,-8(fp)
    1558:	18800104 	addi	r2,r3,4
    155c:	e0bffe15 	stw	r2,-8(fp)
    1560:	1805883a 	mov	r2,r3
    1564:	10800017 	ldw	r2,0(r2)
    1568:	e0bff715 	stw	r2,-36(fp)

                    while(*s)
    156c:	00000906 	br	1594 <alt_printf+0x1f8>
                      alt_putchar(*s++);
    1570:	e0bff717 	ldw	r2,-36(fp)
    1574:	10800003 	ldbu	r2,0(r2)
    1578:	11003fcc 	andi	r4,r2,255
    157c:	2100201c 	xori	r4,r4,128
    1580:	213fe004 	addi	r4,r4,-128
    1584:	e0bff717 	ldw	r2,-36(fp)
    1588:	10800044 	addi	r2,r2,1
    158c:	e0bff715 	stw	r2,-36(fp)
    1590:	00015f40 	call	15f4 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
    1594:	e0bff717 	ldw	r2,-36(fp)
    1598:	10800003 	ldbu	r2,0(r2)
    159c:	10803fcc 	andi	r2,r2,255
    15a0:	1080201c 	xori	r2,r2,128
    15a4:	10bfe004 	addi	r2,r2,-128
    15a8:	1004c03a 	cmpne	r2,r2,zero
    15ac:	103ff01e 	bne	r2,zero,1570 <alt_printf+0x1d4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    15b0:	e0bffd17 	ldw	r2,-12(fp)
    15b4:	10800003 	ldbu	r2,0(r2)
    15b8:	e0bffc05 	stb	r2,-16(fp)
    15bc:	e0bffc07 	ldb	r2,-16(fp)
    15c0:	1004c03a 	cmpne	r2,r2,zero
    15c4:	1007883a 	mov	r3,r2
    15c8:	e0bffd17 	ldw	r2,-12(fp)
    15cc:	10800044 	addi	r2,r2,1
    15d0:	e0bffd15 	stw	r2,-12(fp)
    15d4:	18803fcc 	andi	r2,r3,255
    15d8:	1004c03a 	cmpne	r2,r2,zero
    15dc:	103f7c1e 	bne	r2,zero,13d0 <alt_printf+0x34>
            {
                break;
            }
        }
    }
}
    15e0:	e037883a 	mov	sp,fp
    15e4:	dfc00117 	ldw	ra,4(sp)
    15e8:	df000017 	ldw	fp,0(sp)
    15ec:	dec00504 	addi	sp,sp,20
    15f0:	f800283a 	ret

000015f4 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    15f4:	defffd04 	addi	sp,sp,-12
    15f8:	dfc00215 	stw	ra,8(sp)
    15fc:	df000115 	stw	fp,4(sp)
    1600:	df000104 	addi	fp,sp,4
    1604:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
    1608:	00800074 	movhi	r2,1
    160c:	10aea204 	addi	r2,r2,-17784
    1610:	10800017 	ldw	r2,0(r2)
    1614:	11400217 	ldw	r5,8(r2)
    1618:	e13fff17 	ldw	r4,-4(fp)
    161c:	0006e240 	call	6e24 <putc>
#endif
}
    1620:	e037883a 	mov	sp,fp
    1624:	dfc00117 	ldw	ra,4(sp)
    1628:	df000017 	ldw	fp,0(sp)
    162c:	dec00204 	addi	sp,sp,8
    1630:	f800283a 	ret

00001634 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    1634:	defffd04 	addi	sp,sp,-12
    1638:	dfc00215 	stw	ra,8(sp)
    163c:	df000115 	stw	fp,4(sp)
    1640:	df000104 	addi	fp,sp,4
    1644:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, CPU);
    1648:	00069b00 	call	69b0 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    164c:	00800044 	movi	r2,1
    1650:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    1654:	e037883a 	mov	sp,fp
    1658:	dfc00117 	ldw	ra,4(sp)
    165c:	df000017 	ldw	fp,0(sp)
    1660:	dec00204 	addi	sp,sp,8
    1664:	f800283a 	ret

00001668 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    1668:	defffd04 	addi	sp,sp,-12
    166c:	dfc00215 	stw	ra,8(sp)
    1670:	df000115 	stw	fp,4(sp)
    1674:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
    1678:	01040034 	movhi	r4,4096
    167c:	21080004 	addi	r4,r4,8192
    1680:	000b883a 	mov	r5,zero
    1684:	000d883a 	mov	r6,zero
    1688:	01c00204 	movi	r7,8
    168c:	00025bc0 	call	25bc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
    1690:	01000074 	movhi	r4,1
    1694:	21273204 	addi	r4,r4,-25400
    1698:	000b883a 	mov	r5,zero
    169c:	01800204 	movi	r6,8
    16a0:	0001be80 	call	1be8 <altera_avalon_jtag_uart_init>
    16a4:	01000074 	movhi	r4,1
    16a8:	21272804 	addi	r4,r4,-25440
    16ac:	0001a680 	call	1a68 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
    16b0:	01000074 	movhi	r4,1
    16b4:	212b4004 	addi	r4,r4,-21248
    16b8:	0001a680 	call	1a68 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO, Audio);
    16bc:	01000074 	movhi	r4,1
    16c0:	212b4c04 	addi	r4,r4,-21200
    16c4:	0001a680 	call	1a68 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
    16c8:	01000074 	movhi	r4,1
    16cc:	212b5804 	addi	r4,r4,-21152
    16d0:	0002f000 	call	2f00 <alt_up_character_lcd_init>
    16d4:	01000074 	movhi	r4,1
    16d8:	212b5804 	addi	r4,r4,-21152
    16dc:	0001a680 	call	1a68 <alt_dev_reg>
    ALTERA_UP_AVALON_ETHERNET_INIT ( ETHERNET, Ethernet);
    16e0:	01000074 	movhi	r4,1
    16e4:	212b6304 	addi	r4,r4,-21108
    16e8:	00033800 	call	3380 <alt_up_ethernet_init>
    16ec:	01000074 	movhi	r4,1
    16f0:	212b6304 	addi	r4,r4,-21108
    16f4:	0001a680 	call	1a68 <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA_UART, IrDA_UART);
    16f8:	01000074 	movhi	r4,1
    16fc:	212b7204 	addi	r4,r4,-21048
    1700:	0001a680 	call	1a68 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP1, Expansion_JP1);
    1704:	01000074 	movhi	r4,1
    1708:	212b7d04 	addi	r4,r4,-21004
    170c:	0001a680 	call	1a68 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP2, Expansion_JP2);
    1710:	01000074 	movhi	r4,1
    1714:	212b8804 	addi	r4,r4,-20960
    1718:	0001a680 	call	1a68 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
    171c:	01000074 	movhi	r4,1
    1720:	212b9304 	addi	r4,r4,-20916
    1724:	0001a680 	call	1a68 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
    1728:	01000074 	movhi	r4,1
    172c:	212b9e04 	addi	r4,r4,-20872
    1730:	0001a680 	call	1a68 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
    1734:	01000074 	movhi	r4,1
    1738:	212ba904 	addi	r4,r4,-20828
    173c:	0001a680 	call	1a68 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
    1740:	01000074 	movhi	r4,1
    1744:	212bb404 	addi	r4,r4,-20784
    1748:	0001a680 	call	1a68 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
    174c:	01000074 	movhi	r4,1
    1750:	212bbf04 	addi	r4,r4,-20740
    1754:	0001a680 	call	1a68 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
    1758:	01000074 	movhi	r4,1
    175c:	212bca04 	addi	r4,r4,-20696
    1760:	0001a680 	call	1a68 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
    1764:	01000074 	movhi	r4,1
    1768:	212bd504 	addi	r4,r4,-20652
    176c:	0003c080 	call	3c08 <alt_up_ps2_init>
    1770:	01000074 	movhi	r4,1
    1774:	212bd504 	addi	r4,r4,-20652
    1778:	0001a680 	call	1a68 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
    177c:	01000074 	movhi	r4,1
    1780:	212be304 	addi	r4,r4,-20596
    1784:	0001a680 	call	1a68 <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
    1788:	01000074 	movhi	r4,1
    178c:	212bee04 	addi	r4,r4,-20552
    1790:	0001a680 	call	1a68 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VGA_CHAR_BUFFER, VGA_Char_Buffer);
    1794:	00800074 	movhi	r2,1
    1798:	10abfb04 	addi	r2,r2,-20500
    179c:	10800a17 	ldw	r2,40(r2)
    17a0:	10800104 	addi	r2,r2,4
    17a4:	10800017 	ldw	r2,0(r2)
    17a8:	10ffffcc 	andi	r3,r2,65535
    17ac:	00800074 	movhi	r2,1
    17b0:	10abfb04 	addi	r2,r2,-20500
    17b4:	10c00c15 	stw	r3,48(r2)
    17b8:	00800074 	movhi	r2,1
    17bc:	10abfb04 	addi	r2,r2,-20500
    17c0:	10800a17 	ldw	r2,40(r2)
    17c4:	10800104 	addi	r2,r2,4
    17c8:	10800017 	ldw	r2,0(r2)
    17cc:	1005d43a 	srai	r2,r2,16
    17d0:	10ffffcc 	andi	r3,r2,65535
    17d4:	00800074 	movhi	r2,1
    17d8:	10abfb04 	addi	r2,r2,-20500
    17dc:	10c00d15 	stw	r3,52(r2)
    17e0:	00800074 	movhi	r2,1
    17e4:	10abfb04 	addi	r2,r2,-20500
    17e8:	10800c17 	ldw	r2,48(r2)
    17ec:	10801068 	cmpgeui	r2,r2,65
    17f0:	1000081e 	bne	r2,zero,1814 <alt_sys_init+0x1ac>
    17f4:	00c00074 	movhi	r3,1
    17f8:	18ebfb04 	addi	r3,r3,-20500
    17fc:	00800fc4 	movi	r2,63
    1800:	18800f15 	stw	r2,60(r3)
    1804:	00c00074 	movhi	r3,1
    1808:	18ebfb04 	addi	r3,r3,-20500
    180c:	00800184 	movi	r2,6
    1810:	18801015 	stw	r2,64(r3)
    1814:	00800074 	movhi	r2,1
    1818:	10abfb04 	addi	r2,r2,-20500
    181c:	10800d17 	ldw	r2,52(r2)
    1820:	10800868 	cmpgeui	r2,r2,33
    1824:	1000041e 	bne	r2,zero,1838 <alt_sys_init+0x1d0>
    1828:	00c00074 	movhi	r3,1
    182c:	18ebfb04 	addi	r3,r3,-20500
    1830:	008007c4 	movi	r2,31
    1834:	18801115 	stw	r2,68(r3)
    1838:	01000074 	movhi	r4,1
    183c:	212bfb04 	addi	r4,r4,-20500
    1840:	00045740 	call	4574 <alt_up_char_buffer_init>
    1844:	01000074 	movhi	r4,1
    1848:	212bfb04 	addi	r4,r4,-20500
    184c:	0001a680 	call	1a68 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_PIXEL_BUFFER, VGA_Pixel_Buffer);
    1850:	00800074 	movhi	r2,1
    1854:	10ac0d04 	addi	r2,r2,-20428
    1858:	10800a17 	ldw	r2,40(r2)
    185c:	10800017 	ldw	r2,0(r2)
    1860:	1007883a 	mov	r3,r2
    1864:	00800074 	movhi	r2,1
    1868:	10ac0d04 	addi	r2,r2,-20428
    186c:	10c00b15 	stw	r3,44(r2)
    1870:	00800074 	movhi	r2,1
    1874:	10ac0d04 	addi	r2,r2,-20428
    1878:	10800a17 	ldw	r2,40(r2)
    187c:	10800104 	addi	r2,r2,4
    1880:	10800017 	ldw	r2,0(r2)
    1884:	1007883a 	mov	r3,r2
    1888:	00800074 	movhi	r2,1
    188c:	10ac0d04 	addi	r2,r2,-20428
    1890:	10c00c15 	stw	r3,48(r2)
    1894:	00800074 	movhi	r2,1
    1898:	10ac0d04 	addi	r2,r2,-20428
    189c:	10800a17 	ldw	r2,40(r2)
    18a0:	10800204 	addi	r2,r2,8
    18a4:	10800017 	ldw	r2,0(r2)
    18a8:	10ffffcc 	andi	r3,r2,65535
    18ac:	00800074 	movhi	r2,1
    18b0:	10ac0d04 	addi	r2,r2,-20428
    18b4:	10c00f15 	stw	r3,60(r2)
    18b8:	00800074 	movhi	r2,1
    18bc:	10ac0d04 	addi	r2,r2,-20428
    18c0:	10800a17 	ldw	r2,40(r2)
    18c4:	10800204 	addi	r2,r2,8
    18c8:	10800017 	ldw	r2,0(r2)
    18cc:	1005d43a 	srai	r2,r2,16
    18d0:	10ffffcc 	andi	r3,r2,65535
    18d4:	00800074 	movhi	r2,1
    18d8:	10ac0d04 	addi	r2,r2,-20428
    18dc:	10c01015 	stw	r3,64(r2)
    18e0:	00800074 	movhi	r2,1
    18e4:	10ac0d04 	addi	r2,r2,-20428
    18e8:	10800a17 	ldw	r2,40(r2)
    18ec:	10800304 	addi	r2,r2,12
    18f0:	10800017 	ldw	r2,0(r2)
    18f4:	1005d07a 	srai	r2,r2,1
    18f8:	10c0004c 	andi	r3,r2,1
    18fc:	00800074 	movhi	r2,1
    1900:	10ac0d04 	addi	r2,r2,-20428
    1904:	10c00d15 	stw	r3,52(r2)
    1908:	00800074 	movhi	r2,1
    190c:	10ac0d04 	addi	r2,r2,-20428
    1910:	10800a17 	ldw	r2,40(r2)
    1914:	10800304 	addi	r2,r2,12
    1918:	10800017 	ldw	r2,0(r2)
    191c:	1005d13a 	srai	r2,r2,4
    1920:	10c003cc 	andi	r3,r2,15
    1924:	00800074 	movhi	r2,1
    1928:	10ac0d04 	addi	r2,r2,-20428
    192c:	10c00e15 	stw	r3,56(r2)
    1930:	00800074 	movhi	r2,1
    1934:	10ac0d04 	addi	r2,r2,-20428
    1938:	10800a17 	ldw	r2,40(r2)
    193c:	10800304 	addi	r2,r2,12
    1940:	10800017 	ldw	r2,0(r2)
    1944:	1005d43a 	srai	r2,r2,16
    1948:	1007883a 	mov	r3,r2
    194c:	00bfffc4 	movi	r2,-1
    1950:	1884703a 	and	r2,r3,r2
    1954:	e0bfff45 	stb	r2,-3(fp)
    1958:	00800074 	movhi	r2,1
    195c:	10ac0d04 	addi	r2,r2,-20428
    1960:	10800a17 	ldw	r2,40(r2)
    1964:	10800304 	addi	r2,r2,12
    1968:	10800017 	ldw	r2,0(r2)
    196c:	1005d63a 	srai	r2,r2,24
    1970:	1007883a 	mov	r3,r2
    1974:	00bfffc4 	movi	r2,-1
    1978:	1884703a 	and	r2,r3,r2
    197c:	e0bfff05 	stb	r2,-4(fp)
    1980:	00800074 	movhi	r2,1
    1984:	10ac0d04 	addi	r2,r2,-20428
    1988:	10800e17 	ldw	r2,56(r2)
    198c:	10800058 	cmpnei	r2,r2,1
    1990:	1000041e 	bne	r2,zero,19a4 <alt_sys_init+0x33c>
    1994:	00800074 	movhi	r2,1
    1998:	10ac0d04 	addi	r2,r2,-20428
    199c:	10001115 	stw	zero,68(r2)
    19a0:	00000e06 	br	19dc <alt_sys_init+0x374>
    19a4:	00800074 	movhi	r2,1
    19a8:	10ac0d04 	addi	r2,r2,-20428
    19ac:	10800e17 	ldw	r2,56(r2)
    19b0:	10800098 	cmpnei	r2,r2,2
    19b4:	1000051e 	bne	r2,zero,19cc <alt_sys_init+0x364>
    19b8:	00c00074 	movhi	r3,1
    19bc:	18ec0d04 	addi	r3,r3,-20428
    19c0:	00800044 	movi	r2,1
    19c4:	18801115 	stw	r2,68(r3)
    19c8:	00000406 	br	19dc <alt_sys_init+0x374>
    19cc:	00c00074 	movhi	r3,1
    19d0:	18ec0d04 	addi	r3,r3,-20428
    19d4:	00800084 	movi	r2,2
    19d8:	18801115 	stw	r2,68(r3)
    19dc:	e0ffff43 	ldbu	r3,-3(fp)
    19e0:	00800804 	movi	r2,32
    19e4:	10c7c83a 	sub	r3,r2,r3
    19e8:	00bfffc4 	movi	r2,-1
    19ec:	10c6d83a 	srl	r3,r2,r3
    19f0:	00800074 	movhi	r2,1
    19f4:	10ac0d04 	addi	r2,r2,-20428
    19f8:	10c01215 	stw	r3,72(r2)
    19fc:	e0ffff43 	ldbu	r3,-3(fp)
    1a00:	00800074 	movhi	r2,1
    1a04:	10ac0d04 	addi	r2,r2,-20428
    1a08:	10801117 	ldw	r2,68(r2)
    1a0c:	1887883a 	add	r3,r3,r2
    1a10:	00800074 	movhi	r2,1
    1a14:	10ac0d04 	addi	r2,r2,-20428
    1a18:	10c01315 	stw	r3,76(r2)
    1a1c:	e0ffff03 	ldbu	r3,-4(fp)
    1a20:	00800804 	movi	r2,32
    1a24:	10c7c83a 	sub	r3,r2,r3
    1a28:	00bfffc4 	movi	r2,-1
    1a2c:	10c6d83a 	srl	r3,r2,r3
    1a30:	00800074 	movhi	r2,1
    1a34:	10ac0d04 	addi	r2,r2,-20428
    1a38:	10c01415 	stw	r3,80(r2)
    1a3c:	01000074 	movhi	r4,1
    1a40:	212c0d04 	addi	r4,r4,-20428
    1a44:	0001a680 	call	1a68 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
    1a48:	01000074 	movhi	r4,1
    1a4c:	212c2204 	addi	r4,r4,-20344
    1a50:	0001a680 	call	1a68 <alt_dev_reg>
}
    1a54:	e037883a 	mov	sp,fp
    1a58:	dfc00117 	ldw	ra,4(sp)
    1a5c:	df000017 	ldw	fp,0(sp)
    1a60:	dec00204 	addi	sp,sp,8
    1a64:	f800283a 	ret

00001a68 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    1a68:	defffd04 	addi	sp,sp,-12
    1a6c:	dfc00215 	stw	ra,8(sp)
    1a70:	df000115 	stw	fp,4(sp)
    1a74:	df000104 	addi	fp,sp,4
    1a78:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    1a7c:	e13fff17 	ldw	r4,-4(fp)
    1a80:	01400074 	movhi	r5,1
    1a84:	296e9c04 	addi	r5,r5,-17808
    1a88:	00060dc0 	call	60dc <alt_dev_llist_insert>
}
    1a8c:	e037883a 	mov	sp,fp
    1a90:	dfc00117 	ldw	ra,4(sp)
    1a94:	df000017 	ldw	fp,0(sp)
    1a98:	dec00204 	addi	sp,sp,8
    1a9c:	f800283a 	ret

00001aa0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    1aa0:	defffa04 	addi	sp,sp,-24
    1aa4:	dfc00515 	stw	ra,20(sp)
    1aa8:	df000415 	stw	fp,16(sp)
    1aac:	df000404 	addi	fp,sp,16
    1ab0:	e13ffd15 	stw	r4,-12(fp)
    1ab4:	e17ffe15 	stw	r5,-8(fp)
    1ab8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    1abc:	e0bffd17 	ldw	r2,-12(fp)
    1ac0:	10800017 	ldw	r2,0(r2)
    1ac4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    1ac8:	e0bffc17 	ldw	r2,-16(fp)
    1acc:	11000a04 	addi	r4,r2,40
    1ad0:	e0bffd17 	ldw	r2,-12(fp)
    1ad4:	11c00217 	ldw	r7,8(r2)
    1ad8:	e17ffe17 	ldw	r5,-8(fp)
    1adc:	e1bfff17 	ldw	r6,-4(fp)
    1ae0:	00020e40 	call	20e4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    1ae4:	e037883a 	mov	sp,fp
    1ae8:	dfc00117 	ldw	ra,4(sp)
    1aec:	df000017 	ldw	fp,0(sp)
    1af0:	dec00204 	addi	sp,sp,8
    1af4:	f800283a 	ret

00001af8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    1af8:	defffa04 	addi	sp,sp,-24
    1afc:	dfc00515 	stw	ra,20(sp)
    1b00:	df000415 	stw	fp,16(sp)
    1b04:	df000404 	addi	fp,sp,16
    1b08:	e13ffd15 	stw	r4,-12(fp)
    1b0c:	e17ffe15 	stw	r5,-8(fp)
    1b10:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    1b14:	e0bffd17 	ldw	r2,-12(fp)
    1b18:	10800017 	ldw	r2,0(r2)
    1b1c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    1b20:	e0bffc17 	ldw	r2,-16(fp)
    1b24:	11000a04 	addi	r4,r2,40
    1b28:	e0bffd17 	ldw	r2,-12(fp)
    1b2c:	11c00217 	ldw	r7,8(r2)
    1b30:	e17ffe17 	ldw	r5,-8(fp)
    1b34:	e1bfff17 	ldw	r6,-4(fp)
    1b38:	00023080 	call	2308 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    1b3c:	e037883a 	mov	sp,fp
    1b40:	dfc00117 	ldw	ra,4(sp)
    1b44:	df000017 	ldw	fp,0(sp)
    1b48:	dec00204 	addi	sp,sp,8
    1b4c:	f800283a 	ret

00001b50 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    1b50:	defffc04 	addi	sp,sp,-16
    1b54:	dfc00315 	stw	ra,12(sp)
    1b58:	df000215 	stw	fp,8(sp)
    1b5c:	df000204 	addi	fp,sp,8
    1b60:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    1b64:	e0bfff17 	ldw	r2,-4(fp)
    1b68:	10800017 	ldw	r2,0(r2)
    1b6c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    1b70:	e0bffe17 	ldw	r2,-8(fp)
    1b74:	11000a04 	addi	r4,r2,40
    1b78:	e0bfff17 	ldw	r2,-4(fp)
    1b7c:	11400217 	ldw	r5,8(r2)
    1b80:	0001f7c0 	call	1f7c <altera_avalon_jtag_uart_close>
}
    1b84:	e037883a 	mov	sp,fp
    1b88:	dfc00117 	ldw	ra,4(sp)
    1b8c:	df000017 	ldw	fp,0(sp)
    1b90:	dec00204 	addi	sp,sp,8
    1b94:	f800283a 	ret

00001b98 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    1b98:	defffa04 	addi	sp,sp,-24
    1b9c:	dfc00515 	stw	ra,20(sp)
    1ba0:	df000415 	stw	fp,16(sp)
    1ba4:	df000404 	addi	fp,sp,16
    1ba8:	e13ffd15 	stw	r4,-12(fp)
    1bac:	e17ffe15 	stw	r5,-8(fp)
    1bb0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    1bb4:	e0bffd17 	ldw	r2,-12(fp)
    1bb8:	10800017 	ldw	r2,0(r2)
    1bbc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    1bc0:	e0bffc17 	ldw	r2,-16(fp)
    1bc4:	11000a04 	addi	r4,r2,40
    1bc8:	e17ffe17 	ldw	r5,-8(fp)
    1bcc:	e1bfff17 	ldw	r6,-4(fp)
    1bd0:	0001ff00 	call	1ff0 <altera_avalon_jtag_uart_ioctl>
}
    1bd4:	e037883a 	mov	sp,fp
    1bd8:	dfc00117 	ldw	ra,4(sp)
    1bdc:	df000017 	ldw	fp,0(sp)
    1be0:	dec00204 	addi	sp,sp,8
    1be4:	f800283a 	ret

00001be8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    1be8:	defffb04 	addi	sp,sp,-20
    1bec:	dfc00415 	stw	ra,16(sp)
    1bf0:	df000315 	stw	fp,12(sp)
    1bf4:	df000304 	addi	fp,sp,12
    1bf8:	e13ffd15 	stw	r4,-12(fp)
    1bfc:	e17ffe15 	stw	r5,-8(fp)
    1c00:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    1c04:	e0fffd17 	ldw	r3,-12(fp)
    1c08:	00800044 	movi	r2,1
    1c0c:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    1c10:	e0bffd17 	ldw	r2,-12(fp)
    1c14:	10800017 	ldw	r2,0(r2)
    1c18:	11000104 	addi	r4,r2,4
    1c1c:	e0bffd17 	ldw	r2,-12(fp)
    1c20:	10800817 	ldw	r2,32(r2)
    1c24:	1007883a 	mov	r3,r2
    1c28:	2005883a 	mov	r2,r4
    1c2c:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
    1c30:	e13fff17 	ldw	r4,-4(fp)
    1c34:	e17ffd17 	ldw	r5,-12(fp)
    1c38:	01800034 	movhi	r6,0
    1c3c:	31872804 	addi	r6,r6,7328
    1c40:	00010840 	call	1084 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    1c44:	e0bffd17 	ldw	r2,-12(fp)
    1c48:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    1c4c:	e0bffd17 	ldw	r2,-12(fp)
    1c50:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    1c54:	00800074 	movhi	r2,1
    1c58:	10b63004 	addi	r2,r2,-10048
    1c5c:	10800017 	ldw	r2,0(r2)
    1c60:	100b883a 	mov	r5,r2
    1c64:	01800034 	movhi	r6,0
    1c68:	3187b304 	addi	r6,r6,7884
    1c6c:	e1fffd17 	ldw	r7,-12(fp)
    1c70:	0005de40 	call	5de4 <alt_alarm_start>
    1c74:	1004403a 	cmpge	r2,r2,zero
    1c78:	1000041e 	bne	r2,zero,1c8c <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    1c7c:	e0fffd17 	ldw	r3,-12(fp)
    1c80:	00a00034 	movhi	r2,32768
    1c84:	10bfffc4 	addi	r2,r2,-1
    1c88:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    1c8c:	e037883a 	mov	sp,fp
    1c90:	dfc00117 	ldw	ra,4(sp)
    1c94:	df000017 	ldw	fp,0(sp)
    1c98:	dec00204 	addi	sp,sp,8
    1c9c:	f800283a 	ret

00001ca0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    1ca0:	defff704 	addi	sp,sp,-36
    1ca4:	df000815 	stw	fp,32(sp)
    1ca8:	df000804 	addi	fp,sp,32
    1cac:	e13ffe15 	stw	r4,-8(fp)
    1cb0:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    1cb4:	e0bffe17 	ldw	r2,-8(fp)
    1cb8:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
    1cbc:	e0bffd17 	ldw	r2,-12(fp)
    1cc0:	10800017 	ldw	r2,0(r2)
    1cc4:	e0bffc15 	stw	r2,-16(fp)
    1cc8:	00000006 	br	1ccc <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    1ccc:	e0bffc17 	ldw	r2,-16(fp)
    1cd0:	10800104 	addi	r2,r2,4
    1cd4:	10800037 	ldwio	r2,0(r2)
    1cd8:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    1cdc:	e0bffb17 	ldw	r2,-20(fp)
    1ce0:	1080c00c 	andi	r2,r2,768
    1ce4:	1005003a 	cmpeq	r2,r2,zero
    1ce8:	1000741e 	bne	r2,zero,1ebc <altera_avalon_jtag_uart_irq+0x21c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    1cec:	e0bffb17 	ldw	r2,-20(fp)
    1cf0:	1080400c 	andi	r2,r2,256
    1cf4:	1005003a 	cmpeq	r2,r2,zero
    1cf8:	1000351e 	bne	r2,zero,1dd0 <altera_avalon_jtag_uart_irq+0x130>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    1cfc:	00800074 	movhi	r2,1
    1d00:	e0bffa15 	stw	r2,-24(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1d04:	e0bffd17 	ldw	r2,-12(fp)
    1d08:	10800a17 	ldw	r2,40(r2)
    1d0c:	10800044 	addi	r2,r2,1
    1d10:	1081ffcc 	andi	r2,r2,2047
    1d14:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
    1d18:	e0bffd17 	ldw	r2,-12(fp)
    1d1c:	10c00b17 	ldw	r3,44(r2)
    1d20:	e0bff917 	ldw	r2,-28(fp)
    1d24:	18801626 	beq	r3,r2,1d80 <altera_avalon_jtag_uart_irq+0xe0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    1d28:	e0bffc17 	ldw	r2,-16(fp)
    1d2c:	10800037 	ldwio	r2,0(r2)
    1d30:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    1d34:	e0bffa17 	ldw	r2,-24(fp)
    1d38:	10a0000c 	andi	r2,r2,32768
    1d3c:	1005003a 	cmpeq	r2,r2,zero
    1d40:	10000f1e 	bne	r2,zero,1d80 <altera_avalon_jtag_uart_irq+0xe0>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    1d44:	e0bffd17 	ldw	r2,-12(fp)
    1d48:	10c00a17 	ldw	r3,40(r2)
    1d4c:	e0bffa17 	ldw	r2,-24(fp)
    1d50:	1009883a 	mov	r4,r2
    1d54:	e0bffd17 	ldw	r2,-12(fp)
    1d58:	1885883a 	add	r2,r3,r2
    1d5c:	10800e04 	addi	r2,r2,56
    1d60:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1d64:	e0bffd17 	ldw	r2,-12(fp)
    1d68:	10800a17 	ldw	r2,40(r2)
    1d6c:	10800044 	addi	r2,r2,1
    1d70:	10c1ffcc 	andi	r3,r2,2047
    1d74:	e0bffd17 	ldw	r2,-12(fp)
    1d78:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    1d7c:	003fe106 	br	1d04 <altera_avalon_jtag_uart_irq+0x64>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    1d80:	e0bffa17 	ldw	r2,-24(fp)
    1d84:	10bfffec 	andhi	r2,r2,65535
    1d88:	1005003a 	cmpeq	r2,r2,zero
    1d8c:	1000101e 	bne	r2,zero,1dd0 <altera_avalon_jtag_uart_irq+0x130>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    1d90:	e0bffd17 	ldw	r2,-12(fp)
    1d94:	10c00817 	ldw	r3,32(r2)
    1d98:	00bfff84 	movi	r2,-2
    1d9c:	1886703a 	and	r3,r3,r2
    1da0:	e0bffd17 	ldw	r2,-12(fp)
    1da4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    1da8:	e0bffc17 	ldw	r2,-16(fp)
    1dac:	11000104 	addi	r4,r2,4
    1db0:	e0bffd17 	ldw	r2,-12(fp)
    1db4:	10800817 	ldw	r2,32(r2)
    1db8:	1007883a 	mov	r3,r2
    1dbc:	2005883a 	mov	r2,r4
    1dc0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    1dc4:	e0bffc17 	ldw	r2,-16(fp)
    1dc8:	10800104 	addi	r2,r2,4
    1dcc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    1dd0:	e0bffb17 	ldw	r2,-20(fp)
    1dd4:	1080800c 	andi	r2,r2,512
    1dd8:	1005003a 	cmpeq	r2,r2,zero
    1ddc:	103fbb1e 	bne	r2,zero,1ccc <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    1de0:	e0bffb17 	ldw	r2,-20(fp)
    1de4:	10bfffec 	andhi	r2,r2,65535
    1de8:	1004d43a 	srli	r2,r2,16
    1dec:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    1df0:	00001506 	br	1e48 <altera_avalon_jtag_uart_irq+0x1a8>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    1df4:	e13ffc17 	ldw	r4,-16(fp)
    1df8:	e0bffd17 	ldw	r2,-12(fp)
    1dfc:	10c00d17 	ldw	r3,52(r2)
    1e00:	e0bffd17 	ldw	r2,-12(fp)
    1e04:	1885883a 	add	r2,r3,r2
    1e08:	10820e04 	addi	r2,r2,2104
    1e0c:	10800003 	ldbu	r2,0(r2)
    1e10:	10c03fcc 	andi	r3,r2,255
    1e14:	18c0201c 	xori	r3,r3,128
    1e18:	18ffe004 	addi	r3,r3,-128
    1e1c:	2005883a 	mov	r2,r4
    1e20:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1e24:	e0bffd17 	ldw	r2,-12(fp)
    1e28:	10800d17 	ldw	r2,52(r2)
    1e2c:	10800044 	addi	r2,r2,1
    1e30:	10c1ffcc 	andi	r3,r2,2047
    1e34:	e0bffd17 	ldw	r2,-12(fp)
    1e38:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    1e3c:	e0bff817 	ldw	r2,-32(fp)
    1e40:	10bfffc4 	addi	r2,r2,-1
    1e44:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    1e48:	e0bff817 	ldw	r2,-32(fp)
    1e4c:	1005003a 	cmpeq	r2,r2,zero
    1e50:	1000051e 	bne	r2,zero,1e68 <altera_avalon_jtag_uart_irq+0x1c8>
    1e54:	e0bffd17 	ldw	r2,-12(fp)
    1e58:	10c00d17 	ldw	r3,52(r2)
    1e5c:	e0bffd17 	ldw	r2,-12(fp)
    1e60:	10800c17 	ldw	r2,48(r2)
    1e64:	18bfe31e 	bne	r3,r2,1df4 <altera_avalon_jtag_uart_irq+0x154>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    1e68:	e0bff817 	ldw	r2,-32(fp)
    1e6c:	1005003a 	cmpeq	r2,r2,zero
    1e70:	103f961e 	bne	r2,zero,1ccc <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    1e74:	e0bffd17 	ldw	r2,-12(fp)
    1e78:	10c00817 	ldw	r3,32(r2)
    1e7c:	00bfff44 	movi	r2,-3
    1e80:	1886703a 	and	r3,r3,r2
    1e84:	e0bffd17 	ldw	r2,-12(fp)
    1e88:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    1e8c:	e0bffd17 	ldw	r2,-12(fp)
    1e90:	10800017 	ldw	r2,0(r2)
    1e94:	11000104 	addi	r4,r2,4
    1e98:	e0bffd17 	ldw	r2,-12(fp)
    1e9c:	10800817 	ldw	r2,32(r2)
    1ea0:	1007883a 	mov	r3,r2
    1ea4:	2005883a 	mov	r2,r4
    1ea8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    1eac:	e0bffc17 	ldw	r2,-16(fp)
    1eb0:	10800104 	addi	r2,r2,4
    1eb4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    1eb8:	003f8406 	br	1ccc <altera_avalon_jtag_uart_irq+0x2c>
}
    1ebc:	e037883a 	mov	sp,fp
    1ec0:	df000017 	ldw	fp,0(sp)
    1ec4:	dec00104 	addi	sp,sp,4
    1ec8:	f800283a 	ret

00001ecc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    1ecc:	defffc04 	addi	sp,sp,-16
    1ed0:	df000315 	stw	fp,12(sp)
    1ed4:	df000304 	addi	fp,sp,12
    1ed8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    1edc:	e0bfff17 	ldw	r2,-4(fp)
    1ee0:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    1ee4:	e0bffe17 	ldw	r2,-8(fp)
    1ee8:	10800017 	ldw	r2,0(r2)
    1eec:	10800104 	addi	r2,r2,4
    1ef0:	10800037 	ldwio	r2,0(r2)
    1ef4:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    1ef8:	e0bffd17 	ldw	r2,-12(fp)
    1efc:	1081000c 	andi	r2,r2,1024
    1f00:	1005003a 	cmpeq	r2,r2,zero
    1f04:	10000c1e 	bne	r2,zero,1f38 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    1f08:	e0bffe17 	ldw	r2,-8(fp)
    1f0c:	10800017 	ldw	r2,0(r2)
    1f10:	11000104 	addi	r4,r2,4
    1f14:	e0bffe17 	ldw	r2,-8(fp)
    1f18:	10800817 	ldw	r2,32(r2)
    1f1c:	10810014 	ori	r2,r2,1024
    1f20:	1007883a 	mov	r3,r2
    1f24:	2005883a 	mov	r2,r4
    1f28:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    1f2c:	e0bffe17 	ldw	r2,-8(fp)
    1f30:	10000915 	stw	zero,36(r2)
    1f34:	00000a06 	br	1f60 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    1f38:	e0bffe17 	ldw	r2,-8(fp)
    1f3c:	10c00917 	ldw	r3,36(r2)
    1f40:	00a00034 	movhi	r2,32768
    1f44:	10bfff04 	addi	r2,r2,-4
    1f48:	10c00536 	bltu	r2,r3,1f60 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
    1f4c:	e0bffe17 	ldw	r2,-8(fp)
    1f50:	10800917 	ldw	r2,36(r2)
    1f54:	10c00044 	addi	r3,r2,1
    1f58:	e0bffe17 	ldw	r2,-8(fp)
    1f5c:	10c00915 	stw	r3,36(r2)
    1f60:	00800074 	movhi	r2,1
    1f64:	10b63004 	addi	r2,r2,-10048
    1f68:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    1f6c:	e037883a 	mov	sp,fp
    1f70:	df000017 	ldw	fp,0(sp)
    1f74:	dec00104 	addi	sp,sp,4
    1f78:	f800283a 	ret

00001f7c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    1f7c:	defffc04 	addi	sp,sp,-16
    1f80:	df000315 	stw	fp,12(sp)
    1f84:	df000304 	addi	fp,sp,12
    1f88:	e13ffd15 	stw	r4,-12(fp)
    1f8c:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    1f90:	00000706 	br	1fb0 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    1f94:	e0bffe17 	ldw	r2,-8(fp)
    1f98:	1090000c 	andi	r2,r2,16384
    1f9c:	1005003a 	cmpeq	r2,r2,zero
    1fa0:	1000031e 	bne	r2,zero,1fb0 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
    1fa4:	00bffd44 	movi	r2,-11
    1fa8:	e0bfff15 	stw	r2,-4(fp)
    1fac:	00000b06 	br	1fdc <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    1fb0:	e0bffd17 	ldw	r2,-12(fp)
    1fb4:	10c00d17 	ldw	r3,52(r2)
    1fb8:	e0bffd17 	ldw	r2,-12(fp)
    1fbc:	10800c17 	ldw	r2,48(r2)
    1fc0:	18800526 	beq	r3,r2,1fd8 <altera_avalon_jtag_uart_close+0x5c>
    1fc4:	e0bffd17 	ldw	r2,-12(fp)
    1fc8:	10c00917 	ldw	r3,36(r2)
    1fcc:	e0bffd17 	ldw	r2,-12(fp)
    1fd0:	10800117 	ldw	r2,4(r2)
    1fd4:	18bfef36 	bltu	r3,r2,1f94 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    1fd8:	e03fff15 	stw	zero,-4(fp)
    1fdc:	e0bfff17 	ldw	r2,-4(fp)
}
    1fe0:	e037883a 	mov	sp,fp
    1fe4:	df000017 	ldw	fp,0(sp)
    1fe8:	dec00104 	addi	sp,sp,4
    1fec:	f800283a 	ret

00001ff0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    1ff0:	defff804 	addi	sp,sp,-32
    1ff4:	df000715 	stw	fp,28(sp)
    1ff8:	df000704 	addi	fp,sp,28
    1ffc:	e13ffb15 	stw	r4,-20(fp)
    2000:	e17ffc15 	stw	r5,-16(fp)
    2004:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
    2008:	00bff9c4 	movi	r2,-25
    200c:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
    2010:	e0bffc17 	ldw	r2,-16(fp)
    2014:	e0bfff15 	stw	r2,-4(fp)
    2018:	e0ffff17 	ldw	r3,-4(fp)
    201c:	189a8060 	cmpeqi	r2,r3,27137
    2020:	1000041e 	bne	r2,zero,2034 <altera_avalon_jtag_uart_ioctl+0x44>
    2024:	e0ffff17 	ldw	r3,-4(fp)
    2028:	189a80a0 	cmpeqi	r2,r3,27138
    202c:	10001b1e 	bne	r2,zero,209c <altera_avalon_jtag_uart_ioctl+0xac>
    2030:	00002706 	br	20d0 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    2034:	e0bffb17 	ldw	r2,-20(fp)
    2038:	10c00117 	ldw	r3,4(r2)
    203c:	00a00034 	movhi	r2,32768
    2040:	10bfffc4 	addi	r2,r2,-1
    2044:	18802226 	beq	r3,r2,20d0 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
    2048:	e0bffd17 	ldw	r2,-12(fp)
    204c:	10800017 	ldw	r2,0(r2)
    2050:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    2054:	e0bff917 	ldw	r2,-28(fp)
    2058:	10800090 	cmplti	r2,r2,2
    205c:	1000071e 	bne	r2,zero,207c <altera_avalon_jtag_uart_ioctl+0x8c>
    2060:	e0fff917 	ldw	r3,-28(fp)
    2064:	00a00034 	movhi	r2,32768
    2068:	10bfffc4 	addi	r2,r2,-1
    206c:	18800326 	beq	r3,r2,207c <altera_avalon_jtag_uart_ioctl+0x8c>
    2070:	e0bff917 	ldw	r2,-28(fp)
    2074:	e0bffe15 	stw	r2,-8(fp)
    2078:	00000306 	br	2088 <altera_avalon_jtag_uart_ioctl+0x98>
    207c:	00e00034 	movhi	r3,32768
    2080:	18ffff84 	addi	r3,r3,-2
    2084:	e0fffe15 	stw	r3,-8(fp)
    2088:	e0bffb17 	ldw	r2,-20(fp)
    208c:	e0fffe17 	ldw	r3,-8(fp)
    2090:	10c00115 	stw	r3,4(r2)
      rc = 0;
    2094:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
    2098:	00000d06 	br	20d0 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    209c:	e0bffb17 	ldw	r2,-20(fp)
    20a0:	10c00117 	ldw	r3,4(r2)
    20a4:	00a00034 	movhi	r2,32768
    20a8:	10bfffc4 	addi	r2,r2,-1
    20ac:	18800826 	beq	r3,r2,20d0 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    20b0:	e13ffd17 	ldw	r4,-12(fp)
    20b4:	e0bffb17 	ldw	r2,-20(fp)
    20b8:	10c00917 	ldw	r3,36(r2)
    20bc:	e0bffb17 	ldw	r2,-20(fp)
    20c0:	10800117 	ldw	r2,4(r2)
    20c4:	1885803a 	cmpltu	r2,r3,r2
    20c8:	20800015 	stw	r2,0(r4)
      rc = 0;
    20cc:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
    20d0:	e0bffa17 	ldw	r2,-24(fp)
}
    20d4:	e037883a 	mov	sp,fp
    20d8:	df000017 	ldw	fp,0(sp)
    20dc:	dec00104 	addi	sp,sp,4
    20e0:	f800283a 	ret

000020e4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    20e4:	defff204 	addi	sp,sp,-56
    20e8:	dfc00d15 	stw	ra,52(sp)
    20ec:	df000c15 	stw	fp,48(sp)
    20f0:	df000c04 	addi	fp,sp,48
    20f4:	e13ffb15 	stw	r4,-20(fp)
    20f8:	e17ffc15 	stw	r5,-16(fp)
    20fc:	e1bffd15 	stw	r6,-12(fp)
    2100:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
    2104:	e0bffc17 	ldw	r2,-16(fp)
    2108:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    210c:	00004806 	br	2230 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    2110:	e0bffb17 	ldw	r2,-20(fp)
    2114:	10800a17 	ldw	r2,40(r2)
    2118:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    211c:	e0bffb17 	ldw	r2,-20(fp)
    2120:	10800b17 	ldw	r2,44(r2)
    2124:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
    2128:	e0fff717 	ldw	r3,-36(fp)
    212c:	e0bff617 	ldw	r2,-40(fp)
    2130:	18800536 	bltu	r3,r2,2148 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    2134:	e0bff717 	ldw	r2,-36(fp)
    2138:	e0fff617 	ldw	r3,-40(fp)
    213c:	10c5c83a 	sub	r2,r2,r3
    2140:	e0bff815 	stw	r2,-32(fp)
    2144:	00000406 	br	2158 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    2148:	00820004 	movi	r2,2048
    214c:	e0fff617 	ldw	r3,-40(fp)
    2150:	10c5c83a 	sub	r2,r2,r3
    2154:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    2158:	e0bff817 	ldw	r2,-32(fp)
    215c:	1005003a 	cmpeq	r2,r2,zero
    2160:	10001f1e 	bne	r2,zero,21e0 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
    2164:	e0fffd17 	ldw	r3,-12(fp)
    2168:	e0bff817 	ldw	r2,-32(fp)
    216c:	1880022e 	bgeu	r3,r2,2178 <altera_avalon_jtag_uart_read+0x94>
        n = space;
    2170:	e0bffd17 	ldw	r2,-12(fp)
    2174:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    2178:	e0bffb17 	ldw	r2,-20(fp)
    217c:	10c00e04 	addi	r3,r2,56
    2180:	e0bff617 	ldw	r2,-40(fp)
    2184:	1887883a 	add	r3,r3,r2
    2188:	e0bffa17 	ldw	r2,-24(fp)
    218c:	1009883a 	mov	r4,r2
    2190:	180b883a 	mov	r5,r3
    2194:	e1bff817 	ldw	r6,-32(fp)
    2198:	0000f4c0 	call	f4c <memcpy>
      ptr   += n;
    219c:	e0fff817 	ldw	r3,-32(fp)
    21a0:	e0bffa17 	ldw	r2,-24(fp)
    21a4:	10c5883a 	add	r2,r2,r3
    21a8:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
    21ac:	e0fffd17 	ldw	r3,-12(fp)
    21b0:	e0bff817 	ldw	r2,-32(fp)
    21b4:	1885c83a 	sub	r2,r3,r2
    21b8:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    21bc:	e0fff617 	ldw	r3,-40(fp)
    21c0:	e0bff817 	ldw	r2,-32(fp)
    21c4:	1885883a 	add	r2,r3,r2
    21c8:	10c1ffcc 	andi	r3,r2,2047
    21cc:	e0bffb17 	ldw	r2,-20(fp)
    21d0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    21d4:	e0bffd17 	ldw	r2,-12(fp)
    21d8:	10800048 	cmpgei	r2,r2,1
    21dc:	103fcc1e 	bne	r2,zero,2110 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    21e0:	e0fffa17 	ldw	r3,-24(fp)
    21e4:	e0bffc17 	ldw	r2,-16(fp)
    21e8:	1880141e 	bne	r3,r2,223c <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    21ec:	e0bffe17 	ldw	r2,-8(fp)
    21f0:	1090000c 	andi	r2,r2,16384
    21f4:	1004c03a 	cmpne	r2,r2,zero
    21f8:	1000101e 	bne	r2,zero,223c <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    21fc:	e0bffb17 	ldw	r2,-20(fp)
    2200:	10c00a17 	ldw	r3,40(r2)
    2204:	e0bff717 	ldw	r2,-36(fp)
    2208:	1880051e 	bne	r3,r2,2220 <altera_avalon_jtag_uart_read+0x13c>
    220c:	e0bffb17 	ldw	r2,-20(fp)
    2210:	10c00917 	ldw	r3,36(r2)
    2214:	e0bffb17 	ldw	r2,-20(fp)
    2218:	10800117 	ldw	r2,4(r2)
    221c:	18bff736 	bltu	r3,r2,21fc <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    2220:	e0bffb17 	ldw	r2,-20(fp)
    2224:	10c00a17 	ldw	r3,40(r2)
    2228:	e0bff717 	ldw	r2,-36(fp)
    222c:	18800326 	beq	r3,r2,223c <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    2230:	e0bffd17 	ldw	r2,-12(fp)
    2234:	10800048 	cmpgei	r2,r2,1
    2238:	103fb51e 	bne	r2,zero,2110 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    223c:	e0fffa17 	ldw	r3,-24(fp)
    2240:	e0bffc17 	ldw	r2,-16(fp)
    2244:	18801926 	beq	r3,r2,22ac <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2248:	0005303a 	rdctl	r2,status
    224c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2250:	e0fff517 	ldw	r3,-44(fp)
    2254:	00bfff84 	movi	r2,-2
    2258:	1884703a 	and	r2,r3,r2
    225c:	1001703a 	wrctl	status,r2
  
  return context;
    2260:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    2264:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    2268:	e0bffb17 	ldw	r2,-20(fp)
    226c:	10800817 	ldw	r2,32(r2)
    2270:	10c00054 	ori	r3,r2,1
    2274:	e0bffb17 	ldw	r2,-20(fp)
    2278:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    227c:	e0bffb17 	ldw	r2,-20(fp)
    2280:	10800017 	ldw	r2,0(r2)
    2284:	11000104 	addi	r4,r2,4
    2288:	e0bffb17 	ldw	r2,-20(fp)
    228c:	10800817 	ldw	r2,32(r2)
    2290:	1007883a 	mov	r3,r2
    2294:	2005883a 	mov	r2,r4
    2298:	10c00035 	stwio	r3,0(r2)
    229c:	e0bff917 	ldw	r2,-28(fp)
    22a0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    22a4:	e0bff417 	ldw	r2,-48(fp)
    22a8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    22ac:	e0fffa17 	ldw	r3,-24(fp)
    22b0:	e0bffc17 	ldw	r2,-16(fp)
    22b4:	18800526 	beq	r3,r2,22cc <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
    22b8:	e0fffa17 	ldw	r3,-24(fp)
    22bc:	e0bffc17 	ldw	r2,-16(fp)
    22c0:	1887c83a 	sub	r3,r3,r2
    22c4:	e0ffff15 	stw	r3,-4(fp)
    22c8:	00000906 	br	22f0 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
    22cc:	e0bffe17 	ldw	r2,-8(fp)
    22d0:	1090000c 	andi	r2,r2,16384
    22d4:	1005003a 	cmpeq	r2,r2,zero
    22d8:	1000031e 	bne	r2,zero,22e8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    22dc:	00bffd44 	movi	r2,-11
    22e0:	e0bfff15 	stw	r2,-4(fp)
    22e4:	00000206 	br	22f0 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
    22e8:	00bffec4 	movi	r2,-5
    22ec:	e0bfff15 	stw	r2,-4(fp)
    22f0:	e0bfff17 	ldw	r2,-4(fp)
}
    22f4:	e037883a 	mov	sp,fp
    22f8:	dfc00117 	ldw	ra,4(sp)
    22fc:	df000017 	ldw	fp,0(sp)
    2300:	dec00204 	addi	sp,sp,8
    2304:	f800283a 	ret

00002308 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    2308:	defff204 	addi	sp,sp,-56
    230c:	dfc00d15 	stw	ra,52(sp)
    2310:	df000c15 	stw	fp,48(sp)
    2314:	df000c04 	addi	fp,sp,48
    2318:	e13ffb15 	stw	r4,-20(fp)
    231c:	e17ffc15 	stw	r5,-16(fp)
    2320:	e1bffd15 	stw	r6,-12(fp)
    2324:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    2328:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    232c:	e0bffc17 	ldw	r2,-16(fp)
    2330:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    2334:	00003a06 	br	2420 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    2338:	e0bffb17 	ldw	r2,-20(fp)
    233c:	10800c17 	ldw	r2,48(r2)
    2340:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
    2344:	e0bffb17 	ldw	r2,-20(fp)
    2348:	10800d17 	ldw	r2,52(r2)
    234c:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
    2350:	e0fffa17 	ldw	r3,-24(fp)
    2354:	e0bff917 	ldw	r2,-28(fp)
    2358:	1880062e 	bgeu	r3,r2,2374 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    235c:	e0fff917 	ldw	r3,-28(fp)
    2360:	e0bffa17 	ldw	r2,-24(fp)
    2364:	1885c83a 	sub	r2,r3,r2
    2368:	10bfffc4 	addi	r2,r2,-1
    236c:	e0bff815 	stw	r2,-32(fp)
    2370:	00000c06 	br	23a4 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
    2374:	e0bff917 	ldw	r2,-28(fp)
    2378:	1005003a 	cmpeq	r2,r2,zero
    237c:	1000051e 	bne	r2,zero,2394 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    2380:	00820004 	movi	r2,2048
    2384:	e0fffa17 	ldw	r3,-24(fp)
    2388:	10c5c83a 	sub	r2,r2,r3
    238c:	e0bff815 	stw	r2,-32(fp)
    2390:	00000406 	br	23a4 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    2394:	0081ffc4 	movi	r2,2047
    2398:	e0fffa17 	ldw	r3,-24(fp)
    239c:	10c5c83a 	sub	r2,r2,r3
    23a0:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    23a4:	e0bff817 	ldw	r2,-32(fp)
    23a8:	1005003a 	cmpeq	r2,r2,zero
    23ac:	10001f1e 	bne	r2,zero,242c <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
    23b0:	e0fffd17 	ldw	r3,-12(fp)
    23b4:	e0bff817 	ldw	r2,-32(fp)
    23b8:	1880022e 	bgeu	r3,r2,23c4 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
    23bc:	e0bffd17 	ldw	r2,-12(fp)
    23c0:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    23c4:	e0bffb17 	ldw	r2,-20(fp)
    23c8:	10c20e04 	addi	r3,r2,2104
    23cc:	e0bffa17 	ldw	r2,-24(fp)
    23d0:	1885883a 	add	r2,r3,r2
    23d4:	e0fffc17 	ldw	r3,-16(fp)
    23d8:	1009883a 	mov	r4,r2
    23dc:	180b883a 	mov	r5,r3
    23e0:	e1bff817 	ldw	r6,-32(fp)
    23e4:	0000f4c0 	call	f4c <memcpy>
      ptr   += n;
    23e8:	e0fff817 	ldw	r3,-32(fp)
    23ec:	e0bffc17 	ldw	r2,-16(fp)
    23f0:	10c5883a 	add	r2,r2,r3
    23f4:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
    23f8:	e0fffd17 	ldw	r3,-12(fp)
    23fc:	e0bff817 	ldw	r2,-32(fp)
    2400:	1885c83a 	sub	r2,r3,r2
    2404:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    2408:	e0fffa17 	ldw	r3,-24(fp)
    240c:	e0bff817 	ldw	r2,-32(fp)
    2410:	1885883a 	add	r2,r3,r2
    2414:	10c1ffcc 	andi	r3,r2,2047
    2418:	e0bffb17 	ldw	r2,-20(fp)
    241c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    2420:	e0bffd17 	ldw	r2,-12(fp)
    2424:	10800048 	cmpgei	r2,r2,1
    2428:	103fc31e 	bne	r2,zero,2338 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    242c:	0005303a 	rdctl	r2,status
    2430:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2434:	e0fff517 	ldw	r3,-44(fp)
    2438:	00bfff84 	movi	r2,-2
    243c:	1884703a 	and	r2,r3,r2
    2440:	1001703a 	wrctl	status,r2
  
  return context;
    2444:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    2448:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    244c:	e0bffb17 	ldw	r2,-20(fp)
    2450:	10800817 	ldw	r2,32(r2)
    2454:	10c00094 	ori	r3,r2,2
    2458:	e0bffb17 	ldw	r2,-20(fp)
    245c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    2460:	e0bffb17 	ldw	r2,-20(fp)
    2464:	10800017 	ldw	r2,0(r2)
    2468:	11000104 	addi	r4,r2,4
    246c:	e0bffb17 	ldw	r2,-20(fp)
    2470:	10800817 	ldw	r2,32(r2)
    2474:	1007883a 	mov	r3,r2
    2478:	2005883a 	mov	r2,r4
    247c:	10c00035 	stwio	r3,0(r2)
    2480:	e0bff717 	ldw	r2,-36(fp)
    2484:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2488:	e0bff417 	ldw	r2,-48(fp)
    248c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    2490:	e0bffd17 	ldw	r2,-12(fp)
    2494:	10800050 	cmplti	r2,r2,1
    2498:	1000111e 	bne	r2,zero,24e0 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
    249c:	e0bffe17 	ldw	r2,-8(fp)
    24a0:	1090000c 	andi	r2,r2,16384
    24a4:	1004c03a 	cmpne	r2,r2,zero
    24a8:	1000101e 	bne	r2,zero,24ec <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    24ac:	e0bffb17 	ldw	r2,-20(fp)
    24b0:	10c00d17 	ldw	r3,52(r2)
    24b4:	e0bff917 	ldw	r2,-28(fp)
    24b8:	1880051e 	bne	r3,r2,24d0 <altera_avalon_jtag_uart_write+0x1c8>
    24bc:	e0bffb17 	ldw	r2,-20(fp)
    24c0:	10c00917 	ldw	r3,36(r2)
    24c4:	e0bffb17 	ldw	r2,-20(fp)
    24c8:	10800117 	ldw	r2,4(r2)
    24cc:	18bff736 	bltu	r3,r2,24ac <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    24d0:	e0bffb17 	ldw	r2,-20(fp)
    24d4:	10c00d17 	ldw	r3,52(r2)
    24d8:	e0bff917 	ldw	r2,-28(fp)
    24dc:	18800326 	beq	r3,r2,24ec <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
    24e0:	e0bffd17 	ldw	r2,-12(fp)
    24e4:	10800048 	cmpgei	r2,r2,1
    24e8:	103fcd1e 	bne	r2,zero,2420 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    24ec:	e0fffc17 	ldw	r3,-16(fp)
    24f0:	e0bff617 	ldw	r2,-40(fp)
    24f4:	18800526 	beq	r3,r2,250c <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
    24f8:	e0fffc17 	ldw	r3,-16(fp)
    24fc:	e0bff617 	ldw	r2,-40(fp)
    2500:	1887c83a 	sub	r3,r3,r2
    2504:	e0ffff15 	stw	r3,-4(fp)
    2508:	00000906 	br	2530 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
    250c:	e0bffe17 	ldw	r2,-8(fp)
    2510:	1090000c 	andi	r2,r2,16384
    2514:	1005003a 	cmpeq	r2,r2,zero
    2518:	1000031e 	bne	r2,zero,2528 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
    251c:	00bffd44 	movi	r2,-11
    2520:	e0bfff15 	stw	r2,-4(fp)
    2524:	00000206 	br	2530 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    2528:	00bffec4 	movi	r2,-5
    252c:	e0bfff15 	stw	r2,-4(fp)
    2530:	e0bfff17 	ldw	r2,-4(fp)
}
    2534:	e037883a 	mov	sp,fp
    2538:	dfc00117 	ldw	ra,4(sp)
    253c:	df000017 	ldw	fp,0(sp)
    2540:	dec00204 	addi	sp,sp,8
    2544:	f800283a 	ret

00002548 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    2548:	defff904 	addi	sp,sp,-28
    254c:	dfc00615 	stw	ra,24(sp)
    2550:	df000515 	stw	fp,20(sp)
    2554:	df000504 	addi	fp,sp,20
    2558:	e13ffe15 	stw	r4,-8(fp)
    255c:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    2560:	e0bffe17 	ldw	r2,-8(fp)
    2564:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    2568:	e0bffe17 	ldw	r2,-8(fp)
    256c:	10800104 	addi	r2,r2,4
    2570:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2574:	0005303a 	rdctl	r2,status
    2578:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    257c:	e0fffc17 	ldw	r3,-16(fp)
    2580:	00bfff84 	movi	r2,-2
    2584:	1884703a 	and	r2,r3,r2
    2588:	1001703a 	wrctl	status,r2
  
  return context;
    258c:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    2590:	e0bffd15 	stw	r2,-12(fp)
  alt_tick ();
    2594:	00068740 	call	6874 <alt_tick>
    2598:	e0bffd17 	ldw	r2,-12(fp)
    259c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    25a0:	e0bffb17 	ldw	r2,-20(fp)
    25a4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    25a8:	e037883a 	mov	sp,fp
    25ac:	dfc00117 	ldw	ra,4(sp)
    25b0:	df000017 	ldw	fp,0(sp)
    25b4:	dec00204 	addi	sp,sp,8
    25b8:	f800283a 	ret

000025bc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    25bc:	defff904 	addi	sp,sp,-28
    25c0:	dfc00615 	stw	ra,24(sp)
    25c4:	df000515 	stw	fp,20(sp)
    25c8:	df000504 	addi	fp,sp,20
    25cc:	e13ffc15 	stw	r4,-16(fp)
    25d0:	e17ffd15 	stw	r5,-12(fp)
    25d4:	e1bffe15 	stw	r6,-8(fp)
    25d8:	e1ffff15 	stw	r7,-4(fp)
    25dc:	e0bfff17 	ldw	r2,-4(fp)
    25e0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    25e4:	00800074 	movhi	r2,1
    25e8:	10b63004 	addi	r2,r2,-10048
    25ec:	10800017 	ldw	r2,0(r2)
    25f0:	1004c03a 	cmpne	r2,r2,zero
    25f4:	1000041e 	bne	r2,zero,2608 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
    25f8:	00c00074 	movhi	r3,1
    25fc:	18f63004 	addi	r3,r3,-10048
    2600:	e0bffb17 	ldw	r2,-20(fp)
    2604:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    2608:	e0bffc17 	ldw	r2,-16(fp)
    260c:	10800104 	addi	r2,r2,4
    2610:	1007883a 	mov	r3,r2
    2614:	008001c4 	movi	r2,7
    2618:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    261c:	e13ffe17 	ldw	r4,-8(fp)
    2620:	e17ffc17 	ldw	r5,-16(fp)
    2624:	01800034 	movhi	r6,0
    2628:	31895204 	addi	r6,r6,9544
    262c:	00010840 	call	1084 <alt_irq_register>
#endif  
}
    2630:	e037883a 	mov	sp,fp
    2634:	dfc00117 	ldw	ra,4(sp)
    2638:	df000017 	ldw	fp,0(sp)
    263c:	dec00204 	addi	sp,sp,8
    2640:	f800283a 	ret

00002644 <alt_up_audio_open_dev>:
#include "altera_up_avalon_audio_regs.h"

///////////////////////////////////////////////////////////////////////////
// Direct functions
alt_up_audio_dev* alt_up_audio_open_dev(const char* name)
{
    2644:	defffc04 	addi	sp,sp,-16
    2648:	dfc00315 	stw	ra,12(sp)
    264c:	df000215 	stw	fp,8(sp)
    2650:	df000204 	addi	fp,sp,8
    2654:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_audio_dev *dev = (alt_up_audio_dev*)alt_find_dev(name, &alt_dev_list);
    2658:	e13fff17 	ldw	r4,-4(fp)
    265c:	01400074 	movhi	r5,1
    2660:	296e9c04 	addi	r5,r5,-17808
    2664:	00062b80 	call	62b8 <alt_find_dev>
    2668:	e0bffe15 	stw	r2,-8(fp)
  return dev;
    266c:	e0bffe17 	ldw	r2,-8(fp)
}
    2670:	e037883a 	mov	sp,fp
    2674:	dfc00117 	ldw	ra,4(sp)
    2678:	df000017 	ldw	fp,0(sp)
    267c:	dec00204 	addi	sp,sp,8
    2680:	f800283a 	ret

00002684 <alt_up_audio_enable_read_interrupt>:

void alt_up_audio_enable_read_interrupt(alt_up_audio_dev *audio)
{
    2684:	defffd04 	addi	sp,sp,-12
    2688:	df000215 	stw	fp,8(sp)
    268c:	df000204 	addi	fp,sp,8
    2690:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    2694:	e0bfff17 	ldw	r2,-4(fp)
    2698:	10800a17 	ldw	r2,40(r2)
    269c:	10800037 	ldwio	r2,0(r2)
    26a0:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_RE_MSK;
    26a4:	e0bffe17 	ldw	r2,-8(fp)
    26a8:	10800054 	ori	r2,r2,1
    26ac:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    26b0:	e0bfff17 	ldw	r2,-4(fp)
    26b4:	10800a17 	ldw	r2,40(r2)
    26b8:	e0fffe17 	ldw	r3,-8(fp)
    26bc:	10c00035 	stwio	r3,0(r2)
}
    26c0:	e037883a 	mov	sp,fp
    26c4:	df000017 	ldw	fp,0(sp)
    26c8:	dec00104 	addi	sp,sp,4
    26cc:	f800283a 	ret

000026d0 <alt_up_audio_disable_read_interrupt>:

void alt_up_audio_disable_read_interrupt(alt_up_audio_dev *audio)
{
    26d0:	defffd04 	addi	sp,sp,-12
    26d4:	df000215 	stw	fp,8(sp)
    26d8:	df000204 	addi	fp,sp,8
    26dc:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    26e0:	e0bfff17 	ldw	r2,-4(fp)
    26e4:	10800a17 	ldw	r2,40(r2)
    26e8:	10800037 	ldwio	r2,0(r2)
    26ec:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_RE_MSK;
    26f0:	e0fffe17 	ldw	r3,-8(fp)
    26f4:	00bfff84 	movi	r2,-2
    26f8:	1884703a 	and	r2,r3,r2
    26fc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    2700:	e0bfff17 	ldw	r2,-4(fp)
    2704:	10800a17 	ldw	r2,40(r2)
    2708:	e0fffe17 	ldw	r3,-8(fp)
    270c:	10c00035 	stwio	r3,0(r2)
}
    2710:	e037883a 	mov	sp,fp
    2714:	df000017 	ldw	fp,0(sp)
    2718:	dec00104 	addi	sp,sp,4
    271c:	f800283a 	ret

00002720 <alt_up_audio_enable_write_interrupt>:

void alt_up_audio_enable_write_interrupt(alt_up_audio_dev *audio)
{
    2720:	defffd04 	addi	sp,sp,-12
    2724:	df000215 	stw	fp,8(sp)
    2728:	df000204 	addi	fp,sp,8
    272c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    2730:	e0bfff17 	ldw	r2,-4(fp)
    2734:	10800a17 	ldw	r2,40(r2)
    2738:	10800037 	ldwio	r2,0(r2)
    273c:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_WE_MSK;
    2740:	e0bffe17 	ldw	r2,-8(fp)
    2744:	10800094 	ori	r2,r2,2
    2748:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    274c:	e0bfff17 	ldw	r2,-4(fp)
    2750:	10800a17 	ldw	r2,40(r2)
    2754:	e0fffe17 	ldw	r3,-8(fp)
    2758:	10c00035 	stwio	r3,0(r2)
}
    275c:	e037883a 	mov	sp,fp
    2760:	df000017 	ldw	fp,0(sp)
    2764:	dec00104 	addi	sp,sp,4
    2768:	f800283a 	ret

0000276c <alt_up_audio_disable_write_interrupt>:

void alt_up_audio_disable_write_interrupt(alt_up_audio_dev *audio)
{
    276c:	defffd04 	addi	sp,sp,-12
    2770:	df000215 	stw	fp,8(sp)
    2774:	df000204 	addi	fp,sp,8
    2778:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    277c:	e0bfff17 	ldw	r2,-4(fp)
    2780:	10800a17 	ldw	r2,40(r2)
    2784:	10800037 	ldwio	r2,0(r2)
    2788:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_WE_MSK;
    278c:	e0fffe17 	ldw	r3,-8(fp)
    2790:	00bfff44 	movi	r2,-3
    2794:	1884703a 	and	r2,r3,r2
    2798:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    279c:	e0bfff17 	ldw	r2,-4(fp)
    27a0:	10800a17 	ldw	r2,40(r2)
    27a4:	e0fffe17 	ldw	r3,-8(fp)
    27a8:	10c00035 	stwio	r3,0(r2)
}
    27ac:	e037883a 	mov	sp,fp
    27b0:	df000017 	ldw	fp,0(sp)
    27b4:	dec00104 	addi	sp,sp,4
    27b8:	f800283a 	ret

000027bc <alt_up_audio_read_interrupt_pending>:

int alt_up_audio_read_interrupt_pending(alt_up_audio_dev *audio)
{
    27bc:	defffd04 	addi	sp,sp,-12
    27c0:	df000215 	stw	fp,8(sp)
    27c4:	df000204 	addi	fp,sp,8
    27c8:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    27cc:	e0bfff17 	ldw	r2,-4(fp)
    27d0:	10800a17 	ldw	r2,40(r2)
    27d4:	10800037 	ldwio	r2,0(r2)
    27d8:	e0bffe15 	stw	r2,-8(fp)
	// return 1 if RI is set to 1
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_RI_MSK) ? 1 : 0 );
    27dc:	e0bffe17 	ldw	r2,-8(fp)
    27e0:	1080400c 	andi	r2,r2,256
    27e4:	1004c03a 	cmpne	r2,r2,zero
}
    27e8:	e037883a 	mov	sp,fp
    27ec:	df000017 	ldw	fp,0(sp)
    27f0:	dec00104 	addi	sp,sp,4
    27f4:	f800283a 	ret

000027f8 <alt_up_audio_write_interrupt_pending>:

int alt_up_audio_write_interrupt_pending(alt_up_audio_dev *audio)
{
    27f8:	defffd04 	addi	sp,sp,-12
    27fc:	df000215 	stw	fp,8(sp)
    2800:	df000204 	addi	fp,sp,8
    2804:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    2808:	e0bfff17 	ldw	r2,-4(fp)
    280c:	10800a17 	ldw	r2,40(r2)
    2810:	10800037 	ldwio	r2,0(r2)
    2814:	e0bffe15 	stw	r2,-8(fp)
	// return the WI value
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_WI_MSK) ? 1 : 0 );
    2818:	e0bffe17 	ldw	r2,-8(fp)
    281c:	1080800c 	andi	r2,r2,512
    2820:	1004c03a 	cmpne	r2,r2,zero
}
    2824:	e037883a 	mov	sp,fp
    2828:	df000017 	ldw	fp,0(sp)
    282c:	dec00104 	addi	sp,sp,4
    2830:	f800283a 	ret

00002834 <alt_up_audio_reset_audio_core>:

void alt_up_audio_reset_audio_core(alt_up_audio_dev *audio)
{
    2834:	defffd04 	addi	sp,sp,-12
    2838:	df000215 	stw	fp,8(sp)
    283c:	df000204 	addi	fp,sp,8
    2840:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    2844:	e0bfff17 	ldw	r2,-4(fp)
    2848:	10800a17 	ldw	r2,40(r2)
    284c:	10800037 	ldwio	r2,0(r2)
    2850:	e0bffe15 	stw	r2,-8(fp)
	// set CR and CW to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CR_MSK;
    2854:	e0bffe17 	ldw	r2,-8(fp)
    2858:	10800114 	ori	r2,r2,4
    285c:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CW_MSK;
    2860:	e0bffe17 	ldw	r2,-8(fp)
    2864:	10800214 	ori	r2,r2,8
    2868:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    286c:	e0bfff17 	ldw	r2,-4(fp)
    2870:	10800a17 	ldw	r2,40(r2)
    2874:	e0fffe17 	ldw	r3,-8(fp)
    2878:	10c00035 	stwio	r3,0(r2)
	// set CR and CW to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CR_MSK;
    287c:	e0fffe17 	ldw	r3,-8(fp)
    2880:	00bffec4 	movi	r2,-5
    2884:	1884703a 	and	r2,r3,r2
    2888:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CW_MSK;
    288c:	e0fffe17 	ldw	r3,-8(fp)
    2890:	00bffdc4 	movi	r2,-9
    2894:	1884703a 	and	r2,r3,r2
    2898:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    289c:	e0bfff17 	ldw	r2,-4(fp)
    28a0:	10800a17 	ldw	r2,40(r2)
    28a4:	e0fffe17 	ldw	r3,-8(fp)
    28a8:	10c00035 	stwio	r3,0(r2)
}
    28ac:	e037883a 	mov	sp,fp
    28b0:	df000017 	ldw	fp,0(sp)
    28b4:	dec00104 	addi	sp,sp,4
    28b8:	f800283a 	ret

000028bc <alt_up_audio_read_fifo_avail>:

/* Provides number of words of data available in the incoming FIFO: RALC or RARC */
unsigned int alt_up_audio_read_fifo_avail(alt_up_audio_dev *audio, int channel)
{
    28bc:	defffb04 	addi	sp,sp,-20
    28c0:	df000415 	stw	fp,16(sp)
    28c4:	df000404 	addi	fp,sp,16
    28c8:	e13ffd15 	stw	r4,-12(fp)
    28cc:	e17ffe15 	stw	r5,-8(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
    28d0:	e0bffd17 	ldw	r2,-12(fp)
    28d4:	10800a17 	ldw	r2,40(r2)
    28d8:	10800104 	addi	r2,r2,4
    28dc:	10800037 	ldwio	r2,0(r2)
    28e0:	e0bffc15 	stw	r2,-16(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
    28e4:	e0bffe17 	ldw	r2,-8(fp)
    28e8:	1004c03a 	cmpne	r2,r2,zero
    28ec:	1000051e 	bne	r2,zero,2904 <alt_up_audio_read_fifo_avail+0x48>
    28f0:	e0bffc17 	ldw	r2,-16(fp)
    28f4:	10bfc00c 	andi	r2,r2,65280
    28f8:	1004d23a 	srli	r2,r2,8
    28fc:	e0bfff15 	stw	r2,-4(fp)
    2900:	00000306 	br	2910 <alt_up_audio_read_fifo_avail+0x54>
    2904:	e0bffc17 	ldw	r2,-16(fp)
    2908:	10803fcc 	andi	r2,r2,255
    290c:	e0bfff15 	stw	r2,-4(fp)
    2910:	e0bfff17 	ldw	r2,-4(fp)
    2914:	e0bffc15 	stw	r2,-16(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
	return (fifospace);
    2918:	e0bffc17 	ldw	r2,-16(fp)
}
    291c:	e037883a 	mov	sp,fp
    2920:	df000017 	ldw	fp,0(sp)
    2924:	dec00104 	addi	sp,sp,4
    2928:	f800283a 	ret

0000292c <alt_up_audio_record_r>:
/* Checks if the read FIFO for the right channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
    292c:	defff904 	addi	sp,sp,-28
    2930:	dfc00615 	stw	ra,24(sp)
    2934:	df000515 	stw	fp,20(sp)
    2938:	df000504 	addi	fp,sp,20
    293c:	e13ffc15 	stw	r4,-16(fp)
    2940:	e17ffd15 	stw	r5,-12(fp)
    2944:	e1bffe15 	stw	r6,-8(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_RIGHT);
    2948:	e13ffc17 	ldw	r4,-16(fp)
    294c:	01400044 	movi	r5,1
    2950:	00028bc0 	call	28bc <alt_up_audio_read_fifo_avail>
    2954:	e0bffb15 	stw	r2,-20(fp)
	if (data_words <= BUF_THRESHOLD)
    2958:	e0bffb17 	ldw	r2,-20(fp)
    295c:	10801868 	cmpgeui	r2,r2,97
    2960:	1000021e 	bne	r2,zero,296c <alt_up_audio_record_r+0x40>
		return 0;
    2964:	e03fff15 	stw	zero,-4(fp)
    2968:	00000606 	br	2984 <alt_up_audio_record_r+0x58>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
    296c:	e13ffc17 	ldw	r4,-16(fp)
    2970:	e17ffd17 	ldw	r5,-12(fp)
    2974:	e1bffe17 	ldw	r6,-8(fp)
    2978:	01c00044 	movi	r7,1
    297c:	0002b600 	call	2b60 <alt_up_audio_read_fifo>
    2980:	e0bfff15 	stw	r2,-4(fp)
    2984:	e0bfff17 	ldw	r2,-4(fp)
}
    2988:	e037883a 	mov	sp,fp
    298c:	dfc00117 	ldw	ra,4(sp)
    2990:	df000017 	ldw	fp,0(sp)
    2994:	dec00204 	addi	sp,sp,8
    2998:	f800283a 	ret

0000299c <alt_up_audio_record_l>:
/* Checks if the read FIFO for the left channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
    299c:	defff904 	addi	sp,sp,-28
    29a0:	dfc00615 	stw	ra,24(sp)
    29a4:	df000515 	stw	fp,20(sp)
    29a8:	df000504 	addi	fp,sp,20
    29ac:	e13ffc15 	stw	r4,-16(fp)
    29b0:	e17ffd15 	stw	r5,-12(fp)
    29b4:	e1bffe15 	stw	r6,-8(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_LEFT);
    29b8:	e13ffc17 	ldw	r4,-16(fp)
    29bc:	000b883a 	mov	r5,zero
    29c0:	00028bc0 	call	28bc <alt_up_audio_read_fifo_avail>
    29c4:	e0bffb15 	stw	r2,-20(fp)
	if (data_words <= BUF_THRESHOLD)
    29c8:	e0bffb17 	ldw	r2,-20(fp)
    29cc:	10801868 	cmpgeui	r2,r2,97
    29d0:	1000021e 	bne	r2,zero,29dc <alt_up_audio_record_l+0x40>
		return 0;
    29d4:	e03fff15 	stw	zero,-4(fp)
    29d8:	00000606 	br	29f4 <alt_up_audio_record_l+0x58>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
    29dc:	e13ffc17 	ldw	r4,-16(fp)
    29e0:	e17ffd17 	ldw	r5,-12(fp)
    29e4:	e1bffe17 	ldw	r6,-8(fp)
    29e8:	000f883a 	mov	r7,zero
    29ec:	0002b600 	call	2b60 <alt_up_audio_read_fifo>
    29f0:	e0bfff15 	stw	r2,-4(fp)
    29f4:	e0bfff17 	ldw	r2,-4(fp)
}
    29f8:	e037883a 	mov	sp,fp
    29fc:	dfc00117 	ldw	ra,4(sp)
    2a00:	df000017 	ldw	fp,0(sp)
    2a04:	dec00204 	addi	sp,sp,8
    2a08:	f800283a 	ret

00002a0c <alt_up_audio_write_fifo_space>:

/* Provides the amount of empty space available in the outgoing FIFO: WSLC or WSRC */
unsigned int alt_up_audio_write_fifo_space(alt_up_audio_dev *audio, int channel)
{
    2a0c:	defffb04 	addi	sp,sp,-20
    2a10:	df000415 	stw	fp,16(sp)
    2a14:	df000404 	addi	fp,sp,16
    2a18:	e13ffd15 	stw	r4,-12(fp)
    2a1c:	e17ffe15 	stw	r5,-8(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
    2a20:	e0bffd17 	ldw	r2,-12(fp)
    2a24:	10800a17 	ldw	r2,40(r2)
    2a28:	10800104 	addi	r2,r2,4
    2a2c:	10800037 	ldwio	r2,0(r2)
    2a30:	e0bffc15 	stw	r2,-16(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
    2a34:	e0bffe17 	ldw	r2,-8(fp)
    2a38:	1004c03a 	cmpne	r2,r2,zero
    2a3c:	1000051e 	bne	r2,zero,2a54 <alt_up_audio_write_fifo_space+0x48>
    2a40:	e0bffc17 	ldw	r2,-16(fp)
    2a44:	10bfc02c 	andhi	r2,r2,65280
    2a48:	1004d63a 	srli	r2,r2,24
    2a4c:	e0bfff15 	stw	r2,-4(fp)
    2a50:	00000406 	br	2a64 <alt_up_audio_write_fifo_space+0x58>
    2a54:	e0bffc17 	ldw	r2,-16(fp)
    2a58:	10803fec 	andhi	r2,r2,255
    2a5c:	1004d43a 	srli	r2,r2,16
    2a60:	e0bfff15 	stw	r2,-4(fp)
    2a64:	e0bfff17 	ldw	r2,-4(fp)
    2a68:	e0bffc15 	stw	r2,-16(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
	return (fifospace);
    2a6c:	e0bffc17 	ldw	r2,-16(fp)
}
    2a70:	e037883a 	mov	sp,fp
    2a74:	df000017 	ldw	fp,0(sp)
    2a78:	dec00104 	addi	sp,sp,4
    2a7c:	f800283a 	ret

00002a80 <alt_up_audio_play_r>:
/* Checks if the write FIFO for the right channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
    2a80:	defff904 	addi	sp,sp,-28
    2a84:	dfc00615 	stw	ra,24(sp)
    2a88:	df000515 	stw	fp,20(sp)
    2a8c:	df000504 	addi	fp,sp,20
    2a90:	e13ffc15 	stw	r4,-16(fp)
    2a94:	e17ffd15 	stw	r5,-12(fp)
    2a98:	e1bffe15 	stw	r6,-8(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_RIGHT);
    2a9c:	e13ffc17 	ldw	r4,-16(fp)
    2aa0:	01400044 	movi	r5,1
    2aa4:	0002a0c0 	call	2a0c <alt_up_audio_write_fifo_space>
    2aa8:	e0bffb15 	stw	r2,-20(fp)
	if (space <= BUF_THRESHOLD)
    2aac:	e0bffb17 	ldw	r2,-20(fp)
    2ab0:	10801868 	cmpgeui	r2,r2,97
    2ab4:	1000021e 	bne	r2,zero,2ac0 <alt_up_audio_play_r+0x40>
		return 0;
    2ab8:	e03fff15 	stw	zero,-4(fp)
    2abc:	00000606 	br	2ad8 <alt_up_audio_play_r+0x58>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
    2ac0:	e13ffc17 	ldw	r4,-16(fp)
    2ac4:	e17ffd17 	ldw	r5,-12(fp)
    2ac8:	e1bffe17 	ldw	r6,-8(fp)
    2acc:	01c00044 	movi	r7,1
    2ad0:	0002c640 	call	2c64 <alt_up_audio_write_fifo>
    2ad4:	e0bfff15 	stw	r2,-4(fp)
    2ad8:	e0bfff17 	ldw	r2,-4(fp)
}
    2adc:	e037883a 	mov	sp,fp
    2ae0:	dfc00117 	ldw	ra,4(sp)
    2ae4:	df000017 	ldw	fp,0(sp)
    2ae8:	dec00204 	addi	sp,sp,8
    2aec:	f800283a 	ret

00002af0 <alt_up_audio_play_l>:
/* Checks if the write FIFO for the left channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
    2af0:	defff904 	addi	sp,sp,-28
    2af4:	dfc00615 	stw	ra,24(sp)
    2af8:	df000515 	stw	fp,20(sp)
    2afc:	df000504 	addi	fp,sp,20
    2b00:	e13ffc15 	stw	r4,-16(fp)
    2b04:	e17ffd15 	stw	r5,-12(fp)
    2b08:	e1bffe15 	stw	r6,-8(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_LEFT);
    2b0c:	e13ffc17 	ldw	r4,-16(fp)
    2b10:	000b883a 	mov	r5,zero
    2b14:	0002a0c0 	call	2a0c <alt_up_audio_write_fifo_space>
    2b18:	e0bffb15 	stw	r2,-20(fp)
	if (space <= BUF_THRESHOLD)
    2b1c:	e0bffb17 	ldw	r2,-20(fp)
    2b20:	10801868 	cmpgeui	r2,r2,97
    2b24:	1000021e 	bne	r2,zero,2b30 <alt_up_audio_play_l+0x40>
		return 0;
    2b28:	e03fff15 	stw	zero,-4(fp)
    2b2c:	00000606 	br	2b48 <alt_up_audio_play_l+0x58>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
    2b30:	e13ffc17 	ldw	r4,-16(fp)
    2b34:	e17ffd17 	ldw	r5,-12(fp)
    2b38:	e1bffe17 	ldw	r6,-8(fp)
    2b3c:	000f883a 	mov	r7,zero
    2b40:	0002c640 	call	2c64 <alt_up_audio_write_fifo>
    2b44:	e0bfff15 	stw	r2,-4(fp)
    2b48:	e0bfff17 	ldw	r2,-4(fp)
}
    2b4c:	e037883a 	mov	sp,fp
    2b50:	dfc00117 	ldw	ra,4(sp)
    2b54:	df000017 	ldw	fp,0(sp)
    2b58:	dec00204 	addi	sp,sp,8
    2b5c:	f800283a 	ret

00002b60 <alt_up_audio_read_fifo>:

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
    2b60:	defff604 	addi	sp,sp,-40
    2b64:	df000915 	stw	fp,36(sp)
    2b68:	df000904 	addi	fp,sp,36
    2b6c:	e13ff915 	stw	r4,-28(fp)
    2b70:	e17ffa15 	stw	r5,-24(fp)
    2b74:	e1bffb15 	stw	r6,-20(fp)
    2b78:	e1fffc15 	stw	r7,-16(fp)
	unsigned int fifospace;
	int count = 0;
    2b7c:	e03ff715 	stw	zero,-36(fp)
	while ( count < len ) 
    2b80:	00003006 	br	2c44 <alt_up_audio_read_fifo+0xe4>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
    2b84:	e0bff917 	ldw	r2,-28(fp)
    2b88:	10800a17 	ldw	r2,40(r2)
    2b8c:	10800104 	addi	r2,r2,4
    2b90:	10800037 	ldwio	r2,0(r2)
    2b94:	e0bff815 	stw	r2,-32(fp)
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
    2b98:	e0bffc17 	ldw	r2,-16(fp)
    2b9c:	1004c03a 	cmpne	r2,r2,zero
    2ba0:	1000051e 	bne	r2,zero,2bb8 <alt_up_audio_read_fifo+0x58>
    2ba4:	e0bff817 	ldw	r2,-32(fp)
    2ba8:	10bfc00c 	andi	r2,r2,65280
    2bac:	1004d23a 	srli	r2,r2,8
    2bb0:	e0bfff15 	stw	r2,-4(fp)
    2bb4:	00000306 	br	2bc4 <alt_up_audio_read_fifo+0x64>
    2bb8:	e0bff817 	ldw	r2,-32(fp)
    2bbc:	10803fcc 	andi	r2,r2,255
    2bc0:	e0bfff15 	stw	r2,-4(fp)
    2bc4:	e0bfff17 	ldw	r2,-4(fp)
    2bc8:	e0bff815 	stw	r2,-32(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
    2bcc:	e0bff817 	ldw	r2,-32(fp)
    2bd0:	1005003a 	cmpeq	r2,r2,zero
    2bd4:	10001e1e 	bne	r2,zero,2c50 <alt_up_audio_read_fifo+0xf0>
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
    2bd8:	e0bff717 	ldw	r2,-36(fp)
    2bdc:	1085883a 	add	r2,r2,r2
    2be0:	1085883a 	add	r2,r2,r2
    2be4:	1007883a 	mov	r3,r2
    2be8:	e0bffa17 	ldw	r2,-24(fp)
    2bec:	1887883a 	add	r3,r3,r2
    2bf0:	e0fffe15 	stw	r3,-8(fp)
    2bf4:	e0bffc17 	ldw	r2,-16(fp)
    2bf8:	1004c03a 	cmpne	r2,r2,zero
    2bfc:	1000061e 	bne	r2,zero,2c18 <alt_up_audio_read_fifo+0xb8>
    2c00:	e0bff917 	ldw	r2,-28(fp)
    2c04:	10800a17 	ldw	r2,40(r2)
    2c08:	10800204 	addi	r2,r2,8
    2c0c:	10800037 	ldwio	r2,0(r2)
    2c10:	e0bffd15 	stw	r2,-12(fp)
    2c14:	00000506 	br	2c2c <alt_up_audio_read_fifo+0xcc>
    2c18:	e0bff917 	ldw	r2,-28(fp)
    2c1c:	10800a17 	ldw	r2,40(r2)
    2c20:	10800304 	addi	r2,r2,12
    2c24:	10800037 	ldwio	r2,0(r2)
    2c28:	e0bffd15 	stw	r2,-12(fp)
    2c2c:	e0fffd17 	ldw	r3,-12(fp)
    2c30:	e0bffe17 	ldw	r2,-8(fp)
    2c34:	10c00015 	stw	r3,0(r2)
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
			count ++;
    2c38:	e0bff717 	ldw	r2,-36(fp)
    2c3c:	10800044 	addi	r2,r2,1
    2c40:	e0bff715 	stw	r2,-36(fp)

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
    2c44:	e0fff717 	ldw	r3,-36(fp)
    2c48:	e0bffb17 	ldw	r2,-20(fp)
    2c4c:	18bfcd16 	blt	r3,r2,2b84 <alt_up_audio_read_fifo+0x24>
		{
			// no more data to read
			break;
		}
	}
	return count;
    2c50:	e0bff717 	ldw	r2,-36(fp)
}
    2c54:	e037883a 	mov	sp,fp
    2c58:	df000017 	ldw	fp,0(sp)
    2c5c:	dec00104 	addi	sp,sp,4
    2c60:	f800283a 	ret

00002c64 <alt_up_audio_write_fifo>:

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
    2c64:	defff804 	addi	sp,sp,-32
    2c68:	df000715 	stw	fp,28(sp)
    2c6c:	df000704 	addi	fp,sp,28
    2c70:	e13ffb15 	stw	r4,-20(fp)
    2c74:	e17ffc15 	stw	r5,-16(fp)
    2c78:	e1bffd15 	stw	r6,-12(fp)
    2c7c:	e1fffe15 	stw	r7,-8(fp)
	unsigned int fifospace;
	int count = 0;
    2c80:	e03ff915 	stw	zero,-28(fp)
	while ( count < len ) 
    2c84:	00003a06 	br	2d70 <alt_up_audio_write_fifo+0x10c>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
    2c88:	e0bffb17 	ldw	r2,-20(fp)
    2c8c:	10800a17 	ldw	r2,40(r2)
    2c90:	10800104 	addi	r2,r2,4
    2c94:	10800037 	ldwio	r2,0(r2)
    2c98:	e0bffa15 	stw	r2,-24(fp)
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
    2c9c:	e0bffe17 	ldw	r2,-8(fp)
    2ca0:	1004c03a 	cmpne	r2,r2,zero
    2ca4:	1000051e 	bne	r2,zero,2cbc <alt_up_audio_write_fifo+0x58>
    2ca8:	e0bffa17 	ldw	r2,-24(fp)
    2cac:	10bfc02c 	andhi	r2,r2,65280
    2cb0:	1004d63a 	srli	r2,r2,24
    2cb4:	e0bfff15 	stw	r2,-4(fp)
    2cb8:	00000406 	br	2ccc <alt_up_audio_write_fifo+0x68>
    2cbc:	e0bffa17 	ldw	r2,-24(fp)
    2cc0:	10803fec 	andhi	r2,r2,255
    2cc4:	1004d43a 	srli	r2,r2,16
    2cc8:	e0bfff15 	stw	r2,-4(fp)
    2ccc:	e0bfff17 	ldw	r2,-4(fp)
    2cd0:	e0bffa15 	stw	r2,-24(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
		if (fifospace > 0) 
    2cd4:	e0bffa17 	ldw	r2,-24(fp)
    2cd8:	1005003a 	cmpeq	r2,r2,zero
    2cdc:	1000271e 	bne	r2,zero,2d7c <alt_up_audio_write_fifo+0x118>
		{
			if (channel == ALT_UP_AUDIO_LEFT) 
    2ce0:	e0bffe17 	ldw	r2,-8(fp)
    2ce4:	1004c03a 	cmpne	r2,r2,zero
    2ce8:	1000111e 	bne	r2,zero,2d30 <alt_up_audio_write_fifo+0xcc>
				IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, buf[count++]);
    2cec:	e0bffb17 	ldw	r2,-20(fp)
    2cf0:	10800a17 	ldw	r2,40(r2)
    2cf4:	11000204 	addi	r4,r2,8
    2cf8:	e0bff917 	ldw	r2,-28(fp)
    2cfc:	1085883a 	add	r2,r2,r2
    2d00:	1085883a 	add	r2,r2,r2
    2d04:	1007883a 	mov	r3,r2
    2d08:	e0bffc17 	ldw	r2,-16(fp)
    2d0c:	1885883a 	add	r2,r3,r2
    2d10:	10800017 	ldw	r2,0(r2)
    2d14:	1007883a 	mov	r3,r2
    2d18:	e0bff917 	ldw	r2,-28(fp)
    2d1c:	10800044 	addi	r2,r2,1
    2d20:	e0bff915 	stw	r2,-28(fp)
    2d24:	2005883a 	mov	r2,r4
    2d28:	10c00035 	stwio	r3,0(r2)
    2d2c:	00001006 	br	2d70 <alt_up_audio_write_fifo+0x10c>
			else
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
    2d30:	e0bffb17 	ldw	r2,-20(fp)
    2d34:	10800a17 	ldw	r2,40(r2)
    2d38:	11000304 	addi	r4,r2,12
    2d3c:	e0bff917 	ldw	r2,-28(fp)
    2d40:	1085883a 	add	r2,r2,r2
    2d44:	1085883a 	add	r2,r2,r2
    2d48:	1007883a 	mov	r3,r2
    2d4c:	e0bffc17 	ldw	r2,-16(fp)
    2d50:	1885883a 	add	r2,r3,r2
    2d54:	10800017 	ldw	r2,0(r2)
    2d58:	1007883a 	mov	r3,r2
    2d5c:	e0bff917 	ldw	r2,-28(fp)
    2d60:	10800044 	addi	r2,r2,1
    2d64:	e0bff915 	stw	r2,-28(fp)
    2d68:	2005883a 	mov	r2,r4
    2d6c:	10c00035 	stwio	r3,0(r2)

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
    2d70:	e0fff917 	ldw	r3,-28(fp)
    2d74:	e0bffd17 	ldw	r2,-12(fp)
    2d78:	18bfc316 	blt	r3,r2,2c88 <alt_up_audio_write_fifo+0x24>
		{
			// no more space to write
			break;
		}
	}
	return count;
    2d7c:	e0bff917 	ldw	r2,-28(fp)
}
    2d80:	e037883a 	mov	sp,fp
    2d84:	df000017 	ldw	fp,0(sp)
    2d88:	dec00104 	addi	sp,sp,4
    2d8c:	f800283a 	ret

00002d90 <alt_up_audio_read_fifo_head>:

unsigned int alt_up_audio_read_fifo_head(alt_up_audio_dev *audio, int channel)
{
    2d90:	defffc04 	addi	sp,sp,-16
    2d94:	df000315 	stw	fp,12(sp)
    2d98:	df000304 	addi	fp,sp,12
    2d9c:	e13ffd15 	stw	r4,-12(fp)
    2da0:	e17ffe15 	stw	r5,-8(fp)
	return ( (channel == ALT_UP_AUDIO_LEFT) ?  IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
    2da4:	e0bffe17 	ldw	r2,-8(fp)
    2da8:	1004c03a 	cmpne	r2,r2,zero
    2dac:	1000061e 	bne	r2,zero,2dc8 <alt_up_audio_read_fifo_head+0x38>
    2db0:	e0bffd17 	ldw	r2,-12(fp)
    2db4:	10800a17 	ldw	r2,40(r2)
    2db8:	10800204 	addi	r2,r2,8
    2dbc:	10800037 	ldwio	r2,0(r2)
    2dc0:	e0bfff15 	stw	r2,-4(fp)
    2dc4:	00000506 	br	2ddc <alt_up_audio_read_fifo_head+0x4c>
    2dc8:	e0bffd17 	ldw	r2,-12(fp)
    2dcc:	10800a17 	ldw	r2,40(r2)
    2dd0:	10800304 	addi	r2,r2,12
    2dd4:	10800037 	ldwio	r2,0(r2)
    2dd8:	e0bfff15 	stw	r2,-4(fp)
    2ddc:	e0bfff17 	ldw	r2,-4(fp)
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base) );
}
    2de0:	e037883a 	mov	sp,fp
    2de4:	df000017 	ldw	fp,0(sp)
    2de8:	dec00104 	addi	sp,sp,4
    2dec:	f800283a 	ret

00002df0 <alt_up_audio_write_fifo_head>:

void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
    2df0:	defffc04 	addi	sp,sp,-16
    2df4:	df000315 	stw	fp,12(sp)
    2df8:	df000304 	addi	fp,sp,12
    2dfc:	e13ffd15 	stw	r4,-12(fp)
    2e00:	e17ffe15 	stw	r5,-8(fp)
    2e04:	e1bfff15 	stw	r6,-4(fp)
	if (channel == ALT_UP_AUDIO_LEFT) 
    2e08:	e0bfff17 	ldw	r2,-4(fp)
    2e0c:	1004c03a 	cmpne	r2,r2,zero
    2e10:	1000061e 	bne	r2,zero,2e2c <alt_up_audio_write_fifo_head+0x3c>
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
    2e14:	e0bffd17 	ldw	r2,-12(fp)
    2e18:	10800a17 	ldw	r2,40(r2)
    2e1c:	10800204 	addi	r2,r2,8
    2e20:	e0fffe17 	ldw	r3,-8(fp)
    2e24:	10c00035 	stwio	r3,0(r2)
    2e28:	00000506 	br	2e40 <alt_up_audio_write_fifo_head+0x50>
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
    2e2c:	e0bffd17 	ldw	r2,-12(fp)
    2e30:	10800a17 	ldw	r2,40(r2)
    2e34:	10800304 	addi	r2,r2,12
    2e38:	e0fffe17 	ldw	r3,-8(fp)
    2e3c:	10c00035 	stwio	r3,0(r2)
}
    2e40:	e037883a 	mov	sp,fp
    2e44:	df000017 	ldw	fp,0(sp)
    2e48:	dec00104 	addi	sp,sp,4
    2e4c:	f800283a 	ret

00002e50 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
    2e50:	defffc04 	addi	sp,sp,-16
    2e54:	df000315 	stw	fp,12(sp)
    2e58:	df000304 	addi	fp,sp,12
    2e5c:	e13ffe15 	stw	r4,-8(fp)
    2e60:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
    2e64:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
    2e68:	e0bfff17 	ldw	r2,-4(fp)
    2e6c:	1004c03a 	cmpne	r2,r2,zero
    2e70:	1000061e 	bne	r2,zero,2e8c <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
    2e74:	e0bffe17 	ldw	r2,-8(fp)
    2e78:	1007883a 	mov	r3,r2
    2e7c:	e0bffd03 	ldbu	r2,-12(fp)
    2e80:	10c4b03a 	or	r2,r2,r3
    2e84:	e0bffd05 	stb	r2,-12(fp)
    2e88:	00000806 	br	2eac <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
    2e8c:	e0bffe17 	ldw	r2,-8(fp)
    2e90:	1007883a 	mov	r3,r2
    2e94:	e0bffd03 	ldbu	r2,-12(fp)
    2e98:	10c4b03a 	or	r2,r2,r3
    2e9c:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
    2ea0:	e0bffd03 	ldbu	r2,-12(fp)
    2ea4:	10801014 	ori	r2,r2,64
    2ea8:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
    2eac:	e0fffd03 	ldbu	r3,-12(fp)
    2eb0:	00bfe004 	movi	r2,-128
    2eb4:	1884b03a 	or	r2,r3,r2
    2eb8:	10803fcc 	andi	r2,r2,255
}
    2ebc:	e037883a 	mov	sp,fp
    2ec0:	df000017 	ldw	fp,0(sp)
    2ec4:	dec00104 	addi	sp,sp,4
    2ec8:	f800283a 	ret

00002ecc <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
    2ecc:	defffd04 	addi	sp,sp,-12
    2ed0:	df000215 	stw	fp,8(sp)
    2ed4:	df000204 	addi	fp,sp,8
    2ed8:	e13ffe15 	stw	r4,-8(fp)
    2edc:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
    2ee0:	e0bffe17 	ldw	r2,-8(fp)
    2ee4:	10800a17 	ldw	r2,40(r2)
    2ee8:	e0ffff03 	ldbu	r3,-4(fp)
    2eec:	10c00025 	stbio	r3,0(r2)
}
    2ef0:	e037883a 	mov	sp,fp
    2ef4:	df000017 	ldw	fp,0(sp)
    2ef8:	dec00104 	addi	sp,sp,4
    2efc:	f800283a 	ret

00002f00 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
    2f00:	defffe04 	addi	sp,sp,-8
    2f04:	df000115 	stw	fp,4(sp)
    2f08:	df000104 	addi	fp,sp,4
    2f0c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
    2f10:	e0bfff17 	ldw	r2,-4(fp)
    2f14:	10800a17 	ldw	r2,40(r2)
    2f18:	1007883a 	mov	r3,r2
    2f1c:	00800044 	movi	r2,1
    2f20:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
    2f24:	e037883a 	mov	sp,fp
    2f28:	df000017 	ldw	fp,0(sp)
    2f2c:	dec00104 	addi	sp,sp,4
    2f30:	f800283a 	ret

00002f34 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
    2f34:	defffc04 	addi	sp,sp,-16
    2f38:	dfc00315 	stw	ra,12(sp)
    2f3c:	df000215 	stw	fp,8(sp)
    2f40:	df000204 	addi	fp,sp,8
    2f44:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
    2f48:	e13fff17 	ldw	r4,-4(fp)
    2f4c:	01400074 	movhi	r5,1
    2f50:	296e9c04 	addi	r5,r5,-17808
    2f54:	00062b80 	call	62b8 <alt_find_dev>
    2f58:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    2f5c:	e0bffe17 	ldw	r2,-8(fp)
}
    2f60:	e037883a 	mov	sp,fp
    2f64:	dfc00117 	ldw	ra,4(sp)
    2f68:	df000017 	ldw	fp,0(sp)
    2f6c:	dec00204 	addi	sp,sp,8
    2f70:	f800283a 	ret

00002f74 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
    2f74:	defffb04 	addi	sp,sp,-20
    2f78:	df000415 	stw	fp,16(sp)
    2f7c:	df000404 	addi	fp,sp,16
    2f80:	e13ffd15 	stw	r4,-12(fp)
    2f84:	e17ffe15 	stw	r5,-8(fp)
    2f88:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
    2f8c:	e03ffc15 	stw	zero,-16(fp)
    2f90:	00000f06 	br	2fd0 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
    2f94:	e0bffd17 	ldw	r2,-12(fp)
    2f98:	10800a17 	ldw	r2,40(r2)
    2f9c:	11000044 	addi	r4,r2,1
    2fa0:	e0fffc17 	ldw	r3,-16(fp)
    2fa4:	e0bffe17 	ldw	r2,-8(fp)
    2fa8:	1885883a 	add	r2,r3,r2
    2fac:	10800003 	ldbu	r2,0(r2)
    2fb0:	10c03fcc 	andi	r3,r2,255
    2fb4:	18c0201c 	xori	r3,r3,128
    2fb8:	18ffe004 	addi	r3,r3,-128
    2fbc:	2005883a 	mov	r2,r4
    2fc0:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
    2fc4:	e0bffc17 	ldw	r2,-16(fp)
    2fc8:	10800044 	addi	r2,r2,1
    2fcc:	e0bffc15 	stw	r2,-16(fp)
    2fd0:	e0fffc17 	ldw	r3,-16(fp)
    2fd4:	e0bfff17 	ldw	r2,-4(fp)
    2fd8:	18bfee36 	bltu	r3,r2,2f94 <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
    2fdc:	e037883a 	mov	sp,fp
    2fe0:	df000017 	ldw	fp,0(sp)
    2fe4:	dec00104 	addi	sp,sp,4
    2fe8:	f800283a 	ret

00002fec <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
    2fec:	defffd04 	addi	sp,sp,-12
    2ff0:	df000215 	stw	fp,8(sp)
    2ff4:	df000204 	addi	fp,sp,8
    2ff8:	e13ffe15 	stw	r4,-8(fp)
    2ffc:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
    3000:	00000d06 	br	3038 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
    3004:	e0bffe17 	ldw	r2,-8(fp)
    3008:	10800a17 	ldw	r2,40(r2)
    300c:	11000044 	addi	r4,r2,1
    3010:	e0bfff17 	ldw	r2,-4(fp)
    3014:	10800003 	ldbu	r2,0(r2)
    3018:	10c03fcc 	andi	r3,r2,255
    301c:	18c0201c 	xori	r3,r3,128
    3020:	18ffe004 	addi	r3,r3,-128
    3024:	2005883a 	mov	r2,r4
    3028:	10c00025 	stbio	r3,0(r2)
		++ptr;
    302c:	e0bfff17 	ldw	r2,-4(fp)
    3030:	10800044 	addi	r2,r2,1
    3034:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
    3038:	e0bfff17 	ldw	r2,-4(fp)
    303c:	10800003 	ldbu	r2,0(r2)
    3040:	10803fcc 	andi	r2,r2,255
    3044:	1080201c 	xori	r2,r2,128
    3048:	10bfe004 	addi	r2,r2,-128
    304c:	1004c03a 	cmpne	r2,r2,zero
    3050:	103fec1e 	bne	r2,zero,3004 <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
    3054:	e037883a 	mov	sp,fp
    3058:	df000017 	ldw	fp,0(sp)
    305c:	dec00104 	addi	sp,sp,4
    3060:	f800283a 	ret

00003064 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
    3064:	defffb04 	addi	sp,sp,-20
    3068:	dfc00415 	stw	ra,16(sp)
    306c:	df000315 	stw	fp,12(sp)
    3070:	df000304 	addi	fp,sp,12
    3074:	e13ffd15 	stw	r4,-12(fp)
    3078:	e17ffe15 	stw	r5,-8(fp)
    307c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
    3080:	e0bffd17 	ldw	r2,-12(fp)
    3084:	10800017 	ldw	r2,0(r2)
    3088:	1009883a 	mov	r4,r2
    308c:	e1bfff17 	ldw	r6,-4(fp)
    3090:	e17ffe17 	ldw	r5,-8(fp)
    3094:	0002f740 	call	2f74 <alt_up_character_lcd_write>
	return 0;
    3098:	0005883a 	mov	r2,zero
}
    309c:	e037883a 	mov	sp,fp
    30a0:	dfc00117 	ldw	ra,4(sp)
    30a4:	df000017 	ldw	fp,0(sp)
    30a8:	dec00204 	addi	sp,sp,8
    30ac:	f800283a 	ret

000030b0 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
    30b0:	defff904 	addi	sp,sp,-28
    30b4:	dfc00615 	stw	ra,24(sp)
    30b8:	df000515 	stw	fp,20(sp)
    30bc:	df000504 	addi	fp,sp,20
    30c0:	e13ffc15 	stw	r4,-16(fp)
    30c4:	e17ffd15 	stw	r5,-12(fp)
    30c8:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
    30cc:	e0bffd17 	ldw	r2,-12(fp)
    30d0:	10800a28 	cmpgeui	r2,r2,40
    30d4:	1000031e 	bne	r2,zero,30e4 <alt_up_character_lcd_set_cursor_pos+0x34>
    30d8:	e0bffe17 	ldw	r2,-8(fp)
    30dc:	108000b0 	cmpltui	r2,r2,2
    30e0:	1000031e 	bne	r2,zero,30f0 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
    30e4:	00bfffc4 	movi	r2,-1
    30e8:	e0bfff15 	stw	r2,-4(fp)
    30ec:	00000806 	br	3110 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    30f0:	e13ffd17 	ldw	r4,-12(fp)
    30f4:	e17ffe17 	ldw	r5,-8(fp)
    30f8:	0002e500 	call	2e50 <get_DDRAM_addr>
    30fc:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
    3100:	e17ffb03 	ldbu	r5,-20(fp)
    3104:	e13ffc17 	ldw	r4,-16(fp)
    3108:	0002ecc0 	call	2ecc <alt_up_character_lcd_send_cmd>
	return 0;
    310c:	e03fff15 	stw	zero,-4(fp)
    3110:	e0bfff17 	ldw	r2,-4(fp)
}
    3114:	e037883a 	mov	sp,fp
    3118:	dfc00117 	ldw	ra,4(sp)
    311c:	df000017 	ldw	fp,0(sp)
    3120:	dec00204 	addi	sp,sp,8
    3124:	f800283a 	ret

00003128 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    3128:	defff904 	addi	sp,sp,-28
    312c:	dfc00615 	stw	ra,24(sp)
    3130:	df000515 	stw	fp,20(sp)
    3134:	df000504 	addi	fp,sp,20
    3138:	e13ffc15 	stw	r4,-16(fp)
    313c:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
    3140:	e0bffd17 	ldw	r2,-12(fp)
    3144:	1005003a 	cmpeq	r2,r2,zero
    3148:	10001e1e 	bne	r2,zero,31c4 <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
    314c:	e0bffd17 	ldw	r2,-12(fp)
    3150:	10800050 	cmplti	r2,r2,1
    3154:	1000031e 	bne	r2,zero,3164 <alt_up_character_lcd_shift_cursor+0x3c>
    3158:	00800504 	movi	r2,20
    315c:	e0bfff05 	stb	r2,-4(fp)
    3160:	00000206 	br	316c <alt_up_character_lcd_shift_cursor+0x44>
    3164:	00c00404 	movi	r3,16
    3168:	e0ffff05 	stb	r3,-4(fp)
    316c:	e0bfff03 	ldbu	r2,-4(fp)
    3170:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
    3174:	e0fffd17 	ldw	r3,-12(fp)
    3178:	e0fffe15 	stw	r3,-8(fp)
    317c:	e0fffe17 	ldw	r3,-8(fp)
    3180:	1804403a 	cmpge	r2,r3,zero
    3184:	1000031e 	bne	r2,zero,3194 <alt_up_character_lcd_shift_cursor+0x6c>
    3188:	e0bffe17 	ldw	r2,-8(fp)
    318c:	0085c83a 	sub	r2,zero,r2
    3190:	e0bffe15 	stw	r2,-8(fp)
    3194:	e0fffe17 	ldw	r3,-8(fp)
    3198:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
    319c:	00000306 	br	31ac <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    31a0:	e17ffb43 	ldbu	r5,-19(fp)
    31a4:	e13ffc17 	ldw	r4,-16(fp)
    31a8:	0002ecc0 	call	2ecc <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    31ac:	e0bffb03 	ldbu	r2,-20(fp)
    31b0:	10bfffc4 	addi	r2,r2,-1
    31b4:	e0bffb05 	stb	r2,-20(fp)
    31b8:	e0bffb03 	ldbu	r2,-20(fp)
    31bc:	10803fd8 	cmpnei	r2,r2,255
    31c0:	103ff71e 	bne	r2,zero,31a0 <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    31c4:	e037883a 	mov	sp,fp
    31c8:	dfc00117 	ldw	ra,4(sp)
    31cc:	df000017 	ldw	fp,0(sp)
    31d0:	dec00204 	addi	sp,sp,8
    31d4:	f800283a 	ret

000031d8 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    31d8:	defff904 	addi	sp,sp,-28
    31dc:	dfc00615 	stw	ra,24(sp)
    31e0:	df000515 	stw	fp,20(sp)
    31e4:	df000504 	addi	fp,sp,20
    31e8:	e13ffc15 	stw	r4,-16(fp)
    31ec:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
    31f0:	e0bffd17 	ldw	r2,-12(fp)
    31f4:	1005003a 	cmpeq	r2,r2,zero
    31f8:	10001e1e 	bne	r2,zero,3274 <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
    31fc:	e0bffd17 	ldw	r2,-12(fp)
    3200:	10800050 	cmplti	r2,r2,1
    3204:	1000031e 	bne	r2,zero,3214 <alt_up_character_lcd_shift_display+0x3c>
    3208:	00800704 	movi	r2,28
    320c:	e0bfff05 	stb	r2,-4(fp)
    3210:	00000206 	br	321c <alt_up_character_lcd_shift_display+0x44>
    3214:	00c00604 	movi	r3,24
    3218:	e0ffff05 	stb	r3,-4(fp)
    321c:	e0bfff03 	ldbu	r2,-4(fp)
    3220:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
    3224:	e0fffd17 	ldw	r3,-12(fp)
    3228:	e0fffe15 	stw	r3,-8(fp)
    322c:	e0fffe17 	ldw	r3,-8(fp)
    3230:	1804403a 	cmpge	r2,r3,zero
    3234:	1000031e 	bne	r2,zero,3244 <alt_up_character_lcd_shift_display+0x6c>
    3238:	e0bffe17 	ldw	r2,-8(fp)
    323c:	0085c83a 	sub	r2,zero,r2
    3240:	e0bffe15 	stw	r2,-8(fp)
    3244:	e0fffe17 	ldw	r3,-8(fp)
    3248:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
    324c:	00000306 	br	325c <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    3250:	e17ffb43 	ldbu	r5,-19(fp)
    3254:	e13ffc17 	ldw	r4,-16(fp)
    3258:	0002ecc0 	call	2ecc <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    325c:	e0bffb03 	ldbu	r2,-20(fp)
    3260:	10bfffc4 	addi	r2,r2,-1
    3264:	e0bffb05 	stb	r2,-20(fp)
    3268:	e0bffb03 	ldbu	r2,-20(fp)
    326c:	10803fd8 	cmpnei	r2,r2,255
    3270:	103ff71e 	bne	r2,zero,3250 <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    3274:	e037883a 	mov	sp,fp
    3278:	dfc00117 	ldw	ra,4(sp)
    327c:	df000017 	ldw	fp,0(sp)
    3280:	dec00204 	addi	sp,sp,8
    3284:	f800283a 	ret

00003288 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
    3288:	defff904 	addi	sp,sp,-28
    328c:	dfc00615 	stw	ra,24(sp)
    3290:	df000515 	stw	fp,20(sp)
    3294:	df000504 	addi	fp,sp,20
    3298:	e13ffc15 	stw	r4,-16(fp)
    329c:	e17ffd15 	stw	r5,-12(fp)
    32a0:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
    32a4:	e0bffd17 	ldw	r2,-12(fp)
    32a8:	10800a28 	cmpgeui	r2,r2,40
    32ac:	1000031e 	bne	r2,zero,32bc <alt_up_character_lcd_erase_pos+0x34>
    32b0:	e0bffe17 	ldw	r2,-8(fp)
    32b4:	108000b0 	cmpltui	r2,r2,2
    32b8:	1000031e 	bne	r2,zero,32c8 <alt_up_character_lcd_erase_pos+0x40>
		return -1;
    32bc:	00bfffc4 	movi	r2,-1
    32c0:	e0bfff15 	stw	r2,-4(fp)
    32c4:	00000e06 	br	3300 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    32c8:	e13ffd17 	ldw	r4,-12(fp)
    32cc:	e17ffe17 	ldw	r5,-8(fp)
    32d0:	0002e500 	call	2e50 <get_DDRAM_addr>
    32d4:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
    32d8:	e17ffb03 	ldbu	r5,-20(fp)
    32dc:	e13ffc17 	ldw	r4,-16(fp)
    32e0:	0002ecc0 	call	2ecc <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
    32e4:	e0bffc17 	ldw	r2,-16(fp)
    32e8:	10800a17 	ldw	r2,40(r2)
    32ec:	10800044 	addi	r2,r2,1
    32f0:	1007883a 	mov	r3,r2
    32f4:	00800084 	movi	r2,2
    32f8:	18800025 	stbio	r2,0(r3)
	return 0;
    32fc:	e03fff15 	stw	zero,-4(fp)
    3300:	e0bfff17 	ldw	r2,-4(fp)
}
    3304:	e037883a 	mov	sp,fp
    3308:	dfc00117 	ldw	ra,4(sp)
    330c:	df000017 	ldw	fp,0(sp)
    3310:	dec00204 	addi	sp,sp,8
    3314:	f800283a 	ret

00003318 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
    3318:	defffd04 	addi	sp,sp,-12
    331c:	dfc00215 	stw	ra,8(sp)
    3320:	df000115 	stw	fp,4(sp)
    3324:	df000104 	addi	fp,sp,4
    3328:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
    332c:	e13fff17 	ldw	r4,-4(fp)
    3330:	01400304 	movi	r5,12
    3334:	0002ecc0 	call	2ecc <alt_up_character_lcd_send_cmd>
}
    3338:	e037883a 	mov	sp,fp
    333c:	dfc00117 	ldw	ra,4(sp)
    3340:	df000017 	ldw	fp,0(sp)
    3344:	dec00204 	addi	sp,sp,8
    3348:	f800283a 	ret

0000334c <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
    334c:	defffd04 	addi	sp,sp,-12
    3350:	dfc00215 	stw	ra,8(sp)
    3354:	df000115 	stw	fp,4(sp)
    3358:	df000104 	addi	fp,sp,4
    335c:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
    3360:	e13fff17 	ldw	r4,-4(fp)
    3364:	014003c4 	movi	r5,15
    3368:	0002ecc0 	call	2ecc <alt_up_character_lcd_send_cmd>
}
    336c:	e037883a 	mov	sp,fp
    3370:	dfc00117 	ldw	ra,4(sp)
    3374:	df000017 	ldw	fp,0(sp)
    3378:	dec00204 	addi	sp,sp,8
    337c:	f800283a 	ret

00003380 <alt_up_ethernet_init>:
#include "altera_up_avalon_ethernet.h"
#include "altera_up_avalon_ethernet_regs.h"
#include "altera_up_avalon_ethernet_low_level_driver.h"

void alt_up_ethernet_init(alt_up_ethernet_dev *ethernet)
{
    3380:	defffb04 	addi	sp,sp,-20
    3384:	dfc00415 	stw	ra,16(sp)
    3388:	df000315 	stw	fp,12(sp)
    338c:	df000304 	addi	fp,sp,12
    3390:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned int base = ethernet->base;
    3394:	e0bfff17 	ldw	r2,-4(fp)
    3398:	10800a17 	ldw	r2,40(r2)
    339c:	e0bffe15 	stw	r2,-8(fp)
	int i;

	// Power on the internal PHY
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_GPR, 0x00 );
    33a0:	e13ffe17 	ldw	r4,-8(fp)
    33a4:	014007c4 	movi	r5,31
    33a8:	000d883a 	mov	r6,zero
    33ac:	000350c0 	call	350c <alt_up_ethernet_reg_write>

	// Software Reset of the Ethernet chip
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_NCR, 0x01 );
    33b0:	e13ffe17 	ldw	r4,-8(fp)
    33b4:	000b883a 	mov	r5,zero
    33b8:	01800044 	movi	r6,1
    33bc:	000350c0 	call	350c <alt_up_ethernet_reg_write>
	usleep(10);
    33c0:	01000284 	movi	r4,10
    33c4:	00069800 	call	6980 <usleep>
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_NCR, 0x00 );
    33c8:	e13ffe17 	ldw	r4,-8(fp)
    33cc:	000b883a 	mov	r5,zero
    33d0:	000d883a 	mov	r6,zero
    33d4:	000350c0 	call	350c <alt_up_ethernet_reg_write>
	usleep(1);
    33d8:	01000044 	movi	r4,1
    33dc:	00069800 	call	6980 <usleep>

	// Initialize the MAC Address
	for (i = 0; i < 6; i++) 
    33e0:	e03ffd15 	stw	zero,-12(fp)
    33e4:	00000e06 	br	3420 <alt_up_ethernet_init+0xa0>
		alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_PAR + i, ethernet->mac_addr[i] );
    33e8:	e0bffd17 	ldw	r2,-12(fp)
    33ec:	10800404 	addi	r2,r2,16
    33f0:	100b883a 	mov	r5,r2
    33f4:	e0fffd17 	ldw	r3,-12(fp)
    33f8:	e0bfff17 	ldw	r2,-4(fp)
    33fc:	1885883a 	add	r2,r3,r2
    3400:	10800d04 	addi	r2,r2,52
    3404:	10800003 	ldbu	r2,0(r2)
    3408:	11803fcc 	andi	r6,r2,255
    340c:	e13ffe17 	ldw	r4,-8(fp)
    3410:	000350c0 	call	350c <alt_up_ethernet_reg_write>
	usleep(10);
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_NCR, 0x00 );
	usleep(1);

	// Initialize the MAC Address
	for (i = 0; i < 6; i++) 
    3414:	e0bffd17 	ldw	r2,-12(fp)
    3418:	10800044 	addi	r2,r2,1
    341c:	e0bffd15 	stw	r2,-12(fp)
    3420:	e0bffd17 	ldw	r2,-12(fp)
    3424:	10800190 	cmplti	r2,r2,6
    3428:	103fef1e 	bne	r2,zero,33e8 <alt_up_ethernet_init+0x68>
		alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_PAR + i, ethernet->mac_addr[i] );

	/* clear any pending interrupt */
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_ISR,  0x3F );
    342c:	e13ffe17 	ldw	r4,-8(fp)
    3430:	01403f84 	movi	r5,254
    3434:	01800fc4 	movi	r6,63
    3438:	000350c0 	call	350c <alt_up_ethernet_reg_write>
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_NSR,  0x2C );
    343c:	e13ffe17 	ldw	r4,-8(fp)
    3440:	01400044 	movi	r5,1
    3444:	01800b04 	movi	r6,44
    3448:	000350c0 	call	350c <alt_up_ethernet_reg_write>

	/* set PAR bit, don't enable interrupts (do that with the set_interrupts() function */
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_IMR, 0x80 );
    344c:	e13ffe17 	ldw	r4,-8(fp)
    3450:	01403fc4 	movi	r5,255
    3454:	01802004 	movi	r6,128
    3458:	000350c0 	call	350c <alt_up_ethernet_reg_write>

	/* enable RX (Broadcast/ ALL_MULTICAST) */
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_RCR, 0x39 );
    345c:	e13ffe17 	ldw	r4,-8(fp)
    3460:	01400144 	movi	r5,5
    3464:	01800e44 	movi	r6,57
    3468:	000350c0 	call	350c <alt_up_ethernet_reg_write>

	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_ETXCSR, 0x03 );
    346c:	e13ffe17 	ldw	r4,-8(fp)
    3470:	01400c04 	movi	r5,48
    3474:	018000c4 	movi	r6,3
    3478:	000350c0 	call	350c <alt_up_ethernet_reg_write>

	return;
}
    347c:	e037883a 	mov	sp,fp
    3480:	dfc00117 	ldw	ra,4(sp)
    3484:	df000017 	ldw	fp,0(sp)
    3488:	dec00204 	addi	sp,sp,8
    348c:	f800283a 	ret

00003490 <alt_up_ethernet_open_dev>:

alt_up_ethernet_dev* alt_up_ethernet_open_dev(const char* name)
{
    3490:	defffc04 	addi	sp,sp,-16
    3494:	dfc00315 	stw	ra,12(sp)
    3498:	df000215 	stw	fp,8(sp)
    349c:	df000204 	addi	fp,sp,8
    34a0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ethernet_dev * dev = (alt_up_ethernet_dev *) alt_find_dev( name, &alt_dev_list );
    34a4:	e13fff17 	ldw	r4,-4(fp)
    34a8:	01400074 	movhi	r5,1
    34ac:	296e9c04 	addi	r5,r5,-17808
    34b0:	00062b80 	call	62b8 <alt_find_dev>
    34b4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    34b8:	e0bffe17 	ldw	r2,-8(fp)
}
    34bc:	e037883a 	mov	sp,fp
    34c0:	dfc00117 	ldw	ra,4(sp)
    34c4:	df000017 	ldw	fp,0(sp)
    34c8:	dec00204 	addi	sp,sp,8
    34cc:	f800283a 	ret

000034d0 <alt_up_ethernet_reg_read>:
#include "altera_up_avalon_ethernet_low_level_driver.h"
#include "altera_up_avalon_ethernet_regs.h"
#include <unistd.h>

unsigned int alt_up_ethernet_reg_read(unsigned int base, unsigned int reg)
{
    34d0:	defffd04 	addi	sp,sp,-12
    34d4:	df000215 	stw	fp,8(sp)
    34d8:	df000204 	addi	fp,sp,8
    34dc:	e13ffe15 	stw	r4,-8(fp)
    34e0:	e17fff15 	stw	r5,-4(fp)
	IOWR_ALTERA_UP_AVALON_ETHERNET_INDEX(base, reg);
    34e4:	e0bffe17 	ldw	r2,-8(fp)
    34e8:	e0ffff17 	ldw	r3,-4(fp)
    34ec:	10c00035 	stwio	r3,0(r2)
	return IORD_ALTERA_UP_AVALON_ETHERNET_DATA(base);
    34f0:	e0bffe17 	ldw	r2,-8(fp)
    34f4:	10800104 	addi	r2,r2,4
    34f8:	10800037 	ldwio	r2,0(r2)
}
    34fc:	e037883a 	mov	sp,fp
    3500:	df000017 	ldw	fp,0(sp)
    3504:	dec00104 	addi	sp,sp,4
    3508:	f800283a 	ret

0000350c <alt_up_ethernet_reg_write>:

void alt_up_ethernet_reg_write(unsigned int base, unsigned int reg, unsigned int data)
{
    350c:	defffc04 	addi	sp,sp,-16
    3510:	df000315 	stw	fp,12(sp)
    3514:	df000304 	addi	fp,sp,12
    3518:	e13ffd15 	stw	r4,-12(fp)
    351c:	e17ffe15 	stw	r5,-8(fp)
    3520:	e1bfff15 	stw	r6,-4(fp)
	IOWR_ALTERA_UP_AVALON_ETHERNET_INDEX(base, reg);
    3524:	e0bffd17 	ldw	r2,-12(fp)
    3528:	e0fffe17 	ldw	r3,-8(fp)
    352c:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_UP_AVALON_ETHERNET_DATA(base, data);
    3530:	e0bffd17 	ldw	r2,-12(fp)
    3534:	10800104 	addi	r2,r2,4
    3538:	e0ffff17 	ldw	r3,-4(fp)
    353c:	10c00035 	stwio	r3,0(r2)
}
    3540:	e037883a 	mov	sp,fp
    3544:	df000017 	ldw	fp,0(sp)
    3548:	dec00104 	addi	sp,sp,4
    354c:	f800283a 	ret

00003550 <alt_up_ethernet_phy_reg_read>:

unsigned int alt_up_ethernet_phy_reg_read (unsigned int base, unsigned int reg)
{
    3550:	defffa04 	addi	sp,sp,-24
    3554:	dfc00515 	stw	ra,20(sp)
    3558:	df000415 	stw	fp,16(sp)
    355c:	df000404 	addi	fp,sp,16
    3560:	e13ffe15 	stw	r4,-8(fp)
    3564:	e17fff15 	stw	r5,-4(fp)
	unsigned int result = 0;
    3568:	e03ffd15 	stw	zero,-12(fp)
	unsigned int timeout = 0;
    356c:	e03ffc15 	stw	zero,-16(fp)

	/* set PHY register address into EPAR REG. 0CH */
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPAR, reg | 0x40);				/* PHY register address setting, and DM9000_PHY offset = 0x40 */
    3570:	e0bfff17 	ldw	r2,-4(fp)
    3574:	11801014 	ori	r6,r2,64
    3578:	e13ffe17 	ldw	r4,-8(fp)
    357c:	01400304 	movi	r5,12
    3580:	000350c0 	call	350c <alt_up_ethernet_reg_write>

	/* issue PHY + READ command = 0xC into EPCR REG. 0BH */
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPCR, 0x0C);					/* issue PHY + READ command */
    3584:	e13ffe17 	ldw	r4,-8(fp)
    3588:	014002c4 	movi	r5,11
    358c:	01800304 	movi	r6,12
    3590:	000350c0 	call	350c <alt_up_ethernet_reg_write>
	do {
		usleep(1);
    3594:	01000044 	movi	r4,1
    3598:	00069800 	call	6980 <usleep>
		timeout++;
    359c:	e0bffc17 	ldw	r2,-16(fp)
    35a0:	10800044 	addi	r2,r2,1
    35a4:	e0bffc15 	stw	r2,-16(fp)
	} while ((timeout < 50) && (alt_up_ethernet_reg_read(base, ALT_UP_ETHERNET_EPCR) & 0x01));
    35a8:	e0bffc17 	ldw	r2,-16(fp)
    35ac:	10800ca8 	cmpgeui	r2,r2,50
    35b0:	1000071e 	bne	r2,zero,35d0 <alt_up_ethernet_phy_reg_read+0x80>
    35b4:	e13ffe17 	ldw	r4,-8(fp)
    35b8:	014002c4 	movi	r5,11
    35bc:	00034d00 	call	34d0 <alt_up_ethernet_reg_read>
    35c0:	1080004c 	andi	r2,r2,1
    35c4:	10803fcc 	andi	r2,r2,255
    35c8:	1004c03a 	cmpne	r2,r2,zero
    35cc:	103ff11e 	bne	r2,zero,3594 <alt_up_ethernet_phy_reg_read+0x44>
	
	usleep(1);
    35d0:	01000044 	movi	r4,1
    35d4:	00069800 	call	6980 <usleep>
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPCR, 0x08);					/* clear PHY command */
    35d8:	e13ffe17 	ldw	r4,-8(fp)
    35dc:	014002c4 	movi	r5,11
    35e0:	01800204 	movi	r6,8
    35e4:	000350c0 	call	350c <alt_up_ethernet_reg_write>

	/* read PHY data from EPDR REG. 0EH & REG. 0DH */
	result = (alt_up_ethernet_reg_read(base, ALT_UP_ETHERNET_EPDRH) << 8);			/* PHY data high_byte */
    35e8:	e13ffe17 	ldw	r4,-8(fp)
    35ec:	01400384 	movi	r5,14
    35f0:	00034d00 	call	34d0 <alt_up_ethernet_reg_read>
    35f4:	1004923a 	slli	r2,r2,8
    35f8:	e0bffd15 	stw	r2,-12(fp)
	result |= alt_up_ethernet_reg_read(base, ALT_UP_ETHERNET_EPDRL);				/* PHY data low_byte */
    35fc:	e13ffe17 	ldw	r4,-8(fp)
    3600:	01400344 	movi	r5,13
    3604:	00034d00 	call	34d0 <alt_up_ethernet_reg_read>
    3608:	1007883a 	mov	r3,r2
    360c:	e0bffd17 	ldw	r2,-12(fp)
    3610:	10c4b03a 	or	r2,r2,r3
    3614:	e0bffd15 	stw	r2,-12(fp)

	return result;
    3618:	e0bffd17 	ldw	r2,-12(fp)
}
    361c:	e037883a 	mov	sp,fp
    3620:	dfc00117 	ldw	ra,4(sp)
    3624:	df000017 	ldw	fp,0(sp)
    3628:	dec00204 	addi	sp,sp,8
    362c:	f800283a 	ret

00003630 <alt_up_ethernet_phy_reg_write>:

void alt_up_ethernet_phy_reg_write (unsigned int base, unsigned int reg, unsigned int data)
{ 
    3630:	defffa04 	addi	sp,sp,-24
    3634:	dfc00515 	stw	ra,20(sp)
    3638:	df000415 	stw	fp,16(sp)
    363c:	df000404 	addi	fp,sp,16
    3640:	e13ffd15 	stw	r4,-12(fp)
    3644:	e17ffe15 	stw	r5,-8(fp)
    3648:	e1bfff15 	stw	r6,-4(fp)
	unsigned int timeout = 0;
    364c:	e03ffc15 	stw	zero,-16(fp)
	
	/* set PHY register address into EPAR REG. 0CH */
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPAR, reg | 0x40);				/* PHY register address setting, and DM9000_PHY offset = 0x40 */
    3650:	e0bffe17 	ldw	r2,-8(fp)
    3654:	11801014 	ori	r6,r2,64
    3658:	e13ffd17 	ldw	r4,-12(fp)
    365c:	01400304 	movi	r5,12
    3660:	000350c0 	call	350c <alt_up_ethernet_reg_write>

	/* fill PHY WRITE data into EPDR REG. 0EH & REG. 0DH */
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPDRH, ((data >> 8) & 0xFF));	/* PHY data high_byte */
    3664:	e0bfff17 	ldw	r2,-4(fp)
    3668:	1004d23a 	srli	r2,r2,8
    366c:	11803fcc 	andi	r6,r2,255
    3670:	e13ffd17 	ldw	r4,-12(fp)
    3674:	01400384 	movi	r5,14
    3678:	000350c0 	call	350c <alt_up_ethernet_reg_write>
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPDRL, data & 0xFF);			/* PHY data low_byte */
    367c:	e0bfff17 	ldw	r2,-4(fp)
    3680:	11803fcc 	andi	r6,r2,255
    3684:	e13ffd17 	ldw	r4,-12(fp)
    3688:	01400344 	movi	r5,13
    368c:	000350c0 	call	350c <alt_up_ethernet_reg_write>

	/* issue PHY + WRITE command = 0xA into EPCR REG. 0BH */
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPCR, 0x0A);					/* issue PHY + WRITE command */
    3690:	e13ffd17 	ldw	r4,-12(fp)
    3694:	014002c4 	movi	r5,11
    3698:	01800284 	movi	r6,10
    369c:	000350c0 	call	350c <alt_up_ethernet_reg_write>
	do {
		usleep(1);
    36a0:	01000044 	movi	r4,1
    36a4:	00069800 	call	6980 <usleep>
		timeout++;
    36a8:	e0bffc17 	ldw	r2,-16(fp)
    36ac:	10800044 	addi	r2,r2,1
    36b0:	e0bffc15 	stw	r2,-16(fp)
	} while ((timeout < 50) && (alt_up_ethernet_reg_read(base, ALT_UP_ETHERNET_EPCR) & 0x01));
    36b4:	e0bffc17 	ldw	r2,-16(fp)
    36b8:	10800ca8 	cmpgeui	r2,r2,50
    36bc:	1000071e 	bne	r2,zero,36dc <alt_up_ethernet_phy_reg_write+0xac>
    36c0:	e13ffd17 	ldw	r4,-12(fp)
    36c4:	014002c4 	movi	r5,11
    36c8:	00034d00 	call	34d0 <alt_up_ethernet_reg_read>
    36cc:	1080004c 	andi	r2,r2,1
    36d0:	10803fcc 	andi	r2,r2,255
    36d4:	1004c03a 	cmpne	r2,r2,zero
    36d8:	103ff11e 	bne	r2,zero,36a0 <alt_up_ethernet_phy_reg_write+0x70>
	
	usleep(1);
    36dc:	01000044 	movi	r4,1
    36e0:	00069800 	call	6980 <usleep>
	
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPCR, 0x08);					/* clear PHY command */
    36e4:	e13ffd17 	ldw	r4,-12(fp)
    36e8:	014002c4 	movi	r5,11
    36ec:	01800204 	movi	r6,8
    36f0:	000350c0 	call	350c <alt_up_ethernet_reg_write>
}
    36f4:	e037883a 	mov	sp,fp
    36f8:	dfc00117 	ldw	ra,4(sp)
    36fc:	df000017 	ldw	fp,0(sp)
    3700:	dec00204 	addi	sp,sp,8
    3704:	f800283a 	ret

00003708 <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
    3708:	defffd04 	addi	sp,sp,-12
    370c:	df000215 	stw	fp,8(sp)
    3710:	df000204 	addi	fp,sp,8
    3714:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    3718:	e0bfff17 	ldw	r2,-4(fp)
    371c:	10800a17 	ldw	r2,40(r2)
    3720:	10800104 	addi	r2,r2,4
    3724:	10800037 	ldwio	r2,0(r2)
    3728:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
    372c:	e0bffe17 	ldw	r2,-8(fp)
    3730:	10800054 	ori	r2,r2,1
    3734:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    3738:	e0bfff17 	ldw	r2,-4(fp)
    373c:	10800a17 	ldw	r2,40(r2)
    3740:	10800104 	addi	r2,r2,4
    3744:	e0fffe17 	ldw	r3,-8(fp)
    3748:	10c00035 	stwio	r3,0(r2)
}
    374c:	e037883a 	mov	sp,fp
    3750:	df000017 	ldw	fp,0(sp)
    3754:	dec00104 	addi	sp,sp,4
    3758:	f800283a 	ret

0000375c <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
    375c:	defffd04 	addi	sp,sp,-12
    3760:	df000215 	stw	fp,8(sp)
    3764:	df000204 	addi	fp,sp,8
    3768:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    376c:	e0bfff17 	ldw	r2,-4(fp)
    3770:	10800a17 	ldw	r2,40(r2)
    3774:	10800104 	addi	r2,r2,4
    3778:	10800037 	ldwio	r2,0(r2)
    377c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
    3780:	e0fffe17 	ldw	r3,-8(fp)
    3784:	00bfff84 	movi	r2,-2
    3788:	1884703a 	and	r2,r3,r2
    378c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    3790:	e0bfff17 	ldw	r2,-4(fp)
    3794:	10800a17 	ldw	r2,40(r2)
    3798:	10800104 	addi	r2,r2,4
    379c:	e0fffe17 	ldw	r3,-8(fp)
    37a0:	10c00035 	stwio	r3,0(r2)
}
    37a4:	e037883a 	mov	sp,fp
    37a8:	df000017 	ldw	fp,0(sp)
    37ac:	dec00104 	addi	sp,sp,4
    37b0:	f800283a 	ret

000037b4 <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
    37b4:	defffd04 	addi	sp,sp,-12
    37b8:	df000215 	stw	fp,8(sp)
    37bc:	df000204 	addi	fp,sp,8
    37c0:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
    37c4:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
    37c8:	e0bfff17 	ldw	r2,-4(fp)
    37cc:	10800a17 	ldw	r2,40(r2)
    37d0:	10800084 	addi	r2,r2,2
    37d4:	1080002b 	ldhuio	r2,0(r2)
    37d8:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
    37dc:	e0bffe0b 	ldhu	r2,-8(fp)
}
    37e0:	e037883a 	mov	sp,fp
    37e4:	df000017 	ldw	fp,0(sp)
    37e8:	dec00104 	addi	sp,sp,4
    37ec:	f800283a 	ret

000037f0 <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
    37f0:	defffd04 	addi	sp,sp,-12
    37f4:	df000215 	stw	fp,8(sp)
    37f8:	df000204 	addi	fp,sp,8
    37fc:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    3800:	e0bfff17 	ldw	r2,-4(fp)
    3804:	10800a17 	ldw	r2,40(r2)
    3808:	10800104 	addi	r2,r2,4
    380c:	10800037 	ldwio	r2,0(r2)
    3810:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
    3814:	e0bffe17 	ldw	r2,-8(fp)
    3818:	10bfffec 	andhi	r2,r2,65535
    381c:	1004d43a 	srli	r2,r2,16
}
    3820:	e037883a 	mov	sp,fp
    3824:	df000017 	ldw	fp,0(sp)
    3828:	dec00104 	addi	sp,sp,4
    382c:	f800283a 	ret

00003830 <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
    3830:	defffc04 	addi	sp,sp,-16
    3834:	df000315 	stw	fp,12(sp)
    3838:	df000304 	addi	fp,sp,12
    383c:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
    3840:	e0bffe17 	ldw	r2,-8(fp)
    3844:	1080800c 	andi	r2,r2,512
    3848:	1004d27a 	srli	r2,r2,9
    384c:	e0bffd15 	stw	r2,-12(fp)
	return (parity_error ? -1 : 0);
    3850:	e0bffd17 	ldw	r2,-12(fp)
    3854:	1005003a 	cmpeq	r2,r2,zero
    3858:	1000031e 	bne	r2,zero,3868 <alt_up_irda_check_parity+0x38>
    385c:	00bfffc4 	movi	r2,-1
    3860:	e0bfff15 	stw	r2,-4(fp)
    3864:	00000106 	br	386c <alt_up_irda_check_parity+0x3c>
    3868:	e03fff15 	stw	zero,-4(fp)
    386c:	e0bfff17 	ldw	r2,-4(fp)
}
    3870:	e037883a 	mov	sp,fp
    3874:	df000017 	ldw	fp,0(sp)
    3878:	dec00104 	addi	sp,sp,4
    387c:	f800283a 	ret

00003880 <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
    3880:	defffc04 	addi	sp,sp,-16
    3884:	df000315 	stw	fp,12(sp)
    3888:	df000304 	addi	fp,sp,12
    388c:	e13ffe15 	stw	r4,-8(fp)
    3890:	e17fff05 	stb	r5,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    3894:	e0bffe17 	ldw	r2,-8(fp)
    3898:	10800a17 	ldw	r2,40(r2)
    389c:	10800037 	ldwio	r2,0(r2)
    38a0:	e0bffd15 	stw	r2,-12(fp)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
    38a4:	e0bffe17 	ldw	r2,-8(fp)
    38a8:	10800a17 	ldw	r2,40(r2)
    38ac:	e0ffff03 	ldbu	r3,-4(fp)
    38b0:	10c00035 	stwio	r3,0(r2)
	return 0;
    38b4:	0005883a 	mov	r2,zero
}
    38b8:	e037883a 	mov	sp,fp
    38bc:	df000017 	ldw	fp,0(sp)
    38c0:	dec00104 	addi	sp,sp,4
    38c4:	f800283a 	ret

000038c8 <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
    38c8:	defffa04 	addi	sp,sp,-24
    38cc:	dfc00515 	stw	ra,20(sp)
    38d0:	df000415 	stw	fp,16(sp)
    38d4:	df000404 	addi	fp,sp,16
    38d8:	e13ffd15 	stw	r4,-12(fp)
    38dc:	e17ffe15 	stw	r5,-8(fp)
    38e0:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    38e4:	e0bffd17 	ldw	r2,-12(fp)
    38e8:	10800a17 	ldw	r2,40(r2)
    38ec:	10800037 	ldwio	r2,0(r2)
    38f0:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
    38f4:	e0bffc17 	ldw	r2,-16(fp)
    38f8:	1007883a 	mov	r3,r2
    38fc:	e0bffe17 	ldw	r2,-8(fp)
    3900:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
    3904:	e13ffc17 	ldw	r4,-16(fp)
    3908:	00038300 	call	3830 <alt_up_irda_check_parity>
    390c:	1007883a 	mov	r3,r2
    3910:	e0bfff17 	ldw	r2,-4(fp)
    3914:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
    3918:	e0bffc17 	ldw	r2,-16(fp)
    391c:	10a0000c 	andi	r2,r2,32768
    3920:	1004d3fa 	srli	r2,r2,15
    3924:	10bfffc4 	addi	r2,r2,-1
}
    3928:	e037883a 	mov	sp,fp
    392c:	dfc00117 	ldw	ra,4(sp)
    3930:	df000017 	ldw	fp,0(sp)
    3934:	dec00204 	addi	sp,sp,8
    3938:	f800283a 	ret

0000393c <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
    393c:	defff804 	addi	sp,sp,-32
    3940:	dfc00715 	stw	ra,28(sp)
    3944:	df000615 	stw	fp,24(sp)
    3948:	df000604 	addi	fp,sp,24
    394c:	e13ffd15 	stw	r4,-12(fp)
    3950:	e17ffe15 	stw	r5,-8(fp)
    3954:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    3958:	e0bffd17 	ldw	r2,-12(fp)
    395c:	10800017 	ldw	r2,0(r2)
    3960:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
    3964:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
    3968:	00000c06 	br	399c <alt_up_irda_read_fd+0x60>
	{
		if (alt_up_irda_read_data(irda, ptr++, &parity_error)==0)
    396c:	e17ffe17 	ldw	r5,-8(fp)
    3970:	e0bffe17 	ldw	r2,-8(fp)
    3974:	10800044 	addi	r2,r2,1
    3978:	e0bffe15 	stw	r2,-8(fp)
    397c:	e1bffc04 	addi	r6,fp,-16
    3980:	e13ffb17 	ldw	r4,-20(fp)
    3984:	00038c80 	call	38c8 <alt_up_irda_read_data>
    3988:	1004c03a 	cmpne	r2,r2,zero
    398c:	1000091e 	bne	r2,zero,39b4 <alt_up_irda_read_fd+0x78>
			count++;
    3990:	e0bffa17 	ldw	r2,-24(fp)
    3994:	10800044 	addi	r2,r2,1
    3998:	e0bffa15 	stw	r2,-24(fp)
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    399c:	e0bfff17 	ldw	r2,-4(fp)
    39a0:	10bfffc4 	addi	r2,r2,-1
    39a4:	e0bfff15 	stw	r2,-4(fp)
    39a8:	e0bfff17 	ldw	r2,-4(fp)
    39ac:	10bfffd8 	cmpnei	r2,r2,-1
    39b0:	103fee1e 	bne	r2,zero,396c <alt_up_irda_read_fd+0x30>
		if (alt_up_irda_read_data(irda, ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
    39b4:	e0bffa17 	ldw	r2,-24(fp)
}
    39b8:	e037883a 	mov	sp,fp
    39bc:	dfc00117 	ldw	ra,4(sp)
    39c0:	df000017 	ldw	fp,0(sp)
    39c4:	dec00204 	addi	sp,sp,8
    39c8:	f800283a 	ret

000039cc <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
    39cc:	defff904 	addi	sp,sp,-28
    39d0:	dfc00615 	stw	ra,24(sp)
    39d4:	df000515 	stw	fp,20(sp)
    39d8:	df000504 	addi	fp,sp,20
    39dc:	e13ffd15 	stw	r4,-12(fp)
    39e0:	e17ffe15 	stw	r5,-8(fp)
    39e4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    39e8:	e0bffd17 	ldw	r2,-12(fp)
    39ec:	10800017 	ldw	r2,0(r2)
    39f0:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
    39f4:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
    39f8:	00000c06 	br	3a2c <alt_up_irda_write_fd+0x60>
	{
		if (alt_up_irda_write_data(irda, ptr++)==0)
    39fc:	e0bffe17 	ldw	r2,-8(fp)
    3a00:	11403fcc 	andi	r5,r2,255
    3a04:	e0bffe17 	ldw	r2,-8(fp)
    3a08:	10800044 	addi	r2,r2,1
    3a0c:	e0bffe15 	stw	r2,-8(fp)
    3a10:	e13ffc17 	ldw	r4,-16(fp)
    3a14:	00038800 	call	3880 <alt_up_irda_write_data>
    3a18:	1004c03a 	cmpne	r2,r2,zero
    3a1c:	1000091e 	bne	r2,zero,3a44 <alt_up_irda_write_fd+0x78>
			count++;
    3a20:	e0bffb17 	ldw	r2,-20(fp)
    3a24:	10800044 	addi	r2,r2,1
    3a28:	e0bffb15 	stw	r2,-20(fp)

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
    3a2c:	e0bfff17 	ldw	r2,-4(fp)
    3a30:	10bfffc4 	addi	r2,r2,-1
    3a34:	e0bfff15 	stw	r2,-4(fp)
    3a38:	e0bfff17 	ldw	r2,-4(fp)
    3a3c:	10bfffd8 	cmpnei	r2,r2,-1
    3a40:	103fee1e 	bne	r2,zero,39fc <alt_up_irda_write_fd+0x30>
		if (alt_up_irda_write_data(irda, ptr++)==0)
			count++;
		else
			break;
	}
	return count;
    3a44:	e0bffb17 	ldw	r2,-20(fp)
}
    3a48:	e037883a 	mov	sp,fp
    3a4c:	dfc00117 	ldw	ra,4(sp)
    3a50:	df000017 	ldw	fp,0(sp)
    3a54:	dec00204 	addi	sp,sp,8
    3a58:	f800283a 	ret

00003a5c <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
    3a5c:	defffc04 	addi	sp,sp,-16
    3a60:	dfc00315 	stw	ra,12(sp)
    3a64:	df000215 	stw	fp,8(sp)
    3a68:	df000204 	addi	fp,sp,8
    3a6c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
    3a70:	e13fff17 	ldw	r4,-4(fp)
    3a74:	01400074 	movhi	r5,1
    3a78:	296e9c04 	addi	r5,r5,-17808
    3a7c:	00062b80 	call	62b8 <alt_find_dev>
    3a80:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    3a84:	e0bffe17 	ldw	r2,-8(fp)
}
    3a88:	e037883a 	mov	sp,fp
    3a8c:	dfc00117 	ldw	ra,4(sp)
    3a90:	df000017 	ldw	fp,0(sp)
    3a94:	dec00204 	addi	sp,sp,8
    3a98:	f800283a 	ret

00003a9c <alt_up_parallel_port_open_dev>:

#include "altera_up_avalon_parallel_port.h"
#include "altera_up_avalon_parallel_port_regs.h"

alt_up_parallel_port_dev* alt_up_parallel_port_open_dev(const char* name)
{
    3a9c:	defffc04 	addi	sp,sp,-16
    3aa0:	dfc00315 	stw	ra,12(sp)
    3aa4:	df000215 	stw	fp,8(sp)
    3aa8:	df000204 	addi	fp,sp,8
    3aac:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_parallel_port_dev *dev = (alt_up_parallel_port_dev*)alt_find_dev(name, &alt_dev_list);
    3ab0:	e13fff17 	ldw	r4,-4(fp)
    3ab4:	01400074 	movhi	r5,1
    3ab8:	296e9c04 	addi	r5,r5,-17808
    3abc:	00062b80 	call	62b8 <alt_find_dev>
    3ac0:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    3ac4:	e0bffe17 	ldw	r2,-8(fp)
}
    3ac8:	e037883a 	mov	sp,fp
    3acc:	dfc00117 	ldw	ra,4(sp)
    3ad0:	df000017 	ldw	fp,0(sp)
    3ad4:	dec00204 	addi	sp,sp,8
    3ad8:	f800283a 	ret

00003adc <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
    3adc:	defffd04 	addi	sp,sp,-12
    3ae0:	df000215 	stw	fp,8(sp)
    3ae4:	df000204 	addi	fp,sp,8
    3ae8:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
    3aec:	e0bfff17 	ldw	r2,-4(fp)
    3af0:	1080400c 	andi	r2,r2,256
    3af4:	1004d23a 	srli	r2,r2,8
    3af8:	e0bffe05 	stb	r2,-8(fp)
	return ri;
    3afc:	e0bffe03 	ldbu	r2,-8(fp)
}
    3b00:	e037883a 	mov	sp,fp
    3b04:	df000017 	ldw	fp,0(sp)
    3b08:	dec00104 	addi	sp,sp,4
    3b0c:	f800283a 	ret

00003b10 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
    3b10:	defffd04 	addi	sp,sp,-12
    3b14:	df000215 	stw	fp,8(sp)
    3b18:	df000204 	addi	fp,sp,8
    3b1c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
    3b20:	e0bfff17 	ldw	r2,-4(fp)
    3b24:	1080004c 	andi	r2,r2,1
    3b28:	e0bffe05 	stb	r2,-8(fp)
	return re;
    3b2c:	e0bffe03 	ldbu	r2,-8(fp)
}
    3b30:	e037883a 	mov	sp,fp
    3b34:	df000017 	ldw	fp,0(sp)
    3b38:	dec00104 	addi	sp,sp,4
    3b3c:	f800283a 	ret

00003b40 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
    3b40:	defffd04 	addi	sp,sp,-12
    3b44:	df000215 	stw	fp,8(sp)
    3b48:	df000204 	addi	fp,sp,8
    3b4c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
    3b50:	e0bfff17 	ldw	r2,-4(fp)
    3b54:	1081000c 	andi	r2,r2,1024
    3b58:	1004d2ba 	srli	r2,r2,10
    3b5c:	e0bffe05 	stb	r2,-8(fp)
	return re;
    3b60:	e0bffe03 	ldbu	r2,-8(fp)
}
    3b64:	e037883a 	mov	sp,fp
    3b68:	df000017 	ldw	fp,0(sp)
    3b6c:	dec00104 	addi	sp,sp,4
    3b70:	f800283a 	ret

00003b74 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
    3b74:	defffd04 	addi	sp,sp,-12
    3b78:	df000215 	stw	fp,8(sp)
    3b7c:	df000204 	addi	fp,sp,8
    3b80:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
    3b84:	e0bfff17 	ldw	r2,-4(fp)
    3b88:	10bfffec 	andhi	r2,r2,65535
    3b8c:	1004d43a 	srli	r2,r2,16
    3b90:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
    3b94:	e0bffe0b 	ldhu	r2,-8(fp)
}
    3b98:	e037883a 	mov	sp,fp
    3b9c:	df000017 	ldw	fp,0(sp)
    3ba0:	dec00104 	addi	sp,sp,4
    3ba4:	f800283a 	ret

00003ba8 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
    3ba8:	defffd04 	addi	sp,sp,-12
    3bac:	df000215 	stw	fp,8(sp)
    3bb0:	df000204 	addi	fp,sp,8
    3bb4:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
    3bb8:	e0bfff17 	ldw	r2,-4(fp)
    3bbc:	10a0000c 	andi	r2,r2,32768
    3bc0:	1004d3fa 	srli	r2,r2,15
    3bc4:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
    3bc8:	e0bffe03 	ldbu	r2,-8(fp)
}
    3bcc:	e037883a 	mov	sp,fp
    3bd0:	df000017 	ldw	fp,0(sp)
    3bd4:	dec00104 	addi	sp,sp,4
    3bd8:	f800283a 	ret

00003bdc <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
    3bdc:	defffd04 	addi	sp,sp,-12
    3be0:	df000215 	stw	fp,8(sp)
    3be4:	df000204 	addi	fp,sp,8
    3be8:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
    3bec:	e0bfff17 	ldw	r2,-4(fp)
    3bf0:	e0bffe05 	stb	r2,-8(fp)
	return data;
    3bf4:	e0bffe03 	ldbu	r2,-8(fp)
}
    3bf8:	e037883a 	mov	sp,fp
    3bfc:	df000017 	ldw	fp,0(sp)
    3c00:	dec00104 	addi	sp,sp,4
    3c04:	f800283a 	ret

00003c08 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
    3c08:	defffb04 	addi	sp,sp,-20
    3c0c:	dfc00415 	stw	ra,16(sp)
    3c10:	df000315 	stw	fp,12(sp)
    3c14:	df000304 	addi	fp,sp,12
    3c18:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
    3c1c:	e13fff17 	ldw	r4,-4(fp)
    3c20:	01403fc4 	movi	r5,255
    3c24:	0003e680 	call	3e68 <alt_up_ps2_write_data_byte_with_ack>
    3c28:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
    3c2c:	e0bffd17 	ldw	r2,-12(fp)
    3c30:	1004c03a 	cmpne	r2,r2,zero
    3c34:	1000221e 	bne	r2,zero,3cc0 <alt_up_ps2_init+0xb8>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    3c38:	e17ffe04 	addi	r5,fp,-8
    3c3c:	e13fff17 	ldw	r4,-4(fp)
    3c40:	0003ed40 	call	3ed4 <alt_up_ps2_read_data_byte_timeout>
    3c44:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
    3c48:	e0bffd17 	ldw	r2,-12(fp)
    3c4c:	1004c03a 	cmpne	r2,r2,zero
    3c50:	10001b1e 	bne	r2,zero,3cc0 <alt_up_ps2_init+0xb8>
    3c54:	e0bffe03 	ldbu	r2,-8(fp)
    3c58:	10803fcc 	andi	r2,r2,255
    3c5c:	10802a98 	cmpnei	r2,r2,170
    3c60:	1000171e 	bne	r2,zero,3cc0 <alt_up_ps2_init+0xb8>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    3c64:	e17ffe04 	addi	r5,fp,-8
    3c68:	e13fff17 	ldw	r4,-4(fp)
    3c6c:	0003ed40 	call	3ed4 <alt_up_ps2_read_data_byte_timeout>
    3c70:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
    3c74:	e0bffd17 	ldw	r2,-12(fp)
    3c78:	10bfe318 	cmpnei	r2,r2,-116
    3c7c:	1000041e 	bne	r2,zero,3c90 <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
    3c80:	e0ffff17 	ldw	r3,-4(fp)
    3c84:	00800044 	movi	r2,1
    3c88:	18800d15 	stw	r2,52(r3)
    3c8c:	00000c06 	br	3cc0 <alt_up_ps2_init+0xb8>
			}
			else if (status == 0 && byte == 0x00)
    3c90:	e0bffd17 	ldw	r2,-12(fp)
    3c94:	1004c03a 	cmpne	r2,r2,zero
    3c98:	1000091e 	bne	r2,zero,3cc0 <alt_up_ps2_init+0xb8>
    3c9c:	e0bffe03 	ldbu	r2,-8(fp)
    3ca0:	10803fcc 	andi	r2,r2,255
    3ca4:	1004c03a 	cmpne	r2,r2,zero
    3ca8:	1000051e 	bne	r2,zero,3cc0 <alt_up_ps2_init+0xb8>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
    3cac:	e0bfff17 	ldw	r2,-4(fp)
    3cb0:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
    3cb4:	e13fff17 	ldw	r4,-4(fp)
    3cb8:	01403d04 	movi	r5,244
    3cbc:	0003d800 	call	3d80 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
    3cc0:	e037883a 	mov	sp,fp
    3cc4:	dfc00117 	ldw	ra,4(sp)
    3cc8:	df000017 	ldw	fp,0(sp)
    3ccc:	dec00204 	addi	sp,sp,8
    3cd0:	f800283a 	ret

00003cd4 <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
    3cd4:	defffd04 	addi	sp,sp,-12
    3cd8:	df000215 	stw	fp,8(sp)
    3cdc:	df000204 	addi	fp,sp,8
    3ce0:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    3ce4:	e0bfff17 	ldw	r2,-4(fp)
    3ce8:	10800a17 	ldw	r2,40(r2)
    3cec:	10800104 	addi	r2,r2,4
    3cf0:	10800037 	ldwio	r2,0(r2)
    3cf4:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    3cf8:	e0bffe17 	ldw	r2,-8(fp)
    3cfc:	10800054 	ori	r2,r2,1
    3d00:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    3d04:	e0bfff17 	ldw	r2,-4(fp)
    3d08:	10800a17 	ldw	r2,40(r2)
    3d0c:	10800104 	addi	r2,r2,4
    3d10:	e0fffe17 	ldw	r3,-8(fp)
    3d14:	10c00035 	stwio	r3,0(r2)
}
    3d18:	e037883a 	mov	sp,fp
    3d1c:	df000017 	ldw	fp,0(sp)
    3d20:	dec00104 	addi	sp,sp,4
    3d24:	f800283a 	ret

00003d28 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
    3d28:	defffd04 	addi	sp,sp,-12
    3d2c:	df000215 	stw	fp,8(sp)
    3d30:	df000204 	addi	fp,sp,8
    3d34:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    3d38:	e0bfff17 	ldw	r2,-4(fp)
    3d3c:	10800a17 	ldw	r2,40(r2)
    3d40:	10800104 	addi	r2,r2,4
    3d44:	10800037 	ldwio	r2,0(r2)
    3d48:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    3d4c:	e0fffe17 	ldw	r3,-8(fp)
    3d50:	00bfff84 	movi	r2,-2
    3d54:	1884703a 	and	r2,r3,r2
    3d58:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    3d5c:	e0bfff17 	ldw	r2,-4(fp)
    3d60:	10800a17 	ldw	r2,40(r2)
    3d64:	10800104 	addi	r2,r2,4
    3d68:	e0fffe17 	ldw	r3,-8(fp)
    3d6c:	10c00035 	stwio	r3,0(r2)
}
    3d70:	e037883a 	mov	sp,fp
    3d74:	df000017 	ldw	fp,0(sp)
    3d78:	dec00104 	addi	sp,sp,4
    3d7c:	f800283a 	ret

00003d80 <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
    3d80:	defffa04 	addi	sp,sp,-24
    3d84:	dfc00515 	stw	ra,20(sp)
    3d88:	df000415 	stw	fp,16(sp)
    3d8c:	df000404 	addi	fp,sp,16
    3d90:	e13ffd15 	stw	r4,-12(fp)
    3d94:	e17ffe05 	stb	r5,-8(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
    3d98:	e0bffd17 	ldw	r2,-12(fp)
    3d9c:	10800a17 	ldw	r2,40(r2)
    3da0:	e0fffe03 	ldbu	r3,-8(fp)
    3da4:	10c00025 	stbio	r3,0(r2)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
    3da8:	e0bffd17 	ldw	r2,-12(fp)
    3dac:	10800a17 	ldw	r2,40(r2)
    3db0:	10800104 	addi	r2,r2,4
    3db4:	10800037 	ldwio	r2,0(r2)
    3db8:	e0bffc15 	stw	r2,-16(fp)
	if (read_CE_bit(ctrl_reg))
    3dbc:	e13ffc17 	ldw	r4,-16(fp)
    3dc0:	0003b400 	call	3b40 <read_CE_bit>
    3dc4:	10803fcc 	andi	r2,r2,255
    3dc8:	1005003a 	cmpeq	r2,r2,zero
    3dcc:	1000031e 	bne	r2,zero,3ddc <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
    3dd0:	00bffec4 	movi	r2,-5
    3dd4:	e0bfff15 	stw	r2,-4(fp)
    3dd8:	00000106 	br	3de0 <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
    3ddc:	e03fff15 	stw	zero,-4(fp)
    3de0:	e0bfff17 	ldw	r2,-4(fp)
}
    3de4:	e037883a 	mov	sp,fp
    3de8:	dfc00117 	ldw	ra,4(sp)
    3dec:	df000017 	ldw	fp,0(sp)
    3df0:	dec00204 	addi	sp,sp,8
    3df4:	f800283a 	ret

00003df8 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
    3df8:	defffb04 	addi	sp,sp,-20
    3dfc:	dfc00415 	stw	ra,16(sp)
    3e00:	df000315 	stw	fp,12(sp)
    3e04:	df000304 	addi	fp,sp,12
    3e08:	e13ffe15 	stw	r4,-8(fp)
	unsigned char data = 0;
    3e0c:	e03ffd45 	stb	zero,-11(fp)
	unsigned char status = 0;
    3e10:	e03ffd05 	stb	zero,-12(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
    3e14:	e17ffd44 	addi	r5,fp,-11
    3e18:	e13ffe17 	ldw	r4,-8(fp)
    3e1c:	0003ed40 	call	3ed4 <alt_up_ps2_read_data_byte_timeout>
    3e20:	e0bffd05 	stb	r2,-12(fp)
		if ( status == 0)
    3e24:	e0bffd03 	ldbu	r2,-12(fp)
    3e28:	1004c03a 	cmpne	r2,r2,zero
    3e2c:	1000061e 	bne	r2,zero,3e48 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
    3e30:	e0bffd43 	ldbu	r2,-11(fp)
    3e34:	10803fcc 	andi	r2,r2,255
    3e38:	10803e98 	cmpnei	r2,r2,250
    3e3c:	103ff51e 	bne	r2,zero,3e14 <alt_up_ps2_wait_for_ack+0x1c>
				return 0;
    3e40:	e03fff15 	stw	zero,-4(fp)
    3e44:	00000206 	br	3e50 <alt_up_ps2_wait_for_ack+0x58>
		}
		else 
		{
			return status;
    3e48:	e0bffd03 	ldbu	r2,-12(fp)
    3e4c:	e0bfff15 	stw	r2,-4(fp)
    3e50:	e0bfff17 	ldw	r2,-4(fp)
		}
	} while(1);
	return -ETIMEDOUT;
}
    3e54:	e037883a 	mov	sp,fp
    3e58:	dfc00117 	ldw	ra,4(sp)
    3e5c:	df000017 	ldw	fp,0(sp)
    3e60:	dec00204 	addi	sp,sp,8
    3e64:	f800283a 	ret

00003e68 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
    3e68:	defff904 	addi	sp,sp,-28
    3e6c:	dfc00615 	stw	ra,24(sp)
    3e70:	df000515 	stw	fp,20(sp)
    3e74:	df000504 	addi	fp,sp,20
    3e78:	e13ffd15 	stw	r4,-12(fp)
    3e7c:	e17ffe05 	stb	r5,-8(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
    3e80:	e17ffe03 	ldbu	r5,-8(fp)
    3e84:	e13ffd17 	ldw	r4,-12(fp)
    3e88:	0003d800 	call	3d80 <alt_up_ps2_write_data_byte>
    3e8c:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
    3e90:	e0bffc17 	ldw	r2,-16(fp)
    3e94:	1005003a 	cmpeq	r2,r2,zero
    3e98:	1000031e 	bne	r2,zero,3ea8 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
    3e9c:	e0bffc17 	ldw	r2,-16(fp)
    3ea0:	e0bfff15 	stw	r2,-4(fp)
    3ea4:	00000506 	br	3ebc <alt_up_ps2_write_data_byte_with_ack+0x54>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
    3ea8:	e13ffd17 	ldw	r4,-12(fp)
    3eac:	0003df80 	call	3df8 <alt_up_ps2_wait_for_ack>
    3eb0:	e0bffb15 	stw	r2,-20(fp)
	return ack_status;
    3eb4:	e0bffb17 	ldw	r2,-20(fp)
    3eb8:	e0bfff15 	stw	r2,-4(fp)
    3ebc:	e0bfff17 	ldw	r2,-4(fp)
}
    3ec0:	e037883a 	mov	sp,fp
    3ec4:	dfc00117 	ldw	ra,4(sp)
    3ec8:	df000017 	ldw	fp,0(sp)
    3ecc:	dec00204 	addi	sp,sp,8
    3ed0:	f800283a 	ret

00003ed4 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    3ed4:	defff904 	addi	sp,sp,-28
    3ed8:	dfc00615 	stw	ra,24(sp)
    3edc:	df000515 	stw	fp,20(sp)
    3ee0:	df000504 	addi	fp,sp,20
    3ee4:	e13ffd15 	stw	r4,-12(fp)
    3ee8:	e17ffe15 	stw	r5,-8(fp)
	unsigned int data_reg = 0; 
    3eec:	e03ffc15 	stw	zero,-16(fp)
	unsigned int count = 0;
    3ef0:	e03ffb15 	stw	zero,-20(fp)
    3ef4:	00000006 	br	3ef8 <alt_up_ps2_read_data_byte_timeout+0x24>
	do {
		count++;
    3ef8:	e0bffb17 	ldw	r2,-20(fp)
    3efc:	10800044 	addi	r2,r2,1
    3f00:	e0bffb15 	stw	r2,-20(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    3f04:	e0bffd17 	ldw	r2,-12(fp)
    3f08:	10800a17 	ldw	r2,40(r2)
    3f0c:	10800037 	ldwio	r2,0(r2)
    3f10:	e0bffc15 	stw	r2,-16(fp)
		if (read_data_valid(data_reg))
    3f14:	e13ffc17 	ldw	r4,-16(fp)
    3f18:	0003ba80 	call	3ba8 <read_data_valid>
    3f1c:	10803fcc 	andi	r2,r2,255
    3f20:	1005003a 	cmpeq	r2,r2,zero
    3f24:	1000071e 	bne	r2,zero,3f44 <alt_up_ps2_read_data_byte_timeout+0x70>
		{
			*byte = read_data_byte(data_reg);
    3f28:	e13ffc17 	ldw	r4,-16(fp)
    3f2c:	0003bdc0 	call	3bdc <read_data_byte>
    3f30:	1007883a 	mov	r3,r2
    3f34:	e0bffe17 	ldw	r2,-8(fp)
    3f38:	10c00005 	stb	r3,0(r2)
			return 0;
    3f3c:	e03fff15 	stw	zero,-4(fp)
    3f40:	00000a06 	br	3f6c <alt_up_ps2_read_data_byte_timeout+0x98>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
    3f44:	e0bffd17 	ldw	r2,-12(fp)
    3f48:	10800c17 	ldw	r2,48(r2)
    3f4c:	1005003a 	cmpeq	r2,r2,zero
    3f50:	103fe91e 	bne	r2,zero,3ef8 <alt_up_ps2_read_data_byte_timeout+0x24>
    3f54:	e0bffd17 	ldw	r2,-12(fp)
    3f58:	10c00c17 	ldw	r3,48(r2)
    3f5c:	e0bffb17 	ldw	r2,-20(fp)
    3f60:	18bfe52e 	bgeu	r3,r2,3ef8 <alt_up_ps2_read_data_byte_timeout+0x24>
		{
			return -ETIMEDOUT;
    3f64:	00bfe304 	movi	r2,-116
    3f68:	e0bfff15 	stw	r2,-4(fp)
		}
	} while (1);
    3f6c:	e0bfff17 	ldw	r2,-4(fp)
}
    3f70:	e037883a 	mov	sp,fp
    3f74:	dfc00117 	ldw	ra,4(sp)
    3f78:	df000017 	ldw	fp,0(sp)
    3f7c:	dec00204 	addi	sp,sp,8
    3f80:	f800283a 	ret

00003f84 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    3f84:	defffa04 	addi	sp,sp,-24
    3f88:	dfc00515 	stw	ra,20(sp)
    3f8c:	df000415 	stw	fp,16(sp)
    3f90:	df000404 	addi	fp,sp,16
    3f94:	e13ffd15 	stw	r4,-12(fp)
    3f98:	e17ffe15 	stw	r5,-8(fp)
	unsigned int data_reg = 0; 
    3f9c:	e03ffc15 	stw	zero,-16(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    3fa0:	e0bffd17 	ldw	r2,-12(fp)
    3fa4:	10800a17 	ldw	r2,40(r2)
    3fa8:	10800037 	ldwio	r2,0(r2)
    3fac:	e0bffc15 	stw	r2,-16(fp)
	if (read_data_valid(data_reg))
    3fb0:	e13ffc17 	ldw	r4,-16(fp)
    3fb4:	0003ba80 	call	3ba8 <read_data_valid>
    3fb8:	10803fcc 	andi	r2,r2,255
    3fbc:	1005003a 	cmpeq	r2,r2,zero
    3fc0:	1000071e 	bne	r2,zero,3fe0 <alt_up_ps2_read_data_byte+0x5c>
	{
		*byte = read_data_byte(data_reg);
    3fc4:	e13ffc17 	ldw	r4,-16(fp)
    3fc8:	0003bdc0 	call	3bdc <read_data_byte>
    3fcc:	1007883a 	mov	r3,r2
    3fd0:	e0bffe17 	ldw	r2,-8(fp)
    3fd4:	10c00005 	stb	r3,0(r2)
		return 0;
    3fd8:	e03fff15 	stw	zero,-4(fp)
    3fdc:	00000206 	br	3fe8 <alt_up_ps2_read_data_byte+0x64>
	}
	return -1;
    3fe0:	00bfffc4 	movi	r2,-1
    3fe4:	e0bfff15 	stw	r2,-4(fp)
    3fe8:	e0bfff17 	ldw	r2,-4(fp)
}
    3fec:	e037883a 	mov	sp,fp
    3ff0:	dfc00117 	ldw	ra,4(sp)
    3ff4:	df000017 	ldw	fp,0(sp)
    3ff8:	dec00204 	addi	sp,sp,8
    3ffc:	f800283a 	ret

00004000 <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
    4000:	defffb04 	addi	sp,sp,-20
    4004:	dfc00415 	stw	ra,16(sp)
    4008:	df000315 	stw	fp,12(sp)
    400c:	df000304 	addi	fp,sp,12
    4010:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
    4014:	e03ffe0d 	sth	zero,-8(fp)
	unsigned int data_reg = 0;
    4018:	e03ffd15 	stw	zero,-12(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    401c:	e0bfff17 	ldw	r2,-4(fp)
    4020:	10800a17 	ldw	r2,40(r2)
    4024:	10800037 	ldwio	r2,0(r2)
    4028:	e0bffd15 	stw	r2,-12(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
    402c:	e13ffd17 	ldw	r4,-12(fp)
    4030:	0003b740 	call	3b74 <read_num_bytes_available>
    4034:	e0bffe0d 	sth	r2,-8(fp)
	} while (num > 0);
    4038:	e0bffe0b 	ldhu	r2,-8(fp)
    403c:	1004c03a 	cmpne	r2,r2,zero
    4040:	103ff61e 	bne	r2,zero,401c <alt_up_ps2_clear_fifo+0x1c>
}
    4044:	e037883a 	mov	sp,fp
    4048:	dfc00117 	ldw	ra,4(sp)
    404c:	df000017 	ldw	fp,0(sp)
    4050:	dec00204 	addi	sp,sp,8
    4054:	f800283a 	ret

00004058 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
    4058:	defff704 	addi	sp,sp,-36
    405c:	dfc00815 	stw	ra,32(sp)
    4060:	df000715 	stw	fp,28(sp)
    4064:	df000704 	addi	fp,sp,28
    4068:	e13ffc15 	stw	r4,-16(fp)
    406c:	e17ffd15 	stw	r5,-12(fp)
    4070:	e1bffe15 	stw	r6,-8(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    4074:	e0bffc17 	ldw	r2,-16(fp)
    4078:	10800017 	ldw	r2,0(r2)
    407c:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
    4080:	e03ffa15 	stw	zero,-24(fp)
	int count = 0;
    4084:	e03ff915 	stw	zero,-28(fp)
	while (count < len);
    4088:	e0fff917 	ldw	r3,-28(fp)
    408c:	e0bffe17 	ldw	r2,-8(fp)
    4090:	18bffd16 	blt	r3,r2,4088 <alt_up_ps2_read_fd+0x30>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, ptr++);
    4094:	e17ffd17 	ldw	r5,-12(fp)
    4098:	e0bffd17 	ldw	r2,-12(fp)
    409c:	10800044 	addi	r2,r2,1
    40a0:	e0bffd15 	stw	r2,-12(fp)
    40a4:	e13ffb17 	ldw	r4,-20(fp)
    40a8:	0003ed40 	call	3ed4 <alt_up_ps2_read_data_byte_timeout>
    40ac:	e0bffa15 	stw	r2,-24(fp)
		if (status!=0)
    40b0:	e0bffa17 	ldw	r2,-24(fp)
    40b4:	1005003a 	cmpeq	r2,r2,zero
    40b8:	1000031e 	bne	r2,zero,40c8 <alt_up_ps2_read_fd+0x70>
			return count;
    40bc:	e0bff917 	ldw	r2,-28(fp)
    40c0:	e0bfff15 	stw	r2,-4(fp)
    40c4:	00000506 	br	40dc <alt_up_ps2_read_fd+0x84>
		count++;
    40c8:	e0bff917 	ldw	r2,-28(fp)
    40cc:	10800044 	addi	r2,r2,1
    40d0:	e0bff915 	stw	r2,-28(fp)
	} 
	return count;
    40d4:	e0bff917 	ldw	r2,-28(fp)
    40d8:	e0bfff15 	stw	r2,-4(fp)
    40dc:	e0bfff17 	ldw	r2,-4(fp)
}
    40e0:	e037883a 	mov	sp,fp
    40e4:	dfc00117 	ldw	ra,4(sp)
    40e8:	df000017 	ldw	fp,0(sp)
    40ec:	dec00204 	addi	sp,sp,8
    40f0:	f800283a 	ret

000040f4 <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
    40f4:	defff704 	addi	sp,sp,-36
    40f8:	dfc00815 	stw	ra,32(sp)
    40fc:	df000715 	stw	fp,28(sp)
    4100:	df000704 	addi	fp,sp,28
    4104:	e13ffc15 	stw	r4,-16(fp)
    4108:	e17ffd15 	stw	r5,-12(fp)
    410c:	e1bffe15 	stw	r6,-8(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    4110:	e0bffc17 	ldw	r2,-16(fp)
    4114:	10800017 	ldw	r2,0(r2)
    4118:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
    411c:	e03ffa15 	stw	zero,-24(fp)
	int count = 0;
    4120:	e03ff915 	stw	zero,-28(fp)
	while (count < len)
    4124:	00001206 	br	4170 <alt_up_ps2_write_fd+0x7c>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
    4128:	e0bffd17 	ldw	r2,-12(fp)
    412c:	10800003 	ldbu	r2,0(r2)
    4130:	11403fcc 	andi	r5,r2,255
    4134:	e0bffd17 	ldw	r2,-12(fp)
    4138:	10800044 	addi	r2,r2,1
    413c:	e0bffd15 	stw	r2,-12(fp)
    4140:	e13ffb17 	ldw	r4,-20(fp)
    4144:	0003d800 	call	3d80 <alt_up_ps2_write_data_byte>
    4148:	e0bffa15 	stw	r2,-24(fp)
		if (status!=0)
    414c:	e0bffa17 	ldw	r2,-24(fp)
    4150:	1005003a 	cmpeq	r2,r2,zero
    4154:	1000031e 	bne	r2,zero,4164 <alt_up_ps2_write_fd+0x70>
			return count;
    4158:	e0bff917 	ldw	r2,-28(fp)
    415c:	e0bfff15 	stw	r2,-4(fp)
    4160:	00000806 	br	4184 <alt_up_ps2_write_fd+0x90>
		count++;
    4164:	e0bff917 	ldw	r2,-28(fp)
    4168:	10800044 	addi	r2,r2,1
    416c:	e0bff915 	stw	r2,-28(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
    4170:	e0fff917 	ldw	r3,-28(fp)
    4174:	e0bffe17 	ldw	r2,-8(fp)
    4178:	18bfeb16 	blt	r3,r2,4128 <alt_up_ps2_write_fd+0x34>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
    417c:	e0bff917 	ldw	r2,-28(fp)
    4180:	e0bfff15 	stw	r2,-4(fp)
    4184:	e0bfff17 	ldw	r2,-4(fp)
}
    4188:	e037883a 	mov	sp,fp
    418c:	dfc00117 	ldw	ra,4(sp)
    4190:	df000017 	ldw	fp,0(sp)
    4194:	dec00204 	addi	sp,sp,8
    4198:	f800283a 	ret

0000419c <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
    419c:	defffc04 	addi	sp,sp,-16
    41a0:	dfc00315 	stw	ra,12(sp)
    41a4:	df000215 	stw	fp,8(sp)
    41a8:	df000204 	addi	fp,sp,8
    41ac:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
    41b0:	e13fff17 	ldw	r4,-4(fp)
    41b4:	01400074 	movhi	r5,1
    41b8:	296e9c04 	addi	r5,r5,-17808
    41bc:	00062b80 	call	62b8 <alt_find_dev>
    41c0:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    41c4:	e0bffe17 	ldw	r2,-8(fp)
}
    41c8:	e037883a 	mov	sp,fp
    41cc:	dfc00117 	ldw	ra,4(sp)
    41d0:	df000017 	ldw	fp,0(sp)
    41d4:	dec00204 	addi	sp,sp,8
    41d8:	f800283a 	ret

000041dc <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
    41dc:	defffd04 	addi	sp,sp,-12
    41e0:	df000215 	stw	fp,8(sp)
    41e4:	df000204 	addi	fp,sp,8
    41e8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    41ec:	e0bfff17 	ldw	r2,-4(fp)
    41f0:	10800a17 	ldw	r2,40(r2)
    41f4:	10800104 	addi	r2,r2,4
    41f8:	10800037 	ldwio	r2,0(r2)
    41fc:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
    4200:	e0bffe17 	ldw	r2,-8(fp)
    4204:	10800054 	ori	r2,r2,1
    4208:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    420c:	e0bfff17 	ldw	r2,-4(fp)
    4210:	10800a17 	ldw	r2,40(r2)
    4214:	10800104 	addi	r2,r2,4
    4218:	e0fffe17 	ldw	r3,-8(fp)
    421c:	10c00035 	stwio	r3,0(r2)
}
    4220:	e037883a 	mov	sp,fp
    4224:	df000017 	ldw	fp,0(sp)
    4228:	dec00104 	addi	sp,sp,4
    422c:	f800283a 	ret

00004230 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
    4230:	defffd04 	addi	sp,sp,-12
    4234:	df000215 	stw	fp,8(sp)
    4238:	df000204 	addi	fp,sp,8
    423c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    4240:	e0bfff17 	ldw	r2,-4(fp)
    4244:	10800a17 	ldw	r2,40(r2)
    4248:	10800104 	addi	r2,r2,4
    424c:	10800037 	ldwio	r2,0(r2)
    4250:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
    4254:	e0fffe17 	ldw	r3,-8(fp)
    4258:	00bfff84 	movi	r2,-2
    425c:	1884703a 	and	r2,r3,r2
    4260:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    4264:	e0bfff17 	ldw	r2,-4(fp)
    4268:	10800a17 	ldw	r2,40(r2)
    426c:	10800104 	addi	r2,r2,4
    4270:	e0fffe17 	ldw	r3,-8(fp)
    4274:	10c00035 	stwio	r3,0(r2)
}
    4278:	e037883a 	mov	sp,fp
    427c:	df000017 	ldw	fp,0(sp)
    4280:	dec00104 	addi	sp,sp,4
    4284:	f800283a 	ret

00004288 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
    4288:	defffd04 	addi	sp,sp,-12
    428c:	df000215 	stw	fp,8(sp)
    4290:	df000204 	addi	fp,sp,8
    4294:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
    4298:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
    429c:	e0bfff17 	ldw	r2,-4(fp)
    42a0:	10800a17 	ldw	r2,40(r2)
    42a4:	10800084 	addi	r2,r2,2
    42a8:	1080002b 	ldhuio	r2,0(r2)
    42ac:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
    42b0:	e0bffe0b 	ldhu	r2,-8(fp)
}
    42b4:	e037883a 	mov	sp,fp
    42b8:	df000017 	ldw	fp,0(sp)
    42bc:	dec00104 	addi	sp,sp,4
    42c0:	f800283a 	ret

000042c4 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
    42c4:	defffd04 	addi	sp,sp,-12
    42c8:	df000215 	stw	fp,8(sp)
    42cc:	df000204 	addi	fp,sp,8
    42d0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    42d4:	e0bfff17 	ldw	r2,-4(fp)
    42d8:	10800a17 	ldw	r2,40(r2)
    42dc:	10800104 	addi	r2,r2,4
    42e0:	10800037 	ldwio	r2,0(r2)
    42e4:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
    42e8:	e0bffe17 	ldw	r2,-8(fp)
    42ec:	10bfffec 	andhi	r2,r2,65535
    42f0:	1004d43a 	srli	r2,r2,16
}
    42f4:	e037883a 	mov	sp,fp
    42f8:	df000017 	ldw	fp,0(sp)
    42fc:	dec00104 	addi	sp,sp,4
    4300:	f800283a 	ret

00004304 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
    4304:	defffc04 	addi	sp,sp,-16
    4308:	df000315 	stw	fp,12(sp)
    430c:	df000304 	addi	fp,sp,12
    4310:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
    4314:	e0bffe17 	ldw	r2,-8(fp)
    4318:	1080800c 	andi	r2,r2,512
    431c:	1004d27a 	srli	r2,r2,9
    4320:	e0bffd15 	stw	r2,-12(fp)
	return (parity_error ? -1 : 0);
    4324:	e0bffd17 	ldw	r2,-12(fp)
    4328:	1005003a 	cmpeq	r2,r2,zero
    432c:	1000031e 	bne	r2,zero,433c <alt_up_rs232_check_parity+0x38>
    4330:	00bfffc4 	movi	r2,-1
    4334:	e0bfff15 	stw	r2,-4(fp)
    4338:	00000106 	br	4340 <alt_up_rs232_check_parity+0x3c>
    433c:	e03fff15 	stw	zero,-4(fp)
    4340:	e0bfff17 	ldw	r2,-4(fp)
}
    4344:	e037883a 	mov	sp,fp
    4348:	df000017 	ldw	fp,0(sp)
    434c:	dec00104 	addi	sp,sp,4
    4350:	f800283a 	ret

00004354 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
    4354:	defffc04 	addi	sp,sp,-16
    4358:	df000315 	stw	fp,12(sp)
    435c:	df000304 	addi	fp,sp,12
    4360:	e13ffe15 	stw	r4,-8(fp)
    4364:	e17fff05 	stb	r5,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    4368:	e0bffe17 	ldw	r2,-8(fp)
    436c:	10800a17 	ldw	r2,40(r2)
    4370:	10800037 	ldwio	r2,0(r2)
    4374:	e0bffd15 	stw	r2,-12(fp)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
    4378:	e0bffe17 	ldw	r2,-8(fp)
    437c:	10800a17 	ldw	r2,40(r2)
    4380:	e0ffff03 	ldbu	r3,-4(fp)
    4384:	10c00035 	stwio	r3,0(r2)
	return 0;
    4388:	0005883a 	mov	r2,zero
}
    438c:	e037883a 	mov	sp,fp
    4390:	df000017 	ldw	fp,0(sp)
    4394:	dec00104 	addi	sp,sp,4
    4398:	f800283a 	ret

0000439c <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
    439c:	defffa04 	addi	sp,sp,-24
    43a0:	dfc00515 	stw	ra,20(sp)
    43a4:	df000415 	stw	fp,16(sp)
    43a8:	df000404 	addi	fp,sp,16
    43ac:	e13ffd15 	stw	r4,-12(fp)
    43b0:	e17ffe15 	stw	r5,-8(fp)
    43b4:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    43b8:	e0bffd17 	ldw	r2,-12(fp)
    43bc:	10800a17 	ldw	r2,40(r2)
    43c0:	10800037 	ldwio	r2,0(r2)
    43c4:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
    43c8:	e0bffc17 	ldw	r2,-16(fp)
    43cc:	1007883a 	mov	r3,r2
    43d0:	e0bffe17 	ldw	r2,-8(fp)
    43d4:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
    43d8:	e13ffc17 	ldw	r4,-16(fp)
    43dc:	00043040 	call	4304 <alt_up_rs232_check_parity>
    43e0:	1007883a 	mov	r3,r2
    43e4:	e0bfff17 	ldw	r2,-4(fp)
    43e8:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
    43ec:	e0bffc17 	ldw	r2,-16(fp)
    43f0:	10a0000c 	andi	r2,r2,32768
    43f4:	1004d3fa 	srli	r2,r2,15
    43f8:	10bfffc4 	addi	r2,r2,-1
}
    43fc:	e037883a 	mov	sp,fp
    4400:	dfc00117 	ldw	ra,4(sp)
    4404:	df000017 	ldw	fp,0(sp)
    4408:	dec00204 	addi	sp,sp,8
    440c:	f800283a 	ret

00004410 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
    4410:	defff804 	addi	sp,sp,-32
    4414:	dfc00715 	stw	ra,28(sp)
    4418:	df000615 	stw	fp,24(sp)
    441c:	df000604 	addi	fp,sp,24
    4420:	e13ffd15 	stw	r4,-12(fp)
    4424:	e17ffe15 	stw	r5,-8(fp)
    4428:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    442c:	e0bffd17 	ldw	r2,-12(fp)
    4430:	10800017 	ldw	r2,0(r2)
    4434:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
    4438:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
    443c:	00000c06 	br	4470 <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
    4440:	e17ffe17 	ldw	r5,-8(fp)
    4444:	e0bffe17 	ldw	r2,-8(fp)
    4448:	10800044 	addi	r2,r2,1
    444c:	e0bffe15 	stw	r2,-8(fp)
    4450:	e1bffc04 	addi	r6,fp,-16
    4454:	e13ffb17 	ldw	r4,-20(fp)
    4458:	000439c0 	call	439c <alt_up_rs232_read_data>
    445c:	1004c03a 	cmpne	r2,r2,zero
    4460:	1000091e 	bne	r2,zero,4488 <alt_up_rs232_read_fd+0x78>
			count++;
    4464:	e0bffa17 	ldw	r2,-24(fp)
    4468:	10800044 	addi	r2,r2,1
    446c:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    4470:	e0bfff17 	ldw	r2,-4(fp)
    4474:	10bfffc4 	addi	r2,r2,-1
    4478:	e0bfff15 	stw	r2,-4(fp)
    447c:	e0bfff17 	ldw	r2,-4(fp)
    4480:	10bfffd8 	cmpnei	r2,r2,-1
    4484:	103fee1e 	bne	r2,zero,4440 <alt_up_rs232_read_fd+0x30>
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
    4488:	e0bffa17 	ldw	r2,-24(fp)
}
    448c:	e037883a 	mov	sp,fp
    4490:	dfc00117 	ldw	ra,4(sp)
    4494:	df000017 	ldw	fp,0(sp)
    4498:	dec00204 	addi	sp,sp,8
    449c:	f800283a 	ret

000044a0 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
    44a0:	defff904 	addi	sp,sp,-28
    44a4:	dfc00615 	stw	ra,24(sp)
    44a8:	df000515 	stw	fp,20(sp)
    44ac:	df000504 	addi	fp,sp,20
    44b0:	e13ffd15 	stw	r4,-12(fp)
    44b4:	e17ffe15 	stw	r5,-8(fp)
    44b8:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    44bc:	e0bffd17 	ldw	r2,-12(fp)
    44c0:	10800017 	ldw	r2,0(r2)
    44c4:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
    44c8:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
    44cc:	00000d06 	br	4504 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
    44d0:	e0bffe17 	ldw	r2,-8(fp)
    44d4:	10800003 	ldbu	r2,0(r2)
    44d8:	11403fcc 	andi	r5,r2,255
    44dc:	e13ffc17 	ldw	r4,-16(fp)
    44e0:	00043540 	call	4354 <alt_up_rs232_write_data>
    44e4:	1004c03a 	cmpne	r2,r2,zero
    44e8:	10000c1e 	bne	r2,zero,451c <alt_up_rs232_write_fd+0x7c>
		{
			count++;
    44ec:	e0bffb17 	ldw	r2,-20(fp)
    44f0:	10800044 	addi	r2,r2,1
    44f4:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
    44f8:	e0bffe17 	ldw	r2,-8(fp)
    44fc:	10800044 	addi	r2,r2,1
    4500:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
    4504:	e0bfff17 	ldw	r2,-4(fp)
    4508:	10bfffc4 	addi	r2,r2,-1
    450c:	e0bfff15 	stw	r2,-4(fp)
    4510:	e0bfff17 	ldw	r2,-4(fp)
    4514:	10bfffd8 	cmpnei	r2,r2,-1
    4518:	103fed1e 	bne	r2,zero,44d0 <alt_up_rs232_write_fd+0x30>
			ptr++;
		}
		else
			break;
	}
	return count;
    451c:	e0bffb17 	ldw	r2,-20(fp)
}
    4520:	e037883a 	mov	sp,fp
    4524:	dfc00117 	ldw	ra,4(sp)
    4528:	df000017 	ldw	fp,0(sp)
    452c:	dec00204 	addi	sp,sp,8
    4530:	f800283a 	ret

00004534 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
    4534:	defffc04 	addi	sp,sp,-16
    4538:	dfc00315 	stw	ra,12(sp)
    453c:	df000215 	stw	fp,8(sp)
    4540:	df000204 	addi	fp,sp,8
    4544:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
    4548:	e13fff17 	ldw	r4,-4(fp)
    454c:	01400074 	movhi	r5,1
    4550:	296e9c04 	addi	r5,r5,-17808
    4554:	00062b80 	call	62b8 <alt_find_dev>
    4558:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    455c:	e0bffe17 	ldw	r2,-8(fp)
}
    4560:	e037883a 	mov	sp,fp
    4564:	dfc00117 	ldw	ra,4(sp)
    4568:	df000017 	ldw	fp,0(sp)
    456c:	dec00204 	addi	sp,sp,8
    4570:	f800283a 	ret

00004574 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
    4574:	defffc04 	addi	sp,sp,-16
    4578:	dfc00315 	stw	ra,12(sp)
    457c:	df000215 	stw	fp,8(sp)
    4580:	df000204 	addi	fp,sp,8
    4584:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
    4588:	e0bfff17 	ldw	r2,-4(fp)
    458c:	10800217 	ldw	r2,8(r2)
    4590:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
    4594:	00000c06 	br	45c8 <alt_up_char_buffer_init+0x54>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
    4598:	e13ffe17 	ldw	r4,-8(fp)
    459c:	01400074 	movhi	r5,1
    45a0:	29671d04 	addi	r5,r5,-25484
    45a4:	00070100 	call	7010 <strcmp>
    45a8:	1004c03a 	cmpne	r2,r2,zero
    45ac:	1000031e 	bne	r2,zero,45bc <alt_up_char_buffer_init+0x48>
			(*name) = '\0';
    45b0:	e0bffe17 	ldw	r2,-8(fp)
    45b4:	10000005 	stb	zero,0(r2)
			break;
    45b8:	00000a06 	br	45e4 <alt_up_char_buffer_init+0x70>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
    45bc:	e0bffe17 	ldw	r2,-8(fp)
    45c0:	10800044 	addi	r2,r2,1
    45c4:	e0bffe15 	stw	r2,-8(fp)
    45c8:	e0bffe17 	ldw	r2,-8(fp)
    45cc:	10800003 	ldbu	r2,0(r2)
    45d0:	10803fcc 	andi	r2,r2,255
    45d4:	1080201c 	xori	r2,r2,128
    45d8:	10bfe004 	addi	r2,r2,-128
    45dc:	1004c03a 	cmpne	r2,r2,zero
    45e0:	103fed1e 	bne	r2,zero,4598 <alt_up_char_buffer_init+0x24>
			break;
		}
	}
	
	return;
}
    45e4:	e037883a 	mov	sp,fp
    45e8:	dfc00117 	ldw	ra,4(sp)
    45ec:	df000017 	ldw	fp,0(sp)
    45f0:	dec00204 	addi	sp,sp,8
    45f4:	f800283a 	ret

000045f8 <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
    45f8:	defffc04 	addi	sp,sp,-16
    45fc:	dfc00315 	stw	ra,12(sp)
    4600:	df000215 	stw	fp,8(sp)
    4604:	df000204 	addi	fp,sp,8
    4608:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
    460c:	e13fff17 	ldw	r4,-4(fp)
    4610:	01400074 	movhi	r5,1
    4614:	296e9c04 	addi	r5,r5,-17808
    4618:	00062b80 	call	62b8 <alt_find_dev>
    461c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    4620:	e0bffe17 	ldw	r2,-8(fp)
}
    4624:	e037883a 	mov	sp,fp
    4628:	dfc00117 	ldw	ra,4(sp)
    462c:	df000017 	ldw	fp,0(sp)
    4630:	dec00204 	addi	sp,sp,8
    4634:	f800283a 	ret

00004638 <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
    4638:	defff904 	addi	sp,sp,-28
    463c:	df000615 	stw	fp,24(sp)
    4640:	df000604 	addi	fp,sp,24
    4644:	e13ffb15 	stw	r4,-20(fp)
    4648:	e1bffd15 	stw	r6,-12(fp)
    464c:	e1fffe15 	stw	r7,-8(fp)
    4650:	e17ffc05 	stb	r5,-16(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    4654:	e0bffb17 	ldw	r2,-20(fp)
    4658:	10c00c17 	ldw	r3,48(r2)
    465c:	e0bffd17 	ldw	r2,-12(fp)
    4660:	10c0042e 	bgeu	r2,r3,4674 <alt_up_char_buffer_draw+0x3c>
    4664:	e0bffb17 	ldw	r2,-20(fp)
    4668:	10c00d17 	ldw	r3,52(r2)
    466c:	e0bffe17 	ldw	r2,-8(fp)
    4670:	10c00336 	bltu	r2,r3,4680 <alt_up_char_buffer_draw+0x48>
		return -1;
    4674:	00bfffc4 	movi	r2,-1
    4678:	e0bfff15 	stw	r2,-4(fp)
    467c:	00001d06 	br	46f4 <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
    4680:	e03ffa15 	stw	zero,-24(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
    4684:	e0bffb17 	ldw	r2,-20(fp)
    4688:	10c00f17 	ldw	r3,60(r2)
    468c:	e0bffd17 	ldw	r2,-12(fp)
    4690:	1886703a 	and	r3,r3,r2
    4694:	e0bffb17 	ldw	r2,-20(fp)
    4698:	10800e17 	ldw	r2,56(r2)
    469c:	1886983a 	sll	r3,r3,r2
    46a0:	e0bffa17 	ldw	r2,-24(fp)
    46a4:	10c4b03a 	or	r2,r2,r3
    46a8:	e0bffa15 	stw	r2,-24(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
    46ac:	e0bffb17 	ldw	r2,-20(fp)
    46b0:	10c01117 	ldw	r3,68(r2)
    46b4:	e0bffe17 	ldw	r2,-8(fp)
    46b8:	1886703a 	and	r3,r3,r2
    46bc:	e0bffb17 	ldw	r2,-20(fp)
    46c0:	10801017 	ldw	r2,64(r2)
    46c4:	1886983a 	sll	r3,r3,r2
    46c8:	e0bffa17 	ldw	r2,-24(fp)
    46cc:	10c4b03a 	or	r2,r2,r3
    46d0:	e0bffa15 	stw	r2,-24(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
    46d4:	e0bffb17 	ldw	r2,-20(fp)
    46d8:	10800b17 	ldw	r2,44(r2)
    46dc:	1007883a 	mov	r3,r2
    46e0:	e0bffa17 	ldw	r2,-24(fp)
    46e4:	1885883a 	add	r2,r3,r2
    46e8:	e0fffc03 	ldbu	r3,-16(fp)
    46ec:	10c00025 	stbio	r3,0(r2)

	return 0;
    46f0:	e03fff15 	stw	zero,-4(fp)
    46f4:	e0bfff17 	ldw	r2,-4(fp)
}
    46f8:	e037883a 	mov	sp,fp
    46fc:	df000017 	ldw	fp,0(sp)
    4700:	dec00104 	addi	sp,sp,4
    4704:	f800283a 	ret

00004708 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
    4708:	defff904 	addi	sp,sp,-28
    470c:	df000615 	stw	fp,24(sp)
    4710:	df000604 	addi	fp,sp,24
    4714:	e13ffb15 	stw	r4,-20(fp)
    4718:	e17ffc15 	stw	r5,-16(fp)
    471c:	e1bffd15 	stw	r6,-12(fp)
    4720:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    4724:	e0bffb17 	ldw	r2,-20(fp)
    4728:	10c00c17 	ldw	r3,48(r2)
    472c:	e0bffd17 	ldw	r2,-12(fp)
    4730:	10c0042e 	bgeu	r2,r3,4744 <alt_up_char_buffer_string+0x3c>
    4734:	e0bffb17 	ldw	r2,-20(fp)
    4738:	10c00d17 	ldw	r3,52(r2)
    473c:	e0bffe17 	ldw	r2,-8(fp)
    4740:	10c00336 	bltu	r2,r3,4750 <alt_up_char_buffer_string+0x48>
		return -1;
    4744:	00bfffc4 	movi	r2,-1
    4748:	e0bfff15 	stw	r2,-4(fp)
    474c:	00002e06 	br	4808 <alt_up_char_buffer_string+0x100>
	
	unsigned int offset = 0;
    4750:	e03ffa15 	stw	zero,-24(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
    4754:	e0bffb17 	ldw	r2,-20(fp)
    4758:	10801017 	ldw	r2,64(r2)
    475c:	1007883a 	mov	r3,r2
    4760:	e0bffe17 	ldw	r2,-8(fp)
    4764:	10c6983a 	sll	r3,r2,r3
    4768:	e0bffd17 	ldw	r2,-12(fp)
    476c:	1885883a 	add	r2,r3,r2
    4770:	e0bffa15 	stw	r2,-24(fp)

	while ( *ptr )
    4774:	00001c06 	br	47e8 <alt_up_char_buffer_string+0xe0>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
    4778:	e0bffb17 	ldw	r2,-20(fp)
    477c:	10800b17 	ldw	r2,44(r2)
    4780:	1007883a 	mov	r3,r2
    4784:	e0bffa17 	ldw	r2,-24(fp)
    4788:	1889883a 	add	r4,r3,r2
    478c:	e0bffc17 	ldw	r2,-16(fp)
    4790:	10800003 	ldbu	r2,0(r2)
    4794:	10c03fcc 	andi	r3,r2,255
    4798:	18c0201c 	xori	r3,r3,128
    479c:	18ffe004 	addi	r3,r3,-128
    47a0:	2005883a 	mov	r2,r4
    47a4:	10c00025 	stbio	r3,0(r2)
		++ptr;
    47a8:	e0bffc17 	ldw	r2,-16(fp)
    47ac:	10800044 	addi	r2,r2,1
    47b0:	e0bffc15 	stw	r2,-16(fp)
		if (++x >= char_buffer->x_resolution)
    47b4:	e0bffd17 	ldw	r2,-12(fp)
    47b8:	10800044 	addi	r2,r2,1
    47bc:	e0bffd15 	stw	r2,-12(fp)
    47c0:	e0bffb17 	ldw	r2,-20(fp)
    47c4:	10c00c17 	ldw	r3,48(r2)
    47c8:	e0bffd17 	ldw	r2,-12(fp)
    47cc:	10c00336 	bltu	r2,r3,47dc <alt_up_char_buffer_string+0xd4>
			return -1;
    47d0:	00bfffc4 	movi	r2,-1
    47d4:	e0bfff15 	stw	r2,-4(fp)
    47d8:	00000b06 	br	4808 <alt_up_char_buffer_string+0x100>
		++offset;
    47dc:	e0bffa17 	ldw	r2,-24(fp)
    47e0:	10800044 	addi	r2,r2,1
    47e4:	e0bffa15 	stw	r2,-24(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
    47e8:	e0bffc17 	ldw	r2,-16(fp)
    47ec:	10800003 	ldbu	r2,0(r2)
    47f0:	10803fcc 	andi	r2,r2,255
    47f4:	1080201c 	xori	r2,r2,128
    47f8:	10bfe004 	addi	r2,r2,-128
    47fc:	1004c03a 	cmpne	r2,r2,zero
    4800:	103fdd1e 	bne	r2,zero,4778 <alt_up_char_buffer_string+0x70>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
    4804:	e03fff15 	stw	zero,-4(fp)
    4808:	e0bfff17 	ldw	r2,-4(fp)
}
    480c:	e037883a 	mov	sp,fp
    4810:	df000017 	ldw	fp,0(sp)
    4814:	dec00104 	addi	sp,sp,4
    4818:	f800283a 	ret

0000481c <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
    481c:	defffe04 	addi	sp,sp,-8
    4820:	df000115 	stw	fp,4(sp)
    4824:	df000104 	addi	fp,sp,4
    4828:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
    482c:	e0bfff17 	ldw	r2,-4(fp)
    4830:	10800a17 	ldw	r2,40(r2)
    4834:	10800084 	addi	r2,r2,2
    4838:	1007883a 	mov	r3,r2
    483c:	00800044 	movi	r2,1
    4840:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
    4844:	e0bfff17 	ldw	r2,-4(fp)
    4848:	10800a17 	ldw	r2,40(r2)
    484c:	10800084 	addi	r2,r2,2
    4850:	10800023 	ldbuio	r2,0(r2)
    4854:	1080004c 	andi	r2,r2,1
    4858:	10803fcc 	andi	r2,r2,255
    485c:	1004c03a 	cmpne	r2,r2,zero
    4860:	103ff81e 	bne	r2,zero,4844 <alt_up_char_buffer_clear+0x28>
	return 0;
    4864:	0005883a 	mov	r2,zero
}
    4868:	e037883a 	mov	sp,fp
    486c:	df000017 	ldw	fp,0(sp)
    4870:	dec00104 	addi	sp,sp,4
    4874:	f800283a 	ret

00004878 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
    4878:	defffc04 	addi	sp,sp,-16
    487c:	dfc00315 	stw	ra,12(sp)
    4880:	df000215 	stw	fp,8(sp)
    4884:	df000204 	addi	fp,sp,8
    4888:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
    488c:	e13fff17 	ldw	r4,-4(fp)
    4890:	01400074 	movhi	r5,1
    4894:	296e9c04 	addi	r5,r5,-17808
    4898:	00062b80 	call	62b8 <alt_find_dev>
    489c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    48a0:	e0bffe17 	ldw	r2,-8(fp)
}
    48a4:	e037883a 	mov	sp,fp
    48a8:	dfc00117 	ldw	ra,4(sp)
    48ac:	df000017 	ldw	fp,0(sp)
    48b0:	dec00204 	addi	sp,sp,8
    48b4:	f800283a 	ret

000048b8 <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
    48b8:	defff904 	addi	sp,sp,-28
    48bc:	df000615 	stw	fp,24(sp)
    48c0:	df000604 	addi	fp,sp,24
    48c4:	e13ffb15 	stw	r4,-20(fp)
    48c8:	e17ffc15 	stw	r5,-16(fp)
    48cc:	e1bffd15 	stw	r6,-12(fp)
    48d0:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
    48d4:	e0bffb17 	ldw	r2,-20(fp)
    48d8:	10c00f17 	ldw	r3,60(r2)
    48dc:	e0bffd17 	ldw	r2,-12(fp)
    48e0:	10c0042e 	bgeu	r2,r3,48f4 <alt_up_pixel_buffer_dma_draw+0x3c>
    48e4:	e0bffb17 	ldw	r2,-20(fp)
    48e8:	10c01017 	ldw	r3,64(r2)
    48ec:	e0bffe17 	ldw	r2,-8(fp)
    48f0:	10c00336 	bltu	r2,r3,4900 <alt_up_pixel_buffer_dma_draw+0x48>
		return -1;
    48f4:	00bfffc4 	movi	r2,-1
    48f8:	e0bfff15 	stw	r2,-4(fp)
    48fc:	00005106 	br	4a44 <alt_up_pixel_buffer_dma_draw+0x18c>

	unsigned int addr = 0;
    4900:	e03ffa15 	stw	zero,-24(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    4904:	e0bffb17 	ldw	r2,-20(fp)
    4908:	10800d17 	ldw	r2,52(r2)
    490c:	1004c03a 	cmpne	r2,r2,zero
    4910:	1000151e 	bne	r2,zero,4968 <alt_up_pixel_buffer_dma_draw+0xb0>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
    4914:	e0bffb17 	ldw	r2,-20(fp)
    4918:	10c01217 	ldw	r3,72(r2)
    491c:	e0bffd17 	ldw	r2,-12(fp)
    4920:	1886703a 	and	r3,r3,r2
    4924:	e0bffb17 	ldw	r2,-20(fp)
    4928:	10801117 	ldw	r2,68(r2)
    492c:	1886983a 	sll	r3,r3,r2
    4930:	e0bffa17 	ldw	r2,-24(fp)
    4934:	10c4b03a 	or	r2,r2,r3
    4938:	e0bffa15 	stw	r2,-24(fp)
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
    493c:	e0bffb17 	ldw	r2,-20(fp)
    4940:	10c01417 	ldw	r3,80(r2)
    4944:	e0bffe17 	ldw	r2,-8(fp)
    4948:	1886703a 	and	r3,r3,r2
    494c:	e0bffb17 	ldw	r2,-20(fp)
    4950:	10801317 	ldw	r2,76(r2)
    4954:	1886983a 	sll	r3,r3,r2
    4958:	e0bffa17 	ldw	r2,-24(fp)
    495c:	10c4b03a 	or	r2,r2,r3
    4960:	e0bffa15 	stw	r2,-24(fp)
    4964:	00001706 	br	49c4 <alt_up_pixel_buffer_dma_draw+0x10c>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
    4968:	e0bffb17 	ldw	r2,-20(fp)
    496c:	10c01217 	ldw	r3,72(r2)
    4970:	e0bffd17 	ldw	r2,-12(fp)
    4974:	1886703a 	and	r3,r3,r2
    4978:	e0bffb17 	ldw	r2,-20(fp)
    497c:	10801117 	ldw	r2,68(r2)
    4980:	1886983a 	sll	r3,r3,r2
    4984:	e0bffa17 	ldw	r2,-24(fp)
    4988:	10c5883a 	add	r2,r2,r3
    498c:	e0bffa15 	stw	r2,-24(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
    4990:	e0bffb17 	ldw	r2,-20(fp)
    4994:	10c01417 	ldw	r3,80(r2)
    4998:	e0bffe17 	ldw	r2,-8(fp)
    499c:	1886703a 	and	r3,r3,r2
    49a0:	e0bffb17 	ldw	r2,-20(fp)
    49a4:	10800f17 	ldw	r2,60(r2)
    49a8:	1887383a 	mul	r3,r3,r2
    49ac:	e0bffb17 	ldw	r2,-20(fp)
    49b0:	10801117 	ldw	r2,68(r2)
    49b4:	1886983a 	sll	r3,r3,r2
    49b8:	e0bffa17 	ldw	r2,-24(fp)
    49bc:	10c5883a 	add	r2,r2,r3
    49c0:	e0bffa15 	stw	r2,-24(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    49c4:	e0bffb17 	ldw	r2,-20(fp)
    49c8:	10800e17 	ldw	r2,56(r2)
    49cc:	10800058 	cmpnei	r2,r2,1
    49d0:	1000081e 	bne	r2,zero,49f4 <alt_up_pixel_buffer_dma_draw+0x13c>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    49d4:	e0bffb17 	ldw	r2,-20(fp)
    49d8:	10800c17 	ldw	r2,48(r2)
    49dc:	1007883a 	mov	r3,r2
    49e0:	e0bffa17 	ldw	r2,-24(fp)
    49e4:	1885883a 	add	r2,r3,r2
    49e8:	e0fffc17 	ldw	r3,-16(fp)
    49ec:	10c00025 	stbio	r3,0(r2)
    49f0:	00001306 	br	4a40 <alt_up_pixel_buffer_dma_draw+0x188>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    49f4:	e0bffb17 	ldw	r2,-20(fp)
    49f8:	10800e17 	ldw	r2,56(r2)
    49fc:	10800098 	cmpnei	r2,r2,2
    4a00:	1000081e 	bne	r2,zero,4a24 <alt_up_pixel_buffer_dma_draw+0x16c>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    4a04:	e0bffb17 	ldw	r2,-20(fp)
    4a08:	10800c17 	ldw	r2,48(r2)
    4a0c:	1007883a 	mov	r3,r2
    4a10:	e0bffa17 	ldw	r2,-24(fp)
    4a14:	1885883a 	add	r2,r3,r2
    4a18:	e0fffc17 	ldw	r3,-16(fp)
    4a1c:	10c0002d 	sthio	r3,0(r2)
    4a20:	00000706 	br	4a40 <alt_up_pixel_buffer_dma_draw+0x188>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    4a24:	e0bffb17 	ldw	r2,-20(fp)
    4a28:	10800c17 	ldw	r2,48(r2)
    4a2c:	1007883a 	mov	r3,r2
    4a30:	e0bffa17 	ldw	r2,-24(fp)
    4a34:	1885883a 	add	r2,r3,r2
    4a38:	e0fffc17 	ldw	r3,-16(fp)
    4a3c:	10c00035 	stwio	r3,0(r2)
	}

	return 0;
    4a40:	e03fff15 	stw	zero,-4(fp)
    4a44:	e0bfff17 	ldw	r2,-4(fp)
}
    4a48:	e037883a 	mov	sp,fp
    4a4c:	df000017 	ldw	fp,0(sp)
    4a50:	dec00104 	addi	sp,sp,4
    4a54:	f800283a 	ret

00004a58 <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
    4a58:	defffd04 	addi	sp,sp,-12
    4a5c:	df000215 	stw	fp,8(sp)
    4a60:	df000204 	addi	fp,sp,8
    4a64:	e13ffe15 	stw	r4,-8(fp)
    4a68:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
    4a6c:	e0bffe17 	ldw	r2,-8(fp)
    4a70:	10800a17 	ldw	r2,40(r2)
    4a74:	10800104 	addi	r2,r2,4
    4a78:	e0ffff17 	ldw	r3,-4(fp)
    4a7c:	10c00035 	stwio	r3,0(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
    4a80:	e0bffe17 	ldw	r2,-8(fp)
    4a84:	10800a17 	ldw	r2,40(r2)
    4a88:	10800104 	addi	r2,r2,4
    4a8c:	10800037 	ldwio	r2,0(r2)
    4a90:	1007883a 	mov	r3,r2
    4a94:	e0bffe17 	ldw	r2,-8(fp)
    4a98:	10c00c15 	stw	r3,48(r2)
	return 0;
    4a9c:	0005883a 	mov	r2,zero
}
    4aa0:	e037883a 	mov	sp,fp
    4aa4:	df000017 	ldw	fp,0(sp)
    4aa8:	dec00104 	addi	sp,sp,4
    4aac:	f800283a 	ret

00004ab0 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
    4ab0:	defffe04 	addi	sp,sp,-8
    4ab4:	df000115 	stw	fp,4(sp)
    4ab8:	df000104 	addi	fp,sp,4
    4abc:	e13fff15 	stw	r4,-4(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
    4ac0:	e0bfff17 	ldw	r2,-4(fp)
    4ac4:	11000c17 	ldw	r4,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
    4ac8:	e0bfff17 	ldw	r2,-4(fp)
    4acc:	10800a17 	ldw	r2,40(r2)
    4ad0:	1007883a 	mov	r3,r2
    4ad4:	00800044 	movi	r2,1
    4ad8:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
    4adc:	e0bfff17 	ldw	r2,-4(fp)
    4ae0:	10c00b17 	ldw	r3,44(r2)
    4ae4:	e0bfff17 	ldw	r2,-4(fp)
    4ae8:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
    4aec:	e0bfff17 	ldw	r2,-4(fp)
    4af0:	11000b15 	stw	r4,44(r2)
	return 0;
    4af4:	0005883a 	mov	r2,zero
}
    4af8:	e037883a 	mov	sp,fp
    4afc:	df000017 	ldw	fp,0(sp)
    4b00:	dec00104 	addi	sp,sp,4
    4b04:	f800283a 	ret

00004b08 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
    4b08:	defffe04 	addi	sp,sp,-8
    4b0c:	df000115 	stw	fp,4(sp)
    4b10:	df000104 	addi	fp,sp,4
    4b14:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
    4b18:	e0bfff17 	ldw	r2,-4(fp)
    4b1c:	10800a17 	ldw	r2,40(r2)
    4b20:	10800304 	addi	r2,r2,12
    4b24:	10800037 	ldwio	r2,0(r2)
    4b28:	1080004c 	andi	r2,r2,1
}
    4b2c:	e037883a 	mov	sp,fp
    4b30:	df000017 	ldw	fp,0(sp)
    4b34:	dec00104 	addi	sp,sp,4
    4b38:	f800283a 	ret

00004b3c <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
    4b3c:	defff604 	addi	sp,sp,-40
    4b40:	df000915 	stw	fp,36(sp)
    4b44:	df000904 	addi	fp,sp,36
    4b48:	e13ff715 	stw	r4,-36(fp)
    4b4c:	e17ff815 	stw	r5,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    4b50:	e0bff817 	ldw	r2,-32(fp)
    4b54:	10800058 	cmpnei	r2,r2,1
    4b58:	1000041e 	bne	r2,zero,4b6c <alt_up_pixel_buffer_dma_clear_screen+0x30>
		addr = pixel_buffer->back_buffer_start_address;
    4b5c:	e0bff717 	ldw	r2,-36(fp)
    4b60:	10800c17 	ldw	r2,48(r2)
    4b64:	e0bfff15 	stw	r2,-4(fp)
    4b68:	00000306 	br	4b78 <alt_up_pixel_buffer_dma_clear_screen+0x3c>
	else
		addr = pixel_buffer->buffer_start_address;
    4b6c:	e0bff717 	ldw	r2,-36(fp)
    4b70:	10800b17 	ldw	r2,44(r2)
    4b74:	e0bfff15 	stw	r2,-4(fp)
	limit_x = pixel_buffer->x_resolution;
    4b78:	e0bff717 	ldw	r2,-36(fp)
    4b7c:	10800f17 	ldw	r2,60(r2)
    4b80:	e0bffe15 	stw	r2,-8(fp)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    4b84:	e0bff717 	ldw	r2,-36(fp)
    4b88:	10800e17 	ldw	r2,56(r2)
    4b8c:	10800098 	cmpnei	r2,r2,2
    4b90:	1000051e 	bne	r2,zero,4ba8 <alt_up_pixel_buffer_dma_clear_screen+0x6c>
		limit_x = limit_x << 1;
    4b94:	e0fffe17 	ldw	r3,-8(fp)
    4b98:	e0fffe17 	ldw	r3,-8(fp)
    4b9c:	18c5883a 	add	r2,r3,r3
    4ba0:	e0bffe15 	stw	r2,-8(fp)
    4ba4:	00000506 	br	4bbc <alt_up_pixel_buffer_dma_clear_screen+0x80>
	} else {
		limit_x = limit_x << 2;
    4ba8:	e13ffe17 	ldw	r4,-8(fp)
    4bac:	e13ffe17 	ldw	r4,-8(fp)
    4bb0:	2105883a 	add	r2,r4,r4
    4bb4:	1085883a 	add	r2,r2,r2
    4bb8:	e0bffe15 	stw	r2,-8(fp)
	}	
	limit_y = pixel_buffer->y_resolution;
    4bbc:	e0bff717 	ldw	r2,-36(fp)
    4bc0:	10801017 	ldw	r2,64(r2)
    4bc4:	e0bffd15 	stw	r2,-12(fp)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    4bc8:	e0bff717 	ldw	r2,-36(fp)
    4bcc:	10800d17 	ldw	r2,52(r2)
    4bd0:	1004c03a 	cmpne	r2,r2,zero
    4bd4:	10001e1e 	bne	r2,zero,4c50 <alt_up_pixel_buffer_dma_clear_screen+0x114>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
    4bd8:	e0bff717 	ldw	r2,-36(fp)
    4bdc:	10801317 	ldw	r2,76(r2)
    4be0:	e0bffa15 	stw	r2,-24(fp)

		for (y = 0; y < limit_y; y++)
    4be4:	e03ffb15 	stw	zero,-20(fp)
    4be8:	00001506 	br	4c40 <alt_up_pixel_buffer_dma_clear_screen+0x104>
		{
			for (x = 0; x < limit_x; x = x + 4)
    4bec:	e03ffc15 	stw	zero,-16(fp)
    4bf0:	00000706 	br	4c10 <alt_up_pixel_buffer_dma_clear_screen+0xd4>
			{
				IOWR_32DIRECT(addr, x, 0);
    4bf4:	e0ffff17 	ldw	r3,-4(fp)
    4bf8:	e0bffc17 	ldw	r2,-16(fp)
    4bfc:	1885883a 	add	r2,r3,r2
    4c00:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
    4c04:	e0bffc17 	ldw	r2,-16(fp)
    4c08:	10800104 	addi	r2,r2,4
    4c0c:	e0bffc15 	stw	r2,-16(fp)
    4c10:	e0fffc17 	ldw	r3,-16(fp)
    4c14:	e13ffe17 	ldw	r4,-8(fp)
    4c18:	193ff636 	bltu	r3,r4,4bf4 <alt_up_pixel_buffer_dma_clear_screen+0xb8>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
    4c1c:	e0fffa17 	ldw	r3,-24(fp)
    4c20:	00800044 	movi	r2,1
    4c24:	10c4983a 	sll	r2,r2,r3
    4c28:	e0ffff17 	ldw	r3,-4(fp)
    4c2c:	1887883a 	add	r3,r3,r2
    4c30:	e0ffff15 	stw	r3,-4(fp)
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
    4c34:	e13ffb17 	ldw	r4,-20(fp)
    4c38:	21000044 	addi	r4,r4,1
    4c3c:	e13ffb15 	stw	r4,-20(fp)
    4c40:	e0bffb17 	ldw	r2,-20(fp)
    4c44:	e0fffd17 	ldw	r3,-12(fp)
    4c48:	10ffe836 	bltu	r2,r3,4bec <alt_up_pixel_buffer_dma_clear_screen+0xb0>
    4c4c:	00001006 	br	4c90 <alt_up_pixel_buffer_dma_clear_screen+0x154>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
    4c50:	e13ffd17 	ldw	r4,-12(fp)
    4c54:	e0bffe17 	ldw	r2,-8(fp)
    4c58:	2089383a 	mul	r4,r4,r2
    4c5c:	e13ffd15 	stw	r4,-12(fp)

		for (x = 0; x < limit_y; x = x + 4)
    4c60:	e03ff915 	stw	zero,-28(fp)
    4c64:	00000706 	br	4c84 <alt_up_pixel_buffer_dma_clear_screen+0x148>
		{
			IOWR_32DIRECT(addr, x, 0);
    4c68:	e0ffff17 	ldw	r3,-4(fp)
    4c6c:	e0bff917 	ldw	r2,-28(fp)
    4c70:	1885883a 	add	r2,r3,r2
    4c74:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
    4c78:	e0fff917 	ldw	r3,-28(fp)
    4c7c:	18c00104 	addi	r3,r3,4
    4c80:	e0fff915 	stw	r3,-28(fp)
    4c84:	e0bff917 	ldw	r2,-28(fp)
    4c88:	e13ffd17 	ldw	r4,-12(fp)
    4c8c:	113ff636 	bltu	r2,r4,4c68 <alt_up_pixel_buffer_dma_clear_screen+0x12c>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
    4c90:	e037883a 	mov	sp,fp
    4c94:	df000017 	ldw	fp,0(sp)
    4c98:	dec00104 	addi	sp,sp,4
    4c9c:	f800283a 	ret

00004ca0 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
    4ca0:	deffed04 	addi	sp,sp,-76
    4ca4:	df001215 	stw	fp,72(sp)
    4ca8:	df001204 	addi	fp,sp,72
    4cac:	e13fee15 	stw	r4,-72(fp)
    4cb0:	e17fef15 	stw	r5,-68(fp)
    4cb4:	e1bff015 	stw	r6,-64(fp)
    4cb8:	e1fff115 	stw	r7,-60(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
    4cbc:	e0bfee17 	ldw	r2,-72(fp)
    4cc0:	10800f17 	ldw	r2,60(r2)
    4cc4:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
    4cc8:	e0bfee17 	ldw	r2,-72(fp)
    4ccc:	10801017 	ldw	r2,64(r2)
    4cd0:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
    4cd4:	e0bfef17 	ldw	r2,-68(fp)
    4cd8:	e0bffb15 	stw	r2,-20(fp)
	register unsigned int r_x = x1;
    4cdc:	e0fff117 	ldw	r3,-60(fp)
    4ce0:	e0fffa15 	stw	r3,-24(fp)
	register unsigned int t_y = y0;
    4ce4:	e13ff017 	ldw	r4,-64(fp)
    4ce8:	e13ff915 	stw	r4,-28(fp)
	register unsigned int b_y = y1;
    4cec:	e0800117 	ldw	r2,4(fp)
    4cf0:	e0bff815 	stw	r2,-32(fp)
	register unsigned int local_color = color;
    4cf4:	e0c00217 	ldw	r3,8(fp)
    4cf8:	e0fff715 	stw	r3,-36(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
    4cfc:	e13ffa17 	ldw	r4,-24(fp)
    4d00:	e0bffb17 	ldw	r2,-20(fp)
    4d04:	2080062e 	bgeu	r4,r2,4d20 <alt_up_pixel_buffer_dma_draw_box+0x80>
	{
		temp = l_x;
    4d08:	e0fffb17 	ldw	r3,-20(fp)
    4d0c:	e0fffc15 	stw	r3,-16(fp)
		l_x = r_x;
    4d10:	e13ffa17 	ldw	r4,-24(fp)
    4d14:	e13ffb15 	stw	r4,-20(fp)
		r_x = temp;
    4d18:	e0bffc17 	ldw	r2,-16(fp)
    4d1c:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y > b_y)
    4d20:	e0fff817 	ldw	r3,-32(fp)
    4d24:	e13ff917 	ldw	r4,-28(fp)
    4d28:	1900062e 	bgeu	r3,r4,4d44 <alt_up_pixel_buffer_dma_draw_box+0xa4>
	{
		temp = t_y;
    4d2c:	e0bff917 	ldw	r2,-28(fp)
    4d30:	e0bffc15 	stw	r2,-16(fp)
		t_y = b_y;
    4d34:	e0fff817 	ldw	r3,-32(fp)
    4d38:	e0fff915 	stw	r3,-28(fp)
		b_y = temp;
    4d3c:	e13ffc17 	ldw	r4,-16(fp)
    4d40:	e13ff815 	stw	r4,-32(fp)
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
    4d44:	e0bffb17 	ldw	r2,-20(fp)
    4d48:	e0fffe17 	ldw	r3,-8(fp)
    4d4c:	10c10d2e 	bgeu	r2,r3,5184 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
    4d50:	e13ff917 	ldw	r4,-28(fp)
    4d54:	e0bffd17 	ldw	r2,-12(fp)
    4d58:	20800136 	bltu	r4,r2,4d60 <alt_up_pixel_buffer_dma_draw_box+0xc0>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
    4d5c:	00010906 	br	5184 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
    4d60:	e0fffa17 	ldw	r3,-24(fp)
    4d64:	e13ffe17 	ldw	r4,-8(fp)
    4d68:	19000336 	bltu	r3,r4,4d78 <alt_up_pixel_buffer_dma_draw_box+0xd8>
	{
		r_x = limit_x - 1;
    4d6c:	e0bffe17 	ldw	r2,-8(fp)
    4d70:	10bfffc4 	addi	r2,r2,-1
    4d74:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
    4d78:	e0fff817 	ldw	r3,-32(fp)
    4d7c:	e13ffd17 	ldw	r4,-12(fp)
    4d80:	19000336 	bltu	r3,r4,4d90 <alt_up_pixel_buffer_dma_draw_box+0xf0>
	{
		b_y = limit_y - 1;
    4d84:	e0bffd17 	ldw	r2,-12(fp)
    4d88:	10bfffc4 	addi	r2,r2,-1
    4d8c:	e0bff815 	stw	r2,-32(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    4d90:	e0800317 	ldw	r2,12(fp)
    4d94:	10800058 	cmpnei	r2,r2,1
    4d98:	1000041e 	bne	r2,zero,4dac <alt_up_pixel_buffer_dma_draw_box+0x10c>
		addr = pixel_buffer->back_buffer_start_address;
    4d9c:	e0bfee17 	ldw	r2,-72(fp)
    4da0:	10800c17 	ldw	r2,48(r2)
    4da4:	e0bfff15 	stw	r2,-4(fp)
    4da8:	00000306 	br	4db8 <alt_up_pixel_buffer_dma_draw_box+0x118>
	else
		addr = pixel_buffer->buffer_start_address;
    4dac:	e0bfee17 	ldw	r2,-72(fp)
    4db0:	10800b17 	ldw	r2,44(r2)
    4db4:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    4db8:	e0bfee17 	ldw	r2,-72(fp)
    4dbc:	10800d17 	ldw	r2,52(r2)
    4dc0:	1004c03a 	cmpne	r2,r2,zero
    4dc4:	1000721e 	bne	r2,zero,4f90 <alt_up_pixel_buffer_dma_draw_box+0x2f0>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
    4dc8:	e0bfee17 	ldw	r2,-72(fp)
    4dcc:	10801317 	ldw	r2,76(r2)
    4dd0:	e0bff415 	stw	r2,-48(fp)
		addr = addr + (t_y << offset_y);
    4dd4:	e0bff417 	ldw	r2,-48(fp)
    4dd8:	e0fff917 	ldw	r3,-28(fp)
    4ddc:	1884983a 	sll	r2,r3,r2
    4de0:	e13fff17 	ldw	r4,-4(fp)
    4de4:	2089883a 	add	r4,r4,r2
    4de8:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    4dec:	e0bfee17 	ldw	r2,-72(fp)
    4df0:	10800e17 	ldw	r2,56(r2)
    4df4:	10800058 	cmpnei	r2,r2,1
    4df8:	10001e1e 	bne	r2,zero,4e74 <alt_up_pixel_buffer_dma_draw_box+0x1d4>
			for (y = t_y; y <= b_y; y++)
    4dfc:	e0bff917 	ldw	r2,-28(fp)
    4e00:	e0bff515 	stw	r2,-44(fp)
    4e04:	00001706 	br	4e64 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
			{
				for (x = l_x; x <= r_x; x++)
    4e08:	e0fffb17 	ldw	r3,-20(fp)
    4e0c:	e0fff615 	stw	r3,-40(fp)
    4e10:	00000806 	br	4e34 <alt_up_pixel_buffer_dma_draw_box+0x194>
				{
					IOWR_8DIRECT(addr, x, local_color);
    4e14:	e0ffff17 	ldw	r3,-4(fp)
    4e18:	e0bff617 	ldw	r2,-40(fp)
    4e1c:	1885883a 	add	r2,r3,r2
    4e20:	e0fff717 	ldw	r3,-36(fp)
    4e24:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    4e28:	e13ff617 	ldw	r4,-40(fp)
    4e2c:	21000044 	addi	r4,r4,1
    4e30:	e13ff615 	stw	r4,-40(fp)
    4e34:	e0bffa17 	ldw	r2,-24(fp)
    4e38:	e0fff617 	ldw	r3,-40(fp)
    4e3c:	10fff52e 	bgeu	r2,r3,4e14 <alt_up_pixel_buffer_dma_draw_box+0x174>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
    4e40:	e0fff417 	ldw	r3,-48(fp)
    4e44:	00800044 	movi	r2,1
    4e48:	10c4983a 	sll	r2,r2,r3
    4e4c:	e13fff17 	ldw	r4,-4(fp)
    4e50:	2089883a 	add	r4,r4,r2
    4e54:	e13fff15 	stw	r4,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    4e58:	e0bff517 	ldw	r2,-44(fp)
    4e5c:	10800044 	addi	r2,r2,1
    4e60:	e0bff515 	stw	r2,-44(fp)
    4e64:	e0fff817 	ldw	r3,-32(fp)
    4e68:	e13ff517 	ldw	r4,-44(fp)
    4e6c:	193fe62e 	bgeu	r3,r4,4e08 <alt_up_pixel_buffer_dma_draw_box+0x168>
    4e70:	0000c406 	br	5184 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    4e74:	e0bfee17 	ldw	r2,-72(fp)
    4e78:	10800e17 	ldw	r2,56(r2)
    4e7c:	10800098 	cmpnei	r2,r2,2
    4e80:	1000211e 	bne	r2,zero,4f08 <alt_up_pixel_buffer_dma_draw_box+0x268>
			for (y = t_y; y <= b_y; y++)
    4e84:	e0bff917 	ldw	r2,-28(fp)
    4e88:	e0bff515 	stw	r2,-44(fp)
    4e8c:	00001a06 	br	4ef8 <alt_up_pixel_buffer_dma_draw_box+0x258>
			{
				for (x = l_x; x <= r_x; x++)
    4e90:	e0fffb17 	ldw	r3,-20(fp)
    4e94:	e0fff615 	stw	r3,-40(fp)
    4e98:	00000b06 	br	4ec8 <alt_up_pixel_buffer_dma_draw_box+0x228>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
    4e9c:	e13ff617 	ldw	r4,-40(fp)
    4ea0:	e13ff617 	ldw	r4,-40(fp)
    4ea4:	2105883a 	add	r2,r4,r4
    4ea8:	1007883a 	mov	r3,r2
    4eac:	e0bfff17 	ldw	r2,-4(fp)
    4eb0:	1885883a 	add	r2,r3,r2
    4eb4:	e0fff717 	ldw	r3,-36(fp)
    4eb8:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    4ebc:	e0bff617 	ldw	r2,-40(fp)
    4ec0:	10800044 	addi	r2,r2,1
    4ec4:	e0bff615 	stw	r2,-40(fp)
    4ec8:	e0fffa17 	ldw	r3,-24(fp)
    4ecc:	e13ff617 	ldw	r4,-40(fp)
    4ed0:	193ff22e 	bgeu	r3,r4,4e9c <alt_up_pixel_buffer_dma_draw_box+0x1fc>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
    4ed4:	e0fff417 	ldw	r3,-48(fp)
    4ed8:	00800044 	movi	r2,1
    4edc:	10c4983a 	sll	r2,r2,r3
    4ee0:	e0ffff17 	ldw	r3,-4(fp)
    4ee4:	1887883a 	add	r3,r3,r2
    4ee8:	e0ffff15 	stw	r3,-4(fp)
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    4eec:	e13ff517 	ldw	r4,-44(fp)
    4ef0:	21000044 	addi	r4,r4,1
    4ef4:	e13ff515 	stw	r4,-44(fp)
    4ef8:	e0bff817 	ldw	r2,-32(fp)
    4efc:	e0fff517 	ldw	r3,-44(fp)
    4f00:	10ffe32e 	bgeu	r2,r3,4e90 <alt_up_pixel_buffer_dma_draw_box+0x1f0>
    4f04:	00009f06 	br	5184 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    4f08:	e13ff917 	ldw	r4,-28(fp)
    4f0c:	e13ff515 	stw	r4,-44(fp)
    4f10:	00001b06 	br	4f80 <alt_up_pixel_buffer_dma_draw_box+0x2e0>
			{
				for (x = l_x; x <= r_x; x++)
    4f14:	e0bffb17 	ldw	r2,-20(fp)
    4f18:	e0bff615 	stw	r2,-40(fp)
    4f1c:	00000c06 	br	4f50 <alt_up_pixel_buffer_dma_draw_box+0x2b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
    4f20:	e0fff617 	ldw	r3,-40(fp)
    4f24:	e0fff617 	ldw	r3,-40(fp)
    4f28:	18c5883a 	add	r2,r3,r3
    4f2c:	1085883a 	add	r2,r2,r2
    4f30:	1007883a 	mov	r3,r2
    4f34:	e0bfff17 	ldw	r2,-4(fp)
    4f38:	1885883a 	add	r2,r3,r2
    4f3c:	e0fff717 	ldw	r3,-36(fp)
    4f40:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    4f44:	e13ff617 	ldw	r4,-40(fp)
    4f48:	21000044 	addi	r4,r4,1
    4f4c:	e13ff615 	stw	r4,-40(fp)
    4f50:	e0bffa17 	ldw	r2,-24(fp)
    4f54:	e0fff617 	ldw	r3,-40(fp)
    4f58:	10fff12e 	bgeu	r2,r3,4f20 <alt_up_pixel_buffer_dma_draw_box+0x280>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
    4f5c:	e0fff417 	ldw	r3,-48(fp)
    4f60:	00800044 	movi	r2,1
    4f64:	10c4983a 	sll	r2,r2,r3
    4f68:	e13fff17 	ldw	r4,-4(fp)
    4f6c:	2089883a 	add	r4,r4,r2
    4f70:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    4f74:	e0bff517 	ldw	r2,-44(fp)
    4f78:	10800044 	addi	r2,r2,1
    4f7c:	e0bff515 	stw	r2,-44(fp)
    4f80:	e0fff817 	ldw	r3,-32(fp)
    4f84:	e13ff517 	ldw	r4,-44(fp)
    4f88:	193fe22e 	bgeu	r3,r4,4f14 <alt_up_pixel_buffer_dma_draw_box+0x274>
    4f8c:	00007d06 	br	5184 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    4f90:	e0bfee17 	ldw	r2,-72(fp)
    4f94:	10800e17 	ldw	r2,56(r2)
    4f98:	10800058 	cmpnei	r2,r2,1
    4f9c:	1000221e 	bne	r2,zero,5028 <alt_up_pixel_buffer_dma_draw_box+0x388>
			addr = addr + t_y * limit_x;
    4fa0:	e0fff917 	ldw	r3,-28(fp)
    4fa4:	e13ffe17 	ldw	r4,-8(fp)
    4fa8:	1905383a 	mul	r2,r3,r4
    4fac:	e0ffff17 	ldw	r3,-4(fp)
    4fb0:	1887883a 	add	r3,r3,r2
    4fb4:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
    4fb8:	e13ff917 	ldw	r4,-28(fp)
    4fbc:	e13ff215 	stw	r4,-56(fp)
    4fc0:	00001506 	br	5018 <alt_up_pixel_buffer_dma_draw_box+0x378>
			{
				for (x = l_x; x <= r_x; x++)
    4fc4:	e0bffb17 	ldw	r2,-20(fp)
    4fc8:	e0bff315 	stw	r2,-52(fp)
    4fcc:	00000806 	br	4ff0 <alt_up_pixel_buffer_dma_draw_box+0x350>
				{
					IOWR_8DIRECT(addr, x, local_color);
    4fd0:	e0ffff17 	ldw	r3,-4(fp)
    4fd4:	e0bff317 	ldw	r2,-52(fp)
    4fd8:	1885883a 	add	r2,r3,r2
    4fdc:	e0fff717 	ldw	r3,-36(fp)
    4fe0:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    4fe4:	e0fff317 	ldw	r3,-52(fp)
    4fe8:	18c00044 	addi	r3,r3,1
    4fec:	e0fff315 	stw	r3,-52(fp)
    4ff0:	e13ffa17 	ldw	r4,-24(fp)
    4ff4:	e0bff317 	ldw	r2,-52(fp)
    4ff8:	20bff52e 	bgeu	r4,r2,4fd0 <alt_up_pixel_buffer_dma_draw_box+0x330>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
    4ffc:	e0ffff17 	ldw	r3,-4(fp)
    5000:	e13ffe17 	ldw	r4,-8(fp)
    5004:	1907883a 	add	r3,r3,r4
    5008:	e0ffff15 	stw	r3,-4(fp)
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    500c:	e0bff217 	ldw	r2,-56(fp)
    5010:	10800044 	addi	r2,r2,1
    5014:	e0bff215 	stw	r2,-56(fp)
    5018:	e0fff817 	ldw	r3,-32(fp)
    501c:	e13ff217 	ldw	r4,-56(fp)
    5020:	193fe82e 	bgeu	r3,r4,4fc4 <alt_up_pixel_buffer_dma_draw_box+0x324>
    5024:	00005706 	br	5184 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    5028:	e0bfee17 	ldw	r2,-72(fp)
    502c:	10800e17 	ldw	r2,56(r2)
    5030:	10800098 	cmpnei	r2,r2,2
    5034:	1000291e 	bne	r2,zero,50dc <alt_up_pixel_buffer_dma_draw_box+0x43c>
			limit_x = limit_x << 1;
    5038:	e0fffe17 	ldw	r3,-8(fp)
    503c:	e0fffe17 	ldw	r3,-8(fp)
    5040:	18c5883a 	add	r2,r3,r3
    5044:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
    5048:	e13ff917 	ldw	r4,-28(fp)
    504c:	e0fffe17 	ldw	r3,-8(fp)
    5050:	20c5383a 	mul	r2,r4,r3
    5054:	e13fff17 	ldw	r4,-4(fp)
    5058:	2089883a 	add	r4,r4,r2
    505c:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
    5060:	e0bff917 	ldw	r2,-28(fp)
    5064:	e0bff215 	stw	r2,-56(fp)
    5068:	00001806 	br	50cc <alt_up_pixel_buffer_dma_draw_box+0x42c>
			{
				for (x = l_x; x <= r_x; x++)
    506c:	e0fffb17 	ldw	r3,-20(fp)
    5070:	e0fff315 	stw	r3,-52(fp)
    5074:	00000b06 	br	50a4 <alt_up_pixel_buffer_dma_draw_box+0x404>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
    5078:	e13ff317 	ldw	r4,-52(fp)
    507c:	e13ff317 	ldw	r4,-52(fp)
    5080:	2105883a 	add	r2,r4,r4
    5084:	1007883a 	mov	r3,r2
    5088:	e0bfff17 	ldw	r2,-4(fp)
    508c:	1885883a 	add	r2,r3,r2
    5090:	e0fff717 	ldw	r3,-36(fp)
    5094:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    5098:	e0bff317 	ldw	r2,-52(fp)
    509c:	10800044 	addi	r2,r2,1
    50a0:	e0bff315 	stw	r2,-52(fp)
    50a4:	e0fffa17 	ldw	r3,-24(fp)
    50a8:	e13ff317 	ldw	r4,-52(fp)
    50ac:	193ff22e 	bgeu	r3,r4,5078 <alt_up_pixel_buffer_dma_draw_box+0x3d8>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
    50b0:	e0bfff17 	ldw	r2,-4(fp)
    50b4:	e0fffe17 	ldw	r3,-8(fp)
    50b8:	10c5883a 	add	r2,r2,r3
    50bc:	e0bfff15 	stw	r2,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    50c0:	e13ff217 	ldw	r4,-56(fp)
    50c4:	21000044 	addi	r4,r4,1
    50c8:	e13ff215 	stw	r4,-56(fp)
    50cc:	e0bff817 	ldw	r2,-32(fp)
    50d0:	e0fff217 	ldw	r3,-56(fp)
    50d4:	10ffe52e 	bgeu	r2,r3,506c <alt_up_pixel_buffer_dma_draw_box+0x3cc>
    50d8:	00002a06 	br	5184 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
    50dc:	e13ffe17 	ldw	r4,-8(fp)
    50e0:	e13ffe17 	ldw	r4,-8(fp)
    50e4:	2105883a 	add	r2,r4,r4
    50e8:	1085883a 	add	r2,r2,r2
    50ec:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
    50f0:	e0fff917 	ldw	r3,-28(fp)
    50f4:	e13ffe17 	ldw	r4,-8(fp)
    50f8:	1905383a 	mul	r2,r3,r4
    50fc:	e0ffff17 	ldw	r3,-4(fp)
    5100:	1887883a 	add	r3,r3,r2
    5104:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
    5108:	e13ff917 	ldw	r4,-28(fp)
    510c:	e13ff215 	stw	r4,-56(fp)
    5110:	00001906 	br	5178 <alt_up_pixel_buffer_dma_draw_box+0x4d8>
			{
				for (x = l_x; x <= r_x; x++)
    5114:	e0bffb17 	ldw	r2,-20(fp)
    5118:	e0bff315 	stw	r2,-52(fp)
    511c:	00000c06 	br	5150 <alt_up_pixel_buffer_dma_draw_box+0x4b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
    5120:	e0fff317 	ldw	r3,-52(fp)
    5124:	e0fff317 	ldw	r3,-52(fp)
    5128:	18c5883a 	add	r2,r3,r3
    512c:	1085883a 	add	r2,r2,r2
    5130:	1007883a 	mov	r3,r2
    5134:	e0bfff17 	ldw	r2,-4(fp)
    5138:	1885883a 	add	r2,r3,r2
    513c:	e0fff717 	ldw	r3,-36(fp)
    5140:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    5144:	e13ff317 	ldw	r4,-52(fp)
    5148:	21000044 	addi	r4,r4,1
    514c:	e13ff315 	stw	r4,-52(fp)
    5150:	e0bffa17 	ldw	r2,-24(fp)
    5154:	e0fff317 	ldw	r3,-52(fp)
    5158:	10fff12e 	bgeu	r2,r3,5120 <alt_up_pixel_buffer_dma_draw_box+0x480>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
    515c:	e13fff17 	ldw	r4,-4(fp)
    5160:	e0bffe17 	ldw	r2,-8(fp)
    5164:	2089883a 	add	r4,r4,r2
    5168:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    516c:	e0fff217 	ldw	r3,-56(fp)
    5170:	18c00044 	addi	r3,r3,1
    5174:	e0fff215 	stw	r3,-56(fp)
    5178:	e13ff817 	ldw	r4,-32(fp)
    517c:	e0bff217 	ldw	r2,-56(fp)
    5180:	20bfe42e 	bgeu	r4,r2,5114 <alt_up_pixel_buffer_dma_draw_box+0x474>
				}
				addr = addr + limit_x;
			}
		}
	}
}
    5184:	e037883a 	mov	sp,fp
    5188:	df000017 	ldw	fp,0(sp)
    518c:	dec00104 	addi	sp,sp,4
    5190:	f800283a 	ret

00005194 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
    5194:	defff204 	addi	sp,sp,-56
    5198:	df000d15 	stw	fp,52(sp)
    519c:	df000d04 	addi	fp,sp,52
    51a0:	e13ff315 	stw	r4,-52(fp)
    51a4:	e17ff415 	stw	r5,-48(fp)
    51a8:	e1bff515 	stw	r6,-44(fp)
    51ac:	e1fff615 	stw	r7,-40(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
    51b0:	e0bff317 	ldw	r2,-52(fp)
    51b4:	10800f17 	ldw	r2,60(r2)
    51b8:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
    51bc:	e0bff317 	ldw	r2,-52(fp)
    51c0:	10801017 	ldw	r2,64(r2)
    51c4:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
    51c8:	e0bff417 	ldw	r2,-48(fp)
    51cc:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int r_x = x1;
    51d0:	e0fff517 	ldw	r3,-44(fp)
    51d4:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int line_y = y;
    51d8:	e13ff617 	ldw	r4,-40(fp)
    51dc:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
    51e0:	e0800117 	ldw	r2,4(fp)
    51e4:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
    51e8:	e0fffb17 	ldw	r3,-20(fp)
    51ec:	e13ffc17 	ldw	r4,-16(fp)
    51f0:	1900042e 	bgeu	r3,r4,5204 <alt_up_pixel_buffer_dma_draw_hline+0x70>
	{
		temp = l_x;
    51f4:	e0bffc17 	ldw	r2,-16(fp)
		l_x = r_x;
    51f8:	e0fffb17 	ldw	r3,-20(fp)
    51fc:	e0fffc15 	stw	r3,-16(fp)
		r_x = temp;
    5200:	e0bffb15 	stw	r2,-20(fp)
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
    5204:	e13ffc17 	ldw	r4,-16(fp)
    5208:	e0bffe17 	ldw	r2,-8(fp)
    520c:	2080b12e 	bgeu	r4,r2,54d4 <alt_up_pixel_buffer_dma_draw_hline+0x340>
    5210:	e0fffa17 	ldw	r3,-24(fp)
    5214:	e13ffd17 	ldw	r4,-12(fp)
    5218:	19000136 	bltu	r3,r4,5220 <alt_up_pixel_buffer_dma_draw_hline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
    521c:	0000ad06 	br	54d4 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
    5220:	e0bffb17 	ldw	r2,-20(fp)
    5224:	e0fffe17 	ldw	r3,-8(fp)
    5228:	10c00336 	bltu	r2,r3,5238 <alt_up_pixel_buffer_dma_draw_hline+0xa4>
	{
		r_x = limit_x - 1;
    522c:	e13ffe17 	ldw	r4,-8(fp)
    5230:	213fffc4 	addi	r4,r4,-1
    5234:	e13ffb15 	stw	r4,-20(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    5238:	e0800217 	ldw	r2,8(fp)
    523c:	10800058 	cmpnei	r2,r2,1
    5240:	1000041e 	bne	r2,zero,5254 <alt_up_pixel_buffer_dma_draw_hline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
    5244:	e0bff317 	ldw	r2,-52(fp)
    5248:	10800c17 	ldw	r2,48(r2)
    524c:	e0bfff15 	stw	r2,-4(fp)
    5250:	00000306 	br	5260 <alt_up_pixel_buffer_dma_draw_hline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
    5254:	e0bff317 	ldw	r2,-52(fp)
    5258:	10800b17 	ldw	r2,44(r2)
    525c:	e0bfff15 	stw	r2,-4(fp)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    5260:	e0bff317 	ldw	r2,-52(fp)
    5264:	10800d17 	ldw	r2,52(r2)
    5268:	1004c03a 	cmpne	r2,r2,zero
    526c:	1000431e 	bne	r2,zero,537c <alt_up_pixel_buffer_dma_draw_hline+0x1e8>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
    5270:	e0bff317 	ldw	r2,-52(fp)
    5274:	10801317 	ldw	r2,76(r2)
		addr = addr + (line_y << offset_y);
    5278:	e0fffa17 	ldw	r3,-24(fp)
    527c:	1884983a 	sll	r2,r3,r2
    5280:	e13fff17 	ldw	r4,-4(fp)
    5284:	2089883a 	add	r4,r4,r2
    5288:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    528c:	e0bff317 	ldw	r2,-52(fp)
    5290:	10800e17 	ldw	r2,56(r2)
    5294:	10800058 	cmpnei	r2,r2,1
    5298:	10000f1e 	bne	r2,zero,52d8 <alt_up_pixel_buffer_dma_draw_hline+0x144>
			for (x = l_x; x <= r_x; x++)
    529c:	e0bffc17 	ldw	r2,-16(fp)
    52a0:	e0bff815 	stw	r2,-32(fp)
    52a4:	00000806 	br	52c8 <alt_up_pixel_buffer_dma_draw_hline+0x134>
			{
				IOWR_8DIRECT(addr, x, local_color);
    52a8:	e0ffff17 	ldw	r3,-4(fp)
    52ac:	e0bff817 	ldw	r2,-32(fp)
    52b0:	1885883a 	add	r2,r3,r2
    52b4:	e0fff917 	ldw	r3,-28(fp)
    52b8:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
    52bc:	e0fff817 	ldw	r3,-32(fp)
    52c0:	18c00044 	addi	r3,r3,1
    52c4:	e0fff815 	stw	r3,-32(fp)
    52c8:	e13ffb17 	ldw	r4,-20(fp)
    52cc:	e0bff817 	ldw	r2,-32(fp)
    52d0:	20bff52e 	bgeu	r4,r2,52a8 <alt_up_pixel_buffer_dma_draw_hline+0x114>
    52d4:	00007f06 	br	54d4 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    52d8:	e0bff317 	ldw	r2,-52(fp)
    52dc:	10800e17 	ldw	r2,56(r2)
    52e0:	10800098 	cmpnei	r2,r2,2
    52e4:	1000121e 	bne	r2,zero,5330 <alt_up_pixel_buffer_dma_draw_hline+0x19c>
			for (x = l_x; x <= r_x; x++)
    52e8:	e0fffc17 	ldw	r3,-16(fp)
    52ec:	e0fff815 	stw	r3,-32(fp)
    52f0:	00000b06 	br	5320 <alt_up_pixel_buffer_dma_draw_hline+0x18c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
    52f4:	e13ff817 	ldw	r4,-32(fp)
    52f8:	e13ff817 	ldw	r4,-32(fp)
    52fc:	2105883a 	add	r2,r4,r4
    5300:	1007883a 	mov	r3,r2
    5304:	e0bfff17 	ldw	r2,-4(fp)
    5308:	1885883a 	add	r2,r3,r2
    530c:	e0fff917 	ldw	r3,-28(fp)
    5310:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
    5314:	e0bff817 	ldw	r2,-32(fp)
    5318:	10800044 	addi	r2,r2,1
    531c:	e0bff815 	stw	r2,-32(fp)
    5320:	e0fffb17 	ldw	r3,-20(fp)
    5324:	e13ff817 	ldw	r4,-32(fp)
    5328:	193ff22e 	bgeu	r3,r4,52f4 <alt_up_pixel_buffer_dma_draw_hline+0x160>
    532c:	00006906 	br	54d4 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
    5330:	e0bffc17 	ldw	r2,-16(fp)
    5334:	e0bff815 	stw	r2,-32(fp)
    5338:	00000c06 	br	536c <alt_up_pixel_buffer_dma_draw_hline+0x1d8>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
    533c:	e0fff817 	ldw	r3,-32(fp)
    5340:	e0fff817 	ldw	r3,-32(fp)
    5344:	18c5883a 	add	r2,r3,r3
    5348:	1085883a 	add	r2,r2,r2
    534c:	1007883a 	mov	r3,r2
    5350:	e0bfff17 	ldw	r2,-4(fp)
    5354:	1885883a 	add	r2,r3,r2
    5358:	e0fff917 	ldw	r3,-28(fp)
    535c:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
    5360:	e13ff817 	ldw	r4,-32(fp)
    5364:	21000044 	addi	r4,r4,1
    5368:	e13ff815 	stw	r4,-32(fp)
    536c:	e0bffb17 	ldw	r2,-20(fp)
    5370:	e0fff817 	ldw	r3,-32(fp)
    5374:	10fff12e 	bgeu	r2,r3,533c <alt_up_pixel_buffer_dma_draw_hline+0x1a8>
    5378:	00005606 	br	54d4 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    537c:	e0bff317 	ldw	r2,-52(fp)
    5380:	10800e17 	ldw	r2,56(r2)
    5384:	10800058 	cmpnei	r2,r2,1
    5388:	1000151e 	bne	r2,zero,53e0 <alt_up_pixel_buffer_dma_draw_hline+0x24c>
			addr = addr + line_y * limit_x;
    538c:	e13ffa17 	ldw	r4,-24(fp)
    5390:	e0fffe17 	ldw	r3,-8(fp)
    5394:	20c5383a 	mul	r2,r4,r3
    5398:	e13fff17 	ldw	r4,-4(fp)
    539c:	2089883a 	add	r4,r4,r2
    53a0:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
    53a4:	e0bffc17 	ldw	r2,-16(fp)
    53a8:	e0bff715 	stw	r2,-36(fp)
    53ac:	00000806 	br	53d0 <alt_up_pixel_buffer_dma_draw_hline+0x23c>
			{
				IOWR_8DIRECT(addr, x, local_color);
    53b0:	e0ffff17 	ldw	r3,-4(fp)
    53b4:	e0bff717 	ldw	r2,-36(fp)
    53b8:	1885883a 	add	r2,r3,r2
    53bc:	e0fff917 	ldw	r3,-28(fp)
    53c0:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
    53c4:	e0fff717 	ldw	r3,-36(fp)
    53c8:	18c00044 	addi	r3,r3,1
    53cc:	e0fff715 	stw	r3,-36(fp)
    53d0:	e13ffb17 	ldw	r4,-20(fp)
    53d4:	e0bff717 	ldw	r2,-36(fp)
    53d8:	20bff52e 	bgeu	r4,r2,53b0 <alt_up_pixel_buffer_dma_draw_hline+0x21c>
    53dc:	00003d06 	br	54d4 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    53e0:	e0bff317 	ldw	r2,-52(fp)
    53e4:	10800e17 	ldw	r2,56(r2)
    53e8:	10800098 	cmpnei	r2,r2,2
    53ec:	10001c1e 	bne	r2,zero,5460 <alt_up_pixel_buffer_dma_draw_hline+0x2cc>
			limit_x = limit_x << 1;
    53f0:	e0fffe17 	ldw	r3,-8(fp)
    53f4:	e0fffe17 	ldw	r3,-8(fp)
    53f8:	18c5883a 	add	r2,r3,r3
    53fc:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
    5400:	e13ffa17 	ldw	r4,-24(fp)
    5404:	e0fffe17 	ldw	r3,-8(fp)
    5408:	20c5383a 	mul	r2,r4,r3
    540c:	e13fff17 	ldw	r4,-4(fp)
    5410:	2089883a 	add	r4,r4,r2
    5414:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
    5418:	e0bffc17 	ldw	r2,-16(fp)
    541c:	e0bff715 	stw	r2,-36(fp)
    5420:	00000b06 	br	5450 <alt_up_pixel_buffer_dma_draw_hline+0x2bc>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
    5424:	e0fff717 	ldw	r3,-36(fp)
    5428:	e0fff717 	ldw	r3,-36(fp)
    542c:	18c5883a 	add	r2,r3,r3
    5430:	1007883a 	mov	r3,r2
    5434:	e0bfff17 	ldw	r2,-4(fp)
    5438:	1885883a 	add	r2,r3,r2
    543c:	e0fff917 	ldw	r3,-28(fp)
    5440:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
    5444:	e13ff717 	ldw	r4,-36(fp)
    5448:	21000044 	addi	r4,r4,1
    544c:	e13ff715 	stw	r4,-36(fp)
    5450:	e0bffb17 	ldw	r2,-20(fp)
    5454:	e0fff717 	ldw	r3,-36(fp)
    5458:	10fff22e 	bgeu	r2,r3,5424 <alt_up_pixel_buffer_dma_draw_hline+0x290>
    545c:	00001d06 	br	54d4 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
    5460:	e13ffe17 	ldw	r4,-8(fp)
    5464:	e13ffe17 	ldw	r4,-8(fp)
    5468:	2105883a 	add	r2,r4,r4
    546c:	1085883a 	add	r2,r2,r2
    5470:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
    5474:	e0fffa17 	ldw	r3,-24(fp)
    5478:	e13ffe17 	ldw	r4,-8(fp)
    547c:	1905383a 	mul	r2,r3,r4
    5480:	e0ffff17 	ldw	r3,-4(fp)
    5484:	1887883a 	add	r3,r3,r2
    5488:	e0ffff15 	stw	r3,-4(fp)
			for (x = l_x; x <= r_x; x++)
    548c:	e13ffc17 	ldw	r4,-16(fp)
    5490:	e13ff715 	stw	r4,-36(fp)
    5494:	00000c06 	br	54c8 <alt_up_pixel_buffer_dma_draw_hline+0x334>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
    5498:	e0fff717 	ldw	r3,-36(fp)
    549c:	e0fff717 	ldw	r3,-36(fp)
    54a0:	18c5883a 	add	r2,r3,r3
    54a4:	1085883a 	add	r2,r2,r2
    54a8:	1007883a 	mov	r3,r2
    54ac:	e0bfff17 	ldw	r2,-4(fp)
    54b0:	1885883a 	add	r2,r3,r2
    54b4:	e0fff917 	ldw	r3,-28(fp)
    54b8:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
    54bc:	e13ff717 	ldw	r4,-36(fp)
    54c0:	21000044 	addi	r4,r4,1
    54c4:	e13ff715 	stw	r4,-36(fp)
    54c8:	e0bffb17 	ldw	r2,-20(fp)
    54cc:	e0fff717 	ldw	r3,-36(fp)
    54d0:	10fff12e 	bgeu	r2,r3,5498 <alt_up_pixel_buffer_dma_draw_hline+0x304>
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
    54d4:	e037883a 	mov	sp,fp
    54d8:	df000017 	ldw	fp,0(sp)
    54dc:	dec00104 	addi	sp,sp,4
    54e0:	f800283a 	ret

000054e4 <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
    54e4:	defff104 	addi	sp,sp,-60
    54e8:	df000e15 	stw	fp,56(sp)
    54ec:	df000e04 	addi	fp,sp,56
    54f0:	e13ff215 	stw	r4,-56(fp)
    54f4:	e17ff315 	stw	r5,-52(fp)
    54f8:	e1bff415 	stw	r6,-48(fp)
    54fc:	e1fff515 	stw	r7,-44(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
    5500:	e0bff217 	ldw	r2,-56(fp)
    5504:	10800f17 	ldw	r2,60(r2)
    5508:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
    550c:	e0bff217 	ldw	r2,-56(fp)
    5510:	10801017 	ldw	r2,64(r2)
    5514:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int line_x = x;
    5518:	e0bff317 	ldw	r2,-52(fp)
    551c:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int t_y = y0;
    5520:	e0fff417 	ldw	r3,-48(fp)
    5524:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int b_y = y1;
    5528:	e13ff517 	ldw	r4,-44(fp)
    552c:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
    5530:	e0800117 	ldw	r2,4(fp)
    5534:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
    5538:	e0fffa17 	ldw	r3,-24(fp)
    553c:	e13ffb17 	ldw	r4,-20(fp)
    5540:	1900042e 	bgeu	r3,r4,5554 <alt_up_pixel_buffer_dma_draw_vline+0x70>
	{
		temp = t_y;
    5544:	e0bffb17 	ldw	r2,-20(fp)
		t_y = b_y;
    5548:	e0fffa17 	ldw	r3,-24(fp)
    554c:	e0fffb15 	stw	r3,-20(fp)
		b_y = temp;
    5550:	e0bffa15 	stw	r2,-24(fp)
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
    5554:	e13ffc17 	ldw	r4,-16(fp)
    5558:	e0bffe17 	ldw	r2,-8(fp)
    555c:	2080d12e 	bgeu	r4,r2,58a4 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
    5560:	e0fffb17 	ldw	r3,-20(fp)
    5564:	e13ffd17 	ldw	r4,-12(fp)
    5568:	19000136 	bltu	r3,r4,5570 <alt_up_pixel_buffer_dma_draw_vline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
    556c:	0000cd06 	br	58a4 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
    5570:	e0bffa17 	ldw	r2,-24(fp)
    5574:	e0fffd17 	ldw	r3,-12(fp)
    5578:	10c00336 	bltu	r2,r3,5588 <alt_up_pixel_buffer_dma_draw_vline+0xa4>
	{
		b_y = limit_y - 1;
    557c:	e13ffd17 	ldw	r4,-12(fp)
    5580:	213fffc4 	addi	r4,r4,-1
    5584:	e13ffa15 	stw	r4,-24(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    5588:	e0800217 	ldw	r2,8(fp)
    558c:	10800058 	cmpnei	r2,r2,1
    5590:	1000041e 	bne	r2,zero,55a4 <alt_up_pixel_buffer_dma_draw_vline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
    5594:	e0bff217 	ldw	r2,-56(fp)
    5598:	10800c17 	ldw	r2,48(r2)
    559c:	e0bfff15 	stw	r2,-4(fp)
    55a0:	00000306 	br	55b0 <alt_up_pixel_buffer_dma_draw_vline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
    55a4:	e0bff217 	ldw	r2,-56(fp)
    55a8:	10800b17 	ldw	r2,44(r2)
    55ac:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    55b0:	e0bff217 	ldw	r2,-56(fp)
    55b4:	10800d17 	ldw	r2,52(r2)
    55b8:	1004c03a 	cmpne	r2,r2,zero
    55bc:	1000571e 	bne	r2,zero,571c <alt_up_pixel_buffer_dma_draw_vline+0x238>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
    55c0:	e0bff217 	ldw	r2,-56(fp)
    55c4:	10801317 	ldw	r2,76(r2)
    55c8:	e0bff715 	stw	r2,-36(fp)
		addr = addr + (t_y << offset_y);
    55cc:	e0bff717 	ldw	r2,-36(fp)
    55d0:	e0fffb17 	ldw	r3,-20(fp)
    55d4:	1884983a 	sll	r2,r3,r2
    55d8:	e13fff17 	ldw	r4,-4(fp)
    55dc:	2089883a 	add	r4,r4,r2
    55e0:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    55e4:	e0bff217 	ldw	r2,-56(fp)
    55e8:	10800e17 	ldw	r2,56(r2)
    55ec:	10800058 	cmpnei	r2,r2,1
    55f0:	1000151e 	bne	r2,zero,5648 <alt_up_pixel_buffer_dma_draw_vline+0x164>
			for (y = t_y; y <= b_y; y++)
    55f4:	e0bffb17 	ldw	r2,-20(fp)
    55f8:	e0bff815 	stw	r2,-32(fp)
    55fc:	00000e06 	br	5638 <alt_up_pixel_buffer_dma_draw_vline+0x154>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
    5600:	e0ffff17 	ldw	r3,-4(fp)
    5604:	e0bffc17 	ldw	r2,-16(fp)
    5608:	1885883a 	add	r2,r3,r2
    560c:	e0fff917 	ldw	r3,-28(fp)
    5610:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
    5614:	e0fff717 	ldw	r3,-36(fp)
    5618:	00800044 	movi	r2,1
    561c:	10c4983a 	sll	r2,r2,r3
    5620:	e0ffff17 	ldw	r3,-4(fp)
    5624:	1887883a 	add	r3,r3,r2
    5628:	e0ffff15 	stw	r3,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    562c:	e13ff817 	ldw	r4,-32(fp)
    5630:	21000044 	addi	r4,r4,1
    5634:	e13ff815 	stw	r4,-32(fp)
    5638:	e0bffa17 	ldw	r2,-24(fp)
    563c:	e0fff817 	ldw	r3,-32(fp)
    5640:	10ffef2e 	bgeu	r2,r3,5600 <alt_up_pixel_buffer_dma_draw_vline+0x11c>
    5644:	00009706 	br	58a4 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    5648:	e0bff217 	ldw	r2,-56(fp)
    564c:	10800e17 	ldw	r2,56(r2)
    5650:	10800098 	cmpnei	r2,r2,2
    5654:	1000181e 	bne	r2,zero,56b8 <alt_up_pixel_buffer_dma_draw_vline+0x1d4>
			for (y = t_y; y <= b_y; y++)
    5658:	e13ffb17 	ldw	r4,-20(fp)
    565c:	e13ff815 	stw	r4,-32(fp)
    5660:	00001106 	br	56a8 <alt_up_pixel_buffer_dma_draw_vline+0x1c4>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
    5664:	e0fffc17 	ldw	r3,-16(fp)
    5668:	e0fffc17 	ldw	r3,-16(fp)
    566c:	18c5883a 	add	r2,r3,r3
    5670:	1007883a 	mov	r3,r2
    5674:	e0bfff17 	ldw	r2,-4(fp)
    5678:	1885883a 	add	r2,r3,r2
    567c:	e0fff917 	ldw	r3,-28(fp)
    5680:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
    5684:	e0fff717 	ldw	r3,-36(fp)
    5688:	00800044 	movi	r2,1
    568c:	10c4983a 	sll	r2,r2,r3
    5690:	e13fff17 	ldw	r4,-4(fp)
    5694:	2089883a 	add	r4,r4,r2
    5698:	e13fff15 	stw	r4,-4(fp)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    569c:	e0bff817 	ldw	r2,-32(fp)
    56a0:	10800044 	addi	r2,r2,1
    56a4:	e0bff815 	stw	r2,-32(fp)
    56a8:	e0fffa17 	ldw	r3,-24(fp)
    56ac:	e13ff817 	ldw	r4,-32(fp)
    56b0:	193fec2e 	bgeu	r3,r4,5664 <alt_up_pixel_buffer_dma_draw_vline+0x180>
    56b4:	00007b06 	br	58a4 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    56b8:	e0bffb17 	ldw	r2,-20(fp)
    56bc:	e0bff815 	stw	r2,-32(fp)
    56c0:	00001206 	br	570c <alt_up_pixel_buffer_dma_draw_vline+0x228>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
    56c4:	e0fffc17 	ldw	r3,-16(fp)
    56c8:	e0fffc17 	ldw	r3,-16(fp)
    56cc:	18c5883a 	add	r2,r3,r3
    56d0:	1085883a 	add	r2,r2,r2
    56d4:	1007883a 	mov	r3,r2
    56d8:	e0bfff17 	ldw	r2,-4(fp)
    56dc:	1885883a 	add	r2,r3,r2
    56e0:	e0fff917 	ldw	r3,-28(fp)
    56e4:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
    56e8:	e0fff717 	ldw	r3,-36(fp)
    56ec:	00800044 	movi	r2,1
    56f0:	10c4983a 	sll	r2,r2,r3
    56f4:	e13fff17 	ldw	r4,-4(fp)
    56f8:	2089883a 	add	r4,r4,r2
    56fc:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    5700:	e0bff817 	ldw	r2,-32(fp)
    5704:	10800044 	addi	r2,r2,1
    5708:	e0bff815 	stw	r2,-32(fp)
    570c:	e0fffa17 	ldw	r3,-24(fp)
    5710:	e13ff817 	ldw	r4,-32(fp)
    5714:	193feb2e 	bgeu	r3,r4,56c4 <alt_up_pixel_buffer_dma_draw_vline+0x1e0>
    5718:	00006206 	br	58a4 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    571c:	e0bff217 	ldw	r2,-56(fp)
    5720:	10800e17 	ldw	r2,56(r2)
    5724:	10800058 	cmpnei	r2,r2,1
    5728:	1000191e 	bne	r2,zero,5790 <alt_up_pixel_buffer_dma_draw_vline+0x2ac>
			addr = addr + t_y * limit_x;
    572c:	e0fffb17 	ldw	r3,-20(fp)
    5730:	e13ffe17 	ldw	r4,-8(fp)
    5734:	1905383a 	mul	r2,r3,r4
    5738:	e0ffff17 	ldw	r3,-4(fp)
    573c:	1887883a 	add	r3,r3,r2
    5740:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
    5744:	e13ffb17 	ldw	r4,-20(fp)
    5748:	e13ff615 	stw	r4,-40(fp)
    574c:	00000c06 	br	5780 <alt_up_pixel_buffer_dma_draw_vline+0x29c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
    5750:	e0ffff17 	ldw	r3,-4(fp)
    5754:	e0bffc17 	ldw	r2,-16(fp)
    5758:	1885883a 	add	r2,r3,r2
    575c:	e0fff917 	ldw	r3,-28(fp)
    5760:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
    5764:	e0bfff17 	ldw	r2,-4(fp)
    5768:	e0fffe17 	ldw	r3,-8(fp)
    576c:	10c5883a 	add	r2,r2,r3
    5770:	e0bfff15 	stw	r2,-4(fp)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    5774:	e13ff617 	ldw	r4,-40(fp)
    5778:	21000044 	addi	r4,r4,1
    577c:	e13ff615 	stw	r4,-40(fp)
    5780:	e0bffa17 	ldw	r2,-24(fp)
    5784:	e0fff617 	ldw	r3,-40(fp)
    5788:	10fff12e 	bgeu	r2,r3,5750 <alt_up_pixel_buffer_dma_draw_vline+0x26c>
    578c:	00004506 	br	58a4 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    5790:	e0bff217 	ldw	r2,-56(fp)
    5794:	10800e17 	ldw	r2,56(r2)
    5798:	10800098 	cmpnei	r2,r2,2
    579c:	1000201e 	bne	r2,zero,5820 <alt_up_pixel_buffer_dma_draw_vline+0x33c>
			limit_x = limit_x << 1;
    57a0:	e13ffe17 	ldw	r4,-8(fp)
    57a4:	e13ffe17 	ldw	r4,-8(fp)
    57a8:	2105883a 	add	r2,r4,r4
    57ac:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
    57b0:	e0fffb17 	ldw	r3,-20(fp)
    57b4:	e13ffe17 	ldw	r4,-8(fp)
    57b8:	1905383a 	mul	r2,r3,r4
    57bc:	e0ffff17 	ldw	r3,-4(fp)
    57c0:	1887883a 	add	r3,r3,r2
    57c4:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
    57c8:	e13ffb17 	ldw	r4,-20(fp)
    57cc:	e13ff615 	stw	r4,-40(fp)
    57d0:	00000f06 	br	5810 <alt_up_pixel_buffer_dma_draw_vline+0x32c>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
    57d4:	e0fffc17 	ldw	r3,-16(fp)
    57d8:	e0fffc17 	ldw	r3,-16(fp)
    57dc:	18c5883a 	add	r2,r3,r3
    57e0:	1007883a 	mov	r3,r2
    57e4:	e0bfff17 	ldw	r2,-4(fp)
    57e8:	1885883a 	add	r2,r3,r2
    57ec:	e0fff917 	ldw	r3,-28(fp)
    57f0:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
    57f4:	e13fff17 	ldw	r4,-4(fp)
    57f8:	e0bffe17 	ldw	r2,-8(fp)
    57fc:	2089883a 	add	r4,r4,r2
    5800:	e13fff15 	stw	r4,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    5804:	e0fff617 	ldw	r3,-40(fp)
    5808:	18c00044 	addi	r3,r3,1
    580c:	e0fff615 	stw	r3,-40(fp)
    5810:	e13ffa17 	ldw	r4,-24(fp)
    5814:	e0bff617 	ldw	r2,-40(fp)
    5818:	20bfee2e 	bgeu	r4,r2,57d4 <alt_up_pixel_buffer_dma_draw_vline+0x2f0>
    581c:	00002106 	br	58a4 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
    5820:	e0fffe17 	ldw	r3,-8(fp)
    5824:	e0fffe17 	ldw	r3,-8(fp)
    5828:	18c5883a 	add	r2,r3,r3
    582c:	1085883a 	add	r2,r2,r2
    5830:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
    5834:	e13ffb17 	ldw	r4,-20(fp)
    5838:	e0fffe17 	ldw	r3,-8(fp)
    583c:	20c5383a 	mul	r2,r4,r3
    5840:	e13fff17 	ldw	r4,-4(fp)
    5844:	2089883a 	add	r4,r4,r2
    5848:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
    584c:	e0bffb17 	ldw	r2,-20(fp)
    5850:	e0bff615 	stw	r2,-40(fp)
    5854:	00001006 	br	5898 <alt_up_pixel_buffer_dma_draw_vline+0x3b4>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
    5858:	e0fffc17 	ldw	r3,-16(fp)
    585c:	e0fffc17 	ldw	r3,-16(fp)
    5860:	18c5883a 	add	r2,r3,r3
    5864:	1085883a 	add	r2,r2,r2
    5868:	1007883a 	mov	r3,r2
    586c:	e0bfff17 	ldw	r2,-4(fp)
    5870:	1885883a 	add	r2,r3,r2
    5874:	e0fff917 	ldw	r3,-28(fp)
    5878:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
    587c:	e13fff17 	ldw	r4,-4(fp)
    5880:	e0bffe17 	ldw	r2,-8(fp)
    5884:	2089883a 	add	r4,r4,r2
    5888:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    588c:	e0fff617 	ldw	r3,-40(fp)
    5890:	18c00044 	addi	r3,r3,1
    5894:	e0fff615 	stw	r3,-40(fp)
    5898:	e13ffa17 	ldw	r4,-24(fp)
    589c:	e0bff617 	ldw	r2,-40(fp)
    58a0:	20bfed2e 	bgeu	r4,r2,5858 <alt_up_pixel_buffer_dma_draw_vline+0x374>
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
    58a4:	e037883a 	mov	sp,fp
    58a8:	df000017 	ldw	fp,0(sp)
    58ac:	dec00104 	addi	sp,sp,4
    58b0:	f800283a 	ret

000058b4 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
    58b4:	defff804 	addi	sp,sp,-32
    58b8:	dfc00715 	stw	ra,28(sp)
    58bc:	df000615 	stw	fp,24(sp)
    58c0:	df000604 	addi	fp,sp,24
    58c4:	e13ffc15 	stw	r4,-16(fp)
    58c8:	e17ffd15 	stw	r5,-12(fp)
    58cc:	e1bffe15 	stw	r6,-8(fp)
    58d0:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
    58d4:	e0800317 	ldw	r2,12(fp)
    58d8:	d8800015 	stw	r2,0(sp)
    58dc:	e0800417 	ldw	r2,16(fp)
    58e0:	d8800115 	stw	r2,4(sp)
    58e4:	e13ffc17 	ldw	r4,-16(fp)
    58e8:	e17ffd17 	ldw	r5,-12(fp)
    58ec:	e1bfff17 	ldw	r6,-4(fp)
    58f0:	e1fffe17 	ldw	r7,-8(fp)
    58f4:	00051940 	call	5194 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
    58f8:	e0800317 	ldw	r2,12(fp)
    58fc:	d8800015 	stw	r2,0(sp)
    5900:	e0800417 	ldw	r2,16(fp)
    5904:	d8800115 	stw	r2,4(sp)
    5908:	e13ffc17 	ldw	r4,-16(fp)
    590c:	e17ffd17 	ldw	r5,-12(fp)
    5910:	e1bfff17 	ldw	r6,-4(fp)
    5914:	e1c00217 	ldw	r7,8(fp)
    5918:	00051940 	call	5194 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
    591c:	e0800317 	ldw	r2,12(fp)
    5920:	d8800015 	stw	r2,0(sp)
    5924:	e0800417 	ldw	r2,16(fp)
    5928:	d8800115 	stw	r2,4(sp)
    592c:	e13ffc17 	ldw	r4,-16(fp)
    5930:	e17ffd17 	ldw	r5,-12(fp)
    5934:	e1bffe17 	ldw	r6,-8(fp)
    5938:	e1c00217 	ldw	r7,8(fp)
    593c:	00054e40 	call	54e4 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
    5940:	e0800317 	ldw	r2,12(fp)
    5944:	d8800015 	stw	r2,0(sp)
    5948:	e0800417 	ldw	r2,16(fp)
    594c:	d8800115 	stw	r2,4(sp)
    5950:	e13ffc17 	ldw	r4,-16(fp)
    5954:	e17fff17 	ldw	r5,-4(fp)
    5958:	e1bffe17 	ldw	r6,-8(fp)
    595c:	e1c00217 	ldw	r7,8(fp)
    5960:	00054e40 	call	54e4 <alt_up_pixel_buffer_dma_draw_vline>
}
    5964:	e037883a 	mov	sp,fp
    5968:	dfc00117 	ldw	ra,4(sp)
    596c:	df000017 	ldw	fp,0(sp)
    5970:	dec00204 	addi	sp,sp,8
    5974:	f800283a 	ret

00005978 <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
    5978:	defffb04 	addi	sp,sp,-20
    597c:	df000415 	stw	fp,16(sp)
    5980:	df000404 	addi	fp,sp,16
    5984:	e13ffc15 	stw	r4,-16(fp)
    5988:	e17ffd15 	stw	r5,-12(fp)
    598c:	e1bffe15 	stw	r6,-8(fp)
    5990:	e1ffff15 	stw	r7,-4(fp)
	if (mode == 0)
    5994:	e0c00217 	ldw	r3,8(fp)
    5998:	1804c03a 	cmpne	r2,r3,zero
    599c:	10000b1e 	bne	r2,zero,59cc <helper_plot_pixel+0x54>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
    59a0:	e13ffd17 	ldw	r4,-12(fp)
    59a4:	e0ffff17 	ldw	r3,-4(fp)
    59a8:	20c5383a 	mul	r2,r4,r3
    59ac:	e13ffe17 	ldw	r4,-8(fp)
    59b0:	1105883a 	add	r2,r2,r4
    59b4:	1007883a 	mov	r3,r2
    59b8:	e0bffc17 	ldw	r2,-16(fp)
    59bc:	1885883a 	add	r2,r3,r2
    59c0:	e0c00117 	ldw	r3,4(fp)
    59c4:	10c00025 	stbio	r3,0(r2)
    59c8:	00001b06 	br	5a38 <helper_plot_pixel+0xc0>
	else if (mode == 1)
    59cc:	e1000217 	ldw	r4,8(fp)
    59d0:	20800058 	cmpnei	r2,r4,1
    59d4:	10000c1e 	bne	r2,zero,5a08 <helper_plot_pixel+0x90>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
    59d8:	e0fffd17 	ldw	r3,-12(fp)
    59dc:	e13fff17 	ldw	r4,-4(fp)
    59e0:	1905383a 	mul	r2,r3,r4
    59e4:	e0fffe17 	ldw	r3,-8(fp)
    59e8:	10c5883a 	add	r2,r2,r3
    59ec:	1085883a 	add	r2,r2,r2
    59f0:	1007883a 	mov	r3,r2
    59f4:	e0bffc17 	ldw	r2,-16(fp)
    59f8:	1885883a 	add	r2,r3,r2
    59fc:	e1000117 	ldw	r4,4(fp)
    5a00:	1100002d 	sthio	r4,0(r2)
    5a04:	00000c06 	br	5a38 <helper_plot_pixel+0xc0>
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
    5a08:	e0fffd17 	ldw	r3,-12(fp)
    5a0c:	e13fff17 	ldw	r4,-4(fp)
    5a10:	1905383a 	mul	r2,r3,r4
    5a14:	e0fffe17 	ldw	r3,-8(fp)
    5a18:	10c5883a 	add	r2,r2,r3
    5a1c:	1085883a 	add	r2,r2,r2
    5a20:	1085883a 	add	r2,r2,r2
    5a24:	1007883a 	mov	r3,r2
    5a28:	e0bffc17 	ldw	r2,-16(fp)
    5a2c:	1885883a 	add	r2,r3,r2
    5a30:	e1000117 	ldw	r4,4(fp)
    5a34:	11000035 	stwio	r4,0(r2)
}
    5a38:	e037883a 	mov	sp,fp
    5a3c:	df000017 	ldw	fp,0(sp)
    5a40:	dec00104 	addi	sp,sp,4
    5a44:	f800283a 	ret

00005a48 <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
    5a48:	deffe404 	addi	sp,sp,-112
    5a4c:	dfc01b15 	stw	ra,108(sp)
    5a50:	df001a15 	stw	fp,104(sp)
    5a54:	df001a04 	addi	fp,sp,104
    5a58:	e13fe815 	stw	r4,-96(fp)
    5a5c:	e17fe915 	stw	r5,-92(fp)
    5a60:	e1bfea15 	stw	r6,-88(fp)
    5a64:	e1ffeb15 	stw	r7,-84(fp)
	register int x_0 = x0;
    5a68:	e0bfe917 	ldw	r2,-92(fp)
    5a6c:	e0bffa15 	stw	r2,-24(fp)
	register int y_0 = y0;
    5a70:	e0ffea17 	ldw	r3,-88(fp)
    5a74:	e0fff915 	stw	r3,-28(fp)
	register int x_1 = x1;
    5a78:	e13feb17 	ldw	r4,-84(fp)
    5a7c:	e13ff815 	stw	r4,-32(fp)
	register int y_1 = y1;
    5a80:	e0800217 	ldw	r2,8(fp)
    5a84:	e0bff715 	stw	r2,-36(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
    5a88:	e0fff717 	ldw	r3,-36(fp)
    5a8c:	e13ff917 	ldw	r4,-28(fp)
    5a90:	1905c83a 	sub	r2,r3,r4
    5a94:	e0bfff15 	stw	r2,-4(fp)
    5a98:	e0ffff17 	ldw	r3,-4(fp)
    5a9c:	1804403a 	cmpge	r2,r3,zero
    5aa0:	1000031e 	bne	r2,zero,5ab0 <alt_up_pixel_buffer_dma_draw_line+0x68>
    5aa4:	e13fff17 	ldw	r4,-4(fp)
    5aa8:	0109c83a 	sub	r4,zero,r4
    5aac:	e13fff15 	stw	r4,-4(fp)
    5ab0:	e0fff817 	ldw	r3,-32(fp)
    5ab4:	e13ffa17 	ldw	r4,-24(fp)
    5ab8:	1905c83a 	sub	r2,r3,r4
    5abc:	e0bffe15 	stw	r2,-8(fp)
    5ac0:	e0fffe17 	ldw	r3,-8(fp)
    5ac4:	1804403a 	cmpge	r2,r3,zero
    5ac8:	1000031e 	bne	r2,zero,5ad8 <alt_up_pixel_buffer_dma_draw_line+0x90>
    5acc:	e13ffe17 	ldw	r4,-8(fp)
    5ad0:	0109c83a 	sub	r4,zero,r4
    5ad4:	e13ffe15 	stw	r4,-8(fp)
    5ad8:	e0fffe17 	ldw	r3,-8(fp)
    5adc:	e13fff17 	ldw	r4,-4(fp)
    5ae0:	1904803a 	cmplt	r2,r3,r4
    5ae4:	e0bff605 	stb	r2,-40(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
    5ae8:	e0bfe817 	ldw	r2,-96(fp)
    5aec:	10800e17 	ldw	r2,56(r2)
    5af0:	10800060 	cmpeqi	r2,r2,1
    5af4:	10000c1e 	bne	r2,zero,5b28 <alt_up_pixel_buffer_dma_draw_line+0xe0>
    5af8:	e0bfe817 	ldw	r2,-96(fp)
    5afc:	10800e17 	ldw	r2,56(r2)
    5b00:	10800098 	cmpnei	r2,r2,2
    5b04:	1000031e 	bne	r2,zero,5b14 <alt_up_pixel_buffer_dma_draw_line+0xcc>
    5b08:	00800044 	movi	r2,1
    5b0c:	e0bffc15 	stw	r2,-16(fp)
    5b10:	00000206 	br	5b1c <alt_up_pixel_buffer_dma_draw_line+0xd4>
    5b14:	00c00084 	movi	r3,2
    5b18:	e0fffc15 	stw	r3,-16(fp)
    5b1c:	e13ffc17 	ldw	r4,-16(fp)
    5b20:	e13ffd15 	stw	r4,-12(fp)
    5b24:	00000106 	br	5b2c <alt_up_pixel_buffer_dma_draw_line+0xe4>
    5b28:	e03ffd15 	stw	zero,-12(fp)
    5b2c:	e0bffd17 	ldw	r2,-12(fp)
    5b30:	e0bfef15 	stw	r2,-68(fp)
	register int line_color = color;
    5b34:	e0c00317 	ldw	r3,12(fp)
    5b38:	e0ffee15 	stw	r3,-72(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
    5b3c:	e0bfe817 	ldw	r2,-96(fp)
    5b40:	10800d17 	ldw	r2,52(r2)
    5b44:	1004c03a 	cmpne	r2,r2,zero
    5b48:	1000091e 	bne	r2,zero,5b70 <alt_up_pixel_buffer_dma_draw_line+0x128>
    5b4c:	e0bfe817 	ldw	r2,-96(fp)
    5b50:	10c01317 	ldw	r3,76(r2)
    5b54:	e0bfef17 	ldw	r2,-68(fp)
    5b58:	1885c83a 	sub	r2,r3,r2
    5b5c:	1007883a 	mov	r3,r2
    5b60:	00800044 	movi	r2,1
    5b64:	10c4983a 	sll	r2,r2,r3
    5b68:	e0bffb15 	stw	r2,-20(fp)
    5b6c:	00000306 	br	5b7c <alt_up_pixel_buffer_dma_draw_line+0x134>
    5b70:	e0bfe817 	ldw	r2,-96(fp)
    5b74:	10800f17 	ldw	r2,60(r2)
    5b78:	e0bffb15 	stw	r2,-20(fp)
    5b7c:	e13ffb17 	ldw	r4,-20(fp)
    5b80:	e13fec15 	stw	r4,-80(fp)

	if (backbuffer == 1)
    5b84:	e0800417 	ldw	r2,16(fp)
    5b88:	10800058 	cmpnei	r2,r2,1
    5b8c:	1000041e 	bne	r2,zero,5ba0 <alt_up_pixel_buffer_dma_draw_line+0x158>
		buffer_start = pixel_buffer->back_buffer_start_address;
    5b90:	e0bfe817 	ldw	r2,-96(fp)
    5b94:	10800c17 	ldw	r2,48(r2)
    5b98:	e0bfed15 	stw	r2,-76(fp)
    5b9c:	00000306 	br	5bac <alt_up_pixel_buffer_dma_draw_line+0x164>
	else
		buffer_start = pixel_buffer->buffer_start_address;
    5ba0:	e0bfe817 	ldw	r2,-96(fp)
    5ba4:	10800b17 	ldw	r2,44(r2)
    5ba8:	e0bfed15 	stw	r2,-76(fp)

	/* Preprocessing inputs */
	if (steep > 0) {
    5bac:	e0fff603 	ldbu	r3,-40(fp)
    5bb0:	18803fcc 	andi	r2,r3,255
    5bb4:	1080201c 	xori	r2,r2,128
    5bb8:	10bfe004 	addi	r2,r2,-128
    5bbc:	10800050 	cmplti	r2,r2,1
    5bc0:	10000c1e 	bne	r2,zero,5bf4 <alt_up_pixel_buffer_dma_draw_line+0x1ac>
		// Swap x_0 and y_0
		error = x_0;
    5bc4:	e13ffa17 	ldw	r4,-24(fp)
    5bc8:	e13ff315 	stw	r4,-52(fp)
		x_0 = y_0;
    5bcc:	e0bff917 	ldw	r2,-28(fp)
    5bd0:	e0bffa15 	stw	r2,-24(fp)
		y_0 = error;
    5bd4:	e0fff317 	ldw	r3,-52(fp)
    5bd8:	e0fff915 	stw	r3,-28(fp)
		// Swap x_1 and y_1
		error = x_1;
    5bdc:	e13ff817 	ldw	r4,-32(fp)
    5be0:	e13ff315 	stw	r4,-52(fp)
		x_1 = y_1;
    5be4:	e0bff717 	ldw	r2,-36(fp)
    5be8:	e0bff815 	stw	r2,-32(fp)
		y_1 = error;
    5bec:	e0fff317 	ldw	r3,-52(fp)
    5bf0:	e0fff715 	stw	r3,-36(fp)
	}
	if (x_0 > x_1) {
    5bf4:	e13ff817 	ldw	r4,-32(fp)
    5bf8:	e0bffa17 	ldw	r2,-24(fp)
    5bfc:	20800c0e 	bge	r4,r2,5c30 <alt_up_pixel_buffer_dma_draw_line+0x1e8>
		// Swap x_0 and x_1
		error = x_0;
    5c00:	e0fffa17 	ldw	r3,-24(fp)
    5c04:	e0fff315 	stw	r3,-52(fp)
		x_0 = x_1;
    5c08:	e13ff817 	ldw	r4,-32(fp)
    5c0c:	e13ffa15 	stw	r4,-24(fp)
		x_1 = error;
    5c10:	e0bff317 	ldw	r2,-52(fp)
    5c14:	e0bff815 	stw	r2,-32(fp)
		// Swap y_0 and y_1
		error = y_0;
    5c18:	e0fff917 	ldw	r3,-28(fp)
    5c1c:	e0fff315 	stw	r3,-52(fp)
		y_0 = y_1;
    5c20:	e13ff717 	ldw	r4,-36(fp)
    5c24:	e13ff915 	stw	r4,-28(fp)
		y_1 = error;
    5c28:	e0bff317 	ldw	r2,-52(fp)
    5c2c:	e0bff715 	stw	r2,-36(fp)
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
    5c30:	e0fff817 	ldw	r3,-32(fp)
    5c34:	e13ffa17 	ldw	r4,-24(fp)
    5c38:	1907c83a 	sub	r3,r3,r4
    5c3c:	e0fff515 	stw	r3,-44(fp)
	deltay = ABS(y_1 - y_0);
    5c40:	e0fff717 	ldw	r3,-36(fp)
    5c44:	e13ff917 	ldw	r4,-28(fp)
    5c48:	1905c83a 	sub	r2,r3,r4
    5c4c:	e0bff415 	stw	r2,-48(fp)
    5c50:	e0fff417 	ldw	r3,-48(fp)
    5c54:	1804403a 	cmpge	r2,r3,zero
    5c58:	1000031e 	bne	r2,zero,5c68 <alt_up_pixel_buffer_dma_draw_line+0x220>
    5c5c:	e13ff417 	ldw	r4,-48(fp)
    5c60:	0109c83a 	sub	r4,zero,r4
    5c64:	e13ff415 	stw	r4,-48(fp)
	error = -(deltax / 2); 
    5c68:	e0fff517 	ldw	r3,-44(fp)
    5c6c:	1804d7fa 	srli	r2,r3,31
    5c70:	e13ff517 	ldw	r4,-44(fp)
    5c74:	1105883a 	add	r2,r2,r4
    5c78:	1005d07a 	srai	r2,r2,1
    5c7c:	0085c83a 	sub	r2,zero,r2
    5c80:	e0bff315 	stw	r2,-52(fp)
	y = y_0;
    5c84:	e0bff917 	ldw	r2,-28(fp)
    5c88:	e0bff015 	stw	r2,-64(fp)
	if (y_0 < y_1)
    5c8c:	e0fff917 	ldw	r3,-28(fp)
    5c90:	e13ff717 	ldw	r4,-36(fp)
    5c94:	1900030e 	bge	r3,r4,5ca4 <alt_up_pixel_buffer_dma_draw_line+0x25c>
		ystep = 1;
    5c98:	00800044 	movi	r2,1
    5c9c:	e0bff215 	stw	r2,-56(fp)
    5ca0:	00000206 	br	5cac <alt_up_pixel_buffer_dma_draw_line+0x264>
	else
		ystep = -1;
    5ca4:	00ffffc4 	movi	r3,-1
    5ca8:	e0fff215 	stw	r3,-56(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
    5cac:	e13ff603 	ldbu	r4,-40(fp)
    5cb0:	20803fcc 	andi	r2,r4,255
    5cb4:	1080201c 	xori	r2,r2,128
    5cb8:	10bfe004 	addi	r2,r2,-128
    5cbc:	10800058 	cmpnei	r2,r2,1
    5cc0:	1000221e 	bne	r2,zero,5d4c <alt_up_pixel_buffer_dma_draw_line+0x304>
	{
		for (x=x_0; x <= x_1; x++) {
    5cc4:	e0bffa17 	ldw	r2,-24(fp)
    5cc8:	e0bff115 	stw	r2,-60(fp)
    5ccc:	00001b06 	br	5d3c <alt_up_pixel_buffer_dma_draw_line+0x2f4>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
    5cd0:	e0ffee17 	ldw	r3,-72(fp)
    5cd4:	d8c00015 	stw	r3,0(sp)
    5cd8:	e13fef17 	ldw	r4,-68(fp)
    5cdc:	d9000115 	stw	r4,4(sp)
    5ce0:	e13fed17 	ldw	r4,-76(fp)
    5ce4:	e17fec17 	ldw	r5,-80(fp)
    5ce8:	e1bff017 	ldw	r6,-64(fp)
    5cec:	e1fff117 	ldw	r7,-60(fp)
    5cf0:	00059780 	call	5978 <helper_plot_pixel>
			error = error + deltay;
    5cf4:	e0bff317 	ldw	r2,-52(fp)
    5cf8:	e0fff417 	ldw	r3,-48(fp)
    5cfc:	10c5883a 	add	r2,r2,r3
    5d00:	e0bff315 	stw	r2,-52(fp)
			if (error > 0) {
    5d04:	e13ff317 	ldw	r4,-52(fp)
    5d08:	20800050 	cmplti	r2,r4,1
    5d0c:	1000081e 	bne	r2,zero,5d30 <alt_up_pixel_buffer_dma_draw_line+0x2e8>
				y = y + ystep;
    5d10:	e0bff017 	ldw	r2,-64(fp)
    5d14:	e0fff217 	ldw	r3,-56(fp)
    5d18:	10c5883a 	add	r2,r2,r3
    5d1c:	e0bff015 	stw	r2,-64(fp)
				error = error - deltax;
    5d20:	e13ff317 	ldw	r4,-52(fp)
    5d24:	e0bff517 	ldw	r2,-44(fp)
    5d28:	2089c83a 	sub	r4,r4,r2
    5d2c:	e13ff315 	stw	r4,-52(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
    5d30:	e0fff117 	ldw	r3,-60(fp)
    5d34:	18c00044 	addi	r3,r3,1
    5d38:	e0fff115 	stw	r3,-60(fp)
    5d3c:	e13ff817 	ldw	r4,-32(fp)
    5d40:	e0bff117 	ldw	r2,-60(fp)
    5d44:	20bfe20e 	bge	r4,r2,5cd0 <alt_up_pixel_buffer_dma_draw_line+0x288>
    5d48:	00002106 	br	5dd0 <alt_up_pixel_buffer_dma_draw_line+0x388>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
    5d4c:	e0fffa17 	ldw	r3,-24(fp)
    5d50:	e0fff115 	stw	r3,-60(fp)
    5d54:	00001b06 	br	5dc4 <alt_up_pixel_buffer_dma_draw_line+0x37c>
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
    5d58:	e13fee17 	ldw	r4,-72(fp)
    5d5c:	d9000015 	stw	r4,0(sp)
    5d60:	e0bfef17 	ldw	r2,-68(fp)
    5d64:	d8800115 	stw	r2,4(sp)
    5d68:	e13fed17 	ldw	r4,-76(fp)
    5d6c:	e17fec17 	ldw	r5,-80(fp)
    5d70:	e1bff117 	ldw	r6,-60(fp)
    5d74:	e1fff017 	ldw	r7,-64(fp)
    5d78:	00059780 	call	5978 <helper_plot_pixel>
			error = error + deltay;
    5d7c:	e0fff317 	ldw	r3,-52(fp)
    5d80:	e13ff417 	ldw	r4,-48(fp)
    5d84:	1907883a 	add	r3,r3,r4
    5d88:	e0fff315 	stw	r3,-52(fp)
			if (error > 0) {
    5d8c:	e0fff317 	ldw	r3,-52(fp)
    5d90:	18800050 	cmplti	r2,r3,1
    5d94:	1000081e 	bne	r2,zero,5db8 <alt_up_pixel_buffer_dma_draw_line+0x370>
				y = y + ystep;
    5d98:	e13ff017 	ldw	r4,-64(fp)
    5d9c:	e0bff217 	ldw	r2,-56(fp)
    5da0:	2089883a 	add	r4,r4,r2
    5da4:	e13ff015 	stw	r4,-64(fp)
				error = error - deltax;
    5da8:	e0fff317 	ldw	r3,-52(fp)
    5dac:	e13ff517 	ldw	r4,-44(fp)
    5db0:	1907c83a 	sub	r3,r3,r4
    5db4:	e0fff315 	stw	r3,-52(fp)
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
    5db8:	e0bff117 	ldw	r2,-60(fp)
    5dbc:	10800044 	addi	r2,r2,1
    5dc0:	e0bff115 	stw	r2,-60(fp)
    5dc4:	e0fff817 	ldw	r3,-32(fp)
    5dc8:	e13ff117 	ldw	r4,-60(fp)
    5dcc:	193fe20e 	bge	r3,r4,5d58 <alt_up_pixel_buffer_dma_draw_line+0x310>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
    5dd0:	e037883a 	mov	sp,fp
    5dd4:	dfc00117 	ldw	ra,4(sp)
    5dd8:	df000017 	ldw	fp,0(sp)
    5ddc:	dec00204 	addi	sp,sp,8
    5de0:	f800283a 	ret

00005de4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    5de4:	defff404 	addi	sp,sp,-48
    5de8:	df000b15 	stw	fp,44(sp)
    5dec:	df000b04 	addi	fp,sp,44
    5df0:	e13ffb15 	stw	r4,-20(fp)
    5df4:	e17ffc15 	stw	r5,-16(fp)
    5df8:	e1bffd15 	stw	r6,-12(fp)
    5dfc:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    5e00:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    5e04:	00800074 	movhi	r2,1
    5e08:	10b63004 	addi	r2,r2,-10048
    5e0c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    5e10:	1005003a 	cmpeq	r2,r2,zero
    5e14:	1000411e 	bne	r2,zero,5f1c <alt_alarm_start+0x138>
  {
    if (alarm)
    5e18:	e0bffb17 	ldw	r2,-20(fp)
    5e1c:	1005003a 	cmpeq	r2,r2,zero
    5e20:	10003b1e 	bne	r2,zero,5f10 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
    5e24:	e0fffb17 	ldw	r3,-20(fp)
    5e28:	e0bffd17 	ldw	r2,-12(fp)
    5e2c:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
    5e30:	e0fffb17 	ldw	r3,-20(fp)
    5e34:	e0bffe17 	ldw	r2,-8(fp)
    5e38:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5e3c:	0005303a 	rdctl	r2,status
    5e40:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5e44:	e0fff817 	ldw	r3,-32(fp)
    5e48:	00bfff84 	movi	r2,-2
    5e4c:	1884703a 	and	r2,r3,r2
    5e50:	1001703a 	wrctl	status,r2
  
  return context;
    5e54:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    5e58:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    5e5c:	00800074 	movhi	r2,1
    5e60:	10b63104 	addi	r2,r2,-10044
    5e64:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    5e68:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    5e6c:	e0fffc17 	ldw	r3,-16(fp)
    5e70:	e0bff917 	ldw	r2,-28(fp)
    5e74:	1885883a 	add	r2,r3,r2
    5e78:	10c00044 	addi	r3,r2,1
    5e7c:	e0bffb17 	ldw	r2,-20(fp)
    5e80:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    5e84:	e0bffb17 	ldw	r2,-20(fp)
    5e88:	10c00217 	ldw	r3,8(r2)
    5e8c:	e0bff917 	ldw	r2,-28(fp)
    5e90:	1880042e 	bgeu	r3,r2,5ea4 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
    5e94:	e0fffb17 	ldw	r3,-20(fp)
    5e98:	00800044 	movi	r2,1
    5e9c:	18800405 	stb	r2,16(r3)
    5ea0:	00000206 	br	5eac <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
    5ea4:	e0bffb17 	ldw	r2,-20(fp)
    5ea8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    5eac:	e0fffb17 	ldw	r3,-20(fp)
    5eb0:	00800074 	movhi	r2,1
    5eb4:	10aea004 	addi	r2,r2,-17792
    5eb8:	e0bff615 	stw	r2,-40(fp)
    5ebc:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    5ec0:	e0fff717 	ldw	r3,-36(fp)
    5ec4:	e0bff617 	ldw	r2,-40(fp)
    5ec8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    5ecc:	e0bff617 	ldw	r2,-40(fp)
    5ed0:	10c00017 	ldw	r3,0(r2)
    5ed4:	e0bff717 	ldw	r2,-36(fp)
    5ed8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    5edc:	e0bff617 	ldw	r2,-40(fp)
    5ee0:	10c00017 	ldw	r3,0(r2)
    5ee4:	e0bff717 	ldw	r2,-36(fp)
    5ee8:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    5eec:	e0fff617 	ldw	r3,-40(fp)
    5ef0:	e0bff717 	ldw	r2,-36(fp)
    5ef4:	18800015 	stw	r2,0(r3)
    5ef8:	e0bffa17 	ldw	r2,-24(fp)
    5efc:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5f00:	e0bff517 	ldw	r2,-44(fp)
    5f04:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    5f08:	e03fff15 	stw	zero,-4(fp)
    5f0c:	00000506 	br	5f24 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
    5f10:	00bffa84 	movi	r2,-22
    5f14:	e0bfff15 	stw	r2,-4(fp)
    5f18:	00000206 	br	5f24 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
    5f1c:	00bfde84 	movi	r2,-134
    5f20:	e0bfff15 	stw	r2,-4(fp)
    5f24:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    5f28:	e037883a 	mov	sp,fp
    5f2c:	df000017 	ldw	fp,0(sp)
    5f30:	dec00104 	addi	sp,sp,4
    5f34:	f800283a 	ret

00005f38 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    5f38:	defff804 	addi	sp,sp,-32
    5f3c:	dfc00715 	stw	ra,28(sp)
    5f40:	df000615 	stw	fp,24(sp)
    5f44:	df000604 	addi	fp,sp,24
    5f48:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    5f4c:	e0bffc17 	ldw	r2,-16(fp)
    5f50:	1004803a 	cmplt	r2,r2,zero
    5f54:	1000081e 	bne	r2,zero,5f78 <close+0x40>
    5f58:	e0bffc17 	ldw	r2,-16(fp)
    5f5c:	10800324 	muli	r2,r2,12
    5f60:	1007883a 	mov	r3,r2
    5f64:	00800074 	movhi	r2,1
    5f68:	10ac3704 	addi	r2,r2,-20260
    5f6c:	1887883a 	add	r3,r3,r2
    5f70:	e0ffff15 	stw	r3,-4(fp)
    5f74:	00000106 	br	5f7c <close+0x44>
    5f78:	e03fff15 	stw	zero,-4(fp)
    5f7c:	e0bfff17 	ldw	r2,-4(fp)
    5f80:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    5f84:	e0bffb17 	ldw	r2,-20(fp)
    5f88:	1005003a 	cmpeq	r2,r2,zero
    5f8c:	10001d1e 	bne	r2,zero,6004 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    5f90:	e0bffb17 	ldw	r2,-20(fp)
    5f94:	10800017 	ldw	r2,0(r2)
    5f98:	10800417 	ldw	r2,16(r2)
    5f9c:	1005003a 	cmpeq	r2,r2,zero
    5fa0:	1000071e 	bne	r2,zero,5fc0 <close+0x88>
    5fa4:	e0bffb17 	ldw	r2,-20(fp)
    5fa8:	10800017 	ldw	r2,0(r2)
    5fac:	10800417 	ldw	r2,16(r2)
    5fb0:	e13ffb17 	ldw	r4,-20(fp)
    5fb4:	103ee83a 	callr	r2
    5fb8:	e0bffe15 	stw	r2,-8(fp)
    5fbc:	00000106 	br	5fc4 <close+0x8c>
    5fc0:	e03ffe15 	stw	zero,-8(fp)
    5fc4:	e0bffe17 	ldw	r2,-8(fp)
    5fc8:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    5fcc:	e13ffc17 	ldw	r4,-16(fp)
    5fd0:	000677c0 	call	677c <alt_release_fd>
    if (rval < 0)
    5fd4:	e0bffa17 	ldw	r2,-24(fp)
    5fd8:	1004403a 	cmpge	r2,r2,zero
    5fdc:	1000071e 	bne	r2,zero,5ffc <close+0xc4>
    {
      ALT_ERRNO = -rval;
    5fe0:	00060340 	call	6034 <alt_get_errno>
    5fe4:	e0fffa17 	ldw	r3,-24(fp)
    5fe8:	00c7c83a 	sub	r3,zero,r3
    5fec:	10c00015 	stw	r3,0(r2)
      return -1;
    5ff0:	00bfffc4 	movi	r2,-1
    5ff4:	e0bffd15 	stw	r2,-12(fp)
    5ff8:	00000806 	br	601c <close+0xe4>
    }
    return 0;
    5ffc:	e03ffd15 	stw	zero,-12(fp)
    6000:	00000606 	br	601c <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    6004:	00060340 	call	6034 <alt_get_errno>
    6008:	1007883a 	mov	r3,r2
    600c:	00801444 	movi	r2,81
    6010:	18800015 	stw	r2,0(r3)
    return -1;
    6014:	00bfffc4 	movi	r2,-1
    6018:	e0bffd15 	stw	r2,-12(fp)
    601c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    6020:	e037883a 	mov	sp,fp
    6024:	dfc00117 	ldw	ra,4(sp)
    6028:	df000017 	ldw	fp,0(sp)
    602c:	dec00204 	addi	sp,sp,8
    6030:	f800283a 	ret

00006034 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    6034:	defffd04 	addi	sp,sp,-12
    6038:	dfc00215 	stw	ra,8(sp)
    603c:	df000115 	stw	fp,4(sp)
    6040:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    6044:	00800074 	movhi	r2,1
    6048:	10ae9f04 	addi	r2,r2,-17796
    604c:	10800017 	ldw	r2,0(r2)
    6050:	1005003a 	cmpeq	r2,r2,zero
    6054:	1000061e 	bne	r2,zero,6070 <alt_get_errno+0x3c>
    6058:	00800074 	movhi	r2,1
    605c:	10ae9f04 	addi	r2,r2,-17796
    6060:	10800017 	ldw	r2,0(r2)
    6064:	103ee83a 	callr	r2
    6068:	e0bfff15 	stw	r2,-4(fp)
    606c:	00000306 	br	607c <alt_get_errno+0x48>
    6070:	00800074 	movhi	r2,1
    6074:	10b63204 	addi	r2,r2,-10040
    6078:	e0bfff15 	stw	r2,-4(fp)
    607c:	e0bfff17 	ldw	r2,-4(fp)
}
    6080:	e037883a 	mov	sp,fp
    6084:	dfc00117 	ldw	ra,4(sp)
    6088:	df000017 	ldw	fp,0(sp)
    608c:	dec00204 	addi	sp,sp,8
    6090:	f800283a 	ret

00006094 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    6094:	deffff04 	addi	sp,sp,-4
    6098:	df000015 	stw	fp,0(sp)
    609c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    60a0:	e037883a 	mov	sp,fp
    60a4:	df000017 	ldw	fp,0(sp)
    60a8:	dec00104 	addi	sp,sp,4
    60ac:	f800283a 	ret

000060b0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    60b0:	defffc04 	addi	sp,sp,-16
    60b4:	df000315 	stw	fp,12(sp)
    60b8:	df000304 	addi	fp,sp,12
    60bc:	e13ffd15 	stw	r4,-12(fp)
    60c0:	e17ffe15 	stw	r5,-8(fp)
    60c4:	e1bfff15 	stw	r6,-4(fp)
  return len;
    60c8:	e0bfff17 	ldw	r2,-4(fp)
}
    60cc:	e037883a 	mov	sp,fp
    60d0:	df000017 	ldw	fp,0(sp)
    60d4:	dec00104 	addi	sp,sp,4
    60d8:	f800283a 	ret

000060dc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    60dc:	defff904 	addi	sp,sp,-28
    60e0:	dfc00615 	stw	ra,24(sp)
    60e4:	df000515 	stw	fp,20(sp)
    60e8:	df000504 	addi	fp,sp,20
    60ec:	e13ffd15 	stw	r4,-12(fp)
    60f0:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    60f4:	e0bffd17 	ldw	r2,-12(fp)
    60f8:	1005003a 	cmpeq	r2,r2,zero
    60fc:	1000041e 	bne	r2,zero,6110 <alt_dev_llist_insert+0x34>
    6100:	e0bffd17 	ldw	r2,-12(fp)
    6104:	10800217 	ldw	r2,8(r2)
    6108:	1004c03a 	cmpne	r2,r2,zero
    610c:	1000071e 	bne	r2,zero,612c <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    6110:	00061900 	call	6190 <alt_get_errno>
    6114:	1007883a 	mov	r3,r2
    6118:	00800584 	movi	r2,22
    611c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    6120:	00bffa84 	movi	r2,-22
    6124:	e0bfff15 	stw	r2,-4(fp)
    6128:	00001306 	br	6178 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    612c:	e0fffd17 	ldw	r3,-12(fp)
    6130:	e0bffe17 	ldw	r2,-8(fp)
    6134:	e0bffb15 	stw	r2,-20(fp)
    6138:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    613c:	e0fffc17 	ldw	r3,-16(fp)
    6140:	e0bffb17 	ldw	r2,-20(fp)
    6144:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    6148:	e0bffb17 	ldw	r2,-20(fp)
    614c:	10c00017 	ldw	r3,0(r2)
    6150:	e0bffc17 	ldw	r2,-16(fp)
    6154:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    6158:	e0bffb17 	ldw	r2,-20(fp)
    615c:	10c00017 	ldw	r3,0(r2)
    6160:	e0bffc17 	ldw	r2,-16(fp)
    6164:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    6168:	e0fffb17 	ldw	r3,-20(fp)
    616c:	e0bffc17 	ldw	r2,-16(fp)
    6170:	18800015 	stw	r2,0(r3)

  return 0;  
    6174:	e03fff15 	stw	zero,-4(fp)
    6178:	e0bfff17 	ldw	r2,-4(fp)
}
    617c:	e037883a 	mov	sp,fp
    6180:	dfc00117 	ldw	ra,4(sp)
    6184:	df000017 	ldw	fp,0(sp)
    6188:	dec00204 	addi	sp,sp,8
    618c:	f800283a 	ret

00006190 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    6190:	defffd04 	addi	sp,sp,-12
    6194:	dfc00215 	stw	ra,8(sp)
    6198:	df000115 	stw	fp,4(sp)
    619c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    61a0:	00800074 	movhi	r2,1
    61a4:	10ae9f04 	addi	r2,r2,-17796
    61a8:	10800017 	ldw	r2,0(r2)
    61ac:	1005003a 	cmpeq	r2,r2,zero
    61b0:	1000061e 	bne	r2,zero,61cc <alt_get_errno+0x3c>
    61b4:	00800074 	movhi	r2,1
    61b8:	10ae9f04 	addi	r2,r2,-17796
    61bc:	10800017 	ldw	r2,0(r2)
    61c0:	103ee83a 	callr	r2
    61c4:	e0bfff15 	stw	r2,-4(fp)
    61c8:	00000306 	br	61d8 <alt_get_errno+0x48>
    61cc:	00800074 	movhi	r2,1
    61d0:	10b63204 	addi	r2,r2,-10040
    61d4:	e0bfff15 	stw	r2,-4(fp)
    61d8:	e0bfff17 	ldw	r2,-4(fp)
}
    61dc:	e037883a 	mov	sp,fp
    61e0:	dfc00117 	ldw	ra,4(sp)
    61e4:	df000017 	ldw	fp,0(sp)
    61e8:	dec00204 	addi	sp,sp,8
    61ec:	f800283a 	ret

000061f0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    61f0:	defffd04 	addi	sp,sp,-12
    61f4:	dfc00215 	stw	ra,8(sp)
    61f8:	df000115 	stw	fp,4(sp)
    61fc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    6200:	00bfff04 	movi	r2,-4
    6204:	00c00074 	movhi	r3,1
    6208:	18e5f504 	addi	r3,r3,-26668
    620c:	1885883a 	add	r2,r3,r2
    6210:	e0bfff15 	stw	r2,-4(fp)
    6214:	00000606 	br	6230 <_do_ctors+0x40>
        (*ctor) (); 
    6218:	e0bfff17 	ldw	r2,-4(fp)
    621c:	10800017 	ldw	r2,0(r2)
    6220:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    6224:	e0bfff17 	ldw	r2,-4(fp)
    6228:	10bfff04 	addi	r2,r2,-4
    622c:	e0bfff15 	stw	r2,-4(fp)
    6230:	e0ffff17 	ldw	r3,-4(fp)
    6234:	00800074 	movhi	r2,1
    6238:	10a5f404 	addi	r2,r2,-26672
    623c:	18bff62e 	bgeu	r3,r2,6218 <_do_ctors+0x28>
        (*ctor) (); 
}
    6240:	e037883a 	mov	sp,fp
    6244:	dfc00117 	ldw	ra,4(sp)
    6248:	df000017 	ldw	fp,0(sp)
    624c:	dec00204 	addi	sp,sp,8
    6250:	f800283a 	ret

00006254 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    6254:	defffd04 	addi	sp,sp,-12
    6258:	dfc00215 	stw	ra,8(sp)
    625c:	df000115 	stw	fp,4(sp)
    6260:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    6264:	00bfff04 	movi	r2,-4
    6268:	00c00074 	movhi	r3,1
    626c:	18e5f504 	addi	r3,r3,-26668
    6270:	1885883a 	add	r2,r3,r2
    6274:	e0bfff15 	stw	r2,-4(fp)
    6278:	00000606 	br	6294 <_do_dtors+0x40>
        (*dtor) (); 
    627c:	e0bfff17 	ldw	r2,-4(fp)
    6280:	10800017 	ldw	r2,0(r2)
    6284:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    6288:	e0bfff17 	ldw	r2,-4(fp)
    628c:	10bfff04 	addi	r2,r2,-4
    6290:	e0bfff15 	stw	r2,-4(fp)
    6294:	e0ffff17 	ldw	r3,-4(fp)
    6298:	00800074 	movhi	r2,1
    629c:	10a5f504 	addi	r2,r2,-26668
    62a0:	18bff62e 	bgeu	r3,r2,627c <_do_dtors+0x28>
        (*dtor) (); 
}
    62a4:	e037883a 	mov	sp,fp
    62a8:	dfc00117 	ldw	ra,4(sp)
    62ac:	df000017 	ldw	fp,0(sp)
    62b0:	dec00204 	addi	sp,sp,8
    62b4:	f800283a 	ret

000062b8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    62b8:	defff904 	addi	sp,sp,-28
    62bc:	dfc00615 	stw	ra,24(sp)
    62c0:	df000515 	stw	fp,20(sp)
    62c4:	df000504 	addi	fp,sp,20
    62c8:	e13ffd15 	stw	r4,-12(fp)
    62cc:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    62d0:	e0bffe17 	ldw	r2,-8(fp)
    62d4:	10800017 	ldw	r2,0(r2)
    62d8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    62dc:	e13ffd17 	ldw	r4,-12(fp)
    62e0:	00070cc0 	call	70cc <strlen>
    62e4:	10800044 	addi	r2,r2,1
    62e8:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    62ec:	00000d06 	br	6324 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    62f0:	e0bffc17 	ldw	r2,-16(fp)
    62f4:	11000217 	ldw	r4,8(r2)
    62f8:	e1bffb17 	ldw	r6,-20(fp)
    62fc:	e17ffd17 	ldw	r5,-12(fp)
    6300:	0006db00 	call	6db0 <memcmp>
    6304:	1004c03a 	cmpne	r2,r2,zero
    6308:	1000031e 	bne	r2,zero,6318 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    630c:	e0bffc17 	ldw	r2,-16(fp)
    6310:	e0bfff15 	stw	r2,-4(fp)
    6314:	00000706 	br	6334 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    6318:	e0bffc17 	ldw	r2,-16(fp)
    631c:	10800017 	ldw	r2,0(r2)
    6320:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    6324:	e0fffe17 	ldw	r3,-8(fp)
    6328:	e0bffc17 	ldw	r2,-16(fp)
    632c:	10fff01e 	bne	r2,r3,62f0 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    6330:	e03fff15 	stw	zero,-4(fp)
    6334:	e0bfff17 	ldw	r2,-4(fp)
}
    6338:	e037883a 	mov	sp,fp
    633c:	dfc00117 	ldw	ra,4(sp)
    6340:	df000017 	ldw	fp,0(sp)
    6344:	dec00204 	addi	sp,sp,8
    6348:	f800283a 	ret

0000634c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    634c:	defffe04 	addi	sp,sp,-8
    6350:	dfc00115 	stw	ra,4(sp)
    6354:	df000015 	stw	fp,0(sp)
    6358:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    635c:	0009883a 	mov	r4,zero
    6360:	01440004 	movi	r5,4096
    6364:	0006cd40 	call	6cd4 <alt_icache_flush>
#endif
}
    6368:	e037883a 	mov	sp,fp
    636c:	dfc00117 	ldw	ra,4(sp)
    6370:	df000017 	ldw	fp,0(sp)
    6374:	dec00204 	addi	sp,sp,8
    6378:	f800283a 	ret

0000637c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    637c:	defff904 	addi	sp,sp,-28
    6380:	dfc00615 	stw	ra,24(sp)
    6384:	df000515 	stw	fp,20(sp)
    6388:	df000504 	addi	fp,sp,20
    638c:	e13ffc15 	stw	r4,-16(fp)
    6390:	e17ffd15 	stw	r5,-12(fp)
    6394:	e1bffe15 	stw	r6,-8(fp)
    6398:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    639c:	e13ffd17 	ldw	r4,-12(fp)
    63a0:	e17ffe17 	ldw	r5,-8(fp)
    63a4:	e1bfff17 	ldw	r6,-4(fp)
    63a8:	00065940 	call	6594 <open>
    63ac:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    63b0:	e0bffb17 	ldw	r2,-20(fp)
    63b4:	1004803a 	cmplt	r2,r2,zero
    63b8:	10001c1e 	bne	r2,zero,642c <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
    63bc:	e0bffb17 	ldw	r2,-20(fp)
    63c0:	00c00074 	movhi	r3,1
    63c4:	18ec3704 	addi	r3,r3,-20260
    63c8:	10800324 	muli	r2,r2,12
    63cc:	10c5883a 	add	r2,r2,r3
    63d0:	10c00017 	ldw	r3,0(r2)
    63d4:	e0bffc17 	ldw	r2,-16(fp)
    63d8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    63dc:	e0bffb17 	ldw	r2,-20(fp)
    63e0:	00c00074 	movhi	r3,1
    63e4:	18ec3704 	addi	r3,r3,-20260
    63e8:	10800324 	muli	r2,r2,12
    63ec:	10c5883a 	add	r2,r2,r3
    63f0:	10800104 	addi	r2,r2,4
    63f4:	10c00017 	ldw	r3,0(r2)
    63f8:	e0bffc17 	ldw	r2,-16(fp)
    63fc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    6400:	e0bffb17 	ldw	r2,-20(fp)
    6404:	00c00074 	movhi	r3,1
    6408:	18ec3704 	addi	r3,r3,-20260
    640c:	10800324 	muli	r2,r2,12
    6410:	10c5883a 	add	r2,r2,r3
    6414:	10800204 	addi	r2,r2,8
    6418:	10c00017 	ldw	r3,0(r2)
    641c:	e0bffc17 	ldw	r2,-16(fp)
    6420:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    6424:	e13ffb17 	ldw	r4,-20(fp)
    6428:	000677c0 	call	677c <alt_release_fd>
  }
} 
    642c:	e037883a 	mov	sp,fp
    6430:	dfc00117 	ldw	ra,4(sp)
    6434:	df000017 	ldw	fp,0(sp)
    6438:	dec00204 	addi	sp,sp,8
    643c:	f800283a 	ret

00006440 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    6440:	defffb04 	addi	sp,sp,-20
    6444:	dfc00415 	stw	ra,16(sp)
    6448:	df000315 	stw	fp,12(sp)
    644c:	df000304 	addi	fp,sp,12
    6450:	e13ffd15 	stw	r4,-12(fp)
    6454:	e17ffe15 	stw	r5,-8(fp)
    6458:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    645c:	01000074 	movhi	r4,1
    6460:	212c3a04 	addi	r4,r4,-20248
    6464:	e17ffd17 	ldw	r5,-12(fp)
    6468:	01800044 	movi	r6,1
    646c:	01c07fc4 	movi	r7,511
    6470:	000637c0 	call	637c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    6474:	01000074 	movhi	r4,1
    6478:	212c3704 	addi	r4,r4,-20260
    647c:	e17ffe17 	ldw	r5,-8(fp)
    6480:	000d883a 	mov	r6,zero
    6484:	01c07fc4 	movi	r7,511
    6488:	000637c0 	call	637c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    648c:	01000074 	movhi	r4,1
    6490:	212c3d04 	addi	r4,r4,-20236
    6494:	e17fff17 	ldw	r5,-4(fp)
    6498:	01800044 	movi	r6,1
    649c:	01c07fc4 	movi	r7,511
    64a0:	000637c0 	call	637c <alt_open_fd>
}  
    64a4:	e037883a 	mov	sp,fp
    64a8:	dfc00117 	ldw	ra,4(sp)
    64ac:	df000017 	ldw	fp,0(sp)
    64b0:	dec00204 	addi	sp,sp,8
    64b4:	f800283a 	ret

000064b8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    64b8:	defffc04 	addi	sp,sp,-16
    64bc:	df000315 	stw	fp,12(sp)
    64c0:	df000304 	addi	fp,sp,12
    64c4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    64c8:	e0bffe17 	ldw	r2,-8(fp)
    64cc:	10800217 	ldw	r2,8(r2)
    64d0:	10d00034 	orhi	r3,r2,16384
    64d4:	e0bffe17 	ldw	r2,-8(fp)
    64d8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    64dc:	e03ffd15 	stw	zero,-12(fp)
    64e0:	00002006 	br	6564 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    64e4:	e0bffd17 	ldw	r2,-12(fp)
    64e8:	00c00074 	movhi	r3,1
    64ec:	18ec3704 	addi	r3,r3,-20260
    64f0:	10800324 	muli	r2,r2,12
    64f4:	10c5883a 	add	r2,r2,r3
    64f8:	10c00017 	ldw	r3,0(r2)
    64fc:	e0bffe17 	ldw	r2,-8(fp)
    6500:	10800017 	ldw	r2,0(r2)
    6504:	1880141e 	bne	r3,r2,6558 <alt_file_locked+0xa0>
    6508:	e0bffd17 	ldw	r2,-12(fp)
    650c:	00c00074 	movhi	r3,1
    6510:	18ec3704 	addi	r3,r3,-20260
    6514:	10800324 	muli	r2,r2,12
    6518:	10c5883a 	add	r2,r2,r3
    651c:	10800204 	addi	r2,r2,8
    6520:	10800017 	ldw	r2,0(r2)
    6524:	1004403a 	cmpge	r2,r2,zero
    6528:	10000b1e 	bne	r2,zero,6558 <alt_file_locked+0xa0>
    652c:	e0bffd17 	ldw	r2,-12(fp)
    6530:	10800324 	muli	r2,r2,12
    6534:	1007883a 	mov	r3,r2
    6538:	00800074 	movhi	r2,1
    653c:	10ac3704 	addi	r2,r2,-20260
    6540:	1887883a 	add	r3,r3,r2
    6544:	e0bffe17 	ldw	r2,-8(fp)
    6548:	18800326 	beq	r3,r2,6558 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    654c:	00bffcc4 	movi	r2,-13
    6550:	e0bfff15 	stw	r2,-4(fp)
    6554:	00000a06 	br	6580 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    6558:	e0bffd17 	ldw	r2,-12(fp)
    655c:	10800044 	addi	r2,r2,1
    6560:	e0bffd15 	stw	r2,-12(fp)
    6564:	00800074 	movhi	r2,1
    6568:	10ae9e04 	addi	r2,r2,-17800
    656c:	10800017 	ldw	r2,0(r2)
    6570:	1007883a 	mov	r3,r2
    6574:	e0bffd17 	ldw	r2,-12(fp)
    6578:	18bfda2e 	bgeu	r3,r2,64e4 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    657c:	e03fff15 	stw	zero,-4(fp)
    6580:	e0bfff17 	ldw	r2,-4(fp)
}
    6584:	e037883a 	mov	sp,fp
    6588:	df000017 	ldw	fp,0(sp)
    658c:	dec00104 	addi	sp,sp,4
    6590:	f800283a 	ret

00006594 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    6594:	defff404 	addi	sp,sp,-48
    6598:	dfc00b15 	stw	ra,44(sp)
    659c:	df000a15 	stw	fp,40(sp)
    65a0:	df000a04 	addi	fp,sp,40
    65a4:	e13ffb15 	stw	r4,-20(fp)
    65a8:	e17ffc15 	stw	r5,-16(fp)
    65ac:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    65b0:	00bfffc4 	movi	r2,-1
    65b4:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    65b8:	00bffb44 	movi	r2,-19
    65bc:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    65c0:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    65c4:	e13ffb17 	ldw	r4,-20(fp)
    65c8:	01400074 	movhi	r5,1
    65cc:	296e9c04 	addi	r5,r5,-17808
    65d0:	00062b80 	call	62b8 <alt_find_dev>
    65d4:	e0bffa15 	stw	r2,-24(fp)
    65d8:	e0bffa17 	ldw	r2,-24(fp)
    65dc:	1004c03a 	cmpne	r2,r2,zero
    65e0:	1000051e 	bne	r2,zero,65f8 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    65e4:	e13ffb17 	ldw	r4,-20(fp)
    65e8:	0006afc0 	call	6afc <alt_find_file>
    65ec:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    65f0:	00800044 	movi	r2,1
    65f4:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    65f8:	e0bffa17 	ldw	r2,-24(fp)
    65fc:	1005003a 	cmpeq	r2,r2,zero
    6600:	1000301e 	bne	r2,zero,66c4 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
    6604:	e13ffa17 	ldw	r4,-24(fp)
    6608:	0006c1c0 	call	6c1c <alt_get_fd>
    660c:	e0bff815 	stw	r2,-32(fp)
    6610:	e0bff817 	ldw	r2,-32(fp)
    6614:	1004403a 	cmpge	r2,r2,zero
    6618:	1000031e 	bne	r2,zero,6628 <open+0x94>
    {
      status = index;
    661c:	e0bff817 	ldw	r2,-32(fp)
    6620:	e0bff715 	stw	r2,-36(fp)
    6624:	00002906 	br	66cc <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
    6628:	e0bff817 	ldw	r2,-32(fp)
    662c:	10800324 	muli	r2,r2,12
    6630:	1007883a 	mov	r3,r2
    6634:	00800074 	movhi	r2,1
    6638:	10ac3704 	addi	r2,r2,-20260
    663c:	1885883a 	add	r2,r3,r2
    6640:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    6644:	e0fffc17 	ldw	r3,-16(fp)
    6648:	00900034 	movhi	r2,16384
    664c:	10bfffc4 	addi	r2,r2,-1
    6650:	1886703a 	and	r3,r3,r2
    6654:	e0bff917 	ldw	r2,-28(fp)
    6658:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    665c:	e0bff617 	ldw	r2,-40(fp)
    6660:	1004c03a 	cmpne	r2,r2,zero
    6664:	1000061e 	bne	r2,zero,6680 <open+0xec>
    6668:	e13ff917 	ldw	r4,-28(fp)
    666c:	00064b80 	call	64b8 <alt_file_locked>
    6670:	e0bff715 	stw	r2,-36(fp)
    6674:	e0bff717 	ldw	r2,-36(fp)
    6678:	1004803a 	cmplt	r2,r2,zero
    667c:	1000131e 	bne	r2,zero,66cc <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    6680:	e0bffa17 	ldw	r2,-24(fp)
    6684:	10800317 	ldw	r2,12(r2)
    6688:	1005003a 	cmpeq	r2,r2,zero
    668c:	1000091e 	bne	r2,zero,66b4 <open+0x120>
    6690:	e0bffa17 	ldw	r2,-24(fp)
    6694:	10800317 	ldw	r2,12(r2)
    6698:	e13ff917 	ldw	r4,-28(fp)
    669c:	e17ffb17 	ldw	r5,-20(fp)
    66a0:	e1bffc17 	ldw	r6,-16(fp)
    66a4:	e1fffd17 	ldw	r7,-12(fp)
    66a8:	103ee83a 	callr	r2
    66ac:	e0bfff15 	stw	r2,-4(fp)
    66b0:	00000106 	br	66b8 <open+0x124>
    66b4:	e03fff15 	stw	zero,-4(fp)
    66b8:	e0bfff17 	ldw	r2,-4(fp)
    66bc:	e0bff715 	stw	r2,-36(fp)
    66c0:	00000206 	br	66cc <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
    66c4:	00bffb44 	movi	r2,-19
    66c8:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    66cc:	e0bff717 	ldw	r2,-36(fp)
    66d0:	1004403a 	cmpge	r2,r2,zero
    66d4:	1000091e 	bne	r2,zero,66fc <open+0x168>
  {
    alt_release_fd (index);  
    66d8:	e13ff817 	ldw	r4,-32(fp)
    66dc:	000677c0 	call	677c <alt_release_fd>
    ALT_ERRNO = -status;
    66e0:	000671c0 	call	671c <alt_get_errno>
    66e4:	e0fff717 	ldw	r3,-36(fp)
    66e8:	00c7c83a 	sub	r3,zero,r3
    66ec:	10c00015 	stw	r3,0(r2)
    return -1;
    66f0:	00bfffc4 	movi	r2,-1
    66f4:	e0bffe15 	stw	r2,-8(fp)
    66f8:	00000206 	br	6704 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
    66fc:	e0bff817 	ldw	r2,-32(fp)
    6700:	e0bffe15 	stw	r2,-8(fp)
    6704:	e0bffe17 	ldw	r2,-8(fp)
}
    6708:	e037883a 	mov	sp,fp
    670c:	dfc00117 	ldw	ra,4(sp)
    6710:	df000017 	ldw	fp,0(sp)
    6714:	dec00204 	addi	sp,sp,8
    6718:	f800283a 	ret

0000671c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    671c:	defffd04 	addi	sp,sp,-12
    6720:	dfc00215 	stw	ra,8(sp)
    6724:	df000115 	stw	fp,4(sp)
    6728:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    672c:	00800074 	movhi	r2,1
    6730:	10ae9f04 	addi	r2,r2,-17796
    6734:	10800017 	ldw	r2,0(r2)
    6738:	1005003a 	cmpeq	r2,r2,zero
    673c:	1000061e 	bne	r2,zero,6758 <alt_get_errno+0x3c>
    6740:	00800074 	movhi	r2,1
    6744:	10ae9f04 	addi	r2,r2,-17796
    6748:	10800017 	ldw	r2,0(r2)
    674c:	103ee83a 	callr	r2
    6750:	e0bfff15 	stw	r2,-4(fp)
    6754:	00000306 	br	6764 <alt_get_errno+0x48>
    6758:	00800074 	movhi	r2,1
    675c:	10b63204 	addi	r2,r2,-10040
    6760:	e0bfff15 	stw	r2,-4(fp)
    6764:	e0bfff17 	ldw	r2,-4(fp)
}
    6768:	e037883a 	mov	sp,fp
    676c:	dfc00117 	ldw	ra,4(sp)
    6770:	df000017 	ldw	fp,0(sp)
    6774:	dec00204 	addi	sp,sp,8
    6778:	f800283a 	ret

0000677c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    677c:	defffe04 	addi	sp,sp,-8
    6780:	df000115 	stw	fp,4(sp)
    6784:	df000104 	addi	fp,sp,4
    6788:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    678c:	e0bfff17 	ldw	r2,-4(fp)
    6790:	108000d0 	cmplti	r2,r2,3
    6794:	10000d1e 	bne	r2,zero,67cc <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    6798:	e0bfff17 	ldw	r2,-4(fp)
    679c:	00c00074 	movhi	r3,1
    67a0:	18ec3704 	addi	r3,r3,-20260
    67a4:	10800324 	muli	r2,r2,12
    67a8:	10c5883a 	add	r2,r2,r3
    67ac:	10800204 	addi	r2,r2,8
    67b0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    67b4:	e0bfff17 	ldw	r2,-4(fp)
    67b8:	00c00074 	movhi	r3,1
    67bc:	18ec3704 	addi	r3,r3,-20260
    67c0:	10800324 	muli	r2,r2,12
    67c4:	10c5883a 	add	r2,r2,r3
    67c8:	10000015 	stw	zero,0(r2)
  }
}
    67cc:	e037883a 	mov	sp,fp
    67d0:	df000017 	ldw	fp,0(sp)
    67d4:	dec00104 	addi	sp,sp,4
    67d8:	f800283a 	ret

000067dc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    67dc:	defffa04 	addi	sp,sp,-24
    67e0:	df000515 	stw	fp,20(sp)
    67e4:	df000504 	addi	fp,sp,20
    67e8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    67ec:	0005303a 	rdctl	r2,status
    67f0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    67f4:	e0fffd17 	ldw	r3,-12(fp)
    67f8:	00bfff84 	movi	r2,-2
    67fc:	1884703a 	and	r2,r3,r2
    6800:	1001703a 	wrctl	status,r2
  
  return context;
    6804:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    6808:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
    680c:	e0bfff17 	ldw	r2,-4(fp)
    6810:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    6814:	e0bffc17 	ldw	r2,-16(fp)
    6818:	10c00017 	ldw	r3,0(r2)
    681c:	e0bffc17 	ldw	r2,-16(fp)
    6820:	10800117 	ldw	r2,4(r2)
    6824:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    6828:	e0bffc17 	ldw	r2,-16(fp)
    682c:	10c00117 	ldw	r3,4(r2)
    6830:	e0bffc17 	ldw	r2,-16(fp)
    6834:	10800017 	ldw	r2,0(r2)
    6838:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    683c:	e0fffc17 	ldw	r3,-16(fp)
    6840:	e0bffc17 	ldw	r2,-16(fp)
    6844:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
    6848:	e0fffc17 	ldw	r3,-16(fp)
    684c:	e0bffc17 	ldw	r2,-16(fp)
    6850:	18800015 	stw	r2,0(r3)
    6854:	e0bffe17 	ldw	r2,-8(fp)
    6858:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    685c:	e0bffb17 	ldw	r2,-20(fp)
    6860:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    6864:	e037883a 	mov	sp,fp
    6868:	df000017 	ldw	fp,0(sp)
    686c:	dec00104 	addi	sp,sp,4
    6870:	f800283a 	ret

00006874 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    6874:	defffb04 	addi	sp,sp,-20
    6878:	dfc00415 	stw	ra,16(sp)
    687c:	df000315 	stw	fp,12(sp)
    6880:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    6884:	d0a00717 	ldw	r2,-32740(gp)
    6888:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    688c:	d0a79817 	ldw	r2,-24992(gp)
    6890:	10800044 	addi	r2,r2,1
    6894:	d0a79815 	stw	r2,-24992(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    6898:	00003106 	br	6960 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
    689c:	e0bffe17 	ldw	r2,-8(fp)
    68a0:	10800017 	ldw	r2,0(r2)
    68a4:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    68a8:	e0bffe17 	ldw	r2,-8(fp)
    68ac:	10800403 	ldbu	r2,16(r2)
    68b0:	10803fcc 	andi	r2,r2,255
    68b4:	1005003a 	cmpeq	r2,r2,zero
    68b8:	1000051e 	bne	r2,zero,68d0 <alt_tick+0x5c>
    68bc:	d0a79817 	ldw	r2,-24992(gp)
    68c0:	1004c03a 	cmpne	r2,r2,zero
    68c4:	1000021e 	bne	r2,zero,68d0 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
    68c8:	e0bffe17 	ldw	r2,-8(fp)
    68cc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    68d0:	e0bffe17 	ldw	r2,-8(fp)
    68d4:	10c00217 	ldw	r3,8(r2)
    68d8:	d0a79817 	ldw	r2,-24992(gp)
    68dc:	10c01e36 	bltu	r2,r3,6958 <alt_tick+0xe4>
    68e0:	e0bffe17 	ldw	r2,-8(fp)
    68e4:	10800403 	ldbu	r2,16(r2)
    68e8:	10803fcc 	andi	r2,r2,255
    68ec:	1004c03a 	cmpne	r2,r2,zero
    68f0:	1000191e 	bne	r2,zero,6958 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
    68f4:	e0bffe17 	ldw	r2,-8(fp)
    68f8:	10c00317 	ldw	r3,12(r2)
    68fc:	e0bffe17 	ldw	r2,-8(fp)
    6900:	11000517 	ldw	r4,20(r2)
    6904:	183ee83a 	callr	r3
    6908:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    690c:	e0bffd17 	ldw	r2,-12(fp)
    6910:	1004c03a 	cmpne	r2,r2,zero
    6914:	1000031e 	bne	r2,zero,6924 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
    6918:	e13ffe17 	ldw	r4,-8(fp)
    691c:	00067dc0 	call	67dc <alt_alarm_stop>
    6920:	00000d06 	br	6958 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
    6924:	e0bffe17 	ldw	r2,-8(fp)
    6928:	10c00217 	ldw	r3,8(r2)
    692c:	e0bffd17 	ldw	r2,-12(fp)
    6930:	1887883a 	add	r3,r3,r2
    6934:	e0bffe17 	ldw	r2,-8(fp)
    6938:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    693c:	e0bffe17 	ldw	r2,-8(fp)
    6940:	10c00217 	ldw	r3,8(r2)
    6944:	d0a79817 	ldw	r2,-24992(gp)
    6948:	1880032e 	bgeu	r3,r2,6958 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
    694c:	e0fffe17 	ldw	r3,-8(fp)
    6950:	00800044 	movi	r2,1
    6954:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
    6958:	e0bfff17 	ldw	r2,-4(fp)
    695c:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    6960:	d0e00704 	addi	r3,gp,-32740
    6964:	e0bffe17 	ldw	r2,-8(fp)
    6968:	10ffcc1e 	bne	r2,r3,689c <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    696c:	e037883a 	mov	sp,fp
    6970:	dfc00117 	ldw	ra,4(sp)
    6974:	df000017 	ldw	fp,0(sp)
    6978:	dec00204 	addi	sp,sp,8
    697c:	f800283a 	ret

00006980 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    6980:	defffd04 	addi	sp,sp,-12
    6984:	dfc00215 	stw	ra,8(sp)
    6988:	df000115 	stw	fp,4(sp)
    698c:	df000104 	addi	fp,sp,4
    6990:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    6994:	e13fff17 	ldw	r4,-4(fp)
    6998:	00069d00 	call	69d0 <alt_busy_sleep>
}
    699c:	e037883a 	mov	sp,fp
    69a0:	dfc00117 	ldw	ra,4(sp)
    69a4:	df000017 	ldw	fp,0(sp)
    69a8:	dec00204 	addi	sp,sp,8
    69ac:	f800283a 	ret

000069b0 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    69b0:	deffff04 	addi	sp,sp,-4
    69b4:	df000015 	stw	fp,0(sp)
    69b8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    69bc:	000170fa 	wrctl	ienable,zero
}
    69c0:	e037883a 	mov	sp,fp
    69c4:	df000017 	ldw	fp,0(sp)
    69c8:	dec00104 	addi	sp,sp,4
    69cc:	f800283a 	ret

000069d0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    69d0:	defffb04 	addi	sp,sp,-20
    69d4:	df000415 	stw	fp,16(sp)
    69d8:	df000404 	addi	fp,sp,16
    69dc:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
    69e0:	008000c4 	movi	r2,3
    69e4:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
    69e8:	e0fffc17 	ldw	r3,-16(fp)
    69ec:	008003f4 	movhi	r2,15
    69f0:	10909004 	addi	r2,r2,16960
    69f4:	1887383a 	mul	r3,r3,r2
    69f8:	0080bef4 	movhi	r2,763
    69fc:	10bc2004 	addi	r2,r2,-3968
    6a00:	10c7203a 	divu	r3,r2,r3
    6a04:	00a00034 	movhi	r2,32768
    6a08:	10bfffc4 	addi	r2,r2,-1
    6a0c:	10c7203a 	divu	r3,r2,r3
    6a10:	e0bfff17 	ldw	r2,-4(fp)
    6a14:	10c5203a 	divu	r2,r2,r3
    6a18:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    6a1c:	e0bffd17 	ldw	r2,-12(fp)
    6a20:	1005003a 	cmpeq	r2,r2,zero
    6a24:	1000251e 	bne	r2,zero,6abc <alt_busy_sleep+0xec>
  {
    for(i=0;i<big_loops;i++)
    6a28:	e03ffe15 	stw	zero,-8(fp)
    6a2c:	00001406 	br	6a80 <alt_busy_sleep+0xb0>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    6a30:	00a00034 	movhi	r2,32768
    6a34:	10bfffc4 	addi	r2,r2,-1
    6a38:	10bfffc4 	addi	r2,r2,-1
    6a3c:	103ffe1e 	bne	r2,zero,6a38 <alt_busy_sleep+0x68>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    6a40:	e0fffc17 	ldw	r3,-16(fp)
    6a44:	008003f4 	movhi	r2,15
    6a48:	10909004 	addi	r2,r2,16960
    6a4c:	1887383a 	mul	r3,r3,r2
    6a50:	0080bef4 	movhi	r2,763
    6a54:	10bc2004 	addi	r2,r2,-3968
    6a58:	10c7203a 	divu	r3,r2,r3
    6a5c:	00a00034 	movhi	r2,32768
    6a60:	10bfffc4 	addi	r2,r2,-1
    6a64:	10c7203a 	divu	r3,r2,r3
    6a68:	e0bfff17 	ldw	r2,-4(fp)
    6a6c:	10c5c83a 	sub	r2,r2,r3
    6a70:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    6a74:	e0bffe17 	ldw	r2,-8(fp)
    6a78:	10800044 	addi	r2,r2,1
    6a7c:	e0bffe15 	stw	r2,-8(fp)
    6a80:	e0fffe17 	ldw	r3,-8(fp)
    6a84:	e0bffd17 	ldw	r2,-12(fp)
    6a88:	18bfe916 	blt	r3,r2,6a30 <alt_busy_sleep+0x60>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    6a8c:	e0fffc17 	ldw	r3,-16(fp)
    6a90:	008003f4 	movhi	r2,15
    6a94:	10909004 	addi	r2,r2,16960
    6a98:	1887383a 	mul	r3,r3,r2
    6a9c:	0080bef4 	movhi	r2,763
    6aa0:	10bc2004 	addi	r2,r2,-3968
    6aa4:	10c7203a 	divu	r3,r2,r3
    6aa8:	e0bfff17 	ldw	r2,-4(fp)
    6aac:	1885383a 	mul	r2,r3,r2
    6ab0:	10bfffc4 	addi	r2,r2,-1
    6ab4:	103ffe1e 	bne	r2,zero,6ab0 <alt_busy_sleep+0xe0>
    6ab8:	00000b06 	br	6ae8 <alt_busy_sleep+0x118>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    6abc:	e0fffc17 	ldw	r3,-16(fp)
    6ac0:	008003f4 	movhi	r2,15
    6ac4:	10909004 	addi	r2,r2,16960
    6ac8:	1887383a 	mul	r3,r3,r2
    6acc:	0080bef4 	movhi	r2,763
    6ad0:	10bc2004 	addi	r2,r2,-3968
    6ad4:	10c7203a 	divu	r3,r2,r3
    6ad8:	e0bfff17 	ldw	r2,-4(fp)
    6adc:	1885383a 	mul	r2,r3,r2
    6ae0:	10bfffc4 	addi	r2,r2,-1
    6ae4:	00bffe16 	blt	zero,r2,6ae0 <alt_busy_sleep+0x110>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    6ae8:	0005883a 	mov	r2,zero
}
    6aec:	e037883a 	mov	sp,fp
    6af0:	df000017 	ldw	fp,0(sp)
    6af4:	dec00104 	addi	sp,sp,4
    6af8:	f800283a 	ret

00006afc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    6afc:	defffa04 	addi	sp,sp,-24
    6b00:	dfc00515 	stw	ra,20(sp)
    6b04:	df000415 	stw	fp,16(sp)
    6b08:	df000404 	addi	fp,sp,16
    6b0c:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    6b10:	00800074 	movhi	r2,1
    6b14:	10ae9a04 	addi	r2,r2,-17816
    6b18:	10800017 	ldw	r2,0(r2)
    6b1c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    6b20:	00003306 	br	6bf0 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    6b24:	e0bffd17 	ldw	r2,-12(fp)
    6b28:	11000217 	ldw	r4,8(r2)
    6b2c:	00070cc0 	call	70cc <strlen>
    6b30:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    6b34:	e0bffd17 	ldw	r2,-12(fp)
    6b38:	10c00217 	ldw	r3,8(r2)
    6b3c:	e0bffc17 	ldw	r2,-16(fp)
    6b40:	1885883a 	add	r2,r3,r2
    6b44:	10bfffc4 	addi	r2,r2,-1
    6b48:	10800003 	ldbu	r2,0(r2)
    6b4c:	10803fcc 	andi	r2,r2,255
    6b50:	1080201c 	xori	r2,r2,128
    6b54:	10bfe004 	addi	r2,r2,-128
    6b58:	10800bd8 	cmpnei	r2,r2,47
    6b5c:	1000031e 	bne	r2,zero,6b6c <alt_find_file+0x70>
    {
      len -= 1;
    6b60:	e0bffc17 	ldw	r2,-16(fp)
    6b64:	10bfffc4 	addi	r2,r2,-1
    6b68:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    6b6c:	e0bffc17 	ldw	r2,-16(fp)
    6b70:	1007883a 	mov	r3,r2
    6b74:	e0bffe17 	ldw	r2,-8(fp)
    6b78:	1885883a 	add	r2,r3,r2
    6b7c:	10800003 	ldbu	r2,0(r2)
    6b80:	10803fcc 	andi	r2,r2,255
    6b84:	1080201c 	xori	r2,r2,128
    6b88:	10bfe004 	addi	r2,r2,-128
    6b8c:	10800be0 	cmpeqi	r2,r2,47
    6b90:	10000a1e 	bne	r2,zero,6bbc <alt_find_file+0xc0>
    6b94:	e0bffc17 	ldw	r2,-16(fp)
    6b98:	1007883a 	mov	r3,r2
    6b9c:	e0bffe17 	ldw	r2,-8(fp)
    6ba0:	1885883a 	add	r2,r3,r2
    6ba4:	10800003 	ldbu	r2,0(r2)
    6ba8:	10803fcc 	andi	r2,r2,255
    6bac:	1080201c 	xori	r2,r2,128
    6bb0:	10bfe004 	addi	r2,r2,-128
    6bb4:	1004c03a 	cmpne	r2,r2,zero
    6bb8:	10000a1e 	bne	r2,zero,6be4 <alt_find_file+0xe8>
    6bbc:	e0bffd17 	ldw	r2,-12(fp)
    6bc0:	11000217 	ldw	r4,8(r2)
    6bc4:	e1bffc17 	ldw	r6,-16(fp)
    6bc8:	e17ffe17 	ldw	r5,-8(fp)
    6bcc:	0006db00 	call	6db0 <memcmp>
    6bd0:	1004c03a 	cmpne	r2,r2,zero
    6bd4:	1000031e 	bne	r2,zero,6be4 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    6bd8:	e0bffd17 	ldw	r2,-12(fp)
    6bdc:	e0bfff15 	stw	r2,-4(fp)
    6be0:	00000806 	br	6c04 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    6be4:	e0bffd17 	ldw	r2,-12(fp)
    6be8:	10800017 	ldw	r2,0(r2)
    6bec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    6bf0:	00c00074 	movhi	r3,1
    6bf4:	18ee9a04 	addi	r3,r3,-17816
    6bf8:	e0bffd17 	ldw	r2,-12(fp)
    6bfc:	10ffc91e 	bne	r2,r3,6b24 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    6c00:	e03fff15 	stw	zero,-4(fp)
    6c04:	e0bfff17 	ldw	r2,-4(fp)
}
    6c08:	e037883a 	mov	sp,fp
    6c0c:	dfc00117 	ldw	ra,4(sp)
    6c10:	df000017 	ldw	fp,0(sp)
    6c14:	dec00204 	addi	sp,sp,8
    6c18:	f800283a 	ret

00006c1c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    6c1c:	defffc04 	addi	sp,sp,-16
    6c20:	df000315 	stw	fp,12(sp)
    6c24:	df000304 	addi	fp,sp,12
    6c28:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    6c2c:	00bffa04 	movi	r2,-24
    6c30:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    6c34:	e03ffe15 	stw	zero,-8(fp)
    6c38:	00001e06 	br	6cb4 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
    6c3c:	e0bffe17 	ldw	r2,-8(fp)
    6c40:	00c00074 	movhi	r3,1
    6c44:	18ec3704 	addi	r3,r3,-20260
    6c48:	10800324 	muli	r2,r2,12
    6c4c:	10c5883a 	add	r2,r2,r3
    6c50:	10800017 	ldw	r2,0(r2)
    6c54:	1004c03a 	cmpne	r2,r2,zero
    6c58:	1000131e 	bne	r2,zero,6ca8 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
    6c5c:	e0bffe17 	ldw	r2,-8(fp)
    6c60:	00c00074 	movhi	r3,1
    6c64:	18ec3704 	addi	r3,r3,-20260
    6c68:	10800324 	muli	r2,r2,12
    6c6c:	10c7883a 	add	r3,r2,r3
    6c70:	e0bfff17 	ldw	r2,-4(fp)
    6c74:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    6c78:	00800074 	movhi	r2,1
    6c7c:	10ae9e04 	addi	r2,r2,-17800
    6c80:	10c00017 	ldw	r3,0(r2)
    6c84:	e0bffe17 	ldw	r2,-8(fp)
    6c88:	1880040e 	bge	r3,r2,6c9c <alt_get_fd+0x80>
      {
        alt_max_fd = i;
    6c8c:	00c00074 	movhi	r3,1
    6c90:	18ee9e04 	addi	r3,r3,-17800
    6c94:	e0bffe17 	ldw	r2,-8(fp)
    6c98:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    6c9c:	e0bffe17 	ldw	r2,-8(fp)
    6ca0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    6ca4:	00000606 	br	6cc0 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    6ca8:	e0bffe17 	ldw	r2,-8(fp)
    6cac:	10800044 	addi	r2,r2,1
    6cb0:	e0bffe15 	stw	r2,-8(fp)
    6cb4:	e0bffe17 	ldw	r2,-8(fp)
    6cb8:	10800810 	cmplti	r2,r2,32
    6cbc:	103fdf1e 	bne	r2,zero,6c3c <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    6cc0:	e0bffd17 	ldw	r2,-12(fp)
}
    6cc4:	e037883a 	mov	sp,fp
    6cc8:	df000017 	ldw	fp,0(sp)
    6ccc:	dec00104 	addi	sp,sp,4
    6cd0:	f800283a 	ret

00006cd4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    6cd4:	defffb04 	addi	sp,sp,-20
    6cd8:	df000415 	stw	fp,16(sp)
    6cdc:	df000404 	addi	fp,sp,16
    6ce0:	e13ffe15 	stw	r4,-8(fp)
    6ce4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    6ce8:	e0bfff17 	ldw	r2,-4(fp)
    6cec:	10840070 	cmpltui	r2,r2,4097
    6cf0:	1000021e 	bne	r2,zero,6cfc <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    6cf4:	00840004 	movi	r2,4096
    6cf8:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    6cfc:	e0fffe17 	ldw	r3,-8(fp)
    6d00:	e0bfff17 	ldw	r2,-4(fp)
    6d04:	1885883a 	add	r2,r3,r2
    6d08:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    6d0c:	e0bffe17 	ldw	r2,-8(fp)
    6d10:	e0bffd15 	stw	r2,-12(fp)
    6d14:	00000506 	br	6d2c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    6d18:	e0bffd17 	ldw	r2,-12(fp)
    6d1c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    6d20:	e0bffd17 	ldw	r2,-12(fp)
    6d24:	10800804 	addi	r2,r2,32
    6d28:	e0bffd15 	stw	r2,-12(fp)
    6d2c:	e0fffd17 	ldw	r3,-12(fp)
    6d30:	e0bffc17 	ldw	r2,-16(fp)
    6d34:	18bff836 	bltu	r3,r2,6d18 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    6d38:	e0bffe17 	ldw	r2,-8(fp)
    6d3c:	108007cc 	andi	r2,r2,31
    6d40:	1005003a 	cmpeq	r2,r2,zero
    6d44:	1000021e 	bne	r2,zero,6d50 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    6d48:	e0bffd17 	ldw	r2,-12(fp)
    6d4c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    6d50:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    6d54:	e037883a 	mov	sp,fp
    6d58:	df000017 	ldw	fp,0(sp)
    6d5c:	dec00104 	addi	sp,sp,4
    6d60:	f800283a 	ret

00006d64 <atexit>:
    6d64:	200b883a 	mov	r5,r4
    6d68:	000d883a 	mov	r6,zero
    6d6c:	0009883a 	mov	r4,zero
    6d70:	000f883a 	mov	r7,zero
    6d74:	00073c81 	jmpi	73c8 <__register_exitproc>

00006d78 <exit>:
    6d78:	defffe04 	addi	sp,sp,-8
    6d7c:	000b883a 	mov	r5,zero
    6d80:	dc000015 	stw	r16,0(sp)
    6d84:	dfc00115 	stw	ra,4(sp)
    6d88:	2021883a 	mov	r16,r4
    6d8c:	00075000 	call	7500 <__call_exitprocs>
    6d90:	00800074 	movhi	r2,1
    6d94:	10aea304 	addi	r2,r2,-17780
    6d98:	11000017 	ldw	r4,0(r2)
    6d9c:	20800f17 	ldw	r2,60(r4)
    6da0:	10000126 	beq	r2,zero,6da8 <exit+0x30>
    6da4:	103ee83a 	callr	r2
    6da8:	8009883a 	mov	r4,r16
    6dac:	00090100 	call	9010 <_exit>

00006db0 <memcmp>:
    6db0:	00c000c4 	movi	r3,3
    6db4:	1980032e 	bgeu	r3,r6,6dc4 <memcmp+0x14>
    6db8:	2144b03a 	or	r2,r4,r5
    6dbc:	10c4703a 	and	r2,r2,r3
    6dc0:	10000f26 	beq	r2,zero,6e00 <memcmp+0x50>
    6dc4:	31ffffc4 	addi	r7,r6,-1
    6dc8:	3000061e 	bne	r6,zero,6de4 <memcmp+0x34>
    6dcc:	00000a06 	br	6df8 <memcmp+0x48>
    6dd0:	39ffffc4 	addi	r7,r7,-1
    6dd4:	00bfffc4 	movi	r2,-1
    6dd8:	21000044 	addi	r4,r4,1
    6ddc:	29400044 	addi	r5,r5,1
    6de0:	38800526 	beq	r7,r2,6df8 <memcmp+0x48>
    6de4:	20c00003 	ldbu	r3,0(r4)
    6de8:	28800003 	ldbu	r2,0(r5)
    6dec:	18bff826 	beq	r3,r2,6dd0 <memcmp+0x20>
    6df0:	1885c83a 	sub	r2,r3,r2
    6df4:	f800283a 	ret
    6df8:	0005883a 	mov	r2,zero
    6dfc:	f800283a 	ret
    6e00:	180f883a 	mov	r7,r3
    6e04:	20c00017 	ldw	r3,0(r4)
    6e08:	28800017 	ldw	r2,0(r5)
    6e0c:	18bfed1e 	bne	r3,r2,6dc4 <memcmp+0x14>
    6e10:	31bfff04 	addi	r6,r6,-4
    6e14:	21000104 	addi	r4,r4,4
    6e18:	29400104 	addi	r5,r5,4
    6e1c:	39bff936 	bltu	r7,r6,6e04 <memcmp+0x54>
    6e20:	003fe806 	br	6dc4 <memcmp+0x14>

00006e24 <putc>:
    6e24:	defffc04 	addi	sp,sp,-16
    6e28:	dc800215 	stw	r18,8(sp)
    6e2c:	04800074 	movhi	r18,1
    6e30:	94aea204 	addi	r18,r18,-17784
    6e34:	90c00017 	ldw	r3,0(r18)
    6e38:	dc400115 	stw	r17,4(sp)
    6e3c:	dc000015 	stw	r16,0(sp)
    6e40:	dfc00315 	stw	ra,12(sp)
    6e44:	2023883a 	mov	r17,r4
    6e48:	2821883a 	mov	r16,r5
    6e4c:	18000226 	beq	r3,zero,6e58 <putc+0x34>
    6e50:	18800e17 	ldw	r2,56(r3)
    6e54:	10001126 	beq	r2,zero,6e9c <putc+0x78>
    6e58:	80800217 	ldw	r2,8(r16)
    6e5c:	10ffffc4 	addi	r3,r2,-1
    6e60:	80c00215 	stw	r3,8(r16)
    6e64:	18001316 	blt	r3,zero,6eb4 <putc+0x90>
    6e68:	80800017 	ldw	r2,0(r16)
    6e6c:	14400005 	stb	r17,0(r2)
    6e70:	80c00017 	ldw	r3,0(r16)
    6e74:	18800044 	addi	r2,r3,1
    6e78:	18c00003 	ldbu	r3,0(r3)
    6e7c:	80800015 	stw	r2,0(r16)
    6e80:	1805883a 	mov	r2,r3
    6e84:	dfc00317 	ldw	ra,12(sp)
    6e88:	dc800217 	ldw	r18,8(sp)
    6e8c:	dc400117 	ldw	r17,4(sp)
    6e90:	dc000017 	ldw	r16,0(sp)
    6e94:	dec00404 	addi	sp,sp,16
    6e98:	f800283a 	ret
    6e9c:	1809883a 	mov	r4,r3
    6ea0:	00079480 	call	7948 <__sinit>
    6ea4:	80800217 	ldw	r2,8(r16)
    6ea8:	10ffffc4 	addi	r3,r2,-1
    6eac:	80c00215 	stw	r3,8(r16)
    6eb0:	183fed0e 	bge	r3,zero,6e68 <putc+0x44>
    6eb4:	80800617 	ldw	r2,24(r16)
    6eb8:	18800f16 	blt	r3,r2,6ef8 <putc+0xd4>
    6ebc:	80800017 	ldw	r2,0(r16)
    6ec0:	14400005 	stb	r17,0(r2)
    6ec4:	81000017 	ldw	r4,0(r16)
    6ec8:	00800284 	movi	r2,10
    6ecc:	20c00003 	ldbu	r3,0(r4)
    6ed0:	18801226 	beq	r3,r2,6f1c <putc+0xf8>
    6ed4:	20800044 	addi	r2,r4,1
    6ed8:	80800015 	stw	r2,0(r16)
    6edc:	1805883a 	mov	r2,r3
    6ee0:	dfc00317 	ldw	ra,12(sp)
    6ee4:	dc800217 	ldw	r18,8(sp)
    6ee8:	dc400117 	ldw	r17,4(sp)
    6eec:	dc000017 	ldw	r16,0(sp)
    6ef0:	dec00404 	addi	sp,sp,16
    6ef4:	f800283a 	ret
    6ef8:	91000017 	ldw	r4,0(r18)
    6efc:	880b883a 	mov	r5,r17
    6f00:	800d883a 	mov	r6,r16
    6f04:	dfc00317 	ldw	ra,12(sp)
    6f08:	dc800217 	ldw	r18,8(sp)
    6f0c:	dc400117 	ldw	r17,4(sp)
    6f10:	dc000017 	ldw	r16,0(sp)
    6f14:	dec00404 	addi	sp,sp,16
    6f18:	00071401 	jmpi	7140 <__swbuf_r>
    6f1c:	91000017 	ldw	r4,0(r18)
    6f20:	180b883a 	mov	r5,r3
    6f24:	003ff606 	br	6f00 <putc+0xdc>

00006f28 <_putc_r>:
    6f28:	defffc04 	addi	sp,sp,-16
    6f2c:	dc400215 	stw	r17,8(sp)
    6f30:	dc000115 	stw	r16,4(sp)
    6f34:	dfc00315 	stw	ra,12(sp)
    6f38:	2021883a 	mov	r16,r4
    6f3c:	2823883a 	mov	r17,r5
    6f40:	20000226 	beq	r4,zero,6f4c <_putc_r+0x24>
    6f44:	20800e17 	ldw	r2,56(r4)
    6f48:	10001026 	beq	r2,zero,6f8c <_putc_r+0x64>
    6f4c:	30800217 	ldw	r2,8(r6)
    6f50:	10ffffc4 	addi	r3,r2,-1
    6f54:	30c00215 	stw	r3,8(r6)
    6f58:	18001316 	blt	r3,zero,6fa8 <_putc_r+0x80>
    6f5c:	30800017 	ldw	r2,0(r6)
    6f60:	14400005 	stb	r17,0(r2)
    6f64:	30c00017 	ldw	r3,0(r6)
    6f68:	18800044 	addi	r2,r3,1
    6f6c:	18c00003 	ldbu	r3,0(r3)
    6f70:	30800015 	stw	r2,0(r6)
    6f74:	1805883a 	mov	r2,r3
    6f78:	dfc00317 	ldw	ra,12(sp)
    6f7c:	dc400217 	ldw	r17,8(sp)
    6f80:	dc000117 	ldw	r16,4(sp)
    6f84:	dec00404 	addi	sp,sp,16
    6f88:	f800283a 	ret
    6f8c:	d9800015 	stw	r6,0(sp)
    6f90:	00079480 	call	7948 <__sinit>
    6f94:	d9800017 	ldw	r6,0(sp)
    6f98:	30800217 	ldw	r2,8(r6)
    6f9c:	10ffffc4 	addi	r3,r2,-1
    6fa0:	30c00215 	stw	r3,8(r6)
    6fa4:	183fed0e 	bge	r3,zero,6f5c <_putc_r+0x34>
    6fa8:	30800617 	ldw	r2,24(r6)
    6fac:	18800e16 	blt	r3,r2,6fe8 <_putc_r+0xc0>
    6fb0:	30800017 	ldw	r2,0(r6)
    6fb4:	14400005 	stb	r17,0(r2)
    6fb8:	31000017 	ldw	r4,0(r6)
    6fbc:	00800284 	movi	r2,10
    6fc0:	20c00003 	ldbu	r3,0(r4)
    6fc4:	18800f26 	beq	r3,r2,7004 <_putc_r+0xdc>
    6fc8:	20800044 	addi	r2,r4,1
    6fcc:	30800015 	stw	r2,0(r6)
    6fd0:	1805883a 	mov	r2,r3
    6fd4:	dfc00317 	ldw	ra,12(sp)
    6fd8:	dc400217 	ldw	r17,8(sp)
    6fdc:	dc000117 	ldw	r16,4(sp)
    6fe0:	dec00404 	addi	sp,sp,16
    6fe4:	f800283a 	ret
    6fe8:	8009883a 	mov	r4,r16
    6fec:	880b883a 	mov	r5,r17
    6ff0:	dfc00317 	ldw	ra,12(sp)
    6ff4:	dc400217 	ldw	r17,8(sp)
    6ff8:	dc000117 	ldw	r16,4(sp)
    6ffc:	dec00404 	addi	sp,sp,16
    7000:	00071401 	jmpi	7140 <__swbuf_r>
    7004:	8009883a 	mov	r4,r16
    7008:	180b883a 	mov	r5,r3
    700c:	003ff806 	br	6ff0 <_putc_r+0xc8>

00007010 <strcmp>:
    7010:	2144b03a 	or	r2,r4,r5
    7014:	108000cc 	andi	r2,r2,3
    7018:	10001d1e 	bne	r2,zero,7090 <strcmp+0x80>
    701c:	200f883a 	mov	r7,r4
    7020:	28800017 	ldw	r2,0(r5)
    7024:	21000017 	ldw	r4,0(r4)
    7028:	280d883a 	mov	r6,r5
    702c:	2080161e 	bne	r4,r2,7088 <strcmp+0x78>
    7030:	023fbff4 	movhi	r8,65279
    7034:	423fbfc4 	addi	r8,r8,-257
    7038:	2207883a 	add	r3,r4,r8
    703c:	01602074 	movhi	r5,32897
    7040:	29602004 	addi	r5,r5,-32640
    7044:	1946703a 	and	r3,r3,r5
    7048:	0104303a 	nor	r2,zero,r4
    704c:	10c4703a 	and	r2,r2,r3
    7050:	10001c1e 	bne	r2,zero,70c4 <strcmp+0xb4>
    7054:	4013883a 	mov	r9,r8
    7058:	2811883a 	mov	r8,r5
    705c:	00000106 	br	7064 <strcmp+0x54>
    7060:	1800181e 	bne	r3,zero,70c4 <strcmp+0xb4>
    7064:	39c00104 	addi	r7,r7,4
    7068:	39000017 	ldw	r4,0(r7)
    706c:	31800104 	addi	r6,r6,4
    7070:	31400017 	ldw	r5,0(r6)
    7074:	2245883a 	add	r2,r4,r9
    7078:	1204703a 	and	r2,r2,r8
    707c:	0106303a 	nor	r3,zero,r4
    7080:	1886703a 	and	r3,r3,r2
    7084:	217ff626 	beq	r4,r5,7060 <strcmp+0x50>
    7088:	3809883a 	mov	r4,r7
    708c:	300b883a 	mov	r5,r6
    7090:	20c00007 	ldb	r3,0(r4)
    7094:	1800051e 	bne	r3,zero,70ac <strcmp+0x9c>
    7098:	00000606 	br	70b4 <strcmp+0xa4>
    709c:	21000044 	addi	r4,r4,1
    70a0:	20c00007 	ldb	r3,0(r4)
    70a4:	29400044 	addi	r5,r5,1
    70a8:	18000226 	beq	r3,zero,70b4 <strcmp+0xa4>
    70ac:	28800007 	ldb	r2,0(r5)
    70b0:	18bffa26 	beq	r3,r2,709c <strcmp+0x8c>
    70b4:	20c00003 	ldbu	r3,0(r4)
    70b8:	28800003 	ldbu	r2,0(r5)
    70bc:	1885c83a 	sub	r2,r3,r2
    70c0:	f800283a 	ret
    70c4:	0005883a 	mov	r2,zero
    70c8:	f800283a 	ret

000070cc <strlen>:
    70cc:	208000cc 	andi	r2,r4,3
    70d0:	2011883a 	mov	r8,r4
    70d4:	1000161e 	bne	r2,zero,7130 <strlen+0x64>
    70d8:	20c00017 	ldw	r3,0(r4)
    70dc:	017fbff4 	movhi	r5,65279
    70e0:	297fbfc4 	addi	r5,r5,-257
    70e4:	01e02074 	movhi	r7,32897
    70e8:	39e02004 	addi	r7,r7,-32640
    70ec:	1945883a 	add	r2,r3,r5
    70f0:	11c4703a 	and	r2,r2,r7
    70f4:	00c6303a 	nor	r3,zero,r3
    70f8:	1886703a 	and	r3,r3,r2
    70fc:	18000c1e 	bne	r3,zero,7130 <strlen+0x64>
    7100:	280d883a 	mov	r6,r5
    7104:	380b883a 	mov	r5,r7
    7108:	21000104 	addi	r4,r4,4
    710c:	20800017 	ldw	r2,0(r4)
    7110:	1187883a 	add	r3,r2,r6
    7114:	1946703a 	and	r3,r3,r5
    7118:	0084303a 	nor	r2,zero,r2
    711c:	10c4703a 	and	r2,r2,r3
    7120:	103ff926 	beq	r2,zero,7108 <strlen+0x3c>
    7124:	20800007 	ldb	r2,0(r4)
    7128:	10000326 	beq	r2,zero,7138 <strlen+0x6c>
    712c:	21000044 	addi	r4,r4,1
    7130:	20800007 	ldb	r2,0(r4)
    7134:	103ffd1e 	bne	r2,zero,712c <strlen+0x60>
    7138:	2205c83a 	sub	r2,r4,r8
    713c:	f800283a 	ret

00007140 <__swbuf_r>:
    7140:	defffc04 	addi	sp,sp,-16
    7144:	dc400215 	stw	r17,8(sp)
    7148:	dc000115 	stw	r16,4(sp)
    714c:	dfc00315 	stw	ra,12(sp)
    7150:	2023883a 	mov	r17,r4
    7154:	2821883a 	mov	r16,r5
    7158:	20000226 	beq	r4,zero,7164 <__swbuf_r+0x24>
    715c:	20800e17 	ldw	r2,56(r4)
    7160:	10002f26 	beq	r2,zero,7220 <__swbuf_r+0xe0>
    7164:	3080030b 	ldhu	r2,12(r6)
    7168:	30c00617 	ldw	r3,24(r6)
    716c:	1080020c 	andi	r2,r2,8
    7170:	30c00215 	stw	r3,8(r6)
    7174:	10002226 	beq	r2,zero,7200 <__swbuf_r+0xc0>
    7178:	30c00417 	ldw	r3,16(r6)
    717c:	18002026 	beq	r3,zero,7200 <__swbuf_r+0xc0>
    7180:	31000017 	ldw	r4,0(r6)
    7184:	30800517 	ldw	r2,20(r6)
    7188:	20c7c83a 	sub	r3,r4,r3
    718c:	18802f0e 	bge	r3,r2,724c <__swbuf_r+0x10c>
    7190:	19400044 	addi	r5,r3,1
    7194:	30800217 	ldw	r2,8(r6)
    7198:	84003fcc 	andi	r16,r16,255
    719c:	20c00044 	addi	r3,r4,1
    71a0:	10bfffc4 	addi	r2,r2,-1
    71a4:	30800215 	stw	r2,8(r6)
    71a8:	24000005 	stb	r16,0(r4)
    71ac:	30800517 	ldw	r2,20(r6)
    71b0:	30c00015 	stw	r3,0(r6)
    71b4:	11400c26 	beq	r2,r5,71e8 <__swbuf_r+0xa8>
    71b8:	3080030b 	ldhu	r2,12(r6)
    71bc:	1080004c 	andi	r2,r2,1
    71c0:	1005003a 	cmpeq	r2,r2,zero
    71c4:	10000626 	beq	r2,zero,71e0 <__swbuf_r+0xa0>
    71c8:	8005883a 	mov	r2,r16
    71cc:	dfc00317 	ldw	ra,12(sp)
    71d0:	dc400217 	ldw	r17,8(sp)
    71d4:	dc000117 	ldw	r16,4(sp)
    71d8:	dec00404 	addi	sp,sp,16
    71dc:	f800283a 	ret
    71e0:	00800284 	movi	r2,10
    71e4:	80bff81e 	bne	r16,r2,71c8 <__swbuf_r+0x88>
    71e8:	8809883a 	mov	r4,r17
    71ec:	300b883a 	mov	r5,r6
    71f0:	00076b00 	call	76b0 <_fflush_r>
    71f4:	103ff426 	beq	r2,zero,71c8 <__swbuf_r+0x88>
    71f8:	043fffc4 	movi	r16,-1
    71fc:	003ff206 	br	71c8 <__swbuf_r+0x88>
    7200:	300b883a 	mov	r5,r6
    7204:	8809883a 	mov	r4,r17
    7208:	d9800015 	stw	r6,0(sp)
    720c:	000728c0 	call	728c <__swsetup_r>
    7210:	d9800017 	ldw	r6,0(sp)
    7214:	1000061e 	bne	r2,zero,7230 <__swbuf_r+0xf0>
    7218:	30c00417 	ldw	r3,16(r6)
    721c:	003fd806 	br	7180 <__swbuf_r+0x40>
    7220:	d9800015 	stw	r6,0(sp)
    7224:	00079480 	call	7948 <__sinit>
    7228:	d9800017 	ldw	r6,0(sp)
    722c:	003fcd06 	br	7164 <__swbuf_r+0x24>
    7230:	3080030b 	ldhu	r2,12(r6)
    7234:	00c00244 	movi	r3,9
    7238:	043fffc4 	movi	r16,-1
    723c:	10801014 	ori	r2,r2,64
    7240:	3080030d 	sth	r2,12(r6)
    7244:	88c00015 	stw	r3,0(r17)
    7248:	003fdf06 	br	71c8 <__swbuf_r+0x88>
    724c:	300b883a 	mov	r5,r6
    7250:	8809883a 	mov	r4,r17
    7254:	d9800015 	stw	r6,0(sp)
    7258:	00076b00 	call	76b0 <_fflush_r>
    725c:	d9800017 	ldw	r6,0(sp)
    7260:	103fe51e 	bne	r2,zero,71f8 <__swbuf_r+0xb8>
    7264:	31000017 	ldw	r4,0(r6)
    7268:	01400044 	movi	r5,1
    726c:	003fc906 	br	7194 <__swbuf_r+0x54>

00007270 <__swbuf>:
    7270:	01800074 	movhi	r6,1
    7274:	31aea204 	addi	r6,r6,-17784
    7278:	2007883a 	mov	r3,r4
    727c:	31000017 	ldw	r4,0(r6)
    7280:	280d883a 	mov	r6,r5
    7284:	180b883a 	mov	r5,r3
    7288:	00071401 	jmpi	7140 <__swbuf_r>

0000728c <__swsetup_r>:
    728c:	00800074 	movhi	r2,1
    7290:	10aea204 	addi	r2,r2,-17784
    7294:	10c00017 	ldw	r3,0(r2)
    7298:	defffd04 	addi	sp,sp,-12
    729c:	dc400115 	stw	r17,4(sp)
    72a0:	dc000015 	stw	r16,0(sp)
    72a4:	dfc00215 	stw	ra,8(sp)
    72a8:	2023883a 	mov	r17,r4
    72ac:	2821883a 	mov	r16,r5
    72b0:	18000226 	beq	r3,zero,72bc <__swsetup_r+0x30>
    72b4:	18800e17 	ldw	r2,56(r3)
    72b8:	10001f26 	beq	r2,zero,7338 <__swsetup_r+0xac>
    72bc:	8100030b 	ldhu	r4,12(r16)
    72c0:	2080020c 	andi	r2,r4,8
    72c4:	10002826 	beq	r2,zero,7368 <__swsetup_r+0xdc>
    72c8:	81400417 	ldw	r5,16(r16)
    72cc:	28001d26 	beq	r5,zero,7344 <__swsetup_r+0xb8>
    72d0:	2080004c 	andi	r2,r4,1
    72d4:	1005003a 	cmpeq	r2,r2,zero
    72d8:	10000b26 	beq	r2,zero,7308 <__swsetup_r+0x7c>
    72dc:	2080008c 	andi	r2,r4,2
    72e0:	10001226 	beq	r2,zero,732c <__swsetup_r+0xa0>
    72e4:	0005883a 	mov	r2,zero
    72e8:	80800215 	stw	r2,8(r16)
    72ec:	28000b26 	beq	r5,zero,731c <__swsetup_r+0x90>
    72f0:	0005883a 	mov	r2,zero
    72f4:	dfc00217 	ldw	ra,8(sp)
    72f8:	dc400117 	ldw	r17,4(sp)
    72fc:	dc000017 	ldw	r16,0(sp)
    7300:	dec00304 	addi	sp,sp,12
    7304:	f800283a 	ret
    7308:	80800517 	ldw	r2,20(r16)
    730c:	80000215 	stw	zero,8(r16)
    7310:	0085c83a 	sub	r2,zero,r2
    7314:	80800615 	stw	r2,24(r16)
    7318:	283ff51e 	bne	r5,zero,72f0 <__swsetup_r+0x64>
    731c:	2080200c 	andi	r2,r4,128
    7320:	103ff326 	beq	r2,zero,72f0 <__swsetup_r+0x64>
    7324:	00bfffc4 	movi	r2,-1
    7328:	003ff206 	br	72f4 <__swsetup_r+0x68>
    732c:	80800517 	ldw	r2,20(r16)
    7330:	80800215 	stw	r2,8(r16)
    7334:	003fed06 	br	72ec <__swsetup_r+0x60>
    7338:	1809883a 	mov	r4,r3
    733c:	00079480 	call	7948 <__sinit>
    7340:	003fde06 	br	72bc <__swsetup_r+0x30>
    7344:	20c0a00c 	andi	r3,r4,640
    7348:	00808004 	movi	r2,512
    734c:	18bfe026 	beq	r3,r2,72d0 <__swsetup_r+0x44>
    7350:	8809883a 	mov	r4,r17
    7354:	800b883a 	mov	r5,r16
    7358:	00081600 	call	8160 <__smakebuf_r>
    735c:	8100030b 	ldhu	r4,12(r16)
    7360:	81400417 	ldw	r5,16(r16)
    7364:	003fda06 	br	72d0 <__swsetup_r+0x44>
    7368:	2080040c 	andi	r2,r4,16
    736c:	103fed26 	beq	r2,zero,7324 <__swsetup_r+0x98>
    7370:	2080010c 	andi	r2,r4,4
    7374:	10001226 	beq	r2,zero,73c0 <__swsetup_r+0x134>
    7378:	81400c17 	ldw	r5,48(r16)
    737c:	28000526 	beq	r5,zero,7394 <__swsetup_r+0x108>
    7380:	80801004 	addi	r2,r16,64
    7384:	28800226 	beq	r5,r2,7390 <__swsetup_r+0x104>
    7388:	8809883a 	mov	r4,r17
    738c:	0007ccc0 	call	7ccc <_free_r>
    7390:	80000c15 	stw	zero,48(r16)
    7394:	8080030b 	ldhu	r2,12(r16)
    7398:	81400417 	ldw	r5,16(r16)
    739c:	80000115 	stw	zero,4(r16)
    73a0:	10bff6cc 	andi	r2,r2,65499
    73a4:	8080030d 	sth	r2,12(r16)
    73a8:	81400015 	stw	r5,0(r16)
    73ac:	8080030b 	ldhu	r2,12(r16)
    73b0:	10800214 	ori	r2,r2,8
    73b4:	113fffcc 	andi	r4,r2,65535
    73b8:	8080030d 	sth	r2,12(r16)
    73bc:	003fc306 	br	72cc <__swsetup_r+0x40>
    73c0:	81400417 	ldw	r5,16(r16)
    73c4:	003ff906 	br	73ac <__swsetup_r+0x120>

000073c8 <__register_exitproc>:
    73c8:	defffa04 	addi	sp,sp,-24
    73cc:	00800074 	movhi	r2,1
    73d0:	10aea304 	addi	r2,r2,-17780
    73d4:	dc000015 	stw	r16,0(sp)
    73d8:	14000017 	ldw	r16,0(r2)
    73dc:	dd000415 	stw	r20,16(sp)
    73e0:	2829883a 	mov	r20,r5
    73e4:	81405217 	ldw	r5,328(r16)
    73e8:	dcc00315 	stw	r19,12(sp)
    73ec:	dc800215 	stw	r18,8(sp)
    73f0:	dc400115 	stw	r17,4(sp)
    73f4:	dfc00515 	stw	ra,20(sp)
    73f8:	2023883a 	mov	r17,r4
    73fc:	3027883a 	mov	r19,r6
    7400:	3825883a 	mov	r18,r7
    7404:	28002526 	beq	r5,zero,749c <__register_exitproc+0xd4>
    7408:	29000117 	ldw	r4,4(r5)
    740c:	008007c4 	movi	r2,31
    7410:	11002716 	blt	r2,r4,74b0 <__register_exitproc+0xe8>
    7414:	8800101e 	bne	r17,zero,7458 <__register_exitproc+0x90>
    7418:	2105883a 	add	r2,r4,r4
    741c:	1085883a 	add	r2,r2,r2
    7420:	20c00044 	addi	r3,r4,1
    7424:	1145883a 	add	r2,r2,r5
    7428:	0009883a 	mov	r4,zero
    742c:	15000215 	stw	r20,8(r2)
    7430:	28c00115 	stw	r3,4(r5)
    7434:	2005883a 	mov	r2,r4
    7438:	dfc00517 	ldw	ra,20(sp)
    743c:	dd000417 	ldw	r20,16(sp)
    7440:	dcc00317 	ldw	r19,12(sp)
    7444:	dc800217 	ldw	r18,8(sp)
    7448:	dc400117 	ldw	r17,4(sp)
    744c:	dc000017 	ldw	r16,0(sp)
    7450:	dec00604 	addi	sp,sp,24
    7454:	f800283a 	ret
    7458:	29802204 	addi	r6,r5,136
    745c:	00800044 	movi	r2,1
    7460:	110e983a 	sll	r7,r2,r4
    7464:	30c04017 	ldw	r3,256(r6)
    7468:	2105883a 	add	r2,r4,r4
    746c:	1085883a 	add	r2,r2,r2
    7470:	1185883a 	add	r2,r2,r6
    7474:	19c6b03a 	or	r3,r3,r7
    7478:	14802015 	stw	r18,128(r2)
    747c:	14c00015 	stw	r19,0(r2)
    7480:	00800084 	movi	r2,2
    7484:	30c04015 	stw	r3,256(r6)
    7488:	88bfe31e 	bne	r17,r2,7418 <__register_exitproc+0x50>
    748c:	30804117 	ldw	r2,260(r6)
    7490:	11c4b03a 	or	r2,r2,r7
    7494:	30804115 	stw	r2,260(r6)
    7498:	003fdf06 	br	7418 <__register_exitproc+0x50>
    749c:	00800fb4 	movhi	r2,62
    74a0:	10b8ef04 	addi	r2,r2,-7236
    74a4:	100b883a 	mov	r5,r2
    74a8:	80805215 	stw	r2,328(r16)
    74ac:	003fd606 	br	7408 <__register_exitproc+0x40>
    74b0:	00800034 	movhi	r2,0
    74b4:	10800004 	addi	r2,r2,0
    74b8:	1000021e 	bne	r2,zero,74c4 <__register_exitproc+0xfc>
    74bc:	013fffc4 	movi	r4,-1
    74c0:	003fdc06 	br	7434 <__register_exitproc+0x6c>
    74c4:	01006404 	movi	r4,400
    74c8:	103ee83a 	callr	r2
    74cc:	1007883a 	mov	r3,r2
    74d0:	103ffa26 	beq	r2,zero,74bc <__register_exitproc+0xf4>
    74d4:	80805217 	ldw	r2,328(r16)
    74d8:	180b883a 	mov	r5,r3
    74dc:	18000115 	stw	zero,4(r3)
    74e0:	18800015 	stw	r2,0(r3)
    74e4:	80c05215 	stw	r3,328(r16)
    74e8:	18006215 	stw	zero,392(r3)
    74ec:	18006315 	stw	zero,396(r3)
    74f0:	0009883a 	mov	r4,zero
    74f4:	883fc826 	beq	r17,zero,7418 <__register_exitproc+0x50>
    74f8:	003fd706 	br	7458 <__register_exitproc+0x90>

000074fc <register_fini>:
    74fc:	f800283a 	ret

00007500 <__call_exitprocs>:
    7500:	00800074 	movhi	r2,1
    7504:	10aea304 	addi	r2,r2,-17780
    7508:	10800017 	ldw	r2,0(r2)
    750c:	defff304 	addi	sp,sp,-52
    7510:	df000b15 	stw	fp,44(sp)
    7514:	d8800115 	stw	r2,4(sp)
    7518:	00800034 	movhi	r2,0
    751c:	10800004 	addi	r2,r2,0
    7520:	1005003a 	cmpeq	r2,r2,zero
    7524:	d8800215 	stw	r2,8(sp)
    7528:	d8800117 	ldw	r2,4(sp)
    752c:	dd400815 	stw	r21,32(sp)
    7530:	dd000715 	stw	r20,28(sp)
    7534:	10805204 	addi	r2,r2,328
    7538:	dfc00c15 	stw	ra,48(sp)
    753c:	ddc00a15 	stw	r23,40(sp)
    7540:	dd800915 	stw	r22,36(sp)
    7544:	dcc00615 	stw	r19,24(sp)
    7548:	dc800515 	stw	r18,20(sp)
    754c:	dc400415 	stw	r17,16(sp)
    7550:	dc000315 	stw	r16,12(sp)
    7554:	282b883a 	mov	r21,r5
    7558:	2039883a 	mov	fp,r4
    755c:	d8800015 	stw	r2,0(sp)
    7560:	2829003a 	cmpeq	r20,r5,zero
    7564:	d8800117 	ldw	r2,4(sp)
    7568:	14405217 	ldw	r17,328(r2)
    756c:	88001026 	beq	r17,zero,75b0 <__call_exitprocs+0xb0>
    7570:	ddc00017 	ldw	r23,0(sp)
    7574:	88800117 	ldw	r2,4(r17)
    7578:	8c802204 	addi	r18,r17,136
    757c:	143fffc4 	addi	r16,r2,-1
    7580:	80000916 	blt	r16,zero,75a8 <__call_exitprocs+0xa8>
    7584:	05bfffc4 	movi	r22,-1
    7588:	a000151e 	bne	r20,zero,75e0 <__call_exitprocs+0xe0>
    758c:	8409883a 	add	r4,r16,r16
    7590:	2105883a 	add	r2,r4,r4
    7594:	1485883a 	add	r2,r2,r18
    7598:	10c02017 	ldw	r3,128(r2)
    759c:	a8c01126 	beq	r21,r3,75e4 <__call_exitprocs+0xe4>
    75a0:	843fffc4 	addi	r16,r16,-1
    75a4:	85bff81e 	bne	r16,r22,7588 <__call_exitprocs+0x88>
    75a8:	d8800217 	ldw	r2,8(sp)
    75ac:	10003126 	beq	r2,zero,7674 <__call_exitprocs+0x174>
    75b0:	dfc00c17 	ldw	ra,48(sp)
    75b4:	df000b17 	ldw	fp,44(sp)
    75b8:	ddc00a17 	ldw	r23,40(sp)
    75bc:	dd800917 	ldw	r22,36(sp)
    75c0:	dd400817 	ldw	r21,32(sp)
    75c4:	dd000717 	ldw	r20,28(sp)
    75c8:	dcc00617 	ldw	r19,24(sp)
    75cc:	dc800517 	ldw	r18,20(sp)
    75d0:	dc400417 	ldw	r17,16(sp)
    75d4:	dc000317 	ldw	r16,12(sp)
    75d8:	dec00d04 	addi	sp,sp,52
    75dc:	f800283a 	ret
    75e0:	8409883a 	add	r4,r16,r16
    75e4:	88c00117 	ldw	r3,4(r17)
    75e8:	2105883a 	add	r2,r4,r4
    75ec:	1445883a 	add	r2,r2,r17
    75f0:	18ffffc4 	addi	r3,r3,-1
    75f4:	11800217 	ldw	r6,8(r2)
    75f8:	1c001526 	beq	r3,r16,7650 <__call_exitprocs+0x150>
    75fc:	10000215 	stw	zero,8(r2)
    7600:	303fe726 	beq	r6,zero,75a0 <__call_exitprocs+0xa0>
    7604:	00c00044 	movi	r3,1
    7608:	1c06983a 	sll	r3,r3,r16
    760c:	90804017 	ldw	r2,256(r18)
    7610:	8cc00117 	ldw	r19,4(r17)
    7614:	1884703a 	and	r2,r3,r2
    7618:	10001426 	beq	r2,zero,766c <__call_exitprocs+0x16c>
    761c:	90804117 	ldw	r2,260(r18)
    7620:	1884703a 	and	r2,r3,r2
    7624:	10000c1e 	bne	r2,zero,7658 <__call_exitprocs+0x158>
    7628:	2105883a 	add	r2,r4,r4
    762c:	1485883a 	add	r2,r2,r18
    7630:	11400017 	ldw	r5,0(r2)
    7634:	e009883a 	mov	r4,fp
    7638:	303ee83a 	callr	r6
    763c:	88800117 	ldw	r2,4(r17)
    7640:	98bfc81e 	bne	r19,r2,7564 <__call_exitprocs+0x64>
    7644:	b8800017 	ldw	r2,0(r23)
    7648:	147fd526 	beq	r2,r17,75a0 <__call_exitprocs+0xa0>
    764c:	003fc506 	br	7564 <__call_exitprocs+0x64>
    7650:	8c000115 	stw	r16,4(r17)
    7654:	003fea06 	br	7600 <__call_exitprocs+0x100>
    7658:	2105883a 	add	r2,r4,r4
    765c:	1485883a 	add	r2,r2,r18
    7660:	11000017 	ldw	r4,0(r2)
    7664:	303ee83a 	callr	r6
    7668:	003ff406 	br	763c <__call_exitprocs+0x13c>
    766c:	303ee83a 	callr	r6
    7670:	003ff206 	br	763c <__call_exitprocs+0x13c>
    7674:	88800117 	ldw	r2,4(r17)
    7678:	1000081e 	bne	r2,zero,769c <__call_exitprocs+0x19c>
    767c:	89000017 	ldw	r4,0(r17)
    7680:	20000726 	beq	r4,zero,76a0 <__call_exitprocs+0x1a0>
    7684:	b9000015 	stw	r4,0(r23)
    7688:	8809883a 	mov	r4,r17
    768c:	00000000 	call	0 <__alt_mem_SDRAM>
    7690:	bc400017 	ldw	r17,0(r23)
    7694:	883fb71e 	bne	r17,zero,7574 <__call_exitprocs+0x74>
    7698:	003fc506 	br	75b0 <__call_exitprocs+0xb0>
    769c:	89000017 	ldw	r4,0(r17)
    76a0:	882f883a 	mov	r23,r17
    76a4:	2023883a 	mov	r17,r4
    76a8:	883fb21e 	bne	r17,zero,7574 <__call_exitprocs+0x74>
    76ac:	003fc006 	br	75b0 <__call_exitprocs+0xb0>

000076b0 <_fflush_r>:
    76b0:	defffb04 	addi	sp,sp,-20
    76b4:	dcc00315 	stw	r19,12(sp)
    76b8:	dc800215 	stw	r18,8(sp)
    76bc:	dfc00415 	stw	ra,16(sp)
    76c0:	dc400115 	stw	r17,4(sp)
    76c4:	dc000015 	stw	r16,0(sp)
    76c8:	2027883a 	mov	r19,r4
    76cc:	2825883a 	mov	r18,r5
    76d0:	20000226 	beq	r4,zero,76dc <_fflush_r+0x2c>
    76d4:	20800e17 	ldw	r2,56(r4)
    76d8:	10005626 	beq	r2,zero,7834 <_fflush_r+0x184>
    76dc:	9100030b 	ldhu	r4,12(r18)
    76e0:	20ffffcc 	andi	r3,r4,65535
    76e4:	18e0001c 	xori	r3,r3,32768
    76e8:	18e00004 	addi	r3,r3,-32768
    76ec:	1880020c 	andi	r2,r3,8
    76f0:	1000261e 	bne	r2,zero,778c <_fflush_r+0xdc>
    76f4:	90c00117 	ldw	r3,4(r18)
    76f8:	20820014 	ori	r2,r4,2048
    76fc:	9080030d 	sth	r2,12(r18)
    7700:	1009883a 	mov	r4,r2
    7704:	00c0400e 	bge	zero,r3,7808 <_fflush_r+0x158>
    7708:	92000a17 	ldw	r8,40(r18)
    770c:	40004026 	beq	r8,zero,7810 <_fflush_r+0x160>
    7710:	2084000c 	andi	r2,r4,4096
    7714:	10005326 	beq	r2,zero,7864 <_fflush_r+0x1b4>
    7718:	94001417 	ldw	r16,80(r18)
    771c:	9080030b 	ldhu	r2,12(r18)
    7720:	1080010c 	andi	r2,r2,4
    7724:	1000481e 	bne	r2,zero,7848 <_fflush_r+0x198>
    7728:	91400717 	ldw	r5,28(r18)
    772c:	9809883a 	mov	r4,r19
    7730:	800d883a 	mov	r6,r16
    7734:	000f883a 	mov	r7,zero
    7738:	403ee83a 	callr	r8
    773c:	8080261e 	bne	r16,r2,77d8 <_fflush_r+0x128>
    7740:	9080030b 	ldhu	r2,12(r18)
    7744:	91000417 	ldw	r4,16(r18)
    7748:	90000115 	stw	zero,4(r18)
    774c:	10bdffcc 	andi	r2,r2,63487
    7750:	10ffffcc 	andi	r3,r2,65535
    7754:	18c4000c 	andi	r3,r3,4096
    7758:	9080030d 	sth	r2,12(r18)
    775c:	91000015 	stw	r4,0(r18)
    7760:	18002b26 	beq	r3,zero,7810 <_fflush_r+0x160>
    7764:	0007883a 	mov	r3,zero
    7768:	1805883a 	mov	r2,r3
    776c:	94001415 	stw	r16,80(r18)
    7770:	dfc00417 	ldw	ra,16(sp)
    7774:	dcc00317 	ldw	r19,12(sp)
    7778:	dc800217 	ldw	r18,8(sp)
    777c:	dc400117 	ldw	r17,4(sp)
    7780:	dc000017 	ldw	r16,0(sp)
    7784:	dec00504 	addi	sp,sp,20
    7788:	f800283a 	ret
    778c:	94400417 	ldw	r17,16(r18)
    7790:	88001f26 	beq	r17,zero,7810 <_fflush_r+0x160>
    7794:	90800017 	ldw	r2,0(r18)
    7798:	18c000cc 	andi	r3,r3,3
    779c:	94400015 	stw	r17,0(r18)
    77a0:	1461c83a 	sub	r16,r2,r17
    77a4:	18002526 	beq	r3,zero,783c <_fflush_r+0x18c>
    77a8:	0005883a 	mov	r2,zero
    77ac:	90800215 	stw	r2,8(r18)
    77b0:	0400170e 	bge	zero,r16,7810 <_fflush_r+0x160>
    77b4:	90c00917 	ldw	r3,36(r18)
    77b8:	91400717 	ldw	r5,28(r18)
    77bc:	880d883a 	mov	r6,r17
    77c0:	800f883a 	mov	r7,r16
    77c4:	9809883a 	mov	r4,r19
    77c8:	183ee83a 	callr	r3
    77cc:	88a3883a 	add	r17,r17,r2
    77d0:	80a1c83a 	sub	r16,r16,r2
    77d4:	00bff616 	blt	zero,r2,77b0 <_fflush_r+0x100>
    77d8:	9080030b 	ldhu	r2,12(r18)
    77dc:	00ffffc4 	movi	r3,-1
    77e0:	10801014 	ori	r2,r2,64
    77e4:	9080030d 	sth	r2,12(r18)
    77e8:	1805883a 	mov	r2,r3
    77ec:	dfc00417 	ldw	ra,16(sp)
    77f0:	dcc00317 	ldw	r19,12(sp)
    77f4:	dc800217 	ldw	r18,8(sp)
    77f8:	dc400117 	ldw	r17,4(sp)
    77fc:	dc000017 	ldw	r16,0(sp)
    7800:	dec00504 	addi	sp,sp,20
    7804:	f800283a 	ret
    7808:	90800f17 	ldw	r2,60(r18)
    780c:	00bfbe16 	blt	zero,r2,7708 <_fflush_r+0x58>
    7810:	0007883a 	mov	r3,zero
    7814:	1805883a 	mov	r2,r3
    7818:	dfc00417 	ldw	ra,16(sp)
    781c:	dcc00317 	ldw	r19,12(sp)
    7820:	dc800217 	ldw	r18,8(sp)
    7824:	dc400117 	ldw	r17,4(sp)
    7828:	dc000017 	ldw	r16,0(sp)
    782c:	dec00504 	addi	sp,sp,20
    7830:	f800283a 	ret
    7834:	00079480 	call	7948 <__sinit>
    7838:	003fa806 	br	76dc <_fflush_r+0x2c>
    783c:	90800517 	ldw	r2,20(r18)
    7840:	90800215 	stw	r2,8(r18)
    7844:	003fda06 	br	77b0 <_fflush_r+0x100>
    7848:	90800117 	ldw	r2,4(r18)
    784c:	90c00c17 	ldw	r3,48(r18)
    7850:	80a1c83a 	sub	r16,r16,r2
    7854:	183fb426 	beq	r3,zero,7728 <_fflush_r+0x78>
    7858:	90800f17 	ldw	r2,60(r18)
    785c:	80a1c83a 	sub	r16,r16,r2
    7860:	003fb106 	br	7728 <_fflush_r+0x78>
    7864:	91400717 	ldw	r5,28(r18)
    7868:	9809883a 	mov	r4,r19
    786c:	000d883a 	mov	r6,zero
    7870:	01c00044 	movi	r7,1
    7874:	403ee83a 	callr	r8
    7878:	1021883a 	mov	r16,r2
    787c:	00bfffc4 	movi	r2,-1
    7880:	80800226 	beq	r16,r2,788c <_fflush_r+0x1dc>
    7884:	92000a17 	ldw	r8,40(r18)
    7888:	003fa406 	br	771c <_fflush_r+0x6c>
    788c:	98c00017 	ldw	r3,0(r19)
    7890:	00800744 	movi	r2,29
    7894:	18bfde26 	beq	r3,r2,7810 <_fflush_r+0x160>
    7898:	9080030b 	ldhu	r2,12(r18)
    789c:	8007883a 	mov	r3,r16
    78a0:	10801014 	ori	r2,r2,64
    78a4:	9080030d 	sth	r2,12(r18)
    78a8:	003fcf06 	br	77e8 <_fflush_r+0x138>

000078ac <fflush>:
    78ac:	01400034 	movhi	r5,0
    78b0:	295dac04 	addi	r5,r5,30384
    78b4:	2007883a 	mov	r3,r4
    78b8:	20000526 	beq	r4,zero,78d0 <fflush+0x24>
    78bc:	00800074 	movhi	r2,1
    78c0:	10aea204 	addi	r2,r2,-17784
    78c4:	11000017 	ldw	r4,0(r2)
    78c8:	180b883a 	mov	r5,r3
    78cc:	00076b01 	jmpi	76b0 <_fflush_r>
    78d0:	00800074 	movhi	r2,1
    78d4:	10aea304 	addi	r2,r2,-17780
    78d8:	11000017 	ldw	r4,0(r2)
    78dc:	0007fe01 	jmpi	7fe0 <_fwalk_reent>

000078e0 <std>:
    78e0:	00800074 	movhi	r2,1
    78e4:	10a2a904 	addi	r2,r2,-30044
    78e8:	20800b15 	stw	r2,44(r4)
    78ec:	00800074 	movhi	r2,1
    78f0:	10a2e404 	addi	r2,r2,-29808
    78f4:	20800815 	stw	r2,32(r4)
    78f8:	00c00074 	movhi	r3,1
    78fc:	18e2c504 	addi	r3,r3,-29932
    7900:	00800074 	movhi	r2,1
    7904:	10a2ab04 	addi	r2,r2,-30036
    7908:	2140030d 	sth	r5,12(r4)
    790c:	2180038d 	sth	r6,14(r4)
    7910:	20c00915 	stw	r3,36(r4)
    7914:	20800a15 	stw	r2,40(r4)
    7918:	20000015 	stw	zero,0(r4)
    791c:	20000115 	stw	zero,4(r4)
    7920:	20000215 	stw	zero,8(r4)
    7924:	20000415 	stw	zero,16(r4)
    7928:	20000515 	stw	zero,20(r4)
    792c:	20000615 	stw	zero,24(r4)
    7930:	21000715 	stw	r4,28(r4)
    7934:	f800283a 	ret

00007938 <__sfp_lock_acquire>:
    7938:	f800283a 	ret

0000793c <__sfp_lock_release>:
    793c:	f800283a 	ret

00007940 <__sinit_lock_acquire>:
    7940:	f800283a 	ret

00007944 <__sinit_lock_release>:
    7944:	f800283a 	ret

00007948 <__sinit>:
    7948:	20800e17 	ldw	r2,56(r4)
    794c:	defffd04 	addi	sp,sp,-12
    7950:	dc400115 	stw	r17,4(sp)
    7954:	dc000015 	stw	r16,0(sp)
    7958:	dfc00215 	stw	ra,8(sp)
    795c:	04400044 	movi	r17,1
    7960:	01400104 	movi	r5,4
    7964:	000d883a 	mov	r6,zero
    7968:	2021883a 	mov	r16,r4
    796c:	2200bb04 	addi	r8,r4,748
    7970:	200f883a 	mov	r7,r4
    7974:	10000526 	beq	r2,zero,798c <__sinit+0x44>
    7978:	dfc00217 	ldw	ra,8(sp)
    797c:	dc400117 	ldw	r17,4(sp)
    7980:	dc000017 	ldw	r16,0(sp)
    7984:	dec00304 	addi	sp,sp,12
    7988:	f800283a 	ret
    798c:	21000117 	ldw	r4,4(r4)
    7990:	00800034 	movhi	r2,0
    7994:	109e8b04 	addi	r2,r2,31276
    7998:	00c000c4 	movi	r3,3
    799c:	80800f15 	stw	r2,60(r16)
    79a0:	80c0b915 	stw	r3,740(r16)
    79a4:	8200ba15 	stw	r8,744(r16)
    79a8:	84400e15 	stw	r17,56(r16)
    79ac:	8000b815 	stw	zero,736(r16)
    79b0:	00078e00 	call	78e0 <std>
    79b4:	81000217 	ldw	r4,8(r16)
    79b8:	880d883a 	mov	r6,r17
    79bc:	800f883a 	mov	r7,r16
    79c0:	01400284 	movi	r5,10
    79c4:	00078e00 	call	78e0 <std>
    79c8:	81000317 	ldw	r4,12(r16)
    79cc:	800f883a 	mov	r7,r16
    79d0:	01400484 	movi	r5,18
    79d4:	01800084 	movi	r6,2
    79d8:	dfc00217 	ldw	ra,8(sp)
    79dc:	dc400117 	ldw	r17,4(sp)
    79e0:	dc000017 	ldw	r16,0(sp)
    79e4:	dec00304 	addi	sp,sp,12
    79e8:	00078e01 	jmpi	78e0 <std>

000079ec <__fp_lock>:
    79ec:	0005883a 	mov	r2,zero
    79f0:	f800283a 	ret

000079f4 <__fp_unlock>:
    79f4:	0005883a 	mov	r2,zero
    79f8:	f800283a 	ret

000079fc <__fp_unlock_all>:
    79fc:	00800074 	movhi	r2,1
    7a00:	10aea204 	addi	r2,r2,-17784
    7a04:	11000017 	ldw	r4,0(r2)
    7a08:	01400034 	movhi	r5,0
    7a0c:	295e7d04 	addi	r5,r5,31220
    7a10:	00080a81 	jmpi	80a8 <_fwalk>

00007a14 <__fp_lock_all>:
    7a14:	00800074 	movhi	r2,1
    7a18:	10aea204 	addi	r2,r2,-17784
    7a1c:	11000017 	ldw	r4,0(r2)
    7a20:	01400034 	movhi	r5,0
    7a24:	295e7b04 	addi	r5,r5,31212
    7a28:	00080a81 	jmpi	80a8 <_fwalk>

00007a2c <_cleanup_r>:
    7a2c:	01400074 	movhi	r5,1
    7a30:	29637a04 	addi	r5,r5,-29208
    7a34:	00080a81 	jmpi	80a8 <_fwalk>

00007a38 <_cleanup>:
    7a38:	00800074 	movhi	r2,1
    7a3c:	10aea304 	addi	r2,r2,-17780
    7a40:	11000017 	ldw	r4,0(r2)
    7a44:	0007a2c1 	jmpi	7a2c <_cleanup_r>

00007a48 <__sfmoreglue>:
    7a48:	defffc04 	addi	sp,sp,-16
    7a4c:	dc400115 	stw	r17,4(sp)
    7a50:	2c401724 	muli	r17,r5,92
    7a54:	dc800215 	stw	r18,8(sp)
    7a58:	2825883a 	mov	r18,r5
    7a5c:	89400304 	addi	r5,r17,12
    7a60:	dc000015 	stw	r16,0(sp)
    7a64:	dfc00315 	stw	ra,12(sp)
    7a68:	00082f40 	call	82f4 <_malloc_r>
    7a6c:	0021883a 	mov	r16,zero
    7a70:	880d883a 	mov	r6,r17
    7a74:	000b883a 	mov	r5,zero
    7a78:	10000626 	beq	r2,zero,7a94 <__sfmoreglue+0x4c>
    7a7c:	11000304 	addi	r4,r2,12
    7a80:	14800115 	stw	r18,4(r2)
    7a84:	10000015 	stw	zero,0(r2)
    7a88:	11000215 	stw	r4,8(r2)
    7a8c:	1021883a 	mov	r16,r2
    7a90:	0000fec0 	call	fec <memset>
    7a94:	8005883a 	mov	r2,r16
    7a98:	dfc00317 	ldw	ra,12(sp)
    7a9c:	dc800217 	ldw	r18,8(sp)
    7aa0:	dc400117 	ldw	r17,4(sp)
    7aa4:	dc000017 	ldw	r16,0(sp)
    7aa8:	dec00404 	addi	sp,sp,16
    7aac:	f800283a 	ret

00007ab0 <__sfp>:
    7ab0:	defffd04 	addi	sp,sp,-12
    7ab4:	00800074 	movhi	r2,1
    7ab8:	10aea304 	addi	r2,r2,-17780
    7abc:	dc000015 	stw	r16,0(sp)
    7ac0:	14000017 	ldw	r16,0(r2)
    7ac4:	dc400115 	stw	r17,4(sp)
    7ac8:	dfc00215 	stw	ra,8(sp)
    7acc:	80800e17 	ldw	r2,56(r16)
    7ad0:	2023883a 	mov	r17,r4
    7ad4:	10002626 	beq	r2,zero,7b70 <__sfp+0xc0>
    7ad8:	8400b804 	addi	r16,r16,736
    7adc:	80800117 	ldw	r2,4(r16)
    7ae0:	81000217 	ldw	r4,8(r16)
    7ae4:	10ffffc4 	addi	r3,r2,-1
    7ae8:	18000916 	blt	r3,zero,7b10 <__sfp+0x60>
    7aec:	2080030f 	ldh	r2,12(r4)
    7af0:	10000b26 	beq	r2,zero,7b20 <__sfp+0x70>
    7af4:	017fffc4 	movi	r5,-1
    7af8:	00000206 	br	7b04 <__sfp+0x54>
    7afc:	2080030f 	ldh	r2,12(r4)
    7b00:	10000726 	beq	r2,zero,7b20 <__sfp+0x70>
    7b04:	18ffffc4 	addi	r3,r3,-1
    7b08:	21001704 	addi	r4,r4,92
    7b0c:	197ffb1e 	bne	r3,r5,7afc <__sfp+0x4c>
    7b10:	80800017 	ldw	r2,0(r16)
    7b14:	10001926 	beq	r2,zero,7b7c <__sfp+0xcc>
    7b18:	1021883a 	mov	r16,r2
    7b1c:	003fef06 	br	7adc <__sfp+0x2c>
    7b20:	00bfffc4 	movi	r2,-1
    7b24:	00c00044 	movi	r3,1
    7b28:	2080038d 	sth	r2,14(r4)
    7b2c:	20c0030d 	sth	r3,12(r4)
    7b30:	20000015 	stw	zero,0(r4)
    7b34:	20000215 	stw	zero,8(r4)
    7b38:	20000115 	stw	zero,4(r4)
    7b3c:	20000415 	stw	zero,16(r4)
    7b40:	20000515 	stw	zero,20(r4)
    7b44:	20000615 	stw	zero,24(r4)
    7b48:	20000c15 	stw	zero,48(r4)
    7b4c:	20000d15 	stw	zero,52(r4)
    7b50:	20001115 	stw	zero,68(r4)
    7b54:	20001215 	stw	zero,72(r4)
    7b58:	2005883a 	mov	r2,r4
    7b5c:	dfc00217 	ldw	ra,8(sp)
    7b60:	dc400117 	ldw	r17,4(sp)
    7b64:	dc000017 	ldw	r16,0(sp)
    7b68:	dec00304 	addi	sp,sp,12
    7b6c:	f800283a 	ret
    7b70:	8009883a 	mov	r4,r16
    7b74:	00079480 	call	7948 <__sinit>
    7b78:	003fd706 	br	7ad8 <__sfp+0x28>
    7b7c:	8809883a 	mov	r4,r17
    7b80:	01400104 	movi	r5,4
    7b84:	0007a480 	call	7a48 <__sfmoreglue>
    7b88:	80800015 	stw	r2,0(r16)
    7b8c:	103fe21e 	bne	r2,zero,7b18 <__sfp+0x68>
    7b90:	00800304 	movi	r2,12
    7b94:	0009883a 	mov	r4,zero
    7b98:	88800015 	stw	r2,0(r17)
    7b9c:	003fee06 	br	7b58 <__sfp+0xa8>

00007ba0 <_malloc_trim_r>:
    7ba0:	defffb04 	addi	sp,sp,-20
    7ba4:	dcc00315 	stw	r19,12(sp)
    7ba8:	04c00074 	movhi	r19,1
    7bac:	9ced9704 	addi	r19,r19,-18852
    7bb0:	dc800215 	stw	r18,8(sp)
    7bb4:	dc400115 	stw	r17,4(sp)
    7bb8:	dc000015 	stw	r16,0(sp)
    7bbc:	2823883a 	mov	r17,r5
    7bc0:	2025883a 	mov	r18,r4
    7bc4:	dfc00415 	stw	ra,16(sp)
    7bc8:	00093d40 	call	93d4 <__malloc_lock>
    7bcc:	98800217 	ldw	r2,8(r19)
    7bd0:	9009883a 	mov	r4,r18
    7bd4:	000b883a 	mov	r5,zero
    7bd8:	10c00117 	ldw	r3,4(r2)
    7bdc:	00bfff04 	movi	r2,-4
    7be0:	18a0703a 	and	r16,r3,r2
    7be4:	8463c83a 	sub	r17,r16,r17
    7be8:	8c43fbc4 	addi	r17,r17,4079
    7bec:	8822d33a 	srli	r17,r17,12
    7bf0:	0083ffc4 	movi	r2,4095
    7bf4:	8c7fffc4 	addi	r17,r17,-1
    7bf8:	8822933a 	slli	r17,r17,12
    7bfc:	1440060e 	bge	r2,r17,7c18 <_malloc_trim_r+0x78>
    7c00:	0008a340 	call	8a34 <_sbrk_r>
    7c04:	98c00217 	ldw	r3,8(r19)
    7c08:	9009883a 	mov	r4,r18
    7c0c:	044bc83a 	sub	r5,zero,r17
    7c10:	80c7883a 	add	r3,r16,r3
    7c14:	10c00926 	beq	r2,r3,7c3c <_malloc_trim_r+0x9c>
    7c18:	00093f40 	call	93f4 <__malloc_unlock>
    7c1c:	0005883a 	mov	r2,zero
    7c20:	dfc00417 	ldw	ra,16(sp)
    7c24:	dcc00317 	ldw	r19,12(sp)
    7c28:	dc800217 	ldw	r18,8(sp)
    7c2c:	dc400117 	ldw	r17,4(sp)
    7c30:	dc000017 	ldw	r16,0(sp)
    7c34:	dec00504 	addi	sp,sp,20
    7c38:	f800283a 	ret
    7c3c:	9009883a 	mov	r4,r18
    7c40:	0008a340 	call	8a34 <_sbrk_r>
    7c44:	844dc83a 	sub	r6,r16,r17
    7c48:	00ffffc4 	movi	r3,-1
    7c4c:	9009883a 	mov	r4,r18
    7c50:	000b883a 	mov	r5,zero
    7c54:	01c00074 	movhi	r7,1
    7c58:	39f63604 	addi	r7,r7,-10024
    7c5c:	31800054 	ori	r6,r6,1
    7c60:	10c00926 	beq	r2,r3,7c88 <_malloc_trim_r+0xe8>
    7c64:	38800017 	ldw	r2,0(r7)
    7c68:	98c00217 	ldw	r3,8(r19)
    7c6c:	9009883a 	mov	r4,r18
    7c70:	1445c83a 	sub	r2,r2,r17
    7c74:	38800015 	stw	r2,0(r7)
    7c78:	19800115 	stw	r6,4(r3)
    7c7c:	00093f40 	call	93f4 <__malloc_unlock>
    7c80:	00800044 	movi	r2,1
    7c84:	003fe606 	br	7c20 <_malloc_trim_r+0x80>
    7c88:	0008a340 	call	8a34 <_sbrk_r>
    7c8c:	99800217 	ldw	r6,8(r19)
    7c90:	100f883a 	mov	r7,r2
    7c94:	9009883a 	mov	r4,r18
    7c98:	1187c83a 	sub	r3,r2,r6
    7c9c:	008003c4 	movi	r2,15
    7ca0:	19400054 	ori	r5,r3,1
    7ca4:	10ffdc0e 	bge	r2,r3,7c18 <_malloc_trim_r+0x78>
    7ca8:	00800074 	movhi	r2,1
    7cac:	10aea504 	addi	r2,r2,-17772
    7cb0:	10c00017 	ldw	r3,0(r2)
    7cb4:	00800074 	movhi	r2,1
    7cb8:	10b63604 	addi	r2,r2,-10024
    7cbc:	31400115 	stw	r5,4(r6)
    7cc0:	38c7c83a 	sub	r3,r7,r3
    7cc4:	10c00015 	stw	r3,0(r2)
    7cc8:	003fd306 	br	7c18 <_malloc_trim_r+0x78>

00007ccc <_free_r>:
    7ccc:	defffd04 	addi	sp,sp,-12
    7cd0:	dc400115 	stw	r17,4(sp)
    7cd4:	dc000015 	stw	r16,0(sp)
    7cd8:	dfc00215 	stw	ra,8(sp)
    7cdc:	2821883a 	mov	r16,r5
    7ce0:	2023883a 	mov	r17,r4
    7ce4:	28005a26 	beq	r5,zero,7e50 <_free_r+0x184>
    7ce8:	00093d40 	call	93d4 <__malloc_lock>
    7cec:	823ffe04 	addi	r8,r16,-8
    7cf0:	41400117 	ldw	r5,4(r8)
    7cf4:	00bfff84 	movi	r2,-2
    7cf8:	02800074 	movhi	r10,1
    7cfc:	52ad9704 	addi	r10,r10,-18852
    7d00:	288e703a 	and	r7,r5,r2
    7d04:	41cd883a 	add	r6,r8,r7
    7d08:	30c00117 	ldw	r3,4(r6)
    7d0c:	51000217 	ldw	r4,8(r10)
    7d10:	00bfff04 	movi	r2,-4
    7d14:	1892703a 	and	r9,r3,r2
    7d18:	5017883a 	mov	r11,r10
    7d1c:	31006726 	beq	r6,r4,7ebc <_free_r+0x1f0>
    7d20:	2880004c 	andi	r2,r5,1
    7d24:	1005003a 	cmpeq	r2,r2,zero
    7d28:	32400115 	stw	r9,4(r6)
    7d2c:	10001a1e 	bne	r2,zero,7d98 <_free_r+0xcc>
    7d30:	000b883a 	mov	r5,zero
    7d34:	3247883a 	add	r3,r6,r9
    7d38:	18800117 	ldw	r2,4(r3)
    7d3c:	1080004c 	andi	r2,r2,1
    7d40:	1000231e 	bne	r2,zero,7dd0 <_free_r+0x104>
    7d44:	280ac03a 	cmpne	r5,r5,zero
    7d48:	3a4f883a 	add	r7,r7,r9
    7d4c:	2800451e 	bne	r5,zero,7e64 <_free_r+0x198>
    7d50:	31000217 	ldw	r4,8(r6)
    7d54:	00800074 	movhi	r2,1
    7d58:	10ad9904 	addi	r2,r2,-18844
    7d5c:	20807b26 	beq	r4,r2,7f4c <_free_r+0x280>
    7d60:	30800317 	ldw	r2,12(r6)
    7d64:	3a07883a 	add	r3,r7,r8
    7d68:	19c00015 	stw	r7,0(r3)
    7d6c:	11000215 	stw	r4,8(r2)
    7d70:	20800315 	stw	r2,12(r4)
    7d74:	38800054 	ori	r2,r7,1
    7d78:	40800115 	stw	r2,4(r8)
    7d7c:	28001a26 	beq	r5,zero,7de8 <_free_r+0x11c>
    7d80:	8809883a 	mov	r4,r17
    7d84:	dfc00217 	ldw	ra,8(sp)
    7d88:	dc400117 	ldw	r17,4(sp)
    7d8c:	dc000017 	ldw	r16,0(sp)
    7d90:	dec00304 	addi	sp,sp,12
    7d94:	00093f41 	jmpi	93f4 <__malloc_unlock>
    7d98:	80bffe17 	ldw	r2,-8(r16)
    7d9c:	50c00204 	addi	r3,r10,8
    7da0:	4091c83a 	sub	r8,r8,r2
    7da4:	41000217 	ldw	r4,8(r8)
    7da8:	388f883a 	add	r7,r7,r2
    7dac:	20c06126 	beq	r4,r3,7f34 <_free_r+0x268>
    7db0:	40800317 	ldw	r2,12(r8)
    7db4:	3247883a 	add	r3,r6,r9
    7db8:	000b883a 	mov	r5,zero
    7dbc:	11000215 	stw	r4,8(r2)
    7dc0:	20800315 	stw	r2,12(r4)
    7dc4:	18800117 	ldw	r2,4(r3)
    7dc8:	1080004c 	andi	r2,r2,1
    7dcc:	103fdd26 	beq	r2,zero,7d44 <_free_r+0x78>
    7dd0:	38800054 	ori	r2,r7,1
    7dd4:	3a07883a 	add	r3,r7,r8
    7dd8:	280ac03a 	cmpne	r5,r5,zero
    7ddc:	40800115 	stw	r2,4(r8)
    7de0:	19c00015 	stw	r7,0(r3)
    7de4:	283fe61e 	bne	r5,zero,7d80 <_free_r+0xb4>
    7de8:	00807fc4 	movi	r2,511
    7dec:	11c01f2e 	bgeu	r2,r7,7e6c <_free_r+0x1a0>
    7df0:	3806d27a 	srli	r3,r7,9
    7df4:	1800481e 	bne	r3,zero,7f18 <_free_r+0x24c>
    7df8:	3804d0fa 	srli	r2,r7,3
    7dfc:	100690fa 	slli	r3,r2,3
    7e00:	1acd883a 	add	r6,r3,r11
    7e04:	31400217 	ldw	r5,8(r6)
    7e08:	31405926 	beq	r6,r5,7f70 <_free_r+0x2a4>
    7e0c:	28800117 	ldw	r2,4(r5)
    7e10:	00ffff04 	movi	r3,-4
    7e14:	10c4703a 	and	r2,r2,r3
    7e18:	3880022e 	bgeu	r7,r2,7e24 <_free_r+0x158>
    7e1c:	29400217 	ldw	r5,8(r5)
    7e20:	317ffa1e 	bne	r6,r5,7e0c <_free_r+0x140>
    7e24:	29800317 	ldw	r6,12(r5)
    7e28:	41800315 	stw	r6,12(r8)
    7e2c:	41400215 	stw	r5,8(r8)
    7e30:	8809883a 	mov	r4,r17
    7e34:	2a000315 	stw	r8,12(r5)
    7e38:	32000215 	stw	r8,8(r6)
    7e3c:	dfc00217 	ldw	ra,8(sp)
    7e40:	dc400117 	ldw	r17,4(sp)
    7e44:	dc000017 	ldw	r16,0(sp)
    7e48:	dec00304 	addi	sp,sp,12
    7e4c:	00093f41 	jmpi	93f4 <__malloc_unlock>
    7e50:	dfc00217 	ldw	ra,8(sp)
    7e54:	dc400117 	ldw	r17,4(sp)
    7e58:	dc000017 	ldw	r16,0(sp)
    7e5c:	dec00304 	addi	sp,sp,12
    7e60:	f800283a 	ret
    7e64:	31000217 	ldw	r4,8(r6)
    7e68:	003fbd06 	br	7d60 <_free_r+0x94>
    7e6c:	3806d0fa 	srli	r3,r7,3
    7e70:	00800044 	movi	r2,1
    7e74:	51400117 	ldw	r5,4(r10)
    7e78:	180890fa 	slli	r4,r3,3
    7e7c:	1807d0ba 	srai	r3,r3,2
    7e80:	22c9883a 	add	r4,r4,r11
    7e84:	21800217 	ldw	r6,8(r4)
    7e88:	10c4983a 	sll	r2,r2,r3
    7e8c:	41000315 	stw	r4,12(r8)
    7e90:	41800215 	stw	r6,8(r8)
    7e94:	288ab03a 	or	r5,r5,r2
    7e98:	22000215 	stw	r8,8(r4)
    7e9c:	8809883a 	mov	r4,r17
    7ea0:	51400115 	stw	r5,4(r10)
    7ea4:	32000315 	stw	r8,12(r6)
    7ea8:	dfc00217 	ldw	ra,8(sp)
    7eac:	dc400117 	ldw	r17,4(sp)
    7eb0:	dc000017 	ldw	r16,0(sp)
    7eb4:	dec00304 	addi	sp,sp,12
    7eb8:	00093f41 	jmpi	93f4 <__malloc_unlock>
    7ebc:	2880004c 	andi	r2,r5,1
    7ec0:	3a4d883a 	add	r6,r7,r9
    7ec4:	1000071e 	bne	r2,zero,7ee4 <_free_r+0x218>
    7ec8:	80bffe17 	ldw	r2,-8(r16)
    7ecc:	4091c83a 	sub	r8,r8,r2
    7ed0:	41000317 	ldw	r4,12(r8)
    7ed4:	40c00217 	ldw	r3,8(r8)
    7ed8:	308d883a 	add	r6,r6,r2
    7edc:	20c00215 	stw	r3,8(r4)
    7ee0:	19000315 	stw	r4,12(r3)
    7ee4:	00800074 	movhi	r2,1
    7ee8:	10aea404 	addi	r2,r2,-17776
    7eec:	11000017 	ldw	r4,0(r2)
    7ef0:	30c00054 	ori	r3,r6,1
    7ef4:	52000215 	stw	r8,8(r10)
    7ef8:	40c00115 	stw	r3,4(r8)
    7efc:	313fa036 	bltu	r6,r4,7d80 <_free_r+0xb4>
    7f00:	00800074 	movhi	r2,1
    7f04:	10b63304 	addi	r2,r2,-10036
    7f08:	11400017 	ldw	r5,0(r2)
    7f0c:	8809883a 	mov	r4,r17
    7f10:	0007ba00 	call	7ba0 <_malloc_trim_r>
    7f14:	003f9a06 	br	7d80 <_free_r+0xb4>
    7f18:	00800104 	movi	r2,4
    7f1c:	10c0072e 	bgeu	r2,r3,7f3c <_free_r+0x270>
    7f20:	00800504 	movi	r2,20
    7f24:	10c01936 	bltu	r2,r3,7f8c <_free_r+0x2c0>
    7f28:	188016c4 	addi	r2,r3,91
    7f2c:	100690fa 	slli	r3,r2,3
    7f30:	003fb306 	br	7e00 <_free_r+0x134>
    7f34:	01400044 	movi	r5,1
    7f38:	003f7e06 	br	7d34 <_free_r+0x68>
    7f3c:	3804d1ba 	srli	r2,r7,6
    7f40:	10800e04 	addi	r2,r2,56
    7f44:	100690fa 	slli	r3,r2,3
    7f48:	003fad06 	br	7e00 <_free_r+0x134>
    7f4c:	22000315 	stw	r8,12(r4)
    7f50:	22000215 	stw	r8,8(r4)
    7f54:	3a05883a 	add	r2,r7,r8
    7f58:	38c00054 	ori	r3,r7,1
    7f5c:	11c00015 	stw	r7,0(r2)
    7f60:	41000215 	stw	r4,8(r8)
    7f64:	40c00115 	stw	r3,4(r8)
    7f68:	41000315 	stw	r4,12(r8)
    7f6c:	003f8406 	br	7d80 <_free_r+0xb4>
    7f70:	1005d0ba 	srai	r2,r2,2
    7f74:	00c00044 	movi	r3,1
    7f78:	51000117 	ldw	r4,4(r10)
    7f7c:	1886983a 	sll	r3,r3,r2
    7f80:	20c8b03a 	or	r4,r4,r3
    7f84:	51000115 	stw	r4,4(r10)
    7f88:	003fa706 	br	7e28 <_free_r+0x15c>
    7f8c:	00801504 	movi	r2,84
    7f90:	10c00436 	bltu	r2,r3,7fa4 <_free_r+0x2d8>
    7f94:	3804d33a 	srli	r2,r7,12
    7f98:	10801b84 	addi	r2,r2,110
    7f9c:	100690fa 	slli	r3,r2,3
    7fa0:	003f9706 	br	7e00 <_free_r+0x134>
    7fa4:	00805504 	movi	r2,340
    7fa8:	10c00436 	bltu	r2,r3,7fbc <_free_r+0x2f0>
    7fac:	3804d3fa 	srli	r2,r7,15
    7fb0:	10801dc4 	addi	r2,r2,119
    7fb4:	100690fa 	slli	r3,r2,3
    7fb8:	003f9106 	br	7e00 <_free_r+0x134>
    7fbc:	00815504 	movi	r2,1364
    7fc0:	10c0032e 	bgeu	r2,r3,7fd0 <_free_r+0x304>
    7fc4:	00801f84 	movi	r2,126
    7fc8:	00c0fc04 	movi	r3,1008
    7fcc:	003f8c06 	br	7e00 <_free_r+0x134>
    7fd0:	3804d4ba 	srli	r2,r7,18
    7fd4:	10801f04 	addi	r2,r2,124
    7fd8:	100690fa 	slli	r3,r2,3
    7fdc:	003f8806 	br	7e00 <_free_r+0x134>

00007fe0 <_fwalk_reent>:
    7fe0:	defff704 	addi	sp,sp,-36
    7fe4:	dcc00315 	stw	r19,12(sp)
    7fe8:	24c0b804 	addi	r19,r4,736
    7fec:	dd800615 	stw	r22,24(sp)
    7ff0:	dd400515 	stw	r21,20(sp)
    7ff4:	dfc00815 	stw	ra,32(sp)
    7ff8:	ddc00715 	stw	r23,28(sp)
    7ffc:	dd000415 	stw	r20,16(sp)
    8000:	dc800215 	stw	r18,8(sp)
    8004:	dc400115 	stw	r17,4(sp)
    8008:	dc000015 	stw	r16,0(sp)
    800c:	202b883a 	mov	r21,r4
    8010:	282d883a 	mov	r22,r5
    8014:	00079380 	call	7938 <__sfp_lock_acquire>
    8018:	98002126 	beq	r19,zero,80a0 <_fwalk_reent+0xc0>
    801c:	002f883a 	mov	r23,zero
    8020:	9c800117 	ldw	r18,4(r19)
    8024:	9c000217 	ldw	r16,8(r19)
    8028:	90bfffc4 	addi	r2,r18,-1
    802c:	10000d16 	blt	r2,zero,8064 <_fwalk_reent+0x84>
    8030:	0023883a 	mov	r17,zero
    8034:	053fffc4 	movi	r20,-1
    8038:	8080030f 	ldh	r2,12(r16)
    803c:	8c400044 	addi	r17,r17,1
    8040:	10000626 	beq	r2,zero,805c <_fwalk_reent+0x7c>
    8044:	8080038f 	ldh	r2,14(r16)
    8048:	800b883a 	mov	r5,r16
    804c:	a809883a 	mov	r4,r21
    8050:	15000226 	beq	r2,r20,805c <_fwalk_reent+0x7c>
    8054:	b03ee83a 	callr	r22
    8058:	b8aeb03a 	or	r23,r23,r2
    805c:	84001704 	addi	r16,r16,92
    8060:	947ff51e 	bne	r18,r17,8038 <_fwalk_reent+0x58>
    8064:	9cc00017 	ldw	r19,0(r19)
    8068:	983fed1e 	bne	r19,zero,8020 <_fwalk_reent+0x40>
    806c:	000793c0 	call	793c <__sfp_lock_release>
    8070:	b805883a 	mov	r2,r23
    8074:	dfc00817 	ldw	ra,32(sp)
    8078:	ddc00717 	ldw	r23,28(sp)
    807c:	dd800617 	ldw	r22,24(sp)
    8080:	dd400517 	ldw	r21,20(sp)
    8084:	dd000417 	ldw	r20,16(sp)
    8088:	dcc00317 	ldw	r19,12(sp)
    808c:	dc800217 	ldw	r18,8(sp)
    8090:	dc400117 	ldw	r17,4(sp)
    8094:	dc000017 	ldw	r16,0(sp)
    8098:	dec00904 	addi	sp,sp,36
    809c:	f800283a 	ret
    80a0:	002f883a 	mov	r23,zero
    80a4:	003ff106 	br	806c <_fwalk_reent+0x8c>

000080a8 <_fwalk>:
    80a8:	defff804 	addi	sp,sp,-32
    80ac:	dcc00315 	stw	r19,12(sp)
    80b0:	24c0b804 	addi	r19,r4,736
    80b4:	dd400515 	stw	r21,20(sp)
    80b8:	dfc00715 	stw	ra,28(sp)
    80bc:	dd800615 	stw	r22,24(sp)
    80c0:	dd000415 	stw	r20,16(sp)
    80c4:	dc800215 	stw	r18,8(sp)
    80c8:	dc400115 	stw	r17,4(sp)
    80cc:	dc000015 	stw	r16,0(sp)
    80d0:	282b883a 	mov	r21,r5
    80d4:	00079380 	call	7938 <__sfp_lock_acquire>
    80d8:	98001f26 	beq	r19,zero,8158 <_fwalk+0xb0>
    80dc:	002d883a 	mov	r22,zero
    80e0:	9c800117 	ldw	r18,4(r19)
    80e4:	9c000217 	ldw	r16,8(r19)
    80e8:	90bfffc4 	addi	r2,r18,-1
    80ec:	10000c16 	blt	r2,zero,8120 <_fwalk+0x78>
    80f0:	0023883a 	mov	r17,zero
    80f4:	053fffc4 	movi	r20,-1
    80f8:	8080030f 	ldh	r2,12(r16)
    80fc:	8c400044 	addi	r17,r17,1
    8100:	10000526 	beq	r2,zero,8118 <_fwalk+0x70>
    8104:	8080038f 	ldh	r2,14(r16)
    8108:	8009883a 	mov	r4,r16
    810c:	15000226 	beq	r2,r20,8118 <_fwalk+0x70>
    8110:	a83ee83a 	callr	r21
    8114:	b0acb03a 	or	r22,r22,r2
    8118:	84001704 	addi	r16,r16,92
    811c:	947ff61e 	bne	r18,r17,80f8 <_fwalk+0x50>
    8120:	9cc00017 	ldw	r19,0(r19)
    8124:	983fee1e 	bne	r19,zero,80e0 <_fwalk+0x38>
    8128:	000793c0 	call	793c <__sfp_lock_release>
    812c:	b005883a 	mov	r2,r22
    8130:	dfc00717 	ldw	ra,28(sp)
    8134:	dd800617 	ldw	r22,24(sp)
    8138:	dd400517 	ldw	r21,20(sp)
    813c:	dd000417 	ldw	r20,16(sp)
    8140:	dcc00317 	ldw	r19,12(sp)
    8144:	dc800217 	ldw	r18,8(sp)
    8148:	dc400117 	ldw	r17,4(sp)
    814c:	dc000017 	ldw	r16,0(sp)
    8150:	dec00804 	addi	sp,sp,32
    8154:	f800283a 	ret
    8158:	002d883a 	mov	r22,zero
    815c:	003ff206 	br	8128 <_fwalk+0x80>

00008160 <__smakebuf_r>:
    8160:	2880030b 	ldhu	r2,12(r5)
    8164:	deffed04 	addi	sp,sp,-76
    8168:	dc401015 	stw	r17,64(sp)
    816c:	1080008c 	andi	r2,r2,2
    8170:	dc000f15 	stw	r16,60(sp)
    8174:	dfc01215 	stw	ra,72(sp)
    8178:	dc801115 	stw	r18,68(sp)
    817c:	2821883a 	mov	r16,r5
    8180:	2023883a 	mov	r17,r4
    8184:	10000b26 	beq	r2,zero,81b4 <__smakebuf_r+0x54>
    8188:	28c010c4 	addi	r3,r5,67
    818c:	00800044 	movi	r2,1
    8190:	28800515 	stw	r2,20(r5)
    8194:	28c00415 	stw	r3,16(r5)
    8198:	28c00015 	stw	r3,0(r5)
    819c:	dfc01217 	ldw	ra,72(sp)
    81a0:	dc801117 	ldw	r18,68(sp)
    81a4:	dc401017 	ldw	r17,64(sp)
    81a8:	dc000f17 	ldw	r16,60(sp)
    81ac:	dec01304 	addi	sp,sp,76
    81b0:	f800283a 	ret
    81b4:	2940038f 	ldh	r5,14(r5)
    81b8:	28002116 	blt	r5,zero,8240 <__smakebuf_r+0xe0>
    81bc:	d80d883a 	mov	r6,sp
    81c0:	0008dfc0 	call	8dfc <_fstat_r>
    81c4:	10001e16 	blt	r2,zero,8240 <__smakebuf_r+0xe0>
    81c8:	d8800117 	ldw	r2,4(sp)
    81cc:	00e00014 	movui	r3,32768
    81d0:	113c000c 	andi	r4,r2,61440
    81d4:	20c03126 	beq	r4,r3,829c <__smakebuf_r+0x13c>
    81d8:	8080030b 	ldhu	r2,12(r16)
    81dc:	00c80004 	movi	r3,8192
    81e0:	10820014 	ori	r2,r2,2048
    81e4:	8080030d 	sth	r2,12(r16)
    81e8:	20c01e26 	beq	r4,r3,8264 <__smakebuf_r+0x104>
    81ec:	04810004 	movi	r18,1024
    81f0:	8809883a 	mov	r4,r17
    81f4:	900b883a 	mov	r5,r18
    81f8:	00082f40 	call	82f4 <_malloc_r>
    81fc:	1009883a 	mov	r4,r2
    8200:	10003126 	beq	r2,zero,82c8 <__smakebuf_r+0x168>
    8204:	80c0030b 	ldhu	r3,12(r16)
    8208:	00800034 	movhi	r2,0
    820c:	109e8b04 	addi	r2,r2,31276
    8210:	88800f15 	stw	r2,60(r17)
    8214:	18c02014 	ori	r3,r3,128
    8218:	84800515 	stw	r18,20(r16)
    821c:	80c0030d 	sth	r3,12(r16)
    8220:	81000415 	stw	r4,16(r16)
    8224:	81000015 	stw	r4,0(r16)
    8228:	dfc01217 	ldw	ra,72(sp)
    822c:	dc801117 	ldw	r18,68(sp)
    8230:	dc401017 	ldw	r17,64(sp)
    8234:	dc000f17 	ldw	r16,60(sp)
    8238:	dec01304 	addi	sp,sp,76
    823c:	f800283a 	ret
    8240:	80c0030b 	ldhu	r3,12(r16)
    8244:	1880200c 	andi	r2,r3,128
    8248:	10000426 	beq	r2,zero,825c <__smakebuf_r+0xfc>
    824c:	04801004 	movi	r18,64
    8250:	18820014 	ori	r2,r3,2048
    8254:	8080030d 	sth	r2,12(r16)
    8258:	003fe506 	br	81f0 <__smakebuf_r+0x90>
    825c:	04810004 	movi	r18,1024
    8260:	003ffb06 	br	8250 <__smakebuf_r+0xf0>
    8264:	8140038f 	ldh	r5,14(r16)
    8268:	8809883a 	mov	r4,r17
    826c:	0008e700 	call	8e70 <_isatty_r>
    8270:	103fde26 	beq	r2,zero,81ec <__smakebuf_r+0x8c>
    8274:	8080030b 	ldhu	r2,12(r16)
    8278:	80c010c4 	addi	r3,r16,67
    827c:	04810004 	movi	r18,1024
    8280:	10800054 	ori	r2,r2,1
    8284:	8080030d 	sth	r2,12(r16)
    8288:	00800044 	movi	r2,1
    828c:	80c00415 	stw	r3,16(r16)
    8290:	80800515 	stw	r2,20(r16)
    8294:	80c00015 	stw	r3,0(r16)
    8298:	003fd506 	br	81f0 <__smakebuf_r+0x90>
    829c:	80c00a17 	ldw	r3,40(r16)
    82a0:	00800074 	movhi	r2,1
    82a4:	10a2ab04 	addi	r2,r2,-30036
    82a8:	18bfcb1e 	bne	r3,r2,81d8 <__smakebuf_r+0x78>
    82ac:	8080030b 	ldhu	r2,12(r16)
    82b0:	00c10004 	movi	r3,1024
    82b4:	1825883a 	mov	r18,r3
    82b8:	10c4b03a 	or	r2,r2,r3
    82bc:	8080030d 	sth	r2,12(r16)
    82c0:	80c01315 	stw	r3,76(r16)
    82c4:	003fca06 	br	81f0 <__smakebuf_r+0x90>
    82c8:	8100030b 	ldhu	r4,12(r16)
    82cc:	2080800c 	andi	r2,r4,512
    82d0:	103fb21e 	bne	r2,zero,819c <__smakebuf_r+0x3c>
    82d4:	80c010c4 	addi	r3,r16,67
    82d8:	21000094 	ori	r4,r4,2
    82dc:	00800044 	movi	r2,1
    82e0:	80800515 	stw	r2,20(r16)
    82e4:	8100030d 	sth	r4,12(r16)
    82e8:	80c00415 	stw	r3,16(r16)
    82ec:	80c00015 	stw	r3,0(r16)
    82f0:	003faa06 	br	819c <__smakebuf_r+0x3c>

000082f4 <_malloc_r>:
    82f4:	defff604 	addi	sp,sp,-40
    82f8:	28c002c4 	addi	r3,r5,11
    82fc:	00800584 	movi	r2,22
    8300:	dc800215 	stw	r18,8(sp)
    8304:	dfc00915 	stw	ra,36(sp)
    8308:	df000815 	stw	fp,32(sp)
    830c:	ddc00715 	stw	r23,28(sp)
    8310:	dd800615 	stw	r22,24(sp)
    8314:	dd400515 	stw	r21,20(sp)
    8318:	dd000415 	stw	r20,16(sp)
    831c:	dcc00315 	stw	r19,12(sp)
    8320:	dc400115 	stw	r17,4(sp)
    8324:	dc000015 	stw	r16,0(sp)
    8328:	2025883a 	mov	r18,r4
    832c:	10c01236 	bltu	r2,r3,8378 <_malloc_r+0x84>
    8330:	04400404 	movi	r17,16
    8334:	8940142e 	bgeu	r17,r5,8388 <_malloc_r+0x94>
    8338:	00800304 	movi	r2,12
    833c:	0007883a 	mov	r3,zero
    8340:	90800015 	stw	r2,0(r18)
    8344:	1805883a 	mov	r2,r3
    8348:	dfc00917 	ldw	ra,36(sp)
    834c:	df000817 	ldw	fp,32(sp)
    8350:	ddc00717 	ldw	r23,28(sp)
    8354:	dd800617 	ldw	r22,24(sp)
    8358:	dd400517 	ldw	r21,20(sp)
    835c:	dd000417 	ldw	r20,16(sp)
    8360:	dcc00317 	ldw	r19,12(sp)
    8364:	dc800217 	ldw	r18,8(sp)
    8368:	dc400117 	ldw	r17,4(sp)
    836c:	dc000017 	ldw	r16,0(sp)
    8370:	dec00a04 	addi	sp,sp,40
    8374:	f800283a 	ret
    8378:	00bffe04 	movi	r2,-8
    837c:	18a2703a 	and	r17,r3,r2
    8380:	883fed16 	blt	r17,zero,8338 <_malloc_r+0x44>
    8384:	897fec36 	bltu	r17,r5,8338 <_malloc_r+0x44>
    8388:	9009883a 	mov	r4,r18
    838c:	00093d40 	call	93d4 <__malloc_lock>
    8390:	00807dc4 	movi	r2,503
    8394:	14402b2e 	bgeu	r2,r17,8444 <_malloc_r+0x150>
    8398:	8806d27a 	srli	r3,r17,9
    839c:	18003f1e 	bne	r3,zero,849c <_malloc_r+0x1a8>
    83a0:	880cd0fa 	srli	r6,r17,3
    83a4:	300490fa 	slli	r2,r6,3
    83a8:	02c00074 	movhi	r11,1
    83ac:	5aed9704 	addi	r11,r11,-18852
    83b0:	12cb883a 	add	r5,r2,r11
    83b4:	2c000317 	ldw	r16,12(r5)
    83b8:	580f883a 	mov	r7,r11
    83bc:	2c00041e 	bne	r5,r16,83d0 <_malloc_r+0xdc>
    83c0:	00000a06 	br	83ec <_malloc_r+0xf8>
    83c4:	1800860e 	bge	r3,zero,85e0 <_malloc_r+0x2ec>
    83c8:	84000317 	ldw	r16,12(r16)
    83cc:	2c000726 	beq	r5,r16,83ec <_malloc_r+0xf8>
    83d0:	80800117 	ldw	r2,4(r16)
    83d4:	00ffff04 	movi	r3,-4
    83d8:	10c8703a 	and	r4,r2,r3
    83dc:	2447c83a 	sub	r3,r4,r17
    83e0:	008003c4 	movi	r2,15
    83e4:	10fff70e 	bge	r2,r3,83c4 <_malloc_r+0xd0>
    83e8:	31bfffc4 	addi	r6,r6,-1
    83ec:	32400044 	addi	r9,r6,1
    83f0:	02800074 	movhi	r10,1
    83f4:	52ad9904 	addi	r10,r10,-18844
    83f8:	54000217 	ldw	r16,8(r10)
    83fc:	8280a026 	beq	r16,r10,8680 <_malloc_r+0x38c>
    8400:	80800117 	ldw	r2,4(r16)
    8404:	00ffff04 	movi	r3,-4
    8408:	10ca703a 	and	r5,r2,r3
    840c:	2c4dc83a 	sub	r6,r5,r17
    8410:	008003c4 	movi	r2,15
    8414:	11808316 	blt	r2,r6,8624 <_malloc_r+0x330>
    8418:	52800315 	stw	r10,12(r10)
    841c:	52800215 	stw	r10,8(r10)
    8420:	30002916 	blt	r6,zero,84c8 <_malloc_r+0x1d4>
    8424:	8147883a 	add	r3,r16,r5
    8428:	18800117 	ldw	r2,4(r3)
    842c:	9009883a 	mov	r4,r18
    8430:	10800054 	ori	r2,r2,1
    8434:	18800115 	stw	r2,4(r3)
    8438:	00093f40 	call	93f4 <__malloc_unlock>
    843c:	80c00204 	addi	r3,r16,8
    8440:	003fc006 	br	8344 <_malloc_r+0x50>
    8444:	02c00074 	movhi	r11,1
    8448:	5aed9704 	addi	r11,r11,-18852
    844c:	8ac5883a 	add	r2,r17,r11
    8450:	14000317 	ldw	r16,12(r2)
    8454:	580f883a 	mov	r7,r11
    8458:	8806d0fa 	srli	r3,r17,3
    845c:	14006c26 	beq	r2,r16,8610 <_malloc_r+0x31c>
    8460:	80c00117 	ldw	r3,4(r16)
    8464:	00bfff04 	movi	r2,-4
    8468:	81800317 	ldw	r6,12(r16)
    846c:	1886703a 	and	r3,r3,r2
    8470:	80c7883a 	add	r3,r16,r3
    8474:	18800117 	ldw	r2,4(r3)
    8478:	81400217 	ldw	r5,8(r16)
    847c:	9009883a 	mov	r4,r18
    8480:	10800054 	ori	r2,r2,1
    8484:	18800115 	stw	r2,4(r3)
    8488:	31400215 	stw	r5,8(r6)
    848c:	29800315 	stw	r6,12(r5)
    8490:	00093f40 	call	93f4 <__malloc_unlock>
    8494:	80c00204 	addi	r3,r16,8
    8498:	003faa06 	br	8344 <_malloc_r+0x50>
    849c:	00800104 	movi	r2,4
    84a0:	10c0052e 	bgeu	r2,r3,84b8 <_malloc_r+0x1c4>
    84a4:	00800504 	movi	r2,20
    84a8:	10c07836 	bltu	r2,r3,868c <_malloc_r+0x398>
    84ac:	198016c4 	addi	r6,r3,91
    84b0:	300490fa 	slli	r2,r6,3
    84b4:	003fbc06 	br	83a8 <_malloc_r+0xb4>
    84b8:	8804d1ba 	srli	r2,r17,6
    84bc:	11800e04 	addi	r6,r2,56
    84c0:	300490fa 	slli	r2,r6,3
    84c4:	003fb806 	br	83a8 <_malloc_r+0xb4>
    84c8:	00807fc4 	movi	r2,511
    84cc:	1140bb36 	bltu	r2,r5,87bc <_malloc_r+0x4c8>
    84d0:	2806d0fa 	srli	r3,r5,3
    84d4:	573ffe04 	addi	fp,r10,-8
    84d8:	00800044 	movi	r2,1
    84dc:	180890fa 	slli	r4,r3,3
    84e0:	1807d0ba 	srai	r3,r3,2
    84e4:	e1c00117 	ldw	r7,4(fp)
    84e8:	5909883a 	add	r4,r11,r4
    84ec:	21400217 	ldw	r5,8(r4)
    84f0:	10c4983a 	sll	r2,r2,r3
    84f4:	81000315 	stw	r4,12(r16)
    84f8:	81400215 	stw	r5,8(r16)
    84fc:	388eb03a 	or	r7,r7,r2
    8500:	2c000315 	stw	r16,12(r5)
    8504:	24000215 	stw	r16,8(r4)
    8508:	e1c00115 	stw	r7,4(fp)
    850c:	4807883a 	mov	r3,r9
    8510:	4800cd16 	blt	r9,zero,8848 <_malloc_r+0x554>
    8514:	1807d0ba 	srai	r3,r3,2
    8518:	00800044 	movi	r2,1
    851c:	10c8983a 	sll	r4,r2,r3
    8520:	39004436 	bltu	r7,r4,8634 <_malloc_r+0x340>
    8524:	21c4703a 	and	r2,r4,r7
    8528:	10000a1e 	bne	r2,zero,8554 <_malloc_r+0x260>
    852c:	2109883a 	add	r4,r4,r4
    8530:	00bfff04 	movi	r2,-4
    8534:	4884703a 	and	r2,r9,r2
    8538:	3906703a 	and	r3,r7,r4
    853c:	12400104 	addi	r9,r2,4
    8540:	1800041e 	bne	r3,zero,8554 <_malloc_r+0x260>
    8544:	2109883a 	add	r4,r4,r4
    8548:	3904703a 	and	r2,r7,r4
    854c:	4a400104 	addi	r9,r9,4
    8550:	103ffc26 	beq	r2,zero,8544 <_malloc_r+0x250>
    8554:	480490fa 	slli	r2,r9,3
    8558:	4819883a 	mov	r12,r9
    855c:	023fff04 	movi	r8,-4
    8560:	589b883a 	add	r13,r11,r2
    8564:	6807883a 	mov	r3,r13
    8568:	014003c4 	movi	r5,15
    856c:	1c000317 	ldw	r16,12(r3)
    8570:	1c00041e 	bne	r3,r16,8584 <_malloc_r+0x290>
    8574:	0000a706 	br	8814 <_malloc_r+0x520>
    8578:	3000ab0e 	bge	r6,zero,8828 <_malloc_r+0x534>
    857c:	84000317 	ldw	r16,12(r16)
    8580:	1c00a426 	beq	r3,r16,8814 <_malloc_r+0x520>
    8584:	80800117 	ldw	r2,4(r16)
    8588:	1204703a 	and	r2,r2,r8
    858c:	144dc83a 	sub	r6,r2,r17
    8590:	29bff90e 	bge	r5,r6,8578 <_malloc_r+0x284>
    8594:	81000317 	ldw	r4,12(r16)
    8598:	80c00217 	ldw	r3,8(r16)
    859c:	89400054 	ori	r5,r17,1
    85a0:	8445883a 	add	r2,r16,r17
    85a4:	20c00215 	stw	r3,8(r4)
    85a8:	19000315 	stw	r4,12(r3)
    85ac:	81400115 	stw	r5,4(r16)
    85b0:	1187883a 	add	r3,r2,r6
    85b4:	31000054 	ori	r4,r6,1
    85b8:	50800315 	stw	r2,12(r10)
    85bc:	50800215 	stw	r2,8(r10)
    85c0:	19800015 	stw	r6,0(r3)
    85c4:	11000115 	stw	r4,4(r2)
    85c8:	12800215 	stw	r10,8(r2)
    85cc:	12800315 	stw	r10,12(r2)
    85d0:	9009883a 	mov	r4,r18
    85d4:	00093f40 	call	93f4 <__malloc_unlock>
    85d8:	80c00204 	addi	r3,r16,8
    85dc:	003f5906 	br	8344 <_malloc_r+0x50>
    85e0:	8109883a 	add	r4,r16,r4
    85e4:	20800117 	ldw	r2,4(r4)
    85e8:	80c00217 	ldw	r3,8(r16)
    85ec:	81400317 	ldw	r5,12(r16)
    85f0:	10800054 	ori	r2,r2,1
    85f4:	20800115 	stw	r2,4(r4)
    85f8:	28c00215 	stw	r3,8(r5)
    85fc:	19400315 	stw	r5,12(r3)
    8600:	9009883a 	mov	r4,r18
    8604:	00093f40 	call	93f4 <__malloc_unlock>
    8608:	80c00204 	addi	r3,r16,8
    860c:	003f4d06 	br	8344 <_malloc_r+0x50>
    8610:	80800204 	addi	r2,r16,8
    8614:	14000317 	ldw	r16,12(r2)
    8618:	143f911e 	bne	r2,r16,8460 <_malloc_r+0x16c>
    861c:	1a400084 	addi	r9,r3,2
    8620:	003f7306 	br	83f0 <_malloc_r+0xfc>
    8624:	88c00054 	ori	r3,r17,1
    8628:	8445883a 	add	r2,r16,r17
    862c:	80c00115 	stw	r3,4(r16)
    8630:	003fdf06 	br	85b0 <_malloc_r+0x2bc>
    8634:	e4000217 	ldw	r16,8(fp)
    8638:	00bfff04 	movi	r2,-4
    863c:	80c00117 	ldw	r3,4(r16)
    8640:	802d883a 	mov	r22,r16
    8644:	18aa703a 	and	r21,r3,r2
    8648:	ac401636 	bltu	r21,r17,86a4 <_malloc_r+0x3b0>
    864c:	ac49c83a 	sub	r4,r21,r17
    8650:	008003c4 	movi	r2,15
    8654:	1100130e 	bge	r2,r4,86a4 <_malloc_r+0x3b0>
    8658:	88800054 	ori	r2,r17,1
    865c:	8447883a 	add	r3,r16,r17
    8660:	80800115 	stw	r2,4(r16)
    8664:	20800054 	ori	r2,r4,1
    8668:	18800115 	stw	r2,4(r3)
    866c:	e0c00215 	stw	r3,8(fp)
    8670:	9009883a 	mov	r4,r18
    8674:	00093f40 	call	93f4 <__malloc_unlock>
    8678:	80c00204 	addi	r3,r16,8
    867c:	003f3106 	br	8344 <_malloc_r+0x50>
    8680:	39c00117 	ldw	r7,4(r7)
    8684:	573ffe04 	addi	fp,r10,-8
    8688:	003fa006 	br	850c <_malloc_r+0x218>
    868c:	00801504 	movi	r2,84
    8690:	10c06736 	bltu	r2,r3,8830 <_malloc_r+0x53c>
    8694:	8804d33a 	srli	r2,r17,12
    8698:	11801b84 	addi	r6,r2,110
    869c:	300490fa 	slli	r2,r6,3
    86a0:	003f4106 	br	83a8 <_malloc_r+0xb4>
    86a4:	d0a79a17 	ldw	r2,-24984(gp)
    86a8:	d0e00c17 	ldw	r3,-32720(gp)
    86ac:	053fffc4 	movi	r20,-1
    86b0:	10800404 	addi	r2,r2,16
    86b4:	88a7883a 	add	r19,r17,r2
    86b8:	1d000326 	beq	r3,r20,86c8 <_malloc_r+0x3d4>
    86bc:	98c3ffc4 	addi	r3,r19,4095
    86c0:	00bc0004 	movi	r2,-4096
    86c4:	18a6703a 	and	r19,r3,r2
    86c8:	9009883a 	mov	r4,r18
    86cc:	980b883a 	mov	r5,r19
    86d0:	0008a340 	call	8a34 <_sbrk_r>
    86d4:	1009883a 	mov	r4,r2
    86d8:	15000426 	beq	r2,r20,86ec <_malloc_r+0x3f8>
    86dc:	854b883a 	add	r5,r16,r21
    86e0:	1029883a 	mov	r20,r2
    86e4:	11405a2e 	bgeu	r2,r5,8850 <_malloc_r+0x55c>
    86e8:	87000c26 	beq	r16,fp,871c <_malloc_r+0x428>
    86ec:	e4000217 	ldw	r16,8(fp)
    86f0:	80c00117 	ldw	r3,4(r16)
    86f4:	00bfff04 	movi	r2,-4
    86f8:	1884703a 	and	r2,r3,r2
    86fc:	14400336 	bltu	r2,r17,870c <_malloc_r+0x418>
    8700:	1449c83a 	sub	r4,r2,r17
    8704:	008003c4 	movi	r2,15
    8708:	113fd316 	blt	r2,r4,8658 <_malloc_r+0x364>
    870c:	9009883a 	mov	r4,r18
    8710:	00093f40 	call	93f4 <__malloc_unlock>
    8714:	0007883a 	mov	r3,zero
    8718:	003f0a06 	br	8344 <_malloc_r+0x50>
    871c:	05c00074 	movhi	r23,1
    8720:	bdf63604 	addi	r23,r23,-10024
    8724:	b8800017 	ldw	r2,0(r23)
    8728:	988d883a 	add	r6,r19,r2
    872c:	b9800015 	stw	r6,0(r23)
    8730:	d0e00c17 	ldw	r3,-32720(gp)
    8734:	00bfffc4 	movi	r2,-1
    8738:	18808e26 	beq	r3,r2,8974 <_malloc_r+0x680>
    873c:	2145c83a 	sub	r2,r4,r5
    8740:	3085883a 	add	r2,r6,r2
    8744:	b8800015 	stw	r2,0(r23)
    8748:	20c001cc 	andi	r3,r4,7
    874c:	18005f1e 	bne	r3,zero,88cc <_malloc_r+0x5d8>
    8750:	000b883a 	mov	r5,zero
    8754:	a4c5883a 	add	r2,r20,r19
    8758:	1083ffcc 	andi	r2,r2,4095
    875c:	00c40004 	movi	r3,4096
    8760:	1887c83a 	sub	r3,r3,r2
    8764:	28e7883a 	add	r19,r5,r3
    8768:	9009883a 	mov	r4,r18
    876c:	980b883a 	mov	r5,r19
    8770:	0008a340 	call	8a34 <_sbrk_r>
    8774:	1007883a 	mov	r3,r2
    8778:	00bfffc4 	movi	r2,-1
    877c:	18807a26 	beq	r3,r2,8968 <_malloc_r+0x674>
    8780:	1d05c83a 	sub	r2,r3,r20
    8784:	9885883a 	add	r2,r19,r2
    8788:	10c00054 	ori	r3,r2,1
    878c:	b8800017 	ldw	r2,0(r23)
    8790:	a021883a 	mov	r16,r20
    8794:	a0c00115 	stw	r3,4(r20)
    8798:	9885883a 	add	r2,r19,r2
    879c:	b8800015 	stw	r2,0(r23)
    87a0:	e5000215 	stw	r20,8(fp)
    87a4:	b7003626 	beq	r22,fp,8880 <_malloc_r+0x58c>
    87a8:	018003c4 	movi	r6,15
    87ac:	35404b36 	bltu	r6,r21,88dc <_malloc_r+0x5e8>
    87b0:	00800044 	movi	r2,1
    87b4:	a0800115 	stw	r2,4(r20)
    87b8:	003fcd06 	br	86f0 <_malloc_r+0x3fc>
    87bc:	2808d27a 	srli	r4,r5,9
    87c0:	2000371e 	bne	r4,zero,88a0 <_malloc_r+0x5ac>
    87c4:	2808d0fa 	srli	r4,r5,3
    87c8:	200690fa 	slli	r3,r4,3
    87cc:	1ad1883a 	add	r8,r3,r11
    87d0:	41800217 	ldw	r6,8(r8)
    87d4:	41805b26 	beq	r8,r6,8944 <_malloc_r+0x650>
    87d8:	30800117 	ldw	r2,4(r6)
    87dc:	00ffff04 	movi	r3,-4
    87e0:	10c4703a 	and	r2,r2,r3
    87e4:	2880022e 	bgeu	r5,r2,87f0 <_malloc_r+0x4fc>
    87e8:	31800217 	ldw	r6,8(r6)
    87ec:	41bffa1e 	bne	r8,r6,87d8 <_malloc_r+0x4e4>
    87f0:	32000317 	ldw	r8,12(r6)
    87f4:	39c00117 	ldw	r7,4(r7)
    87f8:	82000315 	stw	r8,12(r16)
    87fc:	81800215 	stw	r6,8(r16)
    8800:	07000074 	movhi	fp,1
    8804:	e72d9704 	addi	fp,fp,-18852
    8808:	34000315 	stw	r16,12(r6)
    880c:	44000215 	stw	r16,8(r8)
    8810:	003f3e06 	br	850c <_malloc_r+0x218>
    8814:	63000044 	addi	r12,r12,1
    8818:	608000cc 	andi	r2,r12,3
    881c:	10005d26 	beq	r2,zero,8994 <_malloc_r+0x6a0>
    8820:	18c00204 	addi	r3,r3,8
    8824:	003f5106 	br	856c <_malloc_r+0x278>
    8828:	8089883a 	add	r4,r16,r2
    882c:	003f6d06 	br	85e4 <_malloc_r+0x2f0>
    8830:	00805504 	movi	r2,340
    8834:	10c02036 	bltu	r2,r3,88b8 <_malloc_r+0x5c4>
    8838:	8804d3fa 	srli	r2,r17,15
    883c:	11801dc4 	addi	r6,r2,119
    8840:	300490fa 	slli	r2,r6,3
    8844:	003ed806 	br	83a8 <_malloc_r+0xb4>
    8848:	48c000c4 	addi	r3,r9,3
    884c:	003f3106 	br	8514 <_malloc_r+0x220>
    8850:	05c00074 	movhi	r23,1
    8854:	bdf63604 	addi	r23,r23,-10024
    8858:	b8800017 	ldw	r2,0(r23)
    885c:	988d883a 	add	r6,r19,r2
    8860:	b9800015 	stw	r6,0(r23)
    8864:	293fb21e 	bne	r5,r4,8730 <_malloc_r+0x43c>
    8868:	2083ffcc 	andi	r2,r4,4095
    886c:	103fb01e 	bne	r2,zero,8730 <_malloc_r+0x43c>
    8870:	e4000217 	ldw	r16,8(fp)
    8874:	9d45883a 	add	r2,r19,r21
    8878:	10800054 	ori	r2,r2,1
    887c:	80800115 	stw	r2,4(r16)
    8880:	b8c00017 	ldw	r3,0(r23)
    8884:	d0a79b17 	ldw	r2,-24980(gp)
    8888:	10c0012e 	bgeu	r2,r3,8890 <_malloc_r+0x59c>
    888c:	d0e79b15 	stw	r3,-24980(gp)
    8890:	d0a79c17 	ldw	r2,-24976(gp)
    8894:	10ff962e 	bgeu	r2,r3,86f0 <_malloc_r+0x3fc>
    8898:	d0e79c15 	stw	r3,-24976(gp)
    889c:	003f9406 	br	86f0 <_malloc_r+0x3fc>
    88a0:	00800104 	movi	r2,4
    88a4:	11001e36 	bltu	r2,r4,8920 <_malloc_r+0x62c>
    88a8:	2804d1ba 	srli	r2,r5,6
    88ac:	11000e04 	addi	r4,r2,56
    88b0:	200690fa 	slli	r3,r4,3
    88b4:	003fc506 	br	87cc <_malloc_r+0x4d8>
    88b8:	00815504 	movi	r2,1364
    88bc:	10c01d2e 	bgeu	r2,r3,8934 <_malloc_r+0x640>
    88c0:	01801f84 	movi	r6,126
    88c4:	0080fc04 	movi	r2,1008
    88c8:	003eb706 	br	83a8 <_malloc_r+0xb4>
    88cc:	00800204 	movi	r2,8
    88d0:	10cbc83a 	sub	r5,r2,r3
    88d4:	2169883a 	add	r20,r4,r5
    88d8:	003f9e06 	br	8754 <_malloc_r+0x460>
    88dc:	00bffe04 	movi	r2,-8
    88e0:	a93ffd04 	addi	r4,r21,-12
    88e4:	2088703a 	and	r4,r4,r2
    88e8:	b10b883a 	add	r5,r22,r4
    88ec:	00c00144 	movi	r3,5
    88f0:	28c00215 	stw	r3,8(r5)
    88f4:	28c00115 	stw	r3,4(r5)
    88f8:	b0800117 	ldw	r2,4(r22)
    88fc:	1080004c 	andi	r2,r2,1
    8900:	2084b03a 	or	r2,r4,r2
    8904:	b0800115 	stw	r2,4(r22)
    8908:	313fdd2e 	bgeu	r6,r4,8880 <_malloc_r+0x58c>
    890c:	b1400204 	addi	r5,r22,8
    8910:	9009883a 	mov	r4,r18
    8914:	0007ccc0 	call	7ccc <_free_r>
    8918:	e4000217 	ldw	r16,8(fp)
    891c:	003fd806 	br	8880 <_malloc_r+0x58c>
    8920:	00800504 	movi	r2,20
    8924:	11001536 	bltu	r2,r4,897c <_malloc_r+0x688>
    8928:	210016c4 	addi	r4,r4,91
    892c:	200690fa 	slli	r3,r4,3
    8930:	003fa606 	br	87cc <_malloc_r+0x4d8>
    8934:	8804d4ba 	srli	r2,r17,18
    8938:	11801f04 	addi	r6,r2,124
    893c:	300490fa 	slli	r2,r6,3
    8940:	003e9906 	br	83a8 <_malloc_r+0xb4>
    8944:	2009d0ba 	srai	r4,r4,2
    8948:	01400074 	movhi	r5,1
    894c:	296d9704 	addi	r5,r5,-18852
    8950:	00c00044 	movi	r3,1
    8954:	28800117 	ldw	r2,4(r5)
    8958:	1906983a 	sll	r3,r3,r4
    895c:	10c4b03a 	or	r2,r2,r3
    8960:	28800115 	stw	r2,4(r5)
    8964:	003fa306 	br	87f4 <_malloc_r+0x500>
    8968:	0027883a 	mov	r19,zero
    896c:	00c00044 	movi	r3,1
    8970:	003f8606 	br	878c <_malloc_r+0x498>
    8974:	d1200c15 	stw	r4,-32720(gp)
    8978:	003f7306 	br	8748 <_malloc_r+0x454>
    897c:	00801504 	movi	r2,84
    8980:	11001936 	bltu	r2,r4,89e8 <_malloc_r+0x6f4>
    8984:	2804d33a 	srli	r2,r5,12
    8988:	11001b84 	addi	r4,r2,110
    898c:	200690fa 	slli	r3,r4,3
    8990:	003f8e06 	br	87cc <_malloc_r+0x4d8>
    8994:	480b883a 	mov	r5,r9
    8998:	6807883a 	mov	r3,r13
    899c:	288000cc 	andi	r2,r5,3
    89a0:	18fffe04 	addi	r3,r3,-8
    89a4:	297fffc4 	addi	r5,r5,-1
    89a8:	10001526 	beq	r2,zero,8a00 <_malloc_r+0x70c>
    89ac:	18800217 	ldw	r2,8(r3)
    89b0:	10fffa26 	beq	r2,r3,899c <_malloc_r+0x6a8>
    89b4:	2109883a 	add	r4,r4,r4
    89b8:	393f1e36 	bltu	r7,r4,8634 <_malloc_r+0x340>
    89bc:	203f1d26 	beq	r4,zero,8634 <_malloc_r+0x340>
    89c0:	21c4703a 	and	r2,r4,r7
    89c4:	10000226 	beq	r2,zero,89d0 <_malloc_r+0x6dc>
    89c8:	6013883a 	mov	r9,r12
    89cc:	003ee106 	br	8554 <_malloc_r+0x260>
    89d0:	2109883a 	add	r4,r4,r4
    89d4:	3904703a 	and	r2,r7,r4
    89d8:	63000104 	addi	r12,r12,4
    89dc:	103ffc26 	beq	r2,zero,89d0 <_malloc_r+0x6dc>
    89e0:	6013883a 	mov	r9,r12
    89e4:	003edb06 	br	8554 <_malloc_r+0x260>
    89e8:	00805504 	movi	r2,340
    89ec:	11000836 	bltu	r2,r4,8a10 <_malloc_r+0x71c>
    89f0:	2804d3fa 	srli	r2,r5,15
    89f4:	11001dc4 	addi	r4,r2,119
    89f8:	200690fa 	slli	r3,r4,3
    89fc:	003f7306 	br	87cc <_malloc_r+0x4d8>
    8a00:	0104303a 	nor	r2,zero,r4
    8a04:	388e703a 	and	r7,r7,r2
    8a08:	e1c00115 	stw	r7,4(fp)
    8a0c:	003fe906 	br	89b4 <_malloc_r+0x6c0>
    8a10:	00815504 	movi	r2,1364
    8a14:	1100032e 	bgeu	r2,r4,8a24 <_malloc_r+0x730>
    8a18:	01001f84 	movi	r4,126
    8a1c:	00c0fc04 	movi	r3,1008
    8a20:	003f6a06 	br	87cc <_malloc_r+0x4d8>
    8a24:	2804d4ba 	srli	r2,r5,18
    8a28:	11001f04 	addi	r4,r2,124
    8a2c:	200690fa 	slli	r3,r4,3
    8a30:	003f6606 	br	87cc <_malloc_r+0x4d8>

00008a34 <_sbrk_r>:
    8a34:	defffd04 	addi	sp,sp,-12
    8a38:	dc000015 	stw	r16,0(sp)
    8a3c:	04000074 	movhi	r16,1
    8a40:	84363204 	addi	r16,r16,-10040
    8a44:	dc400115 	stw	r17,4(sp)
    8a48:	80000015 	stw	zero,0(r16)
    8a4c:	2023883a 	mov	r17,r4
    8a50:	2809883a 	mov	r4,r5
    8a54:	dfc00215 	stw	ra,8(sp)
    8a58:	00095940 	call	9594 <sbrk>
    8a5c:	1007883a 	mov	r3,r2
    8a60:	00bfffc4 	movi	r2,-1
    8a64:	18800626 	beq	r3,r2,8a80 <_sbrk_r+0x4c>
    8a68:	1805883a 	mov	r2,r3
    8a6c:	dfc00217 	ldw	ra,8(sp)
    8a70:	dc400117 	ldw	r17,4(sp)
    8a74:	dc000017 	ldw	r16,0(sp)
    8a78:	dec00304 	addi	sp,sp,12
    8a7c:	f800283a 	ret
    8a80:	80800017 	ldw	r2,0(r16)
    8a84:	103ff826 	beq	r2,zero,8a68 <_sbrk_r+0x34>
    8a88:	88800015 	stw	r2,0(r17)
    8a8c:	1805883a 	mov	r2,r3
    8a90:	dfc00217 	ldw	ra,8(sp)
    8a94:	dc400117 	ldw	r17,4(sp)
    8a98:	dc000017 	ldw	r16,0(sp)
    8a9c:	dec00304 	addi	sp,sp,12
    8aa0:	f800283a 	ret

00008aa4 <__sclose>:
    8aa4:	2940038f 	ldh	r5,14(r5)
    8aa8:	0008c681 	jmpi	8c68 <_close_r>

00008aac <__sseek>:
    8aac:	defffe04 	addi	sp,sp,-8
    8ab0:	dc000015 	stw	r16,0(sp)
    8ab4:	2821883a 	mov	r16,r5
    8ab8:	2940038f 	ldh	r5,14(r5)
    8abc:	dfc00115 	stw	ra,4(sp)
    8ac0:	0008ee00 	call	8ee0 <_lseek_r>
    8ac4:	1007883a 	mov	r3,r2
    8ac8:	00bfffc4 	movi	r2,-1
    8acc:	18800926 	beq	r3,r2,8af4 <__sseek+0x48>
    8ad0:	8080030b 	ldhu	r2,12(r16)
    8ad4:	80c01415 	stw	r3,80(r16)
    8ad8:	10840014 	ori	r2,r2,4096
    8adc:	8080030d 	sth	r2,12(r16)
    8ae0:	1805883a 	mov	r2,r3
    8ae4:	dfc00117 	ldw	ra,4(sp)
    8ae8:	dc000017 	ldw	r16,0(sp)
    8aec:	dec00204 	addi	sp,sp,8
    8af0:	f800283a 	ret
    8af4:	8080030b 	ldhu	r2,12(r16)
    8af8:	10bbffcc 	andi	r2,r2,61439
    8afc:	8080030d 	sth	r2,12(r16)
    8b00:	1805883a 	mov	r2,r3
    8b04:	dfc00117 	ldw	ra,4(sp)
    8b08:	dc000017 	ldw	r16,0(sp)
    8b0c:	dec00204 	addi	sp,sp,8
    8b10:	f800283a 	ret

00008b14 <__swrite>:
    8b14:	2880030b 	ldhu	r2,12(r5)
    8b18:	defffb04 	addi	sp,sp,-20
    8b1c:	dcc00315 	stw	r19,12(sp)
    8b20:	1080400c 	andi	r2,r2,256
    8b24:	dc800215 	stw	r18,8(sp)
    8b28:	dc400115 	stw	r17,4(sp)
    8b2c:	dc000015 	stw	r16,0(sp)
    8b30:	3027883a 	mov	r19,r6
    8b34:	3825883a 	mov	r18,r7
    8b38:	dfc00415 	stw	ra,16(sp)
    8b3c:	2821883a 	mov	r16,r5
    8b40:	000d883a 	mov	r6,zero
    8b44:	01c00084 	movi	r7,2
    8b48:	2023883a 	mov	r17,r4
    8b4c:	10000226 	beq	r2,zero,8b58 <__swrite+0x44>
    8b50:	2940038f 	ldh	r5,14(r5)
    8b54:	0008ee00 	call	8ee0 <_lseek_r>
    8b58:	8080030b 	ldhu	r2,12(r16)
    8b5c:	8140038f 	ldh	r5,14(r16)
    8b60:	8809883a 	mov	r4,r17
    8b64:	10bbffcc 	andi	r2,r2,61439
    8b68:	980d883a 	mov	r6,r19
    8b6c:	900f883a 	mov	r7,r18
    8b70:	8080030d 	sth	r2,12(r16)
    8b74:	dfc00417 	ldw	ra,16(sp)
    8b78:	dcc00317 	ldw	r19,12(sp)
    8b7c:	dc800217 	ldw	r18,8(sp)
    8b80:	dc400117 	ldw	r17,4(sp)
    8b84:	dc000017 	ldw	r16,0(sp)
    8b88:	dec00504 	addi	sp,sp,20
    8b8c:	0008bf01 	jmpi	8bf0 <_write_r>

00008b90 <__sread>:
    8b90:	defffe04 	addi	sp,sp,-8
    8b94:	dc000015 	stw	r16,0(sp)
    8b98:	2821883a 	mov	r16,r5
    8b9c:	2940038f 	ldh	r5,14(r5)
    8ba0:	dfc00115 	stw	ra,4(sp)
    8ba4:	0008f580 	call	8f58 <_read_r>
    8ba8:	1007883a 	mov	r3,r2
    8bac:	10000816 	blt	r2,zero,8bd0 <__sread+0x40>
    8bb0:	80801417 	ldw	r2,80(r16)
    8bb4:	10c5883a 	add	r2,r2,r3
    8bb8:	80801415 	stw	r2,80(r16)
    8bbc:	1805883a 	mov	r2,r3
    8bc0:	dfc00117 	ldw	ra,4(sp)
    8bc4:	dc000017 	ldw	r16,0(sp)
    8bc8:	dec00204 	addi	sp,sp,8
    8bcc:	f800283a 	ret
    8bd0:	8080030b 	ldhu	r2,12(r16)
    8bd4:	10bbffcc 	andi	r2,r2,61439
    8bd8:	8080030d 	sth	r2,12(r16)
    8bdc:	1805883a 	mov	r2,r3
    8be0:	dfc00117 	ldw	ra,4(sp)
    8be4:	dc000017 	ldw	r16,0(sp)
    8be8:	dec00204 	addi	sp,sp,8
    8bec:	f800283a 	ret

00008bf0 <_write_r>:
    8bf0:	defffd04 	addi	sp,sp,-12
    8bf4:	dc000015 	stw	r16,0(sp)
    8bf8:	04000074 	movhi	r16,1
    8bfc:	84363204 	addi	r16,r16,-10040
    8c00:	dc400115 	stw	r17,4(sp)
    8c04:	80000015 	stw	zero,0(r16)
    8c08:	2023883a 	mov	r17,r4
    8c0c:	2809883a 	mov	r4,r5
    8c10:	300b883a 	mov	r5,r6
    8c14:	380d883a 	mov	r6,r7
    8c18:	dfc00215 	stw	ra,8(sp)
    8c1c:	00096500 	call	9650 <write>
    8c20:	1007883a 	mov	r3,r2
    8c24:	00bfffc4 	movi	r2,-1
    8c28:	18800626 	beq	r3,r2,8c44 <_write_r+0x54>
    8c2c:	1805883a 	mov	r2,r3
    8c30:	dfc00217 	ldw	ra,8(sp)
    8c34:	dc400117 	ldw	r17,4(sp)
    8c38:	dc000017 	ldw	r16,0(sp)
    8c3c:	dec00304 	addi	sp,sp,12
    8c40:	f800283a 	ret
    8c44:	80800017 	ldw	r2,0(r16)
    8c48:	103ff826 	beq	r2,zero,8c2c <_write_r+0x3c>
    8c4c:	88800015 	stw	r2,0(r17)
    8c50:	1805883a 	mov	r2,r3
    8c54:	dfc00217 	ldw	ra,8(sp)
    8c58:	dc400117 	ldw	r17,4(sp)
    8c5c:	dc000017 	ldw	r16,0(sp)
    8c60:	dec00304 	addi	sp,sp,12
    8c64:	f800283a 	ret

00008c68 <_close_r>:
    8c68:	defffd04 	addi	sp,sp,-12
    8c6c:	dc000015 	stw	r16,0(sp)
    8c70:	04000074 	movhi	r16,1
    8c74:	84363204 	addi	r16,r16,-10040
    8c78:	dc400115 	stw	r17,4(sp)
    8c7c:	80000015 	stw	zero,0(r16)
    8c80:	2023883a 	mov	r17,r4
    8c84:	2809883a 	mov	r4,r5
    8c88:	dfc00215 	stw	ra,8(sp)
    8c8c:	0005f380 	call	5f38 <close>
    8c90:	1007883a 	mov	r3,r2
    8c94:	00bfffc4 	movi	r2,-1
    8c98:	18800626 	beq	r3,r2,8cb4 <_close_r+0x4c>
    8c9c:	1805883a 	mov	r2,r3
    8ca0:	dfc00217 	ldw	ra,8(sp)
    8ca4:	dc400117 	ldw	r17,4(sp)
    8ca8:	dc000017 	ldw	r16,0(sp)
    8cac:	dec00304 	addi	sp,sp,12
    8cb0:	f800283a 	ret
    8cb4:	80800017 	ldw	r2,0(r16)
    8cb8:	103ff826 	beq	r2,zero,8c9c <_close_r+0x34>
    8cbc:	88800015 	stw	r2,0(r17)
    8cc0:	1805883a 	mov	r2,r3
    8cc4:	dfc00217 	ldw	ra,8(sp)
    8cc8:	dc400117 	ldw	r17,4(sp)
    8ccc:	dc000017 	ldw	r16,0(sp)
    8cd0:	dec00304 	addi	sp,sp,12
    8cd4:	f800283a 	ret

00008cd8 <_fclose_r>:
    8cd8:	defffc04 	addi	sp,sp,-16
    8cdc:	dc400115 	stw	r17,4(sp)
    8ce0:	dc000015 	stw	r16,0(sp)
    8ce4:	dfc00315 	stw	ra,12(sp)
    8ce8:	dc800215 	stw	r18,8(sp)
    8cec:	2821883a 	mov	r16,r5
    8cf0:	2023883a 	mov	r17,r4
    8cf4:	28002926 	beq	r5,zero,8d9c <_fclose_r+0xc4>
    8cf8:	00079380 	call	7938 <__sfp_lock_acquire>
    8cfc:	88000226 	beq	r17,zero,8d08 <_fclose_r+0x30>
    8d00:	88800e17 	ldw	r2,56(r17)
    8d04:	10002d26 	beq	r2,zero,8dbc <_fclose_r+0xe4>
    8d08:	8080030f 	ldh	r2,12(r16)
    8d0c:	10002226 	beq	r2,zero,8d98 <_fclose_r+0xc0>
    8d10:	8809883a 	mov	r4,r17
    8d14:	800b883a 	mov	r5,r16
    8d18:	00076b00 	call	76b0 <_fflush_r>
    8d1c:	1025883a 	mov	r18,r2
    8d20:	80800b17 	ldw	r2,44(r16)
    8d24:	10000426 	beq	r2,zero,8d38 <_fclose_r+0x60>
    8d28:	81400717 	ldw	r5,28(r16)
    8d2c:	8809883a 	mov	r4,r17
    8d30:	103ee83a 	callr	r2
    8d34:	10002a16 	blt	r2,zero,8de0 <_fclose_r+0x108>
    8d38:	8080030b 	ldhu	r2,12(r16)
    8d3c:	1080200c 	andi	r2,r2,128
    8d40:	1000231e 	bne	r2,zero,8dd0 <_fclose_r+0xf8>
    8d44:	81400c17 	ldw	r5,48(r16)
    8d48:	28000526 	beq	r5,zero,8d60 <_fclose_r+0x88>
    8d4c:	80801004 	addi	r2,r16,64
    8d50:	28800226 	beq	r5,r2,8d5c <_fclose_r+0x84>
    8d54:	8809883a 	mov	r4,r17
    8d58:	0007ccc0 	call	7ccc <_free_r>
    8d5c:	80000c15 	stw	zero,48(r16)
    8d60:	81401117 	ldw	r5,68(r16)
    8d64:	28000326 	beq	r5,zero,8d74 <_fclose_r+0x9c>
    8d68:	8809883a 	mov	r4,r17
    8d6c:	0007ccc0 	call	7ccc <_free_r>
    8d70:	80001115 	stw	zero,68(r16)
    8d74:	8000030d 	sth	zero,12(r16)
    8d78:	000793c0 	call	793c <__sfp_lock_release>
    8d7c:	9005883a 	mov	r2,r18
    8d80:	dfc00317 	ldw	ra,12(sp)
    8d84:	dc800217 	ldw	r18,8(sp)
    8d88:	dc400117 	ldw	r17,4(sp)
    8d8c:	dc000017 	ldw	r16,0(sp)
    8d90:	dec00404 	addi	sp,sp,16
    8d94:	f800283a 	ret
    8d98:	000793c0 	call	793c <__sfp_lock_release>
    8d9c:	0025883a 	mov	r18,zero
    8da0:	9005883a 	mov	r2,r18
    8da4:	dfc00317 	ldw	ra,12(sp)
    8da8:	dc800217 	ldw	r18,8(sp)
    8dac:	dc400117 	ldw	r17,4(sp)
    8db0:	dc000017 	ldw	r16,0(sp)
    8db4:	dec00404 	addi	sp,sp,16
    8db8:	f800283a 	ret
    8dbc:	8809883a 	mov	r4,r17
    8dc0:	00079480 	call	7948 <__sinit>
    8dc4:	8080030f 	ldh	r2,12(r16)
    8dc8:	103fd11e 	bne	r2,zero,8d10 <_fclose_r+0x38>
    8dcc:	003ff206 	br	8d98 <_fclose_r+0xc0>
    8dd0:	81400417 	ldw	r5,16(r16)
    8dd4:	8809883a 	mov	r4,r17
    8dd8:	0007ccc0 	call	7ccc <_free_r>
    8ddc:	003fd906 	br	8d44 <_fclose_r+0x6c>
    8de0:	04bfffc4 	movi	r18,-1
    8de4:	003fd406 	br	8d38 <_fclose_r+0x60>

00008de8 <fclose>:
    8de8:	00800074 	movhi	r2,1
    8dec:	10aea204 	addi	r2,r2,-17784
    8df0:	200b883a 	mov	r5,r4
    8df4:	11000017 	ldw	r4,0(r2)
    8df8:	0008cd81 	jmpi	8cd8 <_fclose_r>

00008dfc <_fstat_r>:
    8dfc:	defffd04 	addi	sp,sp,-12
    8e00:	dc000015 	stw	r16,0(sp)
    8e04:	04000074 	movhi	r16,1
    8e08:	84363204 	addi	r16,r16,-10040
    8e0c:	dc400115 	stw	r17,4(sp)
    8e10:	80000015 	stw	zero,0(r16)
    8e14:	2023883a 	mov	r17,r4
    8e18:	2809883a 	mov	r4,r5
    8e1c:	300b883a 	mov	r5,r6
    8e20:	dfc00215 	stw	ra,8(sp)
    8e24:	00090300 	call	9030 <fstat>
    8e28:	1007883a 	mov	r3,r2
    8e2c:	00bfffc4 	movi	r2,-1
    8e30:	18800626 	beq	r3,r2,8e4c <_fstat_r+0x50>
    8e34:	1805883a 	mov	r2,r3
    8e38:	dfc00217 	ldw	ra,8(sp)
    8e3c:	dc400117 	ldw	r17,4(sp)
    8e40:	dc000017 	ldw	r16,0(sp)
    8e44:	dec00304 	addi	sp,sp,12
    8e48:	f800283a 	ret
    8e4c:	80800017 	ldw	r2,0(r16)
    8e50:	103ff826 	beq	r2,zero,8e34 <_fstat_r+0x38>
    8e54:	88800015 	stw	r2,0(r17)
    8e58:	1805883a 	mov	r2,r3
    8e5c:	dfc00217 	ldw	ra,8(sp)
    8e60:	dc400117 	ldw	r17,4(sp)
    8e64:	dc000017 	ldw	r16,0(sp)
    8e68:	dec00304 	addi	sp,sp,12
    8e6c:	f800283a 	ret

00008e70 <_isatty_r>:
    8e70:	defffd04 	addi	sp,sp,-12
    8e74:	dc000015 	stw	r16,0(sp)
    8e78:	04000074 	movhi	r16,1
    8e7c:	84363204 	addi	r16,r16,-10040
    8e80:	dc400115 	stw	r17,4(sp)
    8e84:	80000015 	stw	zero,0(r16)
    8e88:	2023883a 	mov	r17,r4
    8e8c:	2809883a 	mov	r4,r5
    8e90:	dfc00215 	stw	ra,8(sp)
    8e94:	00091640 	call	9164 <isatty>
    8e98:	1007883a 	mov	r3,r2
    8e9c:	00bfffc4 	movi	r2,-1
    8ea0:	18800626 	beq	r3,r2,8ebc <_isatty_r+0x4c>
    8ea4:	1805883a 	mov	r2,r3
    8ea8:	dfc00217 	ldw	ra,8(sp)
    8eac:	dc400117 	ldw	r17,4(sp)
    8eb0:	dc000017 	ldw	r16,0(sp)
    8eb4:	dec00304 	addi	sp,sp,12
    8eb8:	f800283a 	ret
    8ebc:	80800017 	ldw	r2,0(r16)
    8ec0:	103ff826 	beq	r2,zero,8ea4 <_isatty_r+0x34>
    8ec4:	88800015 	stw	r2,0(r17)
    8ec8:	1805883a 	mov	r2,r3
    8ecc:	dfc00217 	ldw	ra,8(sp)
    8ed0:	dc400117 	ldw	r17,4(sp)
    8ed4:	dc000017 	ldw	r16,0(sp)
    8ed8:	dec00304 	addi	sp,sp,12
    8edc:	f800283a 	ret

00008ee0 <_lseek_r>:
    8ee0:	defffd04 	addi	sp,sp,-12
    8ee4:	dc000015 	stw	r16,0(sp)
    8ee8:	04000074 	movhi	r16,1
    8eec:	84363204 	addi	r16,r16,-10040
    8ef0:	dc400115 	stw	r17,4(sp)
    8ef4:	80000015 	stw	zero,0(r16)
    8ef8:	2023883a 	mov	r17,r4
    8efc:	2809883a 	mov	r4,r5
    8f00:	300b883a 	mov	r5,r6
    8f04:	380d883a 	mov	r6,r7
    8f08:	dfc00215 	stw	ra,8(sp)
    8f0c:	00092840 	call	9284 <lseek>
    8f10:	1007883a 	mov	r3,r2
    8f14:	00bfffc4 	movi	r2,-1
    8f18:	18800626 	beq	r3,r2,8f34 <_lseek_r+0x54>
    8f1c:	1805883a 	mov	r2,r3
    8f20:	dfc00217 	ldw	ra,8(sp)
    8f24:	dc400117 	ldw	r17,4(sp)
    8f28:	dc000017 	ldw	r16,0(sp)
    8f2c:	dec00304 	addi	sp,sp,12
    8f30:	f800283a 	ret
    8f34:	80800017 	ldw	r2,0(r16)
    8f38:	103ff826 	beq	r2,zero,8f1c <_lseek_r+0x3c>
    8f3c:	88800015 	stw	r2,0(r17)
    8f40:	1805883a 	mov	r2,r3
    8f44:	dfc00217 	ldw	ra,8(sp)
    8f48:	dc400117 	ldw	r17,4(sp)
    8f4c:	dc000017 	ldw	r16,0(sp)
    8f50:	dec00304 	addi	sp,sp,12
    8f54:	f800283a 	ret

00008f58 <_read_r>:
    8f58:	defffd04 	addi	sp,sp,-12
    8f5c:	dc000015 	stw	r16,0(sp)
    8f60:	04000074 	movhi	r16,1
    8f64:	84363204 	addi	r16,r16,-10040
    8f68:	dc400115 	stw	r17,4(sp)
    8f6c:	80000015 	stw	zero,0(r16)
    8f70:	2023883a 	mov	r17,r4
    8f74:	2809883a 	mov	r4,r5
    8f78:	300b883a 	mov	r5,r6
    8f7c:	380d883a 	mov	r6,r7
    8f80:	dfc00215 	stw	ra,8(sp)
    8f84:	00094140 	call	9414 <read>
    8f88:	1007883a 	mov	r3,r2
    8f8c:	00bfffc4 	movi	r2,-1
    8f90:	18800626 	beq	r3,r2,8fac <_read_r+0x54>
    8f94:	1805883a 	mov	r2,r3
    8f98:	dfc00217 	ldw	ra,8(sp)
    8f9c:	dc400117 	ldw	r17,4(sp)
    8fa0:	dc000017 	ldw	r16,0(sp)
    8fa4:	dec00304 	addi	sp,sp,12
    8fa8:	f800283a 	ret
    8fac:	80800017 	ldw	r2,0(r16)
    8fb0:	103ff826 	beq	r2,zero,8f94 <_read_r+0x3c>
    8fb4:	88800015 	stw	r2,0(r17)
    8fb8:	1805883a 	mov	r2,r3
    8fbc:	dfc00217 	ldw	ra,8(sp)
    8fc0:	dc400117 	ldw	r17,4(sp)
    8fc4:	dc000017 	ldw	r16,0(sp)
    8fc8:	dec00304 	addi	sp,sp,12
    8fcc:	f800283a 	ret

00008fd0 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    8fd0:	defffd04 	addi	sp,sp,-12
    8fd4:	df000215 	stw	fp,8(sp)
    8fd8:	df000204 	addi	fp,sp,8
    8fdc:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    8fe0:	e0bfff17 	ldw	r2,-4(fp)
    8fe4:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    8fe8:	e0bffe17 	ldw	r2,-8(fp)
    8fec:	1005003a 	cmpeq	r2,r2,zero
    8ff0:	1000021e 	bne	r2,zero,8ffc <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    8ff4:	002af070 	cmpltui	zero,zero,43969
    8ff8:	00000106 	br	9000 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    8ffc:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    9000:	e037883a 	mov	sp,fp
    9004:	df000017 	ldw	fp,0(sp)
    9008:	dec00104 	addi	sp,sp,4
    900c:	f800283a 	ret

00009010 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    9010:	defffd04 	addi	sp,sp,-12
    9014:	dfc00215 	stw	ra,8(sp)
    9018:	df000115 	stw	fp,4(sp)
    901c:	df000104 	addi	fp,sp,4
    9020:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    9024:	e13fff17 	ldw	r4,-4(fp)
    9028:	0008fd00 	call	8fd0 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    902c:	003fff06 	br	902c <_exit+0x1c>

00009030 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    9030:	defff904 	addi	sp,sp,-28
    9034:	dfc00615 	stw	ra,24(sp)
    9038:	df000515 	stw	fp,20(sp)
    903c:	df000504 	addi	fp,sp,20
    9040:	e13ffc15 	stw	r4,-16(fp)
    9044:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    9048:	e0bffc17 	ldw	r2,-16(fp)
    904c:	1004803a 	cmplt	r2,r2,zero
    9050:	1000081e 	bne	r2,zero,9074 <fstat+0x44>
    9054:	e0bffc17 	ldw	r2,-16(fp)
    9058:	10800324 	muli	r2,r2,12
    905c:	1007883a 	mov	r3,r2
    9060:	00800074 	movhi	r2,1
    9064:	10ac3704 	addi	r2,r2,-20260
    9068:	1887883a 	add	r3,r3,r2
    906c:	e0ffff15 	stw	r3,-4(fp)
    9070:	00000106 	br	9078 <fstat+0x48>
    9074:	e03fff15 	stw	zero,-4(fp)
    9078:	e0bfff17 	ldw	r2,-4(fp)
    907c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    9080:	e0bffb17 	ldw	r2,-20(fp)
    9084:	1005003a 	cmpeq	r2,r2,zero
    9088:	1000121e 	bne	r2,zero,90d4 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    908c:	e0bffb17 	ldw	r2,-20(fp)
    9090:	10800017 	ldw	r2,0(r2)
    9094:	10800817 	ldw	r2,32(r2)
    9098:	1005003a 	cmpeq	r2,r2,zero
    909c:	1000081e 	bne	r2,zero,90c0 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
    90a0:	e0bffb17 	ldw	r2,-20(fp)
    90a4:	10800017 	ldw	r2,0(r2)
    90a8:	10800817 	ldw	r2,32(r2)
    90ac:	e13ffb17 	ldw	r4,-20(fp)
    90b0:	e17ffd17 	ldw	r5,-12(fp)
    90b4:	103ee83a 	callr	r2
    90b8:	e0bffe15 	stw	r2,-8(fp)
    90bc:	00000b06 	br	90ec <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    90c0:	e0fffd17 	ldw	r3,-12(fp)
    90c4:	00880004 	movi	r2,8192
    90c8:	18800115 	stw	r2,4(r3)
      return 0;
    90cc:	e03ffe15 	stw	zero,-8(fp)
    90d0:	00000606 	br	90ec <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    90d4:	00091040 	call	9104 <alt_get_errno>
    90d8:	1007883a 	mov	r3,r2
    90dc:	00801444 	movi	r2,81
    90e0:	18800015 	stw	r2,0(r3)
    return -1;
    90e4:	00bfffc4 	movi	r2,-1
    90e8:	e0bffe15 	stw	r2,-8(fp)
    90ec:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    90f0:	e037883a 	mov	sp,fp
    90f4:	dfc00117 	ldw	ra,4(sp)
    90f8:	df000017 	ldw	fp,0(sp)
    90fc:	dec00204 	addi	sp,sp,8
    9100:	f800283a 	ret

00009104 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9104:	defffd04 	addi	sp,sp,-12
    9108:	dfc00215 	stw	ra,8(sp)
    910c:	df000115 	stw	fp,4(sp)
    9110:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    9114:	00800074 	movhi	r2,1
    9118:	10ae9f04 	addi	r2,r2,-17796
    911c:	10800017 	ldw	r2,0(r2)
    9120:	1005003a 	cmpeq	r2,r2,zero
    9124:	1000061e 	bne	r2,zero,9140 <alt_get_errno+0x3c>
    9128:	00800074 	movhi	r2,1
    912c:	10ae9f04 	addi	r2,r2,-17796
    9130:	10800017 	ldw	r2,0(r2)
    9134:	103ee83a 	callr	r2
    9138:	e0bfff15 	stw	r2,-4(fp)
    913c:	00000306 	br	914c <alt_get_errno+0x48>
    9140:	00800074 	movhi	r2,1
    9144:	10b63204 	addi	r2,r2,-10040
    9148:	e0bfff15 	stw	r2,-4(fp)
    914c:	e0bfff17 	ldw	r2,-4(fp)
}
    9150:	e037883a 	mov	sp,fp
    9154:	dfc00117 	ldw	ra,4(sp)
    9158:	df000017 	ldw	fp,0(sp)
    915c:	dec00204 	addi	sp,sp,8
    9160:	f800283a 	ret

00009164 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    9164:	deffeb04 	addi	sp,sp,-84
    9168:	dfc01415 	stw	ra,80(sp)
    916c:	df001315 	stw	fp,76(sp)
    9170:	df001304 	addi	fp,sp,76
    9174:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    9178:	e0bffd17 	ldw	r2,-12(fp)
    917c:	1004803a 	cmplt	r2,r2,zero
    9180:	1000081e 	bne	r2,zero,91a4 <isatty+0x40>
    9184:	e0bffd17 	ldw	r2,-12(fp)
    9188:	10800324 	muli	r2,r2,12
    918c:	1007883a 	mov	r3,r2
    9190:	00800074 	movhi	r2,1
    9194:	10ac3704 	addi	r2,r2,-20260
    9198:	1887883a 	add	r3,r3,r2
    919c:	e0ffff15 	stw	r3,-4(fp)
    91a0:	00000106 	br	91a8 <isatty+0x44>
    91a4:	e03fff15 	stw	zero,-4(fp)
    91a8:	e0bfff17 	ldw	r2,-4(fp)
    91ac:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
    91b0:	e0bfed17 	ldw	r2,-76(fp)
    91b4:	1005003a 	cmpeq	r2,r2,zero
    91b8:	10000f1e 	bne	r2,zero,91f8 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    91bc:	e0bfed17 	ldw	r2,-76(fp)
    91c0:	10800017 	ldw	r2,0(r2)
    91c4:	10800817 	ldw	r2,32(r2)
    91c8:	1004c03a 	cmpne	r2,r2,zero
    91cc:	1000031e 	bne	r2,zero,91dc <isatty+0x78>
    {
      return 1;
    91d0:	00800044 	movi	r2,1
    91d4:	e0bffe15 	stw	r2,-8(fp)
    91d8:	00000c06 	br	920c <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    91dc:	e17fee04 	addi	r5,fp,-72
    91e0:	e13ffd17 	ldw	r4,-12(fp)
    91e4:	00090300 	call	9030 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    91e8:	e0bfef17 	ldw	r2,-68(fp)
    91ec:	10880020 	cmpeqi	r2,r2,8192
    91f0:	e0bffe15 	stw	r2,-8(fp)
    91f4:	00000506 	br	920c <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    91f8:	00092240 	call	9224 <alt_get_errno>
    91fc:	1007883a 	mov	r3,r2
    9200:	00801444 	movi	r2,81
    9204:	18800015 	stw	r2,0(r3)
    return 0;
    9208:	e03ffe15 	stw	zero,-8(fp)
    920c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    9210:	e037883a 	mov	sp,fp
    9214:	dfc00117 	ldw	ra,4(sp)
    9218:	df000017 	ldw	fp,0(sp)
    921c:	dec00204 	addi	sp,sp,8
    9220:	f800283a 	ret

00009224 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9224:	defffd04 	addi	sp,sp,-12
    9228:	dfc00215 	stw	ra,8(sp)
    922c:	df000115 	stw	fp,4(sp)
    9230:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    9234:	00800074 	movhi	r2,1
    9238:	10ae9f04 	addi	r2,r2,-17796
    923c:	10800017 	ldw	r2,0(r2)
    9240:	1005003a 	cmpeq	r2,r2,zero
    9244:	1000061e 	bne	r2,zero,9260 <alt_get_errno+0x3c>
    9248:	00800074 	movhi	r2,1
    924c:	10ae9f04 	addi	r2,r2,-17796
    9250:	10800017 	ldw	r2,0(r2)
    9254:	103ee83a 	callr	r2
    9258:	e0bfff15 	stw	r2,-4(fp)
    925c:	00000306 	br	926c <alt_get_errno+0x48>
    9260:	00800074 	movhi	r2,1
    9264:	10b63204 	addi	r2,r2,-10040
    9268:	e0bfff15 	stw	r2,-4(fp)
    926c:	e0bfff17 	ldw	r2,-4(fp)
}
    9270:	e037883a 	mov	sp,fp
    9274:	dfc00117 	ldw	ra,4(sp)
    9278:	df000017 	ldw	fp,0(sp)
    927c:	dec00204 	addi	sp,sp,8
    9280:	f800283a 	ret

00009284 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    9284:	defff804 	addi	sp,sp,-32
    9288:	dfc00715 	stw	ra,28(sp)
    928c:	df000615 	stw	fp,24(sp)
    9290:	df000604 	addi	fp,sp,24
    9294:	e13ffc15 	stw	r4,-16(fp)
    9298:	e17ffd15 	stw	r5,-12(fp)
    929c:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    92a0:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    92a4:	e0bffc17 	ldw	r2,-16(fp)
    92a8:	1004803a 	cmplt	r2,r2,zero
    92ac:	1000081e 	bne	r2,zero,92d0 <lseek+0x4c>
    92b0:	e0bffc17 	ldw	r2,-16(fp)
    92b4:	10800324 	muli	r2,r2,12
    92b8:	1007883a 	mov	r3,r2
    92bc:	00800074 	movhi	r2,1
    92c0:	10ac3704 	addi	r2,r2,-20260
    92c4:	1887883a 	add	r3,r3,r2
    92c8:	e0ffff15 	stw	r3,-4(fp)
    92cc:	00000106 	br	92d4 <lseek+0x50>
    92d0:	e03fff15 	stw	zero,-4(fp)
    92d4:	e0bfff17 	ldw	r2,-4(fp)
    92d8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
    92dc:	e0bffb17 	ldw	r2,-20(fp)
    92e0:	1005003a 	cmpeq	r2,r2,zero
    92e4:	1000111e 	bne	r2,zero,932c <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    92e8:	e0bffb17 	ldw	r2,-20(fp)
    92ec:	10800017 	ldw	r2,0(r2)
    92f0:	10800717 	ldw	r2,28(r2)
    92f4:	1005003a 	cmpeq	r2,r2,zero
    92f8:	1000091e 	bne	r2,zero,9320 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    92fc:	e0bffb17 	ldw	r2,-20(fp)
    9300:	10800017 	ldw	r2,0(r2)
    9304:	10800717 	ldw	r2,28(r2)
    9308:	e13ffb17 	ldw	r4,-20(fp)
    930c:	e17ffd17 	ldw	r5,-12(fp)
    9310:	e1bffe17 	ldw	r6,-8(fp)
    9314:	103ee83a 	callr	r2
    9318:	e0bffa15 	stw	r2,-24(fp)
    931c:	00000506 	br	9334 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    9320:	00bfde84 	movi	r2,-134
    9324:	e0bffa15 	stw	r2,-24(fp)
    9328:	00000206 	br	9334 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
    932c:	00bfebc4 	movi	r2,-81
    9330:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
    9334:	e0bffa17 	ldw	r2,-24(fp)
    9338:	1004403a 	cmpge	r2,r2,zero
    933c:	1000071e 	bne	r2,zero,935c <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
    9340:	00093740 	call	9374 <alt_get_errno>
    9344:	1007883a 	mov	r3,r2
    9348:	e0bffa17 	ldw	r2,-24(fp)
    934c:	0085c83a 	sub	r2,zero,r2
    9350:	18800015 	stw	r2,0(r3)
    rc = -1;
    9354:	00bfffc4 	movi	r2,-1
    9358:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
    935c:	e0bffa17 	ldw	r2,-24(fp)
}
    9360:	e037883a 	mov	sp,fp
    9364:	dfc00117 	ldw	ra,4(sp)
    9368:	df000017 	ldw	fp,0(sp)
    936c:	dec00204 	addi	sp,sp,8
    9370:	f800283a 	ret

00009374 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9374:	defffd04 	addi	sp,sp,-12
    9378:	dfc00215 	stw	ra,8(sp)
    937c:	df000115 	stw	fp,4(sp)
    9380:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    9384:	00800074 	movhi	r2,1
    9388:	10ae9f04 	addi	r2,r2,-17796
    938c:	10800017 	ldw	r2,0(r2)
    9390:	1005003a 	cmpeq	r2,r2,zero
    9394:	1000061e 	bne	r2,zero,93b0 <alt_get_errno+0x3c>
    9398:	00800074 	movhi	r2,1
    939c:	10ae9f04 	addi	r2,r2,-17796
    93a0:	10800017 	ldw	r2,0(r2)
    93a4:	103ee83a 	callr	r2
    93a8:	e0bfff15 	stw	r2,-4(fp)
    93ac:	00000306 	br	93bc <alt_get_errno+0x48>
    93b0:	00800074 	movhi	r2,1
    93b4:	10b63204 	addi	r2,r2,-10040
    93b8:	e0bfff15 	stw	r2,-4(fp)
    93bc:	e0bfff17 	ldw	r2,-4(fp)
}
    93c0:	e037883a 	mov	sp,fp
    93c4:	dfc00117 	ldw	ra,4(sp)
    93c8:	df000017 	ldw	fp,0(sp)
    93cc:	dec00204 	addi	sp,sp,8
    93d0:	f800283a 	ret

000093d4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    93d4:	defffe04 	addi	sp,sp,-8
    93d8:	df000115 	stw	fp,4(sp)
    93dc:	df000104 	addi	fp,sp,4
    93e0:	e13fff15 	stw	r4,-4(fp)
}
    93e4:	e037883a 	mov	sp,fp
    93e8:	df000017 	ldw	fp,0(sp)
    93ec:	dec00104 	addi	sp,sp,4
    93f0:	f800283a 	ret

000093f4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    93f4:	defffe04 	addi	sp,sp,-8
    93f8:	df000115 	stw	fp,4(sp)
    93fc:	df000104 	addi	fp,sp,4
    9400:	e13fff15 	stw	r4,-4(fp)
}
    9404:	e037883a 	mov	sp,fp
    9408:	df000017 	ldw	fp,0(sp)
    940c:	dec00104 	addi	sp,sp,4
    9410:	f800283a 	ret

00009414 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    9414:	defff704 	addi	sp,sp,-36
    9418:	dfc00815 	stw	ra,32(sp)
    941c:	df000715 	stw	fp,28(sp)
    9420:	df000704 	addi	fp,sp,28
    9424:	e13ffb15 	stw	r4,-20(fp)
    9428:	e17ffc15 	stw	r5,-16(fp)
    942c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    9430:	e0bffb17 	ldw	r2,-20(fp)
    9434:	1004803a 	cmplt	r2,r2,zero
    9438:	1000081e 	bne	r2,zero,945c <read+0x48>
    943c:	e0bffb17 	ldw	r2,-20(fp)
    9440:	10800324 	muli	r2,r2,12
    9444:	1007883a 	mov	r3,r2
    9448:	00800074 	movhi	r2,1
    944c:	10ac3704 	addi	r2,r2,-20260
    9450:	1887883a 	add	r3,r3,r2
    9454:	e0ffff15 	stw	r3,-4(fp)
    9458:	00000106 	br	9460 <read+0x4c>
    945c:	e03fff15 	stw	zero,-4(fp)
    9460:	e0bfff17 	ldw	r2,-4(fp)
    9464:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    9468:	e0bffa17 	ldw	r2,-24(fp)
    946c:	1005003a 	cmpeq	r2,r2,zero
    9470:	1000241e 	bne	r2,zero,9504 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    9474:	e0bffa17 	ldw	r2,-24(fp)
    9478:	10800217 	ldw	r2,8(r2)
    947c:	108000cc 	andi	r2,r2,3
    9480:	10800060 	cmpeqi	r2,r2,1
    9484:	10001a1e 	bne	r2,zero,94f0 <read+0xdc>
    9488:	e0bffa17 	ldw	r2,-24(fp)
    948c:	10800017 	ldw	r2,0(r2)
    9490:	10800517 	ldw	r2,20(r2)
    9494:	1005003a 	cmpeq	r2,r2,zero
    9498:	1000151e 	bne	r2,zero,94f0 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    949c:	e0bffa17 	ldw	r2,-24(fp)
    94a0:	10800017 	ldw	r2,0(r2)
    94a4:	10800517 	ldw	r2,20(r2)
    94a8:	e17ffc17 	ldw	r5,-16(fp)
    94ac:	e1bffd17 	ldw	r6,-12(fp)
    94b0:	e13ffa17 	ldw	r4,-24(fp)
    94b4:	103ee83a 	callr	r2
    94b8:	e0bff915 	stw	r2,-28(fp)
    94bc:	e0bff917 	ldw	r2,-28(fp)
    94c0:	1004403a 	cmpge	r2,r2,zero
    94c4:	1000071e 	bne	r2,zero,94e4 <read+0xd0>
        {
          ALT_ERRNO = -rval;
    94c8:	00095340 	call	9534 <alt_get_errno>
    94cc:	e0fff917 	ldw	r3,-28(fp)
    94d0:	00c7c83a 	sub	r3,zero,r3
    94d4:	10c00015 	stw	r3,0(r2)
          return -1;
    94d8:	00bfffc4 	movi	r2,-1
    94dc:	e0bffe15 	stw	r2,-8(fp)
    94e0:	00000e06 	br	951c <read+0x108>
        }
        return rval;
    94e4:	e0bff917 	ldw	r2,-28(fp)
    94e8:	e0bffe15 	stw	r2,-8(fp)
    94ec:	00000b06 	br	951c <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
    94f0:	00095340 	call	9534 <alt_get_errno>
    94f4:	1007883a 	mov	r3,r2
    94f8:	00800344 	movi	r2,13
    94fc:	18800015 	stw	r2,0(r3)
    9500:	00000406 	br	9514 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    9504:	00095340 	call	9534 <alt_get_errno>
    9508:	1007883a 	mov	r3,r2
    950c:	00801444 	movi	r2,81
    9510:	18800015 	stw	r2,0(r3)
  }
  return -1;
    9514:	00bfffc4 	movi	r2,-1
    9518:	e0bffe15 	stw	r2,-8(fp)
    951c:	e0bffe17 	ldw	r2,-8(fp)
}
    9520:	e037883a 	mov	sp,fp
    9524:	dfc00117 	ldw	ra,4(sp)
    9528:	df000017 	ldw	fp,0(sp)
    952c:	dec00204 	addi	sp,sp,8
    9530:	f800283a 	ret

00009534 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9534:	defffd04 	addi	sp,sp,-12
    9538:	dfc00215 	stw	ra,8(sp)
    953c:	df000115 	stw	fp,4(sp)
    9540:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    9544:	00800074 	movhi	r2,1
    9548:	10ae9f04 	addi	r2,r2,-17796
    954c:	10800017 	ldw	r2,0(r2)
    9550:	1005003a 	cmpeq	r2,r2,zero
    9554:	1000061e 	bne	r2,zero,9570 <alt_get_errno+0x3c>
    9558:	00800074 	movhi	r2,1
    955c:	10ae9f04 	addi	r2,r2,-17796
    9560:	10800017 	ldw	r2,0(r2)
    9564:	103ee83a 	callr	r2
    9568:	e0bfff15 	stw	r2,-4(fp)
    956c:	00000306 	br	957c <alt_get_errno+0x48>
    9570:	00800074 	movhi	r2,1
    9574:	10b63204 	addi	r2,r2,-10040
    9578:	e0bfff15 	stw	r2,-4(fp)
    957c:	e0bfff17 	ldw	r2,-4(fp)
}
    9580:	e037883a 	mov	sp,fp
    9584:	dfc00117 	ldw	ra,4(sp)
    9588:	df000017 	ldw	fp,0(sp)
    958c:	dec00204 	addi	sp,sp,8
    9590:	f800283a 	ret

00009594 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    9594:	defff804 	addi	sp,sp,-32
    9598:	df000715 	stw	fp,28(sp)
    959c:	df000704 	addi	fp,sp,28
    95a0:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    95a4:	0005303a 	rdctl	r2,status
    95a8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    95ac:	e0fffb17 	ldw	r3,-20(fp)
    95b0:	00bfff84 	movi	r2,-2
    95b4:	1884703a 	and	r2,r3,r2
    95b8:	1001703a 	wrctl	status,r2
  
  return context;
    95bc:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    95c0:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    95c4:	d0a00d17 	ldw	r2,-32716(gp)
    95c8:	10c000c4 	addi	r3,r2,3
    95cc:	00bfff04 	movi	r2,-4
    95d0:	1884703a 	and	r2,r3,r2
    95d4:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    95d8:	d0e00d17 	ldw	r3,-32716(gp)
    95dc:	e0bffe17 	ldw	r2,-8(fp)
    95e0:	1887883a 	add	r3,r3,r2
    95e4:	00802034 	movhi	r2,128
    95e8:	10800004 	addi	r2,r2,0
    95ec:	10c0072e 	bgeu	r2,r3,960c <sbrk+0x78>
    95f0:	e0bffd17 	ldw	r2,-12(fp)
    95f4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    95f8:	e0bffa17 	ldw	r2,-24(fp)
    95fc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    9600:	00bfffc4 	movi	r2,-1
    9604:	e0bfff15 	stw	r2,-4(fp)
    9608:	00000c06 	br	963c <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
    960c:	d0a00d17 	ldw	r2,-32716(gp)
    9610:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
    9614:	d0e00d17 	ldw	r3,-32716(gp)
    9618:	e0bffe17 	ldw	r2,-8(fp)
    961c:	1885883a 	add	r2,r3,r2
    9620:	d0a00d15 	stw	r2,-32716(gp)
    9624:	e0bffd17 	ldw	r2,-12(fp)
    9628:	e0bff915 	stw	r2,-28(fp)
    962c:	e0bff917 	ldw	r2,-28(fp)
    9630:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    9634:	e0bffc17 	ldw	r2,-16(fp)
    9638:	e0bfff15 	stw	r2,-4(fp)
    963c:	e0bfff17 	ldw	r2,-4(fp)
} 
    9640:	e037883a 	mov	sp,fp
    9644:	df000017 	ldw	fp,0(sp)
    9648:	dec00104 	addi	sp,sp,4
    964c:	f800283a 	ret

00009650 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    9650:	defff704 	addi	sp,sp,-36
    9654:	dfc00815 	stw	ra,32(sp)
    9658:	df000715 	stw	fp,28(sp)
    965c:	df000704 	addi	fp,sp,28
    9660:	e13ffb15 	stw	r4,-20(fp)
    9664:	e17ffc15 	stw	r5,-16(fp)
    9668:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    966c:	e0bffb17 	ldw	r2,-20(fp)
    9670:	1004803a 	cmplt	r2,r2,zero
    9674:	1000081e 	bne	r2,zero,9698 <write+0x48>
    9678:	e0bffb17 	ldw	r2,-20(fp)
    967c:	10800324 	muli	r2,r2,12
    9680:	1007883a 	mov	r3,r2
    9684:	00800074 	movhi	r2,1
    9688:	10ac3704 	addi	r2,r2,-20260
    968c:	1887883a 	add	r3,r3,r2
    9690:	e0ffff15 	stw	r3,-4(fp)
    9694:	00000106 	br	969c <write+0x4c>
    9698:	e03fff15 	stw	zero,-4(fp)
    969c:	e0bfff17 	ldw	r2,-4(fp)
    96a0:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    96a4:	e0bffa17 	ldw	r2,-24(fp)
    96a8:	1005003a 	cmpeq	r2,r2,zero
    96ac:	1000241e 	bne	r2,zero,9740 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    96b0:	e0bffa17 	ldw	r2,-24(fp)
    96b4:	10800217 	ldw	r2,8(r2)
    96b8:	108000cc 	andi	r2,r2,3
    96bc:	1005003a 	cmpeq	r2,r2,zero
    96c0:	10001a1e 	bne	r2,zero,972c <write+0xdc>
    96c4:	e0bffa17 	ldw	r2,-24(fp)
    96c8:	10800017 	ldw	r2,0(r2)
    96cc:	10800617 	ldw	r2,24(r2)
    96d0:	1005003a 	cmpeq	r2,r2,zero
    96d4:	1000151e 	bne	r2,zero,972c <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    96d8:	e0bffa17 	ldw	r2,-24(fp)
    96dc:	10800017 	ldw	r2,0(r2)
    96e0:	10800617 	ldw	r2,24(r2)
    96e4:	e17ffc17 	ldw	r5,-16(fp)
    96e8:	e1bffd17 	ldw	r6,-12(fp)
    96ec:	e13ffa17 	ldw	r4,-24(fp)
    96f0:	103ee83a 	callr	r2
    96f4:	e0bff915 	stw	r2,-28(fp)
    96f8:	e0bff917 	ldw	r2,-28(fp)
    96fc:	1004403a 	cmpge	r2,r2,zero
    9700:	1000071e 	bne	r2,zero,9720 <write+0xd0>
      {
        ALT_ERRNO = -rval;
    9704:	00097700 	call	9770 <alt_get_errno>
    9708:	e0fff917 	ldw	r3,-28(fp)
    970c:	00c7c83a 	sub	r3,zero,r3
    9710:	10c00015 	stw	r3,0(r2)
        return -1;
    9714:	00bfffc4 	movi	r2,-1
    9718:	e0bffe15 	stw	r2,-8(fp)
    971c:	00000e06 	br	9758 <write+0x108>
      }
      return rval;
    9720:	e0bff917 	ldw	r2,-28(fp)
    9724:	e0bffe15 	stw	r2,-8(fp)
    9728:	00000b06 	br	9758 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
    972c:	00097700 	call	9770 <alt_get_errno>
    9730:	1007883a 	mov	r3,r2
    9734:	00800344 	movi	r2,13
    9738:	18800015 	stw	r2,0(r3)
    973c:	00000406 	br	9750 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    9740:	00097700 	call	9770 <alt_get_errno>
    9744:	1007883a 	mov	r3,r2
    9748:	00801444 	movi	r2,81
    974c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    9750:	00bfffc4 	movi	r2,-1
    9754:	e0bffe15 	stw	r2,-8(fp)
    9758:	e0bffe17 	ldw	r2,-8(fp)
}
    975c:	e037883a 	mov	sp,fp
    9760:	dfc00117 	ldw	ra,4(sp)
    9764:	df000017 	ldw	fp,0(sp)
    9768:	dec00204 	addi	sp,sp,8
    976c:	f800283a 	ret

00009770 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9770:	defffd04 	addi	sp,sp,-12
    9774:	dfc00215 	stw	ra,8(sp)
    9778:	df000115 	stw	fp,4(sp)
    977c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    9780:	00800074 	movhi	r2,1
    9784:	10ae9f04 	addi	r2,r2,-17796
    9788:	10800017 	ldw	r2,0(r2)
    978c:	1005003a 	cmpeq	r2,r2,zero
    9790:	1000061e 	bne	r2,zero,97ac <alt_get_errno+0x3c>
    9794:	00800074 	movhi	r2,1
    9798:	10ae9f04 	addi	r2,r2,-17796
    979c:	10800017 	ldw	r2,0(r2)
    97a0:	103ee83a 	callr	r2
    97a4:	e0bfff15 	stw	r2,-4(fp)
    97a8:	00000306 	br	97b8 <alt_get_errno+0x48>
    97ac:	00800074 	movhi	r2,1
    97b0:	10b63204 	addi	r2,r2,-10040
    97b4:	e0bfff15 	stw	r2,-4(fp)
    97b8:	e0bfff17 	ldw	r2,-4(fp)
}
    97bc:	e037883a 	mov	sp,fp
    97c0:	dfc00117 	ldw	ra,4(sp)
    97c4:	df000017 	ldw	fp,0(sp)
    97c8:	dec00204 	addi	sp,sp,8
    97cc:	f800283a 	ret
    97d0:	000074fc 	xorhi	zero,zero,467
