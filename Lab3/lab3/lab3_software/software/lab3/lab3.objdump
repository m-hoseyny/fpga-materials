
lab3.elf:     file format elf32-littlenios2
lab3.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000123f0 memsz 0x000123f0 flags r-x
    LOAD off    0x00013410 vaddr 0x00012410 paddr 0x00014220 align 2**12
         filesz 0x00001e10 memsz 0x00001e10 flags rw-
    LOAD off    0x00016030 vaddr 0x00016030 paddr 0x00016030 align 2**12
         filesz 0x00000000 memsz 0x003d0c1c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001197c  000001b8  000001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000008dc  00011b34  00011b34  00012b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001e10  00012410  00014220  00013410  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          003d0ef6  00016030  00016030  00016030  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00015220  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000f58  00000000  00000000  00015248  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000022c8  00000000  00000000  000161a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002e37c  00000000  00000000  00018468  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009670  00000000  00000000  000467e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00018f0c  00000000  00000000  0004fe54  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000024e0  00000000  00000000  00068d60  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002bf7  00000000  00000000  0006b240  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000d2de  00000000  00000000  0006de37  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000050  00000000  00000000  0007b118  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009a8  00000000  00000000  0007b168  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000801f1  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000801f4  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000801f7  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000801f8  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000801f9  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000801fd  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00080201  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00080205  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0008020e  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00080217  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  00080220  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000021  00000000  00000000  0008022b  2**0
                  CONTENTS, READONLY
 29 .jdi          00004ec8  00000000  00000000  0008024c  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00108489  00000000  00000000  00085114  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b8 l    d  .text	00000000 .text
00011b34 l    d  .rodata	00000000 .rodata
00012410 l    d  .rwdata	00000000 .rwdata
00016030 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 PS2_ISR.c
00000000 l    df *ABS*	00000000 audio_ISR.c
00000000 l    df *ABS*	00000000 globals.c
00000000 l    df *ABS*	00000000 interval_timer_ISR.c
00000000 l    df *ABS*	00000000 media_interrupt_HAL.c
00011b34 l     O .rodata	00000100 B.2038
00011f3e l     O .rodata	00000010 C.33.2184
00000000 l    df *ABS*	00000000 pushbutton_ISR.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 vfprintf.c
00001b10 l     F .text	00000058 __sprint_r
000120be l     O .rodata	00000010 blanks.3452
000120ae l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00003b74 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00005570 l     F .text	00000058 std
0000567c l     F .text	00000008 __fp_lock
00005684 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00012410 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
000141ec l     O .rwdata	00000004 charset
000120f4 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0001223c l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00009a84 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000abb0 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0000b3a4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000b404 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000b504 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0000b7e4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000b8c4 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000ba20 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
0000bee4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00014214 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000c180 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00012dcc l     O .rwdata	00001060 JTAG_UART
00013e2c l     O .rwdata	00000030 AV_Config
00013e5c l     O .rwdata	00000030 Audio
00013e8c l     O .rwdata	0000002c Char_LCD_16x2
00013eb8 l     O .rwdata	0000003c Ethernet
00013ef4 l     O .rwdata	0000002c IrDA_UART
00013f20 l     O .rwdata	0000002c Expansion_JP1
00013f4c l     O .rwdata	0000002c Expansion_JP2
00013f78 l     O .rwdata	0000002c Green_LEDs
00013fa4 l     O .rwdata	0000002c HEX3_HEX0
00013fd0 l     O .rwdata	0000002c HEX7_HEX4
00013ffc l     O .rwdata	0000002c Pushbuttons
00014028 l     O .rwdata	0000002c Red_LEDs
00014054 l     O .rwdata	0000002c Slider_Switches
00014080 l     O .rwdata	00000038 PS2_Port
000140b8 l     O .rwdata	0000002c Serial_Port
000140e4 l     O .rwdata	00000034 USB
00014118 l     O .rwdata	00000048 VGA_Char_Buffer
00014160 l     O .rwdata	00000054 VGA_Pixel_Buffer
000141b4 l     O .rwdata	0000002c SD_Card
0000c614 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000c84c l     F .text	0000022c altera_avalon_jtag_uart_irq
0000ca78 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000d0f4 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_audio.c
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ethernet.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ethernet_low_level_driver.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_parallel_port.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00010bb4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00010da0 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00010edc l     F .text	000000dc alt_file_locked
00011140 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0001191c l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00011ad0 l     F .text	00000040 alt_sim_halt
00001aec g     F .text	0000001c putchar
000071f4 g     F .text	00000094 _mprec_log10
000072e0 g     F .text	00000088 __any_on
00008d98 g     F .text	00000070 _isatty_r
00012214 g     O .rodata	00000028 __mprec_tinytens
0000ba80 g     F .text	0000006c alt_main
00010090 g     F .text	000003d0 alt_up_pixel_buffer_dma_draw_vline
0000052c g     F .text	00000060 interval_timer_ISR
0000e8d4 g     F .text	00000058 alt_up_ps2_disable_read_interrupt
003e69bc g     O .bss	00000100 alt_irq
00008e08 g     F .text	00000078 _lseek_r
00014220 g       *ABS*	00000000 __flash_rwdata_start
0000da78 g     F .text	00000034 alt_up_character_lcd_send_cmd
0000a5a4 g     F .text	00000088 __eqdf2
00016034 g     O .bss	00000001 byte2
0000d468 g     F .text	00000070 alt_up_audio_read_fifo_avail
003e6c4c g       *ABS*	00000000 __alt_heap_start
00001a74 g     F .text	00000044 printf
0000d4d8 g     F .text	00000070 alt_up_audio_record_r
00016035 g     O .bss	00000001 byte3
000086a4 g     F .text	00000068 __sseek
000055d8 g     F .text	000000a4 __sinit
00008918 g     F .text	00000130 __swbuf_r
0000f2b4 g     F .text	00000114 alt_up_char_buffer_string
0000e6ec g     F .text	00000034 read_CE_bit
000062b0 g     F .text	00000084 _setlocale_r
000056d8 g     F .text	00000068 __sfmoreglue
0000bb0c g     F .text	00000020 __malloc_unlock
0000ea80 g     F .text	000000b0 alt_up_ps2_read_data_byte_timeout
0000efbc g     F .text	00000090 alt_up_rs232_read_fd
0000f1e4 g     F .text	000000d0 alt_up_char_buffer_draw
0000d3e0 g     F .text	00000088 alt_up_audio_reset_audio_core
00006d08 g     F .text	000000e0 memmove
00016036 g     O .bss	00000001 byte1
000056c8 g     F .text	00000010 _cleanup
00007368 g     F .text	000000bc _Balloc
00001600 g     F .text	00000094 __fixsfsi
0000f464 g     F .text	000001a0 alt_up_pixel_buffer_dma_draw
0000a6b4 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
0000d9fc g     F .text	0000007c get_DDRAM_addr
0000f424 g     F .text	00000040 alt_up_pixel_buffer_dma_open_dev
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00008d24 g     F .text	00000074 _fstat_r
0001605c g     O .bss	00000004 errno
000160a0 g     O .bss	000f4240 le_buf
0000d3a4 g     F .text	0000003c alt_up_audio_write_interrupt_pending
00016068 g     O .bss	00000004 alt_argv
0001c1e0 g       *ABS*	00000000 _gp
00011344 g     F .text	00000030 usleep
0000f604 g     F .text	00000058 alt_up_pixel_buffer_dma_change_back_buffer_address
00012c4c g     O .rwdata	00000180 alt_fd_list
00001b08 g     F .text	00000008 _putchar_r
00010cdc g     F .text	00000094 alt_find_dev
0000193c g     F .text	000000a0 memcpy
0000dc10 g     F .text	0000004c alt_up_character_lcd_write_fd
0000f3c8 g     F .text	0000005c alt_up_char_buffer_clear
000056bc g     F .text	0000000c _cleanup_r
0000a84c g     F .text	000000f8 __floatsidf
00010e64 g     F .text	00000078 alt_io_redirect
0000a7c4 g     F .text	00000088 __ltdf2
00011b34 g       *ABS*	00000000 __DTOR_END__
0000e578 g     F .text	00000090 alt_up_irda_write_fd
0000ef48 g     F .text	00000074 alt_up_rs232_read_data
00007144 g     F .text	000000b0 __ratio
0000d93c g     F .text	00000060 alt_up_audio_read_fifo_head
0000f6b4 g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
0000e360 g     F .text	0000003c alt_up_irda_get_used_space_in_read_FIFO
0000cc90 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00001ab8 g     F .text	00000034 _printf_r
0000acec g     F .text	00000008 __udivsi3
0000b724 g     F .text	000000c0 isatty
0000e0b8 g     F .text	00000044 alt_up_ethernet_reg_write
00012124 g     O .rodata	000000c8 __mprec_tens
0000fd40 g     F .text	00000350 alt_up_pixel_buffer_dma_draw_hline
0000628c g     F .text	00000008 __locale_charset
0000e308 g     F .text	00000058 alt_up_irda_disable_read_interrupt
00011698 g     F .text	00000090 alt_icache_flush
00016050 g     O .bss	00000004 __malloc_top_pad
00016030 g     O .bss	00000004 flag
000141e8 g     O .rwdata	00000004 __mb_cur_max
00006294 g     F .text	0000000c _localeconv_r
00007a60 g     F .text	0000003c __i2b
00005c70 g     F .text	0000049c __sfvwrite_r
0000862c g     F .text	00000070 _sbrk_r
003e69a0 g     O .bss	0000001c up_dev
00010524 g     F .text	000000d0 helper_plot_pixel
00008e80 g     F .text	00000078 _read_r
00012810 g     O .rwdata	0000000c __lc_ctype
00014208 g     O .rwdata	00000004 alt_max_fd
0000eeb0 g     F .text	00000050 alt_up_rs232_check_parity
0000d99c g     F .text	00000060 alt_up_audio_write_fifo_head
0000df2c g     F .text	00000110 alt_up_ethernet_init
0000b0a8 g     F .text	00000138 __unpack_d
00008c00 g     F .text	00000110 _fclose_r
0000e720 g     F .text	00000034 read_num_bytes_available
0000553c g     F .text	00000034 fflush
00016054 g     O .bss	00000004 __malloc_max_sbrked_mem
0000b564 g     F .text	000001c0 alt_irq_register
0000e688 g     F .text	00000034 read_RI_bit
00009f14 g     F .text	00000074 __adddf3
00007024 g     F .text	00000120 __b2d
0000f6e8 g     F .text	00000164 alt_up_pixel_buffer_dma_clear_screen
000094d4 g     F .text	000005b0 __umoddi3
0000b930 g     F .text	000000f0 lseek
000141e4 g     O .rwdata	00000004 _global_impure_ptr
00007fc8 g     F .text	000005f4 _realloc_r
003e6c4c g       *ABS*	00000000 __bss_end
0000f84c g     F .text	000004f4 alt_up_pixel_buffer_dma_draw_box
00011238 g     F .text	0000010c alt_tick
00008ef8 g     F .text	000005dc __udivdi3
000121ec g     O .rodata	00000028 __mprec_bigtens
00007cbc g     F .text	00000120 __s2b
0000aa1c g     F .text	00000194 __floatunsidf
00006f44 g     F .text	00000060 __mcmp
0c000000 g       *ABS*	00000000 __alt_mem_Flash_flash_data
0000d1f0 g     F .text	00000040 alt_up_audio_open_dev
0000e788 g     F .text	0000002c read_data_byte
000056a4 g     F .text	00000018 __fp_lock_all
0000d62c g     F .text	00000070 alt_up_audio_play_r
000111a0 g     F .text	00000098 alt_alarm_stop
0000e6bc g     F .text	00000030 read_RE_bit
00016060 g     O .bss	00000004 alt_irq_active
0000e39c g     F .text	00000040 alt_up_irda_get_available_space_in_write_FIFO
000000ec g     F .exceptions	000000cc alt_irq_handler
00012c24 g     O .rwdata	00000028 alt_dev_null
00001874 g     F .text	000000c8 __unpack_f
0000def8 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
0000e648 g     F .text	00000040 alt_up_parallel_port_open_dev
0000e92c g     F .text	00000078 alt_up_ps2_write_data_byte
00010ae4 g     F .text	0000001c alt_dcache_flush_all
00006e10 g     F .text	00000070 __hi0bits
00010460 g     F .text	000000c4 alt_up_pixel_buffer_dma_draw_rectangle
0000a944 g     F .text	000000d8 __fixdfsi
00014220 g       *ABS*	00000000 __ram_rwdata_end
00014200 g     O .rwdata	00000008 alt_dev_list
0000c060 g     F .text	00000120 write
00007ee0 g     F .text	000000e8 _putc_r
000105f4 g     F .text	0000039c alt_up_pixel_buffer_dma_draw_line
00012410 g       *ABS*	00000000 __ram_rodata_end
0000b430 g     F .text	000000d4 fstat
0000f04c g     F .text	00000094 alt_up_rs232_write_fd
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
00007b9c g     F .text	00000120 __pow5mult
00016044 g     O .bss	00000004 __nlocale_changed
0000acf4 g     F .text	00000008 __umodsi3
003e6c4c g       *ABS*	00000000 end
0000eca0 g     F .text	000000a8 alt_up_ps2_write_fd
00001714 g     F .text	00000160 __pack_f
0000e3dc g     F .text	00000050 alt_up_irda_check_parity
0000f120 g     F .text	00000084 alt_up_char_buffer_init
0010a2e0 g     O .bss	000f4240 r_buf
0000c794 g     F .text	000000b8 altera_avalon_jtag_uart_init
00011b30 g       *ABS*	00000000 __CTOR_LIST__
00800000 g       *ABS*	00000000 __alt_stack_pointer
0000138c g     F .text	00000124 HEX_PS2
0000d168 g     F .text	00000088 alt_avalon_timer_sc_init
00001694 g     F .text	00000080 __clzsi2
0000ceb4 g     F .text	00000240 altera_avalon_jtag_uart_write
000055c8 g     F .text	00000004 __sfp_lock_acquire
00006c24 g     F .text	000000e4 memchr
0000db20 g     F .text	00000078 alt_up_character_lcd_write
00001b68 g     F .text	00001eac ___vfprintf_internal_r
0000595c g     F .text	00000314 _free_r
0000bb2c g     F .text	00000258 alt_printf
00011920 g     F .text	000001b0 __call_exitprocs
00016048 g     O .bss	00000004 __mlocale_changed
000141f4 g     O .rwdata	00000004 __malloc_sbrk_base
000001b8 g     F .text	0000003c _start
00016070 g     O .bss	00000004 _alt_tick_rate
0000d810 g     F .text	0000012c alt_up_audio_write_fifo
0000772c g     F .text	0000014c __lshift
00016074 g     O .bss	00000004 _alt_nticks
0000bdc4 g     F .text	00000120 read
0000c214 g     F .text	00000400 alt_sys_init
0000dd84 g     F .text	000000b0 alt_up_character_lcd_shift_display
00001568 g     F .text	00000098 __floatsisf
0000d70c g     F .text	00000104 alt_up_audio_read_fifo
000117e8 g     F .text	00000134 __register_exitproc
0000d318 g     F .text	00000050 alt_up_audio_disable_write_interrupt
0000ebac g     F .text	00000058 alt_up_ps2_clear_fifo
0000ee70 g     F .text	00000040 alt_up_rs232_get_available_space_in_write_FIFO
00007878 g     F .text	000001e8 __multiply
0000de34 g     F .text	00000090 alt_up_character_lcd_erase_pos
0000cb28 g     F .text	00000074 altera_avalon_jtag_uart_close
00012410 g       *ABS*	00000000 __ram_rwdata_start
00011b34 g       *ABS*	00000000 __ram_rodata_start
00016078 g     O .bss	00000028 __malloc_current_mallinfo
00007424 g     F .text	0000017c __d2b
0000c64c g     F .text	00000058 altera_avalon_jtag_uart_read_fd
000115e0 g     F .text	000000b8 alt_get_fd
001fe520 g     O .bss	000f4240 re_buf
00011394 g     F .text	0000012c alt_busy_sleep
0000b1e0 g     F .text	000000c8 __fpcmp_parts_d
00008b90 g     F .text	00000070 _close_r
0000d2cc g     F .text	0000004c alt_up_audio_enable_write_interrupt
00011774 g     F .text	00000074 memcmp
0000c6fc g     F .text	00000048 altera_avalon_jtag_uart_close_fd
003e6c4c g       *ABS*	00000000 __alt_stack_base
0000c744 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
0000e2b4 g     F .text	00000054 alt_up_irda_enable_read_interrupt
00003a38 g     F .text	0000013c __swsetup_r
0000a34c g     F .text	00000258 __divdf3
0000d27c g     F .text	00000050 alt_up_audio_disable_read_interrupt
00005740 g     F .text	000000f0 __sfp
00007288 g     F .text	00000058 __copybits
0001281c g     O .rwdata	00000408 __malloc_av_
000055d4 g     F .text	00000004 __sinit_lock_release
00009f88 g     F .text	000003c4 __muldf3
00008788 g     F .text	00000060 __sread
0000eddc g     F .text	00000058 alt_up_rs232_disable_read_interrupt
000114c0 g     F .text	00000120 alt_find_file
00010b00 g     F .text	000000b4 alt_dev_llist_insert
0000baec g     F .text	00000020 __malloc_lock
0000bfa4 g     F .text	000000bc sbrk
00005340 g     F .text	000001fc _fflush_r
00008adc g     F .text	000000b4 _calloc_r
00016030 g       *ABS*	00000000 __bss_start
000019dc g     F .text	00000098 memset
0000058c g     F .text	00000e00 main
0000d5b8 g     F .text	00000074 alt_up_audio_write_fifo_space
0001606c g     O .bss	00000004 alt_envp
00016058 g     O .bss	00000004 __malloc_max_total_mem
0000f65c g     F .text	00000058 alt_up_pixel_buffer_dma_swap_buffers
0000f1a4 g     F .text	00000040 alt_up_char_buffer_open_dev
0000c6a4 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00008a48 g     F .text	0000001c __swbuf
0000dcd4 g     F .text	000000b0 alt_up_character_lcd_shift_cursor
0000869c g     F .text	00000008 __sclose
00800000 g       *ABS*	00000000 __alt_heap_limit
00008d10 g     F .text	00000014 fclose
0000eb30 g     F .text	0000007c alt_up_ps2_read_data_byte
00016038 g     O .bss	00000004 timeout
003e6abc g     O .bss	00000190 _atexit0
00003d8c g     F .text	000015b4 _dtoa_r
000064e4 g     F .text	00000740 _malloc_r
0001420c g     O .rwdata	00000004 alt_errno
000061d4 g     F .text	000000b8 _fwalk
0000e42c g     F .text	00000048 alt_up_irda_write_data
0000ed48 g     F .text	00000040 alt_up_ps2_open_dev
00007ddc g     F .text	00000104 putc
0000ac2c g     F .text	00000060 __divsi3
00012248 g     O .rodata	00000014 __thenan_df
0000dae0 g     F .text	00000040 alt_up_character_lcd_open_dev
00005830 g     F .text	0000012c _malloc_trim_r
0000e880 g     F .text	00000054 alt_up_ps2_enable_read_interrupt
00011b34 g       *ABS*	00000000 __CTOR_END__
0000daac g     F .text	00000034 alt_up_character_lcd_init
000087e8 g     F .text	000000bc strcmp
00011b34 g       *ABS*	00000000 __flash_rodata_start
00011b34 g       *ABS*	00000000 __DTOR_LIST__
0000f0e0 g     F .text	00000040 alt_up_rs232_open_dev
0000a62c g     F .text	00000088 __nedf2
0000c1e0 g     F .text	00000034 alt_irq_init
0000bf44 g     F .text	00000060 alt_release_fd
0000e754 g     F .text	00000034 read_data_valid
0000dec4 g     F .text	00000034 alt_up_character_lcd_cursor_off
00011f50 g     O .rodata	00000100 __clz_tab
0001604c g     O .bss	00000004 _PathLocale
0000ea14 g     F .text	0000006c alt_up_ps2_write_data_byte_with_ack
00011728 g     F .text	00000014 atexit
00008a64 g     F .text	00000078 _write_r
00006334 g     F .text	0000001c setlocale
000014b0 g     F .text	000000b8 pushbutton_ISR
000001f4 g     F .text	000000c4 PS2_ISR
000141e0 g     O .rwdata	00000004 _impure_ptr
0001603c g     O .bss	00000004 buf_index_play
00016064 g     O .bss	00000004 alt_argc
00010c78 g     F .text	00000064 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
00006fa4 g     F .text	00000080 __ulp
000085bc g     F .text	00000040 __isinfd
0000568c g     F .text	00000018 __fp_unlock_all
000141f8 g     O .rwdata	00000008 alt_fs_list
0000ed88 g     F .text	00000054 alt_up_rs232_enable_read_interrupt
0000d548 g     F .text	00000070 alt_up_audio_record_l
0000ef00 g     F .text	00000048 alt_up_rs232_write_data
0000e0fc g     F .text	000000e0 alt_up_ethernet_phy_reg_read
00000020 g       *ABS*	00000000 __ram_exceptions_start
000062a0 g     F .text	00000010 localeconv
00014220 g       *ABS*	00000000 _edata
003e6c4c g       *ABS*	00000000 _end
000001b8 g       *ABS*	00000000 __ram_exceptions_end
0000cb9c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
000002b8 g     F .text	00000274 audio_ISR
002f2760 g     O .bss	000f4240 l_buf
0000d69c g     F .text	00000070 alt_up_audio_play_l
0000870c g     F .text	0000007c __swrite
000141f0 g     O .rwdata	00000004 __malloc_trim_threshold
00011374 g     F .text	00000020 altera_nios2_qsys_irq_init
0001173c g     F .text	00000038 exit
0000e474 g     F .text	00000074 alt_up_irda_read_data
0000610c g     F .text	000000c8 _fwalk_reent
0000e7b4 g     F .text	000000cc alt_up_ps2_init
000075a0 g     F .text	0000018c __mdiff
0000ac8c g     F .text	00000060 __modsi3
00800000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000055cc g     F .text	00000004 __sfp_lock_release
0000db98 g     F .text	00000078 alt_up_character_lcd_string
0000e608 g     F .text	00000040 alt_up_irda_open_dev
00011b10 g     F .text	00000020 _exit
000085fc g     F .text	00000030 __isnand
00010990 g     F .text	00000154 alt_alarm_start
0000acfc g     F .text	00000098 __muldi3
00006350 g     F .text	00000194 __smakebuf_r
0000e9a4 g     F .text	00000070 alt_up_ps2_wait_for_ack
000088a4 g     F .text	00000074 strlen
0000e03c g     F .text	00000040 alt_up_ethernet_open_dev
00010fb8 g     F .text	00000188 open
0000a73c g     F .text	00000088 __gedf2
0000bd84 g     F .text	00000040 alt_putchar
00016040 g     O .bss	00000004 buf_index_record
00010d70 g     F .text	00000030 alt_icache_flush_all
0000e1dc g     F .text	000000d8 alt_up_ethernet_phy_reg_write
0000dc5c g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
00014210 g     O .rwdata	00000004 alt_priority_mask
00003a14 g     F .text	00000024 __vfprintf_internal
0000ec04 g     F .text	0000009c alt_up_ps2_read_fd
00009e94 g     F .text	00000080 __subdf3
0000e4e8 g     F .text	00000090 alt_up_irda_read_fd
00006e80 g     F .text	000000c4 __lo0bits
00014218 g     O .rwdata	00000008 alt_alarm_list
00010c14 g     F .text	00000064 _do_ctors
0000ee34 g     F .text	0000003c alt_up_rs232_get_used_space_in_read_FIFO
0000b2a8 g     F .text	000000fc close
0000b844 g     F .text	00000080 alt_load
0000e07c g     F .text	0000003c alt_up_ethernet_reg_read
0000d230 g     F .text	0000004c alt_up_audio_enable_read_interrupt
0000ad94 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
000055d0 g     F .text	00000004 __sinit_lock_acquire
00007a9c g     F .text	00000100 __multadd
00006de8 g     F .text	00000028 _Bfree
0000d368 g     F .text	0000003c alt_up_audio_read_interrupt_pending



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406e14 	ori	at,at,440
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  fc:	0005313a 	rdctl	r2,ipending
 100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 10c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 110:	00800044 	movi	r2,1
 114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 118:	e0ffff17 	ldw	r3,-4(fp)
 11c:	e0bffe17 	ldw	r2,-8(fp)
 120:	1884703a 	and	r2,r3,r2
 124:	1005003a 	cmpeq	r2,r2,zero
 128:	1000171e 	bne	r2,zero,188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 12c:	e0bffd17 	ldw	r2,-12(fp)
 130:	00c00fb4 	movhi	r3,62
 134:	18da6f04 	addi	r3,r3,27068
 138:	100490fa 	slli	r2,r2,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	11800017 	ldw	r6,0(r2)
 144:	e0bffd17 	ldw	r2,-12(fp)
 148:	00c00fb4 	movhi	r3,62
 14c:	18da6f04 	addi	r3,r3,27068
 150:	100490fa 	slli	r2,r2,3
 154:	10c5883a 	add	r2,r2,r3
 158:	10800104 	addi	r2,r2,4
 15c:	11000017 	ldw	r4,0(r2)
 160:	e17ffd17 	ldw	r5,-12(fp)
 164:	303ee83a 	callr	r6
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 168:	0005313a 	rdctl	r2,ipending
 16c:	e0bffb15 	stw	r2,-20(fp)

  return active;
 170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 178:	e0bfff17 	ldw	r2,-4(fp)
 17c:	1004c03a 	cmpne	r2,r2,zero
 180:	103fe21e 	bne	r2,zero,10c <alt_irq_handler+0x20>
 184:	00000706 	br	1a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 188:	e0bffe17 	ldw	r2,-8(fp)
 18c:	1085883a 	add	r2,r2,r2
 190:	e0bffe15 	stw	r2,-8(fp)
      i++;
 194:	e0bffd17 	ldw	r2,-12(fp)
 198:	10800044 	addi	r2,r2,1
 19c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a0:	003fdd06 	br	118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a4:	e037883a 	mov	sp,fp
 1a8:	dfc00117 	ldw	ra,4(sp)
 1ac:	df000017 	ldw	fp,0(sp)
 1b0:	dec00204 	addi	sp,sp,8
 1b4:	f800283a 	ret

Disassembly of section .text:

000001b8 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1b8:	06c02034 	movhi	sp,128
    ori sp, sp, %lo(__alt_stack_pointer)
     1bc:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1c0:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1c4:	d6b07814 	ori	gp,gp,49632
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1c8:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1cc:	10980c14 	ori	r2,r2,24624

    movhi r3, %hi(__bss_end)
     1d0:	00c00fb4 	movhi	r3,62
    ori r3, r3, %lo(__bss_end)
     1d4:	18db1314 	ori	r3,r3,27724

    beq r2, r3, 1f
     1d8:	10c00326 	beq	r2,r3,1e8 <_start+0x30>

0:
    stw zero, (r2)
     1dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1e4:	10fffd36 	bltu	r2,r3,1dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1e8:	000b8440 	call	b844 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1ec:	000ba800 	call	ba80 <alt_main>

000001f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1f0:	003fff06 	br	1f0 <alt_after_alt_main>

000001f4 <PS2_ISR>:
 * This routine checks which KEY has been pressed. If it is KEY1 or KEY2, it writes this 
 * value to the global variable key_pressed. If it is KEY3 then it loads the SW switch 
 * values and stores in the variable pattern
****************************************************************************************/
void PS2_ISR(struct alt_up_dev *up_dev, unsigned int id)
{
     1f4:	defffb04 	addi	sp,sp,-20
     1f8:	dfc00415 	stw	ra,16(sp)
     1fc:	df000315 	stw	fp,12(sp)
     200:	df000304 	addi	fp,sp,12
     204:	e13ffe15 	stw	r4,-8(fp)
     208:	e17fff15 	stw	r5,-4(fp)
	unsigned char PS2_data;

	/* check for PS/2 data--display on HEX displays */
	if (alt_up_ps2_read_data_byte (up_dev->PS2_dev, &PS2_data) == 0)
     20c:	e0bffe17 	ldw	r2,-8(fp)
     210:	11000217 	ldw	r4,8(r2)
     214:	e17ffd04 	addi	r5,fp,-12
     218:	000eb300 	call	eb30 <alt_up_ps2_read_data_byte>
     21c:	1004c03a 	cmpne	r2,r2,zero
     220:	1000201e 	bne	r2,zero,2a4 <PS2_ISR+0xb0>
	{
		/* allows save the last three bytes of data */
		byte1 = byte2;
     224:	00800074 	movhi	r2,1
     228:	10980d04 	addi	r2,r2,24628
     22c:	10c00003 	ldbu	r3,0(r2)
     230:	00800074 	movhi	r2,1
     234:	10980d84 	addi	r2,r2,24630
     238:	10c00005 	stb	r3,0(r2)
		byte2 = byte3;
     23c:	00800074 	movhi	r2,1
     240:	10980d44 	addi	r2,r2,24629
     244:	10c00003 	ldbu	r3,0(r2)
     248:	00800074 	movhi	r2,1
     24c:	10980d04 	addi	r2,r2,24628
     250:	10c00005 	stb	r3,0(r2)
		byte3 = PS2_data;
     254:	e0fffd03 	ldbu	r3,-12(fp)
     258:	00800074 	movhi	r2,1
     25c:	10980d44 	addi	r2,r2,24629
     260:	10c00005 	stb	r3,0(r2)
		if ( (byte2 == (unsigned char) 0xAA) && (byte3 == (unsigned char) 0x00) )
     264:	00800074 	movhi	r2,1
     268:	10980d04 	addi	r2,r2,24628
     26c:	10800003 	ldbu	r2,0(r2)
     270:	10803fcc 	andi	r2,r2,255
     274:	10802a98 	cmpnei	r2,r2,170
     278:	10000a1e 	bne	r2,zero,2a4 <PS2_ISR+0xb0>
     27c:	00800074 	movhi	r2,1
     280:	10980d44 	addi	r2,r2,24629
     284:	10800003 	ldbu	r2,0(r2)
     288:	10803fcc 	andi	r2,r2,255
     28c:	1004c03a 	cmpne	r2,r2,zero
     290:	1000041e 	bne	r2,zero,2a4 <PS2_ISR+0xb0>
			// mouse inserted; initialize sending of data
			(void) alt_up_ps2_write_data_byte (up_dev->PS2_dev, (unsigned char) 0xF4);
     294:	e0bffe17 	ldw	r2,-8(fp)
     298:	11000217 	ldw	r4,8(r2)
     29c:	01403d04 	movi	r5,244
     2a0:	000e92c0 	call	e92c <alt_up_ps2_write_data_byte>
	}
	return;
}
     2a4:	e037883a 	mov	sp,fp
     2a8:	dfc00117 	ldw	ra,4(sp)
     2ac:	df000017 	ldw	fp,0(sp)
     2b0:	dec00204 	addi	sp,sp,8
     2b4:	f800283a 	ret

000002b8 <audio_ISR>:
 *                                                                          
 * This interrupt service routine records or plays back audio, depending on which type
 * interrupt (read or write) is pending in the audio device.
****************************************************************************************/
void audio_ISR(struct alt_up_dev *up_dev, unsigned int id)
{
     2b8:	defff904 	addi	sp,sp,-28
     2bc:	dfc00615 	stw	ra,24(sp)
     2c0:	df000515 	stw	fp,20(sp)
     2c4:	df000504 	addi	fp,sp,20
     2c8:	e13ffe15 	stw	r4,-8(fp)
     2cc:	e17fff15 	stw	r5,-4(fp)
	int num_read; int num_written;

	unsigned int fifospace;
		
	if (alt_up_audio_read_interrupt_pending(up_dev->audio_dev))	// check for read interrupt
     2d0:	e0bffe17 	ldw	r2,-8(fp)
     2d4:	11000417 	ldw	r4,16(r2)
     2d8:	000d3680 	call	d368 <alt_up_audio_read_interrupt_pending>
     2dc:	1005003a 	cmpeq	r2,r2,zero
     2e0:	1000451e 	bne	r2,zero,3f8 <audio_ISR+0x140>
	{
		alt_up_parallel_port_write_data (up_dev->green_LEDs_dev, 0x1); // set LEDG[0] on
     2e4:	e0bffe17 	ldw	r2,-8(fp)
     2e8:	10800117 	ldw	r2,4(r2)
     2ec:	10800a17 	ldw	r2,40(r2)
     2f0:	1007883a 	mov	r3,r2
     2f4:	00800044 	movi	r2,1
     2f8:	18800035 	stwio	r2,0(r3)

		// store data until the buffer is full
		if (buf_index_record < BUF_SIZE)
     2fc:	00800074 	movhi	r2,1
     300:	10981004 	addi	r2,r2,24640
     304:	10c00017 	ldw	r3,0(r2)
     308:	00800134 	movhi	r2,4
     30c:	10b423c4 	addi	r2,r2,-12145
     310:	10c03916 	blt	r2,r3,3f8 <audio_ISR+0x140>
		{
			num_read = alt_up_audio_record_r (up_dev->audio_dev, &(r_buf[buf_index_record]), 
     314:	e0bffe17 	ldw	r2,-8(fp)
     318:	11000417 	ldw	r4,16(r2)
     31c:	00800074 	movhi	r2,1
     320:	10981004 	addi	r2,r2,24640
     324:	10800017 	ldw	r2,0(r2)
     328:	1085883a 	add	r2,r2,r2
     32c:	1085883a 	add	r2,r2,r2
     330:	1007883a 	mov	r3,r2
     334:	00800474 	movhi	r2,17
     338:	10a8b804 	addi	r2,r2,-23840
     33c:	1885883a 	add	r2,r3,r2
     340:	100b883a 	mov	r5,r2
     344:	00800074 	movhi	r2,1
     348:	10981004 	addi	r2,r2,24640
     34c:	10c00017 	ldw	r3,0(r2)
     350:	00800134 	movhi	r2,4
     354:	10b42404 	addi	r2,r2,-12144
     358:	10cdc83a 	sub	r6,r2,r3
     35c:	000d4d80 	call	d4d8 <alt_up_audio_record_r>
     360:	e0bffd15 	stw	r2,-12(fp)
				BUF_SIZE - buf_index_record);
			/* assume we can read same # words from the left and right */
			(void) alt_up_audio_record_l (up_dev->audio_dev, &(l_buf[buf_index_record]), 
     364:	e0bffe17 	ldw	r2,-8(fp)
     368:	11000417 	ldw	r4,16(r2)
     36c:	00800074 	movhi	r2,1
     370:	10981004 	addi	r2,r2,24640
     374:	10800017 	ldw	r2,0(r2)
     378:	1085883a 	add	r2,r2,r2
     37c:	1085883a 	add	r2,r2,r2
     380:	1007883a 	mov	r3,r2
     384:	00800bf4 	movhi	r2,47
     388:	1089d804 	addi	r2,r2,10080
     38c:	1885883a 	add	r2,r3,r2
     390:	100b883a 	mov	r5,r2
     394:	e1bffd17 	ldw	r6,-12(fp)
     398:	000d5480 	call	d548 <alt_up_audio_record_l>
				num_read);
			buf_index_record += num_read;
     39c:	00800074 	movhi	r2,1
     3a0:	10981004 	addi	r2,r2,24640
     3a4:	10c00017 	ldw	r3,0(r2)
     3a8:	e0bffd17 	ldw	r2,-12(fp)
     3ac:	1887883a 	add	r3,r3,r2
     3b0:	00800074 	movhi	r2,1
     3b4:	10981004 	addi	r2,r2,24640
     3b8:	10c00015 	stw	r3,0(r2)

			if (buf_index_record == BUF_SIZE)
     3bc:	00800074 	movhi	r2,1
     3c0:	10981004 	addi	r2,r2,24640
     3c4:	10c00017 	ldw	r3,0(r2)
     3c8:	00800134 	movhi	r2,4
     3cc:	10b42404 	addi	r2,r2,-12144
     3d0:	1880091e 	bne	r3,r2,3f8 <audio_ISR+0x140>
			{
				// done recording
				alt_up_parallel_port_write_data (up_dev->green_LEDs_dev, 0); // turn off LEDG
     3d4:	e0bffe17 	ldw	r2,-8(fp)
     3d8:	10800117 	ldw	r2,4(r2)
     3dc:	10800a17 	ldw	r2,40(r2)
     3e0:	10000035 	stwio	zero,0(r2)
				alt_up_audio_disable_read_interrupt(up_dev->audio_dev);
     3e4:	e0bffe17 	ldw	r2,-8(fp)
     3e8:	11000417 	ldw	r4,16(r2)
     3ec:	000d27c0 	call	d27c <alt_up_audio_disable_read_interrupt>
				flag=1;
     3f0:	00800044 	movi	r2,1
     3f4:	d0a79415 	stw	r2,-25008(gp)
			}
		}
	}
	if (alt_up_audio_write_interrupt_pending(up_dev->audio_dev))	// check for write interrupt
     3f8:	e0bffe17 	ldw	r2,-8(fp)
     3fc:	11000417 	ldw	r4,16(r2)
     400:	000d3a40 	call	d3a4 <alt_up_audio_write_interrupt_pending>
     404:	1005003a 	cmpeq	r2,r2,zero
     408:	1000431e 	bne	r2,zero,518 <audio_ISR+0x260>
	{
		alt_up_parallel_port_write_data (up_dev->green_LEDs_dev, 0x2); // set LEDG[1] on
     40c:	e0bffe17 	ldw	r2,-8(fp)
     410:	10800117 	ldw	r2,4(r2)
     414:	10800a17 	ldw	r2,40(r2)
     418:	1007883a 	mov	r3,r2
     41c:	00800084 	movi	r2,2
     420:	18800035 	stwio	r2,0(r3)

		// output data until the buffer is empty 
		if (buf_index_play < BUF_SIZE)
     424:	00800074 	movhi	r2,1
     428:	10980f04 	addi	r2,r2,24636
     42c:	10c00017 	ldw	r3,0(r2)
     430:	00800134 	movhi	r2,4
     434:	10b423c4 	addi	r2,r2,-12145
     438:	10c03716 	blt	r2,r3,518 <audio_ISR+0x260>
		{
			num_written = alt_up_audio_play_r (up_dev->audio_dev, &(re_buf[buf_index_play]),
     43c:	e0bffe17 	ldw	r2,-8(fp)
     440:	11000417 	ldw	r4,16(r2)
     444:	00800074 	movhi	r2,1
     448:	10980f04 	addi	r2,r2,24636
     44c:	10800017 	ldw	r2,0(r2)
     450:	1085883a 	add	r2,r2,r2
     454:	1085883a 	add	r2,r2,r2
     458:	1007883a 	mov	r3,r2
     45c:	00800834 	movhi	r2,32
     460:	10b94804 	addi	r2,r2,-6880
     464:	1885883a 	add	r2,r3,r2
     468:	100b883a 	mov	r5,r2
     46c:	00800074 	movhi	r2,1
     470:	10980f04 	addi	r2,r2,24636
     474:	10c00017 	ldw	r3,0(r2)
     478:	00800134 	movhi	r2,4
     47c:	10b42404 	addi	r2,r2,-12144
     480:	10cdc83a 	sub	r6,r2,r3
     484:	000d62c0 	call	d62c <alt_up_audio_play_r>
     488:	e0bffc15 	stw	r2,-16(fp)
			 	BUF_SIZE - buf_index_play);
			/* assume that we can write the same # words to the left and right */
			(void) alt_up_audio_play_l (up_dev->audio_dev, &(le_buf[buf_index_play]),
     48c:	e0bffe17 	ldw	r2,-8(fp)
     490:	11000417 	ldw	r4,16(r2)
     494:	00800074 	movhi	r2,1
     498:	10980f04 	addi	r2,r2,24636
     49c:	10800017 	ldw	r2,0(r2)
     4a0:	1085883a 	add	r2,r2,r2
     4a4:	1085883a 	add	r2,r2,r2
     4a8:	1007883a 	mov	r3,r2
     4ac:	00800074 	movhi	r2,1
     4b0:	10982804 	addi	r2,r2,24736
     4b4:	1885883a 	add	r2,r3,r2
     4b8:	100b883a 	mov	r5,r2
     4bc:	e1bffc17 	ldw	r6,-16(fp)
     4c0:	000d69c0 	call	d69c <alt_up_audio_play_l>
				num_written);
			buf_index_play += num_written;
     4c4:	00800074 	movhi	r2,1
     4c8:	10980f04 	addi	r2,r2,24636
     4cc:	10c00017 	ldw	r3,0(r2)
     4d0:	e0bffc17 	ldw	r2,-16(fp)
     4d4:	1887883a 	add	r3,r3,r2
     4d8:	00800074 	movhi	r2,1
     4dc:	10980f04 	addi	r2,r2,24636
     4e0:	10c00015 	stw	r3,0(r2)
	
			if (buf_index_play == BUF_SIZE)
     4e4:	00800074 	movhi	r2,1
     4e8:	10980f04 	addi	r2,r2,24636
     4ec:	10c00017 	ldw	r3,0(r2)
     4f0:	00800134 	movhi	r2,4
     4f4:	10b42404 	addi	r2,r2,-12144
     4f8:	1880071e 	bne	r3,r2,518 <audio_ISR+0x260>
			{
				// done playback
				alt_up_parallel_port_write_data (up_dev->green_LEDs_dev, 0); // turn off LEDG
     4fc:	e0bffe17 	ldw	r2,-8(fp)
     500:	10800117 	ldw	r2,4(r2)
     504:	10800a17 	ldw	r2,40(r2)
     508:	10000035 	stwio	zero,0(r2)
				alt_up_audio_disable_write_interrupt(up_dev->audio_dev);
     50c:	e0bffe17 	ldw	r2,-8(fp)
     510:	11000417 	ldw	r4,16(r2)
     514:	000d3180 	call	d318 <alt_up_audio_disable_write_interrupt>
			}
		}
	}
	return;
}
     518:	e037883a 	mov	sp,fp
     51c:	dfc00117 	ldw	ra,4(sp)
     520:	df000017 	ldw	fp,0(sp)
     524:	dec00204 	addi	sp,sp,8
     528:	f800283a 	ret

0000052c <interval_timer_ISR>:
 * Shifts a PATTERN being displayed on the LCD character display. The shift 
 * direction is determined by the external variable KEY_PRESSED.
 * 
******************************************************************************/
void interval_timer_ISR(struct alt_up_dev *up_dev, unsigned int id)
{
     52c:	defffb04 	addi	sp,sp,-20
     530:	dfc00415 	stw	ra,16(sp)
     534:	df000315 	stw	fp,12(sp)
     538:	df000304 	addi	fp,sp,12
     53c:	e13ffe15 	stw	r4,-8(fp)
     540:	e17fff15 	stw	r5,-4(fp)
	volatile int *interval_timer_ptr = (int *) 0x10002000;
     544:	00840034 	movhi	r2,4096
     548:	10880004 	addi	r2,r2,8192
     54c:	e0bffd15 	stw	r2,-12(fp)

	*(interval_timer_ptr) = 0; 										// clear the interrupt
     550:	e0bffd17 	ldw	r2,-12(fp)
     554:	10000015 	stw	zero,0(r2)
	timeout = 1;															// set global variable
     558:	00c00074 	movhi	r3,1
     55c:	18d80e04 	addi	r3,r3,24632
     560:	00800044 	movi	r2,1
     564:	18800015 	stw	r2,0(r3)

	/* shift the LCD display to the left */
	alt_up_character_lcd_shift_display (up_dev->lcd_dev, -1);
     568:	e0bffe17 	ldw	r2,-8(fp)
     56c:	11000317 	ldw	r4,12(r2)
     570:	017fffc4 	movi	r5,-1
     574:	000dd840 	call	dd84 <alt_up_character_lcd_shift_display>

	return;
}
     578:	e037883a 	mov	sp,fp
     57c:	dfc00117 	ldw	ra,4(sp)
     580:	df000017 	ldw	fp,0(sp)
     584:	dec00204 	addi	sp,sp,8
     588:	f800283a 	ret

0000058c <main>:
 * 	   interrupts
 * 	6. The speed of scrolling the LCD display and of refreshing the VGA screen
 * 	   are controlled by interrupts from the interval timer
********************************************************************************/
int main(void)
{
     58c:	defffd04 	addi	sp,sp,-12
     590:	dfc00215 	stw	ra,8(sp)
     594:	df000115 	stw	fp,4(sp)
     598:	dc000015 	stw	r16,0(sp)
     59c:	d839883a 	mov	fp,sp
     5a0:	023ff874 	movhi	r8,65505
     5a4:	421e9d04 	addi	r8,r8,31348
     5a8:	da37883a 	add	sp,sp,r8
	alt_up_character_lcd_dev *lcd_dev;
	alt_up_audio_dev *audio_dev;
	alt_up_char_buffer_dev *char_buffer_dev;
	alt_up_pixel_buffer_dma_dev *pixel_buffer_dev;
	/* declare volatile pointer for interval timer, which does not have HAL functions */
	volatile int * interval_timer_ptr = (int *) 0x10002000;	// interal timer base address
     5ac:	00840034 	movhi	r2,4096
     5b0:	10880004 	addi	r2,r2,8192
     5b4:	00fff874 	movhi	r3,65505
     5b8:	18deb404 	addi	r3,r3,31440
     5bc:	1f07883a 	add	r3,r3,fp
     5c0:	18800015 	stw	r2,0(r3)

	/* initialize some variables */
	byte1 = 0; byte2 = 0; byte3 = 0; 			// used to hold PS/2 data
     5c4:	00800074 	movhi	r2,1
     5c8:	10980d84 	addi	r2,r2,24630
     5cc:	10000005 	stb	zero,0(r2)
     5d0:	00800074 	movhi	r2,1
     5d4:	10980d04 	addi	r2,r2,24628
     5d8:	10000005 	stb	zero,0(r2)
     5dc:	00800074 	movhi	r2,1
     5e0:	10980d44 	addi	r2,r2,24629
     5e4:	10000005 	stb	zero,0(r2)
	timeout = 0;
     5e8:	00800074 	movhi	r2,1
     5ec:	10980e04 	addi	r2,r2,24632
     5f0:	10000015 	stw	zero,0(r2)
	int ALT_x1; int ALT_x2; int ALT_y; 
	int ALT_inc_x; int ALT_inc_y;
	int blue_x1; int blue_y1; int blue_x2; int blue_y2; 
	int screen_x; int screen_y; int char_buffer_x; int char_buffer_y;
	short color;
	flag=0;
     5f4:	d0279415 	stw	zero,-25008(gp)
	/* set the interval timer period for scrolling the HEX displays */
	int counter = 0x960000;				// 1/(50 MHz) x (0x960000) ~= 200 msec
     5f8:	008025b4 	movhi	r2,150
     5fc:	013ff874 	movhi	r4,65505
     600:	211ea004 	addi	r4,r4,31360
     604:	2709883a 	add	r4,r4,fp
     608:	20800015 	stw	r2,0(r4)
	*(interval_timer_ptr + 0x2) = (counter & 0xFFFF);
     60c:	017ff874 	movhi	r5,65505
     610:	295eb404 	addi	r5,r5,31440
     614:	2f0b883a 	add	r5,r5,fp
     618:	28800017 	ldw	r2,0(r5)
     61c:	10c00204 	addi	r3,r2,8
     620:	013ff874 	movhi	r4,65505
     624:	211ea004 	addi	r4,r4,31360
     628:	2709883a 	add	r4,r4,fp
     62c:	20800017 	ldw	r2,0(r4)
     630:	10bfffcc 	andi	r2,r2,65535
     634:	18800015 	stw	r2,0(r3)
	*(interval_timer_ptr + 0x3) = (counter >> 16) & 0xFFFF;
     638:	017ff874 	movhi	r5,65505
     63c:	295eb404 	addi	r5,r5,31440
     640:	2f0b883a 	add	r5,r5,fp
     644:	28800017 	ldw	r2,0(r5)
     648:	10c00304 	addi	r3,r2,12
     64c:	013ff874 	movhi	r4,65505
     650:	211ea004 	addi	r4,r4,31360
     654:	2709883a 	add	r4,r4,fp
     658:	20800017 	ldw	r2,0(r4)
     65c:	1005d43a 	srai	r2,r2,16
     660:	10bfffcc 	andi	r2,r2,65535
     664:	18800015 	stw	r2,0(r3)

	/* start interval timer, enable its interrupts */
	*(interval_timer_ptr + 1) = 0x7;	// STOP = 0, START = 1, CONT = 1, ITO = 1 
     668:	017ff874 	movhi	r5,65505
     66c:	295eb404 	addi	r5,r5,31440
     670:	2f0b883a 	add	r5,r5,fp
     674:	28800017 	ldw	r2,0(r5)
     678:	10c00104 	addi	r3,r2,4
     67c:	008001c4 	movi	r2,7
     680:	18800015 	stw	r2,0(r3)
	
	// open the pushbuttom KEY parallel port
	KEY_dev = alt_up_parallel_port_open_dev ("/dev/Pushbuttons");
     684:	01000074 	movhi	r4,1
     688:	21070d04 	addi	r4,r4,7220
     68c:	000e6480 	call	e648 <alt_up_parallel_port_open_dev>
     690:	00fff874 	movhi	r3,65505
     694:	18debb04 	addi	r3,r3,31468
     698:	1f07883a 	add	r3,r3,fp
     69c:	18800015 	stw	r2,0(r3)
	if ( KEY_dev == NULL)
     6a0:	013ff874 	movhi	r4,65505
     6a4:	211ebb04 	addi	r4,r4,31468
     6a8:	2709883a 	add	r4,r4,fp
     6ac:	20800017 	ldw	r2,0(r4)
     6b0:	1004c03a 	cmpne	r2,r2,zero
     6b4:	1000061e 	bne	r2,zero,6d0 <main+0x144>
	{
		alt_printf ("Error: could not open pushbutton KEY device\n");
     6b8:	01000074 	movhi	r4,1
     6bc:	21071204 	addi	r4,r4,7240
     6c0:	000bb2c0 	call	bb2c <alt_printf>
		return -1;
     6c4:	017fffc4 	movi	r5,-1
     6c8:	e17fff15 	stw	r5,-4(fp)
     6cc:	00032806 	br	1370 <main+0xde4>
	}
	else
	{
		alt_printf ("Opened pushbutton KEY device\n");
     6d0:	01000074 	movhi	r4,1
     6d4:	21071e04 	addi	r4,r4,7288
     6d8:	000bb2c0 	call	bb2c <alt_printf>
		up_dev.KEY_dev = KEY_dev;	// store for use by ISRs
     6dc:	00c00fb4 	movhi	r3,62
     6e0:	18da6804 	addi	r3,r3,27040
     6e4:	013ff874 	movhi	r4,65505
     6e8:	211ebb04 	addi	r4,r4,31468
     6ec:	2709883a 	add	r4,r4,fp
     6f0:	20800017 	ldw	r2,0(r4)
     6f4:	18800015 	stw	r2,0(r3)
	}
	/* write to the pushbutton interrupt mask register, and set 3 mask bits to 1 
	 * (bit 0 is Nios II reset) */
	alt_up_parallel_port_set_interrupt_mask (KEY_dev, 0xE);
     6f8:	017ff874 	movhi	r5,65505
     6fc:	295ebb04 	addi	r5,r5,31468
     700:	2f0b883a 	add	r5,r5,fp
     704:	28800017 	ldw	r2,0(r5)
     708:	10800a17 	ldw	r2,40(r2)
     70c:	10800204 	addi	r2,r2,8
     710:	1007883a 	mov	r3,r2
     714:	00800384 	movi	r2,14
     718:	18800035 	stwio	r2,0(r3)

	// open the green LEDs parallel port
	green_LEDs_dev = alt_up_parallel_port_open_dev ("/dev/Green_LEDs");
     71c:	01000074 	movhi	r4,1
     720:	21072604 	addi	r4,r4,7320
     724:	000e6480 	call	e648 <alt_up_parallel_port_open_dev>
     728:	00fff874 	movhi	r3,65505
     72c:	18deba04 	addi	r3,r3,31464
     730:	1f07883a 	add	r3,r3,fp
     734:	18800015 	stw	r2,0(r3)
	if ( green_LEDs_dev == NULL)
     738:	013ff874 	movhi	r4,65505
     73c:	211eba04 	addi	r4,r4,31464
     740:	2709883a 	add	r4,r4,fp
     744:	20800017 	ldw	r2,0(r4)
     748:	1004c03a 	cmpne	r2,r2,zero
     74c:	1000061e 	bne	r2,zero,768 <main+0x1dc>
	{
		alt_printf ("Error: could not open green LEDs device\n");
     750:	01000074 	movhi	r4,1
     754:	21072a04 	addi	r4,r4,7336
     758:	000bb2c0 	call	bb2c <alt_printf>
		return -1;
     75c:	017fffc4 	movi	r5,-1
     760:	e17fff15 	stw	r5,-4(fp)
     764:	00030206 	br	1370 <main+0xde4>
	}
	else
	{
		alt_printf ("Opened green LEDs device\n");
     768:	01000074 	movhi	r4,1
     76c:	21073504 	addi	r4,r4,7380
     770:	000bb2c0 	call	bb2c <alt_printf>
		up_dev.green_LEDs_dev = green_LEDs_dev;	// store for use by ISRs
     774:	00c00fb4 	movhi	r3,62
     778:	18da6804 	addi	r3,r3,27040
     77c:	013ff874 	movhi	r4,65505
     780:	211eba04 	addi	r4,r4,31464
     784:	2709883a 	add	r4,r4,fp
     788:	20800017 	ldw	r2,0(r4)
     78c:	18800115 	stw	r2,4(r3)
	}

	// open the PS2 port
	PS2_dev = alt_up_ps2_open_dev ("/dev/PS2_Port");
     790:	01000074 	movhi	r4,1
     794:	21073c04 	addi	r4,r4,7408
     798:	000ed480 	call	ed48 <alt_up_ps2_open_dev>
     79c:	017ff874 	movhi	r5,65505
     7a0:	295eb904 	addi	r5,r5,31460
     7a4:	2f0b883a 	add	r5,r5,fp
     7a8:	28800015 	stw	r2,0(r5)
	if ( PS2_dev == NULL)
     7ac:	00fff874 	movhi	r3,65505
     7b0:	18deb904 	addi	r3,r3,31460
     7b4:	1f07883a 	add	r3,r3,fp
     7b8:	18800017 	ldw	r2,0(r3)
     7bc:	1004c03a 	cmpne	r2,r2,zero
     7c0:	1000061e 	bne	r2,zero,7dc <main+0x250>
	{
		alt_printf ("Error: could not open PS2 device\n");
     7c4:	01000074 	movhi	r4,1
     7c8:	21074004 	addi	r4,r4,7424
     7cc:	000bb2c0 	call	bb2c <alt_printf>
		return -1;
     7d0:	013fffc4 	movi	r4,-1
     7d4:	e13fff15 	stw	r4,-4(fp)
     7d8:	0002e506 	br	1370 <main+0xde4>
	}
	else
	{
		alt_printf ("Opened PS2 device\n");
     7dc:	01000074 	movhi	r4,1
     7e0:	21074904 	addi	r4,r4,7460
     7e4:	000bb2c0 	call	bb2c <alt_printf>
		up_dev.PS2_dev = PS2_dev;	// store for use by ISRs
     7e8:	00c00fb4 	movhi	r3,62
     7ec:	18da6804 	addi	r3,r3,27040
     7f0:	017ff874 	movhi	r5,65505
     7f4:	295eb904 	addi	r5,r5,31460
     7f8:	2f0b883a 	add	r5,r5,fp
     7fc:	28800017 	ldw	r2,0(r5)
     800:	18800215 	stw	r2,8(r3)
	}
	(void) alt_up_ps2_write_data_byte (PS2_dev, 0xFF);		// reset
     804:	00bff874 	movhi	r2,65505
     808:	109eb904 	addi	r2,r2,31460
     80c:	1705883a 	add	r2,r2,fp
     810:	11000017 	ldw	r4,0(r2)
     814:	01403fc4 	movi	r5,255
     818:	000e92c0 	call	e92c <alt_up_ps2_write_data_byte>
	alt_up_ps2_enable_read_interrupt (PS2_dev); // enable interrupts from PS/2 port
     81c:	00fff874 	movhi	r3,65505
     820:	18deb904 	addi	r3,r3,31460
     824:	1f07883a 	add	r3,r3,fp
     828:	19000017 	ldw	r4,0(r3)
     82c:	000e8800 	call	e880 <alt_up_ps2_enable_read_interrupt>

	// open the audio port
	audio_dev = alt_up_audio_open_dev ("/dev/Audio");
     830:	01000074 	movhi	r4,1
     834:	21074e04 	addi	r4,r4,7480
     838:	000d1f00 	call	d1f0 <alt_up_audio_open_dev>
     83c:	013ff874 	movhi	r4,65505
     840:	211eb704 	addi	r4,r4,31452
     844:	2709883a 	add	r4,r4,fp
     848:	20800015 	stw	r2,0(r4)
	if ( audio_dev == NULL)
     84c:	017ff874 	movhi	r5,65505
     850:	295eb704 	addi	r5,r5,31452
     854:	2f0b883a 	add	r5,r5,fp
     858:	28800017 	ldw	r2,0(r5)
     85c:	1004c03a 	cmpne	r2,r2,zero
     860:	1000061e 	bne	r2,zero,87c <main+0x2f0>
	{
		alt_printf ("Error: could not open audio device\n");
     864:	01000074 	movhi	r4,1
     868:	21075104 	addi	r4,r4,7492
     86c:	000bb2c0 	call	bb2c <alt_printf>
		return -1;
     870:	00bfffc4 	movi	r2,-1
     874:	e0bfff15 	stw	r2,-4(fp)
     878:	0002bd06 	br	1370 <main+0xde4>
	}
	else
	{
		alt_printf ("Opened audio device\n");
     87c:	01000074 	movhi	r4,1
     880:	21075a04 	addi	r4,r4,7528
     884:	000bb2c0 	call	bb2c <alt_printf>
		up_dev.audio_dev = audio_dev;	// store for use by ISRs
     888:	00c00fb4 	movhi	r3,62
     88c:	18da6804 	addi	r3,r3,27040
     890:	013ff874 	movhi	r4,65505
     894:	211eb704 	addi	r4,r4,31452
     898:	2709883a 	add	r4,r4,fp
     89c:	20800017 	ldw	r2,0(r4)
     8a0:	18800415 	stw	r2,16(r3)
	}

	// open the 16x2 character display port
	lcd_dev = alt_up_character_lcd_open_dev ("/dev/Char_LCD_16x2");
     8a4:	01000074 	movhi	r4,1
     8a8:	21076004 	addi	r4,r4,7552
     8ac:	000dae00 	call	dae0 <alt_up_character_lcd_open_dev>
     8b0:	017ff874 	movhi	r5,65505
     8b4:	295eb804 	addi	r5,r5,31456
     8b8:	2f0b883a 	add	r5,r5,fp
     8bc:	28800015 	stw	r2,0(r5)
	if ( lcd_dev == NULL)
     8c0:	00fff874 	movhi	r3,65505
     8c4:	18deb804 	addi	r3,r3,31456
     8c8:	1f07883a 	add	r3,r3,fp
     8cc:	18800017 	ldw	r2,0(r3)
     8d0:	1004c03a 	cmpne	r2,r2,zero
     8d4:	1000061e 	bne	r2,zero,8f0 <main+0x364>
	{
		alt_printf ("Error: could not open character LCD device\n");
     8d8:	01000074 	movhi	r4,1
     8dc:	21076504 	addi	r4,r4,7572
     8e0:	000bb2c0 	call	bb2c <alt_printf>
		return -1;
     8e4:	013fffc4 	movi	r4,-1
     8e8:	e13fff15 	stw	r4,-4(fp)
     8ec:	0002a006 	br	1370 <main+0xde4>
	}
	else
	{
		alt_printf ("Opened character LCD device\n");
     8f0:	01000074 	movhi	r4,1
     8f4:	21077004 	addi	r4,r4,7616
     8f8:	000bb2c0 	call	bb2c <alt_printf>
		up_dev.lcd_dev = lcd_dev;	// store for use by ISRs
     8fc:	00c00fb4 	movhi	r3,62
     900:	18da6804 	addi	r3,r3,27040
     904:	017ff874 	movhi	r5,65505
     908:	295eb804 	addi	r5,r5,31456
     90c:	2f0b883a 	add	r5,r5,fp
     910:	28800017 	ldw	r2,0(r5)
     914:	18800315 	stw	r2,12(r3)
	/* use the HAL facility for registering interrupt service routines. */
	/* Note: we are passsing a pointer to up_dev to each ISR (using the context argument) as 
	 * a way of giving the ISR a pointer to every open device. This is useful because some of the
	 * ISRs need to access more than just one device (e.g. the pushbutton ISR accesses both
	 * the pushbutton device and the audio device) */
	alt_irq_register (0, (void *) &up_dev, (void *) interval_timer_ISR);
     918:	01800034 	movhi	r6,0
     91c:	31814b04 	addi	r6,r6,1324
     920:	0009883a 	mov	r4,zero
     924:	01400fb4 	movhi	r5,62
     928:	295a6804 	addi	r5,r5,27040
     92c:	000b5640 	call	b564 <alt_irq_register>
	alt_irq_register (1, (void *) &up_dev, (void *) pushbutton_ISR);
     930:	01800034 	movhi	r6,0
     934:	31852c04 	addi	r6,r6,5296
     938:	01000044 	movi	r4,1
     93c:	01400fb4 	movhi	r5,62
     940:	295a6804 	addi	r5,r5,27040
     944:	000b5640 	call	b564 <alt_irq_register>
	alt_irq_register (6, (void *) &up_dev, (void *) audio_ISR);
     948:	01800034 	movhi	r6,0
     94c:	3180ae04 	addi	r6,r6,696
     950:	01000184 	movi	r4,6
     954:	01400fb4 	movhi	r5,62
     958:	295a6804 	addi	r5,r5,27040
     95c:	000b5640 	call	b564 <alt_irq_register>
	alt_irq_register (7, (void *) &up_dev, (void *) PS2_ISR);
     960:	01800034 	movhi	r6,0
     964:	31807d04 	addi	r6,r6,500
     968:	010001c4 	movi	r4,7
     96c:	01400fb4 	movhi	r5,62
     970:	295a6804 	addi	r5,r5,27040
     974:	000b5640 	call	b564 <alt_irq_register>

	/* create a messages to be displayed on the VGA and LCD displays */
	char text_top_LCD[80] = "Welcome to the DE2 Media Computer...\0";
     978:	008007f4 	movhi	r2,31
     97c:	10a13c04 	addi	r2,r2,-31504
     980:	013ff874 	movhi	r4,65505
     984:	211ea004 	addi	r4,r4,31360
     988:	2709883a 	add	r4,r4,fp
     98c:	2087883a 	add	r3,r4,r2
     990:	01000074 	movhi	r4,1
     994:	2107ac04 	addi	r4,r4,7856
     998:	20800017 	ldw	r2,0(r4)
     99c:	18800015 	stw	r2,0(r3)
     9a0:	20800117 	ldw	r2,4(r4)
     9a4:	18800115 	stw	r2,4(r3)
     9a8:	20800217 	ldw	r2,8(r4)
     9ac:	18800215 	stw	r2,8(r3)
     9b0:	20800317 	ldw	r2,12(r4)
     9b4:	18800315 	stw	r2,12(r3)
     9b8:	20800417 	ldw	r2,16(r4)
     9bc:	18800415 	stw	r2,16(r3)
     9c0:	20800517 	ldw	r2,20(r4)
     9c4:	18800515 	stw	r2,20(r3)
     9c8:	20800617 	ldw	r2,24(r4)
     9cc:	18800615 	stw	r2,24(r3)
     9d0:	20800717 	ldw	r2,28(r4)
     9d4:	18800715 	stw	r2,28(r3)
     9d8:	20800817 	ldw	r2,32(r4)
     9dc:	18800815 	stw	r2,32(r3)
     9e0:	2080090b 	ldhu	r2,36(r4)
     9e4:	1880090d 	sth	r2,36(r3)
     9e8:	19000984 	addi	r4,r3,38
     9ec:	01800a84 	movi	r6,42
     9f0:	000b883a 	mov	r5,zero
     9f4:	00019dc0 	call	19dc <memset>
	char text_top_VGA[20] = "Altera DE2\0";
     9f8:	008007f4 	movhi	r2,31
     9fc:	10a15004 	addi	r2,r2,-31424
     a00:	017ff874 	movhi	r5,65505
     a04:	295ea004 	addi	r5,r5,31360
     a08:	2f0b883a 	add	r5,r5,fp
     a0c:	2889883a 	add	r4,r5,r2
     a10:	00c00074 	movhi	r3,1
     a14:	18c7c004 	addi	r3,r3,7936
     a18:	18800017 	ldw	r2,0(r3)
     a1c:	20800015 	stw	r2,0(r4)
     a20:	18800117 	ldw	r2,4(r3)
     a24:	20800115 	stw	r2,4(r4)
     a28:	18800217 	ldw	r2,8(r3)
     a2c:	20800215 	stw	r2,8(r4)
     a30:	20000315 	stw	zero,12(r4)
     a34:	20000415 	stw	zero,16(r4)
	char text_bottom_VGA[20] = "Media Computer\0";
     a38:	008007f4 	movhi	r2,31
     a3c:	10a15504 	addi	r2,r2,-31404
     a40:	00fff874 	movhi	r3,65505
     a44:	18dea004 	addi	r3,r3,31360
     a48:	1f07883a 	add	r3,r3,fp
     a4c:	1889883a 	add	r4,r3,r2
     a50:	00c00074 	movhi	r3,1
     a54:	18c7c504 	addi	r3,r3,7956
     a58:	18800017 	ldw	r2,0(r3)
     a5c:	20800015 	stw	r2,0(r4)
     a60:	18800117 	ldw	r2,4(r3)
     a64:	20800115 	stw	r2,4(r4)
     a68:	18800217 	ldw	r2,8(r3)
     a6c:	20800215 	stw	r2,8(r4)
     a70:	18800317 	ldw	r2,12(r3)
     a74:	20800315 	stw	r2,12(r4)
     a78:	20000415 	stw	zero,16(r4)
	char text_ALTERA[10] = "ALTERA\0";
     a7c:	008007f4 	movhi	r2,31
     a80:	10a15a04 	addi	r2,r2,-31384
     a84:	013ff874 	movhi	r4,65505
     a88:	211ea004 	addi	r4,r4,31360
     a8c:	2709883a 	add	r4,r4,fp
     a90:	2087883a 	add	r3,r4,r2
     a94:	01000074 	movhi	r4,1
     a98:	2107ca04 	addi	r4,r4,7976
     a9c:	20800017 	ldw	r2,0(r4)
     aa0:	18800015 	stw	r2,0(r3)
     aa4:	20800117 	ldw	r2,4(r4)
     aa8:	18800115 	stw	r2,4(r3)
     aac:	1800020d 	sth	zero,8(r3)
	char text_erase[10] = "      \0";
     ab0:	008007f4 	movhi	r2,31
     ab4:	10a15c84 	addi	r2,r2,-31374
     ab8:	017ff874 	movhi	r5,65505
     abc:	295ea004 	addi	r5,r5,31360
     ac0:	2f0b883a 	add	r5,r5,fp
     ac4:	2889883a 	add	r4,r5,r2
     ac8:	00c00074 	movhi	r3,1
     acc:	18c7cd04 	addi	r3,r3,7988
     ad0:	1880000b 	ldhu	r2,0(r3)
     ad4:	2080000d 	sth	r2,0(r4)
     ad8:	1880008b 	ldhu	r2,2(r3)
     adc:	2080008d 	sth	r2,2(r4)
     ae0:	1880010b 	ldhu	r2,4(r3)
     ae4:	2080010d 	sth	r2,4(r4)
     ae8:	1880018b 	ldhu	r2,6(r3)
     aec:	2080018d 	sth	r2,6(r4)
     af0:	2000020d 	sth	zero,8(r4)

	/* output text message to the LCD */
	alt_up_character_lcd_set_cursor_pos (lcd_dev, 0, 0);	// set LCD cursor location to top row
     af4:	00bff874 	movhi	r2,65505
     af8:	109eb804 	addi	r2,r2,31456
     afc:	1705883a 	add	r2,r2,fp
     b00:	11000017 	ldw	r4,0(r2)
     b04:	000b883a 	mov	r5,zero
     b08:	000d883a 	mov	r6,zero
     b0c:	000dc5c0 	call	dc5c <alt_up_character_lcd_set_cursor_pos>
	alt_up_character_lcd_string (lcd_dev, text_top_LCD);
     b10:	008007f4 	movhi	r2,31
     b14:	10a13c04 	addi	r2,r2,-31504
     b18:	00fff874 	movhi	r3,65505
     b1c:	18dea004 	addi	r3,r3,31360
     b20:	1f07883a 	add	r3,r3,fp
     b24:	188b883a 	add	r5,r3,r2
     b28:	00bff874 	movhi	r2,65505
     b2c:	109eb804 	addi	r2,r2,31456
     b30:	1705883a 	add	r2,r2,fp
     b34:	11000017 	ldw	r4,0(r2)
     b38:	000db980 	call	db98 <alt_up_character_lcd_string>
	alt_up_character_lcd_cursor_off (lcd_dev);				// turn off the LCD cursor 
     b3c:	00fff874 	movhi	r3,65505
     b40:	18deb804 	addi	r3,r3,31456
     b44:	1f07883a 	add	r3,r3,fp
     b48:	19000017 	ldw	r4,0(r3)
     b4c:	000dec40 	call	dec4 <alt_up_character_lcd_cursor_off>

	/* open the pixel buffer */
	pixel_buffer_dev = alt_up_pixel_buffer_dma_open_dev ("/dev/VGA_Pixel_Buffer");
     b50:	01000074 	movhi	r4,1
     b54:	21077804 	addi	r4,r4,7648
     b58:	000f4240 	call	f424 <alt_up_pixel_buffer_dma_open_dev>
     b5c:	013ff874 	movhi	r4,65505
     b60:	211eb504 	addi	r4,r4,31444
     b64:	2709883a 	add	r4,r4,fp
     b68:	20800015 	stw	r2,0(r4)
	if ( pixel_buffer_dev == NULL)
     b6c:	017ff874 	movhi	r5,65505
     b70:	295eb504 	addi	r5,r5,31444
     b74:	2f0b883a 	add	r5,r5,fp
     b78:	28800017 	ldw	r2,0(r5)
     b7c:	1004c03a 	cmpne	r2,r2,zero
     b80:	1000041e 	bne	r2,zero,b94 <main+0x608>
		alt_printf ("Error: could not open pixel buffer device\n");
     b84:	01000074 	movhi	r4,1
     b88:	21077e04 	addi	r4,r4,7672
     b8c:	000bb2c0 	call	bb2c <alt_printf>
     b90:	00000306 	br	ba0 <main+0x614>
	else
		alt_printf ("Opened pixel buffer device\n");
     b94:	01000074 	movhi	r4,1
     b98:	21078904 	addi	r4,r4,7716
     b9c:	000bb2c0 	call	bb2c <alt_printf>

	/* the following variables give the size of the pixel buffer */
	screen_x = 319; screen_y = 239;
     ba0:	00804fc4 	movi	r2,319
     ba4:	00fff874 	movhi	r3,65505
     ba8:	18dea504 	addi	r3,r3,31380
     bac:	1f07883a 	add	r3,r3,fp
     bb0:	18800015 	stw	r2,0(r3)
     bb4:	00803bc4 	movi	r2,239
     bb8:	013ff874 	movhi	r4,65505
     bbc:	211ea404 	addi	r4,r4,31376
     bc0:	2709883a 	add	r4,r4,fp
     bc4:	20800015 	stw	r2,0(r4)
	color = 0x1863;		// a dark grey color
     bc8:	008618c4 	movi	r2,6243
     bcc:	017ff874 	movhi	r5,65505
     bd0:	295ea104 	addi	r5,r5,31364
     bd4:	2f0b883a 	add	r5,r5,fp
     bd8:	2880000d 	sth	r2,0(r5)
	alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, 0, 0, screen_x, 
     bdc:	00bff874 	movhi	r2,65505
     be0:	109ea104 	addi	r2,r2,31364
     be4:	1705883a 	add	r2,r2,fp
     be8:	10c0000f 	ldh	r3,0(r2)
     bec:	013ff874 	movhi	r4,65505
     bf0:	211ea404 	addi	r4,r4,31376
     bf4:	2709883a 	add	r4,r4,fp
     bf8:	20800017 	ldw	r2,0(r4)
     bfc:	d8800015 	stw	r2,0(sp)
     c00:	d8c00115 	stw	r3,4(sp)
     c04:	d8000215 	stw	zero,8(sp)
     c08:	017ff874 	movhi	r5,65505
     c0c:	295eb504 	addi	r5,r5,31444
     c10:	2f0b883a 	add	r5,r5,fp
     c14:	29000017 	ldw	r4,0(r5)
     c18:	000b883a 	mov	r5,zero
     c1c:	000d883a 	mov	r6,zero
     c20:	00bff874 	movhi	r2,65505
     c24:	109ea504 	addi	r2,r2,31380
     c28:	1705883a 	add	r2,r2,fp
     c2c:	11c00017 	ldw	r7,0(r2)
     c30:	000f84c0 	call	f84c <alt_up_pixel_buffer_dma_draw_box>
		screen_y, color, 0); // fill the screen
	
	// draw a medium-blue box in the middle of the screen, using character buffer coordinates
	blue_x1 = 28; blue_x2 = 52; blue_y1 = 26; blue_y2 = 34;
     c34:	00800704 	movi	r2,28
     c38:	00fff874 	movhi	r3,65505
     c3c:	18dea904 	addi	r3,r3,31396
     c40:	1f07883a 	add	r3,r3,fp
     c44:	18800015 	stw	r2,0(r3)
     c48:	00800d04 	movi	r2,52
     c4c:	013ff874 	movhi	r4,65505
     c50:	211ea704 	addi	r4,r4,31388
     c54:	2709883a 	add	r4,r4,fp
     c58:	20800015 	stw	r2,0(r4)
     c5c:	00800684 	movi	r2,26
     c60:	017ff874 	movhi	r5,65505
     c64:	295ea804 	addi	r5,r5,31392
     c68:	2f0b883a 	add	r5,r5,fp
     c6c:	28800015 	stw	r2,0(r5)
     c70:	00800884 	movi	r2,34
     c74:	00fff874 	movhi	r3,65505
     c78:	18dea604 	addi	r3,r3,31384
     c7c:	1f07883a 	add	r3,r3,fp
     c80:	18800015 	stw	r2,0(r3)
	// character coords * 4 since characters are 4 x 4 pixel buffer coords (8 x 8 VGA coords)
	color = 0x187F;		// a medium blue color
     c84:	00861fc4 	movi	r2,6271
     c88:	013ff874 	movhi	r4,65505
     c8c:	211ea104 	addi	r4,r4,31364
     c90:	2709883a 	add	r4,r4,fp
     c94:	2080000d 	sth	r2,0(r4)
	alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, blue_x1 * 4, blue_y1 * 4, blue_x2 * 4, 
     c98:	017ff874 	movhi	r5,65505
     c9c:	295ea904 	addi	r5,r5,31396
     ca0:	2f0b883a 	add	r5,r5,fp
     ca4:	28800017 	ldw	r2,0(r5)
     ca8:	1085883a 	add	r2,r2,r2
     cac:	1085883a 	add	r2,r2,r2
     cb0:	100b883a 	mov	r5,r2
     cb4:	00fff874 	movhi	r3,65505
     cb8:	18dea804 	addi	r3,r3,31392
     cbc:	1f07883a 	add	r3,r3,fp
     cc0:	18800017 	ldw	r2,0(r3)
     cc4:	1085883a 	add	r2,r2,r2
     cc8:	1085883a 	add	r2,r2,r2
     ccc:	100d883a 	mov	r6,r2
     cd0:	013ff874 	movhi	r4,65505
     cd4:	211ea704 	addi	r4,r4,31388
     cd8:	2709883a 	add	r4,r4,fp
     cdc:	20800017 	ldw	r2,0(r4)
     ce0:	1085883a 	add	r2,r2,r2
     ce4:	1085883a 	add	r2,r2,r2
     ce8:	100f883a 	mov	r7,r2
     cec:	00fff874 	movhi	r3,65505
     cf0:	18dea604 	addi	r3,r3,31384
     cf4:	1f07883a 	add	r3,r3,fp
     cf8:	18800017 	ldw	r2,0(r3)
     cfc:	1085883a 	add	r2,r2,r2
     d00:	1085883a 	add	r2,r2,r2
     d04:	013ff874 	movhi	r4,65505
     d08:	211ea104 	addi	r4,r4,31364
     d0c:	2709883a 	add	r4,r4,fp
     d10:	20c0000f 	ldh	r3,0(r4)
     d14:	d8800015 	stw	r2,0(sp)
     d18:	d8c00115 	stw	r3,4(sp)
     d1c:	d8000215 	stw	zero,8(sp)
     d20:	00bff874 	movhi	r2,65505
     d24:	109eb504 	addi	r2,r2,31444
     d28:	1705883a 	add	r2,r2,fp
     d2c:	11000017 	ldw	r4,0(r2)
     d30:	000f84c0 	call	f84c <alt_up_pixel_buffer_dma_draw_box>
		blue_y2 * 4, color, 0);

	/* output text message in the middle of the VGA monitor */
	char_buffer_dev = alt_up_char_buffer_open_dev ("/dev/VGA_Char_Buffer");
     d34:	01000074 	movhi	r4,1
     d38:	21079004 	addi	r4,r4,7744
     d3c:	000f1a40 	call	f1a4 <alt_up_char_buffer_open_dev>
     d40:	00fff874 	movhi	r3,65505
     d44:	18deb604 	addi	r3,r3,31448
     d48:	1f07883a 	add	r3,r3,fp
     d4c:	18800015 	stw	r2,0(r3)
	if ( char_buffer_dev == NULL)
     d50:	013ff874 	movhi	r4,65505
     d54:	211eb604 	addi	r4,r4,31448
     d58:	2709883a 	add	r4,r4,fp
     d5c:	20800017 	ldw	r2,0(r4)
     d60:	1004c03a 	cmpne	r2,r2,zero
     d64:	1000041e 	bne	r2,zero,d78 <main+0x7ec>
		alt_printf ("Error: could not open character buffer device\n");
     d68:	01000074 	movhi	r4,1
     d6c:	21079604 	addi	r4,r4,7768
     d70:	000bb2c0 	call	bb2c <alt_printf>
     d74:	00000306 	br	d84 <main+0x7f8>
	else
		alt_printf ("Opened character buffer device\n");
     d78:	01000074 	movhi	r4,1
     d7c:	2107a204 	addi	r4,r4,7816
     d80:	000bb2c0 	call	bb2c <alt_printf>

	alt_up_char_buffer_string (char_buffer_dev, text_top_VGA, blue_x1 + 5, blue_y1 + 3);
     d84:	017ff874 	movhi	r5,65505
     d88:	295ea904 	addi	r5,r5,31396
     d8c:	2f0b883a 	add	r5,r5,fp
     d90:	28800017 	ldw	r2,0(r5)
     d94:	10800144 	addi	r2,r2,5
     d98:	100d883a 	mov	r6,r2
     d9c:	00fff874 	movhi	r3,65505
     da0:	18dea804 	addi	r3,r3,31392
     da4:	1f07883a 	add	r3,r3,fp
     da8:	18800017 	ldw	r2,0(r3)
     dac:	108000c4 	addi	r2,r2,3
     db0:	100f883a 	mov	r7,r2
     db4:	008007f4 	movhi	r2,31
     db8:	10a15004 	addi	r2,r2,-31424
     dbc:	013ff874 	movhi	r4,65505
     dc0:	211ea004 	addi	r4,r4,31360
     dc4:	2709883a 	add	r4,r4,fp
     dc8:	208b883a 	add	r5,r4,r2
     dcc:	00bff874 	movhi	r2,65505
     dd0:	109eb604 	addi	r2,r2,31448
     dd4:	1705883a 	add	r2,r2,fp
     dd8:	11000017 	ldw	r4,0(r2)
     ddc:	000f2b40 	call	f2b4 <alt_up_char_buffer_string>
	alt_up_char_buffer_string (char_buffer_dev, text_bottom_VGA, blue_x1 + 5, blue_y1 + 4);
     de0:	00fff874 	movhi	r3,65505
     de4:	18dea904 	addi	r3,r3,31396
     de8:	1f07883a 	add	r3,r3,fp
     dec:	18800017 	ldw	r2,0(r3)
     df0:	10800144 	addi	r2,r2,5
     df4:	100d883a 	mov	r6,r2
     df8:	013ff874 	movhi	r4,65505
     dfc:	211ea804 	addi	r4,r4,31392
     e00:	2709883a 	add	r4,r4,fp
     e04:	20800017 	ldw	r2,0(r4)
     e08:	10800104 	addi	r2,r2,4
     e0c:	100f883a 	mov	r7,r2
     e10:	008007f4 	movhi	r2,31
     e14:	10a15504 	addi	r2,r2,-31404
     e18:	00fff874 	movhi	r3,65505
     e1c:	18dea004 	addi	r3,r3,31360
     e20:	1f07883a 	add	r3,r3,fp
     e24:	188b883a 	add	r5,r3,r2
     e28:	00bff874 	movhi	r2,65505
     e2c:	109eb604 	addi	r2,r2,31448
     e30:	1705883a 	add	r2,r2,fp
     e34:	11000017 	ldw	r4,0(r2)
     e38:	000f2b40 	call	f2b4 <alt_up_char_buffer_string>
	
	char_buffer_x = 79; char_buffer_y = 59;
     e3c:	008013c4 	movi	r2,79
     e40:	00fff874 	movhi	r3,65505
     e44:	18dea304 	addi	r3,r3,31372
     e48:	1f07883a 	add	r3,r3,fp
     e4c:	18800015 	stw	r2,0(r3)
     e50:	00800ec4 	movi	r2,59
     e54:	013ff874 	movhi	r4,65505
     e58:	211ea204 	addi	r4,r4,31368
     e5c:	2709883a 	add	r4,r4,fp
     e60:	20800015 	stw	r2,0(r4)
	ALT_x1 = 0; ALT_x2 = 5/* ALTERA = 6 chars */; ALT_y = 0; ALT_inc_x = 1; ALT_inc_y = 1;
     e64:	017ff874 	movhi	r5,65505
     e68:	295eae04 	addi	r5,r5,31416
     e6c:	2f0b883a 	add	r5,r5,fp
     e70:	28000015 	stw	zero,0(r5)
     e74:	00800144 	movi	r2,5
     e78:	00fff874 	movhi	r3,65505
     e7c:	18dead04 	addi	r3,r3,31412
     e80:	1f07883a 	add	r3,r3,fp
     e84:	18800015 	stw	r2,0(r3)
     e88:	013ff874 	movhi	r4,65505
     e8c:	211eac04 	addi	r4,r4,31408
     e90:	2709883a 	add	r4,r4,fp
     e94:	20000015 	stw	zero,0(r4)
     e98:	00800044 	movi	r2,1
     e9c:	017ff874 	movhi	r5,65505
     ea0:	295eab04 	addi	r5,r5,31404
     ea4:	2f0b883a 	add	r5,r5,fp
     ea8:	28800015 	stw	r2,0(r5)
     eac:	00800044 	movi	r2,1
     eb0:	00fff874 	movhi	r3,65505
     eb4:	18deaa04 	addi	r3,r3,31400
     eb8:	1f07883a 	add	r3,r3,fp
     ebc:	18800015 	stw	r2,0(r3)
	alt_up_char_buffer_string (char_buffer_dev, text_ALTERA, ALT_x1, ALT_y);
     ec0:	013ff874 	movhi	r4,65505
     ec4:	211eae04 	addi	r4,r4,31416
     ec8:	2709883a 	add	r4,r4,fp
     ecc:	21800017 	ldw	r6,0(r4)
     ed0:	017ff874 	movhi	r5,65505
     ed4:	295eac04 	addi	r5,r5,31408
     ed8:	2f0b883a 	add	r5,r5,fp
     edc:	29c00017 	ldw	r7,0(r5)
     ee0:	008007f4 	movhi	r2,31
     ee4:	10a15a04 	addi	r2,r2,-31384
     ee8:	00fff874 	movhi	r3,65505
     eec:	18dea004 	addi	r3,r3,31360
     ef0:	1f07883a 	add	r3,r3,fp
     ef4:	188b883a 	add	r5,r3,r2
     ef8:	00bff874 	movhi	r2,65505
     efc:	109eb604 	addi	r2,r2,31448
     f00:	1705883a 	add	r2,r2,fp
     f04:	11000017 	ldw	r4,0(r2)
     f08:	000f2b40 	call	f2b4 <alt_up_char_buffer_string>
     f0c:	00000006 	br	f10 <main+0x984>

	/* this loops "bounces" the word ALTERA around on the VGA screen */
	while (1)
	{
		while (!timeout)
     f10:	00800074 	movhi	r2,1
     f14:	10980e04 	addi	r2,r2,24632
     f18:	10800017 	ldw	r2,0(r2)
     f1c:	1005003a 	cmpeq	r2,r2,zero
     f20:	103ffb1e 	bne	r2,zero,f10 <main+0x984>
			;	// wait to synchronize with timeout, which is set by the interval timer ISR 

		/* move the ALTERA text around on the VGA screen */

		if(flag==1){
     f24:	d0a79417 	ldw	r2,-25008(gp)
     f28:	10800058 	cmpnei	r2,r2,1
     f2c:	1000ff1e 	bne	r2,zero,132c <main+0xda0>
			printf("1");
     f30:	01000c44 	movi	r4,49
     f34:	0001aec0 	call	1aec <putchar>
			flag=0;
     f38:	d0279415 	stw	zero,-25008(gp)
			for(i=0;i<BUF_SIZE;i++){
     f3c:	00fff874 	movhi	r3,65505
     f40:	18deaf04 	addi	r3,r3,31420
     f44:	1f07883a 	add	r3,r3,fp
     f48:	18000015 	stw	zero,0(r3)
     f4c:	0000a406 	br	11e0 <main+0xc54>
			      r_temp=0;
     f50:	013ff874 	movhi	r4,65505
     f54:	211eb104 	addi	r4,r4,31428
     f58:	2709883a 	add	r4,r4,fp
     f5c:	20000015 	stw	zero,0(r4)
			      l_temp=0;
     f60:	017ff874 	movhi	r5,65505
     f64:	295eb004 	addi	r5,r5,31424
     f68:	2f0b883a 	add	r5,r5,fp
     f6c:	28000015 	stw	zero,0(r5)

			        for(j=0;j<64;j++){
     f70:	00bff874 	movhi	r2,65505
     f74:	109eb304 	addi	r2,r2,31436
     f78:	1705883a 	add	r2,r2,fp
     f7c:	10000015 	stw	zero,0(r2)
     f80:	00006606 	br	111c <main+0xb90>
			        	k=i-j;
     f84:	013ff874 	movhi	r4,65505
     f88:	211eaf04 	addi	r4,r4,31420
     f8c:	2709883a 	add	r4,r4,fp
     f90:	20c00017 	ldw	r3,0(r4)
     f94:	017ff874 	movhi	r5,65505
     f98:	295eb304 	addi	r5,r5,31436
     f9c:	2f0b883a 	add	r5,r5,fp
     fa0:	28800017 	ldw	r2,0(r5)
     fa4:	1885c83a 	sub	r2,r3,r2
     fa8:	00fff874 	movhi	r3,65505
     fac:	18deb204 	addi	r3,r3,31432
     fb0:	1f07883a 	add	r3,r3,fp
     fb4:	18800015 	stw	r2,0(r3)
			        	 if(k>=0){
     fb8:	013ff874 	movhi	r4,65505
     fbc:	211eb204 	addi	r4,r4,31432
     fc0:	2709883a 	add	r4,r4,fp
     fc4:	20800017 	ldw	r2,0(r4)
     fc8:	1004803a 	cmplt	r2,r2,zero
     fcc:	10004a1e 	bne	r2,zero,10f8 <main+0xb6c>
			          r_temp+=((float)r_buf[i-j])*B[j];
     fd0:	017ff874 	movhi	r5,65505
     fd4:	295eaf04 	addi	r5,r5,31420
     fd8:	2f0b883a 	add	r5,r5,fp
     fdc:	28c00017 	ldw	r3,0(r5)
     fe0:	013ff874 	movhi	r4,65505
     fe4:	211eb304 	addi	r4,r4,31436
     fe8:	2709883a 	add	r4,r4,fp
     fec:	20800017 	ldw	r2,0(r4)
     ff0:	1885c83a 	sub	r2,r3,r2
     ff4:	00c00474 	movhi	r3,17
     ff8:	18e8b804 	addi	r3,r3,-23840
     ffc:	1085883a 	add	r2,r2,r2
    1000:	1085883a 	add	r2,r2,r2
    1004:	10c5883a 	add	r2,r2,r3
    1008:	11000017 	ldw	r4,0(r2)
    100c:	00015680 	call	1568 <__floatsisf>
    1010:	1009883a 	mov	r4,r2
    1014:	017ff874 	movhi	r5,65505
    1018:	295eb304 	addi	r5,r5,31436
    101c:	2f0b883a 	add	r5,r5,fp
    1020:	28800017 	ldw	r2,0(r5)
    1024:	00c00074 	movhi	r3,1
    1028:	18c6cd04 	addi	r3,r3,6964
    102c:	1085883a 	add	r2,r2,r2
    1030:	1085883a 	add	r2,r2,r2
    1034:	10c5883a 	add	r2,r2,r3
    1038:	10800017 	ldw	r2,0(r2)
    103c:	2087ff32 	custom	252,r3,r4,r2
    1040:	013ff874 	movhi	r4,65505
    1044:	211eb104 	addi	r4,r4,31428
    1048:	2709883a 	add	r4,r4,fp
    104c:	20800017 	ldw	r2,0(r4)
    1050:	10c5ff72 	custom	253,r2,r2,r3
    1054:	017ff874 	movhi	r5,65505
    1058:	295eb104 	addi	r5,r5,31428
    105c:	2f0b883a 	add	r5,r5,fp
    1060:	28800015 	stw	r2,0(r5)
			          l_temp+=((float)l_buf[i-j])*B[j];
    1064:	00bff874 	movhi	r2,65505
    1068:	109eaf04 	addi	r2,r2,31420
    106c:	1705883a 	add	r2,r2,fp
    1070:	10c00017 	ldw	r3,0(r2)
    1074:	013ff874 	movhi	r4,65505
    1078:	211eb304 	addi	r4,r4,31436
    107c:	2709883a 	add	r4,r4,fp
    1080:	20800017 	ldw	r2,0(r4)
    1084:	1885c83a 	sub	r2,r3,r2
    1088:	00c00bf4 	movhi	r3,47
    108c:	18c9d804 	addi	r3,r3,10080
    1090:	1085883a 	add	r2,r2,r2
    1094:	1085883a 	add	r2,r2,r2
    1098:	10c5883a 	add	r2,r2,r3
    109c:	11000017 	ldw	r4,0(r2)
    10a0:	00015680 	call	1568 <__floatsisf>
    10a4:	1009883a 	mov	r4,r2
    10a8:	017ff874 	movhi	r5,65505
    10ac:	295eb304 	addi	r5,r5,31436
    10b0:	2f0b883a 	add	r5,r5,fp
    10b4:	28800017 	ldw	r2,0(r5)
    10b8:	00c00074 	movhi	r3,1
    10bc:	18c6cd04 	addi	r3,r3,6964
    10c0:	1085883a 	add	r2,r2,r2
    10c4:	1085883a 	add	r2,r2,r2
    10c8:	10c5883a 	add	r2,r2,r3
    10cc:	10800017 	ldw	r2,0(r2)
    10d0:	2087ff32 	custom	252,r3,r4,r2
    10d4:	013ff874 	movhi	r4,65505
    10d8:	211eb004 	addi	r4,r4,31424
    10dc:	2709883a 	add	r4,r4,fp
    10e0:	20800017 	ldw	r2,0(r4)
    10e4:	10c5ff72 	custom	253,r2,r2,r3
    10e8:	017ff874 	movhi	r5,65505
    10ec:	295eb004 	addi	r5,r5,31424
    10f0:	2f0b883a 	add	r5,r5,fp
    10f4:	28800015 	stw	r2,0(r5)
			flag=0;
			for(i=0;i<BUF_SIZE;i++){
			      r_temp=0;
			      l_temp=0;

			        for(j=0;j<64;j++){
    10f8:	00fff874 	movhi	r3,65505
    10fc:	18deb304 	addi	r3,r3,31436
    1100:	1f07883a 	add	r3,r3,fp
    1104:	18800017 	ldw	r2,0(r3)
    1108:	10800044 	addi	r2,r2,1
    110c:	013ff874 	movhi	r4,65505
    1110:	211eb304 	addi	r4,r4,31436
    1114:	2709883a 	add	r4,r4,fp
    1118:	20800015 	stw	r2,0(r4)
    111c:	017ff874 	movhi	r5,65505
    1120:	295eb304 	addi	r5,r5,31436
    1124:	2f0b883a 	add	r5,r5,fp
    1128:	28800017 	ldw	r2,0(r5)
    112c:	10801010 	cmplti	r2,r2,64
    1130:	103f941e 	bne	r2,zero,f84 <main+0x9f8>
			        	 if(k>=0){
			          r_temp+=((float)r_buf[i-j])*B[j];
			          l_temp+=((float)l_buf[i-j])*B[j];
			        }
			      }
			      rbufout[i]=r_temp;
    1134:	00bff874 	movhi	r2,65505
    1138:	109eaf04 	addi	r2,r2,31420
    113c:	1705883a 	add	r2,r2,fp
    1140:	10c00017 	ldw	r3,0(r2)
    1144:	008003f4 	movhi	r2,15
    1148:	1090ac04 	addi	r2,r2,17072
    114c:	017ff874 	movhi	r5,65505
    1150:	295ea004 	addi	r5,r5,31360
    1154:	2f0b883a 	add	r5,r5,fp
    1158:	2889883a 	add	r4,r5,r2
    115c:	18c5883a 	add	r2,r3,r3
    1160:	1085883a 	add	r2,r2,r2
    1164:	1107883a 	add	r3,r2,r4
    1168:	013ff874 	movhi	r4,65505
    116c:	211eb104 	addi	r4,r4,31428
    1170:	2709883a 	add	r4,r4,fp
    1174:	20800017 	ldw	r2,0(r4)
    1178:	18800015 	stw	r2,0(r3)
			      lbufout[i]=l_temp;
    117c:	017ff874 	movhi	r5,65505
    1180:	295eaf04 	addi	r5,r5,31420
    1184:	2f0b883a 	add	r5,r5,fp
    1188:	28800017 	ldw	r2,0(r5)
    118c:	1085883a 	add	r2,r2,r2
    1190:	1085883a 	add	r2,r2,r2
    1194:	00fff874 	movhi	r3,65505
    1198:	18dea004 	addi	r3,r3,31360
    119c:	1f07883a 	add	r3,r3,fp
    11a0:	10c5883a 	add	r2,r2,r3
    11a4:	10c01c04 	addi	r3,r2,112
    11a8:	013ff874 	movhi	r4,65505
    11ac:	211eb004 	addi	r4,r4,31424
    11b0:	2709883a 	add	r4,r4,fp
    11b4:	20800017 	ldw	r2,0(r4)
    11b8:	18800015 	stw	r2,0(r3)
		/* move the ALTERA text around on the VGA screen */

		if(flag==1){
			printf("1");
			flag=0;
			for(i=0;i<BUF_SIZE;i++){
    11bc:	017ff874 	movhi	r5,65505
    11c0:	295eaf04 	addi	r5,r5,31420
    11c4:	2f0b883a 	add	r5,r5,fp
    11c8:	28800017 	ldw	r2,0(r5)
    11cc:	10800044 	addi	r2,r2,1
    11d0:	00fff874 	movhi	r3,65505
    11d4:	18deaf04 	addi	r3,r3,31420
    11d8:	1f07883a 	add	r3,r3,fp
    11dc:	18800015 	stw	r2,0(r3)
    11e0:	013ff874 	movhi	r4,65505
    11e4:	211eaf04 	addi	r4,r4,31420
    11e8:	2709883a 	add	r4,r4,fp
    11ec:	20c00017 	ldw	r3,0(r4)
    11f0:	00800134 	movhi	r2,4
    11f4:	10b423c4 	addi	r2,r2,-12145
    11f8:	10ff550e 	bge	r2,r3,f50 <main+0x9c4>
			      }
			      rbufout[i]=r_temp;
			      lbufout[i]=l_temp;

			      }
			   for(j=0;j<BUF_SIZE;j++){
    11fc:	017ff874 	movhi	r5,65505
    1200:	295eb304 	addi	r5,r5,31436
    1204:	2f0b883a 	add	r5,r5,fp
    1208:	28000015 	stw	zero,0(r5)
    120c:	00003d06 	br	1304 <main+0xd78>
			        le_buf[j]=(int)lbufout[j];
    1210:	00bff874 	movhi	r2,65505
    1214:	109eb304 	addi	r2,r2,31436
    1218:	1705883a 	add	r2,r2,fp
    121c:	14000017 	ldw	r16,0(r2)
    1220:	00fff874 	movhi	r3,65505
    1224:	18deb304 	addi	r3,r3,31436
    1228:	1f07883a 	add	r3,r3,fp
    122c:	18800017 	ldw	r2,0(r3)
    1230:	1085883a 	add	r2,r2,r2
    1234:	1085883a 	add	r2,r2,r2
    1238:	013ff874 	movhi	r4,65505
    123c:	211ea004 	addi	r4,r4,31360
    1240:	2709883a 	add	r4,r4,fp
    1244:	1105883a 	add	r2,r2,r4
    1248:	10801c04 	addi	r2,r2,112
    124c:	10800017 	ldw	r2,0(r2)
    1250:	1009883a 	mov	r4,r2
    1254:	00016000 	call	1600 <__fixsfsi>
    1258:	1009883a 	mov	r4,r2
    125c:	00c00074 	movhi	r3,1
    1260:	18d82804 	addi	r3,r3,24736
    1264:	8405883a 	add	r2,r16,r16
    1268:	1085883a 	add	r2,r2,r2
    126c:	10c5883a 	add	r2,r2,r3
    1270:	11000015 	stw	r4,0(r2)
			        re_buf[j]=(int)rbufout[j];
    1274:	017ff874 	movhi	r5,65505
    1278:	295eb304 	addi	r5,r5,31436
    127c:	2f0b883a 	add	r5,r5,fp
    1280:	2c000017 	ldw	r16,0(r5)
    1284:	00bff874 	movhi	r2,65505
    1288:	109eb304 	addi	r2,r2,31436
    128c:	1705883a 	add	r2,r2,fp
    1290:	10c00017 	ldw	r3,0(r2)
    1294:	008003f4 	movhi	r2,15
    1298:	1090ac04 	addi	r2,r2,17072
    129c:	017ff874 	movhi	r5,65505
    12a0:	295ea004 	addi	r5,r5,31360
    12a4:	2f0b883a 	add	r5,r5,fp
    12a8:	2889883a 	add	r4,r5,r2
    12ac:	18c5883a 	add	r2,r3,r3
    12b0:	1085883a 	add	r2,r2,r2
    12b4:	1105883a 	add	r2,r2,r4
    12b8:	10800017 	ldw	r2,0(r2)
    12bc:	1009883a 	mov	r4,r2
    12c0:	00016000 	call	1600 <__fixsfsi>
    12c4:	1009883a 	mov	r4,r2
    12c8:	00c00834 	movhi	r3,32
    12cc:	18f94804 	addi	r3,r3,-6880
    12d0:	8405883a 	add	r2,r16,r16
    12d4:	1085883a 	add	r2,r2,r2
    12d8:	10c5883a 	add	r2,r2,r3
    12dc:	11000015 	stw	r4,0(r2)
			      }
			      rbufout[i]=r_temp;
			      lbufout[i]=l_temp;

			      }
			   for(j=0;j<BUF_SIZE;j++){
    12e0:	00fff874 	movhi	r3,65505
    12e4:	18deb304 	addi	r3,r3,31436
    12e8:	1f07883a 	add	r3,r3,fp
    12ec:	18800017 	ldw	r2,0(r3)
    12f0:	10800044 	addi	r2,r2,1
    12f4:	013ff874 	movhi	r4,65505
    12f8:	211eb304 	addi	r4,r4,31436
    12fc:	2709883a 	add	r4,r4,fp
    1300:	20800015 	stw	r2,0(r4)
    1304:	017ff874 	movhi	r5,65505
    1308:	295eb304 	addi	r5,r5,31436
    130c:	2f0b883a 	add	r5,r5,fp
    1310:	28c00017 	ldw	r3,0(r5)
    1314:	00800134 	movhi	r2,4
    1318:	10b423c4 	addi	r2,r2,-12145
    131c:	10ffbc0e 	bge	r2,r3,1210 <main+0xc84>
			      }




			      printf("done");
    1320:	01000074 	movhi	r4,1
    1324:	2107aa04 	addi	r4,r4,7848
    1328:	0001a740 	call	1a74 <printf>
		}

		/* also, display any PS/2 data (from its interrupt service routine) on HEX displays */
		HEX_PS2 (byte1, byte2, byte3);
    132c:	00800074 	movhi	r2,1
    1330:	10980d84 	addi	r2,r2,24630
    1334:	10800003 	ldbu	r2,0(r2)
    1338:	11003fcc 	andi	r4,r2,255
    133c:	00800074 	movhi	r2,1
    1340:	10980d04 	addi	r2,r2,24628
    1344:	10800003 	ldbu	r2,0(r2)
    1348:	11403fcc 	andi	r5,r2,255
    134c:	00800074 	movhi	r2,1
    1350:	10980d44 	addi	r2,r2,24629
    1354:	10800003 	ldbu	r2,0(r2)
    1358:	11803fcc 	andi	r6,r2,255
    135c:	000138c0 	call	138c <HEX_PS2>
		timeout = 0;
    1360:	00800074 	movhi	r2,1
    1364:	10980e04 	addi	r2,r2,24632
    1368:	10000015 	stw	zero,0(r2)
	}
    136c:	003ee806 	br	f10 <main+0x984>
    1370:	e0bfff17 	ldw	r2,-4(fp)
}
    1374:	e037883a 	mov	sp,fp
    1378:	dfc00217 	ldw	ra,8(sp)
    137c:	df000117 	ldw	fp,4(sp)
    1380:	dc000017 	ldw	r16,0(sp)
    1384:	dec00304 	addi	sp,sp,12
    1388:	f800283a 	ret

0000138c <HEX_PS2>:
 * Subroutine to show a string of HEX data on the HEX displays
 * Note that we are using pointer accesses for the HEX displays parallel port. We could
 * also use the HAL functions for these ports instead
****************************************************************************************/
void HEX_PS2(unsigned char b1, unsigned char b2, unsigned char b3)
{
    138c:	deffef04 	addi	sp,sp,-68
    1390:	dfc01015 	stw	ra,64(sp)
    1394:	df000f15 	stw	fp,60(sp)
    1398:	df000f04 	addi	fp,sp,60
    139c:	e13ffd05 	stb	r4,-12(fp)
    13a0:	e17ffe05 	stb	r5,-8(fp)
    13a4:	e1bfff05 	stb	r6,-4(fp)
	volatile int *HEX3_HEX0_ptr = (int *) 0x10000020;
    13a8:	00840034 	movhi	r2,4096
    13ac:	10800804 	addi	r2,r2,32
    13b0:	e0bff615 	stw	r2,-40(fp)
	volatile int *HEX7_HEX4_ptr = (int *) 0x10000030;
    13b4:	00840034 	movhi	r2,4096
    13b8:	10800c04 	addi	r2,r2,48
    13bc:	e0bff515 	stw	r2,-44(fp)

	/* SEVEN_SEGMENT_DECODE_TABLE gives the on/off settings for all segments in 
	 * a single 7-seg display in the DE2 Media Computer, for the hex digits 0 - F */
	unsigned char	seven_seg_decode_table[] = {	0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 
		  										0x7F, 0x67, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71 };
    13c0:	00800074 	movhi	r2,1
    13c4:	1087cf84 	addi	r2,r2,7998
    13c8:	e13ff704 	addi	r4,fp,-36
    13cc:	100b883a 	mov	r5,r2
    13d0:	01800404 	movi	r6,16
    13d4:	000193c0 	call	193c <memcpy>
	unsigned char	hex_segs[] = { 0, 0, 0, 0, 0, 0, 0, 0 };
    13d8:	e03ffb05 	stb	zero,-20(fp)
    13dc:	e03ffb45 	stb	zero,-19(fp)
    13e0:	e03ffb85 	stb	zero,-18(fp)
    13e4:	e03ffbc5 	stb	zero,-17(fp)
    13e8:	e03ffc05 	stb	zero,-16(fp)
    13ec:	e03ffc45 	stb	zero,-15(fp)
    13f0:	e03ffc85 	stb	zero,-14(fp)
    13f4:	e03ffcc5 	stb	zero,-13(fp)
	unsigned int shift_buffer, nibble;
	unsigned char code;
	int i;

	shift_buffer = (b1 << 16) | (b2 << 8) | b3;
    13f8:	e0bffd03 	ldbu	r2,-12(fp)
    13fc:	1006943a 	slli	r3,r2,16
    1400:	e0bffe03 	ldbu	r2,-8(fp)
    1404:	1004923a 	slli	r2,r2,8
    1408:	1886b03a 	or	r3,r3,r2
    140c:	e0bfff03 	ldbu	r2,-4(fp)
    1410:	1884b03a 	or	r2,r3,r2
    1414:	e0bff415 	stw	r2,-48(fp)
	for ( i = 0; i < 6; ++i )
    1418:	e03ff115 	stw	zero,-60(fp)
    141c:	00001306 	br	146c <HEX_PS2+0xe0>
	{
		nibble = shift_buffer & 0x0000000F;		// character is in rightmost nibble
    1420:	e0bff417 	ldw	r2,-48(fp)
    1424:	108003cc 	andi	r2,r2,15
    1428:	e0bff315 	stw	r2,-52(fp)
		code = seven_seg_decode_table[nibble];
    142c:	e0fff317 	ldw	r3,-52(fp)
    1430:	e0bff704 	addi	r2,fp,-36
    1434:	10c5883a 	add	r2,r2,r3
    1438:	10800003 	ldbu	r2,0(r2)
    143c:	e0bff205 	stb	r2,-56(fp)
		hex_segs[i] = code;
    1440:	e0fff117 	ldw	r3,-60(fp)
    1444:	e0bffb04 	addi	r2,fp,-20
    1448:	10c7883a 	add	r3,r2,r3
    144c:	e0bff203 	ldbu	r2,-56(fp)
    1450:	18800005 	stb	r2,0(r3)
		shift_buffer = shift_buffer >> 4;
    1454:	e0bff417 	ldw	r2,-48(fp)
    1458:	1004d13a 	srli	r2,r2,4
    145c:	e0bff415 	stw	r2,-48(fp)
	unsigned int shift_buffer, nibble;
	unsigned char code;
	int i;

	shift_buffer = (b1 << 16) | (b2 << 8) | b3;
	for ( i = 0; i < 6; ++i )
    1460:	e0bff117 	ldw	r2,-60(fp)
    1464:	10800044 	addi	r2,r2,1
    1468:	e0bff115 	stw	r2,-60(fp)
    146c:	e0bff117 	ldw	r2,-60(fp)
    1470:	10800190 	cmplti	r2,r2,6
    1474:	103fea1e 	bne	r2,zero,1420 <HEX_PS2+0x94>
		code = seven_seg_decode_table[nibble];
		hex_segs[i] = code;
		shift_buffer = shift_buffer >> 4;
	}
	/* drive the hex displays */
	*(HEX3_HEX0_ptr) = *(int *) (hex_segs);
    1478:	e0bffb04 	addi	r2,fp,-20
    147c:	10c00017 	ldw	r3,0(r2)
    1480:	e0bff617 	ldw	r2,-40(fp)
    1484:	10c00015 	stw	r3,0(r2)
	*(HEX7_HEX4_ptr) = *(int *) (hex_segs+4);
    1488:	e0bffb04 	addi	r2,fp,-20
    148c:	10800104 	addi	r2,r2,4
    1490:	10c00017 	ldw	r3,0(r2)
    1494:	e0bff517 	ldw	r2,-44(fp)
    1498:	10c00015 	stw	r3,0(r2)
}
    149c:	e037883a 	mov	sp,fp
    14a0:	dfc00117 	ldw	ra,4(sp)
    14a4:	df000017 	ldw	fp,0(sp)
    14a8:	dec00204 	addi	sp,sp,8
    14ac:	f800283a 	ret

000014b0 <pushbutton_ISR>:
 *                                                                          
 * This ISR checks which KEY has been pressed. If KEY1, then it enables audio-in
 * interrupts (recording). If KEY2, it enables audio-out interrupts (playback).
****************************************************************************************/
void pushbutton_ISR(struct alt_up_dev *up_dev, unsigned int id)
{
    14b0:	defffa04 	addi	sp,sp,-24
    14b4:	dfc00515 	stw	ra,20(sp)
    14b8:	df000415 	stw	fp,16(sp)
    14bc:	df000404 	addi	fp,sp,16
    14c0:	e13ffe15 	stw	r4,-8(fp)
    14c4:	e17fff15 	stw	r5,-4(fp)
	alt_up_audio_dev *audio_dev;

	audio_dev = up_dev->audio_dev;
    14c8:	e0bffe17 	ldw	r2,-8(fp)
    14cc:	10800417 	ldw	r2,16(r2)
    14d0:	e0bffd15 	stw	r2,-12(fp)
	
	int KEY_value;

	/* read the pushbutton interrupt register */
	KEY_value = alt_up_parallel_port_read_edge_capture (up_dev->KEY_dev);
    14d4:	e0bffe17 	ldw	r2,-8(fp)
    14d8:	10800017 	ldw	r2,0(r2)
    14dc:	10800a17 	ldw	r2,40(r2)
    14e0:	10800304 	addi	r2,r2,12
    14e4:	10800037 	ldwio	r2,0(r2)
    14e8:	e0bffc15 	stw	r2,-16(fp)
	alt_up_parallel_port_clear_edge_capture (up_dev->KEY_dev);	// Clear the interrupt
    14ec:	e0bffe17 	ldw	r2,-8(fp)
    14f0:	10800017 	ldw	r2,0(r2)
    14f4:	10800a17 	ldw	r2,40(r2)
    14f8:	10800304 	addi	r2,r2,12
    14fc:	10000035 	stwio	zero,0(r2)

	if (KEY_value == 0x2)										// check KEY1
    1500:	e0bffc17 	ldw	r2,-16(fp)
    1504:	10800098 	cmpnei	r2,r2,2
    1508:	1000081e 	bne	r2,zero,152c <pushbutton_ISR+0x7c>
	{
		// reset the buffer index for recording
		buf_index_record = 0;
    150c:	00800074 	movhi	r2,1
    1510:	10981004 	addi	r2,r2,24640
    1514:	10000015 	stw	zero,0(r2)
		// clear audio FIFOs
		alt_up_audio_reset_audio_core (audio_dev);
    1518:	e13ffd17 	ldw	r4,-12(fp)
    151c:	000d3e00 	call	d3e0 <alt_up_audio_reset_audio_core>
		// enable audio-in interrupts
		alt_up_audio_enable_read_interrupt (audio_dev);
    1520:	e13ffd17 	ldw	r4,-12(fp)
    1524:	000d2300 	call	d230 <alt_up_audio_enable_read_interrupt>
    1528:	00000a06 	br	1554 <pushbutton_ISR+0xa4>
	}
	else if (KEY_value == 0x4)									// check KEY2
    152c:	e0bffc17 	ldw	r2,-16(fp)
    1530:	10800118 	cmpnei	r2,r2,4
    1534:	1000071e 	bne	r2,zero,1554 <pushbutton_ISR+0xa4>
	{
		// reset counter to start playback
		buf_index_play = 0;
    1538:	00800074 	movhi	r2,1
    153c:	10980f04 	addi	r2,r2,24636
    1540:	10000015 	stw	zero,0(r2)
		// clear audio FIFOs
		alt_up_audio_reset_audio_core (audio_dev);
    1544:	e13ffd17 	ldw	r4,-12(fp)
    1548:	000d3e00 	call	d3e0 <alt_up_audio_reset_audio_core>
		// enable audio-out interrupts
		alt_up_audio_enable_write_interrupt (audio_dev);
    154c:	e13ffd17 	ldw	r4,-12(fp)
    1550:	000d2cc0 	call	d2cc <alt_up_audio_enable_write_interrupt>
	}
	return;
}
    1554:	e037883a 	mov	sp,fp
    1558:	dfc00117 	ldw	ra,4(sp)
    155c:	df000017 	ldw	fp,0(sp)
    1560:	dec00204 	addi	sp,sp,8
    1564:	f800283a 	ret

00001568 <__floatsisf>:
    1568:	2006d7fa 	srli	r3,r4,31
    156c:	defffa04 	addi	sp,sp,-24
    1570:	008000c4 	movi	r2,3
    1574:	dfc00515 	stw	ra,20(sp)
    1578:	dc000415 	stw	r16,16(sp)
    157c:	d8800015 	stw	r2,0(sp)
    1580:	d8c00115 	stw	r3,4(sp)
    1584:	2000081e 	bne	r4,zero,15a8 <__floatsisf+0x40>
    1588:	00800084 	movi	r2,2
    158c:	d8800015 	stw	r2,0(sp)
    1590:	d809883a 	mov	r4,sp
    1594:	00017140 	call	1714 <__pack_f>
    1598:	dfc00517 	ldw	ra,20(sp)
    159c:	dc000417 	ldw	r16,16(sp)
    15a0:	dec00604 	addi	sp,sp,24
    15a4:	f800283a 	ret
    15a8:	00800784 	movi	r2,30
    15ac:	1807003a 	cmpeq	r3,r3,zero
    15b0:	d8800215 	stw	r2,8(sp)
    15b4:	18000e1e 	bne	r3,zero,15f0 <__floatsisf+0x88>
    15b8:	00a00034 	movhi	r2,32768
    15bc:	20800e26 	beq	r4,r2,15f8 <__floatsisf+0x90>
    15c0:	0121c83a 	sub	r16,zero,r4
    15c4:	8009883a 	mov	r4,r16
    15c8:	dc000315 	stw	r16,12(sp)
    15cc:	00016940 	call	1694 <__clzsi2>
    15d0:	117fffc4 	addi	r5,r2,-1
    15d4:	017fee0e 	bge	zero,r5,1590 <__floatsisf+0x28>
    15d8:	d8800217 	ldw	r2,8(sp)
    15dc:	8146983a 	sll	r3,r16,r5
    15e0:	1145c83a 	sub	r2,r2,r5
    15e4:	d8c00315 	stw	r3,12(sp)
    15e8:	d8800215 	stw	r2,8(sp)
    15ec:	003fe806 	br	1590 <__floatsisf+0x28>
    15f0:	2021883a 	mov	r16,r4
    15f4:	003ff306 	br	15c4 <__floatsisf+0x5c>
    15f8:	00b3c034 	movhi	r2,52992
    15fc:	003fe606 	br	1598 <__floatsisf+0x30>

00001600 <__fixsfsi>:
    1600:	defffa04 	addi	sp,sp,-24
    1604:	d9000015 	stw	r4,0(sp)
    1608:	d9400104 	addi	r5,sp,4
    160c:	d809883a 	mov	r4,sp
    1610:	dfc00515 	stw	ra,20(sp)
    1614:	00018740 	call	1874 <__unpack_f>
    1618:	d8c00117 	ldw	r3,4(sp)
    161c:	00800084 	movi	r2,2
    1620:	1880041e 	bne	r3,r2,1634 <__fixsfsi+0x34>
    1624:	0005883a 	mov	r2,zero
    1628:	dfc00517 	ldw	ra,20(sp)
    162c:	dec00604 	addi	sp,sp,24
    1630:	f800283a 	ret
    1634:	00800044 	movi	r2,1
    1638:	10fffa2e 	bgeu	r2,r3,1624 <__fixsfsi+0x24>
    163c:	00800104 	movi	r2,4
    1640:	18800426 	beq	r3,r2,1654 <__fixsfsi+0x54>
    1644:	d8800317 	ldw	r2,12(sp)
    1648:	103ff616 	blt	r2,zero,1624 <__fixsfsi+0x24>
    164c:	00c00784 	movi	r3,30
    1650:	1880070e 	bge	r3,r2,1670 <__fixsfsi+0x70>
    1654:	d8800217 	ldw	r2,8(sp)
    1658:	10000c1e 	bne	r2,zero,168c <__fixsfsi+0x8c>
    165c:	00a00034 	movhi	r2,32768
    1660:	10bfffc4 	addi	r2,r2,-1
    1664:	dfc00517 	ldw	ra,20(sp)
    1668:	dec00604 	addi	sp,sp,24
    166c:	f800283a 	ret
    1670:	1885c83a 	sub	r2,r3,r2
    1674:	d9000217 	ldw	r4,8(sp)
    1678:	d8c00417 	ldw	r3,16(sp)
    167c:	1884d83a 	srl	r2,r3,r2
    1680:	203fe926 	beq	r4,zero,1628 <__fixsfsi+0x28>
    1684:	0085c83a 	sub	r2,zero,r2
    1688:	003fe706 	br	1628 <__fixsfsi+0x28>
    168c:	00a00034 	movhi	r2,32768
    1690:	003fe506 	br	1628 <__fixsfsi+0x28>

00001694 <__clzsi2>:
    1694:	00bfffd4 	movui	r2,65535
    1698:	11000e36 	bltu	r2,r4,16d4 <__clzsi2+0x40>
    169c:	00803fc4 	movi	r2,255
    16a0:	01400204 	movi	r5,8
    16a4:	0007883a 	mov	r3,zero
    16a8:	11001036 	bltu	r2,r4,16ec <__clzsi2+0x58>
    16ac:	000b883a 	mov	r5,zero
    16b0:	20c6d83a 	srl	r3,r4,r3
    16b4:	00800074 	movhi	r2,1
    16b8:	1087d404 	addi	r2,r2,8016
    16bc:	1887883a 	add	r3,r3,r2
    16c0:	18800003 	ldbu	r2,0(r3)
    16c4:	00c00804 	movi	r3,32
    16c8:	2885883a 	add	r2,r5,r2
    16cc:	1885c83a 	sub	r2,r3,r2
    16d0:	f800283a 	ret
    16d4:	01400404 	movi	r5,16
    16d8:	00804034 	movhi	r2,256
    16dc:	10bfffc4 	addi	r2,r2,-1
    16e0:	2807883a 	mov	r3,r5
    16e4:	113ff22e 	bgeu	r2,r4,16b0 <__clzsi2+0x1c>
    16e8:	01400604 	movi	r5,24
    16ec:	2807883a 	mov	r3,r5
    16f0:	20c6d83a 	srl	r3,r4,r3
    16f4:	00800074 	movhi	r2,1
    16f8:	1087d404 	addi	r2,r2,8016
    16fc:	1887883a 	add	r3,r3,r2
    1700:	18800003 	ldbu	r2,0(r3)
    1704:	00c00804 	movi	r3,32
    1708:	2885883a 	add	r2,r5,r2
    170c:	1885c83a 	sub	r2,r3,r2
    1710:	f800283a 	ret

00001714 <__pack_f>:
    1714:	20c00017 	ldw	r3,0(r4)
    1718:	01c00044 	movi	r7,1
    171c:	21800317 	ldw	r6,12(r4)
    1720:	21400117 	ldw	r5,4(r4)
    1724:	38c02d2e 	bgeu	r7,r3,17dc <__pack_f+0xc8>
    1728:	00800104 	movi	r2,4
    172c:	18802826 	beq	r3,r2,17d0 <__pack_f+0xbc>
    1730:	00800084 	movi	r2,2
    1734:	18800126 	beq	r3,r2,173c <__pack_f+0x28>
    1738:	3000101e 	bne	r6,zero,177c <__pack_f+0x68>
    173c:	000d883a 	mov	r6,zero
    1740:	0007883a 	mov	r3,zero
    1744:	19003fcc 	andi	r4,r3,255
    1748:	200895fa 	slli	r4,r4,23
    174c:	00c02034 	movhi	r3,128
    1750:	18ffffc4 	addi	r3,r3,-1
    1754:	30c6703a 	and	r3,r6,r3
    1758:	10a0002c 	andhi	r2,r2,32768
    175c:	10c4b03a 	or	r2,r2,r3
    1760:	280a97fa 	slli	r5,r5,31
    1764:	1104b03a 	or	r2,r2,r4
    1768:	00e00034 	movhi	r3,32768
    176c:	18ffffc4 	addi	r3,r3,-1
    1770:	10c4703a 	and	r2,r2,r3
    1774:	1144b03a 	or	r2,r2,r5
    1778:	f800283a 	ret
    177c:	21000217 	ldw	r4,8(r4)
    1780:	00bfe084 	movi	r2,-126
    1784:	20801b16 	blt	r4,r2,17f4 <__pack_f+0xe0>
    1788:	00801fc4 	movi	r2,127
    178c:	11001016 	blt	r2,r4,17d0 <__pack_f+0xbc>
    1790:	308e703a 	and	r7,r6,r2
    1794:	2087883a 	add	r3,r4,r2
    1798:	00801004 	movi	r2,64
    179c:	38800526 	beq	r7,r2,17b4 <__pack_f+0xa0>
    17a0:	31800fc4 	addi	r6,r6,63
    17a4:	30000716 	blt	r6,zero,17c4 <__pack_f+0xb0>
    17a8:	300490ba 	slli	r2,r6,2
    17ac:	100cd27a 	srli	r6,r2,9
    17b0:	003fe406 	br	1744 <__pack_f+0x30>
    17b4:	3080200c 	andi	r2,r6,128
    17b8:	103ffa26 	beq	r2,zero,17a4 <__pack_f+0x90>
    17bc:	31cd883a 	add	r6,r6,r7
    17c0:	003ff806 	br	17a4 <__pack_f+0x90>
    17c4:	300cd07a 	srli	r6,r6,1
    17c8:	18c00044 	addi	r3,r3,1
    17cc:	003ff606 	br	17a8 <__pack_f+0x94>
    17d0:	000d883a 	mov	r6,zero
    17d4:	00ffffc4 	movi	r3,-1
    17d8:	003fda06 	br	1744 <__pack_f+0x30>
    17dc:	31800434 	orhi	r6,r6,16
    17e0:	00802034 	movhi	r2,128
    17e4:	10bfffc4 	addi	r2,r2,-1
    17e8:	308c703a 	and	r6,r6,r2
    17ec:	00ffffc4 	movi	r3,-1
    17f0:	003fd406 	br	1744 <__pack_f+0x30>
    17f4:	1109c83a 	sub	r4,r2,r4
    17f8:	00800644 	movi	r2,25
    17fc:	11001216 	blt	r2,r4,1848 <__pack_f+0x134>
    1800:	3904983a 	sll	r2,r7,r4
    1804:	3106d83a 	srl	r3,r6,r4
    1808:	10bfffc4 	addi	r2,r2,-1
    180c:	3084703a 	and	r2,r6,r2
    1810:	1004c03a 	cmpne	r2,r2,zero
    1814:	1886b03a 	or	r3,r3,r2
    1818:	19001fcc 	andi	r4,r3,127
    181c:	00801004 	movi	r2,64
    1820:	20800c26 	beq	r4,r2,1854 <__pack_f+0x140>
    1824:	18c00fc4 	addi	r3,r3,63
    1828:	00900034 	movhi	r2,16384
    182c:	10bfffc4 	addi	r2,r2,-1
    1830:	180cd1fa 	srli	r6,r3,7
    1834:	10c7803a 	cmpltu	r3,r2,r3
    1838:	00802034 	movhi	r2,128
    183c:	10bfffc4 	addi	r2,r2,-1
    1840:	308c703a 	and	r6,r6,r2
    1844:	003fbf06 	br	1744 <__pack_f+0x30>
    1848:	0007883a 	mov	r3,zero
    184c:	000d883a 	mov	r6,zero
    1850:	003ff906 	br	1838 <__pack_f+0x124>
    1854:	1880200c 	andi	r2,r3,128
    1858:	10000126 	beq	r2,zero,1860 <__pack_f+0x14c>
    185c:	1907883a 	add	r3,r3,r4
    1860:	180cd1fa 	srli	r6,r3,7
    1864:	00900034 	movhi	r2,16384
    1868:	10bfffc4 	addi	r2,r2,-1
    186c:	10c7803a 	cmpltu	r3,r2,r3
    1870:	003ff106 	br	1838 <__pack_f+0x124>

00001874 <__unpack_f>:
    1874:	21800017 	ldw	r6,0(r4)
    1878:	00c02034 	movhi	r3,128
    187c:	18ffffc4 	addi	r3,r3,-1
    1880:	3004d5fa 	srli	r2,r6,23
    1884:	3008d7fa 	srli	r4,r6,31
    1888:	30ce703a 	and	r7,r6,r3
    188c:	10c03fcc 	andi	r3,r2,255
    1890:	29000115 	stw	r4,4(r5)
    1894:	1800131e 	bne	r3,zero,18e4 <__unpack_f+0x70>
    1898:	38000f26 	beq	r7,zero,18d8 <__unpack_f+0x64>
    189c:	380691fa 	slli	r3,r7,7
    18a0:	01bfe084 	movi	r6,-126
    18a4:	008000c4 	movi	r2,3
    18a8:	01100034 	movhi	r4,16384
    18ac:	213fffc4 	addi	r4,r4,-1
    18b0:	28800015 	stw	r2,0(r5)
    18b4:	29800215 	stw	r6,8(r5)
    18b8:	20c00536 	bltu	r4,r3,18d0 <__unpack_f+0x5c>
    18bc:	3005883a 	mov	r2,r6
    18c0:	18c7883a 	add	r3,r3,r3
    18c4:	10bfffc4 	addi	r2,r2,-1
    18c8:	20fffd2e 	bgeu	r4,r3,18c0 <__unpack_f+0x4c>
    18cc:	28800215 	stw	r2,8(r5)
    18d0:	28c00315 	stw	r3,12(r5)
    18d4:	f800283a 	ret
    18d8:	00800084 	movi	r2,2
    18dc:	28800015 	stw	r2,0(r5)
    18e0:	f800283a 	ret
    18e4:	00803fc4 	movi	r2,255
    18e8:	18800826 	beq	r3,r2,190c <__unpack_f+0x98>
    18ec:	380491fa 	slli	r2,r7,7
    18f0:	18ffe044 	addi	r3,r3,-127
    18f4:	28c00215 	stw	r3,8(r5)
    18f8:	10900034 	orhi	r2,r2,16384
    18fc:	28800315 	stw	r2,12(r5)
    1900:	008000c4 	movi	r2,3
    1904:	28800015 	stw	r2,0(r5)
    1908:	f800283a 	ret
    190c:	3800031e 	bne	r7,zero,191c <__unpack_f+0xa8>
    1910:	00800104 	movi	r2,4
    1914:	28800015 	stw	r2,0(r5)
    1918:	f800283a 	ret
    191c:	3080042c 	andhi	r2,r6,16
    1920:	10000426 	beq	r2,zero,1934 <__unpack_f+0xc0>
    1924:	00800044 	movi	r2,1
    1928:	28800015 	stw	r2,0(r5)
    192c:	29c00315 	stw	r7,12(r5)
    1930:	f800283a 	ret
    1934:	28000015 	stw	zero,0(r5)
    1938:	003ffc06 	br	192c <__unpack_f+0xb8>

0000193c <memcpy>:
    193c:	01c003c4 	movi	r7,15
    1940:	2007883a 	mov	r3,r4
    1944:	3980032e 	bgeu	r7,r6,1954 <memcpy+0x18>
    1948:	2904b03a 	or	r2,r5,r4
    194c:	108000cc 	andi	r2,r2,3
    1950:	10000926 	beq	r2,zero,1978 <memcpy+0x3c>
    1954:	30000626 	beq	r6,zero,1970 <memcpy+0x34>
    1958:	30cd883a 	add	r6,r6,r3
    195c:	28800003 	ldbu	r2,0(r5)
    1960:	29400044 	addi	r5,r5,1
    1964:	18800005 	stb	r2,0(r3)
    1968:	18c00044 	addi	r3,r3,1
    196c:	30fffb1e 	bne	r6,r3,195c <memcpy+0x20>
    1970:	2005883a 	mov	r2,r4
    1974:	f800283a 	ret
    1978:	3811883a 	mov	r8,r7
    197c:	200f883a 	mov	r7,r4
    1980:	28c00017 	ldw	r3,0(r5)
    1984:	31bffc04 	addi	r6,r6,-16
    1988:	38c00015 	stw	r3,0(r7)
    198c:	28800117 	ldw	r2,4(r5)
    1990:	38800115 	stw	r2,4(r7)
    1994:	28c00217 	ldw	r3,8(r5)
    1998:	38c00215 	stw	r3,8(r7)
    199c:	28800317 	ldw	r2,12(r5)
    19a0:	29400404 	addi	r5,r5,16
    19a4:	38800315 	stw	r2,12(r7)
    19a8:	39c00404 	addi	r7,r7,16
    19ac:	41bff436 	bltu	r8,r6,1980 <memcpy+0x44>
    19b0:	008000c4 	movi	r2,3
    19b4:	1180072e 	bgeu	r2,r6,19d4 <memcpy+0x98>
    19b8:	1007883a 	mov	r3,r2
    19bc:	28800017 	ldw	r2,0(r5)
    19c0:	31bfff04 	addi	r6,r6,-4
    19c4:	29400104 	addi	r5,r5,4
    19c8:	38800015 	stw	r2,0(r7)
    19cc:	39c00104 	addi	r7,r7,4
    19d0:	19bffa36 	bltu	r3,r6,19bc <memcpy+0x80>
    19d4:	3807883a 	mov	r3,r7
    19d8:	003fde06 	br	1954 <memcpy+0x18>

000019dc <memset>:
    19dc:	008000c4 	movi	r2,3
    19e0:	29403fcc 	andi	r5,r5,255
    19e4:	2007883a 	mov	r3,r4
    19e8:	1180022e 	bgeu	r2,r6,19f4 <memset+0x18>
    19ec:	2084703a 	and	r2,r4,r2
    19f0:	10000826 	beq	r2,zero,1a14 <memset+0x38>
    19f4:	30000526 	beq	r6,zero,1a0c <memset+0x30>
    19f8:	2805883a 	mov	r2,r5
    19fc:	30cd883a 	add	r6,r6,r3
    1a00:	18800005 	stb	r2,0(r3)
    1a04:	18c00044 	addi	r3,r3,1
    1a08:	19bffd1e 	bne	r3,r6,1a00 <memset+0x24>
    1a0c:	2005883a 	mov	r2,r4
    1a10:	f800283a 	ret
    1a14:	2804923a 	slli	r2,r5,8
    1a18:	020003c4 	movi	r8,15
    1a1c:	200f883a 	mov	r7,r4
    1a20:	2884b03a 	or	r2,r5,r2
    1a24:	1006943a 	slli	r3,r2,16
    1a28:	10c6b03a 	or	r3,r2,r3
    1a2c:	41800a2e 	bgeu	r8,r6,1a58 <memset+0x7c>
    1a30:	4005883a 	mov	r2,r8
    1a34:	31bffc04 	addi	r6,r6,-16
    1a38:	38c00015 	stw	r3,0(r7)
    1a3c:	38c00115 	stw	r3,4(r7)
    1a40:	38c00215 	stw	r3,8(r7)
    1a44:	38c00315 	stw	r3,12(r7)
    1a48:	39c00404 	addi	r7,r7,16
    1a4c:	11bff936 	bltu	r2,r6,1a34 <memset+0x58>
    1a50:	008000c4 	movi	r2,3
    1a54:	1180052e 	bgeu	r2,r6,1a6c <memset+0x90>
    1a58:	31bfff04 	addi	r6,r6,-4
    1a5c:	008000c4 	movi	r2,3
    1a60:	38c00015 	stw	r3,0(r7)
    1a64:	39c00104 	addi	r7,r7,4
    1a68:	11bffb36 	bltu	r2,r6,1a58 <memset+0x7c>
    1a6c:	3807883a 	mov	r3,r7
    1a70:	003fe006 	br	19f4 <memset+0x18>

00001a74 <printf>:
    1a74:	defffb04 	addi	sp,sp,-20
    1a78:	dfc00115 	stw	ra,4(sp)
    1a7c:	d9400215 	stw	r5,8(sp)
    1a80:	d9800315 	stw	r6,12(sp)
    1a84:	d9c00415 	stw	r7,16(sp)
    1a88:	00800074 	movhi	r2,1
    1a8c:	10907804 	addi	r2,r2,16864
    1a90:	10c00017 	ldw	r3,0(r2)
    1a94:	200b883a 	mov	r5,r4
    1a98:	d8800204 	addi	r2,sp,8
    1a9c:	19000217 	ldw	r4,8(r3)
    1aa0:	100d883a 	mov	r6,r2
    1aa4:	d8800015 	stw	r2,0(sp)
    1aa8:	0003a140 	call	3a14 <__vfprintf_internal>
    1aac:	dfc00117 	ldw	ra,4(sp)
    1ab0:	dec00504 	addi	sp,sp,20
    1ab4:	f800283a 	ret

00001ab8 <_printf_r>:
    1ab8:	defffc04 	addi	sp,sp,-16
    1abc:	dfc00115 	stw	ra,4(sp)
    1ac0:	d9800215 	stw	r6,8(sp)
    1ac4:	d9c00315 	stw	r7,12(sp)
    1ac8:	280d883a 	mov	r6,r5
    1acc:	21400217 	ldw	r5,8(r4)
    1ad0:	d8c00204 	addi	r3,sp,8
    1ad4:	180f883a 	mov	r7,r3
    1ad8:	d8c00015 	stw	r3,0(sp)
    1adc:	0001b680 	call	1b68 <___vfprintf_internal_r>
    1ae0:	dfc00117 	ldw	ra,4(sp)
    1ae4:	dec00404 	addi	sp,sp,16
    1ae8:	f800283a 	ret

00001aec <putchar>:
    1aec:	00800074 	movhi	r2,1
    1af0:	10907804 	addi	r2,r2,16864
    1af4:	11800017 	ldw	r6,0(r2)
    1af8:	200b883a 	mov	r5,r4
    1afc:	3009883a 	mov	r4,r6
    1b00:	31800217 	ldw	r6,8(r6)
    1b04:	0007ee01 	jmpi	7ee0 <_putc_r>

00001b08 <_putchar_r>:
    1b08:	21800217 	ldw	r6,8(r4)
    1b0c:	0007ee01 	jmpi	7ee0 <_putc_r>

00001b10 <__sprint_r>:
    1b10:	30800217 	ldw	r2,8(r6)
    1b14:	defffe04 	addi	sp,sp,-8
    1b18:	dc000015 	stw	r16,0(sp)
    1b1c:	dfc00115 	stw	ra,4(sp)
    1b20:	3021883a 	mov	r16,r6
    1b24:	0007883a 	mov	r3,zero
    1b28:	1000061e 	bne	r2,zero,1b44 <__sprint_r+0x34>
    1b2c:	1805883a 	mov	r2,r3
    1b30:	30000115 	stw	zero,4(r6)
    1b34:	dfc00117 	ldw	ra,4(sp)
    1b38:	dc000017 	ldw	r16,0(sp)
    1b3c:	dec00204 	addi	sp,sp,8
    1b40:	f800283a 	ret
    1b44:	0005c700 	call	5c70 <__sfvwrite_r>
    1b48:	1007883a 	mov	r3,r2
    1b4c:	1805883a 	mov	r2,r3
    1b50:	80000115 	stw	zero,4(r16)
    1b54:	80000215 	stw	zero,8(r16)
    1b58:	dfc00117 	ldw	ra,4(sp)
    1b5c:	dc000017 	ldw	r16,0(sp)
    1b60:	dec00204 	addi	sp,sp,8
    1b64:	f800283a 	ret

00001b68 <___vfprintf_internal_r>:
    1b68:	defea404 	addi	sp,sp,-1392
    1b6c:	dd815815 	stw	r22,1376(sp)
    1b70:	dc015215 	stw	r16,1352(sp)
    1b74:	d9c15115 	stw	r7,1348(sp)
    1b78:	dfc15b15 	stw	ra,1388(sp)
    1b7c:	df015a15 	stw	fp,1384(sp)
    1b80:	ddc15915 	stw	r23,1380(sp)
    1b84:	dd415715 	stw	r21,1372(sp)
    1b88:	dd015615 	stw	r20,1368(sp)
    1b8c:	dcc15515 	stw	r19,1364(sp)
    1b90:	dc815415 	stw	r18,1360(sp)
    1b94:	dc415315 	stw	r17,1356(sp)
    1b98:	282d883a 	mov	r22,r5
    1b9c:	3021883a 	mov	r16,r6
    1ba0:	d9014f15 	stw	r4,1340(sp)
    1ba4:	00062940 	call	6294 <_localeconv_r>
    1ba8:	10800017 	ldw	r2,0(r2)
    1bac:	d9c15117 	ldw	r7,1348(sp)
    1bb0:	d8814915 	stw	r2,1316(sp)
    1bb4:	d8814f17 	ldw	r2,1340(sp)
    1bb8:	10000226 	beq	r2,zero,1bc4 <___vfprintf_internal_r+0x5c>
    1bbc:	10800e17 	ldw	r2,56(r2)
    1bc0:	10020d26 	beq	r2,zero,23f8 <___vfprintf_internal_r+0x890>
    1bc4:	b080030b 	ldhu	r2,12(r22)
    1bc8:	1080020c 	andi	r2,r2,8
    1bcc:	10020e26 	beq	r2,zero,2408 <___vfprintf_internal_r+0x8a0>
    1bd0:	b0800417 	ldw	r2,16(r22)
    1bd4:	10020c26 	beq	r2,zero,2408 <___vfprintf_internal_r+0x8a0>
    1bd8:	b200030b 	ldhu	r8,12(r22)
    1bdc:	00800284 	movi	r2,10
    1be0:	40c0068c 	andi	r3,r8,26
    1be4:	18802f1e 	bne	r3,r2,1ca4 <___vfprintf_internal_r+0x13c>
    1be8:	b080038f 	ldh	r2,14(r22)
    1bec:	10002d16 	blt	r2,zero,1ca4 <___vfprintf_internal_r+0x13c>
    1bf0:	b240038b 	ldhu	r9,14(r22)
    1bf4:	b2800717 	ldw	r10,28(r22)
    1bf8:	b2c00917 	ldw	r11,36(r22)
    1bfc:	d9014f17 	ldw	r4,1340(sp)
    1c00:	dc402904 	addi	r17,sp,164
    1c04:	d8804004 	addi	r2,sp,256
    1c08:	00c10004 	movi	r3,1024
    1c0c:	423fff4c 	andi	r8,r8,65533
    1c10:	800d883a 	mov	r6,r16
    1c14:	880b883a 	mov	r5,r17
    1c18:	da002c0d 	sth	r8,176(sp)
    1c1c:	da402c8d 	sth	r9,178(sp)
    1c20:	da803015 	stw	r10,192(sp)
    1c24:	dac03215 	stw	r11,200(sp)
    1c28:	d8802d15 	stw	r2,180(sp)
    1c2c:	d8c02e15 	stw	r3,184(sp)
    1c30:	d8802915 	stw	r2,164(sp)
    1c34:	d8c02b15 	stw	r3,172(sp)
    1c38:	d8002f15 	stw	zero,188(sp)
    1c3c:	0001b680 	call	1b68 <___vfprintf_internal_r>
    1c40:	d8814b15 	stw	r2,1324(sp)
    1c44:	10000416 	blt	r2,zero,1c58 <___vfprintf_internal_r+0xf0>
    1c48:	d9014f17 	ldw	r4,1340(sp)
    1c4c:	880b883a 	mov	r5,r17
    1c50:	00053400 	call	5340 <_fflush_r>
    1c54:	1002321e 	bne	r2,zero,2520 <___vfprintf_internal_r+0x9b8>
    1c58:	d8802c0b 	ldhu	r2,176(sp)
    1c5c:	1080100c 	andi	r2,r2,64
    1c60:	10000326 	beq	r2,zero,1c70 <___vfprintf_internal_r+0x108>
    1c64:	b080030b 	ldhu	r2,12(r22)
    1c68:	10801014 	ori	r2,r2,64
    1c6c:	b080030d 	sth	r2,12(r22)
    1c70:	d8814b17 	ldw	r2,1324(sp)
    1c74:	dfc15b17 	ldw	ra,1388(sp)
    1c78:	df015a17 	ldw	fp,1384(sp)
    1c7c:	ddc15917 	ldw	r23,1380(sp)
    1c80:	dd815817 	ldw	r22,1376(sp)
    1c84:	dd415717 	ldw	r21,1372(sp)
    1c88:	dd015617 	ldw	r20,1368(sp)
    1c8c:	dcc15517 	ldw	r19,1364(sp)
    1c90:	dc815417 	ldw	r18,1360(sp)
    1c94:	dc415317 	ldw	r17,1356(sp)
    1c98:	dc015217 	ldw	r16,1352(sp)
    1c9c:	dec15c04 	addi	sp,sp,1392
    1ca0:	f800283a 	ret
    1ca4:	0005883a 	mov	r2,zero
    1ca8:	0007883a 	mov	r3,zero
    1cac:	dd401904 	addi	r21,sp,100
    1cb0:	d8814215 	stw	r2,1288(sp)
    1cb4:	802f883a 	mov	r23,r16
    1cb8:	d8c14315 	stw	r3,1292(sp)
    1cbc:	d8014b15 	stw	zero,1324(sp)
    1cc0:	d8014815 	stw	zero,1312(sp)
    1cc4:	d8014415 	stw	zero,1296(sp)
    1cc8:	d8014715 	stw	zero,1308(sp)
    1ccc:	dd400c15 	stw	r21,48(sp)
    1cd0:	d8000e15 	stw	zero,56(sp)
    1cd4:	d8000d15 	stw	zero,52(sp)
    1cd8:	b8800007 	ldb	r2,0(r23)
    1cdc:	10001926 	beq	r2,zero,1d44 <___vfprintf_internal_r+0x1dc>
    1ce0:	00c00944 	movi	r3,37
    1ce4:	10c01726 	beq	r2,r3,1d44 <___vfprintf_internal_r+0x1dc>
    1ce8:	b821883a 	mov	r16,r23
    1cec:	00000106 	br	1cf4 <___vfprintf_internal_r+0x18c>
    1cf0:	10c00326 	beq	r2,r3,1d00 <___vfprintf_internal_r+0x198>
    1cf4:	84000044 	addi	r16,r16,1
    1cf8:	80800007 	ldb	r2,0(r16)
    1cfc:	103ffc1e 	bne	r2,zero,1cf0 <___vfprintf_internal_r+0x188>
    1d00:	85e7c83a 	sub	r19,r16,r23
    1d04:	98000e26 	beq	r19,zero,1d40 <___vfprintf_internal_r+0x1d8>
    1d08:	dc800e17 	ldw	r18,56(sp)
    1d0c:	dc400d17 	ldw	r17,52(sp)
    1d10:	008001c4 	movi	r2,7
    1d14:	94e5883a 	add	r18,r18,r19
    1d18:	8c400044 	addi	r17,r17,1
    1d1c:	adc00015 	stw	r23,0(r21)
    1d20:	dc800e15 	stw	r18,56(sp)
    1d24:	acc00115 	stw	r19,4(r21)
    1d28:	dc400d15 	stw	r17,52(sp)
    1d2c:	14428b16 	blt	r2,r17,275c <___vfprintf_internal_r+0xbf4>
    1d30:	ad400204 	addi	r21,r21,8
    1d34:	d9014b17 	ldw	r4,1324(sp)
    1d38:	24c9883a 	add	r4,r4,r19
    1d3c:	d9014b15 	stw	r4,1324(sp)
    1d40:	802f883a 	mov	r23,r16
    1d44:	b8800007 	ldb	r2,0(r23)
    1d48:	10013c26 	beq	r2,zero,223c <___vfprintf_internal_r+0x6d4>
    1d4c:	bdc00044 	addi	r23,r23,1
    1d50:	d8000405 	stb	zero,16(sp)
    1d54:	b8c00007 	ldb	r3,0(r23)
    1d58:	04ffffc4 	movi	r19,-1
    1d5c:	d8014c15 	stw	zero,1328(sp)
    1d60:	d8014a15 	stw	zero,1320(sp)
    1d64:	d8c14d15 	stw	r3,1332(sp)
    1d68:	bdc00044 	addi	r23,r23,1
    1d6c:	d9414d17 	ldw	r5,1332(sp)
    1d70:	00801604 	movi	r2,88
    1d74:	28fff804 	addi	r3,r5,-32
    1d78:	10c06036 	bltu	r2,r3,1efc <___vfprintf_internal_r+0x394>
    1d7c:	18c5883a 	add	r2,r3,r3
    1d80:	1085883a 	add	r2,r2,r2
    1d84:	00c00034 	movhi	r3,0
    1d88:	18c76604 	addi	r3,r3,7576
    1d8c:	10c5883a 	add	r2,r2,r3
    1d90:	11000017 	ldw	r4,0(r2)
    1d94:	2000683a 	jmp	r4
    1d98:	00002d0c 	andi	zero,zero,180
    1d9c:	00001efc 	xorhi	zero,zero,123
    1da0:	00001efc 	xorhi	zero,zero,123
    1da4:	00002cf8 	rdprs	zero,zero,179
    1da8:	00001efc 	xorhi	zero,zero,123
    1dac:	00001efc 	xorhi	zero,zero,123
    1db0:	00001efc 	xorhi	zero,zero,123
    1db4:	00001efc 	xorhi	zero,zero,123
    1db8:	00001efc 	xorhi	zero,zero,123
    1dbc:	00001efc 	xorhi	zero,zero,123
    1dc0:	00002ad8 	cmpnei	zero,zero,171
    1dc4:	00002ce8 	cmpgeui	zero,zero,179
    1dc8:	00001efc 	xorhi	zero,zero,123
    1dcc:	00002af0 	cmpltui	zero,zero,171
    1dd0:	00002d84 	movi	zero,182
    1dd4:	00001efc 	xorhi	zero,zero,123
    1dd8:	00002d70 	cmpltui	zero,zero,181
    1ddc:	00002d38 	rdprs	zero,zero,180
    1de0:	00002d38 	rdprs	zero,zero,180
    1de4:	00002d38 	rdprs	zero,zero,180
    1de8:	00002d38 	rdprs	zero,zero,180
    1dec:	00002d38 	rdprs	zero,zero,180
    1df0:	00002d38 	rdprs	zero,zero,180
    1df4:	00002d38 	rdprs	zero,zero,180
    1df8:	00002d38 	rdprs	zero,zero,180
    1dfc:	00002d38 	rdprs	zero,zero,180
    1e00:	00001efc 	xorhi	zero,zero,123
    1e04:	00001efc 	xorhi	zero,zero,123
    1e08:	00001efc 	xorhi	zero,zero,123
    1e0c:	00001efc 	xorhi	zero,zero,123
    1e10:	00001efc 	xorhi	zero,zero,123
    1e14:	00001efc 	xorhi	zero,zero,123
    1e18:	00001efc 	xorhi	zero,zero,123
    1e1c:	00001efc 	xorhi	zero,zero,123
    1e20:	00001efc 	xorhi	zero,zero,123
    1e24:	00001efc 	xorhi	zero,zero,123
    1e28:	00002554 	movui	zero,149
    1e2c:	00002bc0 	call	2bc <audio_ISR+0x4>
    1e30:	00001efc 	xorhi	zero,zero,123
    1e34:	00002bc0 	call	2bc <audio_ISR+0x4>
    1e38:	00001efc 	xorhi	zero,zero,123
    1e3c:	00001efc 	xorhi	zero,zero,123
    1e40:	00001efc 	xorhi	zero,zero,123
    1e44:	00001efc 	xorhi	zero,zero,123
    1e48:	00002d24 	muli	zero,zero,180
    1e4c:	00001efc 	xorhi	zero,zero,123
    1e50:	00001efc 	xorhi	zero,zero,123
    1e54:	00002608 	cmpgei	zero,zero,152
    1e58:	00001efc 	xorhi	zero,zero,123
    1e5c:	00001efc 	xorhi	zero,zero,123
    1e60:	00001efc 	xorhi	zero,zero,123
    1e64:	00001efc 	xorhi	zero,zero,123
    1e68:	00001efc 	xorhi	zero,zero,123
    1e6c:	00002654 	movui	zero,153
    1e70:	00001efc 	xorhi	zero,zero,123
    1e74:	00001efc 	xorhi	zero,zero,123
    1e78:	00002c74 	movhi	zero,177
    1e7c:	00001efc 	xorhi	zero,zero,123
    1e80:	00001efc 	xorhi	zero,zero,123
    1e84:	00001efc 	xorhi	zero,zero,123
    1e88:	00001efc 	xorhi	zero,zero,123
    1e8c:	00001efc 	xorhi	zero,zero,123
    1e90:	00001efc 	xorhi	zero,zero,123
    1e94:	00001efc 	xorhi	zero,zero,123
    1e98:	00001efc 	xorhi	zero,zero,123
    1e9c:	00001efc 	xorhi	zero,zero,123
    1ea0:	00001efc 	xorhi	zero,zero,123
    1ea4:	00002c48 	cmpgei	zero,zero,177
    1ea8:	00002560 	cmpeqi	zero,zero,149
    1eac:	00002bc0 	call	2bc <audio_ISR+0x4>
    1eb0:	00002bc0 	call	2bc <audio_ISR+0x4>
    1eb4:	00002bc0 	call	2bc <audio_ISR+0x4>
    1eb8:	00002bac 	andhi	zero,zero,174
    1ebc:	00002560 	cmpeqi	zero,zero,149
    1ec0:	00001efc 	xorhi	zero,zero,123
    1ec4:	00001efc 	xorhi	zero,zero,123
    1ec8:	00002b34 	movhi	zero,172
    1ecc:	00001efc 	xorhi	zero,zero,123
    1ed0:	00002b04 	movi	zero,172
    1ed4:	00002614 	movui	zero,152
    1ed8:	00002b64 	muli	zero,zero,173
    1edc:	00002b50 	cmplti	zero,zero,173
    1ee0:	00001efc 	xorhi	zero,zero,123
    1ee4:	00002de0 	cmpeqi	zero,zero,183
    1ee8:	00001efc 	xorhi	zero,zero,123
    1eec:	00002660 	cmpeqi	zero,zero,153
    1ef0:	00001efc 	xorhi	zero,zero,123
    1ef4:	00001efc 	xorhi	zero,zero,123
    1ef8:	00002cd8 	cmpnei	zero,zero,179
    1efc:	d9014d17 	ldw	r4,1332(sp)
    1f00:	2000ce26 	beq	r4,zero,223c <___vfprintf_internal_r+0x6d4>
    1f04:	01400044 	movi	r5,1
    1f08:	d9800f04 	addi	r6,sp,60
    1f0c:	d9c14015 	stw	r7,1280(sp)
    1f10:	d9414515 	stw	r5,1300(sp)
    1f14:	d9814115 	stw	r6,1284(sp)
    1f18:	280f883a 	mov	r7,r5
    1f1c:	d9000f05 	stb	r4,60(sp)
    1f20:	d8000405 	stb	zero,16(sp)
    1f24:	d8014615 	stw	zero,1304(sp)
    1f28:	d8c14c17 	ldw	r3,1328(sp)
    1f2c:	1880008c 	andi	r2,r3,2
    1f30:	1005003a 	cmpeq	r2,r2,zero
    1f34:	d8815015 	stw	r2,1344(sp)
    1f38:	1000031e 	bne	r2,zero,1f48 <___vfprintf_internal_r+0x3e0>
    1f3c:	d9014517 	ldw	r4,1300(sp)
    1f40:	21000084 	addi	r4,r4,2
    1f44:	d9014515 	stw	r4,1300(sp)
    1f48:	d9414c17 	ldw	r5,1328(sp)
    1f4c:	2940210c 	andi	r5,r5,132
    1f50:	d9414e15 	stw	r5,1336(sp)
    1f54:	28002d1e 	bne	r5,zero,200c <___vfprintf_internal_r+0x4a4>
    1f58:	d9814a17 	ldw	r6,1320(sp)
    1f5c:	d8814517 	ldw	r2,1300(sp)
    1f60:	30a1c83a 	sub	r16,r6,r2
    1f64:	0400290e 	bge	zero,r16,200c <___vfprintf_internal_r+0x4a4>
    1f68:	00800404 	movi	r2,16
    1f6c:	1404580e 	bge	r2,r16,30d0 <___vfprintf_internal_r+0x1568>
    1f70:	dc800e17 	ldw	r18,56(sp)
    1f74:	dc400d17 	ldw	r17,52(sp)
    1f78:	1027883a 	mov	r19,r2
    1f7c:	07000074 	movhi	fp,1
    1f80:	e7082f84 	addi	fp,fp,8382
    1f84:	050001c4 	movi	r20,7
    1f88:	00000306 	br	1f98 <___vfprintf_internal_r+0x430>
    1f8c:	843ffc04 	addi	r16,r16,-16
    1f90:	ad400204 	addi	r21,r21,8
    1f94:	9c00130e 	bge	r19,r16,1fe4 <___vfprintf_internal_r+0x47c>
    1f98:	94800404 	addi	r18,r18,16
    1f9c:	8c400044 	addi	r17,r17,1
    1fa0:	af000015 	stw	fp,0(r21)
    1fa4:	acc00115 	stw	r19,4(r21)
    1fa8:	dc800e15 	stw	r18,56(sp)
    1fac:	dc400d15 	stw	r17,52(sp)
    1fb0:	a47ff60e 	bge	r20,r17,1f8c <___vfprintf_internal_r+0x424>
    1fb4:	d9014f17 	ldw	r4,1340(sp)
    1fb8:	b00b883a 	mov	r5,r22
    1fbc:	d9800c04 	addi	r6,sp,48
    1fc0:	d9c15115 	stw	r7,1348(sp)
    1fc4:	0001b100 	call	1b10 <__sprint_r>
    1fc8:	d9c15117 	ldw	r7,1348(sp)
    1fcc:	10009e1e 	bne	r2,zero,2248 <___vfprintf_internal_r+0x6e0>
    1fd0:	843ffc04 	addi	r16,r16,-16
    1fd4:	dc800e17 	ldw	r18,56(sp)
    1fd8:	dc400d17 	ldw	r17,52(sp)
    1fdc:	dd401904 	addi	r21,sp,100
    1fe0:	9c3fed16 	blt	r19,r16,1f98 <___vfprintf_internal_r+0x430>
    1fe4:	9425883a 	add	r18,r18,r16
    1fe8:	8c400044 	addi	r17,r17,1
    1fec:	008001c4 	movi	r2,7
    1ff0:	af000015 	stw	fp,0(r21)
    1ff4:	ac000115 	stw	r16,4(r21)
    1ff8:	dc800e15 	stw	r18,56(sp)
    1ffc:	dc400d15 	stw	r17,52(sp)
    2000:	1441f516 	blt	r2,r17,27d8 <___vfprintf_internal_r+0xc70>
    2004:	ad400204 	addi	r21,r21,8
    2008:	00000206 	br	2014 <___vfprintf_internal_r+0x4ac>
    200c:	dc800e17 	ldw	r18,56(sp)
    2010:	dc400d17 	ldw	r17,52(sp)
    2014:	d8800407 	ldb	r2,16(sp)
    2018:	10000b26 	beq	r2,zero,2048 <___vfprintf_internal_r+0x4e0>
    201c:	00800044 	movi	r2,1
    2020:	94800044 	addi	r18,r18,1
    2024:	8c400044 	addi	r17,r17,1
    2028:	a8800115 	stw	r2,4(r21)
    202c:	d8c00404 	addi	r3,sp,16
    2030:	008001c4 	movi	r2,7
    2034:	a8c00015 	stw	r3,0(r21)
    2038:	dc800e15 	stw	r18,56(sp)
    203c:	dc400d15 	stw	r17,52(sp)
    2040:	1441da16 	blt	r2,r17,27ac <___vfprintf_internal_r+0xc44>
    2044:	ad400204 	addi	r21,r21,8
    2048:	d9015017 	ldw	r4,1344(sp)
    204c:	20000b1e 	bne	r4,zero,207c <___vfprintf_internal_r+0x514>
    2050:	d8800444 	addi	r2,sp,17
    2054:	94800084 	addi	r18,r18,2
    2058:	8c400044 	addi	r17,r17,1
    205c:	a8800015 	stw	r2,0(r21)
    2060:	00c00084 	movi	r3,2
    2064:	008001c4 	movi	r2,7
    2068:	a8c00115 	stw	r3,4(r21)
    206c:	dc800e15 	stw	r18,56(sp)
    2070:	dc400d15 	stw	r17,52(sp)
    2074:	1441c216 	blt	r2,r17,2780 <___vfprintf_internal_r+0xc18>
    2078:	ad400204 	addi	r21,r21,8
    207c:	d9414e17 	ldw	r5,1336(sp)
    2080:	00802004 	movi	r2,128
    2084:	2880b126 	beq	r5,r2,234c <___vfprintf_internal_r+0x7e4>
    2088:	d8c14617 	ldw	r3,1304(sp)
    208c:	19e1c83a 	sub	r16,r3,r7
    2090:	0400260e 	bge	zero,r16,212c <___vfprintf_internal_r+0x5c4>
    2094:	00800404 	movi	r2,16
    2098:	1403c90e 	bge	r2,r16,2fc0 <___vfprintf_internal_r+0x1458>
    209c:	1027883a 	mov	r19,r2
    20a0:	07000074 	movhi	fp,1
    20a4:	e7082b84 	addi	fp,fp,8366
    20a8:	050001c4 	movi	r20,7
    20ac:	00000306 	br	20bc <___vfprintf_internal_r+0x554>
    20b0:	843ffc04 	addi	r16,r16,-16
    20b4:	ad400204 	addi	r21,r21,8
    20b8:	9c00130e 	bge	r19,r16,2108 <___vfprintf_internal_r+0x5a0>
    20bc:	94800404 	addi	r18,r18,16
    20c0:	8c400044 	addi	r17,r17,1
    20c4:	af000015 	stw	fp,0(r21)
    20c8:	acc00115 	stw	r19,4(r21)
    20cc:	dc800e15 	stw	r18,56(sp)
    20d0:	dc400d15 	stw	r17,52(sp)
    20d4:	a47ff60e 	bge	r20,r17,20b0 <___vfprintf_internal_r+0x548>
    20d8:	d9014f17 	ldw	r4,1340(sp)
    20dc:	b00b883a 	mov	r5,r22
    20e0:	d9800c04 	addi	r6,sp,48
    20e4:	d9c15115 	stw	r7,1348(sp)
    20e8:	0001b100 	call	1b10 <__sprint_r>
    20ec:	d9c15117 	ldw	r7,1348(sp)
    20f0:	1000551e 	bne	r2,zero,2248 <___vfprintf_internal_r+0x6e0>
    20f4:	843ffc04 	addi	r16,r16,-16
    20f8:	dc800e17 	ldw	r18,56(sp)
    20fc:	dc400d17 	ldw	r17,52(sp)
    2100:	dd401904 	addi	r21,sp,100
    2104:	9c3fed16 	blt	r19,r16,20bc <___vfprintf_internal_r+0x554>
    2108:	9425883a 	add	r18,r18,r16
    210c:	8c400044 	addi	r17,r17,1
    2110:	008001c4 	movi	r2,7
    2114:	af000015 	stw	fp,0(r21)
    2118:	ac000115 	stw	r16,4(r21)
    211c:	dc800e15 	stw	r18,56(sp)
    2120:	dc400d15 	stw	r17,52(sp)
    2124:	14418216 	blt	r2,r17,2730 <___vfprintf_internal_r+0xbc8>
    2128:	ad400204 	addi	r21,r21,8
    212c:	d9014c17 	ldw	r4,1328(sp)
    2130:	2080400c 	andi	r2,r4,256
    2134:	10004a1e 	bne	r2,zero,2260 <___vfprintf_internal_r+0x6f8>
    2138:	d9414117 	ldw	r5,1284(sp)
    213c:	91e5883a 	add	r18,r18,r7
    2140:	8c400044 	addi	r17,r17,1
    2144:	008001c4 	movi	r2,7
    2148:	a9400015 	stw	r5,0(r21)
    214c:	a9c00115 	stw	r7,4(r21)
    2150:	dc800e15 	stw	r18,56(sp)
    2154:	dc400d15 	stw	r17,52(sp)
    2158:	14416716 	blt	r2,r17,26f8 <___vfprintf_internal_r+0xb90>
    215c:	a8c00204 	addi	r3,r21,8
    2160:	d9814c17 	ldw	r6,1328(sp)
    2164:	3080010c 	andi	r2,r6,4
    2168:	10002826 	beq	r2,zero,220c <___vfprintf_internal_r+0x6a4>
    216c:	d8814a17 	ldw	r2,1320(sp)
    2170:	d9014517 	ldw	r4,1300(sp)
    2174:	1121c83a 	sub	r16,r2,r4
    2178:	0400240e 	bge	zero,r16,220c <___vfprintf_internal_r+0x6a4>
    217c:	00800404 	movi	r2,16
    2180:	14044f0e 	bge	r2,r16,32c0 <___vfprintf_internal_r+0x1758>
    2184:	dc400d17 	ldw	r17,52(sp)
    2188:	1027883a 	mov	r19,r2
    218c:	07000074 	movhi	fp,1
    2190:	e7082f84 	addi	fp,fp,8382
    2194:	050001c4 	movi	r20,7
    2198:	00000306 	br	21a8 <___vfprintf_internal_r+0x640>
    219c:	843ffc04 	addi	r16,r16,-16
    21a0:	18c00204 	addi	r3,r3,8
    21a4:	9c00110e 	bge	r19,r16,21ec <___vfprintf_internal_r+0x684>
    21a8:	94800404 	addi	r18,r18,16
    21ac:	8c400044 	addi	r17,r17,1
    21b0:	1f000015 	stw	fp,0(r3)
    21b4:	1cc00115 	stw	r19,4(r3)
    21b8:	dc800e15 	stw	r18,56(sp)
    21bc:	dc400d15 	stw	r17,52(sp)
    21c0:	a47ff60e 	bge	r20,r17,219c <___vfprintf_internal_r+0x634>
    21c4:	d9014f17 	ldw	r4,1340(sp)
    21c8:	b00b883a 	mov	r5,r22
    21cc:	d9800c04 	addi	r6,sp,48
    21d0:	0001b100 	call	1b10 <__sprint_r>
    21d4:	10001c1e 	bne	r2,zero,2248 <___vfprintf_internal_r+0x6e0>
    21d8:	843ffc04 	addi	r16,r16,-16
    21dc:	dc800e17 	ldw	r18,56(sp)
    21e0:	dc400d17 	ldw	r17,52(sp)
    21e4:	d8c01904 	addi	r3,sp,100
    21e8:	9c3fef16 	blt	r19,r16,21a8 <___vfprintf_internal_r+0x640>
    21ec:	9425883a 	add	r18,r18,r16
    21f0:	8c400044 	addi	r17,r17,1
    21f4:	008001c4 	movi	r2,7
    21f8:	1f000015 	stw	fp,0(r3)
    21fc:	1c000115 	stw	r16,4(r3)
    2200:	dc800e15 	stw	r18,56(sp)
    2204:	dc400d15 	stw	r17,52(sp)
    2208:	1440cb16 	blt	r2,r17,2538 <___vfprintf_internal_r+0x9d0>
    220c:	d8814a17 	ldw	r2,1320(sp)
    2210:	d9414517 	ldw	r5,1300(sp)
    2214:	1140010e 	bge	r2,r5,221c <___vfprintf_internal_r+0x6b4>
    2218:	2805883a 	mov	r2,r5
    221c:	d9814b17 	ldw	r6,1324(sp)
    2220:	308d883a 	add	r6,r6,r2
    2224:	d9814b15 	stw	r6,1324(sp)
    2228:	90013b1e 	bne	r18,zero,2718 <___vfprintf_internal_r+0xbb0>
    222c:	d9c14017 	ldw	r7,1280(sp)
    2230:	dd401904 	addi	r21,sp,100
    2234:	d8000d15 	stw	zero,52(sp)
    2238:	003ea706 	br	1cd8 <___vfprintf_internal_r+0x170>
    223c:	d8800e17 	ldw	r2,56(sp)
    2240:	10053f1e 	bne	r2,zero,3740 <___vfprintf_internal_r+0x1bd8>
    2244:	d8000d15 	stw	zero,52(sp)
    2248:	b080030b 	ldhu	r2,12(r22)
    224c:	1080100c 	andi	r2,r2,64
    2250:	103e8726 	beq	r2,zero,1c70 <___vfprintf_internal_r+0x108>
    2254:	00bfffc4 	movi	r2,-1
    2258:	d8814b15 	stw	r2,1324(sp)
    225c:	003e8406 	br	1c70 <___vfprintf_internal_r+0x108>
    2260:	d9814d17 	ldw	r6,1332(sp)
    2264:	00801944 	movi	r2,101
    2268:	11806e16 	blt	r2,r6,2424 <___vfprintf_internal_r+0x8bc>
    226c:	d9414717 	ldw	r5,1308(sp)
    2270:	00c00044 	movi	r3,1
    2274:	1943430e 	bge	r3,r5,2f84 <___vfprintf_internal_r+0x141c>
    2278:	d8814117 	ldw	r2,1284(sp)
    227c:	94800044 	addi	r18,r18,1
    2280:	8c400044 	addi	r17,r17,1
    2284:	a8800015 	stw	r2,0(r21)
    2288:	008001c4 	movi	r2,7
    228c:	a8c00115 	stw	r3,4(r21)
    2290:	dc800e15 	stw	r18,56(sp)
    2294:	dc400d15 	stw	r17,52(sp)
    2298:	1441ca16 	blt	r2,r17,29c4 <___vfprintf_internal_r+0xe5c>
    229c:	a8c00204 	addi	r3,r21,8
    22a0:	d9014917 	ldw	r4,1316(sp)
    22a4:	00800044 	movi	r2,1
    22a8:	94800044 	addi	r18,r18,1
    22ac:	8c400044 	addi	r17,r17,1
    22b0:	18800115 	stw	r2,4(r3)
    22b4:	008001c4 	movi	r2,7
    22b8:	19000015 	stw	r4,0(r3)
    22bc:	dc800e15 	stw	r18,56(sp)
    22c0:	dc400d15 	stw	r17,52(sp)
    22c4:	1441b616 	blt	r2,r17,29a0 <___vfprintf_internal_r+0xe38>
    22c8:	1cc00204 	addi	r19,r3,8
    22cc:	d9014217 	ldw	r4,1288(sp)
    22d0:	d9414317 	ldw	r5,1292(sp)
    22d4:	000d883a 	mov	r6,zero
    22d8:	000f883a 	mov	r7,zero
    22dc:	000a62c0 	call	a62c <__nedf2>
    22e0:	10017426 	beq	r2,zero,28b4 <___vfprintf_internal_r+0xd4c>
    22e4:	d9414717 	ldw	r5,1308(sp)
    22e8:	d9814117 	ldw	r6,1284(sp)
    22ec:	8c400044 	addi	r17,r17,1
    22f0:	2c85883a 	add	r2,r5,r18
    22f4:	14bfffc4 	addi	r18,r2,-1
    22f8:	28bfffc4 	addi	r2,r5,-1
    22fc:	30c00044 	addi	r3,r6,1
    2300:	98800115 	stw	r2,4(r19)
    2304:	008001c4 	movi	r2,7
    2308:	98c00015 	stw	r3,0(r19)
    230c:	dc800e15 	stw	r18,56(sp)
    2310:	dc400d15 	stw	r17,52(sp)
    2314:	14418e16 	blt	r2,r17,2950 <___vfprintf_internal_r+0xde8>
    2318:	9cc00204 	addi	r19,r19,8
    231c:	d9414817 	ldw	r5,1312(sp)
    2320:	d8800804 	addi	r2,sp,32
    2324:	8c400044 	addi	r17,r17,1
    2328:	9165883a 	add	r18,r18,r5
    232c:	98800015 	stw	r2,0(r19)
    2330:	008001c4 	movi	r2,7
    2334:	99400115 	stw	r5,4(r19)
    2338:	dc800e15 	stw	r18,56(sp)
    233c:	dc400d15 	stw	r17,52(sp)
    2340:	1440ed16 	blt	r2,r17,26f8 <___vfprintf_internal_r+0xb90>
    2344:	98c00204 	addi	r3,r19,8
    2348:	003f8506 	br	2160 <___vfprintf_internal_r+0x5f8>
    234c:	d9814a17 	ldw	r6,1320(sp)
    2350:	d8814517 	ldw	r2,1300(sp)
    2354:	30a1c83a 	sub	r16,r6,r2
    2358:	043f4b0e 	bge	zero,r16,2088 <___vfprintf_internal_r+0x520>
    235c:	00800404 	movi	r2,16
    2360:	1404340e 	bge	r2,r16,3434 <___vfprintf_internal_r+0x18cc>
    2364:	1027883a 	mov	r19,r2
    2368:	07000074 	movhi	fp,1
    236c:	e7082b84 	addi	fp,fp,8366
    2370:	050001c4 	movi	r20,7
    2374:	00000306 	br	2384 <___vfprintf_internal_r+0x81c>
    2378:	843ffc04 	addi	r16,r16,-16
    237c:	ad400204 	addi	r21,r21,8
    2380:	9c00130e 	bge	r19,r16,23d0 <___vfprintf_internal_r+0x868>
    2384:	94800404 	addi	r18,r18,16
    2388:	8c400044 	addi	r17,r17,1
    238c:	af000015 	stw	fp,0(r21)
    2390:	acc00115 	stw	r19,4(r21)
    2394:	dc800e15 	stw	r18,56(sp)
    2398:	dc400d15 	stw	r17,52(sp)
    239c:	a47ff60e 	bge	r20,r17,2378 <___vfprintf_internal_r+0x810>
    23a0:	d9014f17 	ldw	r4,1340(sp)
    23a4:	b00b883a 	mov	r5,r22
    23a8:	d9800c04 	addi	r6,sp,48
    23ac:	d9c15115 	stw	r7,1348(sp)
    23b0:	0001b100 	call	1b10 <__sprint_r>
    23b4:	d9c15117 	ldw	r7,1348(sp)
    23b8:	103fa31e 	bne	r2,zero,2248 <___vfprintf_internal_r+0x6e0>
    23bc:	843ffc04 	addi	r16,r16,-16
    23c0:	dc800e17 	ldw	r18,56(sp)
    23c4:	dc400d17 	ldw	r17,52(sp)
    23c8:	dd401904 	addi	r21,sp,100
    23cc:	9c3fed16 	blt	r19,r16,2384 <___vfprintf_internal_r+0x81c>
    23d0:	9425883a 	add	r18,r18,r16
    23d4:	8c400044 	addi	r17,r17,1
    23d8:	008001c4 	movi	r2,7
    23dc:	af000015 	stw	fp,0(r21)
    23e0:	ac000115 	stw	r16,4(r21)
    23e4:	dc800e15 	stw	r18,56(sp)
    23e8:	dc400d15 	stw	r17,52(sp)
    23ec:	14416116 	blt	r2,r17,2974 <___vfprintf_internal_r+0xe0c>
    23f0:	ad400204 	addi	r21,r21,8
    23f4:	003f2406 	br	2088 <___vfprintf_internal_r+0x520>
    23f8:	d9014f17 	ldw	r4,1340(sp)
    23fc:	00055d80 	call	55d8 <__sinit>
    2400:	d9c15117 	ldw	r7,1348(sp)
    2404:	003def06 	br	1bc4 <___vfprintf_internal_r+0x5c>
    2408:	d9014f17 	ldw	r4,1340(sp)
    240c:	b00b883a 	mov	r5,r22
    2410:	d9c15115 	stw	r7,1348(sp)
    2414:	0003a380 	call	3a38 <__swsetup_r>
    2418:	d9c15117 	ldw	r7,1348(sp)
    241c:	103dee26 	beq	r2,zero,1bd8 <___vfprintf_internal_r+0x70>
    2420:	003f8c06 	br	2254 <___vfprintf_internal_r+0x6ec>
    2424:	d9014217 	ldw	r4,1288(sp)
    2428:	d9414317 	ldw	r5,1292(sp)
    242c:	000d883a 	mov	r6,zero
    2430:	000f883a 	mov	r7,zero
    2434:	000a5a40 	call	a5a4 <__eqdf2>
    2438:	1000f21e 	bne	r2,zero,2804 <___vfprintf_internal_r+0xc9c>
    243c:	00800074 	movhi	r2,1
    2440:	10882b04 	addi	r2,r2,8364
    2444:	94800044 	addi	r18,r18,1
    2448:	8c400044 	addi	r17,r17,1
    244c:	a8800015 	stw	r2,0(r21)
    2450:	00c00044 	movi	r3,1
    2454:	008001c4 	movi	r2,7
    2458:	a8c00115 	stw	r3,4(r21)
    245c:	dc800e15 	stw	r18,56(sp)
    2460:	dc400d15 	stw	r17,52(sp)
    2464:	1442fa16 	blt	r2,r17,3050 <___vfprintf_internal_r+0x14e8>
    2468:	a8c00204 	addi	r3,r21,8
    246c:	d8800517 	ldw	r2,20(sp)
    2470:	d9014717 	ldw	r4,1308(sp)
    2474:	11015c0e 	bge	r2,r4,29e8 <___vfprintf_internal_r+0xe80>
    2478:	dc400d17 	ldw	r17,52(sp)
    247c:	d9814917 	ldw	r6,1316(sp)
    2480:	00800044 	movi	r2,1
    2484:	94800044 	addi	r18,r18,1
    2488:	8c400044 	addi	r17,r17,1
    248c:	18800115 	stw	r2,4(r3)
    2490:	008001c4 	movi	r2,7
    2494:	19800015 	stw	r6,0(r3)
    2498:	dc800e15 	stw	r18,56(sp)
    249c:	dc400d15 	stw	r17,52(sp)
    24a0:	14431016 	blt	r2,r17,30e4 <___vfprintf_internal_r+0x157c>
    24a4:	18c00204 	addi	r3,r3,8
    24a8:	d8814717 	ldw	r2,1308(sp)
    24ac:	143fffc4 	addi	r16,r2,-1
    24b0:	043f2b0e 	bge	zero,r16,2160 <___vfprintf_internal_r+0x5f8>
    24b4:	00800404 	movi	r2,16
    24b8:	1402a20e 	bge	r2,r16,2f44 <___vfprintf_internal_r+0x13dc>
    24bc:	dc400d17 	ldw	r17,52(sp)
    24c0:	1027883a 	mov	r19,r2
    24c4:	07000074 	movhi	fp,1
    24c8:	e7082b84 	addi	fp,fp,8366
    24cc:	050001c4 	movi	r20,7
    24d0:	00000306 	br	24e0 <___vfprintf_internal_r+0x978>
    24d4:	18c00204 	addi	r3,r3,8
    24d8:	843ffc04 	addi	r16,r16,-16
    24dc:	9c029c0e 	bge	r19,r16,2f50 <___vfprintf_internal_r+0x13e8>
    24e0:	94800404 	addi	r18,r18,16
    24e4:	8c400044 	addi	r17,r17,1
    24e8:	1f000015 	stw	fp,0(r3)
    24ec:	1cc00115 	stw	r19,4(r3)
    24f0:	dc800e15 	stw	r18,56(sp)
    24f4:	dc400d15 	stw	r17,52(sp)
    24f8:	a47ff60e 	bge	r20,r17,24d4 <___vfprintf_internal_r+0x96c>
    24fc:	d9014f17 	ldw	r4,1340(sp)
    2500:	b00b883a 	mov	r5,r22
    2504:	d9800c04 	addi	r6,sp,48
    2508:	0001b100 	call	1b10 <__sprint_r>
    250c:	103f4e1e 	bne	r2,zero,2248 <___vfprintf_internal_r+0x6e0>
    2510:	dc800e17 	ldw	r18,56(sp)
    2514:	dc400d17 	ldw	r17,52(sp)
    2518:	d8c01904 	addi	r3,sp,100
    251c:	003fee06 	br	24d8 <___vfprintf_internal_r+0x970>
    2520:	d8802c0b 	ldhu	r2,176(sp)
    2524:	00ffffc4 	movi	r3,-1
    2528:	d8c14b15 	stw	r3,1324(sp)
    252c:	1080100c 	andi	r2,r2,64
    2530:	103dcc1e 	bne	r2,zero,1c64 <___vfprintf_internal_r+0xfc>
    2534:	003dce06 	br	1c70 <___vfprintf_internal_r+0x108>
    2538:	d9014f17 	ldw	r4,1340(sp)
    253c:	b00b883a 	mov	r5,r22
    2540:	d9800c04 	addi	r6,sp,48
    2544:	0001b100 	call	1b10 <__sprint_r>
    2548:	103f3f1e 	bne	r2,zero,2248 <___vfprintf_internal_r+0x6e0>
    254c:	dc800e17 	ldw	r18,56(sp)
    2550:	003f2e06 	br	220c <___vfprintf_internal_r+0x6a4>
    2554:	d9414c17 	ldw	r5,1328(sp)
    2558:	29400414 	ori	r5,r5,16
    255c:	d9414c15 	stw	r5,1328(sp)
    2560:	d9814c17 	ldw	r6,1328(sp)
    2564:	3080080c 	andi	r2,r6,32
    2568:	10014f1e 	bne	r2,zero,2aa8 <___vfprintf_internal_r+0xf40>
    256c:	d8c14c17 	ldw	r3,1328(sp)
    2570:	1880040c 	andi	r2,r3,16
    2574:	1002ea1e 	bne	r2,zero,3120 <___vfprintf_internal_r+0x15b8>
    2578:	d9014c17 	ldw	r4,1328(sp)
    257c:	2080100c 	andi	r2,r4,64
    2580:	1002e726 	beq	r2,zero,3120 <___vfprintf_internal_r+0x15b8>
    2584:	3880000f 	ldh	r2,0(r7)
    2588:	39c00104 	addi	r7,r7,4
    258c:	d9c14015 	stw	r7,1280(sp)
    2590:	1023d7fa 	srai	r17,r2,31
    2594:	1021883a 	mov	r16,r2
    2598:	88037216 	blt	r17,zero,3364 <___vfprintf_internal_r+0x17fc>
    259c:	01000044 	movi	r4,1
    25a0:	98000416 	blt	r19,zero,25b4 <___vfprintf_internal_r+0xa4c>
    25a4:	d8c14c17 	ldw	r3,1328(sp)
    25a8:	00bfdfc4 	movi	r2,-129
    25ac:	1886703a 	and	r3,r3,r2
    25b0:	d8c14c15 	stw	r3,1328(sp)
    25b4:	8444b03a 	or	r2,r16,r17
    25b8:	1002261e 	bne	r2,zero,2e54 <___vfprintf_internal_r+0x12ec>
    25bc:	9802251e 	bne	r19,zero,2e54 <___vfprintf_internal_r+0x12ec>
    25c0:	20803fcc 	andi	r2,r4,255
    25c4:	10029b26 	beq	r2,zero,3034 <___vfprintf_internal_r+0x14cc>
    25c8:	d8c01904 	addi	r3,sp,100
    25cc:	dd000f04 	addi	r20,sp,60
    25d0:	d8c14115 	stw	r3,1284(sp)
    25d4:	d8c14117 	ldw	r3,1284(sp)
    25d8:	dcc14515 	stw	r19,1300(sp)
    25dc:	a0c5c83a 	sub	r2,r20,r3
    25e0:	11c00a04 	addi	r7,r2,40
    25e4:	99c0010e 	bge	r19,r7,25ec <___vfprintf_internal_r+0xa84>
    25e8:	d9c14515 	stw	r7,1300(sp)
    25ec:	dcc14615 	stw	r19,1304(sp)
    25f0:	d8800407 	ldb	r2,16(sp)
    25f4:	103e4c26 	beq	r2,zero,1f28 <___vfprintf_internal_r+0x3c0>
    25f8:	d8814517 	ldw	r2,1300(sp)
    25fc:	10800044 	addi	r2,r2,1
    2600:	d8814515 	stw	r2,1300(sp)
    2604:	003e4806 	br	1f28 <___vfprintf_internal_r+0x3c0>
    2608:	d9814c17 	ldw	r6,1328(sp)
    260c:	31800414 	ori	r6,r6,16
    2610:	d9814c15 	stw	r6,1328(sp)
    2614:	d8c14c17 	ldw	r3,1328(sp)
    2618:	1880080c 	andi	r2,r3,32
    261c:	1001271e 	bne	r2,zero,2abc <___vfprintf_internal_r+0xf54>
    2620:	d9414c17 	ldw	r5,1328(sp)
    2624:	2880040c 	andi	r2,r5,16
    2628:	1002b61e 	bne	r2,zero,3104 <___vfprintf_internal_r+0x159c>
    262c:	d9814c17 	ldw	r6,1328(sp)
    2630:	3080100c 	andi	r2,r6,64
    2634:	1002b326 	beq	r2,zero,3104 <___vfprintf_internal_r+0x159c>
    2638:	3c00000b 	ldhu	r16,0(r7)
    263c:	0009883a 	mov	r4,zero
    2640:	39c00104 	addi	r7,r7,4
    2644:	0023883a 	mov	r17,zero
    2648:	d9c14015 	stw	r7,1280(sp)
    264c:	d8000405 	stb	zero,16(sp)
    2650:	003fd306 	br	25a0 <___vfprintf_internal_r+0xa38>
    2654:	d9014c17 	ldw	r4,1328(sp)
    2658:	21000414 	ori	r4,r4,16
    265c:	d9014c15 	stw	r4,1328(sp)
    2660:	d9414c17 	ldw	r5,1328(sp)
    2664:	2880080c 	andi	r2,r5,32
    2668:	1001081e 	bne	r2,zero,2a8c <___vfprintf_internal_r+0xf24>
    266c:	d8c14c17 	ldw	r3,1328(sp)
    2670:	1880040c 	andi	r2,r3,16
    2674:	1002b01e 	bne	r2,zero,3138 <___vfprintf_internal_r+0x15d0>
    2678:	d9014c17 	ldw	r4,1328(sp)
    267c:	2080100c 	andi	r2,r4,64
    2680:	1002ad26 	beq	r2,zero,3138 <___vfprintf_internal_r+0x15d0>
    2684:	3c00000b 	ldhu	r16,0(r7)
    2688:	01000044 	movi	r4,1
    268c:	39c00104 	addi	r7,r7,4
    2690:	0023883a 	mov	r17,zero
    2694:	d9c14015 	stw	r7,1280(sp)
    2698:	d8000405 	stb	zero,16(sp)
    269c:	003fc006 	br	25a0 <___vfprintf_internal_r+0xa38>
    26a0:	d9014f17 	ldw	r4,1340(sp)
    26a4:	b00b883a 	mov	r5,r22
    26a8:	d9800c04 	addi	r6,sp,48
    26ac:	0001b100 	call	1b10 <__sprint_r>
    26b0:	103ee51e 	bne	r2,zero,2248 <___vfprintf_internal_r+0x6e0>
    26b4:	dc800e17 	ldw	r18,56(sp)
    26b8:	d8c01904 	addi	r3,sp,100
    26bc:	d9814c17 	ldw	r6,1328(sp)
    26c0:	3080004c 	andi	r2,r6,1
    26c4:	1005003a 	cmpeq	r2,r2,zero
    26c8:	103ea51e 	bne	r2,zero,2160 <___vfprintf_internal_r+0x5f8>
    26cc:	00800044 	movi	r2,1
    26d0:	dc400d17 	ldw	r17,52(sp)
    26d4:	18800115 	stw	r2,4(r3)
    26d8:	d8814917 	ldw	r2,1316(sp)
    26dc:	94800044 	addi	r18,r18,1
    26e0:	8c400044 	addi	r17,r17,1
    26e4:	18800015 	stw	r2,0(r3)
    26e8:	008001c4 	movi	r2,7
    26ec:	dc800e15 	stw	r18,56(sp)
    26f0:	dc400d15 	stw	r17,52(sp)
    26f4:	14421e0e 	bge	r2,r17,2f70 <___vfprintf_internal_r+0x1408>
    26f8:	d9014f17 	ldw	r4,1340(sp)
    26fc:	b00b883a 	mov	r5,r22
    2700:	d9800c04 	addi	r6,sp,48
    2704:	0001b100 	call	1b10 <__sprint_r>
    2708:	103ecf1e 	bne	r2,zero,2248 <___vfprintf_internal_r+0x6e0>
    270c:	dc800e17 	ldw	r18,56(sp)
    2710:	d8c01904 	addi	r3,sp,100
    2714:	003e9206 	br	2160 <___vfprintf_internal_r+0x5f8>
    2718:	d9014f17 	ldw	r4,1340(sp)
    271c:	b00b883a 	mov	r5,r22
    2720:	d9800c04 	addi	r6,sp,48
    2724:	0001b100 	call	1b10 <__sprint_r>
    2728:	103ec026 	beq	r2,zero,222c <___vfprintf_internal_r+0x6c4>
    272c:	003ec606 	br	2248 <___vfprintf_internal_r+0x6e0>
    2730:	d9014f17 	ldw	r4,1340(sp)
    2734:	b00b883a 	mov	r5,r22
    2738:	d9800c04 	addi	r6,sp,48
    273c:	d9c15115 	stw	r7,1348(sp)
    2740:	0001b100 	call	1b10 <__sprint_r>
    2744:	d9c15117 	ldw	r7,1348(sp)
    2748:	103ebf1e 	bne	r2,zero,2248 <___vfprintf_internal_r+0x6e0>
    274c:	dc800e17 	ldw	r18,56(sp)
    2750:	dc400d17 	ldw	r17,52(sp)
    2754:	dd401904 	addi	r21,sp,100
    2758:	003e7406 	br	212c <___vfprintf_internal_r+0x5c4>
    275c:	d9014f17 	ldw	r4,1340(sp)
    2760:	b00b883a 	mov	r5,r22
    2764:	d9800c04 	addi	r6,sp,48
    2768:	d9c15115 	stw	r7,1348(sp)
    276c:	0001b100 	call	1b10 <__sprint_r>
    2770:	d9c15117 	ldw	r7,1348(sp)
    2774:	103eb41e 	bne	r2,zero,2248 <___vfprintf_internal_r+0x6e0>
    2778:	dd401904 	addi	r21,sp,100
    277c:	003d6d06 	br	1d34 <___vfprintf_internal_r+0x1cc>
    2780:	d9014f17 	ldw	r4,1340(sp)
    2784:	b00b883a 	mov	r5,r22
    2788:	d9800c04 	addi	r6,sp,48
    278c:	d9c15115 	stw	r7,1348(sp)
    2790:	0001b100 	call	1b10 <__sprint_r>
    2794:	d9c15117 	ldw	r7,1348(sp)
    2798:	103eab1e 	bne	r2,zero,2248 <___vfprintf_internal_r+0x6e0>
    279c:	dc800e17 	ldw	r18,56(sp)
    27a0:	dc400d17 	ldw	r17,52(sp)
    27a4:	dd401904 	addi	r21,sp,100
    27a8:	003e3406 	br	207c <___vfprintf_internal_r+0x514>
    27ac:	d9014f17 	ldw	r4,1340(sp)
    27b0:	b00b883a 	mov	r5,r22
    27b4:	d9800c04 	addi	r6,sp,48
    27b8:	d9c15115 	stw	r7,1348(sp)
    27bc:	0001b100 	call	1b10 <__sprint_r>
    27c0:	d9c15117 	ldw	r7,1348(sp)
    27c4:	103ea01e 	bne	r2,zero,2248 <___vfprintf_internal_r+0x6e0>
    27c8:	dc800e17 	ldw	r18,56(sp)
    27cc:	dc400d17 	ldw	r17,52(sp)
    27d0:	dd401904 	addi	r21,sp,100
    27d4:	003e1c06 	br	2048 <___vfprintf_internal_r+0x4e0>
    27d8:	d9014f17 	ldw	r4,1340(sp)
    27dc:	b00b883a 	mov	r5,r22
    27e0:	d9800c04 	addi	r6,sp,48
    27e4:	d9c15115 	stw	r7,1348(sp)
    27e8:	0001b100 	call	1b10 <__sprint_r>
    27ec:	d9c15117 	ldw	r7,1348(sp)
    27f0:	103e951e 	bne	r2,zero,2248 <___vfprintf_internal_r+0x6e0>
    27f4:	dc800e17 	ldw	r18,56(sp)
    27f8:	dc400d17 	ldw	r17,52(sp)
    27fc:	dd401904 	addi	r21,sp,100
    2800:	003e0406 	br	2014 <___vfprintf_internal_r+0x4ac>
    2804:	d9000517 	ldw	r4,20(sp)
    2808:	0102520e 	bge	zero,r4,3154 <___vfprintf_internal_r+0x15ec>
    280c:	d9814717 	ldw	r6,1308(sp)
    2810:	21807a16 	blt	r4,r6,29fc <___vfprintf_internal_r+0xe94>
    2814:	d8814117 	ldw	r2,1284(sp)
    2818:	91a5883a 	add	r18,r18,r6
    281c:	8c400044 	addi	r17,r17,1
    2820:	a8800015 	stw	r2,0(r21)
    2824:	008001c4 	movi	r2,7
    2828:	a9800115 	stw	r6,4(r21)
    282c:	dc800e15 	stw	r18,56(sp)
    2830:	dc400d15 	stw	r17,52(sp)
    2834:	1442f616 	blt	r2,r17,3410 <___vfprintf_internal_r+0x18a8>
    2838:	a8c00204 	addi	r3,r21,8
    283c:	d9414717 	ldw	r5,1308(sp)
    2840:	2161c83a 	sub	r16,r4,r5
    2844:	043f9d0e 	bge	zero,r16,26bc <___vfprintf_internal_r+0xb54>
    2848:	00800404 	movi	r2,16
    284c:	1402130e 	bge	r2,r16,309c <___vfprintf_internal_r+0x1534>
    2850:	dc400d17 	ldw	r17,52(sp)
    2854:	1027883a 	mov	r19,r2
    2858:	07000074 	movhi	fp,1
    285c:	e7082b84 	addi	fp,fp,8366
    2860:	050001c4 	movi	r20,7
    2864:	00000306 	br	2874 <___vfprintf_internal_r+0xd0c>
    2868:	18c00204 	addi	r3,r3,8
    286c:	843ffc04 	addi	r16,r16,-16
    2870:	9c020d0e 	bge	r19,r16,30a8 <___vfprintf_internal_r+0x1540>
    2874:	94800404 	addi	r18,r18,16
    2878:	8c400044 	addi	r17,r17,1
    287c:	1f000015 	stw	fp,0(r3)
    2880:	1cc00115 	stw	r19,4(r3)
    2884:	dc800e15 	stw	r18,56(sp)
    2888:	dc400d15 	stw	r17,52(sp)
    288c:	a47ff60e 	bge	r20,r17,2868 <___vfprintf_internal_r+0xd00>
    2890:	d9014f17 	ldw	r4,1340(sp)
    2894:	b00b883a 	mov	r5,r22
    2898:	d9800c04 	addi	r6,sp,48
    289c:	0001b100 	call	1b10 <__sprint_r>
    28a0:	103e691e 	bne	r2,zero,2248 <___vfprintf_internal_r+0x6e0>
    28a4:	dc800e17 	ldw	r18,56(sp)
    28a8:	dc400d17 	ldw	r17,52(sp)
    28ac:	d8c01904 	addi	r3,sp,100
    28b0:	003fee06 	br	286c <___vfprintf_internal_r+0xd04>
    28b4:	d8814717 	ldw	r2,1308(sp)
    28b8:	143fffc4 	addi	r16,r2,-1
    28bc:	043e970e 	bge	zero,r16,231c <___vfprintf_internal_r+0x7b4>
    28c0:	00800404 	movi	r2,16
    28c4:	1400180e 	bge	r2,r16,2928 <___vfprintf_internal_r+0xdc0>
    28c8:	1029883a 	mov	r20,r2
    28cc:	07000074 	movhi	fp,1
    28d0:	e7082b84 	addi	fp,fp,8366
    28d4:	054001c4 	movi	r21,7
    28d8:	00000306 	br	28e8 <___vfprintf_internal_r+0xd80>
    28dc:	9cc00204 	addi	r19,r19,8
    28e0:	843ffc04 	addi	r16,r16,-16
    28e4:	a400120e 	bge	r20,r16,2930 <___vfprintf_internal_r+0xdc8>
    28e8:	94800404 	addi	r18,r18,16
    28ec:	8c400044 	addi	r17,r17,1
    28f0:	9f000015 	stw	fp,0(r19)
    28f4:	9d000115 	stw	r20,4(r19)
    28f8:	dc800e15 	stw	r18,56(sp)
    28fc:	dc400d15 	stw	r17,52(sp)
    2900:	ac7ff60e 	bge	r21,r17,28dc <___vfprintf_internal_r+0xd74>
    2904:	d9014f17 	ldw	r4,1340(sp)
    2908:	b00b883a 	mov	r5,r22
    290c:	d9800c04 	addi	r6,sp,48
    2910:	0001b100 	call	1b10 <__sprint_r>
    2914:	103e4c1e 	bne	r2,zero,2248 <___vfprintf_internal_r+0x6e0>
    2918:	dc800e17 	ldw	r18,56(sp)
    291c:	dc400d17 	ldw	r17,52(sp)
    2920:	dcc01904 	addi	r19,sp,100
    2924:	003fee06 	br	28e0 <___vfprintf_internal_r+0xd78>
    2928:	07000074 	movhi	fp,1
    292c:	e7082b84 	addi	fp,fp,8366
    2930:	9425883a 	add	r18,r18,r16
    2934:	8c400044 	addi	r17,r17,1
    2938:	008001c4 	movi	r2,7
    293c:	9f000015 	stw	fp,0(r19)
    2940:	9c000115 	stw	r16,4(r19)
    2944:	dc800e15 	stw	r18,56(sp)
    2948:	dc400d15 	stw	r17,52(sp)
    294c:	147e720e 	bge	r2,r17,2318 <___vfprintf_internal_r+0x7b0>
    2950:	d9014f17 	ldw	r4,1340(sp)
    2954:	b00b883a 	mov	r5,r22
    2958:	d9800c04 	addi	r6,sp,48
    295c:	0001b100 	call	1b10 <__sprint_r>
    2960:	103e391e 	bne	r2,zero,2248 <___vfprintf_internal_r+0x6e0>
    2964:	dc800e17 	ldw	r18,56(sp)
    2968:	dc400d17 	ldw	r17,52(sp)
    296c:	dcc01904 	addi	r19,sp,100
    2970:	003e6a06 	br	231c <___vfprintf_internal_r+0x7b4>
    2974:	d9014f17 	ldw	r4,1340(sp)
    2978:	b00b883a 	mov	r5,r22
    297c:	d9800c04 	addi	r6,sp,48
    2980:	d9c15115 	stw	r7,1348(sp)
    2984:	0001b100 	call	1b10 <__sprint_r>
    2988:	d9c15117 	ldw	r7,1348(sp)
    298c:	103e2e1e 	bne	r2,zero,2248 <___vfprintf_internal_r+0x6e0>
    2990:	dc800e17 	ldw	r18,56(sp)
    2994:	dc400d17 	ldw	r17,52(sp)
    2998:	dd401904 	addi	r21,sp,100
    299c:	003dba06 	br	2088 <___vfprintf_internal_r+0x520>
    29a0:	d9014f17 	ldw	r4,1340(sp)
    29a4:	b00b883a 	mov	r5,r22
    29a8:	d9800c04 	addi	r6,sp,48
    29ac:	0001b100 	call	1b10 <__sprint_r>
    29b0:	103e251e 	bne	r2,zero,2248 <___vfprintf_internal_r+0x6e0>
    29b4:	dc800e17 	ldw	r18,56(sp)
    29b8:	dc400d17 	ldw	r17,52(sp)
    29bc:	dcc01904 	addi	r19,sp,100
    29c0:	003e4206 	br	22cc <___vfprintf_internal_r+0x764>
    29c4:	d9014f17 	ldw	r4,1340(sp)
    29c8:	b00b883a 	mov	r5,r22
    29cc:	d9800c04 	addi	r6,sp,48
    29d0:	0001b100 	call	1b10 <__sprint_r>
    29d4:	103e1c1e 	bne	r2,zero,2248 <___vfprintf_internal_r+0x6e0>
    29d8:	dc800e17 	ldw	r18,56(sp)
    29dc:	dc400d17 	ldw	r17,52(sp)
    29e0:	d8c01904 	addi	r3,sp,100
    29e4:	003e2e06 	br	22a0 <___vfprintf_internal_r+0x738>
    29e8:	d9414c17 	ldw	r5,1328(sp)
    29ec:	2880004c 	andi	r2,r5,1
    29f0:	1005003a 	cmpeq	r2,r2,zero
    29f4:	103dda1e 	bne	r2,zero,2160 <___vfprintf_internal_r+0x5f8>
    29f8:	003e9f06 	br	2478 <___vfprintf_internal_r+0x910>
    29fc:	d8c14117 	ldw	r3,1284(sp)
    2a00:	9125883a 	add	r18,r18,r4
    2a04:	8c400044 	addi	r17,r17,1
    2a08:	008001c4 	movi	r2,7
    2a0c:	a8c00015 	stw	r3,0(r21)
    2a10:	a9000115 	stw	r4,4(r21)
    2a14:	dc800e15 	stw	r18,56(sp)
    2a18:	dc400d15 	stw	r17,52(sp)
    2a1c:	14426616 	blt	r2,r17,33b8 <___vfprintf_internal_r+0x1850>
    2a20:	a8c00204 	addi	r3,r21,8
    2a24:	d9414917 	ldw	r5,1316(sp)
    2a28:	00800044 	movi	r2,1
    2a2c:	94800044 	addi	r18,r18,1
    2a30:	8c400044 	addi	r17,r17,1
    2a34:	18800115 	stw	r2,4(r3)
    2a38:	008001c4 	movi	r2,7
    2a3c:	19400015 	stw	r5,0(r3)
    2a40:	dc800e15 	stw	r18,56(sp)
    2a44:	dc400d15 	stw	r17,52(sp)
    2a48:	2021883a 	mov	r16,r4
    2a4c:	14425016 	blt	r2,r17,3390 <___vfprintf_internal_r+0x1828>
    2a50:	19400204 	addi	r5,r3,8
    2a54:	d9814717 	ldw	r6,1308(sp)
    2a58:	8c400044 	addi	r17,r17,1
    2a5c:	dc400d15 	stw	r17,52(sp)
    2a60:	3107c83a 	sub	r3,r6,r4
    2a64:	d9014117 	ldw	r4,1284(sp)
    2a68:	90e5883a 	add	r18,r18,r3
    2a6c:	28c00115 	stw	r3,4(r5)
    2a70:	8105883a 	add	r2,r16,r4
    2a74:	28800015 	stw	r2,0(r5)
    2a78:	008001c4 	movi	r2,7
    2a7c:	dc800e15 	stw	r18,56(sp)
    2a80:	147f1d16 	blt	r2,r17,26f8 <___vfprintf_internal_r+0xb90>
    2a84:	28c00204 	addi	r3,r5,8
    2a88:	003db506 	br	2160 <___vfprintf_internal_r+0x5f8>
    2a8c:	3c000017 	ldw	r16,0(r7)
    2a90:	3c400117 	ldw	r17,4(r7)
    2a94:	39800204 	addi	r6,r7,8
    2a98:	01000044 	movi	r4,1
    2a9c:	d9814015 	stw	r6,1280(sp)
    2aa0:	d8000405 	stb	zero,16(sp)
    2aa4:	003ebe06 	br	25a0 <___vfprintf_internal_r+0xa38>
    2aa8:	3c000017 	ldw	r16,0(r7)
    2aac:	3c400117 	ldw	r17,4(r7)
    2ab0:	38800204 	addi	r2,r7,8
    2ab4:	d8814015 	stw	r2,1280(sp)
    2ab8:	003eb706 	br	2598 <___vfprintf_internal_r+0xa30>
    2abc:	3c000017 	ldw	r16,0(r7)
    2ac0:	3c400117 	ldw	r17,4(r7)
    2ac4:	39000204 	addi	r4,r7,8
    2ac8:	d9014015 	stw	r4,1280(sp)
    2acc:	0009883a 	mov	r4,zero
    2ad0:	d8000405 	stb	zero,16(sp)
    2ad4:	003eb206 	br	25a0 <___vfprintf_internal_r+0xa38>
    2ad8:	38c00017 	ldw	r3,0(r7)
    2adc:	39c00104 	addi	r7,r7,4
    2ae0:	d8c14a15 	stw	r3,1320(sp)
    2ae4:	1800d10e 	bge	r3,zero,2e2c <___vfprintf_internal_r+0x12c4>
    2ae8:	00c7c83a 	sub	r3,zero,r3
    2aec:	d8c14a15 	stw	r3,1320(sp)
    2af0:	d9014c17 	ldw	r4,1328(sp)
    2af4:	b8c00007 	ldb	r3,0(r23)
    2af8:	21000114 	ori	r4,r4,4
    2afc:	d9014c15 	stw	r4,1328(sp)
    2b00:	003c9806 	br	1d64 <___vfprintf_internal_r+0x1fc>
    2b04:	d9814c17 	ldw	r6,1328(sp)
    2b08:	3080080c 	andi	r2,r6,32
    2b0c:	1001f026 	beq	r2,zero,32d0 <___vfprintf_internal_r+0x1768>
    2b10:	d9014b17 	ldw	r4,1324(sp)
    2b14:	38800017 	ldw	r2,0(r7)
    2b18:	39c00104 	addi	r7,r7,4
    2b1c:	d9c14015 	stw	r7,1280(sp)
    2b20:	2007d7fa 	srai	r3,r4,31
    2b24:	d9c14017 	ldw	r7,1280(sp)
    2b28:	11000015 	stw	r4,0(r2)
    2b2c:	10c00115 	stw	r3,4(r2)
    2b30:	003c6906 	br	1cd8 <___vfprintf_internal_r+0x170>
    2b34:	b8c00007 	ldb	r3,0(r23)
    2b38:	00801b04 	movi	r2,108
    2b3c:	18824f26 	beq	r3,r2,347c <___vfprintf_internal_r+0x1914>
    2b40:	d9414c17 	ldw	r5,1328(sp)
    2b44:	29400414 	ori	r5,r5,16
    2b48:	d9414c15 	stw	r5,1328(sp)
    2b4c:	003c8506 	br	1d64 <___vfprintf_internal_r+0x1fc>
    2b50:	d9814c17 	ldw	r6,1328(sp)
    2b54:	b8c00007 	ldb	r3,0(r23)
    2b58:	31800814 	ori	r6,r6,32
    2b5c:	d9814c15 	stw	r6,1328(sp)
    2b60:	003c8006 	br	1d64 <___vfprintf_internal_r+0x1fc>
    2b64:	d8814c17 	ldw	r2,1328(sp)
    2b68:	3c000017 	ldw	r16,0(r7)
    2b6c:	00c01e04 	movi	r3,120
    2b70:	10800094 	ori	r2,r2,2
    2b74:	d8814c15 	stw	r2,1328(sp)
    2b78:	39c00104 	addi	r7,r7,4
    2b7c:	01400074 	movhi	r5,1
    2b80:	29481404 	addi	r5,r5,8272
    2b84:	00800c04 	movi	r2,48
    2b88:	0023883a 	mov	r17,zero
    2b8c:	01000084 	movi	r4,2
    2b90:	d9c14015 	stw	r7,1280(sp)
    2b94:	d8c14d15 	stw	r3,1332(sp)
    2b98:	d9414415 	stw	r5,1296(sp)
    2b9c:	d8800445 	stb	r2,17(sp)
    2ba0:	d8c00485 	stb	r3,18(sp)
    2ba4:	d8000405 	stb	zero,16(sp)
    2ba8:	003e7d06 	br	25a0 <___vfprintf_internal_r+0xa38>
    2bac:	d8814c17 	ldw	r2,1328(sp)
    2bb0:	b8c00007 	ldb	r3,0(r23)
    2bb4:	10801014 	ori	r2,r2,64
    2bb8:	d8814c15 	stw	r2,1328(sp)
    2bbc:	003c6906 	br	1d64 <___vfprintf_internal_r+0x1fc>
    2bc0:	d9414c17 	ldw	r5,1328(sp)
    2bc4:	2880020c 	andi	r2,r5,8
    2bc8:	1001df26 	beq	r2,zero,3348 <___vfprintf_internal_r+0x17e0>
    2bcc:	39800017 	ldw	r6,0(r7)
    2bd0:	38800204 	addi	r2,r7,8
    2bd4:	d8814015 	stw	r2,1280(sp)
    2bd8:	d9814215 	stw	r6,1288(sp)
    2bdc:	39c00117 	ldw	r7,4(r7)
    2be0:	d9c14315 	stw	r7,1292(sp)
    2be4:	d9014217 	ldw	r4,1288(sp)
    2be8:	d9414317 	ldw	r5,1292(sp)
    2bec:	00085bc0 	call	85bc <__isinfd>
    2bf0:	10021726 	beq	r2,zero,3450 <___vfprintf_internal_r+0x18e8>
    2bf4:	d9014217 	ldw	r4,1288(sp)
    2bf8:	d9414317 	ldw	r5,1292(sp)
    2bfc:	000d883a 	mov	r6,zero
    2c00:	000f883a 	mov	r7,zero
    2c04:	000a7c40 	call	a7c4 <__ltdf2>
    2c08:	1002ca16 	blt	r2,zero,3734 <___vfprintf_internal_r+0x1bcc>
    2c0c:	d9414d17 	ldw	r5,1332(sp)
    2c10:	008011c4 	movi	r2,71
    2c14:	11420a16 	blt	r2,r5,3440 <___vfprintf_internal_r+0x18d8>
    2c18:	01800074 	movhi	r6,1
    2c1c:	31881904 	addi	r6,r6,8292
    2c20:	d9814115 	stw	r6,1284(sp)
    2c24:	d9014c17 	ldw	r4,1328(sp)
    2c28:	00c000c4 	movi	r3,3
    2c2c:	00bfdfc4 	movi	r2,-129
    2c30:	2088703a 	and	r4,r4,r2
    2c34:	180f883a 	mov	r7,r3
    2c38:	d8c14515 	stw	r3,1300(sp)
    2c3c:	d9014c15 	stw	r4,1328(sp)
    2c40:	d8014615 	stw	zero,1304(sp)
    2c44:	003e6a06 	br	25f0 <___vfprintf_internal_r+0xa88>
    2c48:	38800017 	ldw	r2,0(r7)
    2c4c:	00c00044 	movi	r3,1
    2c50:	39c00104 	addi	r7,r7,4
    2c54:	d9c14015 	stw	r7,1280(sp)
    2c58:	d9000f04 	addi	r4,sp,60
    2c5c:	180f883a 	mov	r7,r3
    2c60:	d8c14515 	stw	r3,1300(sp)
    2c64:	d9014115 	stw	r4,1284(sp)
    2c68:	d8800f05 	stb	r2,60(sp)
    2c6c:	d8000405 	stb	zero,16(sp)
    2c70:	003cac06 	br	1f24 <___vfprintf_internal_r+0x3bc>
    2c74:	01400074 	movhi	r5,1
    2c78:	29481f04 	addi	r5,r5,8316
    2c7c:	d9414415 	stw	r5,1296(sp)
    2c80:	d9814c17 	ldw	r6,1328(sp)
    2c84:	3080080c 	andi	r2,r6,32
    2c88:	1000f926 	beq	r2,zero,3070 <___vfprintf_internal_r+0x1508>
    2c8c:	3c000017 	ldw	r16,0(r7)
    2c90:	3c400117 	ldw	r17,4(r7)
    2c94:	38800204 	addi	r2,r7,8
    2c98:	d8814015 	stw	r2,1280(sp)
    2c9c:	d9414c17 	ldw	r5,1328(sp)
    2ca0:	2880004c 	andi	r2,r5,1
    2ca4:	1005003a 	cmpeq	r2,r2,zero
    2ca8:	1000b31e 	bne	r2,zero,2f78 <___vfprintf_internal_r+0x1410>
    2cac:	8444b03a 	or	r2,r16,r17
    2cb0:	1000b126 	beq	r2,zero,2f78 <___vfprintf_internal_r+0x1410>
    2cb4:	d9814d17 	ldw	r6,1332(sp)
    2cb8:	29400094 	ori	r5,r5,2
    2cbc:	00800c04 	movi	r2,48
    2cc0:	01000084 	movi	r4,2
    2cc4:	d9414c15 	stw	r5,1328(sp)
    2cc8:	d8800445 	stb	r2,17(sp)
    2ccc:	d9800485 	stb	r6,18(sp)
    2cd0:	d8000405 	stb	zero,16(sp)
    2cd4:	003e3206 	br	25a0 <___vfprintf_internal_r+0xa38>
    2cd8:	01800074 	movhi	r6,1
    2cdc:	31881404 	addi	r6,r6,8272
    2ce0:	d9814415 	stw	r6,1296(sp)
    2ce4:	003fe606 	br	2c80 <___vfprintf_internal_r+0x1118>
    2ce8:	00800ac4 	movi	r2,43
    2cec:	d8800405 	stb	r2,16(sp)
    2cf0:	b8c00007 	ldb	r3,0(r23)
    2cf4:	003c1b06 	br	1d64 <___vfprintf_internal_r+0x1fc>
    2cf8:	d8814c17 	ldw	r2,1328(sp)
    2cfc:	b8c00007 	ldb	r3,0(r23)
    2d00:	10800054 	ori	r2,r2,1
    2d04:	d8814c15 	stw	r2,1328(sp)
    2d08:	003c1606 	br	1d64 <___vfprintf_internal_r+0x1fc>
    2d0c:	d8800407 	ldb	r2,16(sp)
    2d10:	1000461e 	bne	r2,zero,2e2c <___vfprintf_internal_r+0x12c4>
    2d14:	00800804 	movi	r2,32
    2d18:	d8800405 	stb	r2,16(sp)
    2d1c:	b8c00007 	ldb	r3,0(r23)
    2d20:	003c1006 	br	1d64 <___vfprintf_internal_r+0x1fc>
    2d24:	d9814c17 	ldw	r6,1328(sp)
    2d28:	b8c00007 	ldb	r3,0(r23)
    2d2c:	31800214 	ori	r6,r6,8
    2d30:	d9814c15 	stw	r6,1328(sp)
    2d34:	003c0b06 	br	1d64 <___vfprintf_internal_r+0x1fc>
    2d38:	0007883a 	mov	r3,zero
    2d3c:	01000244 	movi	r4,9
    2d40:	188002a4 	muli	r2,r3,10
    2d44:	b8c00007 	ldb	r3,0(r23)
    2d48:	d9814d17 	ldw	r6,1332(sp)
    2d4c:	bdc00044 	addi	r23,r23,1
    2d50:	d8c14d15 	stw	r3,1332(sp)
    2d54:	d9414d17 	ldw	r5,1332(sp)
    2d58:	3085883a 	add	r2,r6,r2
    2d5c:	10fff404 	addi	r3,r2,-48
    2d60:	28bff404 	addi	r2,r5,-48
    2d64:	20bff62e 	bgeu	r4,r2,2d40 <___vfprintf_internal_r+0x11d8>
    2d68:	d8c14a15 	stw	r3,1320(sp)
    2d6c:	003bff06 	br	1d6c <___vfprintf_internal_r+0x204>
    2d70:	d9414c17 	ldw	r5,1328(sp)
    2d74:	b8c00007 	ldb	r3,0(r23)
    2d78:	29402014 	ori	r5,r5,128
    2d7c:	d9414c15 	stw	r5,1328(sp)
    2d80:	003bf806 	br	1d64 <___vfprintf_internal_r+0x1fc>
    2d84:	b8c00007 	ldb	r3,0(r23)
    2d88:	00800a84 	movi	r2,42
    2d8c:	bdc00044 	addi	r23,r23,1
    2d90:	18831526 	beq	r3,r2,39e8 <___vfprintf_internal_r+0x1e80>
    2d94:	d8c14d15 	stw	r3,1332(sp)
    2d98:	18bff404 	addi	r2,r3,-48
    2d9c:	00c00244 	movi	r3,9
    2da0:	18827836 	bltu	r3,r2,3784 <___vfprintf_internal_r+0x1c1c>
    2da4:	000d883a 	mov	r6,zero
    2da8:	308002a4 	muli	r2,r6,10
    2dac:	b9800007 	ldb	r6,0(r23)
    2db0:	d9414d17 	ldw	r5,1332(sp)
    2db4:	bdc00044 	addi	r23,r23,1
    2db8:	d9814d15 	stw	r6,1332(sp)
    2dbc:	d9014d17 	ldw	r4,1332(sp)
    2dc0:	1145883a 	add	r2,r2,r5
    2dc4:	11bff404 	addi	r6,r2,-48
    2dc8:	20bff404 	addi	r2,r4,-48
    2dcc:	18bff62e 	bgeu	r3,r2,2da8 <___vfprintf_internal_r+0x1240>
    2dd0:	3027883a 	mov	r19,r6
    2dd4:	303be50e 	bge	r6,zero,1d6c <___vfprintf_internal_r+0x204>
    2dd8:	04ffffc4 	movi	r19,-1
    2ddc:	003be306 	br	1d6c <___vfprintf_internal_r+0x204>
    2de0:	d8000405 	stb	zero,16(sp)
    2de4:	39800017 	ldw	r6,0(r7)
    2de8:	39c00104 	addi	r7,r7,4
    2dec:	d9c14015 	stw	r7,1280(sp)
    2df0:	d9814115 	stw	r6,1284(sp)
    2df4:	3001c926 	beq	r6,zero,351c <___vfprintf_internal_r+0x19b4>
    2df8:	98000e16 	blt	r19,zero,2e34 <___vfprintf_internal_r+0x12cc>
    2dfc:	d9014117 	ldw	r4,1284(sp)
    2e00:	000b883a 	mov	r5,zero
    2e04:	980d883a 	mov	r6,r19
    2e08:	0006c240 	call	6c24 <memchr>
    2e0c:	10025926 	beq	r2,zero,3774 <___vfprintf_internal_r+0x1c0c>
    2e10:	d8c14117 	ldw	r3,1284(sp)
    2e14:	10cfc83a 	sub	r7,r2,r3
    2e18:	99c19e16 	blt	r19,r7,3494 <___vfprintf_internal_r+0x192c>
    2e1c:	d9c14515 	stw	r7,1300(sp)
    2e20:	38000916 	blt	r7,zero,2e48 <___vfprintf_internal_r+0x12e0>
    2e24:	d8014615 	stw	zero,1304(sp)
    2e28:	003df106 	br	25f0 <___vfprintf_internal_r+0xa88>
    2e2c:	b8c00007 	ldb	r3,0(r23)
    2e30:	003bcc06 	br	1d64 <___vfprintf_internal_r+0x1fc>
    2e34:	d9014117 	ldw	r4,1284(sp)
    2e38:	00088a40 	call	88a4 <strlen>
    2e3c:	d8814515 	stw	r2,1300(sp)
    2e40:	100f883a 	mov	r7,r2
    2e44:	103ff70e 	bge	r2,zero,2e24 <___vfprintf_internal_r+0x12bc>
    2e48:	d8014515 	stw	zero,1300(sp)
    2e4c:	d8014615 	stw	zero,1304(sp)
    2e50:	003de706 	br	25f0 <___vfprintf_internal_r+0xa88>
    2e54:	20c03fcc 	andi	r3,r4,255
    2e58:	00800044 	movi	r2,1
    2e5c:	18802d26 	beq	r3,r2,2f14 <___vfprintf_internal_r+0x13ac>
    2e60:	18800e36 	bltu	r3,r2,2e9c <___vfprintf_internal_r+0x1334>
    2e64:	00800084 	movi	r2,2
    2e68:	1880fa26 	beq	r3,r2,3254 <___vfprintf_internal_r+0x16ec>
    2e6c:	01000074 	movhi	r4,1
    2e70:	21082404 	addi	r4,r4,8336
    2e74:	00088a40 	call	88a4 <strlen>
    2e78:	100f883a 	mov	r7,r2
    2e7c:	dcc14515 	stw	r19,1300(sp)
    2e80:	9880010e 	bge	r19,r2,2e88 <___vfprintf_internal_r+0x1320>
    2e84:	d8814515 	stw	r2,1300(sp)
    2e88:	00800074 	movhi	r2,1
    2e8c:	10882404 	addi	r2,r2,8336
    2e90:	dcc14615 	stw	r19,1304(sp)
    2e94:	d8814115 	stw	r2,1284(sp)
    2e98:	003dd506 	br	25f0 <___vfprintf_internal_r+0xa88>
    2e9c:	d9401904 	addi	r5,sp,100
    2ea0:	dd000f04 	addi	r20,sp,60
    2ea4:	d9414115 	stw	r5,1284(sp)
    2ea8:	880a977a 	slli	r5,r17,29
    2eac:	d9814117 	ldw	r6,1284(sp)
    2eb0:	8004d0fa 	srli	r2,r16,3
    2eb4:	8806d0fa 	srli	r3,r17,3
    2eb8:	810001cc 	andi	r4,r16,7
    2ebc:	2884b03a 	or	r2,r5,r2
    2ec0:	31bfffc4 	addi	r6,r6,-1
    2ec4:	21000c04 	addi	r4,r4,48
    2ec8:	d9814115 	stw	r6,1284(sp)
    2ecc:	10cab03a 	or	r5,r2,r3
    2ed0:	31000005 	stb	r4,0(r6)
    2ed4:	1021883a 	mov	r16,r2
    2ed8:	1823883a 	mov	r17,r3
    2edc:	283ff21e 	bne	r5,zero,2ea8 <___vfprintf_internal_r+0x1340>
    2ee0:	d8c14c17 	ldw	r3,1328(sp)
    2ee4:	1880004c 	andi	r2,r3,1
    2ee8:	1005003a 	cmpeq	r2,r2,zero
    2eec:	103db91e 	bne	r2,zero,25d4 <___vfprintf_internal_r+0xa6c>
    2ef0:	20803fcc 	andi	r2,r4,255
    2ef4:	1080201c 	xori	r2,r2,128
    2ef8:	10bfe004 	addi	r2,r2,-128
    2efc:	00c00c04 	movi	r3,48
    2f00:	10fdb426 	beq	r2,r3,25d4 <___vfprintf_internal_r+0xa6c>
    2f04:	31bfffc4 	addi	r6,r6,-1
    2f08:	d9814115 	stw	r6,1284(sp)
    2f0c:	30c00005 	stb	r3,0(r6)
    2f10:	003db006 	br	25d4 <___vfprintf_internal_r+0xa6c>
    2f14:	88800068 	cmpgeui	r2,r17,1
    2f18:	10002c1e 	bne	r2,zero,2fcc <___vfprintf_internal_r+0x1464>
    2f1c:	8800021e 	bne	r17,zero,2f28 <___vfprintf_internal_r+0x13c0>
    2f20:	00800244 	movi	r2,9
    2f24:	14002936 	bltu	r2,r16,2fcc <___vfprintf_internal_r+0x1464>
    2f28:	d90018c4 	addi	r4,sp,99
    2f2c:	dd000f04 	addi	r20,sp,60
    2f30:	d9014115 	stw	r4,1284(sp)
    2f34:	d9014117 	ldw	r4,1284(sp)
    2f38:	80800c04 	addi	r2,r16,48
    2f3c:	20800005 	stb	r2,0(r4)
    2f40:	003da406 	br	25d4 <___vfprintf_internal_r+0xa6c>
    2f44:	dc400d17 	ldw	r17,52(sp)
    2f48:	07000074 	movhi	fp,1
    2f4c:	e7082b84 	addi	fp,fp,8366
    2f50:	9425883a 	add	r18,r18,r16
    2f54:	8c400044 	addi	r17,r17,1
    2f58:	008001c4 	movi	r2,7
    2f5c:	1f000015 	stw	fp,0(r3)
    2f60:	1c000115 	stw	r16,4(r3)
    2f64:	dc800e15 	stw	r18,56(sp)
    2f68:	dc400d15 	stw	r17,52(sp)
    2f6c:	147de216 	blt	r2,r17,26f8 <___vfprintf_internal_r+0xb90>
    2f70:	18c00204 	addi	r3,r3,8
    2f74:	003c7a06 	br	2160 <___vfprintf_internal_r+0x5f8>
    2f78:	01000084 	movi	r4,2
    2f7c:	d8000405 	stb	zero,16(sp)
    2f80:	003d8706 	br	25a0 <___vfprintf_internal_r+0xa38>
    2f84:	d9814c17 	ldw	r6,1328(sp)
    2f88:	30c4703a 	and	r2,r6,r3
    2f8c:	1005003a 	cmpeq	r2,r2,zero
    2f90:	103cb926 	beq	r2,zero,2278 <___vfprintf_internal_r+0x710>
    2f94:	d9014117 	ldw	r4,1284(sp)
    2f98:	94800044 	addi	r18,r18,1
    2f9c:	8c400044 	addi	r17,r17,1
    2fa0:	008001c4 	movi	r2,7
    2fa4:	a9000015 	stw	r4,0(r21)
    2fa8:	a8c00115 	stw	r3,4(r21)
    2fac:	dc800e15 	stw	r18,56(sp)
    2fb0:	dc400d15 	stw	r17,52(sp)
    2fb4:	147e6616 	blt	r2,r17,2950 <___vfprintf_internal_r+0xde8>
    2fb8:	acc00204 	addi	r19,r21,8
    2fbc:	003cd706 	br	231c <___vfprintf_internal_r+0x7b4>
    2fc0:	07000074 	movhi	fp,1
    2fc4:	e7082b84 	addi	fp,fp,8366
    2fc8:	003c4f06 	br	2108 <___vfprintf_internal_r+0x5a0>
    2fcc:	dd000f04 	addi	r20,sp,60
    2fd0:	dc801904 	addi	r18,sp,100
    2fd4:	8009883a 	mov	r4,r16
    2fd8:	880b883a 	mov	r5,r17
    2fdc:	01800284 	movi	r6,10
    2fe0:	000f883a 	mov	r7,zero
    2fe4:	00094d40 	call	94d4 <__umoddi3>
    2fe8:	12000c04 	addi	r8,r2,48
    2fec:	94bfffc4 	addi	r18,r18,-1
    2ff0:	8009883a 	mov	r4,r16
    2ff4:	880b883a 	mov	r5,r17
    2ff8:	01800284 	movi	r6,10
    2ffc:	000f883a 	mov	r7,zero
    3000:	92000005 	stb	r8,0(r18)
    3004:	0008ef80 	call	8ef8 <__udivdi3>
    3008:	1009883a 	mov	r4,r2
    300c:	1021883a 	mov	r16,r2
    3010:	18800068 	cmpgeui	r2,r3,1
    3014:	1823883a 	mov	r17,r3
    3018:	103fee1e 	bne	r2,zero,2fd4 <___vfprintf_internal_r+0x146c>
    301c:	1800021e 	bne	r3,zero,3028 <___vfprintf_internal_r+0x14c0>
    3020:	00800244 	movi	r2,9
    3024:	113feb36 	bltu	r2,r4,2fd4 <___vfprintf_internal_r+0x146c>
    3028:	94bfffc4 	addi	r18,r18,-1
    302c:	dc814115 	stw	r18,1284(sp)
    3030:	003fc006 	br	2f34 <___vfprintf_internal_r+0x13cc>
    3034:	d9014c17 	ldw	r4,1328(sp)
    3038:	2080004c 	andi	r2,r4,1
    303c:	10009a1e 	bne	r2,zero,32a8 <___vfprintf_internal_r+0x1740>
    3040:	d9401904 	addi	r5,sp,100
    3044:	dd000f04 	addi	r20,sp,60
    3048:	d9414115 	stw	r5,1284(sp)
    304c:	003d6106 	br	25d4 <___vfprintf_internal_r+0xa6c>
    3050:	d9014f17 	ldw	r4,1340(sp)
    3054:	b00b883a 	mov	r5,r22
    3058:	d9800c04 	addi	r6,sp,48
    305c:	0001b100 	call	1b10 <__sprint_r>
    3060:	103c791e 	bne	r2,zero,2248 <___vfprintf_internal_r+0x6e0>
    3064:	dc800e17 	ldw	r18,56(sp)
    3068:	d8c01904 	addi	r3,sp,100
    306c:	003cff06 	br	246c <___vfprintf_internal_r+0x904>
    3070:	d8c14c17 	ldw	r3,1328(sp)
    3074:	1880040c 	andi	r2,r3,16
    3078:	1000711e 	bne	r2,zero,3240 <___vfprintf_internal_r+0x16d8>
    307c:	d9014c17 	ldw	r4,1328(sp)
    3080:	2080100c 	andi	r2,r4,64
    3084:	10006e26 	beq	r2,zero,3240 <___vfprintf_internal_r+0x16d8>
    3088:	3c00000b 	ldhu	r16,0(r7)
    308c:	0023883a 	mov	r17,zero
    3090:	39c00104 	addi	r7,r7,4
    3094:	d9c14015 	stw	r7,1280(sp)
    3098:	003f0006 	br	2c9c <___vfprintf_internal_r+0x1134>
    309c:	dc400d17 	ldw	r17,52(sp)
    30a0:	07000074 	movhi	fp,1
    30a4:	e7082b84 	addi	fp,fp,8366
    30a8:	9425883a 	add	r18,r18,r16
    30ac:	8c400044 	addi	r17,r17,1
    30b0:	008001c4 	movi	r2,7
    30b4:	1f000015 	stw	fp,0(r3)
    30b8:	1c000115 	stw	r16,4(r3)
    30bc:	dc800e15 	stw	r18,56(sp)
    30c0:	dc400d15 	stw	r17,52(sp)
    30c4:	147d7616 	blt	r2,r17,26a0 <___vfprintf_internal_r+0xb38>
    30c8:	18c00204 	addi	r3,r3,8
    30cc:	003d7b06 	br	26bc <___vfprintf_internal_r+0xb54>
    30d0:	dc800e17 	ldw	r18,56(sp)
    30d4:	dc400d17 	ldw	r17,52(sp)
    30d8:	07000074 	movhi	fp,1
    30dc:	e7082f84 	addi	fp,fp,8382
    30e0:	003bc006 	br	1fe4 <___vfprintf_internal_r+0x47c>
    30e4:	d9014f17 	ldw	r4,1340(sp)
    30e8:	b00b883a 	mov	r5,r22
    30ec:	d9800c04 	addi	r6,sp,48
    30f0:	0001b100 	call	1b10 <__sprint_r>
    30f4:	103c541e 	bne	r2,zero,2248 <___vfprintf_internal_r+0x6e0>
    30f8:	dc800e17 	ldw	r18,56(sp)
    30fc:	d8c01904 	addi	r3,sp,100
    3100:	003ce906 	br	24a8 <___vfprintf_internal_r+0x940>
    3104:	3c000017 	ldw	r16,0(r7)
    3108:	0009883a 	mov	r4,zero
    310c:	39c00104 	addi	r7,r7,4
    3110:	0023883a 	mov	r17,zero
    3114:	d9c14015 	stw	r7,1280(sp)
    3118:	d8000405 	stb	zero,16(sp)
    311c:	003d2006 	br	25a0 <___vfprintf_internal_r+0xa38>
    3120:	38800017 	ldw	r2,0(r7)
    3124:	39c00104 	addi	r7,r7,4
    3128:	d9c14015 	stw	r7,1280(sp)
    312c:	1023d7fa 	srai	r17,r2,31
    3130:	1021883a 	mov	r16,r2
    3134:	003d1806 	br	2598 <___vfprintf_internal_r+0xa30>
    3138:	3c000017 	ldw	r16,0(r7)
    313c:	01000044 	movi	r4,1
    3140:	39c00104 	addi	r7,r7,4
    3144:	0023883a 	mov	r17,zero
    3148:	d9c14015 	stw	r7,1280(sp)
    314c:	d8000405 	stb	zero,16(sp)
    3150:	003d1306 	br	25a0 <___vfprintf_internal_r+0xa38>
    3154:	00800074 	movhi	r2,1
    3158:	10882b04 	addi	r2,r2,8364
    315c:	94800044 	addi	r18,r18,1
    3160:	8c400044 	addi	r17,r17,1
    3164:	a8800015 	stw	r2,0(r21)
    3168:	00c00044 	movi	r3,1
    316c:	008001c4 	movi	r2,7
    3170:	a8c00115 	stw	r3,4(r21)
    3174:	dc800e15 	stw	r18,56(sp)
    3178:	dc400d15 	stw	r17,52(sp)
    317c:	1440ca16 	blt	r2,r17,34a8 <___vfprintf_internal_r+0x1940>
    3180:	a8c00204 	addi	r3,r21,8
    3184:	2000061e 	bne	r4,zero,31a0 <___vfprintf_internal_r+0x1638>
    3188:	d9414717 	ldw	r5,1308(sp)
    318c:	2800041e 	bne	r5,zero,31a0 <___vfprintf_internal_r+0x1638>
    3190:	d9814c17 	ldw	r6,1328(sp)
    3194:	3080004c 	andi	r2,r6,1
    3198:	1005003a 	cmpeq	r2,r2,zero
    319c:	103bf01e 	bne	r2,zero,2160 <___vfprintf_internal_r+0x5f8>
    31a0:	00800044 	movi	r2,1
    31a4:	dc400d17 	ldw	r17,52(sp)
    31a8:	18800115 	stw	r2,4(r3)
    31ac:	d8814917 	ldw	r2,1316(sp)
    31b0:	94800044 	addi	r18,r18,1
    31b4:	8c400044 	addi	r17,r17,1
    31b8:	18800015 	stw	r2,0(r3)
    31bc:	008001c4 	movi	r2,7
    31c0:	dc800e15 	stw	r18,56(sp)
    31c4:	dc400d15 	stw	r17,52(sp)
    31c8:	1440ca16 	blt	r2,r17,34f4 <___vfprintf_internal_r+0x198c>
    31cc:	18c00204 	addi	r3,r3,8
    31d0:	0121c83a 	sub	r16,zero,r4
    31d4:	0400500e 	bge	zero,r16,3318 <___vfprintf_internal_r+0x17b0>
    31d8:	00800404 	movi	r2,16
    31dc:	1400800e 	bge	r2,r16,33e0 <___vfprintf_internal_r+0x1878>
    31e0:	1027883a 	mov	r19,r2
    31e4:	07000074 	movhi	fp,1
    31e8:	e7082b84 	addi	fp,fp,8366
    31ec:	050001c4 	movi	r20,7
    31f0:	00000306 	br	3200 <___vfprintf_internal_r+0x1698>
    31f4:	18c00204 	addi	r3,r3,8
    31f8:	843ffc04 	addi	r16,r16,-16
    31fc:	9c007a0e 	bge	r19,r16,33e8 <___vfprintf_internal_r+0x1880>
    3200:	94800404 	addi	r18,r18,16
    3204:	8c400044 	addi	r17,r17,1
    3208:	1f000015 	stw	fp,0(r3)
    320c:	1cc00115 	stw	r19,4(r3)
    3210:	dc800e15 	stw	r18,56(sp)
    3214:	dc400d15 	stw	r17,52(sp)
    3218:	a47ff60e 	bge	r20,r17,31f4 <___vfprintf_internal_r+0x168c>
    321c:	d9014f17 	ldw	r4,1340(sp)
    3220:	b00b883a 	mov	r5,r22
    3224:	d9800c04 	addi	r6,sp,48
    3228:	0001b100 	call	1b10 <__sprint_r>
    322c:	103c061e 	bne	r2,zero,2248 <___vfprintf_internal_r+0x6e0>
    3230:	dc800e17 	ldw	r18,56(sp)
    3234:	dc400d17 	ldw	r17,52(sp)
    3238:	d8c01904 	addi	r3,sp,100
    323c:	003fee06 	br	31f8 <___vfprintf_internal_r+0x1690>
    3240:	3c000017 	ldw	r16,0(r7)
    3244:	0023883a 	mov	r17,zero
    3248:	39c00104 	addi	r7,r7,4
    324c:	d9c14015 	stw	r7,1280(sp)
    3250:	003e9206 	br	2c9c <___vfprintf_internal_r+0x1134>
    3254:	d9401904 	addi	r5,sp,100
    3258:	dd000f04 	addi	r20,sp,60
    325c:	d9414115 	stw	r5,1284(sp)
    3260:	d9814417 	ldw	r6,1296(sp)
    3264:	880a973a 	slli	r5,r17,28
    3268:	8004d13a 	srli	r2,r16,4
    326c:	810003cc 	andi	r4,r16,15
    3270:	3109883a 	add	r4,r6,r4
    3274:	2884b03a 	or	r2,r5,r2
    3278:	21400003 	ldbu	r5,0(r4)
    327c:	d9014117 	ldw	r4,1284(sp)
    3280:	8806d13a 	srli	r3,r17,4
    3284:	1021883a 	mov	r16,r2
    3288:	213fffc4 	addi	r4,r4,-1
    328c:	d9014115 	stw	r4,1284(sp)
    3290:	d9814117 	ldw	r6,1284(sp)
    3294:	10c8b03a 	or	r4,r2,r3
    3298:	1823883a 	mov	r17,r3
    329c:	31400005 	stb	r5,0(r6)
    32a0:	203fef1e 	bne	r4,zero,3260 <___vfprintf_internal_r+0x16f8>
    32a4:	003ccb06 	br	25d4 <___vfprintf_internal_r+0xa6c>
    32a8:	00800c04 	movi	r2,48
    32ac:	d98018c4 	addi	r6,sp,99
    32b0:	dd000f04 	addi	r20,sp,60
    32b4:	d88018c5 	stb	r2,99(sp)
    32b8:	d9814115 	stw	r6,1284(sp)
    32bc:	003cc506 	br	25d4 <___vfprintf_internal_r+0xa6c>
    32c0:	dc400d17 	ldw	r17,52(sp)
    32c4:	07000074 	movhi	fp,1
    32c8:	e7082f84 	addi	fp,fp,8382
    32cc:	003bc706 	br	21ec <___vfprintf_internal_r+0x684>
    32d0:	d9414c17 	ldw	r5,1328(sp)
    32d4:	2880040c 	andi	r2,r5,16
    32d8:	10007c26 	beq	r2,zero,34cc <___vfprintf_internal_r+0x1964>
    32dc:	38800017 	ldw	r2,0(r7)
    32e0:	39c00104 	addi	r7,r7,4
    32e4:	d9c14015 	stw	r7,1280(sp)
    32e8:	d9814b17 	ldw	r6,1324(sp)
    32ec:	d9c14017 	ldw	r7,1280(sp)
    32f0:	11800015 	stw	r6,0(r2)
    32f4:	003a7806 	br	1cd8 <___vfprintf_internal_r+0x170>
    32f8:	d9014f17 	ldw	r4,1340(sp)
    32fc:	b00b883a 	mov	r5,r22
    3300:	d9800c04 	addi	r6,sp,48
    3304:	0001b100 	call	1b10 <__sprint_r>
    3308:	103bcf1e 	bne	r2,zero,2248 <___vfprintf_internal_r+0x6e0>
    330c:	dc800e17 	ldw	r18,56(sp)
    3310:	dc400d17 	ldw	r17,52(sp)
    3314:	d8c01904 	addi	r3,sp,100
    3318:	d9014717 	ldw	r4,1308(sp)
    331c:	d9414117 	ldw	r5,1284(sp)
    3320:	8c400044 	addi	r17,r17,1
    3324:	9125883a 	add	r18,r18,r4
    3328:	008001c4 	movi	r2,7
    332c:	19400015 	stw	r5,0(r3)
    3330:	19000115 	stw	r4,4(r3)
    3334:	dc800e15 	stw	r18,56(sp)
    3338:	dc400d15 	stw	r17,52(sp)
    333c:	147cee16 	blt	r2,r17,26f8 <___vfprintf_internal_r+0xb90>
    3340:	18c00204 	addi	r3,r3,8
    3344:	003b8606 	br	2160 <___vfprintf_internal_r+0x5f8>
    3348:	38c00017 	ldw	r3,0(r7)
    334c:	39000204 	addi	r4,r7,8
    3350:	d9014015 	stw	r4,1280(sp)
    3354:	d8c14215 	stw	r3,1288(sp)
    3358:	39c00117 	ldw	r7,4(r7)
    335c:	d9c14315 	stw	r7,1292(sp)
    3360:	003e2006 	br	2be4 <___vfprintf_internal_r+0x107c>
    3364:	0005883a 	mov	r2,zero
    3368:	1409c83a 	sub	r4,r2,r16
    336c:	1105803a 	cmpltu	r2,r2,r4
    3370:	044bc83a 	sub	r5,zero,r17
    3374:	2885c83a 	sub	r2,r5,r2
    3378:	2021883a 	mov	r16,r4
    337c:	1023883a 	mov	r17,r2
    3380:	01000044 	movi	r4,1
    3384:	00800b44 	movi	r2,45
    3388:	d8800405 	stb	r2,16(sp)
    338c:	003c8406 	br	25a0 <___vfprintf_internal_r+0xa38>
    3390:	d9014f17 	ldw	r4,1340(sp)
    3394:	b00b883a 	mov	r5,r22
    3398:	d9800c04 	addi	r6,sp,48
    339c:	0001b100 	call	1b10 <__sprint_r>
    33a0:	103ba91e 	bne	r2,zero,2248 <___vfprintf_internal_r+0x6e0>
    33a4:	dc800e17 	ldw	r18,56(sp)
    33a8:	dc400d17 	ldw	r17,52(sp)
    33ac:	d9000517 	ldw	r4,20(sp)
    33b0:	d9401904 	addi	r5,sp,100
    33b4:	003da706 	br	2a54 <___vfprintf_internal_r+0xeec>
    33b8:	d9014f17 	ldw	r4,1340(sp)
    33bc:	b00b883a 	mov	r5,r22
    33c0:	d9800c04 	addi	r6,sp,48
    33c4:	0001b100 	call	1b10 <__sprint_r>
    33c8:	103b9f1e 	bne	r2,zero,2248 <___vfprintf_internal_r+0x6e0>
    33cc:	dc800e17 	ldw	r18,56(sp)
    33d0:	dc400d17 	ldw	r17,52(sp)
    33d4:	d9000517 	ldw	r4,20(sp)
    33d8:	d8c01904 	addi	r3,sp,100
    33dc:	003d9106 	br	2a24 <___vfprintf_internal_r+0xebc>
    33e0:	07000074 	movhi	fp,1
    33e4:	e7082b84 	addi	fp,fp,8366
    33e8:	9425883a 	add	r18,r18,r16
    33ec:	8c400044 	addi	r17,r17,1
    33f0:	008001c4 	movi	r2,7
    33f4:	1f000015 	stw	fp,0(r3)
    33f8:	1c000115 	stw	r16,4(r3)
    33fc:	dc800e15 	stw	r18,56(sp)
    3400:	dc400d15 	stw	r17,52(sp)
    3404:	147fbc16 	blt	r2,r17,32f8 <___vfprintf_internal_r+0x1790>
    3408:	18c00204 	addi	r3,r3,8
    340c:	003fc206 	br	3318 <___vfprintf_internal_r+0x17b0>
    3410:	d9014f17 	ldw	r4,1340(sp)
    3414:	b00b883a 	mov	r5,r22
    3418:	d9800c04 	addi	r6,sp,48
    341c:	0001b100 	call	1b10 <__sprint_r>
    3420:	103b891e 	bne	r2,zero,2248 <___vfprintf_internal_r+0x6e0>
    3424:	dc800e17 	ldw	r18,56(sp)
    3428:	d9000517 	ldw	r4,20(sp)
    342c:	d8c01904 	addi	r3,sp,100
    3430:	003d0206 	br	283c <___vfprintf_internal_r+0xcd4>
    3434:	07000074 	movhi	fp,1
    3438:	e7082b84 	addi	fp,fp,8366
    343c:	003be406 	br	23d0 <___vfprintf_internal_r+0x868>
    3440:	00800074 	movhi	r2,1
    3444:	10881a04 	addi	r2,r2,8296
    3448:	d8814115 	stw	r2,1284(sp)
    344c:	003df506 	br	2c24 <___vfprintf_internal_r+0x10bc>
    3450:	d9014217 	ldw	r4,1288(sp)
    3454:	d9414317 	ldw	r5,1292(sp)
    3458:	00085fc0 	call	85fc <__isnand>
    345c:	10003926 	beq	r2,zero,3544 <___vfprintf_internal_r+0x19dc>
    3460:	d9414d17 	ldw	r5,1332(sp)
    3464:	008011c4 	movi	r2,71
    3468:	1140ce16 	blt	r2,r5,37a4 <___vfprintf_internal_r+0x1c3c>
    346c:	01800074 	movhi	r6,1
    3470:	31881b04 	addi	r6,r6,8300
    3474:	d9814115 	stw	r6,1284(sp)
    3478:	003dea06 	br	2c24 <___vfprintf_internal_r+0x10bc>
    347c:	d9014c17 	ldw	r4,1328(sp)
    3480:	bdc00044 	addi	r23,r23,1
    3484:	b8c00007 	ldb	r3,0(r23)
    3488:	21000814 	ori	r4,r4,32
    348c:	d9014c15 	stw	r4,1328(sp)
    3490:	003a3406 	br	1d64 <___vfprintf_internal_r+0x1fc>
    3494:	dcc14515 	stw	r19,1300(sp)
    3498:	98011016 	blt	r19,zero,38dc <___vfprintf_internal_r+0x1d74>
    349c:	980f883a 	mov	r7,r19
    34a0:	d8014615 	stw	zero,1304(sp)
    34a4:	003c5206 	br	25f0 <___vfprintf_internal_r+0xa88>
    34a8:	d9014f17 	ldw	r4,1340(sp)
    34ac:	b00b883a 	mov	r5,r22
    34b0:	d9800c04 	addi	r6,sp,48
    34b4:	0001b100 	call	1b10 <__sprint_r>
    34b8:	103b631e 	bne	r2,zero,2248 <___vfprintf_internal_r+0x6e0>
    34bc:	dc800e17 	ldw	r18,56(sp)
    34c0:	d9000517 	ldw	r4,20(sp)
    34c4:	d8c01904 	addi	r3,sp,100
    34c8:	003f2e06 	br	3184 <___vfprintf_internal_r+0x161c>
    34cc:	d8c14c17 	ldw	r3,1328(sp)
    34d0:	1880100c 	andi	r2,r3,64
    34d4:	1000a026 	beq	r2,zero,3758 <___vfprintf_internal_r+0x1bf0>
    34d8:	38800017 	ldw	r2,0(r7)
    34dc:	39c00104 	addi	r7,r7,4
    34e0:	d9c14015 	stw	r7,1280(sp)
    34e4:	d9014b17 	ldw	r4,1324(sp)
    34e8:	d9c14017 	ldw	r7,1280(sp)
    34ec:	1100000d 	sth	r4,0(r2)
    34f0:	0039f906 	br	1cd8 <___vfprintf_internal_r+0x170>
    34f4:	d9014f17 	ldw	r4,1340(sp)
    34f8:	b00b883a 	mov	r5,r22
    34fc:	d9800c04 	addi	r6,sp,48
    3500:	0001b100 	call	1b10 <__sprint_r>
    3504:	103b501e 	bne	r2,zero,2248 <___vfprintf_internal_r+0x6e0>
    3508:	dc800e17 	ldw	r18,56(sp)
    350c:	dc400d17 	ldw	r17,52(sp)
    3510:	d9000517 	ldw	r4,20(sp)
    3514:	d8c01904 	addi	r3,sp,100
    3518:	003f2d06 	br	31d0 <___vfprintf_internal_r+0x1668>
    351c:	00800184 	movi	r2,6
    3520:	14c09a36 	bltu	r2,r19,378c <___vfprintf_internal_r+0x1c24>
    3524:	dcc14515 	stw	r19,1300(sp)
    3528:	9800010e 	bge	r19,zero,3530 <___vfprintf_internal_r+0x19c8>
    352c:	d8014515 	stw	zero,1300(sp)
    3530:	00800074 	movhi	r2,1
    3534:	10881d04 	addi	r2,r2,8308
    3538:	980f883a 	mov	r7,r19
    353c:	d8814115 	stw	r2,1284(sp)
    3540:	003a7806 	br	1f24 <___vfprintf_internal_r+0x3bc>
    3544:	00bfffc4 	movi	r2,-1
    3548:	9880e226 	beq	r19,r2,38d4 <___vfprintf_internal_r+0x1d6c>
    354c:	d9414d17 	ldw	r5,1332(sp)
    3550:	008019c4 	movi	r2,103
    3554:	2880dc26 	beq	r5,r2,38c8 <___vfprintf_internal_r+0x1d60>
    3558:	008011c4 	movi	r2,71
    355c:	2880da26 	beq	r5,r2,38c8 <___vfprintf_internal_r+0x1d60>
    3560:	d9414c17 	ldw	r5,1328(sp)
    3564:	d9014317 	ldw	r4,1292(sp)
    3568:	d9814217 	ldw	r6,1288(sp)
    356c:	29404014 	ori	r5,r5,256
    3570:	d9414c15 	stw	r5,1328(sp)
    3574:	2000cc16 	blt	r4,zero,38a8 <___vfprintf_internal_r+0x1d40>
    3578:	3021883a 	mov	r16,r6
    357c:	2023883a 	mov	r17,r4
    3580:	0039883a 	mov	fp,zero
    3584:	d9414d17 	ldw	r5,1332(sp)
    3588:	00801984 	movi	r2,102
    358c:	2880b726 	beq	r5,r2,386c <___vfprintf_internal_r+0x1d04>
    3590:	00801184 	movi	r2,70
    3594:	2880b526 	beq	r5,r2,386c <___vfprintf_internal_r+0x1d04>
    3598:	00801944 	movi	r2,101
    359c:	2880c826 	beq	r5,r2,38c0 <___vfprintf_internal_r+0x1d58>
    35a0:	00801144 	movi	r2,69
    35a4:	2880c626 	beq	r5,r2,38c0 <___vfprintf_internal_r+0x1d58>
    35a8:	9829883a 	mov	r20,r19
    35ac:	d9014f17 	ldw	r4,1340(sp)
    35b0:	d8800504 	addi	r2,sp,20
    35b4:	880d883a 	mov	r6,r17
    35b8:	d8800115 	stw	r2,4(sp)
    35bc:	d8c00604 	addi	r3,sp,24
    35c0:	d8800704 	addi	r2,sp,28
    35c4:	800b883a 	mov	r5,r16
    35c8:	01c00084 	movi	r7,2
    35cc:	d8c00215 	stw	r3,8(sp)
    35d0:	d8800315 	stw	r2,12(sp)
    35d4:	dd000015 	stw	r20,0(sp)
    35d8:	0003d8c0 	call	3d8c <_dtoa_r>
    35dc:	d9814d17 	ldw	r6,1332(sp)
    35e0:	d8814115 	stw	r2,1284(sp)
    35e4:	008019c4 	movi	r2,103
    35e8:	30809526 	beq	r6,r2,3840 <___vfprintf_internal_r+0x1cd8>
    35ec:	d8c14d17 	ldw	r3,1332(sp)
    35f0:	008011c4 	movi	r2,71
    35f4:	18809226 	beq	r3,r2,3840 <___vfprintf_internal_r+0x1cd8>
    35f8:	d9414117 	ldw	r5,1284(sp)
    35fc:	d9814d17 	ldw	r6,1332(sp)
    3600:	00801984 	movi	r2,102
    3604:	2d25883a 	add	r18,r5,r20
    3608:	30808626 	beq	r6,r2,3824 <___vfprintf_internal_r+0x1cbc>
    360c:	00801184 	movi	r2,70
    3610:	30808426 	beq	r6,r2,3824 <___vfprintf_internal_r+0x1cbc>
    3614:	000d883a 	mov	r6,zero
    3618:	000f883a 	mov	r7,zero
    361c:	880b883a 	mov	r5,r17
    3620:	8009883a 	mov	r4,r16
    3624:	000a5a40 	call	a5a4 <__eqdf2>
    3628:	1000751e 	bne	r2,zero,3800 <___vfprintf_internal_r+0x1c98>
    362c:	9005883a 	mov	r2,r18
    3630:	dc800715 	stw	r18,28(sp)
    3634:	d9014117 	ldw	r4,1284(sp)
    3638:	d9414d17 	ldw	r5,1332(sp)
    363c:	00c019c4 	movi	r3,103
    3640:	1125c83a 	sub	r18,r2,r4
    3644:	28c06826 	beq	r5,r3,37e8 <___vfprintf_internal_r+0x1c80>
    3648:	008011c4 	movi	r2,71
    364c:	28806626 	beq	r5,r2,37e8 <___vfprintf_internal_r+0x1c80>
    3650:	d9000517 	ldw	r4,20(sp)
    3654:	d8c14d17 	ldw	r3,1332(sp)
    3658:	00801944 	movi	r2,101
    365c:	10c05516 	blt	r2,r3,37b4 <___vfprintf_internal_r+0x1c4c>
    3660:	213fffc4 	addi	r4,r4,-1
    3664:	d9000515 	stw	r4,20(sp)
    3668:	d8c00805 	stb	r3,32(sp)
    366c:	2021883a 	mov	r16,r4
    3670:	2000c116 	blt	r4,zero,3978 <___vfprintf_internal_r+0x1e10>
    3674:	00800ac4 	movi	r2,43
    3678:	d8800845 	stb	r2,33(sp)
    367c:	00800244 	movi	r2,9
    3680:	1400af0e 	bge	r2,r16,3940 <___vfprintf_internal_r+0x1dd8>
    3684:	1027883a 	mov	r19,r2
    3688:	dc400b84 	addi	r17,sp,46
    368c:	8009883a 	mov	r4,r16
    3690:	01400284 	movi	r5,10
    3694:	000ac8c0 	call	ac8c <__modsi3>
    3698:	10800c04 	addi	r2,r2,48
    369c:	8c7fffc4 	addi	r17,r17,-1
    36a0:	8009883a 	mov	r4,r16
    36a4:	01400284 	movi	r5,10
    36a8:	88800005 	stb	r2,0(r17)
    36ac:	000ac2c0 	call	ac2c <__divsi3>
    36b0:	1021883a 	mov	r16,r2
    36b4:	98bff516 	blt	r19,r2,368c <___vfprintf_internal_r+0x1b24>
    36b8:	10c00c04 	addi	r3,r2,48
    36bc:	d88009c4 	addi	r2,sp,39
    36c0:	108001c4 	addi	r2,r2,7
    36c4:	897fffc4 	addi	r5,r17,-1
    36c8:	88ffffc5 	stb	r3,-1(r17)
    36cc:	2880a72e 	bgeu	r5,r2,396c <___vfprintf_internal_r+0x1e04>
    36d0:	1009883a 	mov	r4,r2
    36d4:	d9800804 	addi	r6,sp,32
    36d8:	d8c00884 	addi	r3,sp,34
    36dc:	28800003 	ldbu	r2,0(r5)
    36e0:	29400044 	addi	r5,r5,1
    36e4:	18800005 	stb	r2,0(r3)
    36e8:	18c00044 	addi	r3,r3,1
    36ec:	293ffb36 	bltu	r5,r4,36dc <___vfprintf_internal_r+0x1b74>
    36f0:	1987c83a 	sub	r3,r3,r6
    36f4:	00800044 	movi	r2,1
    36f8:	d8c14815 	stw	r3,1312(sp)
    36fc:	90cf883a 	add	r7,r18,r3
    3700:	1480960e 	bge	r2,r18,395c <___vfprintf_internal_r+0x1df4>
    3704:	39c00044 	addi	r7,r7,1
    3708:	d9c14515 	stw	r7,1300(sp)
    370c:	38003416 	blt	r7,zero,37e0 <___vfprintf_internal_r+0x1c78>
    3710:	e0803fcc 	andi	r2,fp,255
    3714:	1080201c 	xori	r2,r2,128
    3718:	10bfe004 	addi	r2,r2,-128
    371c:	10004e26 	beq	r2,zero,3858 <___vfprintf_internal_r+0x1cf0>
    3720:	00800b44 	movi	r2,45
    3724:	dc814715 	stw	r18,1308(sp)
    3728:	d8014615 	stw	zero,1304(sp)
    372c:	d8800405 	stb	r2,16(sp)
    3730:	003bb106 	br	25f8 <___vfprintf_internal_r+0xa90>
    3734:	00800b44 	movi	r2,45
    3738:	d8800405 	stb	r2,16(sp)
    373c:	003d3306 	br	2c0c <___vfprintf_internal_r+0x10a4>
    3740:	d9014f17 	ldw	r4,1340(sp)
    3744:	b00b883a 	mov	r5,r22
    3748:	d9800c04 	addi	r6,sp,48
    374c:	0001b100 	call	1b10 <__sprint_r>
    3750:	103abd1e 	bne	r2,zero,2248 <___vfprintf_internal_r+0x6e0>
    3754:	003abb06 	br	2244 <___vfprintf_internal_r+0x6dc>
    3758:	38800017 	ldw	r2,0(r7)
    375c:	39c00104 	addi	r7,r7,4
    3760:	d9c14015 	stw	r7,1280(sp)
    3764:	d9414b17 	ldw	r5,1324(sp)
    3768:	d9c14017 	ldw	r7,1280(sp)
    376c:	11400015 	stw	r5,0(r2)
    3770:	00395906 	br	1cd8 <___vfprintf_internal_r+0x170>
    3774:	980f883a 	mov	r7,r19
    3778:	dcc14515 	stw	r19,1300(sp)
    377c:	d8014615 	stw	zero,1304(sp)
    3780:	003b9b06 	br	25f0 <___vfprintf_internal_r+0xa88>
    3784:	0027883a 	mov	r19,zero
    3788:	00397806 	br	1d6c <___vfprintf_internal_r+0x204>
    378c:	00c00074 	movhi	r3,1
    3790:	18c81d04 	addi	r3,r3,8308
    3794:	100f883a 	mov	r7,r2
    3798:	d8814515 	stw	r2,1300(sp)
    379c:	d8c14115 	stw	r3,1284(sp)
    37a0:	0039e006 	br	1f24 <___vfprintf_internal_r+0x3bc>
    37a4:	00800074 	movhi	r2,1
    37a8:	10881c04 	addi	r2,r2,8304
    37ac:	d8814115 	stw	r2,1284(sp)
    37b0:	003d1c06 	br	2c24 <___vfprintf_internal_r+0x10bc>
    37b4:	d9414d17 	ldw	r5,1332(sp)
    37b8:	00801984 	movi	r2,102
    37bc:	28804926 	beq	r5,r2,38e4 <___vfprintf_internal_r+0x1d7c>
    37c0:	200f883a 	mov	r7,r4
    37c4:	24805716 	blt	r4,r18,3924 <___vfprintf_internal_r+0x1dbc>
    37c8:	d9414c17 	ldw	r5,1328(sp)
    37cc:	2880004c 	andi	r2,r5,1
    37d0:	10000126 	beq	r2,zero,37d8 <___vfprintf_internal_r+0x1c70>
    37d4:	21c00044 	addi	r7,r4,1
    37d8:	d9c14515 	stw	r7,1300(sp)
    37dc:	383fcc0e 	bge	r7,zero,3710 <___vfprintf_internal_r+0x1ba8>
    37e0:	d8014515 	stw	zero,1300(sp)
    37e4:	003fca06 	br	3710 <___vfprintf_internal_r+0x1ba8>
    37e8:	d9000517 	ldw	r4,20(sp)
    37ec:	00bfff04 	movi	r2,-4
    37f0:	1100480e 	bge	r2,r4,3914 <___vfprintf_internal_r+0x1dac>
    37f4:	99004716 	blt	r19,r4,3914 <___vfprintf_internal_r+0x1dac>
    37f8:	d8c14d15 	stw	r3,1332(sp)
    37fc:	003ff006 	br	37c0 <___vfprintf_internal_r+0x1c58>
    3800:	d8800717 	ldw	r2,28(sp)
    3804:	14bf8b2e 	bgeu	r2,r18,3634 <___vfprintf_internal_r+0x1acc>
    3808:	9007883a 	mov	r3,r18
    380c:	01000c04 	movi	r4,48
    3810:	11000005 	stb	r4,0(r2)
    3814:	10800044 	addi	r2,r2,1
    3818:	d8800715 	stw	r2,28(sp)
    381c:	18bffc1e 	bne	r3,r2,3810 <___vfprintf_internal_r+0x1ca8>
    3820:	003f8406 	br	3634 <___vfprintf_internal_r+0x1acc>
    3824:	d8814117 	ldw	r2,1284(sp)
    3828:	10c00007 	ldb	r3,0(r2)
    382c:	00800c04 	movi	r2,48
    3830:	18805b26 	beq	r3,r2,39a0 <___vfprintf_internal_r+0x1e38>
    3834:	d9000517 	ldw	r4,20(sp)
    3838:	9125883a 	add	r18,r18,r4
    383c:	003f7506 	br	3614 <___vfprintf_internal_r+0x1aac>
    3840:	d9014c17 	ldw	r4,1328(sp)
    3844:	2080004c 	andi	r2,r4,1
    3848:	1005003a 	cmpeq	r2,r2,zero
    384c:	103f6a26 	beq	r2,zero,35f8 <___vfprintf_internal_r+0x1a90>
    3850:	d8800717 	ldw	r2,28(sp)
    3854:	003f7706 	br	3634 <___vfprintf_internal_r+0x1acc>
    3858:	d9c14515 	stw	r7,1300(sp)
    385c:	38004d16 	blt	r7,zero,3994 <___vfprintf_internal_r+0x1e2c>
    3860:	dc814715 	stw	r18,1308(sp)
    3864:	d8014615 	stw	zero,1304(sp)
    3868:	003b6106 	br	25f0 <___vfprintf_internal_r+0xa88>
    386c:	d9014f17 	ldw	r4,1340(sp)
    3870:	d8800504 	addi	r2,sp,20
    3874:	d8800115 	stw	r2,4(sp)
    3878:	d8c00604 	addi	r3,sp,24
    387c:	d8800704 	addi	r2,sp,28
    3880:	800b883a 	mov	r5,r16
    3884:	880d883a 	mov	r6,r17
    3888:	01c000c4 	movi	r7,3
    388c:	d8c00215 	stw	r3,8(sp)
    3890:	d8800315 	stw	r2,12(sp)
    3894:	dcc00015 	stw	r19,0(sp)
    3898:	9829883a 	mov	r20,r19
    389c:	0003d8c0 	call	3d8c <_dtoa_r>
    38a0:	d8814115 	stw	r2,1284(sp)
    38a4:	003f5106 	br	35ec <___vfprintf_internal_r+0x1a84>
    38a8:	d8c14217 	ldw	r3,1288(sp)
    38ac:	d9014317 	ldw	r4,1292(sp)
    38b0:	07000b44 	movi	fp,45
    38b4:	1821883a 	mov	r16,r3
    38b8:	2460003c 	xorhi	r17,r4,32768
    38bc:	003f3106 	br	3584 <___vfprintf_internal_r+0x1a1c>
    38c0:	9d000044 	addi	r20,r19,1
    38c4:	003f3906 	br	35ac <___vfprintf_internal_r+0x1a44>
    38c8:	983f251e 	bne	r19,zero,3560 <___vfprintf_internal_r+0x19f8>
    38cc:	04c00044 	movi	r19,1
    38d0:	003f2306 	br	3560 <___vfprintf_internal_r+0x19f8>
    38d4:	04c00184 	movi	r19,6
    38d8:	003f2106 	br	3560 <___vfprintf_internal_r+0x19f8>
    38dc:	d8014515 	stw	zero,1300(sp)
    38e0:	003eee06 	br	349c <___vfprintf_internal_r+0x1934>
    38e4:	200f883a 	mov	r7,r4
    38e8:	0100370e 	bge	zero,r4,39c8 <___vfprintf_internal_r+0x1e60>
    38ec:	9800031e 	bne	r19,zero,38fc <___vfprintf_internal_r+0x1d94>
    38f0:	d9814c17 	ldw	r6,1328(sp)
    38f4:	3080004c 	andi	r2,r6,1
    38f8:	103fb726 	beq	r2,zero,37d8 <___vfprintf_internal_r+0x1c70>
    38fc:	20800044 	addi	r2,r4,1
    3900:	98a7883a 	add	r19,r19,r2
    3904:	dcc14515 	stw	r19,1300(sp)
    3908:	980f883a 	mov	r7,r19
    390c:	983f800e 	bge	r19,zero,3710 <___vfprintf_internal_r+0x1ba8>
    3910:	003fb306 	br	37e0 <___vfprintf_internal_r+0x1c78>
    3914:	d9814d17 	ldw	r6,1332(sp)
    3918:	31bfff84 	addi	r6,r6,-2
    391c:	d9814d15 	stw	r6,1332(sp)
    3920:	003f4c06 	br	3654 <___vfprintf_internal_r+0x1aec>
    3924:	0100180e 	bge	zero,r4,3988 <___vfprintf_internal_r+0x1e20>
    3928:	00800044 	movi	r2,1
    392c:	1485883a 	add	r2,r2,r18
    3930:	d8814515 	stw	r2,1300(sp)
    3934:	100f883a 	mov	r7,r2
    3938:	103f750e 	bge	r2,zero,3710 <___vfprintf_internal_r+0x1ba8>
    393c:	003fa806 	br	37e0 <___vfprintf_internal_r+0x1c78>
    3940:	80c00c04 	addi	r3,r16,48
    3944:	00800c04 	movi	r2,48
    3948:	d8c008c5 	stb	r3,35(sp)
    394c:	d9800804 	addi	r6,sp,32
    3950:	d8c00904 	addi	r3,sp,36
    3954:	d8800885 	stb	r2,34(sp)
    3958:	003f6506 	br	36f0 <___vfprintf_internal_r+0x1b88>
    395c:	d9014c17 	ldw	r4,1328(sp)
    3960:	2084703a 	and	r2,r4,r2
    3964:	103f9c26 	beq	r2,zero,37d8 <___vfprintf_internal_r+0x1c70>
    3968:	003f6606 	br	3704 <___vfprintf_internal_r+0x1b9c>
    396c:	d9800804 	addi	r6,sp,32
    3970:	d8c00884 	addi	r3,sp,34
    3974:	003f5e06 	br	36f0 <___vfprintf_internal_r+0x1b88>
    3978:	00800b44 	movi	r2,45
    397c:	0121c83a 	sub	r16,zero,r4
    3980:	d8800845 	stb	r2,33(sp)
    3984:	003f3d06 	br	367c <___vfprintf_internal_r+0x1b14>
    3988:	00800084 	movi	r2,2
    398c:	1105c83a 	sub	r2,r2,r4
    3990:	003fe606 	br	392c <___vfprintf_internal_r+0x1dc4>
    3994:	d8014515 	stw	zero,1300(sp)
    3998:	dc814715 	stw	r18,1308(sp)
    399c:	003fb106 	br	3864 <___vfprintf_internal_r+0x1cfc>
    39a0:	000d883a 	mov	r6,zero
    39a4:	000f883a 	mov	r7,zero
    39a8:	8009883a 	mov	r4,r16
    39ac:	880b883a 	mov	r5,r17
    39b0:	000a62c0 	call	a62c <__nedf2>
    39b4:	103f9f26 	beq	r2,zero,3834 <___vfprintf_internal_r+0x1ccc>
    39b8:	00800044 	movi	r2,1
    39bc:	1509c83a 	sub	r4,r2,r20
    39c0:	d9000515 	stw	r4,20(sp)
    39c4:	003f9b06 	br	3834 <___vfprintf_internal_r+0x1ccc>
    39c8:	98000d1e 	bne	r19,zero,3a00 <___vfprintf_internal_r+0x1e98>
    39cc:	d8c14c17 	ldw	r3,1328(sp)
    39d0:	1880004c 	andi	r2,r3,1
    39d4:	10000a1e 	bne	r2,zero,3a00 <___vfprintf_internal_r+0x1e98>
    39d8:	01000044 	movi	r4,1
    39dc:	200f883a 	mov	r7,r4
    39e0:	d9014515 	stw	r4,1300(sp)
    39e4:	003f4a06 	br	3710 <___vfprintf_internal_r+0x1ba8>
    39e8:	3cc00017 	ldw	r19,0(r7)
    39ec:	39c00104 	addi	r7,r7,4
    39f0:	983d0e0e 	bge	r19,zero,2e2c <___vfprintf_internal_r+0x12c4>
    39f4:	b8c00007 	ldb	r3,0(r23)
    39f8:	04ffffc4 	movi	r19,-1
    39fc:	0038d906 	br	1d64 <___vfprintf_internal_r+0x1fc>
    3a00:	9cc00084 	addi	r19,r19,2
    3a04:	dcc14515 	stw	r19,1300(sp)
    3a08:	980f883a 	mov	r7,r19
    3a0c:	983f400e 	bge	r19,zero,3710 <___vfprintf_internal_r+0x1ba8>
    3a10:	003f7306 	br	37e0 <___vfprintf_internal_r+0x1c78>

00003a14 <__vfprintf_internal>:
    3a14:	00800074 	movhi	r2,1
    3a18:	10907804 	addi	r2,r2,16864
    3a1c:	2013883a 	mov	r9,r4
    3a20:	11000017 	ldw	r4,0(r2)
    3a24:	2805883a 	mov	r2,r5
    3a28:	300f883a 	mov	r7,r6
    3a2c:	480b883a 	mov	r5,r9
    3a30:	100d883a 	mov	r6,r2
    3a34:	0001b681 	jmpi	1b68 <___vfprintf_internal_r>

00003a38 <__swsetup_r>:
    3a38:	00800074 	movhi	r2,1
    3a3c:	10907804 	addi	r2,r2,16864
    3a40:	10c00017 	ldw	r3,0(r2)
    3a44:	defffd04 	addi	sp,sp,-12
    3a48:	dc400115 	stw	r17,4(sp)
    3a4c:	dc000015 	stw	r16,0(sp)
    3a50:	dfc00215 	stw	ra,8(sp)
    3a54:	2023883a 	mov	r17,r4
    3a58:	2821883a 	mov	r16,r5
    3a5c:	18000226 	beq	r3,zero,3a68 <__swsetup_r+0x30>
    3a60:	18800e17 	ldw	r2,56(r3)
    3a64:	10001f26 	beq	r2,zero,3ae4 <__swsetup_r+0xac>
    3a68:	8100030b 	ldhu	r4,12(r16)
    3a6c:	2080020c 	andi	r2,r4,8
    3a70:	10002826 	beq	r2,zero,3b14 <__swsetup_r+0xdc>
    3a74:	81400417 	ldw	r5,16(r16)
    3a78:	28001d26 	beq	r5,zero,3af0 <__swsetup_r+0xb8>
    3a7c:	2080004c 	andi	r2,r4,1
    3a80:	1005003a 	cmpeq	r2,r2,zero
    3a84:	10000b26 	beq	r2,zero,3ab4 <__swsetup_r+0x7c>
    3a88:	2080008c 	andi	r2,r4,2
    3a8c:	10001226 	beq	r2,zero,3ad8 <__swsetup_r+0xa0>
    3a90:	0005883a 	mov	r2,zero
    3a94:	80800215 	stw	r2,8(r16)
    3a98:	28000b26 	beq	r5,zero,3ac8 <__swsetup_r+0x90>
    3a9c:	0005883a 	mov	r2,zero
    3aa0:	dfc00217 	ldw	ra,8(sp)
    3aa4:	dc400117 	ldw	r17,4(sp)
    3aa8:	dc000017 	ldw	r16,0(sp)
    3aac:	dec00304 	addi	sp,sp,12
    3ab0:	f800283a 	ret
    3ab4:	80800517 	ldw	r2,20(r16)
    3ab8:	80000215 	stw	zero,8(r16)
    3abc:	0085c83a 	sub	r2,zero,r2
    3ac0:	80800615 	stw	r2,24(r16)
    3ac4:	283ff51e 	bne	r5,zero,3a9c <__swsetup_r+0x64>
    3ac8:	2080200c 	andi	r2,r4,128
    3acc:	103ff326 	beq	r2,zero,3a9c <__swsetup_r+0x64>
    3ad0:	00bfffc4 	movi	r2,-1
    3ad4:	003ff206 	br	3aa0 <__swsetup_r+0x68>
    3ad8:	80800517 	ldw	r2,20(r16)
    3adc:	80800215 	stw	r2,8(r16)
    3ae0:	003fed06 	br	3a98 <__swsetup_r+0x60>
    3ae4:	1809883a 	mov	r4,r3
    3ae8:	00055d80 	call	55d8 <__sinit>
    3aec:	003fde06 	br	3a68 <__swsetup_r+0x30>
    3af0:	20c0a00c 	andi	r3,r4,640
    3af4:	00808004 	movi	r2,512
    3af8:	18bfe026 	beq	r3,r2,3a7c <__swsetup_r+0x44>
    3afc:	8809883a 	mov	r4,r17
    3b00:	800b883a 	mov	r5,r16
    3b04:	00063500 	call	6350 <__smakebuf_r>
    3b08:	8100030b 	ldhu	r4,12(r16)
    3b0c:	81400417 	ldw	r5,16(r16)
    3b10:	003fda06 	br	3a7c <__swsetup_r+0x44>
    3b14:	2080040c 	andi	r2,r4,16
    3b18:	103fed26 	beq	r2,zero,3ad0 <__swsetup_r+0x98>
    3b1c:	2080010c 	andi	r2,r4,4
    3b20:	10001226 	beq	r2,zero,3b6c <__swsetup_r+0x134>
    3b24:	81400c17 	ldw	r5,48(r16)
    3b28:	28000526 	beq	r5,zero,3b40 <__swsetup_r+0x108>
    3b2c:	80801004 	addi	r2,r16,64
    3b30:	28800226 	beq	r5,r2,3b3c <__swsetup_r+0x104>
    3b34:	8809883a 	mov	r4,r17
    3b38:	000595c0 	call	595c <_free_r>
    3b3c:	80000c15 	stw	zero,48(r16)
    3b40:	8080030b 	ldhu	r2,12(r16)
    3b44:	81400417 	ldw	r5,16(r16)
    3b48:	80000115 	stw	zero,4(r16)
    3b4c:	10bff6cc 	andi	r2,r2,65499
    3b50:	8080030d 	sth	r2,12(r16)
    3b54:	81400015 	stw	r5,0(r16)
    3b58:	8080030b 	ldhu	r2,12(r16)
    3b5c:	10800214 	ori	r2,r2,8
    3b60:	113fffcc 	andi	r4,r2,65535
    3b64:	8080030d 	sth	r2,12(r16)
    3b68:	003fc306 	br	3a78 <__swsetup_r+0x40>
    3b6c:	81400417 	ldw	r5,16(r16)
    3b70:	003ff906 	br	3b58 <__swsetup_r+0x120>

00003b74 <quorem>:
    3b74:	28c00417 	ldw	r3,16(r5)
    3b78:	20800417 	ldw	r2,16(r4)
    3b7c:	defff604 	addi	sp,sp,-40
    3b80:	ddc00715 	stw	r23,28(sp)
    3b84:	dd400515 	stw	r21,20(sp)
    3b88:	dfc00915 	stw	ra,36(sp)
    3b8c:	df000815 	stw	fp,32(sp)
    3b90:	dd800615 	stw	r22,24(sp)
    3b94:	dd000415 	stw	r20,16(sp)
    3b98:	dcc00315 	stw	r19,12(sp)
    3b9c:	dc800215 	stw	r18,8(sp)
    3ba0:	dc400115 	stw	r17,4(sp)
    3ba4:	dc000015 	stw	r16,0(sp)
    3ba8:	202f883a 	mov	r23,r4
    3bac:	282b883a 	mov	r21,r5
    3bb0:	10c07416 	blt	r2,r3,3d84 <quorem+0x210>
    3bb4:	1c7fffc4 	addi	r17,r3,-1
    3bb8:	8c45883a 	add	r2,r17,r17
    3bbc:	1085883a 	add	r2,r2,r2
    3bc0:	2c000504 	addi	r16,r5,20
    3bc4:	24c00504 	addi	r19,r4,20
    3bc8:	14ed883a 	add	r22,r2,r19
    3bcc:	80a5883a 	add	r18,r16,r2
    3bd0:	b7000017 	ldw	fp,0(r22)
    3bd4:	91400017 	ldw	r5,0(r18)
    3bd8:	e009883a 	mov	r4,fp
    3bdc:	29400044 	addi	r5,r5,1
    3be0:	000acec0 	call	acec <__udivsi3>
    3be4:	1029883a 	mov	r20,r2
    3be8:	10003c1e 	bne	r2,zero,3cdc <quorem+0x168>
    3bec:	a80b883a 	mov	r5,r21
    3bf0:	b809883a 	mov	r4,r23
    3bf4:	0006f440 	call	6f44 <__mcmp>
    3bf8:	10002b16 	blt	r2,zero,3ca8 <quorem+0x134>
    3bfc:	a5000044 	addi	r20,r20,1
    3c00:	980f883a 	mov	r7,r19
    3c04:	0011883a 	mov	r8,zero
    3c08:	0009883a 	mov	r4,zero
    3c0c:	81400017 	ldw	r5,0(r16)
    3c10:	38c00017 	ldw	r3,0(r7)
    3c14:	84000104 	addi	r16,r16,4
    3c18:	28bfffcc 	andi	r2,r5,65535
    3c1c:	2085883a 	add	r2,r4,r2
    3c20:	11bfffcc 	andi	r6,r2,65535
    3c24:	193fffcc 	andi	r4,r3,65535
    3c28:	1004d43a 	srli	r2,r2,16
    3c2c:	280ad43a 	srli	r5,r5,16
    3c30:	2189c83a 	sub	r4,r4,r6
    3c34:	2209883a 	add	r4,r4,r8
    3c38:	1806d43a 	srli	r3,r3,16
    3c3c:	288b883a 	add	r5,r5,r2
    3c40:	200dd43a 	srai	r6,r4,16
    3c44:	28bfffcc 	andi	r2,r5,65535
    3c48:	1887c83a 	sub	r3,r3,r2
    3c4c:	1987883a 	add	r3,r3,r6
    3c50:	3900000d 	sth	r4,0(r7)
    3c54:	38c0008d 	sth	r3,2(r7)
    3c58:	2808d43a 	srli	r4,r5,16
    3c5c:	39c00104 	addi	r7,r7,4
    3c60:	1811d43a 	srai	r8,r3,16
    3c64:	943fe92e 	bgeu	r18,r16,3c0c <quorem+0x98>
    3c68:	8c45883a 	add	r2,r17,r17
    3c6c:	1085883a 	add	r2,r2,r2
    3c70:	9885883a 	add	r2,r19,r2
    3c74:	10c00017 	ldw	r3,0(r2)
    3c78:	18000b1e 	bne	r3,zero,3ca8 <quorem+0x134>
    3c7c:	113fff04 	addi	r4,r2,-4
    3c80:	9900082e 	bgeu	r19,r4,3ca4 <quorem+0x130>
    3c84:	10bfff17 	ldw	r2,-4(r2)
    3c88:	10000326 	beq	r2,zero,3c98 <quorem+0x124>
    3c8c:	00000506 	br	3ca4 <quorem+0x130>
    3c90:	20800017 	ldw	r2,0(r4)
    3c94:	1000031e 	bne	r2,zero,3ca4 <quorem+0x130>
    3c98:	213fff04 	addi	r4,r4,-4
    3c9c:	8c7fffc4 	addi	r17,r17,-1
    3ca0:	993ffb36 	bltu	r19,r4,3c90 <quorem+0x11c>
    3ca4:	bc400415 	stw	r17,16(r23)
    3ca8:	a005883a 	mov	r2,r20
    3cac:	dfc00917 	ldw	ra,36(sp)
    3cb0:	df000817 	ldw	fp,32(sp)
    3cb4:	ddc00717 	ldw	r23,28(sp)
    3cb8:	dd800617 	ldw	r22,24(sp)
    3cbc:	dd400517 	ldw	r21,20(sp)
    3cc0:	dd000417 	ldw	r20,16(sp)
    3cc4:	dcc00317 	ldw	r19,12(sp)
    3cc8:	dc800217 	ldw	r18,8(sp)
    3ccc:	dc400117 	ldw	r17,4(sp)
    3cd0:	dc000017 	ldw	r16,0(sp)
    3cd4:	dec00a04 	addi	sp,sp,40
    3cd8:	f800283a 	ret
    3cdc:	980f883a 	mov	r7,r19
    3ce0:	8011883a 	mov	r8,r16
    3ce4:	0013883a 	mov	r9,zero
    3ce8:	000d883a 	mov	r6,zero
    3cec:	40c00017 	ldw	r3,0(r8)
    3cf0:	39000017 	ldw	r4,0(r7)
    3cf4:	42000104 	addi	r8,r8,4
    3cf8:	18bfffcc 	andi	r2,r3,65535
    3cfc:	a085383a 	mul	r2,r20,r2
    3d00:	1806d43a 	srli	r3,r3,16
    3d04:	217fffcc 	andi	r5,r4,65535
    3d08:	3085883a 	add	r2,r6,r2
    3d0c:	11bfffcc 	andi	r6,r2,65535
    3d10:	a0c7383a 	mul	r3,r20,r3
    3d14:	1004d43a 	srli	r2,r2,16
    3d18:	298bc83a 	sub	r5,r5,r6
    3d1c:	2a4b883a 	add	r5,r5,r9
    3d20:	2008d43a 	srli	r4,r4,16
    3d24:	1887883a 	add	r3,r3,r2
    3d28:	280dd43a 	srai	r6,r5,16
    3d2c:	18bfffcc 	andi	r2,r3,65535
    3d30:	2089c83a 	sub	r4,r4,r2
    3d34:	2189883a 	add	r4,r4,r6
    3d38:	3900008d 	sth	r4,2(r7)
    3d3c:	3940000d 	sth	r5,0(r7)
    3d40:	180cd43a 	srli	r6,r3,16
    3d44:	39c00104 	addi	r7,r7,4
    3d48:	2013d43a 	srai	r9,r4,16
    3d4c:	923fe72e 	bgeu	r18,r8,3cec <quorem+0x178>
    3d50:	e03fa61e 	bne	fp,zero,3bec <quorem+0x78>
    3d54:	b0ffff04 	addi	r3,r22,-4
    3d58:	98c0082e 	bgeu	r19,r3,3d7c <quorem+0x208>
    3d5c:	b0bfff17 	ldw	r2,-4(r22)
    3d60:	10000326 	beq	r2,zero,3d70 <quorem+0x1fc>
    3d64:	00000506 	br	3d7c <quorem+0x208>
    3d68:	18800017 	ldw	r2,0(r3)
    3d6c:	1000031e 	bne	r2,zero,3d7c <quorem+0x208>
    3d70:	18ffff04 	addi	r3,r3,-4
    3d74:	8c7fffc4 	addi	r17,r17,-1
    3d78:	98fffb36 	bltu	r19,r3,3d68 <quorem+0x1f4>
    3d7c:	bc400415 	stw	r17,16(r23)
    3d80:	003f9a06 	br	3bec <quorem+0x78>
    3d84:	0005883a 	mov	r2,zero
    3d88:	003fc806 	br	3cac <quorem+0x138>

00003d8c <_dtoa_r>:
    3d8c:	22001017 	ldw	r8,64(r4)
    3d90:	deffda04 	addi	sp,sp,-152
    3d94:	dd402115 	stw	r21,132(sp)
    3d98:	dd002015 	stw	r20,128(sp)
    3d9c:	dc801e15 	stw	r18,120(sp)
    3da0:	dc401d15 	stw	r17,116(sp)
    3da4:	dfc02515 	stw	ra,148(sp)
    3da8:	df002415 	stw	fp,144(sp)
    3dac:	ddc02315 	stw	r23,140(sp)
    3db0:	dd802215 	stw	r22,136(sp)
    3db4:	dcc01f15 	stw	r19,124(sp)
    3db8:	dc001c15 	stw	r16,112(sp)
    3dbc:	d9001615 	stw	r4,88(sp)
    3dc0:	3023883a 	mov	r17,r6
    3dc4:	2829883a 	mov	r20,r5
    3dc8:	d9c01715 	stw	r7,92(sp)
    3dcc:	dc802817 	ldw	r18,160(sp)
    3dd0:	302b883a 	mov	r21,r6
    3dd4:	40000a26 	beq	r8,zero,3e00 <_dtoa_r+0x74>
    3dd8:	20801117 	ldw	r2,68(r4)
    3ddc:	400b883a 	mov	r5,r8
    3de0:	40800115 	stw	r2,4(r8)
    3de4:	20c01117 	ldw	r3,68(r4)
    3de8:	00800044 	movi	r2,1
    3dec:	10c4983a 	sll	r2,r2,r3
    3df0:	40800215 	stw	r2,8(r8)
    3df4:	0006de80 	call	6de8 <_Bfree>
    3df8:	d8c01617 	ldw	r3,88(sp)
    3dfc:	18001015 	stw	zero,64(r3)
    3e00:	8800a316 	blt	r17,zero,4090 <_dtoa_r+0x304>
    3e04:	90000015 	stw	zero,0(r18)
    3e08:	a8dffc2c 	andhi	r3,r21,32752
    3e0c:	009ffc34 	movhi	r2,32752
    3e10:	18809126 	beq	r3,r2,4058 <_dtoa_r+0x2cc>
    3e14:	000d883a 	mov	r6,zero
    3e18:	000f883a 	mov	r7,zero
    3e1c:	a009883a 	mov	r4,r20
    3e20:	a80b883a 	mov	r5,r21
    3e24:	dd001215 	stw	r20,72(sp)
    3e28:	dd401315 	stw	r21,76(sp)
    3e2c:	000a62c0 	call	a62c <__nedf2>
    3e30:	1000171e 	bne	r2,zero,3e90 <_dtoa_r+0x104>
    3e34:	d9802717 	ldw	r6,156(sp)
    3e38:	00800044 	movi	r2,1
    3e3c:	30800015 	stw	r2,0(r6)
    3e40:	d8802917 	ldw	r2,164(sp)
    3e44:	10029b26 	beq	r2,zero,48b4 <_dtoa_r+0xb28>
    3e48:	d9002917 	ldw	r4,164(sp)
    3e4c:	00800074 	movhi	r2,1
    3e50:	10882b44 	addi	r2,r2,8365
    3e54:	10ffffc4 	addi	r3,r2,-1
    3e58:	20800015 	stw	r2,0(r4)
    3e5c:	1805883a 	mov	r2,r3
    3e60:	dfc02517 	ldw	ra,148(sp)
    3e64:	df002417 	ldw	fp,144(sp)
    3e68:	ddc02317 	ldw	r23,140(sp)
    3e6c:	dd802217 	ldw	r22,136(sp)
    3e70:	dd402117 	ldw	r21,132(sp)
    3e74:	dd002017 	ldw	r20,128(sp)
    3e78:	dcc01f17 	ldw	r19,124(sp)
    3e7c:	dc801e17 	ldw	r18,120(sp)
    3e80:	dc401d17 	ldw	r17,116(sp)
    3e84:	dc001c17 	ldw	r16,112(sp)
    3e88:	dec02604 	addi	sp,sp,152
    3e8c:	f800283a 	ret
    3e90:	d9001617 	ldw	r4,88(sp)
    3e94:	d9401217 	ldw	r5,72(sp)
    3e98:	d8800104 	addi	r2,sp,4
    3e9c:	a80d883a 	mov	r6,r21
    3ea0:	d9c00204 	addi	r7,sp,8
    3ea4:	d8800015 	stw	r2,0(sp)
    3ea8:	00074240 	call	7424 <__d2b>
    3eac:	d8800715 	stw	r2,28(sp)
    3eb0:	a804d53a 	srli	r2,r21,20
    3eb4:	1101ffcc 	andi	r4,r2,2047
    3eb8:	20008626 	beq	r4,zero,40d4 <_dtoa_r+0x348>
    3ebc:	d8c01217 	ldw	r3,72(sp)
    3ec0:	00800434 	movhi	r2,16
    3ec4:	10bfffc4 	addi	r2,r2,-1
    3ec8:	ddc00117 	ldw	r23,4(sp)
    3ecc:	a884703a 	and	r2,r21,r2
    3ed0:	1811883a 	mov	r8,r3
    3ed4:	124ffc34 	orhi	r9,r2,16368
    3ed8:	25bf0044 	addi	r22,r4,-1023
    3edc:	d8000815 	stw	zero,32(sp)
    3ee0:	0005883a 	mov	r2,zero
    3ee4:	00cffe34 	movhi	r3,16376
    3ee8:	480b883a 	mov	r5,r9
    3eec:	4009883a 	mov	r4,r8
    3ef0:	180f883a 	mov	r7,r3
    3ef4:	100d883a 	mov	r6,r2
    3ef8:	0009e940 	call	9e94 <__subdf3>
    3efc:	0218dbf4 	movhi	r8,25455
    3f00:	4210d844 	addi	r8,r8,17249
    3f04:	024ff4f4 	movhi	r9,16339
    3f08:	4a61e9c4 	addi	r9,r9,-30809
    3f0c:	480f883a 	mov	r7,r9
    3f10:	400d883a 	mov	r6,r8
    3f14:	180b883a 	mov	r5,r3
    3f18:	1009883a 	mov	r4,r2
    3f1c:	0009f880 	call	9f88 <__muldf3>
    3f20:	0222d874 	movhi	r8,35681
    3f24:	42322cc4 	addi	r8,r8,-14157
    3f28:	024ff1f4 	movhi	r9,16327
    3f2c:	4a628a04 	addi	r9,r9,-30168
    3f30:	480f883a 	mov	r7,r9
    3f34:	400d883a 	mov	r6,r8
    3f38:	180b883a 	mov	r5,r3
    3f3c:	1009883a 	mov	r4,r2
    3f40:	0009f140 	call	9f14 <__adddf3>
    3f44:	b009883a 	mov	r4,r22
    3f48:	1021883a 	mov	r16,r2
    3f4c:	1823883a 	mov	r17,r3
    3f50:	000a84c0 	call	a84c <__floatsidf>
    3f54:	021427f4 	movhi	r8,20639
    3f58:	421e7ec4 	addi	r8,r8,31227
    3f5c:	024ff4f4 	movhi	r9,16339
    3f60:	4a5104c4 	addi	r9,r9,17427
    3f64:	480f883a 	mov	r7,r9
    3f68:	400d883a 	mov	r6,r8
    3f6c:	180b883a 	mov	r5,r3
    3f70:	1009883a 	mov	r4,r2
    3f74:	0009f880 	call	9f88 <__muldf3>
    3f78:	180f883a 	mov	r7,r3
    3f7c:	880b883a 	mov	r5,r17
    3f80:	100d883a 	mov	r6,r2
    3f84:	8009883a 	mov	r4,r16
    3f88:	0009f140 	call	9f14 <__adddf3>
    3f8c:	1009883a 	mov	r4,r2
    3f90:	180b883a 	mov	r5,r3
    3f94:	1021883a 	mov	r16,r2
    3f98:	1823883a 	mov	r17,r3
    3f9c:	000a9440 	call	a944 <__fixdfsi>
    3fa0:	000d883a 	mov	r6,zero
    3fa4:	000f883a 	mov	r7,zero
    3fa8:	8009883a 	mov	r4,r16
    3fac:	880b883a 	mov	r5,r17
    3fb0:	d8800d15 	stw	r2,52(sp)
    3fb4:	000a7c40 	call	a7c4 <__ltdf2>
    3fb8:	10031716 	blt	r2,zero,4c18 <_dtoa_r+0xe8c>
    3fbc:	d8c00d17 	ldw	r3,52(sp)
    3fc0:	00800584 	movi	r2,22
    3fc4:	10c1482e 	bgeu	r2,r3,44e8 <_dtoa_r+0x75c>
    3fc8:	01000044 	movi	r4,1
    3fcc:	d9000c15 	stw	r4,48(sp)
    3fd0:	bd85c83a 	sub	r2,r23,r22
    3fd4:	11bfffc4 	addi	r6,r2,-1
    3fd8:	30030b16 	blt	r6,zero,4c08 <_dtoa_r+0xe7c>
    3fdc:	d9800a15 	stw	r6,40(sp)
    3fe0:	d8001115 	stw	zero,68(sp)
    3fe4:	d8c00d17 	ldw	r3,52(sp)
    3fe8:	1802ff16 	blt	r3,zero,4be8 <_dtoa_r+0xe5c>
    3fec:	d9000a17 	ldw	r4,40(sp)
    3ff0:	d8c00915 	stw	r3,36(sp)
    3ff4:	d8001015 	stw	zero,64(sp)
    3ff8:	20c9883a 	add	r4,r4,r3
    3ffc:	d9000a15 	stw	r4,40(sp)
    4000:	d9001717 	ldw	r4,92(sp)
    4004:	00800244 	movi	r2,9
    4008:	11004636 	bltu	r2,r4,4124 <_dtoa_r+0x398>
    400c:	00800144 	movi	r2,5
    4010:	11020416 	blt	r2,r4,4824 <_dtoa_r+0xa98>
    4014:	04400044 	movi	r17,1
    4018:	d8c01717 	ldw	r3,92(sp)
    401c:	00800144 	movi	r2,5
    4020:	10c1ed36 	bltu	r2,r3,47d8 <_dtoa_r+0xa4c>
    4024:	18c5883a 	add	r2,r3,r3
    4028:	1085883a 	add	r2,r2,r2
    402c:	00c00034 	movhi	r3,0
    4030:	18d01004 	addi	r3,r3,16448
    4034:	10c5883a 	add	r2,r2,r3
    4038:	11000017 	ldw	r4,0(r2)
    403c:	2000683a 	jmp	r4
    4040:	0000412c 	andhi	zero,zero,260
    4044:	0000412c 	andhi	zero,zero,260
    4048:	00004b2c 	andhi	zero,zero,300
    404c:	00004b04 	movi	zero,300
    4050:	00004b48 	cmpgei	zero,zero,301
    4054:	00004b54 	movui	zero,301
    4058:	d9002717 	ldw	r4,156(sp)
    405c:	0089c3c4 	movi	r2,9999
    4060:	20800015 	stw	r2,0(r4)
    4064:	a0001026 	beq	r20,zero,40a8 <_dtoa_r+0x31c>
    4068:	00c00074 	movhi	r3,1
    406c:	18c83704 	addi	r3,r3,8412
    4070:	d9802917 	ldw	r6,164(sp)
    4074:	303f7926 	beq	r6,zero,3e5c <_dtoa_r+0xd0>
    4078:	188000c7 	ldb	r2,3(r3)
    407c:	190000c4 	addi	r4,r3,3
    4080:	1000101e 	bne	r2,zero,40c4 <_dtoa_r+0x338>
    4084:	d8802917 	ldw	r2,164(sp)
    4088:	11000015 	stw	r4,0(r2)
    408c:	003f7306 	br	3e5c <_dtoa_r+0xd0>
    4090:	00a00034 	movhi	r2,32768
    4094:	10bfffc4 	addi	r2,r2,-1
    4098:	00c00044 	movi	r3,1
    409c:	88aa703a 	and	r21,r17,r2
    40a0:	90c00015 	stw	r3,0(r18)
    40a4:	003f5806 	br	3e08 <_dtoa_r+0x7c>
    40a8:	00800434 	movhi	r2,16
    40ac:	10bfffc4 	addi	r2,r2,-1
    40b0:	a884703a 	and	r2,r21,r2
    40b4:	103fec1e 	bne	r2,zero,4068 <_dtoa_r+0x2dc>
    40b8:	00c00074 	movhi	r3,1
    40bc:	18c83404 	addi	r3,r3,8400
    40c0:	003feb06 	br	4070 <_dtoa_r+0x2e4>
    40c4:	d8802917 	ldw	r2,164(sp)
    40c8:	19000204 	addi	r4,r3,8
    40cc:	11000015 	stw	r4,0(r2)
    40d0:	003f6206 	br	3e5c <_dtoa_r+0xd0>
    40d4:	ddc00117 	ldw	r23,4(sp)
    40d8:	d8800217 	ldw	r2,8(sp)
    40dc:	01000804 	movi	r4,32
    40e0:	b8c10c84 	addi	r3,r23,1074
    40e4:	18a3883a 	add	r17,r3,r2
    40e8:	2441b80e 	bge	r4,r17,47cc <_dtoa_r+0xa40>
    40ec:	00c01004 	movi	r3,64
    40f0:	1c47c83a 	sub	r3,r3,r17
    40f4:	88bff804 	addi	r2,r17,-32
    40f8:	a8c6983a 	sll	r3,r21,r3
    40fc:	a084d83a 	srl	r2,r20,r2
    4100:	1888b03a 	or	r4,r3,r2
    4104:	000aa1c0 	call	aa1c <__floatunsidf>
    4108:	1011883a 	mov	r8,r2
    410c:	00bf8434 	movhi	r2,65040
    4110:	01000044 	movi	r4,1
    4114:	10d3883a 	add	r9,r2,r3
    4118:	8dbef344 	addi	r22,r17,-1075
    411c:	d9000815 	stw	r4,32(sp)
    4120:	003f6f06 	br	3ee0 <_dtoa_r+0x154>
    4124:	d8001715 	stw	zero,92(sp)
    4128:	04400044 	movi	r17,1
    412c:	00bfffc4 	movi	r2,-1
    4130:	00c00044 	movi	r3,1
    4134:	d8800e15 	stw	r2,56(sp)
    4138:	d8002615 	stw	zero,152(sp)
    413c:	d8800f15 	stw	r2,60(sp)
    4140:	d8c00b15 	stw	r3,44(sp)
    4144:	1021883a 	mov	r16,r2
    4148:	d8801617 	ldw	r2,88(sp)
    414c:	10001115 	stw	zero,68(r2)
    4150:	d8801617 	ldw	r2,88(sp)
    4154:	11401117 	ldw	r5,68(r2)
    4158:	1009883a 	mov	r4,r2
    415c:	00073680 	call	7368 <_Balloc>
    4160:	d8c01617 	ldw	r3,88(sp)
    4164:	d8800515 	stw	r2,20(sp)
    4168:	18801015 	stw	r2,64(r3)
    416c:	00800384 	movi	r2,14
    4170:	14006836 	bltu	r2,r16,4314 <_dtoa_r+0x588>
    4174:	8805003a 	cmpeq	r2,r17,zero
    4178:	1000661e 	bne	r2,zero,4314 <_dtoa_r+0x588>
    417c:	d9000d17 	ldw	r4,52(sp)
    4180:	0102300e 	bge	zero,r4,4a44 <_dtoa_r+0xcb8>
    4184:	208003cc 	andi	r2,r4,15
    4188:	100490fa 	slli	r2,r2,3
    418c:	2025d13a 	srai	r18,r4,4
    4190:	00c00074 	movhi	r3,1
    4194:	18c84904 	addi	r3,r3,8484
    4198:	10c5883a 	add	r2,r2,r3
    419c:	90c0040c 	andi	r3,r18,16
    41a0:	14000017 	ldw	r16,0(r2)
    41a4:	14400117 	ldw	r17,4(r2)
    41a8:	18036a1e 	bne	r3,zero,4f54 <_dtoa_r+0x11c8>
    41ac:	05800084 	movi	r22,2
    41b0:	90001026 	beq	r18,zero,41f4 <_dtoa_r+0x468>
    41b4:	04c00074 	movhi	r19,1
    41b8:	9cc87b04 	addi	r19,r19,8684
    41bc:	9080004c 	andi	r2,r18,1
    41c0:	1005003a 	cmpeq	r2,r2,zero
    41c4:	1000081e 	bne	r2,zero,41e8 <_dtoa_r+0x45c>
    41c8:	99800017 	ldw	r6,0(r19)
    41cc:	99c00117 	ldw	r7,4(r19)
    41d0:	880b883a 	mov	r5,r17
    41d4:	8009883a 	mov	r4,r16
    41d8:	0009f880 	call	9f88 <__muldf3>
    41dc:	1021883a 	mov	r16,r2
    41e0:	b5800044 	addi	r22,r22,1
    41e4:	1823883a 	mov	r17,r3
    41e8:	9025d07a 	srai	r18,r18,1
    41ec:	9cc00204 	addi	r19,r19,8
    41f0:	903ff21e 	bne	r18,zero,41bc <_dtoa_r+0x430>
    41f4:	a80b883a 	mov	r5,r21
    41f8:	a009883a 	mov	r4,r20
    41fc:	880f883a 	mov	r7,r17
    4200:	800d883a 	mov	r6,r16
    4204:	000a34c0 	call	a34c <__divdf3>
    4208:	1029883a 	mov	r20,r2
    420c:	182b883a 	mov	r21,r3
    4210:	d8c00c17 	ldw	r3,48(sp)
    4214:	1805003a 	cmpeq	r2,r3,zero
    4218:	1000081e 	bne	r2,zero,423c <_dtoa_r+0x4b0>
    421c:	0005883a 	mov	r2,zero
    4220:	00cffc34 	movhi	r3,16368
    4224:	180f883a 	mov	r7,r3
    4228:	a009883a 	mov	r4,r20
    422c:	a80b883a 	mov	r5,r21
    4230:	100d883a 	mov	r6,r2
    4234:	000a7c40 	call	a7c4 <__ltdf2>
    4238:	1003fe16 	blt	r2,zero,5234 <_dtoa_r+0x14a8>
    423c:	b009883a 	mov	r4,r22
    4240:	000a84c0 	call	a84c <__floatsidf>
    4244:	180b883a 	mov	r5,r3
    4248:	1009883a 	mov	r4,r2
    424c:	a00d883a 	mov	r6,r20
    4250:	a80f883a 	mov	r7,r21
    4254:	0009f880 	call	9f88 <__muldf3>
    4258:	0011883a 	mov	r8,zero
    425c:	02500734 	movhi	r9,16412
    4260:	1009883a 	mov	r4,r2
    4264:	180b883a 	mov	r5,r3
    4268:	480f883a 	mov	r7,r9
    426c:	400d883a 	mov	r6,r8
    4270:	0009f140 	call	9f14 <__adddf3>
    4274:	d9000f17 	ldw	r4,60(sp)
    4278:	102d883a 	mov	r22,r2
    427c:	00bf3034 	movhi	r2,64704
    4280:	18b9883a 	add	fp,r3,r2
    4284:	e02f883a 	mov	r23,fp
    4288:	20028f1e 	bne	r4,zero,4cc8 <_dtoa_r+0xf3c>
    428c:	0005883a 	mov	r2,zero
    4290:	00d00534 	movhi	r3,16404
    4294:	a009883a 	mov	r4,r20
    4298:	a80b883a 	mov	r5,r21
    429c:	180f883a 	mov	r7,r3
    42a0:	100d883a 	mov	r6,r2
    42a4:	0009e940 	call	9e94 <__subdf3>
    42a8:	1009883a 	mov	r4,r2
    42ac:	e00f883a 	mov	r7,fp
    42b0:	180b883a 	mov	r5,r3
    42b4:	b00d883a 	mov	r6,r22
    42b8:	1025883a 	mov	r18,r2
    42bc:	1827883a 	mov	r19,r3
    42c0:	000a6b40 	call	a6b4 <__gtdf2>
    42c4:	00834f16 	blt	zero,r2,5004 <_dtoa_r+0x1278>
    42c8:	e0e0003c 	xorhi	r3,fp,32768
    42cc:	9009883a 	mov	r4,r18
    42d0:	980b883a 	mov	r5,r19
    42d4:	180f883a 	mov	r7,r3
    42d8:	b00d883a 	mov	r6,r22
    42dc:	000a7c40 	call	a7c4 <__ltdf2>
    42e0:	1000080e 	bge	r2,zero,4304 <_dtoa_r+0x578>
    42e4:	0027883a 	mov	r19,zero
    42e8:	0025883a 	mov	r18,zero
    42ec:	d8802617 	ldw	r2,152(sp)
    42f0:	df000517 	ldw	fp,20(sp)
    42f4:	d8000615 	stw	zero,24(sp)
    42f8:	0084303a 	nor	r2,zero,r2
    42fc:	d8800d15 	stw	r2,52(sp)
    4300:	00019b06 	br	4970 <_dtoa_r+0xbe4>
    4304:	d9801217 	ldw	r6,72(sp)
    4308:	d8801317 	ldw	r2,76(sp)
    430c:	3029883a 	mov	r20,r6
    4310:	102b883a 	mov	r21,r2
    4314:	d8c00217 	ldw	r3,8(sp)
    4318:	18008516 	blt	r3,zero,4530 <_dtoa_r+0x7a4>
    431c:	d9000d17 	ldw	r4,52(sp)
    4320:	00800384 	movi	r2,14
    4324:	11008216 	blt	r2,r4,4530 <_dtoa_r+0x7a4>
    4328:	200490fa 	slli	r2,r4,3
    432c:	d9802617 	ldw	r6,152(sp)
    4330:	00c00074 	movhi	r3,1
    4334:	18c84904 	addi	r3,r3,8484
    4338:	10c5883a 	add	r2,r2,r3
    433c:	14800017 	ldw	r18,0(r2)
    4340:	14c00117 	ldw	r19,4(r2)
    4344:	30031e16 	blt	r6,zero,4fc0 <_dtoa_r+0x1234>
    4348:	d9000517 	ldw	r4,20(sp)
    434c:	d8c00f17 	ldw	r3,60(sp)
    4350:	a823883a 	mov	r17,r21
    4354:	a021883a 	mov	r16,r20
    4358:	192b883a 	add	r21,r3,r4
    435c:	2039883a 	mov	fp,r4
    4360:	00000f06 	br	43a0 <_dtoa_r+0x614>
    4364:	0005883a 	mov	r2,zero
    4368:	00d00934 	movhi	r3,16420
    436c:	5009883a 	mov	r4,r10
    4370:	580b883a 	mov	r5,r11
    4374:	180f883a 	mov	r7,r3
    4378:	100d883a 	mov	r6,r2
    437c:	0009f880 	call	9f88 <__muldf3>
    4380:	180b883a 	mov	r5,r3
    4384:	000d883a 	mov	r6,zero
    4388:	000f883a 	mov	r7,zero
    438c:	1009883a 	mov	r4,r2
    4390:	1021883a 	mov	r16,r2
    4394:	1823883a 	mov	r17,r3
    4398:	000a62c0 	call	a62c <__nedf2>
    439c:	10004526 	beq	r2,zero,44b4 <_dtoa_r+0x728>
    43a0:	900d883a 	mov	r6,r18
    43a4:	980f883a 	mov	r7,r19
    43a8:	8009883a 	mov	r4,r16
    43ac:	880b883a 	mov	r5,r17
    43b0:	000a34c0 	call	a34c <__divdf3>
    43b4:	180b883a 	mov	r5,r3
    43b8:	1009883a 	mov	r4,r2
    43bc:	000a9440 	call	a944 <__fixdfsi>
    43c0:	1009883a 	mov	r4,r2
    43c4:	1029883a 	mov	r20,r2
    43c8:	000a84c0 	call	a84c <__floatsidf>
    43cc:	180f883a 	mov	r7,r3
    43d0:	9009883a 	mov	r4,r18
    43d4:	980b883a 	mov	r5,r19
    43d8:	100d883a 	mov	r6,r2
    43dc:	0009f880 	call	9f88 <__muldf3>
    43e0:	180f883a 	mov	r7,r3
    43e4:	880b883a 	mov	r5,r17
    43e8:	8009883a 	mov	r4,r16
    43ec:	100d883a 	mov	r6,r2
    43f0:	0009e940 	call	9e94 <__subdf3>
    43f4:	1015883a 	mov	r10,r2
    43f8:	a0800c04 	addi	r2,r20,48
    43fc:	e0800005 	stb	r2,0(fp)
    4400:	e7000044 	addi	fp,fp,1
    4404:	1817883a 	mov	r11,r3
    4408:	e57fd61e 	bne	fp,r21,4364 <_dtoa_r+0x5d8>
    440c:	500d883a 	mov	r6,r10
    4410:	180f883a 	mov	r7,r3
    4414:	5009883a 	mov	r4,r10
    4418:	180b883a 	mov	r5,r3
    441c:	0009f140 	call	9f14 <__adddf3>
    4420:	100d883a 	mov	r6,r2
    4424:	9009883a 	mov	r4,r18
    4428:	980b883a 	mov	r5,r19
    442c:	180f883a 	mov	r7,r3
    4430:	1021883a 	mov	r16,r2
    4434:	1823883a 	mov	r17,r3
    4438:	000a7c40 	call	a7c4 <__ltdf2>
    443c:	10000816 	blt	r2,zero,4460 <_dtoa_r+0x6d4>
    4440:	980b883a 	mov	r5,r19
    4444:	800d883a 	mov	r6,r16
    4448:	880f883a 	mov	r7,r17
    444c:	9009883a 	mov	r4,r18
    4450:	000a5a40 	call	a5a4 <__eqdf2>
    4454:	1000171e 	bne	r2,zero,44b4 <_dtoa_r+0x728>
    4458:	a080004c 	andi	r2,r20,1
    445c:	10001526 	beq	r2,zero,44b4 <_dtoa_r+0x728>
    4460:	d8800d17 	ldw	r2,52(sp)
    4464:	d8800415 	stw	r2,16(sp)
    4468:	e009883a 	mov	r4,fp
    446c:	213fffc4 	addi	r4,r4,-1
    4470:	20c00007 	ldb	r3,0(r4)
    4474:	00800e44 	movi	r2,57
    4478:	1880081e 	bne	r3,r2,449c <_dtoa_r+0x710>
    447c:	d8800517 	ldw	r2,20(sp)
    4480:	113ffa1e 	bne	r2,r4,446c <_dtoa_r+0x6e0>
    4484:	d8c00417 	ldw	r3,16(sp)
    4488:	d9800517 	ldw	r6,20(sp)
    448c:	00800c04 	movi	r2,48
    4490:	18c00044 	addi	r3,r3,1
    4494:	d8c00415 	stw	r3,16(sp)
    4498:	30800005 	stb	r2,0(r6)
    449c:	20800003 	ldbu	r2,0(r4)
    44a0:	d8c00417 	ldw	r3,16(sp)
    44a4:	27000044 	addi	fp,r4,1
    44a8:	10800044 	addi	r2,r2,1
    44ac:	d8c00d15 	stw	r3,52(sp)
    44b0:	20800005 	stb	r2,0(r4)
    44b4:	d9001617 	ldw	r4,88(sp)
    44b8:	d9400717 	ldw	r5,28(sp)
    44bc:	0006de80 	call	6de8 <_Bfree>
    44c0:	e0000005 	stb	zero,0(fp)
    44c4:	d9800d17 	ldw	r6,52(sp)
    44c8:	d8c02717 	ldw	r3,156(sp)
    44cc:	d9002917 	ldw	r4,164(sp)
    44d0:	30800044 	addi	r2,r6,1
    44d4:	18800015 	stw	r2,0(r3)
    44d8:	20029c26 	beq	r4,zero,4f4c <_dtoa_r+0x11c0>
    44dc:	d8c00517 	ldw	r3,20(sp)
    44e0:	27000015 	stw	fp,0(r4)
    44e4:	003e5d06 	br	3e5c <_dtoa_r+0xd0>
    44e8:	d9800d17 	ldw	r6,52(sp)
    44ec:	00c00074 	movhi	r3,1
    44f0:	18c84904 	addi	r3,r3,8484
    44f4:	d9001217 	ldw	r4,72(sp)
    44f8:	300490fa 	slli	r2,r6,3
    44fc:	d9401317 	ldw	r5,76(sp)
    4500:	10c5883a 	add	r2,r2,r3
    4504:	12000017 	ldw	r8,0(r2)
    4508:	12400117 	ldw	r9,4(r2)
    450c:	400d883a 	mov	r6,r8
    4510:	480f883a 	mov	r7,r9
    4514:	000a7c40 	call	a7c4 <__ltdf2>
    4518:	1000030e 	bge	r2,zero,4528 <_dtoa_r+0x79c>
    451c:	d8800d17 	ldw	r2,52(sp)
    4520:	10bfffc4 	addi	r2,r2,-1
    4524:	d8800d15 	stw	r2,52(sp)
    4528:	d8000c15 	stw	zero,48(sp)
    452c:	003ea806 	br	3fd0 <_dtoa_r+0x244>
    4530:	d9000b17 	ldw	r4,44(sp)
    4534:	202cc03a 	cmpne	r22,r4,zero
    4538:	b000c71e 	bne	r22,zero,4858 <_dtoa_r+0xacc>
    453c:	dc001117 	ldw	r16,68(sp)
    4540:	dc801017 	ldw	r18,64(sp)
    4544:	0027883a 	mov	r19,zero
    4548:	04000b0e 	bge	zero,r16,4578 <_dtoa_r+0x7ec>
    454c:	d8c00a17 	ldw	r3,40(sp)
    4550:	00c0090e 	bge	zero,r3,4578 <_dtoa_r+0x7ec>
    4554:	8005883a 	mov	r2,r16
    4558:	1c011316 	blt	r3,r16,49a8 <_dtoa_r+0xc1c>
    455c:	d9000a17 	ldw	r4,40(sp)
    4560:	d9801117 	ldw	r6,68(sp)
    4564:	80a1c83a 	sub	r16,r16,r2
    4568:	2089c83a 	sub	r4,r4,r2
    456c:	308dc83a 	sub	r6,r6,r2
    4570:	d9000a15 	stw	r4,40(sp)
    4574:	d9801115 	stw	r6,68(sp)
    4578:	d8801017 	ldw	r2,64(sp)
    457c:	0080150e 	bge	zero,r2,45d4 <_dtoa_r+0x848>
    4580:	d8c00b17 	ldw	r3,44(sp)
    4584:	1805003a 	cmpeq	r2,r3,zero
    4588:	1001c91e 	bne	r2,zero,4cb0 <_dtoa_r+0xf24>
    458c:	04800e0e 	bge	zero,r18,45c8 <_dtoa_r+0x83c>
    4590:	d9001617 	ldw	r4,88(sp)
    4594:	980b883a 	mov	r5,r19
    4598:	900d883a 	mov	r6,r18
    459c:	0007b9c0 	call	7b9c <__pow5mult>
    45a0:	d9001617 	ldw	r4,88(sp)
    45a4:	d9800717 	ldw	r6,28(sp)
    45a8:	100b883a 	mov	r5,r2
    45ac:	1027883a 	mov	r19,r2
    45b0:	00078780 	call	7878 <__multiply>
    45b4:	d9001617 	ldw	r4,88(sp)
    45b8:	d9400717 	ldw	r5,28(sp)
    45bc:	1023883a 	mov	r17,r2
    45c0:	0006de80 	call	6de8 <_Bfree>
    45c4:	dc400715 	stw	r17,28(sp)
    45c8:	d9001017 	ldw	r4,64(sp)
    45cc:	248dc83a 	sub	r6,r4,r18
    45d0:	30010e1e 	bne	r6,zero,4a0c <_dtoa_r+0xc80>
    45d4:	d9001617 	ldw	r4,88(sp)
    45d8:	04400044 	movi	r17,1
    45dc:	880b883a 	mov	r5,r17
    45e0:	0007a600 	call	7a60 <__i2b>
    45e4:	d9800917 	ldw	r6,36(sp)
    45e8:	1025883a 	mov	r18,r2
    45ec:	0180040e 	bge	zero,r6,4600 <_dtoa_r+0x874>
    45f0:	d9001617 	ldw	r4,88(sp)
    45f4:	100b883a 	mov	r5,r2
    45f8:	0007b9c0 	call	7b9c <__pow5mult>
    45fc:	1025883a 	mov	r18,r2
    4600:	d8801717 	ldw	r2,92(sp)
    4604:	8880f30e 	bge	r17,r2,49d4 <_dtoa_r+0xc48>
    4608:	0023883a 	mov	r17,zero
    460c:	d9800917 	ldw	r6,36(sp)
    4610:	30019e1e 	bne	r6,zero,4c8c <_dtoa_r+0xf00>
    4614:	00c00044 	movi	r3,1
    4618:	d9000a17 	ldw	r4,40(sp)
    461c:	20c5883a 	add	r2,r4,r3
    4620:	10c007cc 	andi	r3,r2,31
    4624:	1800841e 	bne	r3,zero,4838 <_dtoa_r+0xaac>
    4628:	00800704 	movi	r2,28
    462c:	d9000a17 	ldw	r4,40(sp)
    4630:	d9801117 	ldw	r6,68(sp)
    4634:	80a1883a 	add	r16,r16,r2
    4638:	2089883a 	add	r4,r4,r2
    463c:	308d883a 	add	r6,r6,r2
    4640:	d9000a15 	stw	r4,40(sp)
    4644:	d9801115 	stw	r6,68(sp)
    4648:	d8801117 	ldw	r2,68(sp)
    464c:	0080050e 	bge	zero,r2,4664 <_dtoa_r+0x8d8>
    4650:	d9400717 	ldw	r5,28(sp)
    4654:	d9001617 	ldw	r4,88(sp)
    4658:	100d883a 	mov	r6,r2
    465c:	000772c0 	call	772c <__lshift>
    4660:	d8800715 	stw	r2,28(sp)
    4664:	d8c00a17 	ldw	r3,40(sp)
    4668:	00c0050e 	bge	zero,r3,4680 <_dtoa_r+0x8f4>
    466c:	d9001617 	ldw	r4,88(sp)
    4670:	900b883a 	mov	r5,r18
    4674:	180d883a 	mov	r6,r3
    4678:	000772c0 	call	772c <__lshift>
    467c:	1025883a 	mov	r18,r2
    4680:	d9000c17 	ldw	r4,48(sp)
    4684:	2005003a 	cmpeq	r2,r4,zero
    4688:	10016f26 	beq	r2,zero,4c48 <_dtoa_r+0xebc>
    468c:	d9000f17 	ldw	r4,60(sp)
    4690:	0102170e 	bge	zero,r4,4ef0 <_dtoa_r+0x1164>
    4694:	d9800b17 	ldw	r6,44(sp)
    4698:	3005003a 	cmpeq	r2,r6,zero
    469c:	1000881e 	bne	r2,zero,48c0 <_dtoa_r+0xb34>
    46a0:	0400050e 	bge	zero,r16,46b8 <_dtoa_r+0x92c>
    46a4:	d9001617 	ldw	r4,88(sp)
    46a8:	980b883a 	mov	r5,r19
    46ac:	800d883a 	mov	r6,r16
    46b0:	000772c0 	call	772c <__lshift>
    46b4:	1027883a 	mov	r19,r2
    46b8:	8804c03a 	cmpne	r2,r17,zero
    46bc:	1002541e 	bne	r2,zero,5010 <_dtoa_r+0x1284>
    46c0:	980b883a 	mov	r5,r19
    46c4:	dd800517 	ldw	r22,20(sp)
    46c8:	dcc00615 	stw	r19,24(sp)
    46cc:	a700004c 	andi	fp,r20,1
    46d0:	2827883a 	mov	r19,r5
    46d4:	d9000717 	ldw	r4,28(sp)
    46d8:	900b883a 	mov	r5,r18
    46dc:	0003b740 	call	3b74 <quorem>
    46e0:	d9000717 	ldw	r4,28(sp)
    46e4:	d9400617 	ldw	r5,24(sp)
    46e8:	1023883a 	mov	r17,r2
    46ec:	8dc00c04 	addi	r23,r17,48
    46f0:	0006f440 	call	6f44 <__mcmp>
    46f4:	d9001617 	ldw	r4,88(sp)
    46f8:	900b883a 	mov	r5,r18
    46fc:	980d883a 	mov	r6,r19
    4700:	1029883a 	mov	r20,r2
    4704:	00075a00 	call	75a0 <__mdiff>
    4708:	102b883a 	mov	r21,r2
    470c:	10800317 	ldw	r2,12(r2)
    4710:	1001281e 	bne	r2,zero,4bb4 <_dtoa_r+0xe28>
    4714:	d9000717 	ldw	r4,28(sp)
    4718:	a80b883a 	mov	r5,r21
    471c:	0006f440 	call	6f44 <__mcmp>
    4720:	d9001617 	ldw	r4,88(sp)
    4724:	1021883a 	mov	r16,r2
    4728:	a80b883a 	mov	r5,r21
    472c:	0006de80 	call	6de8 <_Bfree>
    4730:	8000041e 	bne	r16,zero,4744 <_dtoa_r+0x9b8>
    4734:	d8801717 	ldw	r2,92(sp)
    4738:	1000021e 	bne	r2,zero,4744 <_dtoa_r+0x9b8>
    473c:	e004c03a 	cmpne	r2,fp,zero
    4740:	10011726 	beq	r2,zero,4ba0 <_dtoa_r+0xe14>
    4744:	a0010616 	blt	r20,zero,4b60 <_dtoa_r+0xdd4>
    4748:	a000041e 	bne	r20,zero,475c <_dtoa_r+0x9d0>
    474c:	d8c01717 	ldw	r3,92(sp)
    4750:	1800021e 	bne	r3,zero,475c <_dtoa_r+0x9d0>
    4754:	e004c03a 	cmpne	r2,fp,zero
    4758:	10010126 	beq	r2,zero,4b60 <_dtoa_r+0xdd4>
    475c:	04023d16 	blt	zero,r16,5054 <_dtoa_r+0x12c8>
    4760:	b5c00005 	stb	r23,0(r22)
    4764:	d9800517 	ldw	r6,20(sp)
    4768:	d9000f17 	ldw	r4,60(sp)
    476c:	b5800044 	addi	r22,r22,1
    4770:	3105883a 	add	r2,r6,r4
    4774:	b0806526 	beq	r22,r2,490c <_dtoa_r+0xb80>
    4778:	d9400717 	ldw	r5,28(sp)
    477c:	d9001617 	ldw	r4,88(sp)
    4780:	01800284 	movi	r6,10
    4784:	000f883a 	mov	r7,zero
    4788:	0007a9c0 	call	7a9c <__multadd>
    478c:	d8800715 	stw	r2,28(sp)
    4790:	d8800617 	ldw	r2,24(sp)
    4794:	14c10c26 	beq	r2,r19,4bc8 <_dtoa_r+0xe3c>
    4798:	d9400617 	ldw	r5,24(sp)
    479c:	d9001617 	ldw	r4,88(sp)
    47a0:	01800284 	movi	r6,10
    47a4:	000f883a 	mov	r7,zero
    47a8:	0007a9c0 	call	7a9c <__multadd>
    47ac:	d9001617 	ldw	r4,88(sp)
    47b0:	980b883a 	mov	r5,r19
    47b4:	01800284 	movi	r6,10
    47b8:	000f883a 	mov	r7,zero
    47bc:	d8800615 	stw	r2,24(sp)
    47c0:	0007a9c0 	call	7a9c <__multadd>
    47c4:	1027883a 	mov	r19,r2
    47c8:	003fc206 	br	46d4 <_dtoa_r+0x948>
    47cc:	2445c83a 	sub	r2,r4,r17
    47d0:	a088983a 	sll	r4,r20,r2
    47d4:	003e4b06 	br	4104 <_dtoa_r+0x378>
    47d8:	01bfffc4 	movi	r6,-1
    47dc:	00800044 	movi	r2,1
    47e0:	d9800e15 	stw	r6,56(sp)
    47e4:	d9800f15 	stw	r6,60(sp)
    47e8:	d8800b15 	stw	r2,44(sp)
    47ec:	d8c01617 	ldw	r3,88(sp)
    47f0:	008005c4 	movi	r2,23
    47f4:	18001115 	stw	zero,68(r3)
    47f8:	1580082e 	bgeu	r2,r22,481c <_dtoa_r+0xa90>
    47fc:	00c00104 	movi	r3,4
    4800:	0009883a 	mov	r4,zero
    4804:	18c7883a 	add	r3,r3,r3
    4808:	18800504 	addi	r2,r3,20
    480c:	21000044 	addi	r4,r4,1
    4810:	b0bffc2e 	bgeu	r22,r2,4804 <_dtoa_r+0xa78>
    4814:	d9801617 	ldw	r6,88(sp)
    4818:	31001115 	stw	r4,68(r6)
    481c:	dc000f17 	ldw	r16,60(sp)
    4820:	003e4b06 	br	4150 <_dtoa_r+0x3c4>
    4824:	d9801717 	ldw	r6,92(sp)
    4828:	0023883a 	mov	r17,zero
    482c:	31bfff04 	addi	r6,r6,-4
    4830:	d9801715 	stw	r6,92(sp)
    4834:	003df806 	br	4018 <_dtoa_r+0x28c>
    4838:	00800804 	movi	r2,32
    483c:	10c9c83a 	sub	r4,r2,r3
    4840:	00c00104 	movi	r3,4
    4844:	19005a16 	blt	r3,r4,49b0 <_dtoa_r+0xc24>
    4848:	008000c4 	movi	r2,3
    484c:	113f7e16 	blt	r2,r4,4648 <_dtoa_r+0x8bc>
    4850:	20800704 	addi	r2,r4,28
    4854:	003f7506 	br	462c <_dtoa_r+0x8a0>
    4858:	d9801717 	ldw	r6,92(sp)
    485c:	00800044 	movi	r2,1
    4860:	1180a10e 	bge	r2,r6,4ae8 <_dtoa_r+0xd5c>
    4864:	d9800f17 	ldw	r6,60(sp)
    4868:	d8c01017 	ldw	r3,64(sp)
    486c:	30bfffc4 	addi	r2,r6,-1
    4870:	1881c616 	blt	r3,r2,4f8c <_dtoa_r+0x1200>
    4874:	18a5c83a 	sub	r18,r3,r2
    4878:	d8800f17 	ldw	r2,60(sp)
    487c:	10026216 	blt	r2,zero,5208 <_dtoa_r+0x147c>
    4880:	dc001117 	ldw	r16,68(sp)
    4884:	1007883a 	mov	r3,r2
    4888:	d9800a17 	ldw	r6,40(sp)
    488c:	d8801117 	ldw	r2,68(sp)
    4890:	d9001617 	ldw	r4,88(sp)
    4894:	30cd883a 	add	r6,r6,r3
    4898:	10c5883a 	add	r2,r2,r3
    489c:	01400044 	movi	r5,1
    48a0:	d9800a15 	stw	r6,40(sp)
    48a4:	d8801115 	stw	r2,68(sp)
    48a8:	0007a600 	call	7a60 <__i2b>
    48ac:	1027883a 	mov	r19,r2
    48b0:	003f2506 	br	4548 <_dtoa_r+0x7bc>
    48b4:	00c00074 	movhi	r3,1
    48b8:	18c82b04 	addi	r3,r3,8364
    48bc:	003d6706 	br	3e5c <_dtoa_r+0xd0>
    48c0:	dd800517 	ldw	r22,20(sp)
    48c4:	04000044 	movi	r16,1
    48c8:	00000706 	br	48e8 <_dtoa_r+0xb5c>
    48cc:	d9400717 	ldw	r5,28(sp)
    48d0:	d9001617 	ldw	r4,88(sp)
    48d4:	01800284 	movi	r6,10
    48d8:	000f883a 	mov	r7,zero
    48dc:	0007a9c0 	call	7a9c <__multadd>
    48e0:	d8800715 	stw	r2,28(sp)
    48e4:	84000044 	addi	r16,r16,1
    48e8:	d9000717 	ldw	r4,28(sp)
    48ec:	900b883a 	mov	r5,r18
    48f0:	0003b740 	call	3b74 <quorem>
    48f4:	15c00c04 	addi	r23,r2,48
    48f8:	b5c00005 	stb	r23,0(r22)
    48fc:	d8c00f17 	ldw	r3,60(sp)
    4900:	b5800044 	addi	r22,r22,1
    4904:	80fff116 	blt	r16,r3,48cc <_dtoa_r+0xb40>
    4908:	d8000615 	stw	zero,24(sp)
    490c:	d9400717 	ldw	r5,28(sp)
    4910:	d9001617 	ldw	r4,88(sp)
    4914:	01800044 	movi	r6,1
    4918:	000772c0 	call	772c <__lshift>
    491c:	1009883a 	mov	r4,r2
    4920:	900b883a 	mov	r5,r18
    4924:	d8800715 	stw	r2,28(sp)
    4928:	0006f440 	call	6f44 <__mcmp>
    492c:	00803c0e 	bge	zero,r2,4a20 <_dtoa_r+0xc94>
    4930:	b009883a 	mov	r4,r22
    4934:	213fffc4 	addi	r4,r4,-1
    4938:	21400003 	ldbu	r5,0(r4)
    493c:	00800e44 	movi	r2,57
    4940:	28c03fcc 	andi	r3,r5,255
    4944:	18c0201c 	xori	r3,r3,128
    4948:	18ffe004 	addi	r3,r3,-128
    494c:	1881981e 	bne	r3,r2,4fb0 <_dtoa_r+0x1224>
    4950:	d9800517 	ldw	r6,20(sp)
    4954:	21bff71e 	bne	r4,r6,4934 <_dtoa_r+0xba8>
    4958:	d8800d17 	ldw	r2,52(sp)
    495c:	37000044 	addi	fp,r6,1
    4960:	10800044 	addi	r2,r2,1
    4964:	d8800d15 	stw	r2,52(sp)
    4968:	00800c44 	movi	r2,49
    496c:	30800005 	stb	r2,0(r6)
    4970:	d9001617 	ldw	r4,88(sp)
    4974:	900b883a 	mov	r5,r18
    4978:	0006de80 	call	6de8 <_Bfree>
    497c:	983ecd26 	beq	r19,zero,44b4 <_dtoa_r+0x728>
    4980:	d8c00617 	ldw	r3,24(sp)
    4984:	18000426 	beq	r3,zero,4998 <_dtoa_r+0xc0c>
    4988:	1cc00326 	beq	r3,r19,4998 <_dtoa_r+0xc0c>
    498c:	d9001617 	ldw	r4,88(sp)
    4990:	180b883a 	mov	r5,r3
    4994:	0006de80 	call	6de8 <_Bfree>
    4998:	d9001617 	ldw	r4,88(sp)
    499c:	980b883a 	mov	r5,r19
    49a0:	0006de80 	call	6de8 <_Bfree>
    49a4:	003ec306 	br	44b4 <_dtoa_r+0x728>
    49a8:	1805883a 	mov	r2,r3
    49ac:	003eeb06 	br	455c <_dtoa_r+0x7d0>
    49b0:	d9800a17 	ldw	r6,40(sp)
    49b4:	d8c01117 	ldw	r3,68(sp)
    49b8:	20bfff04 	addi	r2,r4,-4
    49bc:	308d883a 	add	r6,r6,r2
    49c0:	1887883a 	add	r3,r3,r2
    49c4:	80a1883a 	add	r16,r16,r2
    49c8:	d9800a15 	stw	r6,40(sp)
    49cc:	d8c01115 	stw	r3,68(sp)
    49d0:	003f1d06 	br	4648 <_dtoa_r+0x8bc>
    49d4:	a03f0c1e 	bne	r20,zero,4608 <_dtoa_r+0x87c>
    49d8:	00800434 	movhi	r2,16
    49dc:	10bfffc4 	addi	r2,r2,-1
    49e0:	a884703a 	and	r2,r21,r2
    49e4:	103f081e 	bne	r2,zero,4608 <_dtoa_r+0x87c>
    49e8:	a89ffc2c 	andhi	r2,r21,32752
    49ec:	103f0626 	beq	r2,zero,4608 <_dtoa_r+0x87c>
    49f0:	d8c01117 	ldw	r3,68(sp)
    49f4:	d9000a17 	ldw	r4,40(sp)
    49f8:	18c00044 	addi	r3,r3,1
    49fc:	21000044 	addi	r4,r4,1
    4a00:	d8c01115 	stw	r3,68(sp)
    4a04:	d9000a15 	stw	r4,40(sp)
    4a08:	003f0006 	br	460c <_dtoa_r+0x880>
    4a0c:	d9400717 	ldw	r5,28(sp)
    4a10:	d9001617 	ldw	r4,88(sp)
    4a14:	0007b9c0 	call	7b9c <__pow5mult>
    4a18:	d8800715 	stw	r2,28(sp)
    4a1c:	003eed06 	br	45d4 <_dtoa_r+0x848>
    4a20:	1000021e 	bne	r2,zero,4a2c <_dtoa_r+0xca0>
    4a24:	b880004c 	andi	r2,r23,1
    4a28:	103fc11e 	bne	r2,zero,4930 <_dtoa_r+0xba4>
    4a2c:	b5bfffc4 	addi	r22,r22,-1
    4a30:	b0c00007 	ldb	r3,0(r22)
    4a34:	00800c04 	movi	r2,48
    4a38:	18bffc26 	beq	r3,r2,4a2c <_dtoa_r+0xca0>
    4a3c:	b7000044 	addi	fp,r22,1
    4a40:	003fcb06 	br	4970 <_dtoa_r+0xbe4>
    4a44:	d9800d17 	ldw	r6,52(sp)
    4a48:	018fc83a 	sub	r7,zero,r6
    4a4c:	3801f726 	beq	r7,zero,522c <_dtoa_r+0x14a0>
    4a50:	398003cc 	andi	r6,r7,15
    4a54:	300c90fa 	slli	r6,r6,3
    4a58:	01400074 	movhi	r5,1
    4a5c:	29484904 	addi	r5,r5,8484
    4a60:	d9001217 	ldw	r4,72(sp)
    4a64:	314d883a 	add	r6,r6,r5
    4a68:	30c00117 	ldw	r3,4(r6)
    4a6c:	30800017 	ldw	r2,0(r6)
    4a70:	d9401317 	ldw	r5,76(sp)
    4a74:	3821d13a 	srai	r16,r7,4
    4a78:	100d883a 	mov	r6,r2
    4a7c:	180f883a 	mov	r7,r3
    4a80:	0009f880 	call	9f88 <__muldf3>
    4a84:	1011883a 	mov	r8,r2
    4a88:	1813883a 	mov	r9,r3
    4a8c:	1029883a 	mov	r20,r2
    4a90:	182b883a 	mov	r21,r3
    4a94:	8001e526 	beq	r16,zero,522c <_dtoa_r+0x14a0>
    4a98:	05800084 	movi	r22,2
    4a9c:	04400074 	movhi	r17,1
    4aa0:	8c487b04 	addi	r17,r17,8684
    4aa4:	8080004c 	andi	r2,r16,1
    4aa8:	1005003a 	cmpeq	r2,r2,zero
    4aac:	1000081e 	bne	r2,zero,4ad0 <_dtoa_r+0xd44>
    4ab0:	89800017 	ldw	r6,0(r17)
    4ab4:	89c00117 	ldw	r7,4(r17)
    4ab8:	480b883a 	mov	r5,r9
    4abc:	4009883a 	mov	r4,r8
    4ac0:	0009f880 	call	9f88 <__muldf3>
    4ac4:	1011883a 	mov	r8,r2
    4ac8:	b5800044 	addi	r22,r22,1
    4acc:	1813883a 	mov	r9,r3
    4ad0:	8021d07a 	srai	r16,r16,1
    4ad4:	8c400204 	addi	r17,r17,8
    4ad8:	803ff21e 	bne	r16,zero,4aa4 <_dtoa_r+0xd18>
    4adc:	4029883a 	mov	r20,r8
    4ae0:	482b883a 	mov	r21,r9
    4ae4:	003dca06 	br	4210 <_dtoa_r+0x484>
    4ae8:	d9000817 	ldw	r4,32(sp)
    4aec:	2005003a 	cmpeq	r2,r4,zero
    4af0:	1001f61e 	bne	r2,zero,52cc <_dtoa_r+0x1540>
    4af4:	dc001117 	ldw	r16,68(sp)
    4af8:	dc801017 	ldw	r18,64(sp)
    4afc:	18c10cc4 	addi	r3,r3,1075
    4b00:	003f6106 	br	4888 <_dtoa_r+0xafc>
    4b04:	d8000b15 	stw	zero,44(sp)
    4b08:	d9802617 	ldw	r6,152(sp)
    4b0c:	d8c00d17 	ldw	r3,52(sp)
    4b10:	30800044 	addi	r2,r6,1
    4b14:	18ad883a 	add	r22,r3,r2
    4b18:	b13fffc4 	addi	r4,r22,-1
    4b1c:	d9000e15 	stw	r4,56(sp)
    4b20:	0581f60e 	bge	zero,r22,52fc <_dtoa_r+0x1570>
    4b24:	dd800f15 	stw	r22,60(sp)
    4b28:	003f3006 	br	47ec <_dtoa_r+0xa60>
    4b2c:	d8000b15 	stw	zero,44(sp)
    4b30:	d9002617 	ldw	r4,152(sp)
    4b34:	0101eb0e 	bge	zero,r4,52e4 <_dtoa_r+0x1558>
    4b38:	202d883a 	mov	r22,r4
    4b3c:	d9000e15 	stw	r4,56(sp)
    4b40:	d9000f15 	stw	r4,60(sp)
    4b44:	003f2906 	br	47ec <_dtoa_r+0xa60>
    4b48:	01800044 	movi	r6,1
    4b4c:	d9800b15 	stw	r6,44(sp)
    4b50:	003ff706 	br	4b30 <_dtoa_r+0xda4>
    4b54:	01000044 	movi	r4,1
    4b58:	d9000b15 	stw	r4,44(sp)
    4b5c:	003fea06 	br	4b08 <_dtoa_r+0xd7c>
    4b60:	04000c0e 	bge	zero,r16,4b94 <_dtoa_r+0xe08>
    4b64:	d9400717 	ldw	r5,28(sp)
    4b68:	d9001617 	ldw	r4,88(sp)
    4b6c:	01800044 	movi	r6,1
    4b70:	000772c0 	call	772c <__lshift>
    4b74:	1009883a 	mov	r4,r2
    4b78:	900b883a 	mov	r5,r18
    4b7c:	d8800715 	stw	r2,28(sp)
    4b80:	0006f440 	call	6f44 <__mcmp>
    4b84:	0081e00e 	bge	zero,r2,5308 <_dtoa_r+0x157c>
    4b88:	bdc00044 	addi	r23,r23,1
    4b8c:	00800e84 	movi	r2,58
    4b90:	b881a226 	beq	r23,r2,521c <_dtoa_r+0x1490>
    4b94:	b7000044 	addi	fp,r22,1
    4b98:	b5c00005 	stb	r23,0(r22)
    4b9c:	003f7406 	br	4970 <_dtoa_r+0xbe4>
    4ba0:	00800e44 	movi	r2,57
    4ba4:	b8819d26 	beq	r23,r2,521c <_dtoa_r+0x1490>
    4ba8:	053ffa0e 	bge	zero,r20,4b94 <_dtoa_r+0xe08>
    4bac:	8dc00c44 	addi	r23,r17,49
    4bb0:	003ff806 	br	4b94 <_dtoa_r+0xe08>
    4bb4:	d9001617 	ldw	r4,88(sp)
    4bb8:	a80b883a 	mov	r5,r21
    4bbc:	04000044 	movi	r16,1
    4bc0:	0006de80 	call	6de8 <_Bfree>
    4bc4:	003edf06 	br	4744 <_dtoa_r+0x9b8>
    4bc8:	d9001617 	ldw	r4,88(sp)
    4bcc:	980b883a 	mov	r5,r19
    4bd0:	01800284 	movi	r6,10
    4bd4:	000f883a 	mov	r7,zero
    4bd8:	0007a9c0 	call	7a9c <__multadd>
    4bdc:	1027883a 	mov	r19,r2
    4be0:	d8800615 	stw	r2,24(sp)
    4be4:	003ebb06 	br	46d4 <_dtoa_r+0x948>
    4be8:	d9801117 	ldw	r6,68(sp)
    4bec:	d8800d17 	ldw	r2,52(sp)
    4bf0:	d8000915 	stw	zero,36(sp)
    4bf4:	308dc83a 	sub	r6,r6,r2
    4bf8:	0087c83a 	sub	r3,zero,r2
    4bfc:	d9801115 	stw	r6,68(sp)
    4c00:	d8c01015 	stw	r3,64(sp)
    4c04:	003cfe06 	br	4000 <_dtoa_r+0x274>
    4c08:	018dc83a 	sub	r6,zero,r6
    4c0c:	d9801115 	stw	r6,68(sp)
    4c10:	d8000a15 	stw	zero,40(sp)
    4c14:	003cf306 	br	3fe4 <_dtoa_r+0x258>
    4c18:	d9000d17 	ldw	r4,52(sp)
    4c1c:	000a84c0 	call	a84c <__floatsidf>
    4c20:	880b883a 	mov	r5,r17
    4c24:	8009883a 	mov	r4,r16
    4c28:	180f883a 	mov	r7,r3
    4c2c:	100d883a 	mov	r6,r2
    4c30:	000a62c0 	call	a62c <__nedf2>
    4c34:	103ce126 	beq	r2,zero,3fbc <_dtoa_r+0x230>
    4c38:	d9800d17 	ldw	r6,52(sp)
    4c3c:	31bfffc4 	addi	r6,r6,-1
    4c40:	d9800d15 	stw	r6,52(sp)
    4c44:	003cdd06 	br	3fbc <_dtoa_r+0x230>
    4c48:	d9000717 	ldw	r4,28(sp)
    4c4c:	900b883a 	mov	r5,r18
    4c50:	0006f440 	call	6f44 <__mcmp>
    4c54:	103e8d0e 	bge	r2,zero,468c <_dtoa_r+0x900>
    4c58:	d9400717 	ldw	r5,28(sp)
    4c5c:	d9001617 	ldw	r4,88(sp)
    4c60:	01800284 	movi	r6,10
    4c64:	000f883a 	mov	r7,zero
    4c68:	0007a9c0 	call	7a9c <__multadd>
    4c6c:	d9800d17 	ldw	r6,52(sp)
    4c70:	d8800715 	stw	r2,28(sp)
    4c74:	31bfffc4 	addi	r6,r6,-1
    4c78:	d9800d15 	stw	r6,52(sp)
    4c7c:	b001a71e 	bne	r22,zero,531c <_dtoa_r+0x1590>
    4c80:	d8800e17 	ldw	r2,56(sp)
    4c84:	d8800f15 	stw	r2,60(sp)
    4c88:	003e8006 	br	468c <_dtoa_r+0x900>
    4c8c:	90800417 	ldw	r2,16(r18)
    4c90:	1085883a 	add	r2,r2,r2
    4c94:	1085883a 	add	r2,r2,r2
    4c98:	1485883a 	add	r2,r2,r18
    4c9c:	11000417 	ldw	r4,16(r2)
    4ca0:	0006e100 	call	6e10 <__hi0bits>
    4ca4:	00c00804 	movi	r3,32
    4ca8:	1887c83a 	sub	r3,r3,r2
    4cac:	003e5a06 	br	4618 <_dtoa_r+0x88c>
    4cb0:	d9400717 	ldw	r5,28(sp)
    4cb4:	d9801017 	ldw	r6,64(sp)
    4cb8:	d9001617 	ldw	r4,88(sp)
    4cbc:	0007b9c0 	call	7b9c <__pow5mult>
    4cc0:	d8800715 	stw	r2,28(sp)
    4cc4:	003e4306 	br	45d4 <_dtoa_r+0x848>
    4cc8:	d9800f17 	ldw	r6,60(sp)
    4ccc:	d8800d17 	ldw	r2,52(sp)
    4cd0:	d9800315 	stw	r6,12(sp)
    4cd4:	d8800415 	stw	r2,16(sp)
    4cd8:	d8c00b17 	ldw	r3,44(sp)
    4cdc:	1805003a 	cmpeq	r2,r3,zero
    4ce0:	1000e21e 	bne	r2,zero,506c <_dtoa_r+0x12e0>
    4ce4:	d9000317 	ldw	r4,12(sp)
    4ce8:	0005883a 	mov	r2,zero
    4cec:	00cff834 	movhi	r3,16352
    4cf0:	200c90fa 	slli	r6,r4,3
    4cf4:	01000074 	movhi	r4,1
    4cf8:	21084904 	addi	r4,r4,8484
    4cfc:	180b883a 	mov	r5,r3
    4d00:	310d883a 	add	r6,r6,r4
    4d04:	327fff17 	ldw	r9,-4(r6)
    4d08:	323ffe17 	ldw	r8,-8(r6)
    4d0c:	1009883a 	mov	r4,r2
    4d10:	480f883a 	mov	r7,r9
    4d14:	400d883a 	mov	r6,r8
    4d18:	000a34c0 	call	a34c <__divdf3>
    4d1c:	180b883a 	mov	r5,r3
    4d20:	b00d883a 	mov	r6,r22
    4d24:	b80f883a 	mov	r7,r23
    4d28:	1009883a 	mov	r4,r2
    4d2c:	0009e940 	call	9e94 <__subdf3>
    4d30:	a80b883a 	mov	r5,r21
    4d34:	a009883a 	mov	r4,r20
    4d38:	d8c01915 	stw	r3,100(sp)
    4d3c:	d8801815 	stw	r2,96(sp)
    4d40:	000a9440 	call	a944 <__fixdfsi>
    4d44:	1009883a 	mov	r4,r2
    4d48:	1027883a 	mov	r19,r2
    4d4c:	000a84c0 	call	a84c <__floatsidf>
    4d50:	a80b883a 	mov	r5,r21
    4d54:	a009883a 	mov	r4,r20
    4d58:	180f883a 	mov	r7,r3
    4d5c:	100d883a 	mov	r6,r2
    4d60:	0009e940 	call	9e94 <__subdf3>
    4d64:	d9801817 	ldw	r6,96(sp)
    4d68:	1823883a 	mov	r17,r3
    4d6c:	d8801415 	stw	r2,80(sp)
    4d70:	302d883a 	mov	r22,r6
    4d74:	d9800517 	ldw	r6,20(sp)
    4d78:	9cc00c04 	addi	r19,r19,48
    4d7c:	dc401515 	stw	r17,84(sp)
    4d80:	d8c01917 	ldw	r3,100(sp)
    4d84:	34c00005 	stb	r19,0(r6)
    4d88:	d8800517 	ldw	r2,20(sp)
    4d8c:	d9401917 	ldw	r5,100(sp)
    4d90:	d9801417 	ldw	r6,80(sp)
    4d94:	b009883a 	mov	r4,r22
    4d98:	880f883a 	mov	r7,r17
    4d9c:	182f883a 	mov	r23,r3
    4da0:	17000044 	addi	fp,r2,1
    4da4:	000a6b40 	call	a6b4 <__gtdf2>
    4da8:	00804e16 	blt	zero,r2,4ee4 <_dtoa_r+0x1158>
    4dac:	d9801417 	ldw	r6,80(sp)
    4db0:	0005883a 	mov	r2,zero
    4db4:	00cffc34 	movhi	r3,16368
    4db8:	180b883a 	mov	r5,r3
    4dbc:	880f883a 	mov	r7,r17
    4dc0:	1009883a 	mov	r4,r2
    4dc4:	0009e940 	call	9e94 <__subdf3>
    4dc8:	d9401917 	ldw	r5,100(sp)
    4dcc:	180f883a 	mov	r7,r3
    4dd0:	b009883a 	mov	r4,r22
    4dd4:	100d883a 	mov	r6,r2
    4dd8:	000a6b40 	call	a6b4 <__gtdf2>
    4ddc:	00bda216 	blt	zero,r2,4468 <_dtoa_r+0x6dc>
    4de0:	d8c00317 	ldw	r3,12(sp)
    4de4:	00800044 	movi	r2,1
    4de8:	10c01216 	blt	r2,r3,4e34 <_dtoa_r+0x10a8>
    4dec:	003d4506 	br	4304 <_dtoa_r+0x578>
    4df0:	d9801417 	ldw	r6,80(sp)
    4df4:	0005883a 	mov	r2,zero
    4df8:	00cffc34 	movhi	r3,16368
    4dfc:	180b883a 	mov	r5,r3
    4e00:	880f883a 	mov	r7,r17
    4e04:	1009883a 	mov	r4,r2
    4e08:	0009e940 	call	9e94 <__subdf3>
    4e0c:	d9c01b17 	ldw	r7,108(sp)
    4e10:	180b883a 	mov	r5,r3
    4e14:	1009883a 	mov	r4,r2
    4e18:	b00d883a 	mov	r6,r22
    4e1c:	000a7c40 	call	a7c4 <__ltdf2>
    4e20:	103d9116 	blt	r2,zero,4468 <_dtoa_r+0x6dc>
    4e24:	d9800517 	ldw	r6,20(sp)
    4e28:	d9000317 	ldw	r4,12(sp)
    4e2c:	3105883a 	add	r2,r6,r4
    4e30:	e0bd3426 	beq	fp,r2,4304 <_dtoa_r+0x578>
    4e34:	04500934 	movhi	r17,16420
    4e38:	0021883a 	mov	r16,zero
    4e3c:	b80b883a 	mov	r5,r23
    4e40:	b009883a 	mov	r4,r22
    4e44:	800d883a 	mov	r6,r16
    4e48:	880f883a 	mov	r7,r17
    4e4c:	0009f880 	call	9f88 <__muldf3>
    4e50:	d9401517 	ldw	r5,84(sp)
    4e54:	d9001417 	ldw	r4,80(sp)
    4e58:	880f883a 	mov	r7,r17
    4e5c:	000d883a 	mov	r6,zero
    4e60:	d8801a15 	stw	r2,104(sp)
    4e64:	d8c01b15 	stw	r3,108(sp)
    4e68:	0009f880 	call	9f88 <__muldf3>
    4e6c:	180b883a 	mov	r5,r3
    4e70:	1009883a 	mov	r4,r2
    4e74:	1823883a 	mov	r17,r3
    4e78:	1021883a 	mov	r16,r2
    4e7c:	000a9440 	call	a944 <__fixdfsi>
    4e80:	1009883a 	mov	r4,r2
    4e84:	102b883a 	mov	r21,r2
    4e88:	000a84c0 	call	a84c <__floatsidf>
    4e8c:	880b883a 	mov	r5,r17
    4e90:	8009883a 	mov	r4,r16
    4e94:	180f883a 	mov	r7,r3
    4e98:	100d883a 	mov	r6,r2
    4e9c:	0009e940 	call	9e94 <__subdf3>
    4ea0:	1021883a 	mov	r16,r2
    4ea4:	d9001b17 	ldw	r4,108(sp)
    4ea8:	1823883a 	mov	r17,r3
    4eac:	dc001415 	stw	r16,80(sp)
    4eb0:	ad400c04 	addi	r21,r21,48
    4eb4:	dc401515 	stw	r17,84(sp)
    4eb8:	d8801a17 	ldw	r2,104(sp)
    4ebc:	e5400005 	stb	r21,0(fp)
    4ec0:	202f883a 	mov	r23,r4
    4ec4:	d9c01b17 	ldw	r7,108(sp)
    4ec8:	d9001417 	ldw	r4,80(sp)
    4ecc:	880b883a 	mov	r5,r17
    4ed0:	100d883a 	mov	r6,r2
    4ed4:	102d883a 	mov	r22,r2
    4ed8:	e7000044 	addi	fp,fp,1
    4edc:	000a7c40 	call	a7c4 <__ltdf2>
    4ee0:	103fc30e 	bge	r2,zero,4df0 <_dtoa_r+0x1064>
    4ee4:	d9000417 	ldw	r4,16(sp)
    4ee8:	d9000d15 	stw	r4,52(sp)
    4eec:	003d7106 	br	44b4 <_dtoa_r+0x728>
    4ef0:	d9801717 	ldw	r6,92(sp)
    4ef4:	00800084 	movi	r2,2
    4ef8:	11bde60e 	bge	r2,r6,4694 <_dtoa_r+0x908>
    4efc:	203cfb1e 	bne	r4,zero,42ec <_dtoa_r+0x560>
    4f00:	d9001617 	ldw	r4,88(sp)
    4f04:	900b883a 	mov	r5,r18
    4f08:	01800144 	movi	r6,5
    4f0c:	000f883a 	mov	r7,zero
    4f10:	0007a9c0 	call	7a9c <__multadd>
    4f14:	d9000717 	ldw	r4,28(sp)
    4f18:	100b883a 	mov	r5,r2
    4f1c:	1025883a 	mov	r18,r2
    4f20:	0006f440 	call	6f44 <__mcmp>
    4f24:	00bcf10e 	bge	zero,r2,42ec <_dtoa_r+0x560>
    4f28:	d8c00d17 	ldw	r3,52(sp)
    4f2c:	d9000517 	ldw	r4,20(sp)
    4f30:	d8000615 	stw	zero,24(sp)
    4f34:	18c00044 	addi	r3,r3,1
    4f38:	d8c00d15 	stw	r3,52(sp)
    4f3c:	00800c44 	movi	r2,49
    4f40:	27000044 	addi	fp,r4,1
    4f44:	20800005 	stb	r2,0(r4)
    4f48:	003e8906 	br	4970 <_dtoa_r+0xbe4>
    4f4c:	d8c00517 	ldw	r3,20(sp)
    4f50:	003bc206 	br	3e5c <_dtoa_r+0xd0>
    4f54:	01800074 	movhi	r6,1
    4f58:	31887b04 	addi	r6,r6,8684
    4f5c:	30c00917 	ldw	r3,36(r6)
    4f60:	30800817 	ldw	r2,32(r6)
    4f64:	d9001217 	ldw	r4,72(sp)
    4f68:	d9401317 	ldw	r5,76(sp)
    4f6c:	180f883a 	mov	r7,r3
    4f70:	100d883a 	mov	r6,r2
    4f74:	000a34c0 	call	a34c <__divdf3>
    4f78:	948003cc 	andi	r18,r18,15
    4f7c:	058000c4 	movi	r22,3
    4f80:	1029883a 	mov	r20,r2
    4f84:	182b883a 	mov	r21,r3
    4f88:	003c8906 	br	41b0 <_dtoa_r+0x424>
    4f8c:	d9001017 	ldw	r4,64(sp)
    4f90:	d9800917 	ldw	r6,36(sp)
    4f94:	0025883a 	mov	r18,zero
    4f98:	1105c83a 	sub	r2,r2,r4
    4f9c:	2089883a 	add	r4,r4,r2
    4fa0:	308d883a 	add	r6,r6,r2
    4fa4:	d9001015 	stw	r4,64(sp)
    4fa8:	d9800915 	stw	r6,36(sp)
    4fac:	003e3206 	br	4878 <_dtoa_r+0xaec>
    4fb0:	28800044 	addi	r2,r5,1
    4fb4:	27000044 	addi	fp,r4,1
    4fb8:	20800005 	stb	r2,0(r4)
    4fbc:	003e6c06 	br	4970 <_dtoa_r+0xbe4>
    4fc0:	d8800f17 	ldw	r2,60(sp)
    4fc4:	00bce016 	blt	zero,r2,4348 <_dtoa_r+0x5bc>
    4fc8:	d9800f17 	ldw	r6,60(sp)
    4fcc:	303cc51e 	bne	r6,zero,42e4 <_dtoa_r+0x558>
    4fd0:	0005883a 	mov	r2,zero
    4fd4:	00d00534 	movhi	r3,16404
    4fd8:	980b883a 	mov	r5,r19
    4fdc:	180f883a 	mov	r7,r3
    4fe0:	9009883a 	mov	r4,r18
    4fe4:	100d883a 	mov	r6,r2
    4fe8:	0009f880 	call	9f88 <__muldf3>
    4fec:	180b883a 	mov	r5,r3
    4ff0:	a80f883a 	mov	r7,r21
    4ff4:	1009883a 	mov	r4,r2
    4ff8:	a00d883a 	mov	r6,r20
    4ffc:	000a73c0 	call	a73c <__gedf2>
    5000:	103cb80e 	bge	r2,zero,42e4 <_dtoa_r+0x558>
    5004:	0027883a 	mov	r19,zero
    5008:	0025883a 	mov	r18,zero
    500c:	003fc606 	br	4f28 <_dtoa_r+0x119c>
    5010:	99400117 	ldw	r5,4(r19)
    5014:	d9001617 	ldw	r4,88(sp)
    5018:	00073680 	call	7368 <_Balloc>
    501c:	99800417 	ldw	r6,16(r19)
    5020:	11000304 	addi	r4,r2,12
    5024:	99400304 	addi	r5,r19,12
    5028:	318d883a 	add	r6,r6,r6
    502c:	318d883a 	add	r6,r6,r6
    5030:	31800204 	addi	r6,r6,8
    5034:	1023883a 	mov	r17,r2
    5038:	000193c0 	call	193c <memcpy>
    503c:	d9001617 	ldw	r4,88(sp)
    5040:	880b883a 	mov	r5,r17
    5044:	01800044 	movi	r6,1
    5048:	000772c0 	call	772c <__lshift>
    504c:	100b883a 	mov	r5,r2
    5050:	003d9c06 	br	46c4 <_dtoa_r+0x938>
    5054:	00800e44 	movi	r2,57
    5058:	b8807026 	beq	r23,r2,521c <_dtoa_r+0x1490>
    505c:	b8800044 	addi	r2,r23,1
    5060:	b7000044 	addi	fp,r22,1
    5064:	b0800005 	stb	r2,0(r22)
    5068:	003e4106 	br	4970 <_dtoa_r+0xbe4>
    506c:	d8800317 	ldw	r2,12(sp)
    5070:	01800074 	movhi	r6,1
    5074:	31884904 	addi	r6,r6,8484
    5078:	b009883a 	mov	r4,r22
    507c:	100e90fa 	slli	r7,r2,3
    5080:	b80b883a 	mov	r5,r23
    5084:	398f883a 	add	r7,r7,r6
    5088:	38bffe17 	ldw	r2,-8(r7)
    508c:	d9800517 	ldw	r6,20(sp)
    5090:	38ffff17 	ldw	r3,-4(r7)
    5094:	37000044 	addi	fp,r6,1
    5098:	180f883a 	mov	r7,r3
    509c:	100d883a 	mov	r6,r2
    50a0:	0009f880 	call	9f88 <__muldf3>
    50a4:	a80b883a 	mov	r5,r21
    50a8:	a009883a 	mov	r4,r20
    50ac:	182f883a 	mov	r23,r3
    50b0:	102d883a 	mov	r22,r2
    50b4:	000a9440 	call	a944 <__fixdfsi>
    50b8:	1009883a 	mov	r4,r2
    50bc:	1027883a 	mov	r19,r2
    50c0:	000a84c0 	call	a84c <__floatsidf>
    50c4:	a80b883a 	mov	r5,r21
    50c8:	a009883a 	mov	r4,r20
    50cc:	180f883a 	mov	r7,r3
    50d0:	100d883a 	mov	r6,r2
    50d4:	0009e940 	call	9e94 <__subdf3>
    50d8:	180b883a 	mov	r5,r3
    50dc:	d8c00517 	ldw	r3,20(sp)
    50e0:	9cc00c04 	addi	r19,r19,48
    50e4:	1009883a 	mov	r4,r2
    50e8:	1cc00005 	stb	r19,0(r3)
    50ec:	2021883a 	mov	r16,r4
    50f0:	d9000317 	ldw	r4,12(sp)
    50f4:	00800044 	movi	r2,1
    50f8:	2823883a 	mov	r17,r5
    50fc:	20802226 	beq	r4,r2,5188 <_dtoa_r+0x13fc>
    5100:	1029883a 	mov	r20,r2
    5104:	0005883a 	mov	r2,zero
    5108:	00d00934 	movhi	r3,16420
    510c:	180f883a 	mov	r7,r3
    5110:	100d883a 	mov	r6,r2
    5114:	880b883a 	mov	r5,r17
    5118:	8009883a 	mov	r4,r16
    511c:	0009f880 	call	9f88 <__muldf3>
    5120:	180b883a 	mov	r5,r3
    5124:	1009883a 	mov	r4,r2
    5128:	1823883a 	mov	r17,r3
    512c:	1021883a 	mov	r16,r2
    5130:	000a9440 	call	a944 <__fixdfsi>
    5134:	1009883a 	mov	r4,r2
    5138:	102b883a 	mov	r21,r2
    513c:	000a84c0 	call	a84c <__floatsidf>
    5140:	880b883a 	mov	r5,r17
    5144:	8009883a 	mov	r4,r16
    5148:	180f883a 	mov	r7,r3
    514c:	100d883a 	mov	r6,r2
    5150:	0009e940 	call	9e94 <__subdf3>
    5154:	180b883a 	mov	r5,r3
    5158:	d8c00517 	ldw	r3,20(sp)
    515c:	1009883a 	mov	r4,r2
    5160:	ad400c04 	addi	r21,r21,48
    5164:	1d05883a 	add	r2,r3,r20
    5168:	15400005 	stb	r21,0(r2)
    516c:	2021883a 	mov	r16,r4
    5170:	d9000317 	ldw	r4,12(sp)
    5174:	a5000044 	addi	r20,r20,1
    5178:	2823883a 	mov	r17,r5
    517c:	a13fe11e 	bne	r20,r4,5104 <_dtoa_r+0x1378>
    5180:	e505883a 	add	r2,fp,r20
    5184:	173fffc4 	addi	fp,r2,-1
    5188:	0025883a 	mov	r18,zero
    518c:	04cff834 	movhi	r19,16352
    5190:	b009883a 	mov	r4,r22
    5194:	b80b883a 	mov	r5,r23
    5198:	900d883a 	mov	r6,r18
    519c:	980f883a 	mov	r7,r19
    51a0:	0009f140 	call	9f14 <__adddf3>
    51a4:	180b883a 	mov	r5,r3
    51a8:	1009883a 	mov	r4,r2
    51ac:	800d883a 	mov	r6,r16
    51b0:	880f883a 	mov	r7,r17
    51b4:	000a7c40 	call	a7c4 <__ltdf2>
    51b8:	103cab16 	blt	r2,zero,4468 <_dtoa_r+0x6dc>
    51bc:	0009883a 	mov	r4,zero
    51c0:	980b883a 	mov	r5,r19
    51c4:	b80f883a 	mov	r7,r23
    51c8:	b00d883a 	mov	r6,r22
    51cc:	0009e940 	call	9e94 <__subdf3>
    51d0:	180b883a 	mov	r5,r3
    51d4:	880f883a 	mov	r7,r17
    51d8:	1009883a 	mov	r4,r2
    51dc:	800d883a 	mov	r6,r16
    51e0:	000a6b40 	call	a6b4 <__gtdf2>
    51e4:	00bc470e 	bge	zero,r2,4304 <_dtoa_r+0x578>
    51e8:	00c00c04 	movi	r3,48
    51ec:	e73fffc4 	addi	fp,fp,-1
    51f0:	e0800007 	ldb	r2,0(fp)
    51f4:	10fffd26 	beq	r2,r3,51ec <_dtoa_r+0x1460>
    51f8:	d9800417 	ldw	r6,16(sp)
    51fc:	e7000044 	addi	fp,fp,1
    5200:	d9800d15 	stw	r6,52(sp)
    5204:	003cab06 	br	44b4 <_dtoa_r+0x728>
    5208:	d8c00f17 	ldw	r3,60(sp)
    520c:	d9001117 	ldw	r4,68(sp)
    5210:	20e1c83a 	sub	r16,r4,r3
    5214:	0007883a 	mov	r3,zero
    5218:	003d9b06 	br	4888 <_dtoa_r+0xafc>
    521c:	00800e44 	movi	r2,57
    5220:	b0800005 	stb	r2,0(r22)
    5224:	b5800044 	addi	r22,r22,1
    5228:	003dc106 	br	4930 <_dtoa_r+0xba4>
    522c:	05800084 	movi	r22,2
    5230:	003bf706 	br	4210 <_dtoa_r+0x484>
    5234:	d9000f17 	ldw	r4,60(sp)
    5238:	013c000e 	bge	zero,r4,423c <_dtoa_r+0x4b0>
    523c:	d9800e17 	ldw	r6,56(sp)
    5240:	01bc300e 	bge	zero,r6,4304 <_dtoa_r+0x578>
    5244:	0005883a 	mov	r2,zero
    5248:	00d00934 	movhi	r3,16420
    524c:	a80b883a 	mov	r5,r21
    5250:	180f883a 	mov	r7,r3
    5254:	a009883a 	mov	r4,r20
    5258:	100d883a 	mov	r6,r2
    525c:	0009f880 	call	9f88 <__muldf3>
    5260:	b1000044 	addi	r4,r22,1
    5264:	1021883a 	mov	r16,r2
    5268:	1823883a 	mov	r17,r3
    526c:	000a84c0 	call	a84c <__floatsidf>
    5270:	880b883a 	mov	r5,r17
    5274:	8009883a 	mov	r4,r16
    5278:	180f883a 	mov	r7,r3
    527c:	100d883a 	mov	r6,r2
    5280:	0009f880 	call	9f88 <__muldf3>
    5284:	0011883a 	mov	r8,zero
    5288:	02500734 	movhi	r9,16412
    528c:	180b883a 	mov	r5,r3
    5290:	480f883a 	mov	r7,r9
    5294:	1009883a 	mov	r4,r2
    5298:	400d883a 	mov	r6,r8
    529c:	0009f140 	call	9f14 <__adddf3>
    52a0:	102d883a 	mov	r22,r2
    52a4:	00bf3034 	movhi	r2,64704
    52a8:	10ef883a 	add	r23,r2,r3
    52ac:	d8800d17 	ldw	r2,52(sp)
    52b0:	d8c00e17 	ldw	r3,56(sp)
    52b4:	8029883a 	mov	r20,r16
    52b8:	10bfffc4 	addi	r2,r2,-1
    52bc:	882b883a 	mov	r21,r17
    52c0:	d8800415 	stw	r2,16(sp)
    52c4:	d8c00315 	stw	r3,12(sp)
    52c8:	003e8306 	br	4cd8 <_dtoa_r+0xf4c>
    52cc:	d8800117 	ldw	r2,4(sp)
    52d0:	dc001117 	ldw	r16,68(sp)
    52d4:	dc801017 	ldw	r18,64(sp)
    52d8:	00c00d84 	movi	r3,54
    52dc:	1887c83a 	sub	r3,r3,r2
    52e0:	003d6906 	br	4888 <_dtoa_r+0xafc>
    52e4:	01800044 	movi	r6,1
    52e8:	3021883a 	mov	r16,r6
    52ec:	d9800f15 	stw	r6,60(sp)
    52f0:	d9802615 	stw	r6,152(sp)
    52f4:	d9800e15 	stw	r6,56(sp)
    52f8:	003b9306 	br	4148 <_dtoa_r+0x3bc>
    52fc:	b021883a 	mov	r16,r22
    5300:	dd800f15 	stw	r22,60(sp)
    5304:	003b9006 	br	4148 <_dtoa_r+0x3bc>
    5308:	103e221e 	bne	r2,zero,4b94 <_dtoa_r+0xe08>
    530c:	b880004c 	andi	r2,r23,1
    5310:	1005003a 	cmpeq	r2,r2,zero
    5314:	103e1f1e 	bne	r2,zero,4b94 <_dtoa_r+0xe08>
    5318:	003e1b06 	br	4b88 <_dtoa_r+0xdfc>
    531c:	d9001617 	ldw	r4,88(sp)
    5320:	980b883a 	mov	r5,r19
    5324:	01800284 	movi	r6,10
    5328:	000f883a 	mov	r7,zero
    532c:	0007a9c0 	call	7a9c <__multadd>
    5330:	d8c00e17 	ldw	r3,56(sp)
    5334:	1027883a 	mov	r19,r2
    5338:	d8c00f15 	stw	r3,60(sp)
    533c:	003cd306 	br	468c <_dtoa_r+0x900>

00005340 <_fflush_r>:
    5340:	defffb04 	addi	sp,sp,-20
    5344:	dcc00315 	stw	r19,12(sp)
    5348:	dc800215 	stw	r18,8(sp)
    534c:	dfc00415 	stw	ra,16(sp)
    5350:	dc400115 	stw	r17,4(sp)
    5354:	dc000015 	stw	r16,0(sp)
    5358:	2027883a 	mov	r19,r4
    535c:	2825883a 	mov	r18,r5
    5360:	20000226 	beq	r4,zero,536c <_fflush_r+0x2c>
    5364:	20800e17 	ldw	r2,56(r4)
    5368:	10005626 	beq	r2,zero,54c4 <_fflush_r+0x184>
    536c:	9100030b 	ldhu	r4,12(r18)
    5370:	20ffffcc 	andi	r3,r4,65535
    5374:	18e0001c 	xori	r3,r3,32768
    5378:	18e00004 	addi	r3,r3,-32768
    537c:	1880020c 	andi	r2,r3,8
    5380:	1000261e 	bne	r2,zero,541c <_fflush_r+0xdc>
    5384:	90c00117 	ldw	r3,4(r18)
    5388:	20820014 	ori	r2,r4,2048
    538c:	9080030d 	sth	r2,12(r18)
    5390:	1009883a 	mov	r4,r2
    5394:	00c0400e 	bge	zero,r3,5498 <_fflush_r+0x158>
    5398:	92000a17 	ldw	r8,40(r18)
    539c:	40004026 	beq	r8,zero,54a0 <_fflush_r+0x160>
    53a0:	2084000c 	andi	r2,r4,4096
    53a4:	10005326 	beq	r2,zero,54f4 <_fflush_r+0x1b4>
    53a8:	94001417 	ldw	r16,80(r18)
    53ac:	9080030b 	ldhu	r2,12(r18)
    53b0:	1080010c 	andi	r2,r2,4
    53b4:	1000481e 	bne	r2,zero,54d8 <_fflush_r+0x198>
    53b8:	91400717 	ldw	r5,28(r18)
    53bc:	9809883a 	mov	r4,r19
    53c0:	800d883a 	mov	r6,r16
    53c4:	000f883a 	mov	r7,zero
    53c8:	403ee83a 	callr	r8
    53cc:	8080261e 	bne	r16,r2,5468 <_fflush_r+0x128>
    53d0:	9080030b 	ldhu	r2,12(r18)
    53d4:	91000417 	ldw	r4,16(r18)
    53d8:	90000115 	stw	zero,4(r18)
    53dc:	10bdffcc 	andi	r2,r2,63487
    53e0:	10ffffcc 	andi	r3,r2,65535
    53e4:	18c4000c 	andi	r3,r3,4096
    53e8:	9080030d 	sth	r2,12(r18)
    53ec:	91000015 	stw	r4,0(r18)
    53f0:	18002b26 	beq	r3,zero,54a0 <_fflush_r+0x160>
    53f4:	0007883a 	mov	r3,zero
    53f8:	1805883a 	mov	r2,r3
    53fc:	94001415 	stw	r16,80(r18)
    5400:	dfc00417 	ldw	ra,16(sp)
    5404:	dcc00317 	ldw	r19,12(sp)
    5408:	dc800217 	ldw	r18,8(sp)
    540c:	dc400117 	ldw	r17,4(sp)
    5410:	dc000017 	ldw	r16,0(sp)
    5414:	dec00504 	addi	sp,sp,20
    5418:	f800283a 	ret
    541c:	94400417 	ldw	r17,16(r18)
    5420:	88001f26 	beq	r17,zero,54a0 <_fflush_r+0x160>
    5424:	90800017 	ldw	r2,0(r18)
    5428:	18c000cc 	andi	r3,r3,3
    542c:	94400015 	stw	r17,0(r18)
    5430:	1461c83a 	sub	r16,r2,r17
    5434:	18002526 	beq	r3,zero,54cc <_fflush_r+0x18c>
    5438:	0005883a 	mov	r2,zero
    543c:	90800215 	stw	r2,8(r18)
    5440:	0400170e 	bge	zero,r16,54a0 <_fflush_r+0x160>
    5444:	90c00917 	ldw	r3,36(r18)
    5448:	91400717 	ldw	r5,28(r18)
    544c:	880d883a 	mov	r6,r17
    5450:	800f883a 	mov	r7,r16
    5454:	9809883a 	mov	r4,r19
    5458:	183ee83a 	callr	r3
    545c:	88a3883a 	add	r17,r17,r2
    5460:	80a1c83a 	sub	r16,r16,r2
    5464:	00bff616 	blt	zero,r2,5440 <_fflush_r+0x100>
    5468:	9080030b 	ldhu	r2,12(r18)
    546c:	00ffffc4 	movi	r3,-1
    5470:	10801014 	ori	r2,r2,64
    5474:	9080030d 	sth	r2,12(r18)
    5478:	1805883a 	mov	r2,r3
    547c:	dfc00417 	ldw	ra,16(sp)
    5480:	dcc00317 	ldw	r19,12(sp)
    5484:	dc800217 	ldw	r18,8(sp)
    5488:	dc400117 	ldw	r17,4(sp)
    548c:	dc000017 	ldw	r16,0(sp)
    5490:	dec00504 	addi	sp,sp,20
    5494:	f800283a 	ret
    5498:	90800f17 	ldw	r2,60(r18)
    549c:	00bfbe16 	blt	zero,r2,5398 <_fflush_r+0x58>
    54a0:	0007883a 	mov	r3,zero
    54a4:	1805883a 	mov	r2,r3
    54a8:	dfc00417 	ldw	ra,16(sp)
    54ac:	dcc00317 	ldw	r19,12(sp)
    54b0:	dc800217 	ldw	r18,8(sp)
    54b4:	dc400117 	ldw	r17,4(sp)
    54b8:	dc000017 	ldw	r16,0(sp)
    54bc:	dec00504 	addi	sp,sp,20
    54c0:	f800283a 	ret
    54c4:	00055d80 	call	55d8 <__sinit>
    54c8:	003fa806 	br	536c <_fflush_r+0x2c>
    54cc:	90800517 	ldw	r2,20(r18)
    54d0:	90800215 	stw	r2,8(r18)
    54d4:	003fda06 	br	5440 <_fflush_r+0x100>
    54d8:	90800117 	ldw	r2,4(r18)
    54dc:	90c00c17 	ldw	r3,48(r18)
    54e0:	80a1c83a 	sub	r16,r16,r2
    54e4:	183fb426 	beq	r3,zero,53b8 <_fflush_r+0x78>
    54e8:	90800f17 	ldw	r2,60(r18)
    54ec:	80a1c83a 	sub	r16,r16,r2
    54f0:	003fb106 	br	53b8 <_fflush_r+0x78>
    54f4:	91400717 	ldw	r5,28(r18)
    54f8:	9809883a 	mov	r4,r19
    54fc:	000d883a 	mov	r6,zero
    5500:	01c00044 	movi	r7,1
    5504:	403ee83a 	callr	r8
    5508:	1021883a 	mov	r16,r2
    550c:	00bfffc4 	movi	r2,-1
    5510:	80800226 	beq	r16,r2,551c <_fflush_r+0x1dc>
    5514:	92000a17 	ldw	r8,40(r18)
    5518:	003fa406 	br	53ac <_fflush_r+0x6c>
    551c:	98c00017 	ldw	r3,0(r19)
    5520:	00800744 	movi	r2,29
    5524:	18bfde26 	beq	r3,r2,54a0 <_fflush_r+0x160>
    5528:	9080030b 	ldhu	r2,12(r18)
    552c:	8007883a 	mov	r3,r16
    5530:	10801014 	ori	r2,r2,64
    5534:	9080030d 	sth	r2,12(r18)
    5538:	003fcf06 	br	5478 <_fflush_r+0x138>

0000553c <fflush>:
    553c:	01400034 	movhi	r5,0
    5540:	2954d004 	addi	r5,r5,21312
    5544:	2007883a 	mov	r3,r4
    5548:	20000526 	beq	r4,zero,5560 <fflush+0x24>
    554c:	00800074 	movhi	r2,1
    5550:	10907804 	addi	r2,r2,16864
    5554:	11000017 	ldw	r4,0(r2)
    5558:	180b883a 	mov	r5,r3
    555c:	00053401 	jmpi	5340 <_fflush_r>
    5560:	00800074 	movhi	r2,1
    5564:	10907904 	addi	r2,r2,16868
    5568:	11000017 	ldw	r4,0(r2)
    556c:	000610c1 	jmpi	610c <_fwalk_reent>

00005570 <std>:
    5570:	00800074 	movhi	r2,1
    5574:	10a1a704 	addi	r2,r2,-31076
    5578:	20800b15 	stw	r2,44(r4)
    557c:	00800074 	movhi	r2,1
    5580:	10a1e204 	addi	r2,r2,-30840
    5584:	20800815 	stw	r2,32(r4)
    5588:	00c00074 	movhi	r3,1
    558c:	18e1c304 	addi	r3,r3,-30964
    5590:	00800074 	movhi	r2,1
    5594:	10a1a904 	addi	r2,r2,-31068
    5598:	2140030d 	sth	r5,12(r4)
    559c:	2180038d 	sth	r6,14(r4)
    55a0:	20c00915 	stw	r3,36(r4)
    55a4:	20800a15 	stw	r2,40(r4)
    55a8:	20000015 	stw	zero,0(r4)
    55ac:	20000115 	stw	zero,4(r4)
    55b0:	20000215 	stw	zero,8(r4)
    55b4:	20000415 	stw	zero,16(r4)
    55b8:	20000515 	stw	zero,20(r4)
    55bc:	20000615 	stw	zero,24(r4)
    55c0:	21000715 	stw	r4,28(r4)
    55c4:	f800283a 	ret

000055c8 <__sfp_lock_acquire>:
    55c8:	f800283a 	ret

000055cc <__sfp_lock_release>:
    55cc:	f800283a 	ret

000055d0 <__sinit_lock_acquire>:
    55d0:	f800283a 	ret

000055d4 <__sinit_lock_release>:
    55d4:	f800283a 	ret

000055d8 <__sinit>:
    55d8:	20800e17 	ldw	r2,56(r4)
    55dc:	defffd04 	addi	sp,sp,-12
    55e0:	dc400115 	stw	r17,4(sp)
    55e4:	dc000015 	stw	r16,0(sp)
    55e8:	dfc00215 	stw	ra,8(sp)
    55ec:	04400044 	movi	r17,1
    55f0:	01400104 	movi	r5,4
    55f4:	000d883a 	mov	r6,zero
    55f8:	2021883a 	mov	r16,r4
    55fc:	2200bb04 	addi	r8,r4,748
    5600:	200f883a 	mov	r7,r4
    5604:	10000526 	beq	r2,zero,561c <__sinit+0x44>
    5608:	dfc00217 	ldw	ra,8(sp)
    560c:	dc400117 	ldw	r17,4(sp)
    5610:	dc000017 	ldw	r16,0(sp)
    5614:	dec00304 	addi	sp,sp,12
    5618:	f800283a 	ret
    561c:	21000117 	ldw	r4,4(r4)
    5620:	00800034 	movhi	r2,0
    5624:	1095af04 	addi	r2,r2,22204
    5628:	00c000c4 	movi	r3,3
    562c:	80800f15 	stw	r2,60(r16)
    5630:	80c0b915 	stw	r3,740(r16)
    5634:	8200ba15 	stw	r8,744(r16)
    5638:	84400e15 	stw	r17,56(r16)
    563c:	8000b815 	stw	zero,736(r16)
    5640:	00055700 	call	5570 <std>
    5644:	81000217 	ldw	r4,8(r16)
    5648:	880d883a 	mov	r6,r17
    564c:	800f883a 	mov	r7,r16
    5650:	01400284 	movi	r5,10
    5654:	00055700 	call	5570 <std>
    5658:	81000317 	ldw	r4,12(r16)
    565c:	800f883a 	mov	r7,r16
    5660:	01400484 	movi	r5,18
    5664:	01800084 	movi	r6,2
    5668:	dfc00217 	ldw	ra,8(sp)
    566c:	dc400117 	ldw	r17,4(sp)
    5670:	dc000017 	ldw	r16,0(sp)
    5674:	dec00304 	addi	sp,sp,12
    5678:	00055701 	jmpi	5570 <std>

0000567c <__fp_lock>:
    567c:	0005883a 	mov	r2,zero
    5680:	f800283a 	ret

00005684 <__fp_unlock>:
    5684:	0005883a 	mov	r2,zero
    5688:	f800283a 	ret

0000568c <__fp_unlock_all>:
    568c:	00800074 	movhi	r2,1
    5690:	10907804 	addi	r2,r2,16864
    5694:	11000017 	ldw	r4,0(r2)
    5698:	01400034 	movhi	r5,0
    569c:	2955a104 	addi	r5,r5,22148
    56a0:	00061d41 	jmpi	61d4 <_fwalk>

000056a4 <__fp_lock_all>:
    56a4:	00800074 	movhi	r2,1
    56a8:	10907804 	addi	r2,r2,16864
    56ac:	11000017 	ldw	r4,0(r2)
    56b0:	01400034 	movhi	r5,0
    56b4:	29559f04 	addi	r5,r5,22140
    56b8:	00061d41 	jmpi	61d4 <_fwalk>

000056bc <_cleanup_r>:
    56bc:	01400074 	movhi	r5,1
    56c0:	29634404 	addi	r5,r5,-29424
    56c4:	00061d41 	jmpi	61d4 <_fwalk>

000056c8 <_cleanup>:
    56c8:	00800074 	movhi	r2,1
    56cc:	10907904 	addi	r2,r2,16868
    56d0:	11000017 	ldw	r4,0(r2)
    56d4:	00056bc1 	jmpi	56bc <_cleanup_r>

000056d8 <__sfmoreglue>:
    56d8:	defffc04 	addi	sp,sp,-16
    56dc:	dc400115 	stw	r17,4(sp)
    56e0:	2c401724 	muli	r17,r5,92
    56e4:	dc800215 	stw	r18,8(sp)
    56e8:	2825883a 	mov	r18,r5
    56ec:	89400304 	addi	r5,r17,12
    56f0:	dc000015 	stw	r16,0(sp)
    56f4:	dfc00315 	stw	ra,12(sp)
    56f8:	00064e40 	call	64e4 <_malloc_r>
    56fc:	0021883a 	mov	r16,zero
    5700:	880d883a 	mov	r6,r17
    5704:	000b883a 	mov	r5,zero
    5708:	10000626 	beq	r2,zero,5724 <__sfmoreglue+0x4c>
    570c:	11000304 	addi	r4,r2,12
    5710:	14800115 	stw	r18,4(r2)
    5714:	10000015 	stw	zero,0(r2)
    5718:	11000215 	stw	r4,8(r2)
    571c:	1021883a 	mov	r16,r2
    5720:	00019dc0 	call	19dc <memset>
    5724:	8005883a 	mov	r2,r16
    5728:	dfc00317 	ldw	ra,12(sp)
    572c:	dc800217 	ldw	r18,8(sp)
    5730:	dc400117 	ldw	r17,4(sp)
    5734:	dc000017 	ldw	r16,0(sp)
    5738:	dec00404 	addi	sp,sp,16
    573c:	f800283a 	ret

00005740 <__sfp>:
    5740:	defffd04 	addi	sp,sp,-12
    5744:	00800074 	movhi	r2,1
    5748:	10907904 	addi	r2,r2,16868
    574c:	dc000015 	stw	r16,0(sp)
    5750:	14000017 	ldw	r16,0(r2)
    5754:	dc400115 	stw	r17,4(sp)
    5758:	dfc00215 	stw	ra,8(sp)
    575c:	80800e17 	ldw	r2,56(r16)
    5760:	2023883a 	mov	r17,r4
    5764:	10002626 	beq	r2,zero,5800 <__sfp+0xc0>
    5768:	8400b804 	addi	r16,r16,736
    576c:	80800117 	ldw	r2,4(r16)
    5770:	81000217 	ldw	r4,8(r16)
    5774:	10ffffc4 	addi	r3,r2,-1
    5778:	18000916 	blt	r3,zero,57a0 <__sfp+0x60>
    577c:	2080030f 	ldh	r2,12(r4)
    5780:	10000b26 	beq	r2,zero,57b0 <__sfp+0x70>
    5784:	017fffc4 	movi	r5,-1
    5788:	00000206 	br	5794 <__sfp+0x54>
    578c:	2080030f 	ldh	r2,12(r4)
    5790:	10000726 	beq	r2,zero,57b0 <__sfp+0x70>
    5794:	18ffffc4 	addi	r3,r3,-1
    5798:	21001704 	addi	r4,r4,92
    579c:	197ffb1e 	bne	r3,r5,578c <__sfp+0x4c>
    57a0:	80800017 	ldw	r2,0(r16)
    57a4:	10001926 	beq	r2,zero,580c <__sfp+0xcc>
    57a8:	1021883a 	mov	r16,r2
    57ac:	003fef06 	br	576c <__sfp+0x2c>
    57b0:	00bfffc4 	movi	r2,-1
    57b4:	00c00044 	movi	r3,1
    57b8:	2080038d 	sth	r2,14(r4)
    57bc:	20c0030d 	sth	r3,12(r4)
    57c0:	20000015 	stw	zero,0(r4)
    57c4:	20000215 	stw	zero,8(r4)
    57c8:	20000115 	stw	zero,4(r4)
    57cc:	20000415 	stw	zero,16(r4)
    57d0:	20000515 	stw	zero,20(r4)
    57d4:	20000615 	stw	zero,24(r4)
    57d8:	20000c15 	stw	zero,48(r4)
    57dc:	20000d15 	stw	zero,52(r4)
    57e0:	20001115 	stw	zero,68(r4)
    57e4:	20001215 	stw	zero,72(r4)
    57e8:	2005883a 	mov	r2,r4
    57ec:	dfc00217 	ldw	ra,8(sp)
    57f0:	dc400117 	ldw	r17,4(sp)
    57f4:	dc000017 	ldw	r16,0(sp)
    57f8:	dec00304 	addi	sp,sp,12
    57fc:	f800283a 	ret
    5800:	8009883a 	mov	r4,r16
    5804:	00055d80 	call	55d8 <__sinit>
    5808:	003fd706 	br	5768 <__sfp+0x28>
    580c:	8809883a 	mov	r4,r17
    5810:	01400104 	movi	r5,4
    5814:	00056d80 	call	56d8 <__sfmoreglue>
    5818:	80800015 	stw	r2,0(r16)
    581c:	103fe21e 	bne	r2,zero,57a8 <__sfp+0x68>
    5820:	00800304 	movi	r2,12
    5824:	0009883a 	mov	r4,zero
    5828:	88800015 	stw	r2,0(r17)
    582c:	003fee06 	br	57e8 <__sfp+0xa8>

00005830 <_malloc_trim_r>:
    5830:	defffb04 	addi	sp,sp,-20
    5834:	dcc00315 	stw	r19,12(sp)
    5838:	04c00074 	movhi	r19,1
    583c:	9cca0704 	addi	r19,r19,10268
    5840:	dc800215 	stw	r18,8(sp)
    5844:	dc400115 	stw	r17,4(sp)
    5848:	dc000015 	stw	r16,0(sp)
    584c:	2823883a 	mov	r17,r5
    5850:	2025883a 	mov	r18,r4
    5854:	dfc00415 	stw	ra,16(sp)
    5858:	000baec0 	call	baec <__malloc_lock>
    585c:	98800217 	ldw	r2,8(r19)
    5860:	9009883a 	mov	r4,r18
    5864:	000b883a 	mov	r5,zero
    5868:	10c00117 	ldw	r3,4(r2)
    586c:	00bfff04 	movi	r2,-4
    5870:	18a0703a 	and	r16,r3,r2
    5874:	8463c83a 	sub	r17,r16,r17
    5878:	8c43fbc4 	addi	r17,r17,4079
    587c:	8822d33a 	srli	r17,r17,12
    5880:	0083ffc4 	movi	r2,4095
    5884:	8c7fffc4 	addi	r17,r17,-1
    5888:	8822933a 	slli	r17,r17,12
    588c:	1440060e 	bge	r2,r17,58a8 <_malloc_trim_r+0x78>
    5890:	000862c0 	call	862c <_sbrk_r>
    5894:	98c00217 	ldw	r3,8(r19)
    5898:	9009883a 	mov	r4,r18
    589c:	044bc83a 	sub	r5,zero,r17
    58a0:	80c7883a 	add	r3,r16,r3
    58a4:	10c00926 	beq	r2,r3,58cc <_malloc_trim_r+0x9c>
    58a8:	000bb0c0 	call	bb0c <__malloc_unlock>
    58ac:	0005883a 	mov	r2,zero
    58b0:	dfc00417 	ldw	ra,16(sp)
    58b4:	dcc00317 	ldw	r19,12(sp)
    58b8:	dc800217 	ldw	r18,8(sp)
    58bc:	dc400117 	ldw	r17,4(sp)
    58c0:	dc000017 	ldw	r16,0(sp)
    58c4:	dec00504 	addi	sp,sp,20
    58c8:	f800283a 	ret
    58cc:	9009883a 	mov	r4,r18
    58d0:	000862c0 	call	862c <_sbrk_r>
    58d4:	844dc83a 	sub	r6,r16,r17
    58d8:	00ffffc4 	movi	r3,-1
    58dc:	9009883a 	mov	r4,r18
    58e0:	000b883a 	mov	r5,zero
    58e4:	01c00074 	movhi	r7,1
    58e8:	39d81e04 	addi	r7,r7,24696
    58ec:	31800054 	ori	r6,r6,1
    58f0:	10c00926 	beq	r2,r3,5918 <_malloc_trim_r+0xe8>
    58f4:	38800017 	ldw	r2,0(r7)
    58f8:	98c00217 	ldw	r3,8(r19)
    58fc:	9009883a 	mov	r4,r18
    5900:	1445c83a 	sub	r2,r2,r17
    5904:	38800015 	stw	r2,0(r7)
    5908:	19800115 	stw	r6,4(r3)
    590c:	000bb0c0 	call	bb0c <__malloc_unlock>
    5910:	00800044 	movi	r2,1
    5914:	003fe606 	br	58b0 <_malloc_trim_r+0x80>
    5918:	000862c0 	call	862c <_sbrk_r>
    591c:	99800217 	ldw	r6,8(r19)
    5920:	100f883a 	mov	r7,r2
    5924:	9009883a 	mov	r4,r18
    5928:	1187c83a 	sub	r3,r2,r6
    592c:	008003c4 	movi	r2,15
    5930:	19400054 	ori	r5,r3,1
    5934:	10ffdc0e 	bge	r2,r3,58a8 <_malloc_trim_r+0x78>
    5938:	00800074 	movhi	r2,1
    593c:	10907d04 	addi	r2,r2,16884
    5940:	10c00017 	ldw	r3,0(r2)
    5944:	00800074 	movhi	r2,1
    5948:	10981e04 	addi	r2,r2,24696
    594c:	31400115 	stw	r5,4(r6)
    5950:	38c7c83a 	sub	r3,r7,r3
    5954:	10c00015 	stw	r3,0(r2)
    5958:	003fd306 	br	58a8 <_malloc_trim_r+0x78>

0000595c <_free_r>:
    595c:	defffd04 	addi	sp,sp,-12
    5960:	dc400115 	stw	r17,4(sp)
    5964:	dc000015 	stw	r16,0(sp)
    5968:	dfc00215 	stw	ra,8(sp)
    596c:	2821883a 	mov	r16,r5
    5970:	2023883a 	mov	r17,r4
    5974:	28005a26 	beq	r5,zero,5ae0 <_free_r+0x184>
    5978:	000baec0 	call	baec <__malloc_lock>
    597c:	823ffe04 	addi	r8,r16,-8
    5980:	41400117 	ldw	r5,4(r8)
    5984:	00bfff84 	movi	r2,-2
    5988:	02800074 	movhi	r10,1
    598c:	528a0704 	addi	r10,r10,10268
    5990:	288e703a 	and	r7,r5,r2
    5994:	41cd883a 	add	r6,r8,r7
    5998:	30c00117 	ldw	r3,4(r6)
    599c:	51000217 	ldw	r4,8(r10)
    59a0:	00bfff04 	movi	r2,-4
    59a4:	1892703a 	and	r9,r3,r2
    59a8:	5017883a 	mov	r11,r10
    59ac:	31006726 	beq	r6,r4,5b4c <_free_r+0x1f0>
    59b0:	2880004c 	andi	r2,r5,1
    59b4:	1005003a 	cmpeq	r2,r2,zero
    59b8:	32400115 	stw	r9,4(r6)
    59bc:	10001a1e 	bne	r2,zero,5a28 <_free_r+0xcc>
    59c0:	000b883a 	mov	r5,zero
    59c4:	3247883a 	add	r3,r6,r9
    59c8:	18800117 	ldw	r2,4(r3)
    59cc:	1080004c 	andi	r2,r2,1
    59d0:	1000231e 	bne	r2,zero,5a60 <_free_r+0x104>
    59d4:	280ac03a 	cmpne	r5,r5,zero
    59d8:	3a4f883a 	add	r7,r7,r9
    59dc:	2800451e 	bne	r5,zero,5af4 <_free_r+0x198>
    59e0:	31000217 	ldw	r4,8(r6)
    59e4:	00800074 	movhi	r2,1
    59e8:	108a0904 	addi	r2,r2,10276
    59ec:	20807b26 	beq	r4,r2,5bdc <_free_r+0x280>
    59f0:	30800317 	ldw	r2,12(r6)
    59f4:	3a07883a 	add	r3,r7,r8
    59f8:	19c00015 	stw	r7,0(r3)
    59fc:	11000215 	stw	r4,8(r2)
    5a00:	20800315 	stw	r2,12(r4)
    5a04:	38800054 	ori	r2,r7,1
    5a08:	40800115 	stw	r2,4(r8)
    5a0c:	28001a26 	beq	r5,zero,5a78 <_free_r+0x11c>
    5a10:	8809883a 	mov	r4,r17
    5a14:	dfc00217 	ldw	ra,8(sp)
    5a18:	dc400117 	ldw	r17,4(sp)
    5a1c:	dc000017 	ldw	r16,0(sp)
    5a20:	dec00304 	addi	sp,sp,12
    5a24:	000bb0c1 	jmpi	bb0c <__malloc_unlock>
    5a28:	80bffe17 	ldw	r2,-8(r16)
    5a2c:	50c00204 	addi	r3,r10,8
    5a30:	4091c83a 	sub	r8,r8,r2
    5a34:	41000217 	ldw	r4,8(r8)
    5a38:	388f883a 	add	r7,r7,r2
    5a3c:	20c06126 	beq	r4,r3,5bc4 <_free_r+0x268>
    5a40:	40800317 	ldw	r2,12(r8)
    5a44:	3247883a 	add	r3,r6,r9
    5a48:	000b883a 	mov	r5,zero
    5a4c:	11000215 	stw	r4,8(r2)
    5a50:	20800315 	stw	r2,12(r4)
    5a54:	18800117 	ldw	r2,4(r3)
    5a58:	1080004c 	andi	r2,r2,1
    5a5c:	103fdd26 	beq	r2,zero,59d4 <_free_r+0x78>
    5a60:	38800054 	ori	r2,r7,1
    5a64:	3a07883a 	add	r3,r7,r8
    5a68:	280ac03a 	cmpne	r5,r5,zero
    5a6c:	40800115 	stw	r2,4(r8)
    5a70:	19c00015 	stw	r7,0(r3)
    5a74:	283fe61e 	bne	r5,zero,5a10 <_free_r+0xb4>
    5a78:	00807fc4 	movi	r2,511
    5a7c:	11c01f2e 	bgeu	r2,r7,5afc <_free_r+0x1a0>
    5a80:	3806d27a 	srli	r3,r7,9
    5a84:	1800481e 	bne	r3,zero,5ba8 <_free_r+0x24c>
    5a88:	3804d0fa 	srli	r2,r7,3
    5a8c:	100690fa 	slli	r3,r2,3
    5a90:	1acd883a 	add	r6,r3,r11
    5a94:	31400217 	ldw	r5,8(r6)
    5a98:	31405926 	beq	r6,r5,5c00 <_free_r+0x2a4>
    5a9c:	28800117 	ldw	r2,4(r5)
    5aa0:	00ffff04 	movi	r3,-4
    5aa4:	10c4703a 	and	r2,r2,r3
    5aa8:	3880022e 	bgeu	r7,r2,5ab4 <_free_r+0x158>
    5aac:	29400217 	ldw	r5,8(r5)
    5ab0:	317ffa1e 	bne	r6,r5,5a9c <_free_r+0x140>
    5ab4:	29800317 	ldw	r6,12(r5)
    5ab8:	41800315 	stw	r6,12(r8)
    5abc:	41400215 	stw	r5,8(r8)
    5ac0:	8809883a 	mov	r4,r17
    5ac4:	2a000315 	stw	r8,12(r5)
    5ac8:	32000215 	stw	r8,8(r6)
    5acc:	dfc00217 	ldw	ra,8(sp)
    5ad0:	dc400117 	ldw	r17,4(sp)
    5ad4:	dc000017 	ldw	r16,0(sp)
    5ad8:	dec00304 	addi	sp,sp,12
    5adc:	000bb0c1 	jmpi	bb0c <__malloc_unlock>
    5ae0:	dfc00217 	ldw	ra,8(sp)
    5ae4:	dc400117 	ldw	r17,4(sp)
    5ae8:	dc000017 	ldw	r16,0(sp)
    5aec:	dec00304 	addi	sp,sp,12
    5af0:	f800283a 	ret
    5af4:	31000217 	ldw	r4,8(r6)
    5af8:	003fbd06 	br	59f0 <_free_r+0x94>
    5afc:	3806d0fa 	srli	r3,r7,3
    5b00:	00800044 	movi	r2,1
    5b04:	51400117 	ldw	r5,4(r10)
    5b08:	180890fa 	slli	r4,r3,3
    5b0c:	1807d0ba 	srai	r3,r3,2
    5b10:	22c9883a 	add	r4,r4,r11
    5b14:	21800217 	ldw	r6,8(r4)
    5b18:	10c4983a 	sll	r2,r2,r3
    5b1c:	41000315 	stw	r4,12(r8)
    5b20:	41800215 	stw	r6,8(r8)
    5b24:	288ab03a 	or	r5,r5,r2
    5b28:	22000215 	stw	r8,8(r4)
    5b2c:	8809883a 	mov	r4,r17
    5b30:	51400115 	stw	r5,4(r10)
    5b34:	32000315 	stw	r8,12(r6)
    5b38:	dfc00217 	ldw	ra,8(sp)
    5b3c:	dc400117 	ldw	r17,4(sp)
    5b40:	dc000017 	ldw	r16,0(sp)
    5b44:	dec00304 	addi	sp,sp,12
    5b48:	000bb0c1 	jmpi	bb0c <__malloc_unlock>
    5b4c:	2880004c 	andi	r2,r5,1
    5b50:	3a4d883a 	add	r6,r7,r9
    5b54:	1000071e 	bne	r2,zero,5b74 <_free_r+0x218>
    5b58:	80bffe17 	ldw	r2,-8(r16)
    5b5c:	4091c83a 	sub	r8,r8,r2
    5b60:	41000317 	ldw	r4,12(r8)
    5b64:	40c00217 	ldw	r3,8(r8)
    5b68:	308d883a 	add	r6,r6,r2
    5b6c:	20c00215 	stw	r3,8(r4)
    5b70:	19000315 	stw	r4,12(r3)
    5b74:	00800074 	movhi	r2,1
    5b78:	10907c04 	addi	r2,r2,16880
    5b7c:	11000017 	ldw	r4,0(r2)
    5b80:	30c00054 	ori	r3,r6,1
    5b84:	52000215 	stw	r8,8(r10)
    5b88:	40c00115 	stw	r3,4(r8)
    5b8c:	313fa036 	bltu	r6,r4,5a10 <_free_r+0xb4>
    5b90:	00800074 	movhi	r2,1
    5b94:	10981404 	addi	r2,r2,24656
    5b98:	11400017 	ldw	r5,0(r2)
    5b9c:	8809883a 	mov	r4,r17
    5ba0:	00058300 	call	5830 <_malloc_trim_r>
    5ba4:	003f9a06 	br	5a10 <_free_r+0xb4>
    5ba8:	00800104 	movi	r2,4
    5bac:	10c0072e 	bgeu	r2,r3,5bcc <_free_r+0x270>
    5bb0:	00800504 	movi	r2,20
    5bb4:	10c01936 	bltu	r2,r3,5c1c <_free_r+0x2c0>
    5bb8:	188016c4 	addi	r2,r3,91
    5bbc:	100690fa 	slli	r3,r2,3
    5bc0:	003fb306 	br	5a90 <_free_r+0x134>
    5bc4:	01400044 	movi	r5,1
    5bc8:	003f7e06 	br	59c4 <_free_r+0x68>
    5bcc:	3804d1ba 	srli	r2,r7,6
    5bd0:	10800e04 	addi	r2,r2,56
    5bd4:	100690fa 	slli	r3,r2,3
    5bd8:	003fad06 	br	5a90 <_free_r+0x134>
    5bdc:	22000315 	stw	r8,12(r4)
    5be0:	22000215 	stw	r8,8(r4)
    5be4:	3a05883a 	add	r2,r7,r8
    5be8:	38c00054 	ori	r3,r7,1
    5bec:	11c00015 	stw	r7,0(r2)
    5bf0:	41000215 	stw	r4,8(r8)
    5bf4:	40c00115 	stw	r3,4(r8)
    5bf8:	41000315 	stw	r4,12(r8)
    5bfc:	003f8406 	br	5a10 <_free_r+0xb4>
    5c00:	1005d0ba 	srai	r2,r2,2
    5c04:	00c00044 	movi	r3,1
    5c08:	51000117 	ldw	r4,4(r10)
    5c0c:	1886983a 	sll	r3,r3,r2
    5c10:	20c8b03a 	or	r4,r4,r3
    5c14:	51000115 	stw	r4,4(r10)
    5c18:	003fa706 	br	5ab8 <_free_r+0x15c>
    5c1c:	00801504 	movi	r2,84
    5c20:	10c00436 	bltu	r2,r3,5c34 <_free_r+0x2d8>
    5c24:	3804d33a 	srli	r2,r7,12
    5c28:	10801b84 	addi	r2,r2,110
    5c2c:	100690fa 	slli	r3,r2,3
    5c30:	003f9706 	br	5a90 <_free_r+0x134>
    5c34:	00805504 	movi	r2,340
    5c38:	10c00436 	bltu	r2,r3,5c4c <_free_r+0x2f0>
    5c3c:	3804d3fa 	srli	r2,r7,15
    5c40:	10801dc4 	addi	r2,r2,119
    5c44:	100690fa 	slli	r3,r2,3
    5c48:	003f9106 	br	5a90 <_free_r+0x134>
    5c4c:	00815504 	movi	r2,1364
    5c50:	10c0032e 	bgeu	r2,r3,5c60 <_free_r+0x304>
    5c54:	00801f84 	movi	r2,126
    5c58:	00c0fc04 	movi	r3,1008
    5c5c:	003f8c06 	br	5a90 <_free_r+0x134>
    5c60:	3804d4ba 	srli	r2,r7,18
    5c64:	10801f04 	addi	r2,r2,124
    5c68:	100690fa 	slli	r3,r2,3
    5c6c:	003f8806 	br	5a90 <_free_r+0x134>

00005c70 <__sfvwrite_r>:
    5c70:	30800217 	ldw	r2,8(r6)
    5c74:	defff504 	addi	sp,sp,-44
    5c78:	df000915 	stw	fp,36(sp)
    5c7c:	dd800715 	stw	r22,28(sp)
    5c80:	dc800315 	stw	r18,12(sp)
    5c84:	dfc00a15 	stw	ra,40(sp)
    5c88:	ddc00815 	stw	r23,32(sp)
    5c8c:	dd400615 	stw	r21,24(sp)
    5c90:	dd000515 	stw	r20,20(sp)
    5c94:	dcc00415 	stw	r19,16(sp)
    5c98:	dc400215 	stw	r17,8(sp)
    5c9c:	dc000115 	stw	r16,4(sp)
    5ca0:	302d883a 	mov	r22,r6
    5ca4:	2039883a 	mov	fp,r4
    5ca8:	2825883a 	mov	r18,r5
    5cac:	10001c26 	beq	r2,zero,5d20 <__sfvwrite_r+0xb0>
    5cb0:	29c0030b 	ldhu	r7,12(r5)
    5cb4:	3880020c 	andi	r2,r7,8
    5cb8:	10002726 	beq	r2,zero,5d58 <__sfvwrite_r+0xe8>
    5cbc:	28800417 	ldw	r2,16(r5)
    5cc0:	10002526 	beq	r2,zero,5d58 <__sfvwrite_r+0xe8>
    5cc4:	3880008c 	andi	r2,r7,2
    5cc8:	b5400017 	ldw	r21,0(r22)
    5ccc:	10002826 	beq	r2,zero,5d70 <__sfvwrite_r+0x100>
    5cd0:	0021883a 	mov	r16,zero
    5cd4:	0023883a 	mov	r17,zero
    5cd8:	880d883a 	mov	r6,r17
    5cdc:	e009883a 	mov	r4,fp
    5ce0:	00810004 	movi	r2,1024
    5ce4:	80006e26 	beq	r16,zero,5ea0 <__sfvwrite_r+0x230>
    5ce8:	800f883a 	mov	r7,r16
    5cec:	91400717 	ldw	r5,28(r18)
    5cf0:	1400012e 	bgeu	r2,r16,5cf8 <__sfvwrite_r+0x88>
    5cf4:	100f883a 	mov	r7,r2
    5cf8:	90c00917 	ldw	r3,36(r18)
    5cfc:	183ee83a 	callr	r3
    5d00:	1007883a 	mov	r3,r2
    5d04:	80a1c83a 	sub	r16,r16,r2
    5d08:	88a3883a 	add	r17,r17,r2
    5d0c:	00806d0e 	bge	zero,r2,5ec4 <__sfvwrite_r+0x254>
    5d10:	b0800217 	ldw	r2,8(r22)
    5d14:	10c5c83a 	sub	r2,r2,r3
    5d18:	b0800215 	stw	r2,8(r22)
    5d1c:	103fee1e 	bne	r2,zero,5cd8 <__sfvwrite_r+0x68>
    5d20:	0009883a 	mov	r4,zero
    5d24:	2005883a 	mov	r2,r4
    5d28:	dfc00a17 	ldw	ra,40(sp)
    5d2c:	df000917 	ldw	fp,36(sp)
    5d30:	ddc00817 	ldw	r23,32(sp)
    5d34:	dd800717 	ldw	r22,28(sp)
    5d38:	dd400617 	ldw	r21,24(sp)
    5d3c:	dd000517 	ldw	r20,20(sp)
    5d40:	dcc00417 	ldw	r19,16(sp)
    5d44:	dc800317 	ldw	r18,12(sp)
    5d48:	dc400217 	ldw	r17,8(sp)
    5d4c:	dc000117 	ldw	r16,4(sp)
    5d50:	dec00b04 	addi	sp,sp,44
    5d54:	f800283a 	ret
    5d58:	0003a380 	call	3a38 <__swsetup_r>
    5d5c:	1000e41e 	bne	r2,zero,60f0 <__sfvwrite_r+0x480>
    5d60:	91c0030b 	ldhu	r7,12(r18)
    5d64:	b5400017 	ldw	r21,0(r22)
    5d68:	3880008c 	andi	r2,r7,2
    5d6c:	103fd81e 	bne	r2,zero,5cd0 <__sfvwrite_r+0x60>
    5d70:	3880004c 	andi	r2,r7,1
    5d74:	1005003a 	cmpeq	r2,r2,zero
    5d78:	10005726 	beq	r2,zero,5ed8 <__sfvwrite_r+0x268>
    5d7c:	0029883a 	mov	r20,zero
    5d80:	002f883a 	mov	r23,zero
    5d84:	a0004226 	beq	r20,zero,5e90 <__sfvwrite_r+0x220>
    5d88:	3880800c 	andi	r2,r7,512
    5d8c:	94000217 	ldw	r16,8(r18)
    5d90:	10008b26 	beq	r2,zero,5fc0 <__sfvwrite_r+0x350>
    5d94:	800d883a 	mov	r6,r16
    5d98:	a400a536 	bltu	r20,r16,6030 <__sfvwrite_r+0x3c0>
    5d9c:	3881200c 	andi	r2,r7,1152
    5da0:	10002726 	beq	r2,zero,5e40 <__sfvwrite_r+0x1d0>
    5da4:	90800517 	ldw	r2,20(r18)
    5da8:	92000417 	ldw	r8,16(r18)
    5dac:	91400017 	ldw	r5,0(r18)
    5db0:	1087883a 	add	r3,r2,r2
    5db4:	1887883a 	add	r3,r3,r2
    5db8:	1808d7fa 	srli	r4,r3,31
    5dbc:	2a21c83a 	sub	r16,r5,r8
    5dc0:	80800044 	addi	r2,r16,1
    5dc4:	20c9883a 	add	r4,r4,r3
    5dc8:	2027d07a 	srai	r19,r4,1
    5dcc:	a085883a 	add	r2,r20,r2
    5dd0:	980d883a 	mov	r6,r19
    5dd4:	9880022e 	bgeu	r19,r2,5de0 <__sfvwrite_r+0x170>
    5dd8:	1027883a 	mov	r19,r2
    5ddc:	100d883a 	mov	r6,r2
    5de0:	3881000c 	andi	r2,r7,1024
    5de4:	1000b826 	beq	r2,zero,60c8 <__sfvwrite_r+0x458>
    5de8:	300b883a 	mov	r5,r6
    5dec:	e009883a 	mov	r4,fp
    5df0:	00064e40 	call	64e4 <_malloc_r>
    5df4:	10003126 	beq	r2,zero,5ebc <__sfvwrite_r+0x24c>
    5df8:	91400417 	ldw	r5,16(r18)
    5dfc:	1009883a 	mov	r4,r2
    5e00:	800d883a 	mov	r6,r16
    5e04:	1023883a 	mov	r17,r2
    5e08:	000193c0 	call	193c <memcpy>
    5e0c:	90c0030b 	ldhu	r3,12(r18)
    5e10:	00beffc4 	movi	r2,-1025
    5e14:	1886703a 	and	r3,r3,r2
    5e18:	18c02014 	ori	r3,r3,128
    5e1c:	90c0030d 	sth	r3,12(r18)
    5e20:	9c07c83a 	sub	r3,r19,r16
    5e24:	8c05883a 	add	r2,r17,r16
    5e28:	a00d883a 	mov	r6,r20
    5e2c:	a021883a 	mov	r16,r20
    5e30:	90800015 	stw	r2,0(r18)
    5e34:	90c00215 	stw	r3,8(r18)
    5e38:	94400415 	stw	r17,16(r18)
    5e3c:	94c00515 	stw	r19,20(r18)
    5e40:	91000017 	ldw	r4,0(r18)
    5e44:	b80b883a 	mov	r5,r23
    5e48:	a023883a 	mov	r17,r20
    5e4c:	0006d080 	call	6d08 <memmove>
    5e50:	90c00217 	ldw	r3,8(r18)
    5e54:	90800017 	ldw	r2,0(r18)
    5e58:	a027883a 	mov	r19,r20
    5e5c:	1c07c83a 	sub	r3,r3,r16
    5e60:	1405883a 	add	r2,r2,r16
    5e64:	90c00215 	stw	r3,8(r18)
    5e68:	a021883a 	mov	r16,r20
    5e6c:	90800015 	stw	r2,0(r18)
    5e70:	b0800217 	ldw	r2,8(r22)
    5e74:	1405c83a 	sub	r2,r2,r16
    5e78:	b0800215 	stw	r2,8(r22)
    5e7c:	103fa826 	beq	r2,zero,5d20 <__sfvwrite_r+0xb0>
    5e80:	a469c83a 	sub	r20,r20,r17
    5e84:	91c0030b 	ldhu	r7,12(r18)
    5e88:	bcef883a 	add	r23,r23,r19
    5e8c:	a03fbe1e 	bne	r20,zero,5d88 <__sfvwrite_r+0x118>
    5e90:	adc00017 	ldw	r23,0(r21)
    5e94:	ad000117 	ldw	r20,4(r21)
    5e98:	ad400204 	addi	r21,r21,8
    5e9c:	003fb906 	br	5d84 <__sfvwrite_r+0x114>
    5ea0:	ac400017 	ldw	r17,0(r21)
    5ea4:	ac000117 	ldw	r16,4(r21)
    5ea8:	ad400204 	addi	r21,r21,8
    5eac:	003f8a06 	br	5cd8 <__sfvwrite_r+0x68>
    5eb0:	91400417 	ldw	r5,16(r18)
    5eb4:	e009883a 	mov	r4,fp
    5eb8:	000595c0 	call	595c <_free_r>
    5ebc:	00800304 	movi	r2,12
    5ec0:	e0800015 	stw	r2,0(fp)
    5ec4:	9080030b 	ldhu	r2,12(r18)
    5ec8:	013fffc4 	movi	r4,-1
    5ecc:	10801014 	ori	r2,r2,64
    5ed0:	9080030d 	sth	r2,12(r18)
    5ed4:	003f9306 	br	5d24 <__sfvwrite_r+0xb4>
    5ed8:	0027883a 	mov	r19,zero
    5edc:	002f883a 	mov	r23,zero
    5ee0:	d8000015 	stw	zero,0(sp)
    5ee4:	0029883a 	mov	r20,zero
    5ee8:	98001e26 	beq	r19,zero,5f64 <__sfvwrite_r+0x2f4>
    5eec:	d8c00017 	ldw	r3,0(sp)
    5ef0:	1804c03a 	cmpne	r2,r3,zero
    5ef4:	10005e26 	beq	r2,zero,6070 <__sfvwrite_r+0x400>
    5ef8:	9821883a 	mov	r16,r19
    5efc:	a4c0012e 	bgeu	r20,r19,5f04 <__sfvwrite_r+0x294>
    5f00:	a021883a 	mov	r16,r20
    5f04:	91000017 	ldw	r4,0(r18)
    5f08:	90800417 	ldw	r2,16(r18)
    5f0c:	91800217 	ldw	r6,8(r18)
    5f10:	91c00517 	ldw	r7,20(r18)
    5f14:	1100022e 	bgeu	r2,r4,5f20 <__sfvwrite_r+0x2b0>
    5f18:	31e3883a 	add	r17,r6,r7
    5f1c:	8c001616 	blt	r17,r16,5f78 <__sfvwrite_r+0x308>
    5f20:	81c03816 	blt	r16,r7,6004 <__sfvwrite_r+0x394>
    5f24:	90c00917 	ldw	r3,36(r18)
    5f28:	91400717 	ldw	r5,28(r18)
    5f2c:	e009883a 	mov	r4,fp
    5f30:	b80d883a 	mov	r6,r23
    5f34:	183ee83a 	callr	r3
    5f38:	1023883a 	mov	r17,r2
    5f3c:	00bfe10e 	bge	zero,r2,5ec4 <__sfvwrite_r+0x254>
    5f40:	a469c83a 	sub	r20,r20,r17
    5f44:	a0001826 	beq	r20,zero,5fa8 <__sfvwrite_r+0x338>
    5f48:	b0800217 	ldw	r2,8(r22)
    5f4c:	1445c83a 	sub	r2,r2,r17
    5f50:	b0800215 	stw	r2,8(r22)
    5f54:	103f7226 	beq	r2,zero,5d20 <__sfvwrite_r+0xb0>
    5f58:	9c67c83a 	sub	r19,r19,r17
    5f5c:	bc6f883a 	add	r23,r23,r17
    5f60:	983fe21e 	bne	r19,zero,5eec <__sfvwrite_r+0x27c>
    5f64:	adc00017 	ldw	r23,0(r21)
    5f68:	acc00117 	ldw	r19,4(r21)
    5f6c:	ad400204 	addi	r21,r21,8
    5f70:	d8000015 	stw	zero,0(sp)
    5f74:	003fdc06 	br	5ee8 <__sfvwrite_r+0x278>
    5f78:	b80b883a 	mov	r5,r23
    5f7c:	880d883a 	mov	r6,r17
    5f80:	0006d080 	call	6d08 <memmove>
    5f84:	90c00017 	ldw	r3,0(r18)
    5f88:	e009883a 	mov	r4,fp
    5f8c:	900b883a 	mov	r5,r18
    5f90:	1c47883a 	add	r3,r3,r17
    5f94:	90c00015 	stw	r3,0(r18)
    5f98:	00053400 	call	5340 <_fflush_r>
    5f9c:	103fc91e 	bne	r2,zero,5ec4 <__sfvwrite_r+0x254>
    5fa0:	a469c83a 	sub	r20,r20,r17
    5fa4:	a03fe81e 	bne	r20,zero,5f48 <__sfvwrite_r+0x2d8>
    5fa8:	e009883a 	mov	r4,fp
    5fac:	900b883a 	mov	r5,r18
    5fb0:	00053400 	call	5340 <_fflush_r>
    5fb4:	103fc31e 	bne	r2,zero,5ec4 <__sfvwrite_r+0x254>
    5fb8:	d8000015 	stw	zero,0(sp)
    5fbc:	003fe206 	br	5f48 <__sfvwrite_r+0x2d8>
    5fc0:	91000017 	ldw	r4,0(r18)
    5fc4:	90800417 	ldw	r2,16(r18)
    5fc8:	1100022e 	bgeu	r2,r4,5fd4 <__sfvwrite_r+0x364>
    5fcc:	8023883a 	mov	r17,r16
    5fd0:	85003136 	bltu	r16,r20,6098 <__sfvwrite_r+0x428>
    5fd4:	91c00517 	ldw	r7,20(r18)
    5fd8:	a1c01836 	bltu	r20,r7,603c <__sfvwrite_r+0x3cc>
    5fdc:	90c00917 	ldw	r3,36(r18)
    5fe0:	91400717 	ldw	r5,28(r18)
    5fe4:	e009883a 	mov	r4,fp
    5fe8:	b80d883a 	mov	r6,r23
    5fec:	183ee83a 	callr	r3
    5ff0:	1021883a 	mov	r16,r2
    5ff4:	00bfb30e 	bge	zero,r2,5ec4 <__sfvwrite_r+0x254>
    5ff8:	1023883a 	mov	r17,r2
    5ffc:	1027883a 	mov	r19,r2
    6000:	003f9b06 	br	5e70 <__sfvwrite_r+0x200>
    6004:	b80b883a 	mov	r5,r23
    6008:	800d883a 	mov	r6,r16
    600c:	0006d080 	call	6d08 <memmove>
    6010:	90c00217 	ldw	r3,8(r18)
    6014:	90800017 	ldw	r2,0(r18)
    6018:	8023883a 	mov	r17,r16
    601c:	1c07c83a 	sub	r3,r3,r16
    6020:	1405883a 	add	r2,r2,r16
    6024:	90c00215 	stw	r3,8(r18)
    6028:	90800015 	stw	r2,0(r18)
    602c:	003fc406 	br	5f40 <__sfvwrite_r+0x2d0>
    6030:	a00d883a 	mov	r6,r20
    6034:	a021883a 	mov	r16,r20
    6038:	003f8106 	br	5e40 <__sfvwrite_r+0x1d0>
    603c:	b80b883a 	mov	r5,r23
    6040:	a00d883a 	mov	r6,r20
    6044:	0006d080 	call	6d08 <memmove>
    6048:	90c00217 	ldw	r3,8(r18)
    604c:	90800017 	ldw	r2,0(r18)
    6050:	a021883a 	mov	r16,r20
    6054:	1d07c83a 	sub	r3,r3,r20
    6058:	1505883a 	add	r2,r2,r20
    605c:	a023883a 	mov	r17,r20
    6060:	a027883a 	mov	r19,r20
    6064:	90c00215 	stw	r3,8(r18)
    6068:	90800015 	stw	r2,0(r18)
    606c:	003f8006 	br	5e70 <__sfvwrite_r+0x200>
    6070:	b809883a 	mov	r4,r23
    6074:	01400284 	movi	r5,10
    6078:	980d883a 	mov	r6,r19
    607c:	0006c240 	call	6c24 <memchr>
    6080:	10001726 	beq	r2,zero,60e0 <__sfvwrite_r+0x470>
    6084:	15c5c83a 	sub	r2,r2,r23
    6088:	15000044 	addi	r20,r2,1
    608c:	00800044 	movi	r2,1
    6090:	d8800015 	stw	r2,0(sp)
    6094:	003f9806 	br	5ef8 <__sfvwrite_r+0x288>
    6098:	b80b883a 	mov	r5,r23
    609c:	800d883a 	mov	r6,r16
    60a0:	0006d080 	call	6d08 <memmove>
    60a4:	90c00017 	ldw	r3,0(r18)
    60a8:	e009883a 	mov	r4,fp
    60ac:	900b883a 	mov	r5,r18
    60b0:	1c07883a 	add	r3,r3,r16
    60b4:	90c00015 	stw	r3,0(r18)
    60b8:	8027883a 	mov	r19,r16
    60bc:	00053400 	call	5340 <_fflush_r>
    60c0:	103f6b26 	beq	r2,zero,5e70 <__sfvwrite_r+0x200>
    60c4:	003f7f06 	br	5ec4 <__sfvwrite_r+0x254>
    60c8:	400b883a 	mov	r5,r8
    60cc:	e009883a 	mov	r4,fp
    60d0:	0007fc80 	call	7fc8 <_realloc_r>
    60d4:	103f7626 	beq	r2,zero,5eb0 <__sfvwrite_r+0x240>
    60d8:	1023883a 	mov	r17,r2
    60dc:	003f5006 	br	5e20 <__sfvwrite_r+0x1b0>
    60e0:	00c00044 	movi	r3,1
    60e4:	9d000044 	addi	r20,r19,1
    60e8:	d8c00015 	stw	r3,0(sp)
    60ec:	003f8206 	br	5ef8 <__sfvwrite_r+0x288>
    60f0:	9080030b 	ldhu	r2,12(r18)
    60f4:	00c00244 	movi	r3,9
    60f8:	013fffc4 	movi	r4,-1
    60fc:	10801014 	ori	r2,r2,64
    6100:	9080030d 	sth	r2,12(r18)
    6104:	e0c00015 	stw	r3,0(fp)
    6108:	003f0606 	br	5d24 <__sfvwrite_r+0xb4>

0000610c <_fwalk_reent>:
    610c:	defff704 	addi	sp,sp,-36
    6110:	dcc00315 	stw	r19,12(sp)
    6114:	24c0b804 	addi	r19,r4,736
    6118:	dd800615 	stw	r22,24(sp)
    611c:	dd400515 	stw	r21,20(sp)
    6120:	dfc00815 	stw	ra,32(sp)
    6124:	ddc00715 	stw	r23,28(sp)
    6128:	dd000415 	stw	r20,16(sp)
    612c:	dc800215 	stw	r18,8(sp)
    6130:	dc400115 	stw	r17,4(sp)
    6134:	dc000015 	stw	r16,0(sp)
    6138:	202b883a 	mov	r21,r4
    613c:	282d883a 	mov	r22,r5
    6140:	00055c80 	call	55c8 <__sfp_lock_acquire>
    6144:	98002126 	beq	r19,zero,61cc <_fwalk_reent+0xc0>
    6148:	002f883a 	mov	r23,zero
    614c:	9c800117 	ldw	r18,4(r19)
    6150:	9c000217 	ldw	r16,8(r19)
    6154:	90bfffc4 	addi	r2,r18,-1
    6158:	10000d16 	blt	r2,zero,6190 <_fwalk_reent+0x84>
    615c:	0023883a 	mov	r17,zero
    6160:	053fffc4 	movi	r20,-1
    6164:	8080030f 	ldh	r2,12(r16)
    6168:	8c400044 	addi	r17,r17,1
    616c:	10000626 	beq	r2,zero,6188 <_fwalk_reent+0x7c>
    6170:	8080038f 	ldh	r2,14(r16)
    6174:	800b883a 	mov	r5,r16
    6178:	a809883a 	mov	r4,r21
    617c:	15000226 	beq	r2,r20,6188 <_fwalk_reent+0x7c>
    6180:	b03ee83a 	callr	r22
    6184:	b8aeb03a 	or	r23,r23,r2
    6188:	84001704 	addi	r16,r16,92
    618c:	947ff51e 	bne	r18,r17,6164 <_fwalk_reent+0x58>
    6190:	9cc00017 	ldw	r19,0(r19)
    6194:	983fed1e 	bne	r19,zero,614c <_fwalk_reent+0x40>
    6198:	00055cc0 	call	55cc <__sfp_lock_release>
    619c:	b805883a 	mov	r2,r23
    61a0:	dfc00817 	ldw	ra,32(sp)
    61a4:	ddc00717 	ldw	r23,28(sp)
    61a8:	dd800617 	ldw	r22,24(sp)
    61ac:	dd400517 	ldw	r21,20(sp)
    61b0:	dd000417 	ldw	r20,16(sp)
    61b4:	dcc00317 	ldw	r19,12(sp)
    61b8:	dc800217 	ldw	r18,8(sp)
    61bc:	dc400117 	ldw	r17,4(sp)
    61c0:	dc000017 	ldw	r16,0(sp)
    61c4:	dec00904 	addi	sp,sp,36
    61c8:	f800283a 	ret
    61cc:	002f883a 	mov	r23,zero
    61d0:	003ff106 	br	6198 <_fwalk_reent+0x8c>

000061d4 <_fwalk>:
    61d4:	defff804 	addi	sp,sp,-32
    61d8:	dcc00315 	stw	r19,12(sp)
    61dc:	24c0b804 	addi	r19,r4,736
    61e0:	dd400515 	stw	r21,20(sp)
    61e4:	dfc00715 	stw	ra,28(sp)
    61e8:	dd800615 	stw	r22,24(sp)
    61ec:	dd000415 	stw	r20,16(sp)
    61f0:	dc800215 	stw	r18,8(sp)
    61f4:	dc400115 	stw	r17,4(sp)
    61f8:	dc000015 	stw	r16,0(sp)
    61fc:	282b883a 	mov	r21,r5
    6200:	00055c80 	call	55c8 <__sfp_lock_acquire>
    6204:	98001f26 	beq	r19,zero,6284 <_fwalk+0xb0>
    6208:	002d883a 	mov	r22,zero
    620c:	9c800117 	ldw	r18,4(r19)
    6210:	9c000217 	ldw	r16,8(r19)
    6214:	90bfffc4 	addi	r2,r18,-1
    6218:	10000c16 	blt	r2,zero,624c <_fwalk+0x78>
    621c:	0023883a 	mov	r17,zero
    6220:	053fffc4 	movi	r20,-1
    6224:	8080030f 	ldh	r2,12(r16)
    6228:	8c400044 	addi	r17,r17,1
    622c:	10000526 	beq	r2,zero,6244 <_fwalk+0x70>
    6230:	8080038f 	ldh	r2,14(r16)
    6234:	8009883a 	mov	r4,r16
    6238:	15000226 	beq	r2,r20,6244 <_fwalk+0x70>
    623c:	a83ee83a 	callr	r21
    6240:	b0acb03a 	or	r22,r22,r2
    6244:	84001704 	addi	r16,r16,92
    6248:	947ff61e 	bne	r18,r17,6224 <_fwalk+0x50>
    624c:	9cc00017 	ldw	r19,0(r19)
    6250:	983fee1e 	bne	r19,zero,620c <_fwalk+0x38>
    6254:	00055cc0 	call	55cc <__sfp_lock_release>
    6258:	b005883a 	mov	r2,r22
    625c:	dfc00717 	ldw	ra,28(sp)
    6260:	dd800617 	ldw	r22,24(sp)
    6264:	dd400517 	ldw	r21,20(sp)
    6268:	dd000417 	ldw	r20,16(sp)
    626c:	dcc00317 	ldw	r19,12(sp)
    6270:	dc800217 	ldw	r18,8(sp)
    6274:	dc400117 	ldw	r17,4(sp)
    6278:	dc000017 	ldw	r16,0(sp)
    627c:	dec00804 	addi	sp,sp,32
    6280:	f800283a 	ret
    6284:	002d883a 	mov	r22,zero
    6288:	003ff206 	br	6254 <_fwalk+0x80>

0000628c <__locale_charset>:
    628c:	d0a00317 	ldw	r2,-32756(gp)
    6290:	f800283a 	ret

00006294 <_localeconv_r>:
    6294:	00800074 	movhi	r2,1
    6298:	10883d04 	addi	r2,r2,8436
    629c:	f800283a 	ret

000062a0 <localeconv>:
    62a0:	00800074 	movhi	r2,1
    62a4:	10907804 	addi	r2,r2,16864
    62a8:	11000017 	ldw	r4,0(r2)
    62ac:	00062941 	jmpi	6294 <_localeconv_r>

000062b0 <_setlocale_r>:
    62b0:	defffc04 	addi	sp,sp,-16
    62b4:	00c00074 	movhi	r3,1
    62b8:	18c83804 	addi	r3,r3,8416
    62bc:	dc800215 	stw	r18,8(sp)
    62c0:	dc400115 	stw	r17,4(sp)
    62c4:	dc000015 	stw	r16,0(sp)
    62c8:	2023883a 	mov	r17,r4
    62cc:	2825883a 	mov	r18,r5
    62d0:	dfc00315 	stw	ra,12(sp)
    62d4:	3021883a 	mov	r16,r6
    62d8:	3009883a 	mov	r4,r6
    62dc:	180b883a 	mov	r5,r3
    62e0:	30000926 	beq	r6,zero,6308 <_setlocale_r+0x58>
    62e4:	00087e80 	call	87e8 <strcmp>
    62e8:	8009883a 	mov	r4,r16
    62ec:	01400074 	movhi	r5,1
    62f0:	29482304 	addi	r5,r5,8332
    62f4:	10000b1e 	bne	r2,zero,6324 <_setlocale_r+0x74>
    62f8:	8c000d15 	stw	r16,52(r17)
    62fc:	8c800c15 	stw	r18,48(r17)
    6300:	00c00074 	movhi	r3,1
    6304:	18c83804 	addi	r3,r3,8416
    6308:	1805883a 	mov	r2,r3
    630c:	dfc00317 	ldw	ra,12(sp)
    6310:	dc800217 	ldw	r18,8(sp)
    6314:	dc400117 	ldw	r17,4(sp)
    6318:	dc000017 	ldw	r16,0(sp)
    631c:	dec00404 	addi	sp,sp,16
    6320:	f800283a 	ret
    6324:	00087e80 	call	87e8 <strcmp>
    6328:	0007883a 	mov	r3,zero
    632c:	103ff226 	beq	r2,zero,62f8 <_setlocale_r+0x48>
    6330:	003ff506 	br	6308 <_setlocale_r+0x58>

00006334 <setlocale>:
    6334:	01800074 	movhi	r6,1
    6338:	31907804 	addi	r6,r6,16864
    633c:	2007883a 	mov	r3,r4
    6340:	31000017 	ldw	r4,0(r6)
    6344:	280d883a 	mov	r6,r5
    6348:	180b883a 	mov	r5,r3
    634c:	00062b01 	jmpi	62b0 <_setlocale_r>

00006350 <__smakebuf_r>:
    6350:	2880030b 	ldhu	r2,12(r5)
    6354:	deffed04 	addi	sp,sp,-76
    6358:	dc401015 	stw	r17,64(sp)
    635c:	1080008c 	andi	r2,r2,2
    6360:	dc000f15 	stw	r16,60(sp)
    6364:	dfc01215 	stw	ra,72(sp)
    6368:	dc801115 	stw	r18,68(sp)
    636c:	2821883a 	mov	r16,r5
    6370:	2023883a 	mov	r17,r4
    6374:	10000b26 	beq	r2,zero,63a4 <__smakebuf_r+0x54>
    6378:	28c010c4 	addi	r3,r5,67
    637c:	00800044 	movi	r2,1
    6380:	28800515 	stw	r2,20(r5)
    6384:	28c00415 	stw	r3,16(r5)
    6388:	28c00015 	stw	r3,0(r5)
    638c:	dfc01217 	ldw	ra,72(sp)
    6390:	dc801117 	ldw	r18,68(sp)
    6394:	dc401017 	ldw	r17,64(sp)
    6398:	dc000f17 	ldw	r16,60(sp)
    639c:	dec01304 	addi	sp,sp,76
    63a0:	f800283a 	ret
    63a4:	2940038f 	ldh	r5,14(r5)
    63a8:	28002116 	blt	r5,zero,6430 <__smakebuf_r+0xe0>
    63ac:	d80d883a 	mov	r6,sp
    63b0:	0008d240 	call	8d24 <_fstat_r>
    63b4:	10001e16 	blt	r2,zero,6430 <__smakebuf_r+0xe0>
    63b8:	d8800117 	ldw	r2,4(sp)
    63bc:	00e00014 	movui	r3,32768
    63c0:	113c000c 	andi	r4,r2,61440
    63c4:	20c03126 	beq	r4,r3,648c <__smakebuf_r+0x13c>
    63c8:	8080030b 	ldhu	r2,12(r16)
    63cc:	00c80004 	movi	r3,8192
    63d0:	10820014 	ori	r2,r2,2048
    63d4:	8080030d 	sth	r2,12(r16)
    63d8:	20c01e26 	beq	r4,r3,6454 <__smakebuf_r+0x104>
    63dc:	04810004 	movi	r18,1024
    63e0:	8809883a 	mov	r4,r17
    63e4:	900b883a 	mov	r5,r18
    63e8:	00064e40 	call	64e4 <_malloc_r>
    63ec:	1009883a 	mov	r4,r2
    63f0:	10003126 	beq	r2,zero,64b8 <__smakebuf_r+0x168>
    63f4:	80c0030b 	ldhu	r3,12(r16)
    63f8:	00800034 	movhi	r2,0
    63fc:	1095af04 	addi	r2,r2,22204
    6400:	88800f15 	stw	r2,60(r17)
    6404:	18c02014 	ori	r3,r3,128
    6408:	84800515 	stw	r18,20(r16)
    640c:	80c0030d 	sth	r3,12(r16)
    6410:	81000415 	stw	r4,16(r16)
    6414:	81000015 	stw	r4,0(r16)
    6418:	dfc01217 	ldw	ra,72(sp)
    641c:	dc801117 	ldw	r18,68(sp)
    6420:	dc401017 	ldw	r17,64(sp)
    6424:	dc000f17 	ldw	r16,60(sp)
    6428:	dec01304 	addi	sp,sp,76
    642c:	f800283a 	ret
    6430:	80c0030b 	ldhu	r3,12(r16)
    6434:	1880200c 	andi	r2,r3,128
    6438:	10000426 	beq	r2,zero,644c <__smakebuf_r+0xfc>
    643c:	04801004 	movi	r18,64
    6440:	18820014 	ori	r2,r3,2048
    6444:	8080030d 	sth	r2,12(r16)
    6448:	003fe506 	br	63e0 <__smakebuf_r+0x90>
    644c:	04810004 	movi	r18,1024
    6450:	003ffb06 	br	6440 <__smakebuf_r+0xf0>
    6454:	8140038f 	ldh	r5,14(r16)
    6458:	8809883a 	mov	r4,r17
    645c:	0008d980 	call	8d98 <_isatty_r>
    6460:	103fde26 	beq	r2,zero,63dc <__smakebuf_r+0x8c>
    6464:	8080030b 	ldhu	r2,12(r16)
    6468:	80c010c4 	addi	r3,r16,67
    646c:	04810004 	movi	r18,1024
    6470:	10800054 	ori	r2,r2,1
    6474:	8080030d 	sth	r2,12(r16)
    6478:	00800044 	movi	r2,1
    647c:	80c00415 	stw	r3,16(r16)
    6480:	80800515 	stw	r2,20(r16)
    6484:	80c00015 	stw	r3,0(r16)
    6488:	003fd506 	br	63e0 <__smakebuf_r+0x90>
    648c:	80c00a17 	ldw	r3,40(r16)
    6490:	00800074 	movhi	r2,1
    6494:	10a1a904 	addi	r2,r2,-31068
    6498:	18bfcb1e 	bne	r3,r2,63c8 <__smakebuf_r+0x78>
    649c:	8080030b 	ldhu	r2,12(r16)
    64a0:	00c10004 	movi	r3,1024
    64a4:	1825883a 	mov	r18,r3
    64a8:	10c4b03a 	or	r2,r2,r3
    64ac:	8080030d 	sth	r2,12(r16)
    64b0:	80c01315 	stw	r3,76(r16)
    64b4:	003fca06 	br	63e0 <__smakebuf_r+0x90>
    64b8:	8100030b 	ldhu	r4,12(r16)
    64bc:	2080800c 	andi	r2,r4,512
    64c0:	103fb21e 	bne	r2,zero,638c <__smakebuf_r+0x3c>
    64c4:	80c010c4 	addi	r3,r16,67
    64c8:	21000094 	ori	r4,r4,2
    64cc:	00800044 	movi	r2,1
    64d0:	80800515 	stw	r2,20(r16)
    64d4:	8100030d 	sth	r4,12(r16)
    64d8:	80c00415 	stw	r3,16(r16)
    64dc:	80c00015 	stw	r3,0(r16)
    64e0:	003faa06 	br	638c <__smakebuf_r+0x3c>

000064e4 <_malloc_r>:
    64e4:	defff604 	addi	sp,sp,-40
    64e8:	28c002c4 	addi	r3,r5,11
    64ec:	00800584 	movi	r2,22
    64f0:	dc800215 	stw	r18,8(sp)
    64f4:	dfc00915 	stw	ra,36(sp)
    64f8:	df000815 	stw	fp,32(sp)
    64fc:	ddc00715 	stw	r23,28(sp)
    6500:	dd800615 	stw	r22,24(sp)
    6504:	dd400515 	stw	r21,20(sp)
    6508:	dd000415 	stw	r20,16(sp)
    650c:	dcc00315 	stw	r19,12(sp)
    6510:	dc400115 	stw	r17,4(sp)
    6514:	dc000015 	stw	r16,0(sp)
    6518:	2025883a 	mov	r18,r4
    651c:	10c01236 	bltu	r2,r3,6568 <_malloc_r+0x84>
    6520:	04400404 	movi	r17,16
    6524:	8940142e 	bgeu	r17,r5,6578 <_malloc_r+0x94>
    6528:	00800304 	movi	r2,12
    652c:	0007883a 	mov	r3,zero
    6530:	90800015 	stw	r2,0(r18)
    6534:	1805883a 	mov	r2,r3
    6538:	dfc00917 	ldw	ra,36(sp)
    653c:	df000817 	ldw	fp,32(sp)
    6540:	ddc00717 	ldw	r23,28(sp)
    6544:	dd800617 	ldw	r22,24(sp)
    6548:	dd400517 	ldw	r21,20(sp)
    654c:	dd000417 	ldw	r20,16(sp)
    6550:	dcc00317 	ldw	r19,12(sp)
    6554:	dc800217 	ldw	r18,8(sp)
    6558:	dc400117 	ldw	r17,4(sp)
    655c:	dc000017 	ldw	r16,0(sp)
    6560:	dec00a04 	addi	sp,sp,40
    6564:	f800283a 	ret
    6568:	00bffe04 	movi	r2,-8
    656c:	18a2703a 	and	r17,r3,r2
    6570:	883fed16 	blt	r17,zero,6528 <_malloc_r+0x44>
    6574:	897fec36 	bltu	r17,r5,6528 <_malloc_r+0x44>
    6578:	9009883a 	mov	r4,r18
    657c:	000baec0 	call	baec <__malloc_lock>
    6580:	00807dc4 	movi	r2,503
    6584:	14402b2e 	bgeu	r2,r17,6634 <_malloc_r+0x150>
    6588:	8806d27a 	srli	r3,r17,9
    658c:	18003f1e 	bne	r3,zero,668c <_malloc_r+0x1a8>
    6590:	880cd0fa 	srli	r6,r17,3
    6594:	300490fa 	slli	r2,r6,3
    6598:	02c00074 	movhi	r11,1
    659c:	5aca0704 	addi	r11,r11,10268
    65a0:	12cb883a 	add	r5,r2,r11
    65a4:	2c000317 	ldw	r16,12(r5)
    65a8:	580f883a 	mov	r7,r11
    65ac:	2c00041e 	bne	r5,r16,65c0 <_malloc_r+0xdc>
    65b0:	00000a06 	br	65dc <_malloc_r+0xf8>
    65b4:	1800860e 	bge	r3,zero,67d0 <_malloc_r+0x2ec>
    65b8:	84000317 	ldw	r16,12(r16)
    65bc:	2c000726 	beq	r5,r16,65dc <_malloc_r+0xf8>
    65c0:	80800117 	ldw	r2,4(r16)
    65c4:	00ffff04 	movi	r3,-4
    65c8:	10c8703a 	and	r4,r2,r3
    65cc:	2447c83a 	sub	r3,r4,r17
    65d0:	008003c4 	movi	r2,15
    65d4:	10fff70e 	bge	r2,r3,65b4 <_malloc_r+0xd0>
    65d8:	31bfffc4 	addi	r6,r6,-1
    65dc:	32400044 	addi	r9,r6,1
    65e0:	02800074 	movhi	r10,1
    65e4:	528a0904 	addi	r10,r10,10276
    65e8:	54000217 	ldw	r16,8(r10)
    65ec:	8280a026 	beq	r16,r10,6870 <_malloc_r+0x38c>
    65f0:	80800117 	ldw	r2,4(r16)
    65f4:	00ffff04 	movi	r3,-4
    65f8:	10ca703a 	and	r5,r2,r3
    65fc:	2c4dc83a 	sub	r6,r5,r17
    6600:	008003c4 	movi	r2,15
    6604:	11808316 	blt	r2,r6,6814 <_malloc_r+0x330>
    6608:	52800315 	stw	r10,12(r10)
    660c:	52800215 	stw	r10,8(r10)
    6610:	30002916 	blt	r6,zero,66b8 <_malloc_r+0x1d4>
    6614:	8147883a 	add	r3,r16,r5
    6618:	18800117 	ldw	r2,4(r3)
    661c:	9009883a 	mov	r4,r18
    6620:	10800054 	ori	r2,r2,1
    6624:	18800115 	stw	r2,4(r3)
    6628:	000bb0c0 	call	bb0c <__malloc_unlock>
    662c:	80c00204 	addi	r3,r16,8
    6630:	003fc006 	br	6534 <_malloc_r+0x50>
    6634:	02c00074 	movhi	r11,1
    6638:	5aca0704 	addi	r11,r11,10268
    663c:	8ac5883a 	add	r2,r17,r11
    6640:	14000317 	ldw	r16,12(r2)
    6644:	580f883a 	mov	r7,r11
    6648:	8806d0fa 	srli	r3,r17,3
    664c:	14006c26 	beq	r2,r16,6800 <_malloc_r+0x31c>
    6650:	80c00117 	ldw	r3,4(r16)
    6654:	00bfff04 	movi	r2,-4
    6658:	81800317 	ldw	r6,12(r16)
    665c:	1886703a 	and	r3,r3,r2
    6660:	80c7883a 	add	r3,r16,r3
    6664:	18800117 	ldw	r2,4(r3)
    6668:	81400217 	ldw	r5,8(r16)
    666c:	9009883a 	mov	r4,r18
    6670:	10800054 	ori	r2,r2,1
    6674:	18800115 	stw	r2,4(r3)
    6678:	31400215 	stw	r5,8(r6)
    667c:	29800315 	stw	r6,12(r5)
    6680:	000bb0c0 	call	bb0c <__malloc_unlock>
    6684:	80c00204 	addi	r3,r16,8
    6688:	003faa06 	br	6534 <_malloc_r+0x50>
    668c:	00800104 	movi	r2,4
    6690:	10c0052e 	bgeu	r2,r3,66a8 <_malloc_r+0x1c4>
    6694:	00800504 	movi	r2,20
    6698:	10c07836 	bltu	r2,r3,687c <_malloc_r+0x398>
    669c:	198016c4 	addi	r6,r3,91
    66a0:	300490fa 	slli	r2,r6,3
    66a4:	003fbc06 	br	6598 <_malloc_r+0xb4>
    66a8:	8804d1ba 	srli	r2,r17,6
    66ac:	11800e04 	addi	r6,r2,56
    66b0:	300490fa 	slli	r2,r6,3
    66b4:	003fb806 	br	6598 <_malloc_r+0xb4>
    66b8:	00807fc4 	movi	r2,511
    66bc:	1140bb36 	bltu	r2,r5,69ac <_malloc_r+0x4c8>
    66c0:	2806d0fa 	srli	r3,r5,3
    66c4:	573ffe04 	addi	fp,r10,-8
    66c8:	00800044 	movi	r2,1
    66cc:	180890fa 	slli	r4,r3,3
    66d0:	1807d0ba 	srai	r3,r3,2
    66d4:	e1c00117 	ldw	r7,4(fp)
    66d8:	5909883a 	add	r4,r11,r4
    66dc:	21400217 	ldw	r5,8(r4)
    66e0:	10c4983a 	sll	r2,r2,r3
    66e4:	81000315 	stw	r4,12(r16)
    66e8:	81400215 	stw	r5,8(r16)
    66ec:	388eb03a 	or	r7,r7,r2
    66f0:	2c000315 	stw	r16,12(r5)
    66f4:	24000215 	stw	r16,8(r4)
    66f8:	e1c00115 	stw	r7,4(fp)
    66fc:	4807883a 	mov	r3,r9
    6700:	4800cd16 	blt	r9,zero,6a38 <_malloc_r+0x554>
    6704:	1807d0ba 	srai	r3,r3,2
    6708:	00800044 	movi	r2,1
    670c:	10c8983a 	sll	r4,r2,r3
    6710:	39004436 	bltu	r7,r4,6824 <_malloc_r+0x340>
    6714:	21c4703a 	and	r2,r4,r7
    6718:	10000a1e 	bne	r2,zero,6744 <_malloc_r+0x260>
    671c:	2109883a 	add	r4,r4,r4
    6720:	00bfff04 	movi	r2,-4
    6724:	4884703a 	and	r2,r9,r2
    6728:	3906703a 	and	r3,r7,r4
    672c:	12400104 	addi	r9,r2,4
    6730:	1800041e 	bne	r3,zero,6744 <_malloc_r+0x260>
    6734:	2109883a 	add	r4,r4,r4
    6738:	3904703a 	and	r2,r7,r4
    673c:	4a400104 	addi	r9,r9,4
    6740:	103ffc26 	beq	r2,zero,6734 <_malloc_r+0x250>
    6744:	480490fa 	slli	r2,r9,3
    6748:	4819883a 	mov	r12,r9
    674c:	023fff04 	movi	r8,-4
    6750:	589b883a 	add	r13,r11,r2
    6754:	6807883a 	mov	r3,r13
    6758:	014003c4 	movi	r5,15
    675c:	1c000317 	ldw	r16,12(r3)
    6760:	1c00041e 	bne	r3,r16,6774 <_malloc_r+0x290>
    6764:	0000a706 	br	6a04 <_malloc_r+0x520>
    6768:	3000ab0e 	bge	r6,zero,6a18 <_malloc_r+0x534>
    676c:	84000317 	ldw	r16,12(r16)
    6770:	1c00a426 	beq	r3,r16,6a04 <_malloc_r+0x520>
    6774:	80800117 	ldw	r2,4(r16)
    6778:	1204703a 	and	r2,r2,r8
    677c:	144dc83a 	sub	r6,r2,r17
    6780:	29bff90e 	bge	r5,r6,6768 <_malloc_r+0x284>
    6784:	81000317 	ldw	r4,12(r16)
    6788:	80c00217 	ldw	r3,8(r16)
    678c:	89400054 	ori	r5,r17,1
    6790:	8445883a 	add	r2,r16,r17
    6794:	20c00215 	stw	r3,8(r4)
    6798:	19000315 	stw	r4,12(r3)
    679c:	81400115 	stw	r5,4(r16)
    67a0:	1187883a 	add	r3,r2,r6
    67a4:	31000054 	ori	r4,r6,1
    67a8:	50800315 	stw	r2,12(r10)
    67ac:	50800215 	stw	r2,8(r10)
    67b0:	19800015 	stw	r6,0(r3)
    67b4:	11000115 	stw	r4,4(r2)
    67b8:	12800215 	stw	r10,8(r2)
    67bc:	12800315 	stw	r10,12(r2)
    67c0:	9009883a 	mov	r4,r18
    67c4:	000bb0c0 	call	bb0c <__malloc_unlock>
    67c8:	80c00204 	addi	r3,r16,8
    67cc:	003f5906 	br	6534 <_malloc_r+0x50>
    67d0:	8109883a 	add	r4,r16,r4
    67d4:	20800117 	ldw	r2,4(r4)
    67d8:	80c00217 	ldw	r3,8(r16)
    67dc:	81400317 	ldw	r5,12(r16)
    67e0:	10800054 	ori	r2,r2,1
    67e4:	20800115 	stw	r2,4(r4)
    67e8:	28c00215 	stw	r3,8(r5)
    67ec:	19400315 	stw	r5,12(r3)
    67f0:	9009883a 	mov	r4,r18
    67f4:	000bb0c0 	call	bb0c <__malloc_unlock>
    67f8:	80c00204 	addi	r3,r16,8
    67fc:	003f4d06 	br	6534 <_malloc_r+0x50>
    6800:	80800204 	addi	r2,r16,8
    6804:	14000317 	ldw	r16,12(r2)
    6808:	143f911e 	bne	r2,r16,6650 <_malloc_r+0x16c>
    680c:	1a400084 	addi	r9,r3,2
    6810:	003f7306 	br	65e0 <_malloc_r+0xfc>
    6814:	88c00054 	ori	r3,r17,1
    6818:	8445883a 	add	r2,r16,r17
    681c:	80c00115 	stw	r3,4(r16)
    6820:	003fdf06 	br	67a0 <_malloc_r+0x2bc>
    6824:	e4000217 	ldw	r16,8(fp)
    6828:	00bfff04 	movi	r2,-4
    682c:	80c00117 	ldw	r3,4(r16)
    6830:	802d883a 	mov	r22,r16
    6834:	18aa703a 	and	r21,r3,r2
    6838:	ac401636 	bltu	r21,r17,6894 <_malloc_r+0x3b0>
    683c:	ac49c83a 	sub	r4,r21,r17
    6840:	008003c4 	movi	r2,15
    6844:	1100130e 	bge	r2,r4,6894 <_malloc_r+0x3b0>
    6848:	88800054 	ori	r2,r17,1
    684c:	8447883a 	add	r3,r16,r17
    6850:	80800115 	stw	r2,4(r16)
    6854:	20800054 	ori	r2,r4,1
    6858:	18800115 	stw	r2,4(r3)
    685c:	e0c00215 	stw	r3,8(fp)
    6860:	9009883a 	mov	r4,r18
    6864:	000bb0c0 	call	bb0c <__malloc_unlock>
    6868:	80c00204 	addi	r3,r16,8
    686c:	003f3106 	br	6534 <_malloc_r+0x50>
    6870:	39c00117 	ldw	r7,4(r7)
    6874:	573ffe04 	addi	fp,r10,-8
    6878:	003fa006 	br	66fc <_malloc_r+0x218>
    687c:	00801504 	movi	r2,84
    6880:	10c06736 	bltu	r2,r3,6a20 <_malloc_r+0x53c>
    6884:	8804d33a 	srli	r2,r17,12
    6888:	11801b84 	addi	r6,r2,110
    688c:	300490fa 	slli	r2,r6,3
    6890:	003f4106 	br	6598 <_malloc_r+0xb4>
    6894:	d0a79c17 	ldw	r2,-24976(gp)
    6898:	d0e00517 	ldw	r3,-32748(gp)
    689c:	053fffc4 	movi	r20,-1
    68a0:	10800404 	addi	r2,r2,16
    68a4:	88a7883a 	add	r19,r17,r2
    68a8:	1d000326 	beq	r3,r20,68b8 <_malloc_r+0x3d4>
    68ac:	98c3ffc4 	addi	r3,r19,4095
    68b0:	00bc0004 	movi	r2,-4096
    68b4:	18a6703a 	and	r19,r3,r2
    68b8:	9009883a 	mov	r4,r18
    68bc:	980b883a 	mov	r5,r19
    68c0:	000862c0 	call	862c <_sbrk_r>
    68c4:	1009883a 	mov	r4,r2
    68c8:	15000426 	beq	r2,r20,68dc <_malloc_r+0x3f8>
    68cc:	854b883a 	add	r5,r16,r21
    68d0:	1029883a 	mov	r20,r2
    68d4:	11405a2e 	bgeu	r2,r5,6a40 <_malloc_r+0x55c>
    68d8:	87000c26 	beq	r16,fp,690c <_malloc_r+0x428>
    68dc:	e4000217 	ldw	r16,8(fp)
    68e0:	80c00117 	ldw	r3,4(r16)
    68e4:	00bfff04 	movi	r2,-4
    68e8:	1884703a 	and	r2,r3,r2
    68ec:	14400336 	bltu	r2,r17,68fc <_malloc_r+0x418>
    68f0:	1449c83a 	sub	r4,r2,r17
    68f4:	008003c4 	movi	r2,15
    68f8:	113fd316 	blt	r2,r4,6848 <_malloc_r+0x364>
    68fc:	9009883a 	mov	r4,r18
    6900:	000bb0c0 	call	bb0c <__malloc_unlock>
    6904:	0007883a 	mov	r3,zero
    6908:	003f0a06 	br	6534 <_malloc_r+0x50>
    690c:	05c00074 	movhi	r23,1
    6910:	bdd81e04 	addi	r23,r23,24696
    6914:	b8800017 	ldw	r2,0(r23)
    6918:	988d883a 	add	r6,r19,r2
    691c:	b9800015 	stw	r6,0(r23)
    6920:	d0e00517 	ldw	r3,-32748(gp)
    6924:	00bfffc4 	movi	r2,-1
    6928:	18808e26 	beq	r3,r2,6b64 <_malloc_r+0x680>
    692c:	2145c83a 	sub	r2,r4,r5
    6930:	3085883a 	add	r2,r6,r2
    6934:	b8800015 	stw	r2,0(r23)
    6938:	20c001cc 	andi	r3,r4,7
    693c:	18005f1e 	bne	r3,zero,6abc <_malloc_r+0x5d8>
    6940:	000b883a 	mov	r5,zero
    6944:	a4c5883a 	add	r2,r20,r19
    6948:	1083ffcc 	andi	r2,r2,4095
    694c:	00c40004 	movi	r3,4096
    6950:	1887c83a 	sub	r3,r3,r2
    6954:	28e7883a 	add	r19,r5,r3
    6958:	9009883a 	mov	r4,r18
    695c:	980b883a 	mov	r5,r19
    6960:	000862c0 	call	862c <_sbrk_r>
    6964:	1007883a 	mov	r3,r2
    6968:	00bfffc4 	movi	r2,-1
    696c:	18807a26 	beq	r3,r2,6b58 <_malloc_r+0x674>
    6970:	1d05c83a 	sub	r2,r3,r20
    6974:	9885883a 	add	r2,r19,r2
    6978:	10c00054 	ori	r3,r2,1
    697c:	b8800017 	ldw	r2,0(r23)
    6980:	a021883a 	mov	r16,r20
    6984:	a0c00115 	stw	r3,4(r20)
    6988:	9885883a 	add	r2,r19,r2
    698c:	b8800015 	stw	r2,0(r23)
    6990:	e5000215 	stw	r20,8(fp)
    6994:	b7003626 	beq	r22,fp,6a70 <_malloc_r+0x58c>
    6998:	018003c4 	movi	r6,15
    699c:	35404b36 	bltu	r6,r21,6acc <_malloc_r+0x5e8>
    69a0:	00800044 	movi	r2,1
    69a4:	a0800115 	stw	r2,4(r20)
    69a8:	003fcd06 	br	68e0 <_malloc_r+0x3fc>
    69ac:	2808d27a 	srli	r4,r5,9
    69b0:	2000371e 	bne	r4,zero,6a90 <_malloc_r+0x5ac>
    69b4:	2808d0fa 	srli	r4,r5,3
    69b8:	200690fa 	slli	r3,r4,3
    69bc:	1ad1883a 	add	r8,r3,r11
    69c0:	41800217 	ldw	r6,8(r8)
    69c4:	41805b26 	beq	r8,r6,6b34 <_malloc_r+0x650>
    69c8:	30800117 	ldw	r2,4(r6)
    69cc:	00ffff04 	movi	r3,-4
    69d0:	10c4703a 	and	r2,r2,r3
    69d4:	2880022e 	bgeu	r5,r2,69e0 <_malloc_r+0x4fc>
    69d8:	31800217 	ldw	r6,8(r6)
    69dc:	41bffa1e 	bne	r8,r6,69c8 <_malloc_r+0x4e4>
    69e0:	32000317 	ldw	r8,12(r6)
    69e4:	39c00117 	ldw	r7,4(r7)
    69e8:	82000315 	stw	r8,12(r16)
    69ec:	81800215 	stw	r6,8(r16)
    69f0:	07000074 	movhi	fp,1
    69f4:	e70a0704 	addi	fp,fp,10268
    69f8:	34000315 	stw	r16,12(r6)
    69fc:	44000215 	stw	r16,8(r8)
    6a00:	003f3e06 	br	66fc <_malloc_r+0x218>
    6a04:	63000044 	addi	r12,r12,1
    6a08:	608000cc 	andi	r2,r12,3
    6a0c:	10005d26 	beq	r2,zero,6b84 <_malloc_r+0x6a0>
    6a10:	18c00204 	addi	r3,r3,8
    6a14:	003f5106 	br	675c <_malloc_r+0x278>
    6a18:	8089883a 	add	r4,r16,r2
    6a1c:	003f6d06 	br	67d4 <_malloc_r+0x2f0>
    6a20:	00805504 	movi	r2,340
    6a24:	10c02036 	bltu	r2,r3,6aa8 <_malloc_r+0x5c4>
    6a28:	8804d3fa 	srli	r2,r17,15
    6a2c:	11801dc4 	addi	r6,r2,119
    6a30:	300490fa 	slli	r2,r6,3
    6a34:	003ed806 	br	6598 <_malloc_r+0xb4>
    6a38:	48c000c4 	addi	r3,r9,3
    6a3c:	003f3106 	br	6704 <_malloc_r+0x220>
    6a40:	05c00074 	movhi	r23,1
    6a44:	bdd81e04 	addi	r23,r23,24696
    6a48:	b8800017 	ldw	r2,0(r23)
    6a4c:	988d883a 	add	r6,r19,r2
    6a50:	b9800015 	stw	r6,0(r23)
    6a54:	293fb21e 	bne	r5,r4,6920 <_malloc_r+0x43c>
    6a58:	2083ffcc 	andi	r2,r4,4095
    6a5c:	103fb01e 	bne	r2,zero,6920 <_malloc_r+0x43c>
    6a60:	e4000217 	ldw	r16,8(fp)
    6a64:	9d45883a 	add	r2,r19,r21
    6a68:	10800054 	ori	r2,r2,1
    6a6c:	80800115 	stw	r2,4(r16)
    6a70:	b8c00017 	ldw	r3,0(r23)
    6a74:	d0a79d17 	ldw	r2,-24972(gp)
    6a78:	10c0012e 	bgeu	r2,r3,6a80 <_malloc_r+0x59c>
    6a7c:	d0e79d15 	stw	r3,-24972(gp)
    6a80:	d0a79e17 	ldw	r2,-24968(gp)
    6a84:	10ff962e 	bgeu	r2,r3,68e0 <_malloc_r+0x3fc>
    6a88:	d0e79e15 	stw	r3,-24968(gp)
    6a8c:	003f9406 	br	68e0 <_malloc_r+0x3fc>
    6a90:	00800104 	movi	r2,4
    6a94:	11001e36 	bltu	r2,r4,6b10 <_malloc_r+0x62c>
    6a98:	2804d1ba 	srli	r2,r5,6
    6a9c:	11000e04 	addi	r4,r2,56
    6aa0:	200690fa 	slli	r3,r4,3
    6aa4:	003fc506 	br	69bc <_malloc_r+0x4d8>
    6aa8:	00815504 	movi	r2,1364
    6aac:	10c01d2e 	bgeu	r2,r3,6b24 <_malloc_r+0x640>
    6ab0:	01801f84 	movi	r6,126
    6ab4:	0080fc04 	movi	r2,1008
    6ab8:	003eb706 	br	6598 <_malloc_r+0xb4>
    6abc:	00800204 	movi	r2,8
    6ac0:	10cbc83a 	sub	r5,r2,r3
    6ac4:	2169883a 	add	r20,r4,r5
    6ac8:	003f9e06 	br	6944 <_malloc_r+0x460>
    6acc:	00bffe04 	movi	r2,-8
    6ad0:	a93ffd04 	addi	r4,r21,-12
    6ad4:	2088703a 	and	r4,r4,r2
    6ad8:	b10b883a 	add	r5,r22,r4
    6adc:	00c00144 	movi	r3,5
    6ae0:	28c00215 	stw	r3,8(r5)
    6ae4:	28c00115 	stw	r3,4(r5)
    6ae8:	b0800117 	ldw	r2,4(r22)
    6aec:	1080004c 	andi	r2,r2,1
    6af0:	2084b03a 	or	r2,r4,r2
    6af4:	b0800115 	stw	r2,4(r22)
    6af8:	313fdd2e 	bgeu	r6,r4,6a70 <_malloc_r+0x58c>
    6afc:	b1400204 	addi	r5,r22,8
    6b00:	9009883a 	mov	r4,r18
    6b04:	000595c0 	call	595c <_free_r>
    6b08:	e4000217 	ldw	r16,8(fp)
    6b0c:	003fd806 	br	6a70 <_malloc_r+0x58c>
    6b10:	00800504 	movi	r2,20
    6b14:	11001536 	bltu	r2,r4,6b6c <_malloc_r+0x688>
    6b18:	210016c4 	addi	r4,r4,91
    6b1c:	200690fa 	slli	r3,r4,3
    6b20:	003fa606 	br	69bc <_malloc_r+0x4d8>
    6b24:	8804d4ba 	srli	r2,r17,18
    6b28:	11801f04 	addi	r6,r2,124
    6b2c:	300490fa 	slli	r2,r6,3
    6b30:	003e9906 	br	6598 <_malloc_r+0xb4>
    6b34:	2009d0ba 	srai	r4,r4,2
    6b38:	01400074 	movhi	r5,1
    6b3c:	294a0704 	addi	r5,r5,10268
    6b40:	00c00044 	movi	r3,1
    6b44:	28800117 	ldw	r2,4(r5)
    6b48:	1906983a 	sll	r3,r3,r4
    6b4c:	10c4b03a 	or	r2,r2,r3
    6b50:	28800115 	stw	r2,4(r5)
    6b54:	003fa306 	br	69e4 <_malloc_r+0x500>
    6b58:	0027883a 	mov	r19,zero
    6b5c:	00c00044 	movi	r3,1
    6b60:	003f8606 	br	697c <_malloc_r+0x498>
    6b64:	d1200515 	stw	r4,-32748(gp)
    6b68:	003f7306 	br	6938 <_malloc_r+0x454>
    6b6c:	00801504 	movi	r2,84
    6b70:	11001936 	bltu	r2,r4,6bd8 <_malloc_r+0x6f4>
    6b74:	2804d33a 	srli	r2,r5,12
    6b78:	11001b84 	addi	r4,r2,110
    6b7c:	200690fa 	slli	r3,r4,3
    6b80:	003f8e06 	br	69bc <_malloc_r+0x4d8>
    6b84:	480b883a 	mov	r5,r9
    6b88:	6807883a 	mov	r3,r13
    6b8c:	288000cc 	andi	r2,r5,3
    6b90:	18fffe04 	addi	r3,r3,-8
    6b94:	297fffc4 	addi	r5,r5,-1
    6b98:	10001526 	beq	r2,zero,6bf0 <_malloc_r+0x70c>
    6b9c:	18800217 	ldw	r2,8(r3)
    6ba0:	10fffa26 	beq	r2,r3,6b8c <_malloc_r+0x6a8>
    6ba4:	2109883a 	add	r4,r4,r4
    6ba8:	393f1e36 	bltu	r7,r4,6824 <_malloc_r+0x340>
    6bac:	203f1d26 	beq	r4,zero,6824 <_malloc_r+0x340>
    6bb0:	21c4703a 	and	r2,r4,r7
    6bb4:	10000226 	beq	r2,zero,6bc0 <_malloc_r+0x6dc>
    6bb8:	6013883a 	mov	r9,r12
    6bbc:	003ee106 	br	6744 <_malloc_r+0x260>
    6bc0:	2109883a 	add	r4,r4,r4
    6bc4:	3904703a 	and	r2,r7,r4
    6bc8:	63000104 	addi	r12,r12,4
    6bcc:	103ffc26 	beq	r2,zero,6bc0 <_malloc_r+0x6dc>
    6bd0:	6013883a 	mov	r9,r12
    6bd4:	003edb06 	br	6744 <_malloc_r+0x260>
    6bd8:	00805504 	movi	r2,340
    6bdc:	11000836 	bltu	r2,r4,6c00 <_malloc_r+0x71c>
    6be0:	2804d3fa 	srli	r2,r5,15
    6be4:	11001dc4 	addi	r4,r2,119
    6be8:	200690fa 	slli	r3,r4,3
    6bec:	003f7306 	br	69bc <_malloc_r+0x4d8>
    6bf0:	0104303a 	nor	r2,zero,r4
    6bf4:	388e703a 	and	r7,r7,r2
    6bf8:	e1c00115 	stw	r7,4(fp)
    6bfc:	003fe906 	br	6ba4 <_malloc_r+0x6c0>
    6c00:	00815504 	movi	r2,1364
    6c04:	1100032e 	bgeu	r2,r4,6c14 <_malloc_r+0x730>
    6c08:	01001f84 	movi	r4,126
    6c0c:	00c0fc04 	movi	r3,1008
    6c10:	003f6a06 	br	69bc <_malloc_r+0x4d8>
    6c14:	2804d4ba 	srli	r2,r5,18
    6c18:	11001f04 	addi	r4,r2,124
    6c1c:	200690fa 	slli	r3,r4,3
    6c20:	003f6606 	br	69bc <_malloc_r+0x4d8>

00006c24 <memchr>:
    6c24:	008000c4 	movi	r2,3
    6c28:	29403fcc 	andi	r5,r5,255
    6c2c:	2007883a 	mov	r3,r4
    6c30:	1180022e 	bgeu	r2,r6,6c3c <memchr+0x18>
    6c34:	2084703a 	and	r2,r4,r2
    6c38:	10000b26 	beq	r2,zero,6c68 <memchr+0x44>
    6c3c:	313fffc4 	addi	r4,r6,-1
    6c40:	3000051e 	bne	r6,zero,6c58 <memchr+0x34>
    6c44:	00002c06 	br	6cf8 <memchr+0xd4>
    6c48:	213fffc4 	addi	r4,r4,-1
    6c4c:	00bfffc4 	movi	r2,-1
    6c50:	18c00044 	addi	r3,r3,1
    6c54:	20802826 	beq	r4,r2,6cf8 <memchr+0xd4>
    6c58:	18800003 	ldbu	r2,0(r3)
    6c5c:	28bffa1e 	bne	r5,r2,6c48 <memchr+0x24>
    6c60:	1805883a 	mov	r2,r3
    6c64:	f800283a 	ret
    6c68:	0011883a 	mov	r8,zero
    6c6c:	0007883a 	mov	r3,zero
    6c70:	01c00104 	movi	r7,4
    6c74:	4004923a 	slli	r2,r8,8
    6c78:	18c00044 	addi	r3,r3,1
    6c7c:	1151883a 	add	r8,r2,r5
    6c80:	19fffc1e 	bne	r3,r7,6c74 <memchr+0x50>
    6c84:	02bfbff4 	movhi	r10,65279
    6c88:	52bfbfc4 	addi	r10,r10,-257
    6c8c:	02602074 	movhi	r9,32897
    6c90:	4a602004 	addi	r9,r9,-32640
    6c94:	02c000c4 	movi	r11,3
    6c98:	20800017 	ldw	r2,0(r4)
    6c9c:	31bfff04 	addi	r6,r6,-4
    6ca0:	200f883a 	mov	r7,r4
    6ca4:	1204f03a 	xor	r2,r2,r8
    6ca8:	1287883a 	add	r3,r2,r10
    6cac:	1a46703a 	and	r3,r3,r9
    6cb0:	0084303a 	nor	r2,zero,r2
    6cb4:	10c4703a 	and	r2,r2,r3
    6cb8:	10000b26 	beq	r2,zero,6ce8 <memchr+0xc4>
    6cbc:	20800003 	ldbu	r2,0(r4)
    6cc0:	28800f26 	beq	r5,r2,6d00 <memchr+0xdc>
    6cc4:	20800043 	ldbu	r2,1(r4)
    6cc8:	21c00044 	addi	r7,r4,1
    6ccc:	28800c26 	beq	r5,r2,6d00 <memchr+0xdc>
    6cd0:	20800083 	ldbu	r2,2(r4)
    6cd4:	21c00084 	addi	r7,r4,2
    6cd8:	28800926 	beq	r5,r2,6d00 <memchr+0xdc>
    6cdc:	208000c3 	ldbu	r2,3(r4)
    6ce0:	21c000c4 	addi	r7,r4,3
    6ce4:	28800626 	beq	r5,r2,6d00 <memchr+0xdc>
    6ce8:	21000104 	addi	r4,r4,4
    6cec:	59bfea36 	bltu	r11,r6,6c98 <memchr+0x74>
    6cf0:	2007883a 	mov	r3,r4
    6cf4:	003fd106 	br	6c3c <memchr+0x18>
    6cf8:	0005883a 	mov	r2,zero
    6cfc:	f800283a 	ret
    6d00:	3805883a 	mov	r2,r7
    6d04:	f800283a 	ret

00006d08 <memmove>:
    6d08:	2807883a 	mov	r3,r5
    6d0c:	2011883a 	mov	r8,r4
    6d10:	29000c2e 	bgeu	r5,r4,6d44 <memmove+0x3c>
    6d14:	298f883a 	add	r7,r5,r6
    6d18:	21c00a2e 	bgeu	r4,r7,6d44 <memmove+0x3c>
    6d1c:	30000726 	beq	r6,zero,6d3c <memmove+0x34>
    6d20:	2187883a 	add	r3,r4,r6
    6d24:	198dc83a 	sub	r6,r3,r6
    6d28:	39ffffc4 	addi	r7,r7,-1
    6d2c:	38800003 	ldbu	r2,0(r7)
    6d30:	18ffffc4 	addi	r3,r3,-1
    6d34:	18800005 	stb	r2,0(r3)
    6d38:	19bffb1e 	bne	r3,r6,6d28 <memmove+0x20>
    6d3c:	2005883a 	mov	r2,r4
    6d40:	f800283a 	ret
    6d44:	01c003c4 	movi	r7,15
    6d48:	39800a36 	bltu	r7,r6,6d74 <memmove+0x6c>
    6d4c:	303ffb26 	beq	r6,zero,6d3c <memmove+0x34>
    6d50:	400f883a 	mov	r7,r8
    6d54:	320d883a 	add	r6,r6,r8
    6d58:	28800003 	ldbu	r2,0(r5)
    6d5c:	29400044 	addi	r5,r5,1
    6d60:	38800005 	stb	r2,0(r7)
    6d64:	39c00044 	addi	r7,r7,1
    6d68:	39bffb1e 	bne	r7,r6,6d58 <memmove+0x50>
    6d6c:	2005883a 	mov	r2,r4
    6d70:	f800283a 	ret
    6d74:	1904b03a 	or	r2,r3,r4
    6d78:	108000cc 	andi	r2,r2,3
    6d7c:	103ff31e 	bne	r2,zero,6d4c <memmove+0x44>
    6d80:	3811883a 	mov	r8,r7
    6d84:	180b883a 	mov	r5,r3
    6d88:	200f883a 	mov	r7,r4
    6d8c:	28c00017 	ldw	r3,0(r5)
    6d90:	31bffc04 	addi	r6,r6,-16
    6d94:	38c00015 	stw	r3,0(r7)
    6d98:	28800117 	ldw	r2,4(r5)
    6d9c:	38800115 	stw	r2,4(r7)
    6da0:	28c00217 	ldw	r3,8(r5)
    6da4:	38c00215 	stw	r3,8(r7)
    6da8:	28800317 	ldw	r2,12(r5)
    6dac:	29400404 	addi	r5,r5,16
    6db0:	38800315 	stw	r2,12(r7)
    6db4:	39c00404 	addi	r7,r7,16
    6db8:	41bff436 	bltu	r8,r6,6d8c <memmove+0x84>
    6dbc:	008000c4 	movi	r2,3
    6dc0:	1180072e 	bgeu	r2,r6,6de0 <memmove+0xd8>
    6dc4:	1007883a 	mov	r3,r2
    6dc8:	28800017 	ldw	r2,0(r5)
    6dcc:	31bfff04 	addi	r6,r6,-4
    6dd0:	29400104 	addi	r5,r5,4
    6dd4:	38800015 	stw	r2,0(r7)
    6dd8:	39c00104 	addi	r7,r7,4
    6ddc:	19bffa36 	bltu	r3,r6,6dc8 <memmove+0xc0>
    6de0:	3811883a 	mov	r8,r7
    6de4:	003fd906 	br	6d4c <memmove+0x44>

00006de8 <_Bfree>:
    6de8:	28000826 	beq	r5,zero,6e0c <_Bfree+0x24>
    6dec:	28800117 	ldw	r2,4(r5)
    6df0:	21001317 	ldw	r4,76(r4)
    6df4:	1085883a 	add	r2,r2,r2
    6df8:	1085883a 	add	r2,r2,r2
    6dfc:	1105883a 	add	r2,r2,r4
    6e00:	10c00017 	ldw	r3,0(r2)
    6e04:	28c00015 	stw	r3,0(r5)
    6e08:	11400015 	stw	r5,0(r2)
    6e0c:	f800283a 	ret

00006e10 <__hi0bits>:
    6e10:	20bfffec 	andhi	r2,r4,65535
    6e14:	10001426 	beq	r2,zero,6e68 <__hi0bits+0x58>
    6e18:	0007883a 	mov	r3,zero
    6e1c:	20bfc02c 	andhi	r2,r4,65280
    6e20:	1000021e 	bne	r2,zero,6e2c <__hi0bits+0x1c>
    6e24:	2008923a 	slli	r4,r4,8
    6e28:	18c00204 	addi	r3,r3,8
    6e2c:	20bc002c 	andhi	r2,r4,61440
    6e30:	1000021e 	bne	r2,zero,6e3c <__hi0bits+0x2c>
    6e34:	2008913a 	slli	r4,r4,4
    6e38:	18c00104 	addi	r3,r3,4
    6e3c:	20b0002c 	andhi	r2,r4,49152
    6e40:	1000031e 	bne	r2,zero,6e50 <__hi0bits+0x40>
    6e44:	2105883a 	add	r2,r4,r4
    6e48:	18c00084 	addi	r3,r3,2
    6e4c:	1089883a 	add	r4,r2,r2
    6e50:	20000316 	blt	r4,zero,6e60 <__hi0bits+0x50>
    6e54:	2090002c 	andhi	r2,r4,16384
    6e58:	10000626 	beq	r2,zero,6e74 <__hi0bits+0x64>
    6e5c:	18c00044 	addi	r3,r3,1
    6e60:	1805883a 	mov	r2,r3
    6e64:	f800283a 	ret
    6e68:	2008943a 	slli	r4,r4,16
    6e6c:	00c00404 	movi	r3,16
    6e70:	003fea06 	br	6e1c <__hi0bits+0xc>
    6e74:	00c00804 	movi	r3,32
    6e78:	1805883a 	mov	r2,r3
    6e7c:	f800283a 	ret

00006e80 <__lo0bits>:
    6e80:	20c00017 	ldw	r3,0(r4)
    6e84:	188001cc 	andi	r2,r3,7
    6e88:	10000a26 	beq	r2,zero,6eb4 <__lo0bits+0x34>
    6e8c:	1880004c 	andi	r2,r3,1
    6e90:	1005003a 	cmpeq	r2,r2,zero
    6e94:	10002126 	beq	r2,zero,6f1c <__lo0bits+0x9c>
    6e98:	1880008c 	andi	r2,r3,2
    6e9c:	1000251e 	bne	r2,zero,6f34 <__lo0bits+0xb4>
    6ea0:	1804d0ba 	srli	r2,r3,2
    6ea4:	01400084 	movi	r5,2
    6ea8:	20800015 	stw	r2,0(r4)
    6eac:	2805883a 	mov	r2,r5
    6eb0:	f800283a 	ret
    6eb4:	18bfffcc 	andi	r2,r3,65535
    6eb8:	10001526 	beq	r2,zero,6f10 <__lo0bits+0x90>
    6ebc:	000b883a 	mov	r5,zero
    6ec0:	18803fcc 	andi	r2,r3,255
    6ec4:	1000021e 	bne	r2,zero,6ed0 <__lo0bits+0x50>
    6ec8:	1806d23a 	srli	r3,r3,8
    6ecc:	29400204 	addi	r5,r5,8
    6ed0:	188003cc 	andi	r2,r3,15
    6ed4:	1000021e 	bne	r2,zero,6ee0 <__lo0bits+0x60>
    6ed8:	1806d13a 	srli	r3,r3,4
    6edc:	29400104 	addi	r5,r5,4
    6ee0:	188000cc 	andi	r2,r3,3
    6ee4:	1000021e 	bne	r2,zero,6ef0 <__lo0bits+0x70>
    6ee8:	1806d0ba 	srli	r3,r3,2
    6eec:	29400084 	addi	r5,r5,2
    6ef0:	1880004c 	andi	r2,r3,1
    6ef4:	1000031e 	bne	r2,zero,6f04 <__lo0bits+0x84>
    6ef8:	1806d07a 	srli	r3,r3,1
    6efc:	18000a26 	beq	r3,zero,6f28 <__lo0bits+0xa8>
    6f00:	29400044 	addi	r5,r5,1
    6f04:	2805883a 	mov	r2,r5
    6f08:	20c00015 	stw	r3,0(r4)
    6f0c:	f800283a 	ret
    6f10:	1806d43a 	srli	r3,r3,16
    6f14:	01400404 	movi	r5,16
    6f18:	003fe906 	br	6ec0 <__lo0bits+0x40>
    6f1c:	000b883a 	mov	r5,zero
    6f20:	2805883a 	mov	r2,r5
    6f24:	f800283a 	ret
    6f28:	01400804 	movi	r5,32
    6f2c:	2805883a 	mov	r2,r5
    6f30:	f800283a 	ret
    6f34:	1804d07a 	srli	r2,r3,1
    6f38:	01400044 	movi	r5,1
    6f3c:	20800015 	stw	r2,0(r4)
    6f40:	003fda06 	br	6eac <__lo0bits+0x2c>

00006f44 <__mcmp>:
    6f44:	20800417 	ldw	r2,16(r4)
    6f48:	28c00417 	ldw	r3,16(r5)
    6f4c:	10cfc83a 	sub	r7,r2,r3
    6f50:	38000c1e 	bne	r7,zero,6f84 <__mcmp+0x40>
    6f54:	18c5883a 	add	r2,r3,r3
    6f58:	1085883a 	add	r2,r2,r2
    6f5c:	10c00504 	addi	r3,r2,20
    6f60:	21000504 	addi	r4,r4,20
    6f64:	28cb883a 	add	r5,r5,r3
    6f68:	2085883a 	add	r2,r4,r2
    6f6c:	10bfff04 	addi	r2,r2,-4
    6f70:	297fff04 	addi	r5,r5,-4
    6f74:	11800017 	ldw	r6,0(r2)
    6f78:	28c00017 	ldw	r3,0(r5)
    6f7c:	30c0031e 	bne	r6,r3,6f8c <__mcmp+0x48>
    6f80:	20bffa36 	bltu	r4,r2,6f6c <__mcmp+0x28>
    6f84:	3805883a 	mov	r2,r7
    6f88:	f800283a 	ret
    6f8c:	30c00336 	bltu	r6,r3,6f9c <__mcmp+0x58>
    6f90:	01c00044 	movi	r7,1
    6f94:	3805883a 	mov	r2,r7
    6f98:	f800283a 	ret
    6f9c:	01ffffc4 	movi	r7,-1
    6fa0:	003ff806 	br	6f84 <__mcmp+0x40>

00006fa4 <__ulp>:
    6fa4:	295ffc2c 	andhi	r5,r5,32752
    6fa8:	013f3034 	movhi	r4,64704
    6fac:	290b883a 	add	r5,r5,r4
    6fb0:	0145c83a 	sub	r2,zero,r5
    6fb4:	1007d53a 	srai	r3,r2,20
    6fb8:	000d883a 	mov	r6,zero
    6fbc:	0140040e 	bge	zero,r5,6fd0 <__ulp+0x2c>
    6fc0:	280f883a 	mov	r7,r5
    6fc4:	3807883a 	mov	r3,r7
    6fc8:	3005883a 	mov	r2,r6
    6fcc:	f800283a 	ret
    6fd0:	008004c4 	movi	r2,19
    6fd4:	193ffb04 	addi	r4,r3,-20
    6fd8:	10c00c0e 	bge	r2,r3,700c <__ulp+0x68>
    6fdc:	008007c4 	movi	r2,31
    6fe0:	1107c83a 	sub	r3,r2,r4
    6fe4:	00800784 	movi	r2,30
    6fe8:	01400044 	movi	r5,1
    6fec:	11000216 	blt	r2,r4,6ff8 <__ulp+0x54>
    6ff0:	00800044 	movi	r2,1
    6ff4:	10ca983a 	sll	r5,r2,r3
    6ff8:	000f883a 	mov	r7,zero
    6ffc:	280d883a 	mov	r6,r5
    7000:	3807883a 	mov	r3,r7
    7004:	3005883a 	mov	r2,r6
    7008:	f800283a 	ret
    700c:	00800234 	movhi	r2,8
    7010:	10cfd83a 	sra	r7,r2,r3
    7014:	000d883a 	mov	r6,zero
    7018:	3005883a 	mov	r2,r6
    701c:	3807883a 	mov	r3,r7
    7020:	f800283a 	ret

00007024 <__b2d>:
    7024:	20800417 	ldw	r2,16(r4)
    7028:	defff904 	addi	sp,sp,-28
    702c:	dd000415 	stw	r20,16(sp)
    7030:	1085883a 	add	r2,r2,r2
    7034:	25000504 	addi	r20,r4,20
    7038:	1085883a 	add	r2,r2,r2
    703c:	dc000015 	stw	r16,0(sp)
    7040:	a0a1883a 	add	r16,r20,r2
    7044:	dd400515 	stw	r21,20(sp)
    7048:	857fff17 	ldw	r21,-4(r16)
    704c:	dc400115 	stw	r17,4(sp)
    7050:	dfc00615 	stw	ra,24(sp)
    7054:	a809883a 	mov	r4,r21
    7058:	2823883a 	mov	r17,r5
    705c:	dcc00315 	stw	r19,12(sp)
    7060:	dc800215 	stw	r18,8(sp)
    7064:	0006e100 	call	6e10 <__hi0bits>
    7068:	100b883a 	mov	r5,r2
    706c:	00800804 	movi	r2,32
    7070:	1145c83a 	sub	r2,r2,r5
    7074:	88800015 	stw	r2,0(r17)
    7078:	00800284 	movi	r2,10
    707c:	80ffff04 	addi	r3,r16,-4
    7080:	11401416 	blt	r2,r5,70d4 <__b2d+0xb0>
    7084:	008002c4 	movi	r2,11
    7088:	1149c83a 	sub	r4,r2,r5
    708c:	a0c02736 	bltu	r20,r3,712c <__b2d+0x108>
    7090:	000d883a 	mov	r6,zero
    7094:	28800544 	addi	r2,r5,21
    7098:	a906d83a 	srl	r3,r21,r4
    709c:	a884983a 	sll	r2,r21,r2
    70a0:	1ccffc34 	orhi	r19,r3,16368
    70a4:	11a4b03a 	or	r18,r2,r6
    70a8:	9005883a 	mov	r2,r18
    70ac:	9807883a 	mov	r3,r19
    70b0:	dfc00617 	ldw	ra,24(sp)
    70b4:	dd400517 	ldw	r21,20(sp)
    70b8:	dd000417 	ldw	r20,16(sp)
    70bc:	dcc00317 	ldw	r19,12(sp)
    70c0:	dc800217 	ldw	r18,8(sp)
    70c4:	dc400117 	ldw	r17,4(sp)
    70c8:	dc000017 	ldw	r16,0(sp)
    70cc:	dec00704 	addi	sp,sp,28
    70d0:	f800283a 	ret
    70d4:	a0c00e36 	bltu	r20,r3,7110 <__b2d+0xec>
    70d8:	293ffd44 	addi	r4,r5,-11
    70dc:	000d883a 	mov	r6,zero
    70e0:	20000f26 	beq	r4,zero,7120 <__b2d+0xfc>
    70e4:	00800804 	movi	r2,32
    70e8:	110bc83a 	sub	r5,r2,r4
    70ec:	a0c01236 	bltu	r20,r3,7138 <__b2d+0x114>
    70f0:	000f883a 	mov	r7,zero
    70f4:	a904983a 	sll	r2,r21,r4
    70f8:	3146d83a 	srl	r3,r6,r5
    70fc:	3108983a 	sll	r4,r6,r4
    7100:	108ffc34 	orhi	r2,r2,16368
    7104:	18a6b03a 	or	r19,r3,r2
    7108:	3924b03a 	or	r18,r7,r4
    710c:	003fe606 	br	70a8 <__b2d+0x84>
    7110:	293ffd44 	addi	r4,r5,-11
    7114:	81bffe17 	ldw	r6,-8(r16)
    7118:	80fffe04 	addi	r3,r16,-8
    711c:	203ff11e 	bne	r4,zero,70e4 <__b2d+0xc0>
    7120:	accffc34 	orhi	r19,r21,16368
    7124:	3025883a 	mov	r18,r6
    7128:	003fdf06 	br	70a8 <__b2d+0x84>
    712c:	18bfff17 	ldw	r2,-4(r3)
    7130:	110cd83a 	srl	r6,r2,r4
    7134:	003fd706 	br	7094 <__b2d+0x70>
    7138:	18bfff17 	ldw	r2,-4(r3)
    713c:	114ed83a 	srl	r7,r2,r5
    7140:	003fec06 	br	70f4 <__b2d+0xd0>

00007144 <__ratio>:
    7144:	defff904 	addi	sp,sp,-28
    7148:	dc400215 	stw	r17,8(sp)
    714c:	2823883a 	mov	r17,r5
    7150:	d80b883a 	mov	r5,sp
    7154:	dfc00615 	stw	ra,24(sp)
    7158:	dd000515 	stw	r20,20(sp)
    715c:	dcc00415 	stw	r19,16(sp)
    7160:	dc800315 	stw	r18,12(sp)
    7164:	2025883a 	mov	r18,r4
    7168:	00070240 	call	7024 <__b2d>
    716c:	8809883a 	mov	r4,r17
    7170:	d9400104 	addi	r5,sp,4
    7174:	1027883a 	mov	r19,r2
    7178:	1829883a 	mov	r20,r3
    717c:	00070240 	call	7024 <__b2d>
    7180:	89000417 	ldw	r4,16(r17)
    7184:	91c00417 	ldw	r7,16(r18)
    7188:	d9800117 	ldw	r6,4(sp)
    718c:	180b883a 	mov	r5,r3
    7190:	390fc83a 	sub	r7,r7,r4
    7194:	1009883a 	mov	r4,r2
    7198:	d8800017 	ldw	r2,0(sp)
    719c:	380e917a 	slli	r7,r7,5
    71a0:	2011883a 	mov	r8,r4
    71a4:	1185c83a 	sub	r2,r2,r6
    71a8:	11c5883a 	add	r2,r2,r7
    71ac:	1006953a 	slli	r3,r2,20
    71b0:	2813883a 	mov	r9,r5
    71b4:	00800d0e 	bge	zero,r2,71ec <__ratio+0xa8>
    71b8:	1d29883a 	add	r20,r3,r20
    71bc:	a00b883a 	mov	r5,r20
    71c0:	480f883a 	mov	r7,r9
    71c4:	9809883a 	mov	r4,r19
    71c8:	400d883a 	mov	r6,r8
    71cc:	000a34c0 	call	a34c <__divdf3>
    71d0:	dfc00617 	ldw	ra,24(sp)
    71d4:	dd000517 	ldw	r20,20(sp)
    71d8:	dcc00417 	ldw	r19,16(sp)
    71dc:	dc800317 	ldw	r18,12(sp)
    71e0:	dc400217 	ldw	r17,8(sp)
    71e4:	dec00704 	addi	sp,sp,28
    71e8:	f800283a 	ret
    71ec:	28d3c83a 	sub	r9,r5,r3
    71f0:	003ff206 	br	71bc <__ratio+0x78>

000071f4 <_mprec_log10>:
    71f4:	defffe04 	addi	sp,sp,-8
    71f8:	008005c4 	movi	r2,23
    71fc:	dc000015 	stw	r16,0(sp)
    7200:	dfc00115 	stw	ra,4(sp)
    7204:	2021883a 	mov	r16,r4
    7208:	11000c16 	blt	r2,r4,723c <_mprec_log10+0x48>
    720c:	200490fa 	slli	r2,r4,3
    7210:	00c00074 	movhi	r3,1
    7214:	18c84904 	addi	r3,r3,8484
    7218:	10c5883a 	add	r2,r2,r3
    721c:	12400117 	ldw	r9,4(r2)
    7220:	12000017 	ldw	r8,0(r2)
    7224:	4807883a 	mov	r3,r9
    7228:	4005883a 	mov	r2,r8
    722c:	dfc00117 	ldw	ra,4(sp)
    7230:	dc000017 	ldw	r16,0(sp)
    7234:	dec00204 	addi	sp,sp,8
    7238:	f800283a 	ret
    723c:	0011883a 	mov	r8,zero
    7240:	024ffc34 	movhi	r9,16368
    7244:	0005883a 	mov	r2,zero
    7248:	00d00934 	movhi	r3,16420
    724c:	480b883a 	mov	r5,r9
    7250:	4009883a 	mov	r4,r8
    7254:	180f883a 	mov	r7,r3
    7258:	100d883a 	mov	r6,r2
    725c:	0009f880 	call	9f88 <__muldf3>
    7260:	843fffc4 	addi	r16,r16,-1
    7264:	1011883a 	mov	r8,r2
    7268:	1813883a 	mov	r9,r3
    726c:	803ff51e 	bne	r16,zero,7244 <_mprec_log10+0x50>
    7270:	4005883a 	mov	r2,r8
    7274:	4807883a 	mov	r3,r9
    7278:	dfc00117 	ldw	ra,4(sp)
    727c:	dc000017 	ldw	r16,0(sp)
    7280:	dec00204 	addi	sp,sp,8
    7284:	f800283a 	ret

00007288 <__copybits>:
    7288:	297fffc4 	addi	r5,r5,-1
    728c:	30800417 	ldw	r2,16(r6)
    7290:	280bd17a 	srai	r5,r5,5
    7294:	31800504 	addi	r6,r6,20
    7298:	1085883a 	add	r2,r2,r2
    729c:	294b883a 	add	r5,r5,r5
    72a0:	294b883a 	add	r5,r5,r5
    72a4:	1085883a 	add	r2,r2,r2
    72a8:	290b883a 	add	r5,r5,r4
    72ac:	3087883a 	add	r3,r6,r2
    72b0:	29400104 	addi	r5,r5,4
    72b4:	30c0052e 	bgeu	r6,r3,72cc <__copybits+0x44>
    72b8:	30800017 	ldw	r2,0(r6)
    72bc:	31800104 	addi	r6,r6,4
    72c0:	20800015 	stw	r2,0(r4)
    72c4:	21000104 	addi	r4,r4,4
    72c8:	30fffb36 	bltu	r6,r3,72b8 <__copybits+0x30>
    72cc:	2140032e 	bgeu	r4,r5,72dc <__copybits+0x54>
    72d0:	20000015 	stw	zero,0(r4)
    72d4:	21000104 	addi	r4,r4,4
    72d8:	217ffd36 	bltu	r4,r5,72d0 <__copybits+0x48>
    72dc:	f800283a 	ret

000072e0 <__any_on>:
    72e0:	20800417 	ldw	r2,16(r4)
    72e4:	2807d17a 	srai	r3,r5,5
    72e8:	21000504 	addi	r4,r4,20
    72ec:	10c00d0e 	bge	r2,r3,7324 <__any_on+0x44>
    72f0:	1085883a 	add	r2,r2,r2
    72f4:	1085883a 	add	r2,r2,r2
    72f8:	208d883a 	add	r6,r4,r2
    72fc:	2180182e 	bgeu	r4,r6,7360 <__any_on+0x80>
    7300:	30bfff17 	ldw	r2,-4(r6)
    7304:	30ffff04 	addi	r3,r6,-4
    7308:	1000041e 	bne	r2,zero,731c <__any_on+0x3c>
    730c:	20c0142e 	bgeu	r4,r3,7360 <__any_on+0x80>
    7310:	18ffff04 	addi	r3,r3,-4
    7314:	18800017 	ldw	r2,0(r3)
    7318:	103ffc26 	beq	r2,zero,730c <__any_on+0x2c>
    731c:	00800044 	movi	r2,1
    7320:	f800283a 	ret
    7324:	18800a0e 	bge	r3,r2,7350 <__any_on+0x70>
    7328:	294007cc 	andi	r5,r5,31
    732c:	28000826 	beq	r5,zero,7350 <__any_on+0x70>
    7330:	18c5883a 	add	r2,r3,r3
    7334:	1085883a 	add	r2,r2,r2
    7338:	208d883a 	add	r6,r4,r2
    733c:	30c00017 	ldw	r3,0(r6)
    7340:	1944d83a 	srl	r2,r3,r5
    7344:	1144983a 	sll	r2,r2,r5
    7348:	18bff41e 	bne	r3,r2,731c <__any_on+0x3c>
    734c:	003feb06 	br	72fc <__any_on+0x1c>
    7350:	18c5883a 	add	r2,r3,r3
    7354:	1085883a 	add	r2,r2,r2
    7358:	208d883a 	add	r6,r4,r2
    735c:	003fe706 	br	72fc <__any_on+0x1c>
    7360:	0005883a 	mov	r2,zero
    7364:	f800283a 	ret

00007368 <_Balloc>:
    7368:	20c01317 	ldw	r3,76(r4)
    736c:	defffb04 	addi	sp,sp,-20
    7370:	dcc00315 	stw	r19,12(sp)
    7374:	dc800215 	stw	r18,8(sp)
    7378:	dfc00415 	stw	ra,16(sp)
    737c:	2825883a 	mov	r18,r5
    7380:	dc400115 	stw	r17,4(sp)
    7384:	dc000015 	stw	r16,0(sp)
    7388:	2027883a 	mov	r19,r4
    738c:	01800404 	movi	r6,16
    7390:	01400104 	movi	r5,4
    7394:	18001726 	beq	r3,zero,73f4 <_Balloc+0x8c>
    7398:	01400044 	movi	r5,1
    739c:	9485883a 	add	r2,r18,r18
    73a0:	2ca2983a 	sll	r17,r5,r18
    73a4:	1085883a 	add	r2,r2,r2
    73a8:	10c7883a 	add	r3,r2,r3
    73ac:	1c000017 	ldw	r16,0(r3)
    73b0:	8c4d883a 	add	r6,r17,r17
    73b4:	318d883a 	add	r6,r6,r6
    73b8:	9809883a 	mov	r4,r19
    73bc:	31800504 	addi	r6,r6,20
    73c0:	80001226 	beq	r16,zero,740c <_Balloc+0xa4>
    73c4:	80800017 	ldw	r2,0(r16)
    73c8:	18800015 	stw	r2,0(r3)
    73cc:	80000415 	stw	zero,16(r16)
    73d0:	80000315 	stw	zero,12(r16)
    73d4:	8005883a 	mov	r2,r16
    73d8:	dfc00417 	ldw	ra,16(sp)
    73dc:	dcc00317 	ldw	r19,12(sp)
    73e0:	dc800217 	ldw	r18,8(sp)
    73e4:	dc400117 	ldw	r17,4(sp)
    73e8:	dc000017 	ldw	r16,0(sp)
    73ec:	dec00504 	addi	sp,sp,20
    73f0:	f800283a 	ret
    73f4:	0008adc0 	call	8adc <_calloc_r>
    73f8:	1007883a 	mov	r3,r2
    73fc:	0021883a 	mov	r16,zero
    7400:	98801315 	stw	r2,76(r19)
    7404:	103fe41e 	bne	r2,zero,7398 <_Balloc+0x30>
    7408:	003ff206 	br	73d4 <_Balloc+0x6c>
    740c:	0008adc0 	call	8adc <_calloc_r>
    7410:	103ff026 	beq	r2,zero,73d4 <_Balloc+0x6c>
    7414:	1021883a 	mov	r16,r2
    7418:	14800115 	stw	r18,4(r2)
    741c:	14400215 	stw	r17,8(r2)
    7420:	003fea06 	br	73cc <_Balloc+0x64>

00007424 <__d2b>:
    7424:	defff504 	addi	sp,sp,-44
    7428:	dcc00515 	stw	r19,20(sp)
    742c:	04c00044 	movi	r19,1
    7430:	dc000215 	stw	r16,8(sp)
    7434:	2821883a 	mov	r16,r5
    7438:	980b883a 	mov	r5,r19
    743c:	ddc00915 	stw	r23,36(sp)
    7440:	dd800815 	stw	r22,32(sp)
    7444:	dd400715 	stw	r21,28(sp)
    7448:	dd000615 	stw	r20,24(sp)
    744c:	dc800415 	stw	r18,16(sp)
    7450:	dc400315 	stw	r17,12(sp)
    7454:	dfc00a15 	stw	ra,40(sp)
    7458:	3023883a 	mov	r17,r6
    745c:	382d883a 	mov	r22,r7
    7460:	ddc00b17 	ldw	r23,44(sp)
    7464:	00073680 	call	7368 <_Balloc>
    7468:	1025883a 	mov	r18,r2
    746c:	00a00034 	movhi	r2,32768
    7470:	10bfffc4 	addi	r2,r2,-1
    7474:	8888703a 	and	r4,r17,r2
    7478:	202ad53a 	srli	r21,r4,20
    747c:	00800434 	movhi	r2,16
    7480:	10bfffc4 	addi	r2,r2,-1
    7484:	8886703a 	and	r3,r17,r2
    7488:	a829003a 	cmpeq	r20,r21,zero
    748c:	800b883a 	mov	r5,r16
    7490:	d8c00115 	stw	r3,4(sp)
    7494:	94000504 	addi	r16,r18,20
    7498:	a000021e 	bne	r20,zero,74a4 <__d2b+0x80>
    749c:	18c00434 	orhi	r3,r3,16
    74a0:	d8c00115 	stw	r3,4(sp)
    74a4:	28002726 	beq	r5,zero,7544 <__d2b+0x120>
    74a8:	d809883a 	mov	r4,sp
    74ac:	d9400015 	stw	r5,0(sp)
    74b0:	0006e800 	call	6e80 <__lo0bits>
    74b4:	100d883a 	mov	r6,r2
    74b8:	10003526 	beq	r2,zero,7590 <__d2b+0x16c>
    74bc:	d8c00117 	ldw	r3,4(sp)
    74c0:	00800804 	movi	r2,32
    74c4:	1185c83a 	sub	r2,r2,r6
    74c8:	d9000017 	ldw	r4,0(sp)
    74cc:	1886983a 	sll	r3,r3,r2
    74d0:	1906b03a 	or	r3,r3,r4
    74d4:	90c00515 	stw	r3,20(r18)
    74d8:	d8c00117 	ldw	r3,4(sp)
    74dc:	1986d83a 	srl	r3,r3,r6
    74e0:	d8c00115 	stw	r3,4(sp)
    74e4:	180b003a 	cmpeq	r5,r3,zero
    74e8:	00800084 	movi	r2,2
    74ec:	114bc83a 	sub	r5,r2,r5
    74f0:	80c00115 	stw	r3,4(r16)
    74f4:	91400415 	stw	r5,16(r18)
    74f8:	a0001a1e 	bne	r20,zero,7564 <__d2b+0x140>
    74fc:	3545883a 	add	r2,r6,r21
    7500:	10bef344 	addi	r2,r2,-1075
    7504:	00c00d44 	movi	r3,53
    7508:	b0800015 	stw	r2,0(r22)
    750c:	1987c83a 	sub	r3,r3,r6
    7510:	b8c00015 	stw	r3,0(r23)
    7514:	9005883a 	mov	r2,r18
    7518:	dfc00a17 	ldw	ra,40(sp)
    751c:	ddc00917 	ldw	r23,36(sp)
    7520:	dd800817 	ldw	r22,32(sp)
    7524:	dd400717 	ldw	r21,28(sp)
    7528:	dd000617 	ldw	r20,24(sp)
    752c:	dcc00517 	ldw	r19,20(sp)
    7530:	dc800417 	ldw	r18,16(sp)
    7534:	dc400317 	ldw	r17,12(sp)
    7538:	dc000217 	ldw	r16,8(sp)
    753c:	dec00b04 	addi	sp,sp,44
    7540:	f800283a 	ret
    7544:	d9000104 	addi	r4,sp,4
    7548:	0006e800 	call	6e80 <__lo0bits>
    754c:	11800804 	addi	r6,r2,32
    7550:	d8800117 	ldw	r2,4(sp)
    7554:	94c00415 	stw	r19,16(r18)
    7558:	980b883a 	mov	r5,r19
    755c:	90800515 	stw	r2,20(r18)
    7560:	a03fe626 	beq	r20,zero,74fc <__d2b+0xd8>
    7564:	2945883a 	add	r2,r5,r5
    7568:	1085883a 	add	r2,r2,r2
    756c:	1405883a 	add	r2,r2,r16
    7570:	113fff17 	ldw	r4,-4(r2)
    7574:	30fef384 	addi	r3,r6,-1074
    7578:	2820917a 	slli	r16,r5,5
    757c:	b0c00015 	stw	r3,0(r22)
    7580:	0006e100 	call	6e10 <__hi0bits>
    7584:	80a1c83a 	sub	r16,r16,r2
    7588:	bc000015 	stw	r16,0(r23)
    758c:	003fe106 	br	7514 <__d2b+0xf0>
    7590:	d8800017 	ldw	r2,0(sp)
    7594:	90800515 	stw	r2,20(r18)
    7598:	d8c00117 	ldw	r3,4(sp)
    759c:	003fd106 	br	74e4 <__d2b+0xc0>

000075a0 <__mdiff>:
    75a0:	defffb04 	addi	sp,sp,-20
    75a4:	dc000015 	stw	r16,0(sp)
    75a8:	2821883a 	mov	r16,r5
    75ac:	dc800215 	stw	r18,8(sp)
    75b0:	300b883a 	mov	r5,r6
    75b4:	2025883a 	mov	r18,r4
    75b8:	8009883a 	mov	r4,r16
    75bc:	dc400115 	stw	r17,4(sp)
    75c0:	dfc00415 	stw	ra,16(sp)
    75c4:	dcc00315 	stw	r19,12(sp)
    75c8:	3023883a 	mov	r17,r6
    75cc:	0006f440 	call	6f44 <__mcmp>
    75d0:	10004226 	beq	r2,zero,76dc <__mdiff+0x13c>
    75d4:	10005016 	blt	r2,zero,7718 <__mdiff+0x178>
    75d8:	0027883a 	mov	r19,zero
    75dc:	81400117 	ldw	r5,4(r16)
    75e0:	9009883a 	mov	r4,r18
    75e4:	00073680 	call	7368 <_Balloc>
    75e8:	1019883a 	mov	r12,r2
    75ec:	82800417 	ldw	r10,16(r16)
    75f0:	88800417 	ldw	r2,16(r17)
    75f4:	81800504 	addi	r6,r16,20
    75f8:	5287883a 	add	r3,r10,r10
    75fc:	1085883a 	add	r2,r2,r2
    7600:	18c7883a 	add	r3,r3,r3
    7604:	1085883a 	add	r2,r2,r2
    7608:	8a000504 	addi	r8,r17,20
    760c:	64c00315 	stw	r19,12(r12)
    7610:	30db883a 	add	r13,r6,r3
    7614:	4097883a 	add	r11,r8,r2
    7618:	61c00504 	addi	r7,r12,20
    761c:	0013883a 	mov	r9,zero
    7620:	31000017 	ldw	r4,0(r6)
    7624:	41400017 	ldw	r5,0(r8)
    7628:	42000104 	addi	r8,r8,4
    762c:	20bfffcc 	andi	r2,r4,65535
    7630:	28ffffcc 	andi	r3,r5,65535
    7634:	10c5c83a 	sub	r2,r2,r3
    7638:	1245883a 	add	r2,r2,r9
    763c:	2008d43a 	srli	r4,r4,16
    7640:	280ad43a 	srli	r5,r5,16
    7644:	1007d43a 	srai	r3,r2,16
    7648:	3880000d 	sth	r2,0(r7)
    764c:	2149c83a 	sub	r4,r4,r5
    7650:	20c9883a 	add	r4,r4,r3
    7654:	3900008d 	sth	r4,2(r7)
    7658:	31800104 	addi	r6,r6,4
    765c:	39c00104 	addi	r7,r7,4
    7660:	2013d43a 	srai	r9,r4,16
    7664:	42ffee36 	bltu	r8,r11,7620 <__mdiff+0x80>
    7668:	33400c2e 	bgeu	r6,r13,769c <__mdiff+0xfc>
    766c:	30800017 	ldw	r2,0(r6)
    7670:	31800104 	addi	r6,r6,4
    7674:	10ffffcc 	andi	r3,r2,65535
    7678:	1a47883a 	add	r3,r3,r9
    767c:	1004d43a 	srli	r2,r2,16
    7680:	1809d43a 	srai	r4,r3,16
    7684:	38c0000d 	sth	r3,0(r7)
    7688:	1105883a 	add	r2,r2,r4
    768c:	3880008d 	sth	r2,2(r7)
    7690:	1013d43a 	srai	r9,r2,16
    7694:	39c00104 	addi	r7,r7,4
    7698:	337ff436 	bltu	r6,r13,766c <__mdiff+0xcc>
    769c:	38bfff17 	ldw	r2,-4(r7)
    76a0:	38ffff04 	addi	r3,r7,-4
    76a4:	1000041e 	bne	r2,zero,76b8 <__mdiff+0x118>
    76a8:	18ffff04 	addi	r3,r3,-4
    76ac:	18800017 	ldw	r2,0(r3)
    76b0:	52bfffc4 	addi	r10,r10,-1
    76b4:	103ffc26 	beq	r2,zero,76a8 <__mdiff+0x108>
    76b8:	6005883a 	mov	r2,r12
    76bc:	62800415 	stw	r10,16(r12)
    76c0:	dfc00417 	ldw	ra,16(sp)
    76c4:	dcc00317 	ldw	r19,12(sp)
    76c8:	dc800217 	ldw	r18,8(sp)
    76cc:	dc400117 	ldw	r17,4(sp)
    76d0:	dc000017 	ldw	r16,0(sp)
    76d4:	dec00504 	addi	sp,sp,20
    76d8:	f800283a 	ret
    76dc:	9009883a 	mov	r4,r18
    76e0:	000b883a 	mov	r5,zero
    76e4:	00073680 	call	7368 <_Balloc>
    76e8:	1019883a 	mov	r12,r2
    76ec:	00800044 	movi	r2,1
    76f0:	60800415 	stw	r2,16(r12)
    76f4:	6005883a 	mov	r2,r12
    76f8:	60000515 	stw	zero,20(r12)
    76fc:	dfc00417 	ldw	ra,16(sp)
    7700:	dcc00317 	ldw	r19,12(sp)
    7704:	dc800217 	ldw	r18,8(sp)
    7708:	dc400117 	ldw	r17,4(sp)
    770c:	dc000017 	ldw	r16,0(sp)
    7710:	dec00504 	addi	sp,sp,20
    7714:	f800283a 	ret
    7718:	880d883a 	mov	r6,r17
    771c:	04c00044 	movi	r19,1
    7720:	8023883a 	mov	r17,r16
    7724:	3021883a 	mov	r16,r6
    7728:	003fac06 	br	75dc <__mdiff+0x3c>

0000772c <__lshift>:
    772c:	defff904 	addi	sp,sp,-28
    7730:	28800417 	ldw	r2,16(r5)
    7734:	dc000015 	stw	r16,0(sp)
    7738:	3021d17a 	srai	r16,r6,5
    773c:	28c00217 	ldw	r3,8(r5)
    7740:	10800044 	addi	r2,r2,1
    7744:	dc400115 	stw	r17,4(sp)
    7748:	80a3883a 	add	r17,r16,r2
    774c:	dd400515 	stw	r21,20(sp)
    7750:	dd000415 	stw	r20,16(sp)
    7754:	dc800215 	stw	r18,8(sp)
    7758:	dfc00615 	stw	ra,24(sp)
    775c:	2825883a 	mov	r18,r5
    7760:	dcc00315 	stw	r19,12(sp)
    7764:	3029883a 	mov	r20,r6
    7768:	202b883a 	mov	r21,r4
    776c:	29400117 	ldw	r5,4(r5)
    7770:	1c40030e 	bge	r3,r17,7780 <__lshift+0x54>
    7774:	18c7883a 	add	r3,r3,r3
    7778:	29400044 	addi	r5,r5,1
    777c:	1c7ffd16 	blt	r3,r17,7774 <__lshift+0x48>
    7780:	a809883a 	mov	r4,r21
    7784:	00073680 	call	7368 <_Balloc>
    7788:	1027883a 	mov	r19,r2
    778c:	11400504 	addi	r5,r2,20
    7790:	0400090e 	bge	zero,r16,77b8 <__lshift+0x8c>
    7794:	2805883a 	mov	r2,r5
    7798:	0007883a 	mov	r3,zero
    779c:	18c00044 	addi	r3,r3,1
    77a0:	10000015 	stw	zero,0(r2)
    77a4:	10800104 	addi	r2,r2,4
    77a8:	80fffc1e 	bne	r16,r3,779c <__lshift+0x70>
    77ac:	8405883a 	add	r2,r16,r16
    77b0:	1085883a 	add	r2,r2,r2
    77b4:	288b883a 	add	r5,r5,r2
    77b8:	90800417 	ldw	r2,16(r18)
    77bc:	91000504 	addi	r4,r18,20
    77c0:	a18007cc 	andi	r6,r20,31
    77c4:	1085883a 	add	r2,r2,r2
    77c8:	1085883a 	add	r2,r2,r2
    77cc:	208f883a 	add	r7,r4,r2
    77d0:	30001e26 	beq	r6,zero,784c <__lshift+0x120>
    77d4:	00800804 	movi	r2,32
    77d8:	1191c83a 	sub	r8,r2,r6
    77dc:	0007883a 	mov	r3,zero
    77e0:	20800017 	ldw	r2,0(r4)
    77e4:	1184983a 	sll	r2,r2,r6
    77e8:	1884b03a 	or	r2,r3,r2
    77ec:	28800015 	stw	r2,0(r5)
    77f0:	20c00017 	ldw	r3,0(r4)
    77f4:	21000104 	addi	r4,r4,4
    77f8:	29400104 	addi	r5,r5,4
    77fc:	1a06d83a 	srl	r3,r3,r8
    7800:	21fff736 	bltu	r4,r7,77e0 <__lshift+0xb4>
    7804:	28c00015 	stw	r3,0(r5)
    7808:	18000126 	beq	r3,zero,7810 <__lshift+0xe4>
    780c:	8c400044 	addi	r17,r17,1
    7810:	88bfffc4 	addi	r2,r17,-1
    7814:	98800415 	stw	r2,16(r19)
    7818:	a809883a 	mov	r4,r21
    781c:	900b883a 	mov	r5,r18
    7820:	0006de80 	call	6de8 <_Bfree>
    7824:	9805883a 	mov	r2,r19
    7828:	dfc00617 	ldw	ra,24(sp)
    782c:	dd400517 	ldw	r21,20(sp)
    7830:	dd000417 	ldw	r20,16(sp)
    7834:	dcc00317 	ldw	r19,12(sp)
    7838:	dc800217 	ldw	r18,8(sp)
    783c:	dc400117 	ldw	r17,4(sp)
    7840:	dc000017 	ldw	r16,0(sp)
    7844:	dec00704 	addi	sp,sp,28
    7848:	f800283a 	ret
    784c:	20800017 	ldw	r2,0(r4)
    7850:	21000104 	addi	r4,r4,4
    7854:	28800015 	stw	r2,0(r5)
    7858:	29400104 	addi	r5,r5,4
    785c:	21ffec2e 	bgeu	r4,r7,7810 <__lshift+0xe4>
    7860:	20800017 	ldw	r2,0(r4)
    7864:	21000104 	addi	r4,r4,4
    7868:	28800015 	stw	r2,0(r5)
    786c:	29400104 	addi	r5,r5,4
    7870:	21fff636 	bltu	r4,r7,784c <__lshift+0x120>
    7874:	003fe606 	br	7810 <__lshift+0xe4>

00007878 <__multiply>:
    7878:	defff904 	addi	sp,sp,-28
    787c:	dcc00315 	stw	r19,12(sp)
    7880:	dc800215 	stw	r18,8(sp)
    7884:	2cc00417 	ldw	r19,16(r5)
    7888:	34800417 	ldw	r18,16(r6)
    788c:	dd000415 	stw	r20,16(sp)
    7890:	dc400115 	stw	r17,4(sp)
    7894:	dfc00615 	stw	ra,24(sp)
    7898:	dd400515 	stw	r21,20(sp)
    789c:	dc000015 	stw	r16,0(sp)
    78a0:	2823883a 	mov	r17,r5
    78a4:	3029883a 	mov	r20,r6
    78a8:	9c80040e 	bge	r19,r18,78bc <__multiply+0x44>
    78ac:	9027883a 	mov	r19,r18
    78b0:	2c800417 	ldw	r18,16(r5)
    78b4:	2829883a 	mov	r20,r5
    78b8:	3023883a 	mov	r17,r6
    78bc:	88800217 	ldw	r2,8(r17)
    78c0:	9ca1883a 	add	r16,r19,r18
    78c4:	89400117 	ldw	r5,4(r17)
    78c8:	1400010e 	bge	r2,r16,78d0 <__multiply+0x58>
    78cc:	29400044 	addi	r5,r5,1
    78d0:	00073680 	call	7368 <_Balloc>
    78d4:	102b883a 	mov	r21,r2
    78d8:	8405883a 	add	r2,r16,r16
    78dc:	1085883a 	add	r2,r2,r2
    78e0:	a9000504 	addi	r4,r21,20
    78e4:	209d883a 	add	r14,r4,r2
    78e8:	2380042e 	bgeu	r4,r14,78fc <__multiply+0x84>
    78ec:	2005883a 	mov	r2,r4
    78f0:	10000015 	stw	zero,0(r2)
    78f4:	10800104 	addi	r2,r2,4
    78f8:	13bffd36 	bltu	r2,r14,78f0 <__multiply+0x78>
    78fc:	9485883a 	add	r2,r18,r18
    7900:	9cc7883a 	add	r3,r19,r19
    7904:	a1800504 	addi	r6,r20,20
    7908:	1085883a 	add	r2,r2,r2
    790c:	8b400504 	addi	r13,r17,20
    7910:	18c7883a 	add	r3,r3,r3
    7914:	309f883a 	add	r15,r6,r2
    7918:	68d7883a 	add	r11,r13,r3
    791c:	33c03b2e 	bgeu	r6,r15,7a0c <__multiply+0x194>
    7920:	2019883a 	mov	r12,r4
    7924:	30800017 	ldw	r2,0(r6)
    7928:	127fffcc 	andi	r9,r2,65535
    792c:	48001826 	beq	r9,zero,7990 <__multiply+0x118>
    7930:	6811883a 	mov	r8,r13
    7934:	600f883a 	mov	r7,r12
    7938:	0015883a 	mov	r10,zero
    793c:	40c00017 	ldw	r3,0(r8)
    7940:	39400017 	ldw	r5,0(r7)
    7944:	42000104 	addi	r8,r8,4
    7948:	193fffcc 	andi	r4,r3,65535
    794c:	4909383a 	mul	r4,r9,r4
    7950:	1806d43a 	srli	r3,r3,16
    7954:	28bfffcc 	andi	r2,r5,65535
    7958:	5085883a 	add	r2,r10,r2
    795c:	2089883a 	add	r4,r4,r2
    7960:	48c7383a 	mul	r3,r9,r3
    7964:	280ad43a 	srli	r5,r5,16
    7968:	2004d43a 	srli	r2,r4,16
    796c:	3900000d 	sth	r4,0(r7)
    7970:	1947883a 	add	r3,r3,r5
    7974:	10c5883a 	add	r2,r2,r3
    7978:	3880008d 	sth	r2,2(r7)
    797c:	1014d43a 	srli	r10,r2,16
    7980:	39c00104 	addi	r7,r7,4
    7984:	42ffed36 	bltu	r8,r11,793c <__multiply+0xc4>
    7988:	3a800015 	stw	r10,0(r7)
    798c:	30800017 	ldw	r2,0(r6)
    7990:	1012d43a 	srli	r9,r2,16
    7994:	48001926 	beq	r9,zero,79fc <__multiply+0x184>
    7998:	60800017 	ldw	r2,0(r12)
    799c:	6811883a 	mov	r8,r13
    79a0:	600f883a 	mov	r7,r12
    79a4:	0015883a 	mov	r10,zero
    79a8:	100b883a 	mov	r5,r2
    79ac:	41000017 	ldw	r4,0(r8)
    79b0:	2806d43a 	srli	r3,r5,16
    79b4:	3880000d 	sth	r2,0(r7)
    79b8:	20bfffcc 	andi	r2,r4,65535
    79bc:	4885383a 	mul	r2,r9,r2
    79c0:	50c7883a 	add	r3,r10,r3
    79c4:	2008d43a 	srli	r4,r4,16
    79c8:	10c5883a 	add	r2,r2,r3
    79cc:	3880008d 	sth	r2,2(r7)
    79d0:	39c00104 	addi	r7,r7,4
    79d4:	39400017 	ldw	r5,0(r7)
    79d8:	4909383a 	mul	r4,r9,r4
    79dc:	1004d43a 	srli	r2,r2,16
    79e0:	28ffffcc 	andi	r3,r5,65535
    79e4:	20c9883a 	add	r4,r4,r3
    79e8:	1105883a 	add	r2,r2,r4
    79ec:	42000104 	addi	r8,r8,4
    79f0:	1014d43a 	srli	r10,r2,16
    79f4:	42ffed36 	bltu	r8,r11,79ac <__multiply+0x134>
    79f8:	38800015 	stw	r2,0(r7)
    79fc:	31800104 	addi	r6,r6,4
    7a00:	33c0022e 	bgeu	r6,r15,7a0c <__multiply+0x194>
    7a04:	63000104 	addi	r12,r12,4
    7a08:	003fc606 	br	7924 <__multiply+0xac>
    7a0c:	0400090e 	bge	zero,r16,7a34 <__multiply+0x1bc>
    7a10:	70bfff17 	ldw	r2,-4(r14)
    7a14:	70ffff04 	addi	r3,r14,-4
    7a18:	10000326 	beq	r2,zero,7a28 <__multiply+0x1b0>
    7a1c:	00000506 	br	7a34 <__multiply+0x1bc>
    7a20:	18800017 	ldw	r2,0(r3)
    7a24:	1000031e 	bne	r2,zero,7a34 <__multiply+0x1bc>
    7a28:	843fffc4 	addi	r16,r16,-1
    7a2c:	18ffff04 	addi	r3,r3,-4
    7a30:	803ffb1e 	bne	r16,zero,7a20 <__multiply+0x1a8>
    7a34:	a805883a 	mov	r2,r21
    7a38:	ac000415 	stw	r16,16(r21)
    7a3c:	dfc00617 	ldw	ra,24(sp)
    7a40:	dd400517 	ldw	r21,20(sp)
    7a44:	dd000417 	ldw	r20,16(sp)
    7a48:	dcc00317 	ldw	r19,12(sp)
    7a4c:	dc800217 	ldw	r18,8(sp)
    7a50:	dc400117 	ldw	r17,4(sp)
    7a54:	dc000017 	ldw	r16,0(sp)
    7a58:	dec00704 	addi	sp,sp,28
    7a5c:	f800283a 	ret

00007a60 <__i2b>:
    7a60:	defffd04 	addi	sp,sp,-12
    7a64:	dc000015 	stw	r16,0(sp)
    7a68:	04000044 	movi	r16,1
    7a6c:	dc800115 	stw	r18,4(sp)
    7a70:	2825883a 	mov	r18,r5
    7a74:	800b883a 	mov	r5,r16
    7a78:	dfc00215 	stw	ra,8(sp)
    7a7c:	00073680 	call	7368 <_Balloc>
    7a80:	14000415 	stw	r16,16(r2)
    7a84:	14800515 	stw	r18,20(r2)
    7a88:	dfc00217 	ldw	ra,8(sp)
    7a8c:	dc800117 	ldw	r18,4(sp)
    7a90:	dc000017 	ldw	r16,0(sp)
    7a94:	dec00304 	addi	sp,sp,12
    7a98:	f800283a 	ret

00007a9c <__multadd>:
    7a9c:	defffa04 	addi	sp,sp,-24
    7aa0:	dc800215 	stw	r18,8(sp)
    7aa4:	2c800417 	ldw	r18,16(r5)
    7aa8:	dd000415 	stw	r20,16(sp)
    7aac:	dcc00315 	stw	r19,12(sp)
    7ab0:	dc000015 	stw	r16,0(sp)
    7ab4:	dfc00515 	stw	ra,20(sp)
    7ab8:	3821883a 	mov	r16,r7
    7abc:	dc400115 	stw	r17,4(sp)
    7ac0:	2827883a 	mov	r19,r5
    7ac4:	2029883a 	mov	r20,r4
    7ac8:	2a000504 	addi	r8,r5,20
    7acc:	000f883a 	mov	r7,zero
    7ad0:	40800017 	ldw	r2,0(r8)
    7ad4:	39c00044 	addi	r7,r7,1
    7ad8:	10ffffcc 	andi	r3,r2,65535
    7adc:	1987383a 	mul	r3,r3,r6
    7ae0:	1004d43a 	srli	r2,r2,16
    7ae4:	1c07883a 	add	r3,r3,r16
    7ae8:	180ad43a 	srli	r5,r3,16
    7aec:	1185383a 	mul	r2,r2,r6
    7af0:	18ffffcc 	andi	r3,r3,65535
    7af4:	1145883a 	add	r2,r2,r5
    7af8:	1008943a 	slli	r4,r2,16
    7afc:	1020d43a 	srli	r16,r2,16
    7b00:	20c9883a 	add	r4,r4,r3
    7b04:	41000015 	stw	r4,0(r8)
    7b08:	42000104 	addi	r8,r8,4
    7b0c:	3cbff016 	blt	r7,r18,7ad0 <__multadd+0x34>
    7b10:	80000826 	beq	r16,zero,7b34 <__multadd+0x98>
    7b14:	98800217 	ldw	r2,8(r19)
    7b18:	90800f0e 	bge	r18,r2,7b58 <__multadd+0xbc>
    7b1c:	9485883a 	add	r2,r18,r18
    7b20:	1085883a 	add	r2,r2,r2
    7b24:	14c5883a 	add	r2,r2,r19
    7b28:	90c00044 	addi	r3,r18,1
    7b2c:	14000515 	stw	r16,20(r2)
    7b30:	98c00415 	stw	r3,16(r19)
    7b34:	9805883a 	mov	r2,r19
    7b38:	dfc00517 	ldw	ra,20(sp)
    7b3c:	dd000417 	ldw	r20,16(sp)
    7b40:	dcc00317 	ldw	r19,12(sp)
    7b44:	dc800217 	ldw	r18,8(sp)
    7b48:	dc400117 	ldw	r17,4(sp)
    7b4c:	dc000017 	ldw	r16,0(sp)
    7b50:	dec00604 	addi	sp,sp,24
    7b54:	f800283a 	ret
    7b58:	99400117 	ldw	r5,4(r19)
    7b5c:	a009883a 	mov	r4,r20
    7b60:	29400044 	addi	r5,r5,1
    7b64:	00073680 	call	7368 <_Balloc>
    7b68:	99800417 	ldw	r6,16(r19)
    7b6c:	99400304 	addi	r5,r19,12
    7b70:	11000304 	addi	r4,r2,12
    7b74:	318d883a 	add	r6,r6,r6
    7b78:	318d883a 	add	r6,r6,r6
    7b7c:	31800204 	addi	r6,r6,8
    7b80:	1023883a 	mov	r17,r2
    7b84:	000193c0 	call	193c <memcpy>
    7b88:	980b883a 	mov	r5,r19
    7b8c:	a009883a 	mov	r4,r20
    7b90:	0006de80 	call	6de8 <_Bfree>
    7b94:	8827883a 	mov	r19,r17
    7b98:	003fe006 	br	7b1c <__multadd+0x80>

00007b9c <__pow5mult>:
    7b9c:	defffa04 	addi	sp,sp,-24
    7ba0:	308000cc 	andi	r2,r6,3
    7ba4:	dd000415 	stw	r20,16(sp)
    7ba8:	dcc00315 	stw	r19,12(sp)
    7bac:	dc000015 	stw	r16,0(sp)
    7bb0:	dfc00515 	stw	ra,20(sp)
    7bb4:	dc800215 	stw	r18,8(sp)
    7bb8:	dc400115 	stw	r17,4(sp)
    7bbc:	3021883a 	mov	r16,r6
    7bc0:	2027883a 	mov	r19,r4
    7bc4:	2829883a 	mov	r20,r5
    7bc8:	10002b1e 	bne	r2,zero,7c78 <__pow5mult+0xdc>
    7bcc:	8025d0ba 	srai	r18,r16,2
    7bd0:	90001b26 	beq	r18,zero,7c40 <__pow5mult+0xa4>
    7bd4:	9c001217 	ldw	r16,72(r19)
    7bd8:	8000081e 	bne	r16,zero,7bfc <__pow5mult+0x60>
    7bdc:	00003006 	br	7ca0 <__pow5mult+0x104>
    7be0:	800b883a 	mov	r5,r16
    7be4:	800d883a 	mov	r6,r16
    7be8:	9809883a 	mov	r4,r19
    7bec:	90001426 	beq	r18,zero,7c40 <__pow5mult+0xa4>
    7bf0:	80800017 	ldw	r2,0(r16)
    7bf4:	10001b26 	beq	r2,zero,7c64 <__pow5mult+0xc8>
    7bf8:	1021883a 	mov	r16,r2
    7bfc:	9080004c 	andi	r2,r18,1
    7c00:	1005003a 	cmpeq	r2,r2,zero
    7c04:	9025d07a 	srai	r18,r18,1
    7c08:	800d883a 	mov	r6,r16
    7c0c:	9809883a 	mov	r4,r19
    7c10:	a00b883a 	mov	r5,r20
    7c14:	103ff21e 	bne	r2,zero,7be0 <__pow5mult+0x44>
    7c18:	00078780 	call	7878 <__multiply>
    7c1c:	a00b883a 	mov	r5,r20
    7c20:	9809883a 	mov	r4,r19
    7c24:	1023883a 	mov	r17,r2
    7c28:	0006de80 	call	6de8 <_Bfree>
    7c2c:	8829883a 	mov	r20,r17
    7c30:	800b883a 	mov	r5,r16
    7c34:	800d883a 	mov	r6,r16
    7c38:	9809883a 	mov	r4,r19
    7c3c:	903fec1e 	bne	r18,zero,7bf0 <__pow5mult+0x54>
    7c40:	a005883a 	mov	r2,r20
    7c44:	dfc00517 	ldw	ra,20(sp)
    7c48:	dd000417 	ldw	r20,16(sp)
    7c4c:	dcc00317 	ldw	r19,12(sp)
    7c50:	dc800217 	ldw	r18,8(sp)
    7c54:	dc400117 	ldw	r17,4(sp)
    7c58:	dc000017 	ldw	r16,0(sp)
    7c5c:	dec00604 	addi	sp,sp,24
    7c60:	f800283a 	ret
    7c64:	00078780 	call	7878 <__multiply>
    7c68:	80800015 	stw	r2,0(r16)
    7c6c:	1021883a 	mov	r16,r2
    7c70:	10000015 	stw	zero,0(r2)
    7c74:	003fe106 	br	7bfc <__pow5mult+0x60>
    7c78:	1085883a 	add	r2,r2,r2
    7c7c:	00c00074 	movhi	r3,1
    7c80:	18c88f04 	addi	r3,r3,8764
    7c84:	1085883a 	add	r2,r2,r2
    7c88:	10c5883a 	add	r2,r2,r3
    7c8c:	11bfff17 	ldw	r6,-4(r2)
    7c90:	000f883a 	mov	r7,zero
    7c94:	0007a9c0 	call	7a9c <__multadd>
    7c98:	1029883a 	mov	r20,r2
    7c9c:	003fcb06 	br	7bcc <__pow5mult+0x30>
    7ca0:	9809883a 	mov	r4,r19
    7ca4:	01409c44 	movi	r5,625
    7ca8:	0007a600 	call	7a60 <__i2b>
    7cac:	98801215 	stw	r2,72(r19)
    7cb0:	1021883a 	mov	r16,r2
    7cb4:	10000015 	stw	zero,0(r2)
    7cb8:	003fd006 	br	7bfc <__pow5mult+0x60>

00007cbc <__s2b>:
    7cbc:	defff904 	addi	sp,sp,-28
    7cc0:	dcc00315 	stw	r19,12(sp)
    7cc4:	dc800215 	stw	r18,8(sp)
    7cc8:	2827883a 	mov	r19,r5
    7ccc:	2025883a 	mov	r18,r4
    7cd0:	01400244 	movi	r5,9
    7cd4:	39000204 	addi	r4,r7,8
    7cd8:	dd000415 	stw	r20,16(sp)
    7cdc:	dc400115 	stw	r17,4(sp)
    7ce0:	dfc00615 	stw	ra,24(sp)
    7ce4:	dd400515 	stw	r21,20(sp)
    7ce8:	dc000015 	stw	r16,0(sp)
    7cec:	3829883a 	mov	r20,r7
    7cf0:	3023883a 	mov	r17,r6
    7cf4:	000ac2c0 	call	ac2c <__divsi3>
    7cf8:	00c00044 	movi	r3,1
    7cfc:	1880350e 	bge	r3,r2,7dd4 <__s2b+0x118>
    7d00:	000b883a 	mov	r5,zero
    7d04:	18c7883a 	add	r3,r3,r3
    7d08:	29400044 	addi	r5,r5,1
    7d0c:	18bffd16 	blt	r3,r2,7d04 <__s2b+0x48>
    7d10:	9009883a 	mov	r4,r18
    7d14:	00073680 	call	7368 <_Balloc>
    7d18:	1011883a 	mov	r8,r2
    7d1c:	d8800717 	ldw	r2,28(sp)
    7d20:	00c00044 	movi	r3,1
    7d24:	01800244 	movi	r6,9
    7d28:	40800515 	stw	r2,20(r8)
    7d2c:	40c00415 	stw	r3,16(r8)
    7d30:	3440260e 	bge	r6,r17,7dcc <__s2b+0x110>
    7d34:	3021883a 	mov	r16,r6
    7d38:	99ab883a 	add	r21,r19,r6
    7d3c:	9c05883a 	add	r2,r19,r16
    7d40:	11c00007 	ldb	r7,0(r2)
    7d44:	400b883a 	mov	r5,r8
    7d48:	9009883a 	mov	r4,r18
    7d4c:	39fff404 	addi	r7,r7,-48
    7d50:	01800284 	movi	r6,10
    7d54:	0007a9c0 	call	7a9c <__multadd>
    7d58:	84000044 	addi	r16,r16,1
    7d5c:	1011883a 	mov	r8,r2
    7d60:	8c3ff61e 	bne	r17,r16,7d3c <__s2b+0x80>
    7d64:	ac45883a 	add	r2,r21,r17
    7d68:	117ffe04 	addi	r5,r2,-8
    7d6c:	880d883a 	mov	r6,r17
    7d70:	35000c0e 	bge	r6,r20,7da4 <__s2b+0xe8>
    7d74:	a185c83a 	sub	r2,r20,r6
    7d78:	2821883a 	mov	r16,r5
    7d7c:	28a3883a 	add	r17,r5,r2
    7d80:	81c00007 	ldb	r7,0(r16)
    7d84:	400b883a 	mov	r5,r8
    7d88:	9009883a 	mov	r4,r18
    7d8c:	39fff404 	addi	r7,r7,-48
    7d90:	01800284 	movi	r6,10
    7d94:	0007a9c0 	call	7a9c <__multadd>
    7d98:	84000044 	addi	r16,r16,1
    7d9c:	1011883a 	mov	r8,r2
    7da0:	847ff71e 	bne	r16,r17,7d80 <__s2b+0xc4>
    7da4:	4005883a 	mov	r2,r8
    7da8:	dfc00617 	ldw	ra,24(sp)
    7dac:	dd400517 	ldw	r21,20(sp)
    7db0:	dd000417 	ldw	r20,16(sp)
    7db4:	dcc00317 	ldw	r19,12(sp)
    7db8:	dc800217 	ldw	r18,8(sp)
    7dbc:	dc400117 	ldw	r17,4(sp)
    7dc0:	dc000017 	ldw	r16,0(sp)
    7dc4:	dec00704 	addi	sp,sp,28
    7dc8:	f800283a 	ret
    7dcc:	99400284 	addi	r5,r19,10
    7dd0:	003fe706 	br	7d70 <__s2b+0xb4>
    7dd4:	000b883a 	mov	r5,zero
    7dd8:	003fcd06 	br	7d10 <__s2b+0x54>

00007ddc <putc>:
    7ddc:	defffc04 	addi	sp,sp,-16
    7de0:	dc800215 	stw	r18,8(sp)
    7de4:	04800074 	movhi	r18,1
    7de8:	94907804 	addi	r18,r18,16864
    7dec:	90c00017 	ldw	r3,0(r18)
    7df0:	dc400115 	stw	r17,4(sp)
    7df4:	dc000015 	stw	r16,0(sp)
    7df8:	dfc00315 	stw	ra,12(sp)
    7dfc:	2023883a 	mov	r17,r4
    7e00:	2821883a 	mov	r16,r5
    7e04:	18000226 	beq	r3,zero,7e10 <putc+0x34>
    7e08:	18800e17 	ldw	r2,56(r3)
    7e0c:	10001126 	beq	r2,zero,7e54 <putc+0x78>
    7e10:	80800217 	ldw	r2,8(r16)
    7e14:	10ffffc4 	addi	r3,r2,-1
    7e18:	80c00215 	stw	r3,8(r16)
    7e1c:	18001316 	blt	r3,zero,7e6c <putc+0x90>
    7e20:	80800017 	ldw	r2,0(r16)
    7e24:	14400005 	stb	r17,0(r2)
    7e28:	80c00017 	ldw	r3,0(r16)
    7e2c:	18800044 	addi	r2,r3,1
    7e30:	18c00003 	ldbu	r3,0(r3)
    7e34:	80800015 	stw	r2,0(r16)
    7e38:	1805883a 	mov	r2,r3
    7e3c:	dfc00317 	ldw	ra,12(sp)
    7e40:	dc800217 	ldw	r18,8(sp)
    7e44:	dc400117 	ldw	r17,4(sp)
    7e48:	dc000017 	ldw	r16,0(sp)
    7e4c:	dec00404 	addi	sp,sp,16
    7e50:	f800283a 	ret
    7e54:	1809883a 	mov	r4,r3
    7e58:	00055d80 	call	55d8 <__sinit>
    7e5c:	80800217 	ldw	r2,8(r16)
    7e60:	10ffffc4 	addi	r3,r2,-1
    7e64:	80c00215 	stw	r3,8(r16)
    7e68:	183fed0e 	bge	r3,zero,7e20 <putc+0x44>
    7e6c:	80800617 	ldw	r2,24(r16)
    7e70:	18800f16 	blt	r3,r2,7eb0 <putc+0xd4>
    7e74:	80800017 	ldw	r2,0(r16)
    7e78:	14400005 	stb	r17,0(r2)
    7e7c:	81000017 	ldw	r4,0(r16)
    7e80:	00800284 	movi	r2,10
    7e84:	20c00003 	ldbu	r3,0(r4)
    7e88:	18801226 	beq	r3,r2,7ed4 <putc+0xf8>
    7e8c:	20800044 	addi	r2,r4,1
    7e90:	80800015 	stw	r2,0(r16)
    7e94:	1805883a 	mov	r2,r3
    7e98:	dfc00317 	ldw	ra,12(sp)
    7e9c:	dc800217 	ldw	r18,8(sp)
    7ea0:	dc400117 	ldw	r17,4(sp)
    7ea4:	dc000017 	ldw	r16,0(sp)
    7ea8:	dec00404 	addi	sp,sp,16
    7eac:	f800283a 	ret
    7eb0:	91000017 	ldw	r4,0(r18)
    7eb4:	880b883a 	mov	r5,r17
    7eb8:	800d883a 	mov	r6,r16
    7ebc:	dfc00317 	ldw	ra,12(sp)
    7ec0:	dc800217 	ldw	r18,8(sp)
    7ec4:	dc400117 	ldw	r17,4(sp)
    7ec8:	dc000017 	ldw	r16,0(sp)
    7ecc:	dec00404 	addi	sp,sp,16
    7ed0:	00089181 	jmpi	8918 <__swbuf_r>
    7ed4:	91000017 	ldw	r4,0(r18)
    7ed8:	180b883a 	mov	r5,r3
    7edc:	003ff606 	br	7eb8 <putc+0xdc>

00007ee0 <_putc_r>:
    7ee0:	defffc04 	addi	sp,sp,-16
    7ee4:	dc400215 	stw	r17,8(sp)
    7ee8:	dc000115 	stw	r16,4(sp)
    7eec:	dfc00315 	stw	ra,12(sp)
    7ef0:	2021883a 	mov	r16,r4
    7ef4:	2823883a 	mov	r17,r5
    7ef8:	20000226 	beq	r4,zero,7f04 <_putc_r+0x24>
    7efc:	20800e17 	ldw	r2,56(r4)
    7f00:	10001026 	beq	r2,zero,7f44 <_putc_r+0x64>
    7f04:	30800217 	ldw	r2,8(r6)
    7f08:	10ffffc4 	addi	r3,r2,-1
    7f0c:	30c00215 	stw	r3,8(r6)
    7f10:	18001316 	blt	r3,zero,7f60 <_putc_r+0x80>
    7f14:	30800017 	ldw	r2,0(r6)
    7f18:	14400005 	stb	r17,0(r2)
    7f1c:	30c00017 	ldw	r3,0(r6)
    7f20:	18800044 	addi	r2,r3,1
    7f24:	18c00003 	ldbu	r3,0(r3)
    7f28:	30800015 	stw	r2,0(r6)
    7f2c:	1805883a 	mov	r2,r3
    7f30:	dfc00317 	ldw	ra,12(sp)
    7f34:	dc400217 	ldw	r17,8(sp)
    7f38:	dc000117 	ldw	r16,4(sp)
    7f3c:	dec00404 	addi	sp,sp,16
    7f40:	f800283a 	ret
    7f44:	d9800015 	stw	r6,0(sp)
    7f48:	00055d80 	call	55d8 <__sinit>
    7f4c:	d9800017 	ldw	r6,0(sp)
    7f50:	30800217 	ldw	r2,8(r6)
    7f54:	10ffffc4 	addi	r3,r2,-1
    7f58:	30c00215 	stw	r3,8(r6)
    7f5c:	183fed0e 	bge	r3,zero,7f14 <_putc_r+0x34>
    7f60:	30800617 	ldw	r2,24(r6)
    7f64:	18800e16 	blt	r3,r2,7fa0 <_putc_r+0xc0>
    7f68:	30800017 	ldw	r2,0(r6)
    7f6c:	14400005 	stb	r17,0(r2)
    7f70:	31000017 	ldw	r4,0(r6)
    7f74:	00800284 	movi	r2,10
    7f78:	20c00003 	ldbu	r3,0(r4)
    7f7c:	18800f26 	beq	r3,r2,7fbc <_putc_r+0xdc>
    7f80:	20800044 	addi	r2,r4,1
    7f84:	30800015 	stw	r2,0(r6)
    7f88:	1805883a 	mov	r2,r3
    7f8c:	dfc00317 	ldw	ra,12(sp)
    7f90:	dc400217 	ldw	r17,8(sp)
    7f94:	dc000117 	ldw	r16,4(sp)
    7f98:	dec00404 	addi	sp,sp,16
    7f9c:	f800283a 	ret
    7fa0:	8009883a 	mov	r4,r16
    7fa4:	880b883a 	mov	r5,r17
    7fa8:	dfc00317 	ldw	ra,12(sp)
    7fac:	dc400217 	ldw	r17,8(sp)
    7fb0:	dc000117 	ldw	r16,4(sp)
    7fb4:	dec00404 	addi	sp,sp,16
    7fb8:	00089181 	jmpi	8918 <__swbuf_r>
    7fbc:	8009883a 	mov	r4,r16
    7fc0:	180b883a 	mov	r5,r3
    7fc4:	003ff806 	br	7fa8 <_putc_r+0xc8>

00007fc8 <_realloc_r>:
    7fc8:	defff404 	addi	sp,sp,-48
    7fcc:	dd800815 	stw	r22,32(sp)
    7fd0:	dc800415 	stw	r18,16(sp)
    7fd4:	dc400315 	stw	r17,12(sp)
    7fd8:	dfc00b15 	stw	ra,44(sp)
    7fdc:	df000a15 	stw	fp,40(sp)
    7fe0:	ddc00915 	stw	r23,36(sp)
    7fe4:	dd400715 	stw	r21,28(sp)
    7fe8:	dd000615 	stw	r20,24(sp)
    7fec:	dcc00515 	stw	r19,20(sp)
    7ff0:	dc000215 	stw	r16,8(sp)
    7ff4:	2825883a 	mov	r18,r5
    7ff8:	3023883a 	mov	r17,r6
    7ffc:	202d883a 	mov	r22,r4
    8000:	2800c926 	beq	r5,zero,8328 <_realloc_r+0x360>
    8004:	000baec0 	call	baec <__malloc_lock>
    8008:	943ffe04 	addi	r16,r18,-8
    800c:	88c002c4 	addi	r3,r17,11
    8010:	00800584 	movi	r2,22
    8014:	82000117 	ldw	r8,4(r16)
    8018:	10c01b2e 	bgeu	r2,r3,8088 <_realloc_r+0xc0>
    801c:	00bffe04 	movi	r2,-8
    8020:	188e703a 	and	r7,r3,r2
    8024:	3839883a 	mov	fp,r7
    8028:	38001a16 	blt	r7,zero,8094 <_realloc_r+0xcc>
    802c:	e4401936 	bltu	fp,r17,8094 <_realloc_r+0xcc>
    8030:	013fff04 	movi	r4,-4
    8034:	4126703a 	and	r19,r8,r4
    8038:	99c02616 	blt	r19,r7,80d4 <_realloc_r+0x10c>
    803c:	802b883a 	mov	r21,r16
    8040:	9829883a 	mov	r20,r19
    8044:	84000204 	addi	r16,r16,8
    8048:	a80f883a 	mov	r7,r21
    804c:	a70dc83a 	sub	r6,r20,fp
    8050:	008003c4 	movi	r2,15
    8054:	1180c136 	bltu	r2,r6,835c <_realloc_r+0x394>
    8058:	38800117 	ldw	r2,4(r7)
    805c:	a549883a 	add	r4,r20,r21
    8060:	1080004c 	andi	r2,r2,1
    8064:	a084b03a 	or	r2,r20,r2
    8068:	38800115 	stw	r2,4(r7)
    806c:	20c00117 	ldw	r3,4(r4)
    8070:	18c00054 	ori	r3,r3,1
    8074:	20c00115 	stw	r3,4(r4)
    8078:	b009883a 	mov	r4,r22
    807c:	000bb0c0 	call	bb0c <__malloc_unlock>
    8080:	8023883a 	mov	r17,r16
    8084:	00000606 	br	80a0 <_realloc_r+0xd8>
    8088:	01c00404 	movi	r7,16
    808c:	3839883a 	mov	fp,r7
    8090:	e47fe72e 	bgeu	fp,r17,8030 <_realloc_r+0x68>
    8094:	00800304 	movi	r2,12
    8098:	0023883a 	mov	r17,zero
    809c:	b0800015 	stw	r2,0(r22)
    80a0:	8805883a 	mov	r2,r17
    80a4:	dfc00b17 	ldw	ra,44(sp)
    80a8:	df000a17 	ldw	fp,40(sp)
    80ac:	ddc00917 	ldw	r23,36(sp)
    80b0:	dd800817 	ldw	r22,32(sp)
    80b4:	dd400717 	ldw	r21,28(sp)
    80b8:	dd000617 	ldw	r20,24(sp)
    80bc:	dcc00517 	ldw	r19,20(sp)
    80c0:	dc800417 	ldw	r18,16(sp)
    80c4:	dc400317 	ldw	r17,12(sp)
    80c8:	dc000217 	ldw	r16,8(sp)
    80cc:	dec00c04 	addi	sp,sp,48
    80d0:	f800283a 	ret
    80d4:	00800074 	movhi	r2,1
    80d8:	108a0704 	addi	r2,r2,10268
    80dc:	12400217 	ldw	r9,8(r2)
    80e0:	84cd883a 	add	r6,r16,r19
    80e4:	802b883a 	mov	r21,r16
    80e8:	3240b926 	beq	r6,r9,83d0 <_realloc_r+0x408>
    80ec:	31400117 	ldw	r5,4(r6)
    80f0:	00bfff84 	movi	r2,-2
    80f4:	2884703a 	and	r2,r5,r2
    80f8:	1185883a 	add	r2,r2,r6
    80fc:	10c00117 	ldw	r3,4(r2)
    8100:	18c0004c 	andi	r3,r3,1
    8104:	1807003a 	cmpeq	r3,r3,zero
    8108:	1800a326 	beq	r3,zero,8398 <_realloc_r+0x3d0>
    810c:	2908703a 	and	r4,r5,r4
    8110:	9929883a 	add	r20,r19,r4
    8114:	a1c0a30e 	bge	r20,r7,83a4 <_realloc_r+0x3dc>
    8118:	4080004c 	andi	r2,r8,1
    811c:	1000551e 	bne	r2,zero,8274 <_realloc_r+0x2ac>
    8120:	80800017 	ldw	r2,0(r16)
    8124:	80afc83a 	sub	r23,r16,r2
    8128:	b8c00117 	ldw	r3,4(r23)
    812c:	00bfff04 	movi	r2,-4
    8130:	1884703a 	and	r2,r3,r2
    8134:	30002e26 	beq	r6,zero,81f0 <_realloc_r+0x228>
    8138:	3240b926 	beq	r6,r9,8420 <_realloc_r+0x458>
    813c:	98a9883a 	add	r20,r19,r2
    8140:	2509883a 	add	r4,r4,r20
    8144:	d9000015 	stw	r4,0(sp)
    8148:	21c02a16 	blt	r4,r7,81f4 <_realloc_r+0x22c>
    814c:	30800317 	ldw	r2,12(r6)
    8150:	30c00217 	ldw	r3,8(r6)
    8154:	01400904 	movi	r5,36
    8158:	99bfff04 	addi	r6,r19,-4
    815c:	18800315 	stw	r2,12(r3)
    8160:	10c00215 	stw	r3,8(r2)
    8164:	b9000317 	ldw	r4,12(r23)
    8168:	b8800217 	ldw	r2,8(r23)
    816c:	b82b883a 	mov	r21,r23
    8170:	bc000204 	addi	r16,r23,8
    8174:	20800215 	stw	r2,8(r4)
    8178:	11000315 	stw	r4,12(r2)
    817c:	2980e436 	bltu	r5,r6,8510 <_realloc_r+0x548>
    8180:	008004c4 	movi	r2,19
    8184:	9009883a 	mov	r4,r18
    8188:	8011883a 	mov	r8,r16
    818c:	11800f2e 	bgeu	r2,r6,81cc <_realloc_r+0x204>
    8190:	90800017 	ldw	r2,0(r18)
    8194:	ba000404 	addi	r8,r23,16
    8198:	91000204 	addi	r4,r18,8
    819c:	b8800215 	stw	r2,8(r23)
    81a0:	90c00117 	ldw	r3,4(r18)
    81a4:	008006c4 	movi	r2,27
    81a8:	b8c00315 	stw	r3,12(r23)
    81ac:	1180072e 	bgeu	r2,r6,81cc <_realloc_r+0x204>
    81b0:	90c00217 	ldw	r3,8(r18)
    81b4:	ba000604 	addi	r8,r23,24
    81b8:	91000404 	addi	r4,r18,16
    81bc:	b8c00415 	stw	r3,16(r23)
    81c0:	90800317 	ldw	r2,12(r18)
    81c4:	b8800515 	stw	r2,20(r23)
    81c8:	3140e726 	beq	r6,r5,8568 <_realloc_r+0x5a0>
    81cc:	20800017 	ldw	r2,0(r4)
    81d0:	dd000017 	ldw	r20,0(sp)
    81d4:	b80f883a 	mov	r7,r23
    81d8:	40800015 	stw	r2,0(r8)
    81dc:	20c00117 	ldw	r3,4(r4)
    81e0:	40c00115 	stw	r3,4(r8)
    81e4:	20800217 	ldw	r2,8(r4)
    81e8:	40800215 	stw	r2,8(r8)
    81ec:	003f9706 	br	804c <_realloc_r+0x84>
    81f0:	98a9883a 	add	r20,r19,r2
    81f4:	a1c01f16 	blt	r20,r7,8274 <_realloc_r+0x2ac>
    81f8:	b8c00317 	ldw	r3,12(r23)
    81fc:	b8800217 	ldw	r2,8(r23)
    8200:	99bfff04 	addi	r6,r19,-4
    8204:	01400904 	movi	r5,36
    8208:	b82b883a 	mov	r21,r23
    820c:	18800215 	stw	r2,8(r3)
    8210:	10c00315 	stw	r3,12(r2)
    8214:	bc000204 	addi	r16,r23,8
    8218:	2980c336 	bltu	r5,r6,8528 <_realloc_r+0x560>
    821c:	008004c4 	movi	r2,19
    8220:	9009883a 	mov	r4,r18
    8224:	8011883a 	mov	r8,r16
    8228:	11800f2e 	bgeu	r2,r6,8268 <_realloc_r+0x2a0>
    822c:	90800017 	ldw	r2,0(r18)
    8230:	ba000404 	addi	r8,r23,16
    8234:	91000204 	addi	r4,r18,8
    8238:	b8800215 	stw	r2,8(r23)
    823c:	90c00117 	ldw	r3,4(r18)
    8240:	008006c4 	movi	r2,27
    8244:	b8c00315 	stw	r3,12(r23)
    8248:	1180072e 	bgeu	r2,r6,8268 <_realloc_r+0x2a0>
    824c:	90c00217 	ldw	r3,8(r18)
    8250:	ba000604 	addi	r8,r23,24
    8254:	91000404 	addi	r4,r18,16
    8258:	b8c00415 	stw	r3,16(r23)
    825c:	90800317 	ldw	r2,12(r18)
    8260:	b8800515 	stw	r2,20(r23)
    8264:	3140c726 	beq	r6,r5,8584 <_realloc_r+0x5bc>
    8268:	20800017 	ldw	r2,0(r4)
    826c:	b80f883a 	mov	r7,r23
    8270:	003fd906 	br	81d8 <_realloc_r+0x210>
    8274:	880b883a 	mov	r5,r17
    8278:	b009883a 	mov	r4,r22
    827c:	00064e40 	call	64e4 <_malloc_r>
    8280:	1023883a 	mov	r17,r2
    8284:	10002526 	beq	r2,zero,831c <_realloc_r+0x354>
    8288:	80800117 	ldw	r2,4(r16)
    828c:	00ffff84 	movi	r3,-2
    8290:	893ffe04 	addi	r4,r17,-8
    8294:	10c4703a 	and	r2,r2,r3
    8298:	8085883a 	add	r2,r16,r2
    829c:	20809526 	beq	r4,r2,84f4 <_realloc_r+0x52c>
    82a0:	99bfff04 	addi	r6,r19,-4
    82a4:	01c00904 	movi	r7,36
    82a8:	39804536 	bltu	r7,r6,83c0 <_realloc_r+0x3f8>
    82ac:	008004c4 	movi	r2,19
    82b0:	9009883a 	mov	r4,r18
    82b4:	880b883a 	mov	r5,r17
    82b8:	11800f2e 	bgeu	r2,r6,82f8 <_realloc_r+0x330>
    82bc:	90800017 	ldw	r2,0(r18)
    82c0:	89400204 	addi	r5,r17,8
    82c4:	91000204 	addi	r4,r18,8
    82c8:	88800015 	stw	r2,0(r17)
    82cc:	90c00117 	ldw	r3,4(r18)
    82d0:	008006c4 	movi	r2,27
    82d4:	88c00115 	stw	r3,4(r17)
    82d8:	1180072e 	bgeu	r2,r6,82f8 <_realloc_r+0x330>
    82dc:	90c00217 	ldw	r3,8(r18)
    82e0:	89400404 	addi	r5,r17,16
    82e4:	91000404 	addi	r4,r18,16
    82e8:	88c00215 	stw	r3,8(r17)
    82ec:	90800317 	ldw	r2,12(r18)
    82f0:	88800315 	stw	r2,12(r17)
    82f4:	31c09126 	beq	r6,r7,853c <_realloc_r+0x574>
    82f8:	20800017 	ldw	r2,0(r4)
    82fc:	28800015 	stw	r2,0(r5)
    8300:	20c00117 	ldw	r3,4(r4)
    8304:	28c00115 	stw	r3,4(r5)
    8308:	20800217 	ldw	r2,8(r4)
    830c:	28800215 	stw	r2,8(r5)
    8310:	900b883a 	mov	r5,r18
    8314:	b009883a 	mov	r4,r22
    8318:	000595c0 	call	595c <_free_r>
    831c:	b009883a 	mov	r4,r22
    8320:	000bb0c0 	call	bb0c <__malloc_unlock>
    8324:	003f5e06 	br	80a0 <_realloc_r+0xd8>
    8328:	300b883a 	mov	r5,r6
    832c:	dfc00b17 	ldw	ra,44(sp)
    8330:	df000a17 	ldw	fp,40(sp)
    8334:	ddc00917 	ldw	r23,36(sp)
    8338:	dd800817 	ldw	r22,32(sp)
    833c:	dd400717 	ldw	r21,28(sp)
    8340:	dd000617 	ldw	r20,24(sp)
    8344:	dcc00517 	ldw	r19,20(sp)
    8348:	dc800417 	ldw	r18,16(sp)
    834c:	dc400317 	ldw	r17,12(sp)
    8350:	dc000217 	ldw	r16,8(sp)
    8354:	dec00c04 	addi	sp,sp,48
    8358:	00064e41 	jmpi	64e4 <_malloc_r>
    835c:	38800117 	ldw	r2,4(r7)
    8360:	e54b883a 	add	r5,fp,r21
    8364:	31000054 	ori	r4,r6,1
    8368:	1080004c 	andi	r2,r2,1
    836c:	1704b03a 	or	r2,r2,fp
    8370:	38800115 	stw	r2,4(r7)
    8374:	29000115 	stw	r4,4(r5)
    8378:	2987883a 	add	r3,r5,r6
    837c:	18800117 	ldw	r2,4(r3)
    8380:	29400204 	addi	r5,r5,8
    8384:	b009883a 	mov	r4,r22
    8388:	10800054 	ori	r2,r2,1
    838c:	18800115 	stw	r2,4(r3)
    8390:	000595c0 	call	595c <_free_r>
    8394:	003f3806 	br	8078 <_realloc_r+0xb0>
    8398:	000d883a 	mov	r6,zero
    839c:	0009883a 	mov	r4,zero
    83a0:	003f5d06 	br	8118 <_realloc_r+0x150>
    83a4:	30c00217 	ldw	r3,8(r6)
    83a8:	30800317 	ldw	r2,12(r6)
    83ac:	800f883a 	mov	r7,r16
    83b0:	84000204 	addi	r16,r16,8
    83b4:	10c00215 	stw	r3,8(r2)
    83b8:	18800315 	stw	r2,12(r3)
    83bc:	003f2306 	br	804c <_realloc_r+0x84>
    83c0:	8809883a 	mov	r4,r17
    83c4:	900b883a 	mov	r5,r18
    83c8:	0006d080 	call	6d08 <memmove>
    83cc:	003fd006 	br	8310 <_realloc_r+0x348>
    83d0:	30800117 	ldw	r2,4(r6)
    83d4:	e0c00404 	addi	r3,fp,16
    83d8:	1108703a 	and	r4,r2,r4
    83dc:	9905883a 	add	r2,r19,r4
    83e0:	10ff4d16 	blt	r2,r3,8118 <_realloc_r+0x150>
    83e4:	1705c83a 	sub	r2,r2,fp
    83e8:	870b883a 	add	r5,r16,fp
    83ec:	10800054 	ori	r2,r2,1
    83f0:	28800115 	stw	r2,4(r5)
    83f4:	80c00117 	ldw	r3,4(r16)
    83f8:	00800074 	movhi	r2,1
    83fc:	108a0704 	addi	r2,r2,10268
    8400:	b009883a 	mov	r4,r22
    8404:	18c0004c 	andi	r3,r3,1
    8408:	e0c6b03a 	or	r3,fp,r3
    840c:	11400215 	stw	r5,8(r2)
    8410:	80c00115 	stw	r3,4(r16)
    8414:	000bb0c0 	call	bb0c <__malloc_unlock>
    8418:	84400204 	addi	r17,r16,8
    841c:	003f2006 	br	80a0 <_realloc_r+0xd8>
    8420:	98a9883a 	add	r20,r19,r2
    8424:	2509883a 	add	r4,r4,r20
    8428:	e0800404 	addi	r2,fp,16
    842c:	d9000115 	stw	r4,4(sp)
    8430:	20bf7016 	blt	r4,r2,81f4 <_realloc_r+0x22c>
    8434:	b8c00317 	ldw	r3,12(r23)
    8438:	b8800217 	ldw	r2,8(r23)
    843c:	99bfff04 	addi	r6,r19,-4
    8440:	01400904 	movi	r5,36
    8444:	18800215 	stw	r2,8(r3)
    8448:	10c00315 	stw	r3,12(r2)
    844c:	bc400204 	addi	r17,r23,8
    8450:	29804136 	bltu	r5,r6,8558 <_realloc_r+0x590>
    8454:	008004c4 	movi	r2,19
    8458:	9009883a 	mov	r4,r18
    845c:	880f883a 	mov	r7,r17
    8460:	11800f2e 	bgeu	r2,r6,84a0 <_realloc_r+0x4d8>
    8464:	90800017 	ldw	r2,0(r18)
    8468:	b9c00404 	addi	r7,r23,16
    846c:	91000204 	addi	r4,r18,8
    8470:	b8800215 	stw	r2,8(r23)
    8474:	90c00117 	ldw	r3,4(r18)
    8478:	008006c4 	movi	r2,27
    847c:	b8c00315 	stw	r3,12(r23)
    8480:	1180072e 	bgeu	r2,r6,84a0 <_realloc_r+0x4d8>
    8484:	90c00217 	ldw	r3,8(r18)
    8488:	b9c00604 	addi	r7,r23,24
    848c:	91000404 	addi	r4,r18,16
    8490:	b8c00415 	stw	r3,16(r23)
    8494:	90800317 	ldw	r2,12(r18)
    8498:	b8800515 	stw	r2,20(r23)
    849c:	31404026 	beq	r6,r5,85a0 <_realloc_r+0x5d8>
    84a0:	20800017 	ldw	r2,0(r4)
    84a4:	38800015 	stw	r2,0(r7)
    84a8:	20c00117 	ldw	r3,4(r4)
    84ac:	38c00115 	stw	r3,4(r7)
    84b0:	20800217 	ldw	r2,8(r4)
    84b4:	38800215 	stw	r2,8(r7)
    84b8:	d8c00117 	ldw	r3,4(sp)
    84bc:	bf0b883a 	add	r5,r23,fp
    84c0:	b009883a 	mov	r4,r22
    84c4:	1f05c83a 	sub	r2,r3,fp
    84c8:	10800054 	ori	r2,r2,1
    84cc:	28800115 	stw	r2,4(r5)
    84d0:	b8c00117 	ldw	r3,4(r23)
    84d4:	00800074 	movhi	r2,1
    84d8:	108a0704 	addi	r2,r2,10268
    84dc:	11400215 	stw	r5,8(r2)
    84e0:	18c0004c 	andi	r3,r3,1
    84e4:	e0c6b03a 	or	r3,fp,r3
    84e8:	b8c00115 	stw	r3,4(r23)
    84ec:	000bb0c0 	call	bb0c <__malloc_unlock>
    84f0:	003eeb06 	br	80a0 <_realloc_r+0xd8>
    84f4:	20800117 	ldw	r2,4(r4)
    84f8:	00ffff04 	movi	r3,-4
    84fc:	800f883a 	mov	r7,r16
    8500:	10c4703a 	and	r2,r2,r3
    8504:	98a9883a 	add	r20,r19,r2
    8508:	84000204 	addi	r16,r16,8
    850c:	003ecf06 	br	804c <_realloc_r+0x84>
    8510:	900b883a 	mov	r5,r18
    8514:	8009883a 	mov	r4,r16
    8518:	0006d080 	call	6d08 <memmove>
    851c:	dd000017 	ldw	r20,0(sp)
    8520:	b80f883a 	mov	r7,r23
    8524:	003ec906 	br	804c <_realloc_r+0x84>
    8528:	900b883a 	mov	r5,r18
    852c:	8009883a 	mov	r4,r16
    8530:	0006d080 	call	6d08 <memmove>
    8534:	b80f883a 	mov	r7,r23
    8538:	003ec406 	br	804c <_realloc_r+0x84>
    853c:	90c00417 	ldw	r3,16(r18)
    8540:	89400604 	addi	r5,r17,24
    8544:	91000604 	addi	r4,r18,24
    8548:	88c00415 	stw	r3,16(r17)
    854c:	90800517 	ldw	r2,20(r18)
    8550:	88800515 	stw	r2,20(r17)
    8554:	003f6806 	br	82f8 <_realloc_r+0x330>
    8558:	900b883a 	mov	r5,r18
    855c:	8809883a 	mov	r4,r17
    8560:	0006d080 	call	6d08 <memmove>
    8564:	003fd406 	br	84b8 <_realloc_r+0x4f0>
    8568:	90c00417 	ldw	r3,16(r18)
    856c:	91000604 	addi	r4,r18,24
    8570:	ba000804 	addi	r8,r23,32
    8574:	b8c00615 	stw	r3,24(r23)
    8578:	90800517 	ldw	r2,20(r18)
    857c:	b8800715 	stw	r2,28(r23)
    8580:	003f1206 	br	81cc <_realloc_r+0x204>
    8584:	90c00417 	ldw	r3,16(r18)
    8588:	91000604 	addi	r4,r18,24
    858c:	ba000804 	addi	r8,r23,32
    8590:	b8c00615 	stw	r3,24(r23)
    8594:	90800517 	ldw	r2,20(r18)
    8598:	b8800715 	stw	r2,28(r23)
    859c:	003f3206 	br	8268 <_realloc_r+0x2a0>
    85a0:	90c00417 	ldw	r3,16(r18)
    85a4:	91000604 	addi	r4,r18,24
    85a8:	b9c00804 	addi	r7,r23,32
    85ac:	b8c00615 	stw	r3,24(r23)
    85b0:	90800517 	ldw	r2,20(r18)
    85b4:	b8800715 	stw	r2,28(r23)
    85b8:	003fb906 	br	84a0 <_realloc_r+0x4d8>

000085bc <__isinfd>:
    85bc:	200d883a 	mov	r6,r4
    85c0:	0109c83a 	sub	r4,zero,r4
    85c4:	2188b03a 	or	r4,r4,r6
    85c8:	2008d7fa 	srli	r4,r4,31
    85cc:	00a00034 	movhi	r2,32768
    85d0:	10bfffc4 	addi	r2,r2,-1
    85d4:	1144703a 	and	r2,r2,r5
    85d8:	2088b03a 	or	r4,r4,r2
    85dc:	009ffc34 	movhi	r2,32752
    85e0:	1105c83a 	sub	r2,r2,r4
    85e4:	0087c83a 	sub	r3,zero,r2
    85e8:	10c4b03a 	or	r2,r2,r3
    85ec:	1004d7fa 	srli	r2,r2,31
    85f0:	00c00044 	movi	r3,1
    85f4:	1885c83a 	sub	r2,r3,r2
    85f8:	f800283a 	ret

000085fc <__isnand>:
    85fc:	200d883a 	mov	r6,r4
    8600:	0109c83a 	sub	r4,zero,r4
    8604:	2188b03a 	or	r4,r4,r6
    8608:	2008d7fa 	srli	r4,r4,31
    860c:	00a00034 	movhi	r2,32768
    8610:	10bfffc4 	addi	r2,r2,-1
    8614:	1144703a 	and	r2,r2,r5
    8618:	2088b03a 	or	r4,r4,r2
    861c:	009ffc34 	movhi	r2,32752
    8620:	1105c83a 	sub	r2,r2,r4
    8624:	1004d7fa 	srli	r2,r2,31
    8628:	f800283a 	ret

0000862c <_sbrk_r>:
    862c:	defffd04 	addi	sp,sp,-12
    8630:	dc000015 	stw	r16,0(sp)
    8634:	04000074 	movhi	r16,1
    8638:	84181704 	addi	r16,r16,24668
    863c:	dc400115 	stw	r17,4(sp)
    8640:	80000015 	stw	zero,0(r16)
    8644:	2023883a 	mov	r17,r4
    8648:	2809883a 	mov	r4,r5
    864c:	dfc00215 	stw	ra,8(sp)
    8650:	000bfa40 	call	bfa4 <sbrk>
    8654:	1007883a 	mov	r3,r2
    8658:	00bfffc4 	movi	r2,-1
    865c:	18800626 	beq	r3,r2,8678 <_sbrk_r+0x4c>
    8660:	1805883a 	mov	r2,r3
    8664:	dfc00217 	ldw	ra,8(sp)
    8668:	dc400117 	ldw	r17,4(sp)
    866c:	dc000017 	ldw	r16,0(sp)
    8670:	dec00304 	addi	sp,sp,12
    8674:	f800283a 	ret
    8678:	80800017 	ldw	r2,0(r16)
    867c:	103ff826 	beq	r2,zero,8660 <_sbrk_r+0x34>
    8680:	88800015 	stw	r2,0(r17)
    8684:	1805883a 	mov	r2,r3
    8688:	dfc00217 	ldw	ra,8(sp)
    868c:	dc400117 	ldw	r17,4(sp)
    8690:	dc000017 	ldw	r16,0(sp)
    8694:	dec00304 	addi	sp,sp,12
    8698:	f800283a 	ret

0000869c <__sclose>:
    869c:	2940038f 	ldh	r5,14(r5)
    86a0:	0008b901 	jmpi	8b90 <_close_r>

000086a4 <__sseek>:
    86a4:	defffe04 	addi	sp,sp,-8
    86a8:	dc000015 	stw	r16,0(sp)
    86ac:	2821883a 	mov	r16,r5
    86b0:	2940038f 	ldh	r5,14(r5)
    86b4:	dfc00115 	stw	ra,4(sp)
    86b8:	0008e080 	call	8e08 <_lseek_r>
    86bc:	1007883a 	mov	r3,r2
    86c0:	00bfffc4 	movi	r2,-1
    86c4:	18800926 	beq	r3,r2,86ec <__sseek+0x48>
    86c8:	8080030b 	ldhu	r2,12(r16)
    86cc:	80c01415 	stw	r3,80(r16)
    86d0:	10840014 	ori	r2,r2,4096
    86d4:	8080030d 	sth	r2,12(r16)
    86d8:	1805883a 	mov	r2,r3
    86dc:	dfc00117 	ldw	ra,4(sp)
    86e0:	dc000017 	ldw	r16,0(sp)
    86e4:	dec00204 	addi	sp,sp,8
    86e8:	f800283a 	ret
    86ec:	8080030b 	ldhu	r2,12(r16)
    86f0:	10bbffcc 	andi	r2,r2,61439
    86f4:	8080030d 	sth	r2,12(r16)
    86f8:	1805883a 	mov	r2,r3
    86fc:	dfc00117 	ldw	ra,4(sp)
    8700:	dc000017 	ldw	r16,0(sp)
    8704:	dec00204 	addi	sp,sp,8
    8708:	f800283a 	ret

0000870c <__swrite>:
    870c:	2880030b 	ldhu	r2,12(r5)
    8710:	defffb04 	addi	sp,sp,-20
    8714:	dcc00315 	stw	r19,12(sp)
    8718:	1080400c 	andi	r2,r2,256
    871c:	dc800215 	stw	r18,8(sp)
    8720:	dc400115 	stw	r17,4(sp)
    8724:	dc000015 	stw	r16,0(sp)
    8728:	3027883a 	mov	r19,r6
    872c:	3825883a 	mov	r18,r7
    8730:	dfc00415 	stw	ra,16(sp)
    8734:	2821883a 	mov	r16,r5
    8738:	000d883a 	mov	r6,zero
    873c:	01c00084 	movi	r7,2
    8740:	2023883a 	mov	r17,r4
    8744:	10000226 	beq	r2,zero,8750 <__swrite+0x44>
    8748:	2940038f 	ldh	r5,14(r5)
    874c:	0008e080 	call	8e08 <_lseek_r>
    8750:	8080030b 	ldhu	r2,12(r16)
    8754:	8140038f 	ldh	r5,14(r16)
    8758:	8809883a 	mov	r4,r17
    875c:	10bbffcc 	andi	r2,r2,61439
    8760:	980d883a 	mov	r6,r19
    8764:	900f883a 	mov	r7,r18
    8768:	8080030d 	sth	r2,12(r16)
    876c:	dfc00417 	ldw	ra,16(sp)
    8770:	dcc00317 	ldw	r19,12(sp)
    8774:	dc800217 	ldw	r18,8(sp)
    8778:	dc400117 	ldw	r17,4(sp)
    877c:	dc000017 	ldw	r16,0(sp)
    8780:	dec00504 	addi	sp,sp,20
    8784:	0008a641 	jmpi	8a64 <_write_r>

00008788 <__sread>:
    8788:	defffe04 	addi	sp,sp,-8
    878c:	dc000015 	stw	r16,0(sp)
    8790:	2821883a 	mov	r16,r5
    8794:	2940038f 	ldh	r5,14(r5)
    8798:	dfc00115 	stw	ra,4(sp)
    879c:	0008e800 	call	8e80 <_read_r>
    87a0:	1007883a 	mov	r3,r2
    87a4:	10000816 	blt	r2,zero,87c8 <__sread+0x40>
    87a8:	80801417 	ldw	r2,80(r16)
    87ac:	10c5883a 	add	r2,r2,r3
    87b0:	80801415 	stw	r2,80(r16)
    87b4:	1805883a 	mov	r2,r3
    87b8:	dfc00117 	ldw	ra,4(sp)
    87bc:	dc000017 	ldw	r16,0(sp)
    87c0:	dec00204 	addi	sp,sp,8
    87c4:	f800283a 	ret
    87c8:	8080030b 	ldhu	r2,12(r16)
    87cc:	10bbffcc 	andi	r2,r2,61439
    87d0:	8080030d 	sth	r2,12(r16)
    87d4:	1805883a 	mov	r2,r3
    87d8:	dfc00117 	ldw	ra,4(sp)
    87dc:	dc000017 	ldw	r16,0(sp)
    87e0:	dec00204 	addi	sp,sp,8
    87e4:	f800283a 	ret

000087e8 <strcmp>:
    87e8:	2144b03a 	or	r2,r4,r5
    87ec:	108000cc 	andi	r2,r2,3
    87f0:	10001d1e 	bne	r2,zero,8868 <strcmp+0x80>
    87f4:	200f883a 	mov	r7,r4
    87f8:	28800017 	ldw	r2,0(r5)
    87fc:	21000017 	ldw	r4,0(r4)
    8800:	280d883a 	mov	r6,r5
    8804:	2080161e 	bne	r4,r2,8860 <strcmp+0x78>
    8808:	023fbff4 	movhi	r8,65279
    880c:	423fbfc4 	addi	r8,r8,-257
    8810:	2207883a 	add	r3,r4,r8
    8814:	01602074 	movhi	r5,32897
    8818:	29602004 	addi	r5,r5,-32640
    881c:	1946703a 	and	r3,r3,r5
    8820:	0104303a 	nor	r2,zero,r4
    8824:	10c4703a 	and	r2,r2,r3
    8828:	10001c1e 	bne	r2,zero,889c <strcmp+0xb4>
    882c:	4013883a 	mov	r9,r8
    8830:	2811883a 	mov	r8,r5
    8834:	00000106 	br	883c <strcmp+0x54>
    8838:	1800181e 	bne	r3,zero,889c <strcmp+0xb4>
    883c:	39c00104 	addi	r7,r7,4
    8840:	39000017 	ldw	r4,0(r7)
    8844:	31800104 	addi	r6,r6,4
    8848:	31400017 	ldw	r5,0(r6)
    884c:	2245883a 	add	r2,r4,r9
    8850:	1204703a 	and	r2,r2,r8
    8854:	0106303a 	nor	r3,zero,r4
    8858:	1886703a 	and	r3,r3,r2
    885c:	217ff626 	beq	r4,r5,8838 <strcmp+0x50>
    8860:	3809883a 	mov	r4,r7
    8864:	300b883a 	mov	r5,r6
    8868:	20c00007 	ldb	r3,0(r4)
    886c:	1800051e 	bne	r3,zero,8884 <strcmp+0x9c>
    8870:	00000606 	br	888c <strcmp+0xa4>
    8874:	21000044 	addi	r4,r4,1
    8878:	20c00007 	ldb	r3,0(r4)
    887c:	29400044 	addi	r5,r5,1
    8880:	18000226 	beq	r3,zero,888c <strcmp+0xa4>
    8884:	28800007 	ldb	r2,0(r5)
    8888:	18bffa26 	beq	r3,r2,8874 <strcmp+0x8c>
    888c:	20c00003 	ldbu	r3,0(r4)
    8890:	28800003 	ldbu	r2,0(r5)
    8894:	1885c83a 	sub	r2,r3,r2
    8898:	f800283a 	ret
    889c:	0005883a 	mov	r2,zero
    88a0:	f800283a 	ret

000088a4 <strlen>:
    88a4:	208000cc 	andi	r2,r4,3
    88a8:	2011883a 	mov	r8,r4
    88ac:	1000161e 	bne	r2,zero,8908 <strlen+0x64>
    88b0:	20c00017 	ldw	r3,0(r4)
    88b4:	017fbff4 	movhi	r5,65279
    88b8:	297fbfc4 	addi	r5,r5,-257
    88bc:	01e02074 	movhi	r7,32897
    88c0:	39e02004 	addi	r7,r7,-32640
    88c4:	1945883a 	add	r2,r3,r5
    88c8:	11c4703a 	and	r2,r2,r7
    88cc:	00c6303a 	nor	r3,zero,r3
    88d0:	1886703a 	and	r3,r3,r2
    88d4:	18000c1e 	bne	r3,zero,8908 <strlen+0x64>
    88d8:	280d883a 	mov	r6,r5
    88dc:	380b883a 	mov	r5,r7
    88e0:	21000104 	addi	r4,r4,4
    88e4:	20800017 	ldw	r2,0(r4)
    88e8:	1187883a 	add	r3,r2,r6
    88ec:	1946703a 	and	r3,r3,r5
    88f0:	0084303a 	nor	r2,zero,r2
    88f4:	10c4703a 	and	r2,r2,r3
    88f8:	103ff926 	beq	r2,zero,88e0 <strlen+0x3c>
    88fc:	20800007 	ldb	r2,0(r4)
    8900:	10000326 	beq	r2,zero,8910 <strlen+0x6c>
    8904:	21000044 	addi	r4,r4,1
    8908:	20800007 	ldb	r2,0(r4)
    890c:	103ffd1e 	bne	r2,zero,8904 <strlen+0x60>
    8910:	2205c83a 	sub	r2,r4,r8
    8914:	f800283a 	ret

00008918 <__swbuf_r>:
    8918:	defffc04 	addi	sp,sp,-16
    891c:	dc400215 	stw	r17,8(sp)
    8920:	dc000115 	stw	r16,4(sp)
    8924:	dfc00315 	stw	ra,12(sp)
    8928:	2023883a 	mov	r17,r4
    892c:	2821883a 	mov	r16,r5
    8930:	20000226 	beq	r4,zero,893c <__swbuf_r+0x24>
    8934:	20800e17 	ldw	r2,56(r4)
    8938:	10002f26 	beq	r2,zero,89f8 <__swbuf_r+0xe0>
    893c:	3080030b 	ldhu	r2,12(r6)
    8940:	30c00617 	ldw	r3,24(r6)
    8944:	1080020c 	andi	r2,r2,8
    8948:	30c00215 	stw	r3,8(r6)
    894c:	10002226 	beq	r2,zero,89d8 <__swbuf_r+0xc0>
    8950:	30c00417 	ldw	r3,16(r6)
    8954:	18002026 	beq	r3,zero,89d8 <__swbuf_r+0xc0>
    8958:	31000017 	ldw	r4,0(r6)
    895c:	30800517 	ldw	r2,20(r6)
    8960:	20c7c83a 	sub	r3,r4,r3
    8964:	18802f0e 	bge	r3,r2,8a24 <__swbuf_r+0x10c>
    8968:	19400044 	addi	r5,r3,1
    896c:	30800217 	ldw	r2,8(r6)
    8970:	84003fcc 	andi	r16,r16,255
    8974:	20c00044 	addi	r3,r4,1
    8978:	10bfffc4 	addi	r2,r2,-1
    897c:	30800215 	stw	r2,8(r6)
    8980:	24000005 	stb	r16,0(r4)
    8984:	30800517 	ldw	r2,20(r6)
    8988:	30c00015 	stw	r3,0(r6)
    898c:	11400c26 	beq	r2,r5,89c0 <__swbuf_r+0xa8>
    8990:	3080030b 	ldhu	r2,12(r6)
    8994:	1080004c 	andi	r2,r2,1
    8998:	1005003a 	cmpeq	r2,r2,zero
    899c:	10000626 	beq	r2,zero,89b8 <__swbuf_r+0xa0>
    89a0:	8005883a 	mov	r2,r16
    89a4:	dfc00317 	ldw	ra,12(sp)
    89a8:	dc400217 	ldw	r17,8(sp)
    89ac:	dc000117 	ldw	r16,4(sp)
    89b0:	dec00404 	addi	sp,sp,16
    89b4:	f800283a 	ret
    89b8:	00800284 	movi	r2,10
    89bc:	80bff81e 	bne	r16,r2,89a0 <__swbuf_r+0x88>
    89c0:	8809883a 	mov	r4,r17
    89c4:	300b883a 	mov	r5,r6
    89c8:	00053400 	call	5340 <_fflush_r>
    89cc:	103ff426 	beq	r2,zero,89a0 <__swbuf_r+0x88>
    89d0:	043fffc4 	movi	r16,-1
    89d4:	003ff206 	br	89a0 <__swbuf_r+0x88>
    89d8:	300b883a 	mov	r5,r6
    89dc:	8809883a 	mov	r4,r17
    89e0:	d9800015 	stw	r6,0(sp)
    89e4:	0003a380 	call	3a38 <__swsetup_r>
    89e8:	d9800017 	ldw	r6,0(sp)
    89ec:	1000061e 	bne	r2,zero,8a08 <__swbuf_r+0xf0>
    89f0:	30c00417 	ldw	r3,16(r6)
    89f4:	003fd806 	br	8958 <__swbuf_r+0x40>
    89f8:	d9800015 	stw	r6,0(sp)
    89fc:	00055d80 	call	55d8 <__sinit>
    8a00:	d9800017 	ldw	r6,0(sp)
    8a04:	003fcd06 	br	893c <__swbuf_r+0x24>
    8a08:	3080030b 	ldhu	r2,12(r6)
    8a0c:	00c00244 	movi	r3,9
    8a10:	043fffc4 	movi	r16,-1
    8a14:	10801014 	ori	r2,r2,64
    8a18:	3080030d 	sth	r2,12(r6)
    8a1c:	88c00015 	stw	r3,0(r17)
    8a20:	003fdf06 	br	89a0 <__swbuf_r+0x88>
    8a24:	300b883a 	mov	r5,r6
    8a28:	8809883a 	mov	r4,r17
    8a2c:	d9800015 	stw	r6,0(sp)
    8a30:	00053400 	call	5340 <_fflush_r>
    8a34:	d9800017 	ldw	r6,0(sp)
    8a38:	103fe51e 	bne	r2,zero,89d0 <__swbuf_r+0xb8>
    8a3c:	31000017 	ldw	r4,0(r6)
    8a40:	01400044 	movi	r5,1
    8a44:	003fc906 	br	896c <__swbuf_r+0x54>

00008a48 <__swbuf>:
    8a48:	01800074 	movhi	r6,1
    8a4c:	31907804 	addi	r6,r6,16864
    8a50:	2007883a 	mov	r3,r4
    8a54:	31000017 	ldw	r4,0(r6)
    8a58:	280d883a 	mov	r6,r5
    8a5c:	180b883a 	mov	r5,r3
    8a60:	00089181 	jmpi	8918 <__swbuf_r>

00008a64 <_write_r>:
    8a64:	defffd04 	addi	sp,sp,-12
    8a68:	dc000015 	stw	r16,0(sp)
    8a6c:	04000074 	movhi	r16,1
    8a70:	84181704 	addi	r16,r16,24668
    8a74:	dc400115 	stw	r17,4(sp)
    8a78:	80000015 	stw	zero,0(r16)
    8a7c:	2023883a 	mov	r17,r4
    8a80:	2809883a 	mov	r4,r5
    8a84:	300b883a 	mov	r5,r6
    8a88:	380d883a 	mov	r6,r7
    8a8c:	dfc00215 	stw	ra,8(sp)
    8a90:	000c0600 	call	c060 <write>
    8a94:	1007883a 	mov	r3,r2
    8a98:	00bfffc4 	movi	r2,-1
    8a9c:	18800626 	beq	r3,r2,8ab8 <_write_r+0x54>
    8aa0:	1805883a 	mov	r2,r3
    8aa4:	dfc00217 	ldw	ra,8(sp)
    8aa8:	dc400117 	ldw	r17,4(sp)
    8aac:	dc000017 	ldw	r16,0(sp)
    8ab0:	dec00304 	addi	sp,sp,12
    8ab4:	f800283a 	ret
    8ab8:	80800017 	ldw	r2,0(r16)
    8abc:	103ff826 	beq	r2,zero,8aa0 <_write_r+0x3c>
    8ac0:	88800015 	stw	r2,0(r17)
    8ac4:	1805883a 	mov	r2,r3
    8ac8:	dfc00217 	ldw	ra,8(sp)
    8acc:	dc400117 	ldw	r17,4(sp)
    8ad0:	dc000017 	ldw	r16,0(sp)
    8ad4:	dec00304 	addi	sp,sp,12
    8ad8:	f800283a 	ret

00008adc <_calloc_r>:
    8adc:	298b383a 	mul	r5,r5,r6
    8ae0:	defffe04 	addi	sp,sp,-8
    8ae4:	dc000015 	stw	r16,0(sp)
    8ae8:	dfc00115 	stw	ra,4(sp)
    8aec:	00064e40 	call	64e4 <_malloc_r>
    8af0:	1021883a 	mov	r16,r2
    8af4:	01c00904 	movi	r7,36
    8af8:	10000d26 	beq	r2,zero,8b30 <_calloc_r+0x54>
    8afc:	10ffff17 	ldw	r3,-4(r2)
    8b00:	1009883a 	mov	r4,r2
    8b04:	00bfff04 	movi	r2,-4
    8b08:	1886703a 	and	r3,r3,r2
    8b0c:	1887883a 	add	r3,r3,r2
    8b10:	180d883a 	mov	r6,r3
    8b14:	000b883a 	mov	r5,zero
    8b18:	38c01736 	bltu	r7,r3,8b78 <_calloc_r+0x9c>
    8b1c:	008004c4 	movi	r2,19
    8b20:	10c00836 	bltu	r2,r3,8b44 <_calloc_r+0x68>
    8b24:	20000215 	stw	zero,8(r4)
    8b28:	20000015 	stw	zero,0(r4)
    8b2c:	20000115 	stw	zero,4(r4)
    8b30:	8005883a 	mov	r2,r16
    8b34:	dfc00117 	ldw	ra,4(sp)
    8b38:	dc000017 	ldw	r16,0(sp)
    8b3c:	dec00204 	addi	sp,sp,8
    8b40:	f800283a 	ret
    8b44:	008006c4 	movi	r2,27
    8b48:	80000015 	stw	zero,0(r16)
    8b4c:	80000115 	stw	zero,4(r16)
    8b50:	81000204 	addi	r4,r16,8
    8b54:	10fff32e 	bgeu	r2,r3,8b24 <_calloc_r+0x48>
    8b58:	80000215 	stw	zero,8(r16)
    8b5c:	80000315 	stw	zero,12(r16)
    8b60:	81000404 	addi	r4,r16,16
    8b64:	19ffef1e 	bne	r3,r7,8b24 <_calloc_r+0x48>
    8b68:	81000604 	addi	r4,r16,24
    8b6c:	80000415 	stw	zero,16(r16)
    8b70:	80000515 	stw	zero,20(r16)
    8b74:	003feb06 	br	8b24 <_calloc_r+0x48>
    8b78:	00019dc0 	call	19dc <memset>
    8b7c:	8005883a 	mov	r2,r16
    8b80:	dfc00117 	ldw	ra,4(sp)
    8b84:	dc000017 	ldw	r16,0(sp)
    8b88:	dec00204 	addi	sp,sp,8
    8b8c:	f800283a 	ret

00008b90 <_close_r>:
    8b90:	defffd04 	addi	sp,sp,-12
    8b94:	dc000015 	stw	r16,0(sp)
    8b98:	04000074 	movhi	r16,1
    8b9c:	84181704 	addi	r16,r16,24668
    8ba0:	dc400115 	stw	r17,4(sp)
    8ba4:	80000015 	stw	zero,0(r16)
    8ba8:	2023883a 	mov	r17,r4
    8bac:	2809883a 	mov	r4,r5
    8bb0:	dfc00215 	stw	ra,8(sp)
    8bb4:	000b2a80 	call	b2a8 <close>
    8bb8:	1007883a 	mov	r3,r2
    8bbc:	00bfffc4 	movi	r2,-1
    8bc0:	18800626 	beq	r3,r2,8bdc <_close_r+0x4c>
    8bc4:	1805883a 	mov	r2,r3
    8bc8:	dfc00217 	ldw	ra,8(sp)
    8bcc:	dc400117 	ldw	r17,4(sp)
    8bd0:	dc000017 	ldw	r16,0(sp)
    8bd4:	dec00304 	addi	sp,sp,12
    8bd8:	f800283a 	ret
    8bdc:	80800017 	ldw	r2,0(r16)
    8be0:	103ff826 	beq	r2,zero,8bc4 <_close_r+0x34>
    8be4:	88800015 	stw	r2,0(r17)
    8be8:	1805883a 	mov	r2,r3
    8bec:	dfc00217 	ldw	ra,8(sp)
    8bf0:	dc400117 	ldw	r17,4(sp)
    8bf4:	dc000017 	ldw	r16,0(sp)
    8bf8:	dec00304 	addi	sp,sp,12
    8bfc:	f800283a 	ret

00008c00 <_fclose_r>:
    8c00:	defffc04 	addi	sp,sp,-16
    8c04:	dc400115 	stw	r17,4(sp)
    8c08:	dc000015 	stw	r16,0(sp)
    8c0c:	dfc00315 	stw	ra,12(sp)
    8c10:	dc800215 	stw	r18,8(sp)
    8c14:	2821883a 	mov	r16,r5
    8c18:	2023883a 	mov	r17,r4
    8c1c:	28002926 	beq	r5,zero,8cc4 <_fclose_r+0xc4>
    8c20:	00055c80 	call	55c8 <__sfp_lock_acquire>
    8c24:	88000226 	beq	r17,zero,8c30 <_fclose_r+0x30>
    8c28:	88800e17 	ldw	r2,56(r17)
    8c2c:	10002d26 	beq	r2,zero,8ce4 <_fclose_r+0xe4>
    8c30:	8080030f 	ldh	r2,12(r16)
    8c34:	10002226 	beq	r2,zero,8cc0 <_fclose_r+0xc0>
    8c38:	8809883a 	mov	r4,r17
    8c3c:	800b883a 	mov	r5,r16
    8c40:	00053400 	call	5340 <_fflush_r>
    8c44:	1025883a 	mov	r18,r2
    8c48:	80800b17 	ldw	r2,44(r16)
    8c4c:	10000426 	beq	r2,zero,8c60 <_fclose_r+0x60>
    8c50:	81400717 	ldw	r5,28(r16)
    8c54:	8809883a 	mov	r4,r17
    8c58:	103ee83a 	callr	r2
    8c5c:	10002a16 	blt	r2,zero,8d08 <_fclose_r+0x108>
    8c60:	8080030b 	ldhu	r2,12(r16)
    8c64:	1080200c 	andi	r2,r2,128
    8c68:	1000231e 	bne	r2,zero,8cf8 <_fclose_r+0xf8>
    8c6c:	81400c17 	ldw	r5,48(r16)
    8c70:	28000526 	beq	r5,zero,8c88 <_fclose_r+0x88>
    8c74:	80801004 	addi	r2,r16,64
    8c78:	28800226 	beq	r5,r2,8c84 <_fclose_r+0x84>
    8c7c:	8809883a 	mov	r4,r17
    8c80:	000595c0 	call	595c <_free_r>
    8c84:	80000c15 	stw	zero,48(r16)
    8c88:	81401117 	ldw	r5,68(r16)
    8c8c:	28000326 	beq	r5,zero,8c9c <_fclose_r+0x9c>
    8c90:	8809883a 	mov	r4,r17
    8c94:	000595c0 	call	595c <_free_r>
    8c98:	80001115 	stw	zero,68(r16)
    8c9c:	8000030d 	sth	zero,12(r16)
    8ca0:	00055cc0 	call	55cc <__sfp_lock_release>
    8ca4:	9005883a 	mov	r2,r18
    8ca8:	dfc00317 	ldw	ra,12(sp)
    8cac:	dc800217 	ldw	r18,8(sp)
    8cb0:	dc400117 	ldw	r17,4(sp)
    8cb4:	dc000017 	ldw	r16,0(sp)
    8cb8:	dec00404 	addi	sp,sp,16
    8cbc:	f800283a 	ret
    8cc0:	00055cc0 	call	55cc <__sfp_lock_release>
    8cc4:	0025883a 	mov	r18,zero
    8cc8:	9005883a 	mov	r2,r18
    8ccc:	dfc00317 	ldw	ra,12(sp)
    8cd0:	dc800217 	ldw	r18,8(sp)
    8cd4:	dc400117 	ldw	r17,4(sp)
    8cd8:	dc000017 	ldw	r16,0(sp)
    8cdc:	dec00404 	addi	sp,sp,16
    8ce0:	f800283a 	ret
    8ce4:	8809883a 	mov	r4,r17
    8ce8:	00055d80 	call	55d8 <__sinit>
    8cec:	8080030f 	ldh	r2,12(r16)
    8cf0:	103fd11e 	bne	r2,zero,8c38 <_fclose_r+0x38>
    8cf4:	003ff206 	br	8cc0 <_fclose_r+0xc0>
    8cf8:	81400417 	ldw	r5,16(r16)
    8cfc:	8809883a 	mov	r4,r17
    8d00:	000595c0 	call	595c <_free_r>
    8d04:	003fd906 	br	8c6c <_fclose_r+0x6c>
    8d08:	04bfffc4 	movi	r18,-1
    8d0c:	003fd406 	br	8c60 <_fclose_r+0x60>

00008d10 <fclose>:
    8d10:	00800074 	movhi	r2,1
    8d14:	10907804 	addi	r2,r2,16864
    8d18:	200b883a 	mov	r5,r4
    8d1c:	11000017 	ldw	r4,0(r2)
    8d20:	0008c001 	jmpi	8c00 <_fclose_r>

00008d24 <_fstat_r>:
    8d24:	defffd04 	addi	sp,sp,-12
    8d28:	dc000015 	stw	r16,0(sp)
    8d2c:	04000074 	movhi	r16,1
    8d30:	84181704 	addi	r16,r16,24668
    8d34:	dc400115 	stw	r17,4(sp)
    8d38:	80000015 	stw	zero,0(r16)
    8d3c:	2023883a 	mov	r17,r4
    8d40:	2809883a 	mov	r4,r5
    8d44:	300b883a 	mov	r5,r6
    8d48:	dfc00215 	stw	ra,8(sp)
    8d4c:	000b4300 	call	b430 <fstat>
    8d50:	1007883a 	mov	r3,r2
    8d54:	00bfffc4 	movi	r2,-1
    8d58:	18800626 	beq	r3,r2,8d74 <_fstat_r+0x50>
    8d5c:	1805883a 	mov	r2,r3
    8d60:	dfc00217 	ldw	ra,8(sp)
    8d64:	dc400117 	ldw	r17,4(sp)
    8d68:	dc000017 	ldw	r16,0(sp)
    8d6c:	dec00304 	addi	sp,sp,12
    8d70:	f800283a 	ret
    8d74:	80800017 	ldw	r2,0(r16)
    8d78:	103ff826 	beq	r2,zero,8d5c <_fstat_r+0x38>
    8d7c:	88800015 	stw	r2,0(r17)
    8d80:	1805883a 	mov	r2,r3
    8d84:	dfc00217 	ldw	ra,8(sp)
    8d88:	dc400117 	ldw	r17,4(sp)
    8d8c:	dc000017 	ldw	r16,0(sp)
    8d90:	dec00304 	addi	sp,sp,12
    8d94:	f800283a 	ret

00008d98 <_isatty_r>:
    8d98:	defffd04 	addi	sp,sp,-12
    8d9c:	dc000015 	stw	r16,0(sp)
    8da0:	04000074 	movhi	r16,1
    8da4:	84181704 	addi	r16,r16,24668
    8da8:	dc400115 	stw	r17,4(sp)
    8dac:	80000015 	stw	zero,0(r16)
    8db0:	2023883a 	mov	r17,r4
    8db4:	2809883a 	mov	r4,r5
    8db8:	dfc00215 	stw	ra,8(sp)
    8dbc:	000b7240 	call	b724 <isatty>
    8dc0:	1007883a 	mov	r3,r2
    8dc4:	00bfffc4 	movi	r2,-1
    8dc8:	18800626 	beq	r3,r2,8de4 <_isatty_r+0x4c>
    8dcc:	1805883a 	mov	r2,r3
    8dd0:	dfc00217 	ldw	ra,8(sp)
    8dd4:	dc400117 	ldw	r17,4(sp)
    8dd8:	dc000017 	ldw	r16,0(sp)
    8ddc:	dec00304 	addi	sp,sp,12
    8de0:	f800283a 	ret
    8de4:	80800017 	ldw	r2,0(r16)
    8de8:	103ff826 	beq	r2,zero,8dcc <_isatty_r+0x34>
    8dec:	88800015 	stw	r2,0(r17)
    8df0:	1805883a 	mov	r2,r3
    8df4:	dfc00217 	ldw	ra,8(sp)
    8df8:	dc400117 	ldw	r17,4(sp)
    8dfc:	dc000017 	ldw	r16,0(sp)
    8e00:	dec00304 	addi	sp,sp,12
    8e04:	f800283a 	ret

00008e08 <_lseek_r>:
    8e08:	defffd04 	addi	sp,sp,-12
    8e0c:	dc000015 	stw	r16,0(sp)
    8e10:	04000074 	movhi	r16,1
    8e14:	84181704 	addi	r16,r16,24668
    8e18:	dc400115 	stw	r17,4(sp)
    8e1c:	80000015 	stw	zero,0(r16)
    8e20:	2023883a 	mov	r17,r4
    8e24:	2809883a 	mov	r4,r5
    8e28:	300b883a 	mov	r5,r6
    8e2c:	380d883a 	mov	r6,r7
    8e30:	dfc00215 	stw	ra,8(sp)
    8e34:	000b9300 	call	b930 <lseek>
    8e38:	1007883a 	mov	r3,r2
    8e3c:	00bfffc4 	movi	r2,-1
    8e40:	18800626 	beq	r3,r2,8e5c <_lseek_r+0x54>
    8e44:	1805883a 	mov	r2,r3
    8e48:	dfc00217 	ldw	ra,8(sp)
    8e4c:	dc400117 	ldw	r17,4(sp)
    8e50:	dc000017 	ldw	r16,0(sp)
    8e54:	dec00304 	addi	sp,sp,12
    8e58:	f800283a 	ret
    8e5c:	80800017 	ldw	r2,0(r16)
    8e60:	103ff826 	beq	r2,zero,8e44 <_lseek_r+0x3c>
    8e64:	88800015 	stw	r2,0(r17)
    8e68:	1805883a 	mov	r2,r3
    8e6c:	dfc00217 	ldw	ra,8(sp)
    8e70:	dc400117 	ldw	r17,4(sp)
    8e74:	dc000017 	ldw	r16,0(sp)
    8e78:	dec00304 	addi	sp,sp,12
    8e7c:	f800283a 	ret

00008e80 <_read_r>:
    8e80:	defffd04 	addi	sp,sp,-12
    8e84:	dc000015 	stw	r16,0(sp)
    8e88:	04000074 	movhi	r16,1
    8e8c:	84181704 	addi	r16,r16,24668
    8e90:	dc400115 	stw	r17,4(sp)
    8e94:	80000015 	stw	zero,0(r16)
    8e98:	2023883a 	mov	r17,r4
    8e9c:	2809883a 	mov	r4,r5
    8ea0:	300b883a 	mov	r5,r6
    8ea4:	380d883a 	mov	r6,r7
    8ea8:	dfc00215 	stw	ra,8(sp)
    8eac:	000bdc40 	call	bdc4 <read>
    8eb0:	1007883a 	mov	r3,r2
    8eb4:	00bfffc4 	movi	r2,-1
    8eb8:	18800626 	beq	r3,r2,8ed4 <_read_r+0x54>
    8ebc:	1805883a 	mov	r2,r3
    8ec0:	dfc00217 	ldw	ra,8(sp)
    8ec4:	dc400117 	ldw	r17,4(sp)
    8ec8:	dc000017 	ldw	r16,0(sp)
    8ecc:	dec00304 	addi	sp,sp,12
    8ed0:	f800283a 	ret
    8ed4:	80800017 	ldw	r2,0(r16)
    8ed8:	103ff826 	beq	r2,zero,8ebc <_read_r+0x3c>
    8edc:	88800015 	stw	r2,0(r17)
    8ee0:	1805883a 	mov	r2,r3
    8ee4:	dfc00217 	ldw	ra,8(sp)
    8ee8:	dc400117 	ldw	r17,4(sp)
    8eec:	dc000017 	ldw	r16,0(sp)
    8ef0:	dec00304 	addi	sp,sp,12
    8ef4:	f800283a 	ret

00008ef8 <__udivdi3>:
    8ef8:	defff004 	addi	sp,sp,-64
    8efc:	2005883a 	mov	r2,r4
    8f00:	3011883a 	mov	r8,r6
    8f04:	df000e15 	stw	fp,56(sp)
    8f08:	dd000a15 	stw	r20,40(sp)
    8f0c:	dc000615 	stw	r16,24(sp)
    8f10:	dfc00f15 	stw	ra,60(sp)
    8f14:	ddc00d15 	stw	r23,52(sp)
    8f18:	dd800c15 	stw	r22,48(sp)
    8f1c:	dd400b15 	stw	r21,44(sp)
    8f20:	dcc00915 	stw	r19,36(sp)
    8f24:	dc800815 	stw	r18,32(sp)
    8f28:	dc400715 	stw	r17,28(sp)
    8f2c:	4021883a 	mov	r16,r8
    8f30:	1039883a 	mov	fp,r2
    8f34:	2829883a 	mov	r20,r5
    8f38:	38003b1e 	bne	r7,zero,9028 <__udivdi3+0x130>
    8f3c:	2a005c36 	bltu	r5,r8,90b0 <__udivdi3+0x1b8>
    8f40:	4000a626 	beq	r8,zero,91dc <__udivdi3+0x2e4>
    8f44:	00bfffd4 	movui	r2,65535
    8f48:	14009e36 	bltu	r2,r16,91c4 <__udivdi3+0x2cc>
    8f4c:	00803fc4 	movi	r2,255
    8f50:	14013d36 	bltu	r2,r16,9448 <__udivdi3+0x550>
    8f54:	000b883a 	mov	r5,zero
    8f58:	0005883a 	mov	r2,zero
    8f5c:	8084d83a 	srl	r2,r16,r2
    8f60:	01000074 	movhi	r4,1
    8f64:	2107d404 	addi	r4,r4,8016
    8f68:	01800804 	movi	r6,32
    8f6c:	1105883a 	add	r2,r2,r4
    8f70:	10c00003 	ldbu	r3,0(r2)
    8f74:	28c7883a 	add	r3,r5,r3
    8f78:	30edc83a 	sub	r22,r6,r3
    8f7c:	b000ee1e 	bne	r22,zero,9338 <__udivdi3+0x440>
    8f80:	802ad43a 	srli	r21,r16,16
    8f84:	00800044 	movi	r2,1
    8f88:	a423c83a 	sub	r17,r20,r16
    8f8c:	85ffffcc 	andi	r23,r16,65535
    8f90:	d8800315 	stw	r2,12(sp)
    8f94:	8809883a 	mov	r4,r17
    8f98:	a80b883a 	mov	r5,r21
    8f9c:	000acec0 	call	acec <__udivsi3>
    8fa0:	8809883a 	mov	r4,r17
    8fa4:	a80b883a 	mov	r5,r21
    8fa8:	102d883a 	mov	r22,r2
    8fac:	000acf40 	call	acf4 <__umodsi3>
    8fb0:	1004943a 	slli	r2,r2,16
    8fb4:	e006d43a 	srli	r3,fp,16
    8fb8:	bda3383a 	mul	r17,r23,r22
    8fbc:	10c4b03a 	or	r2,r2,r3
    8fc0:	1440042e 	bgeu	r2,r17,8fd4 <__udivdi3+0xdc>
    8fc4:	1405883a 	add	r2,r2,r16
    8fc8:	b5bfffc4 	addi	r22,r22,-1
    8fcc:	14000136 	bltu	r2,r16,8fd4 <__udivdi3+0xdc>
    8fd0:	14413d36 	bltu	r2,r17,94c8 <__udivdi3+0x5d0>
    8fd4:	1463c83a 	sub	r17,r2,r17
    8fd8:	8809883a 	mov	r4,r17
    8fdc:	a80b883a 	mov	r5,r21
    8fe0:	000acec0 	call	acec <__udivsi3>
    8fe4:	8809883a 	mov	r4,r17
    8fe8:	a80b883a 	mov	r5,r21
    8fec:	1029883a 	mov	r20,r2
    8ff0:	000acf40 	call	acf4 <__umodsi3>
    8ff4:	1004943a 	slli	r2,r2,16
    8ff8:	bd09383a 	mul	r4,r23,r20
    8ffc:	e0ffffcc 	andi	r3,fp,65535
    9000:	10c4b03a 	or	r2,r2,r3
    9004:	1100042e 	bgeu	r2,r4,9018 <__udivdi3+0x120>
    9008:	8085883a 	add	r2,r16,r2
    900c:	a53fffc4 	addi	r20,r20,-1
    9010:	14000136 	bltu	r2,r16,9018 <__udivdi3+0x120>
    9014:	11012036 	bltu	r2,r4,9498 <__udivdi3+0x5a0>
    9018:	b004943a 	slli	r2,r22,16
    901c:	d9000317 	ldw	r4,12(sp)
    9020:	a084b03a 	or	r2,r20,r2
    9024:	00001506 	br	907c <__udivdi3+0x184>
    9028:	380d883a 	mov	r6,r7
    902c:	29c06236 	bltu	r5,r7,91b8 <__udivdi3+0x2c0>
    9030:	00bfffd4 	movui	r2,65535
    9034:	11c05a36 	bltu	r2,r7,91a0 <__udivdi3+0x2a8>
    9038:	00803fc4 	movi	r2,255
    903c:	11c0fc36 	bltu	r2,r7,9430 <__udivdi3+0x538>
    9040:	000b883a 	mov	r5,zero
    9044:	0005883a 	mov	r2,zero
    9048:	3084d83a 	srl	r2,r6,r2
    904c:	01000074 	movhi	r4,1
    9050:	2107d404 	addi	r4,r4,8016
    9054:	01c00804 	movi	r7,32
    9058:	1105883a 	add	r2,r2,r4
    905c:	10c00003 	ldbu	r3,0(r2)
    9060:	28c7883a 	add	r3,r5,r3
    9064:	38efc83a 	sub	r23,r7,r3
    9068:	b800691e 	bne	r23,zero,9210 <__udivdi3+0x318>
    906c:	35000136 	bltu	r6,r20,9074 <__udivdi3+0x17c>
    9070:	e4005136 	bltu	fp,r16,91b8 <__udivdi3+0x2c0>
    9074:	00800044 	movi	r2,1
    9078:	0009883a 	mov	r4,zero
    907c:	2007883a 	mov	r3,r4
    9080:	dfc00f17 	ldw	ra,60(sp)
    9084:	df000e17 	ldw	fp,56(sp)
    9088:	ddc00d17 	ldw	r23,52(sp)
    908c:	dd800c17 	ldw	r22,48(sp)
    9090:	dd400b17 	ldw	r21,44(sp)
    9094:	dd000a17 	ldw	r20,40(sp)
    9098:	dcc00917 	ldw	r19,36(sp)
    909c:	dc800817 	ldw	r18,32(sp)
    90a0:	dc400717 	ldw	r17,28(sp)
    90a4:	dc000617 	ldw	r16,24(sp)
    90a8:	dec01004 	addi	sp,sp,64
    90ac:	f800283a 	ret
    90b0:	00bfffd4 	movui	r2,65535
    90b4:	12005036 	bltu	r2,r8,91f8 <__udivdi3+0x300>
    90b8:	00803fc4 	movi	r2,255
    90bc:	1200e836 	bltu	r2,r8,9460 <__udivdi3+0x568>
    90c0:	000b883a 	mov	r5,zero
    90c4:	0005883a 	mov	r2,zero
    90c8:	8084d83a 	srl	r2,r16,r2
    90cc:	01000074 	movhi	r4,1
    90d0:	2107d404 	addi	r4,r4,8016
    90d4:	01800804 	movi	r6,32
    90d8:	1105883a 	add	r2,r2,r4
    90dc:	10c00003 	ldbu	r3,0(r2)
    90e0:	28c7883a 	add	r3,r5,r3
    90e4:	30cbc83a 	sub	r5,r6,r3
    90e8:	28000626 	beq	r5,zero,9104 <__udivdi3+0x20c>
    90ec:	3145c83a 	sub	r2,r6,r5
    90f0:	e084d83a 	srl	r2,fp,r2
    90f4:	a146983a 	sll	r3,r20,r5
    90f8:	e178983a 	sll	fp,fp,r5
    90fc:	8160983a 	sll	r16,r16,r5
    9100:	18a8b03a 	or	r20,r3,r2
    9104:	802ad43a 	srli	r21,r16,16
    9108:	a009883a 	mov	r4,r20
    910c:	85ffffcc 	andi	r23,r16,65535
    9110:	a80b883a 	mov	r5,r21
    9114:	000acec0 	call	acec <__udivsi3>
    9118:	a009883a 	mov	r4,r20
    911c:	a80b883a 	mov	r5,r21
    9120:	102d883a 	mov	r22,r2
    9124:	000acf40 	call	acf4 <__umodsi3>
    9128:	1004943a 	slli	r2,r2,16
    912c:	e006d43a 	srli	r3,fp,16
    9130:	bda3383a 	mul	r17,r23,r22
    9134:	10c4b03a 	or	r2,r2,r3
    9138:	1440042e 	bgeu	r2,r17,914c <__udivdi3+0x254>
    913c:	1405883a 	add	r2,r2,r16
    9140:	b5bfffc4 	addi	r22,r22,-1
    9144:	14000136 	bltu	r2,r16,914c <__udivdi3+0x254>
    9148:	1440d536 	bltu	r2,r17,94a0 <__udivdi3+0x5a8>
    914c:	1463c83a 	sub	r17,r2,r17
    9150:	8809883a 	mov	r4,r17
    9154:	a80b883a 	mov	r5,r21
    9158:	000acec0 	call	acec <__udivsi3>
    915c:	8809883a 	mov	r4,r17
    9160:	a80b883a 	mov	r5,r21
    9164:	1029883a 	mov	r20,r2
    9168:	000acf40 	call	acf4 <__umodsi3>
    916c:	1004943a 	slli	r2,r2,16
    9170:	bd09383a 	mul	r4,r23,r20
    9174:	e0ffffcc 	andi	r3,fp,65535
    9178:	10c4b03a 	or	r2,r2,r3
    917c:	1100042e 	bgeu	r2,r4,9190 <__udivdi3+0x298>
    9180:	8085883a 	add	r2,r16,r2
    9184:	a53fffc4 	addi	r20,r20,-1
    9188:	14000136 	bltu	r2,r16,9190 <__udivdi3+0x298>
    918c:	1100c736 	bltu	r2,r4,94ac <__udivdi3+0x5b4>
    9190:	b004943a 	slli	r2,r22,16
    9194:	0009883a 	mov	r4,zero
    9198:	a084b03a 	or	r2,r20,r2
    919c:	003fb706 	br	907c <__udivdi3+0x184>
    91a0:	00804034 	movhi	r2,256
    91a4:	10bfffc4 	addi	r2,r2,-1
    91a8:	11c0a436 	bltu	r2,r7,943c <__udivdi3+0x544>
    91ac:	01400404 	movi	r5,16
    91b0:	2805883a 	mov	r2,r5
    91b4:	003fa406 	br	9048 <__udivdi3+0x150>
    91b8:	0005883a 	mov	r2,zero
    91bc:	0009883a 	mov	r4,zero
    91c0:	003fae06 	br	907c <__udivdi3+0x184>
    91c4:	00804034 	movhi	r2,256
    91c8:	10bfffc4 	addi	r2,r2,-1
    91cc:	1400a136 	bltu	r2,r16,9454 <__udivdi3+0x55c>
    91d0:	01400404 	movi	r5,16
    91d4:	2805883a 	mov	r2,r5
    91d8:	003f6006 	br	8f5c <__udivdi3+0x64>
    91dc:	01000044 	movi	r4,1
    91e0:	000b883a 	mov	r5,zero
    91e4:	000acec0 	call	acec <__udivsi3>
    91e8:	1021883a 	mov	r16,r2
    91ec:	00bfffd4 	movui	r2,65535
    91f0:	143ff436 	bltu	r2,r16,91c4 <__udivdi3+0x2cc>
    91f4:	003f5506 	br	8f4c <__udivdi3+0x54>
    91f8:	00804034 	movhi	r2,256
    91fc:	10bfffc4 	addi	r2,r2,-1
    9200:	12009a36 	bltu	r2,r8,946c <__udivdi3+0x574>
    9204:	01400404 	movi	r5,16
    9208:	2805883a 	mov	r2,r5
    920c:	003fae06 	br	90c8 <__udivdi3+0x1d0>
    9210:	3dc5c83a 	sub	r2,r7,r23
    9214:	35c8983a 	sll	r4,r6,r23
    9218:	8086d83a 	srl	r3,r16,r2
    921c:	a0a2d83a 	srl	r17,r20,r2
    9220:	e084d83a 	srl	r2,fp,r2
    9224:	20eab03a 	or	r21,r4,r3
    9228:	a82cd43a 	srli	r22,r21,16
    922c:	a5c6983a 	sll	r3,r20,r23
    9230:	8809883a 	mov	r4,r17
    9234:	b00b883a 	mov	r5,r22
    9238:	1886b03a 	or	r3,r3,r2
    923c:	d8c00215 	stw	r3,8(sp)
    9240:	000acec0 	call	acec <__udivsi3>
    9244:	8809883a 	mov	r4,r17
    9248:	b00b883a 	mov	r5,r22
    924c:	1029883a 	mov	r20,r2
    9250:	000acf40 	call	acf4 <__umodsi3>
    9254:	a8ffffcc 	andi	r3,r21,65535
    9258:	d8c00515 	stw	r3,20(sp)
    925c:	d9000217 	ldw	r4,8(sp)
    9260:	d9400517 	ldw	r5,20(sp)
    9264:	1004943a 	slli	r2,r2,16
    9268:	2006d43a 	srli	r3,r4,16
    926c:	85e0983a 	sll	r16,r16,r23
    9270:	2d23383a 	mul	r17,r5,r20
    9274:	10c4b03a 	or	r2,r2,r3
    9278:	dc000015 	stw	r16,0(sp)
    927c:	1440032e 	bgeu	r2,r17,928c <__udivdi3+0x394>
    9280:	1545883a 	add	r2,r2,r21
    9284:	a53fffc4 	addi	r20,r20,-1
    9288:	15407f2e 	bgeu	r2,r21,9488 <__udivdi3+0x590>
    928c:	1463c83a 	sub	r17,r2,r17
    9290:	8809883a 	mov	r4,r17
    9294:	b00b883a 	mov	r5,r22
    9298:	000acec0 	call	acec <__udivsi3>
    929c:	8809883a 	mov	r4,r17
    92a0:	b00b883a 	mov	r5,r22
    92a4:	1021883a 	mov	r16,r2
    92a8:	000acf40 	call	acf4 <__umodsi3>
    92ac:	d8c00517 	ldw	r3,20(sp)
    92b0:	d9000217 	ldw	r4,8(sp)
    92b4:	1004943a 	slli	r2,r2,16
    92b8:	1c0f383a 	mul	r7,r3,r16
    92bc:	20ffffcc 	andi	r3,r4,65535
    92c0:	10e2b03a 	or	r17,r2,r3
    92c4:	89c0032e 	bgeu	r17,r7,92d4 <__udivdi3+0x3dc>
    92c8:	8d63883a 	add	r17,r17,r21
    92cc:	843fffc4 	addi	r16,r16,-1
    92d0:	8d40692e 	bgeu	r17,r21,9478 <__udivdi3+0x580>
    92d4:	a008943a 	slli	r4,r20,16
    92d8:	d9400017 	ldw	r5,0(sp)
    92dc:	89e3c83a 	sub	r17,r17,r7
    92e0:	8110b03a 	or	r8,r16,r4
    92e4:	280cd43a 	srli	r6,r5,16
    92e8:	28ffffcc 	andi	r3,r5,65535
    92ec:	40bfffcc 	andi	r2,r8,65535
    92f0:	400ad43a 	srli	r5,r8,16
    92f4:	10d3383a 	mul	r9,r2,r3
    92f8:	1185383a 	mul	r2,r2,r6
    92fc:	28c7383a 	mul	r3,r5,r3
    9300:	4808d43a 	srli	r4,r9,16
    9304:	298b383a 	mul	r5,r5,r6
    9308:	10c5883a 	add	r2,r2,r3
    930c:	2089883a 	add	r4,r4,r2
    9310:	20c0022e 	bgeu	r4,r3,931c <__udivdi3+0x424>
    9314:	00800074 	movhi	r2,1
    9318:	288b883a 	add	r5,r5,r2
    931c:	2004d43a 	srli	r2,r4,16
    9320:	288b883a 	add	r5,r5,r2
    9324:	89403f36 	bltu	r17,r5,9424 <__udivdi3+0x52c>
    9328:	89403926 	beq	r17,r5,9410 <__udivdi3+0x518>
    932c:	4005883a 	mov	r2,r8
    9330:	0009883a 	mov	r4,zero
    9334:	003f5106 	br	907c <__udivdi3+0x184>
    9338:	85a0983a 	sll	r16,r16,r22
    933c:	3585c83a 	sub	r2,r6,r22
    9340:	a0a2d83a 	srl	r17,r20,r2
    9344:	802ad43a 	srli	r21,r16,16
    9348:	e084d83a 	srl	r2,fp,r2
    934c:	a586983a 	sll	r3,r20,r22
    9350:	8809883a 	mov	r4,r17
    9354:	a80b883a 	mov	r5,r21
    9358:	1886b03a 	or	r3,r3,r2
    935c:	d8c00115 	stw	r3,4(sp)
    9360:	000acec0 	call	acec <__udivsi3>
    9364:	8809883a 	mov	r4,r17
    9368:	a80b883a 	mov	r5,r21
    936c:	d8800415 	stw	r2,16(sp)
    9370:	000acf40 	call	acf4 <__umodsi3>
    9374:	d9000117 	ldw	r4,4(sp)
    9378:	d9400417 	ldw	r5,16(sp)
    937c:	1004943a 	slli	r2,r2,16
    9380:	85ffffcc 	andi	r23,r16,65535
    9384:	2006d43a 	srli	r3,r4,16
    9388:	b963383a 	mul	r17,r23,r5
    938c:	10c4b03a 	or	r2,r2,r3
    9390:	1440042e 	bgeu	r2,r17,93a4 <__udivdi3+0x4ac>
    9394:	297fffc4 	addi	r5,r5,-1
    9398:	1405883a 	add	r2,r2,r16
    939c:	d9400415 	stw	r5,16(sp)
    93a0:	1400442e 	bgeu	r2,r16,94b4 <__udivdi3+0x5bc>
    93a4:	1463c83a 	sub	r17,r2,r17
    93a8:	8809883a 	mov	r4,r17
    93ac:	a80b883a 	mov	r5,r21
    93b0:	000acec0 	call	acec <__udivsi3>
    93b4:	8809883a 	mov	r4,r17
    93b8:	a80b883a 	mov	r5,r21
    93bc:	1029883a 	mov	r20,r2
    93c0:	000acf40 	call	acf4 <__umodsi3>
    93c4:	d9400117 	ldw	r5,4(sp)
    93c8:	1004943a 	slli	r2,r2,16
    93cc:	bd09383a 	mul	r4,r23,r20
    93d0:	28ffffcc 	andi	r3,r5,65535
    93d4:	10c6b03a 	or	r3,r2,r3
    93d8:	1900062e 	bgeu	r3,r4,93f4 <__udivdi3+0x4fc>
    93dc:	1c07883a 	add	r3,r3,r16
    93e0:	a53fffc4 	addi	r20,r20,-1
    93e4:	1c000336 	bltu	r3,r16,93f4 <__udivdi3+0x4fc>
    93e8:	1900022e 	bgeu	r3,r4,93f4 <__udivdi3+0x4fc>
    93ec:	a53fffc4 	addi	r20,r20,-1
    93f0:	1c07883a 	add	r3,r3,r16
    93f4:	d9400417 	ldw	r5,16(sp)
    93f8:	e5b8983a 	sll	fp,fp,r22
    93fc:	1923c83a 	sub	r17,r3,r4
    9400:	2804943a 	slli	r2,r5,16
    9404:	a0a8b03a 	or	r20,r20,r2
    9408:	dd000315 	stw	r20,12(sp)
    940c:	003ee106 	br	8f94 <__udivdi3+0x9c>
    9410:	2004943a 	slli	r2,r4,16
    9414:	e5c8983a 	sll	r4,fp,r23
    9418:	48ffffcc 	andi	r3,r9,65535
    941c:	10c5883a 	add	r2,r2,r3
    9420:	20bfc22e 	bgeu	r4,r2,932c <__udivdi3+0x434>
    9424:	40bfffc4 	addi	r2,r8,-1
    9428:	0009883a 	mov	r4,zero
    942c:	003f1306 	br	907c <__udivdi3+0x184>
    9430:	01400204 	movi	r5,8
    9434:	2805883a 	mov	r2,r5
    9438:	003f0306 	br	9048 <__udivdi3+0x150>
    943c:	01400604 	movi	r5,24
    9440:	2805883a 	mov	r2,r5
    9444:	003f0006 	br	9048 <__udivdi3+0x150>
    9448:	01400204 	movi	r5,8
    944c:	2805883a 	mov	r2,r5
    9450:	003ec206 	br	8f5c <__udivdi3+0x64>
    9454:	01400604 	movi	r5,24
    9458:	2805883a 	mov	r2,r5
    945c:	003ebf06 	br	8f5c <__udivdi3+0x64>
    9460:	01400204 	movi	r5,8
    9464:	2805883a 	mov	r2,r5
    9468:	003f1706 	br	90c8 <__udivdi3+0x1d0>
    946c:	01400604 	movi	r5,24
    9470:	2805883a 	mov	r2,r5
    9474:	003f1406 	br	90c8 <__udivdi3+0x1d0>
    9478:	89ff962e 	bgeu	r17,r7,92d4 <__udivdi3+0x3dc>
    947c:	8d63883a 	add	r17,r17,r21
    9480:	843fffc4 	addi	r16,r16,-1
    9484:	003f9306 	br	92d4 <__udivdi3+0x3dc>
    9488:	147f802e 	bgeu	r2,r17,928c <__udivdi3+0x394>
    948c:	a53fffc4 	addi	r20,r20,-1
    9490:	1545883a 	add	r2,r2,r21
    9494:	003f7d06 	br	928c <__udivdi3+0x394>
    9498:	a53fffc4 	addi	r20,r20,-1
    949c:	003ede06 	br	9018 <__udivdi3+0x120>
    94a0:	b5bfffc4 	addi	r22,r22,-1
    94a4:	1405883a 	add	r2,r2,r16
    94a8:	003f2806 	br	914c <__udivdi3+0x254>
    94ac:	a53fffc4 	addi	r20,r20,-1
    94b0:	003f3706 	br	9190 <__udivdi3+0x298>
    94b4:	147fbb2e 	bgeu	r2,r17,93a4 <__udivdi3+0x4ac>
    94b8:	297fffc4 	addi	r5,r5,-1
    94bc:	1405883a 	add	r2,r2,r16
    94c0:	d9400415 	stw	r5,16(sp)
    94c4:	003fb706 	br	93a4 <__udivdi3+0x4ac>
    94c8:	b5bfffc4 	addi	r22,r22,-1
    94cc:	1405883a 	add	r2,r2,r16
    94d0:	003ec006 	br	8fd4 <__udivdi3+0xdc>

000094d4 <__umoddi3>:
    94d4:	defff104 	addi	sp,sp,-60
    94d8:	dd800b15 	stw	r22,44(sp)
    94dc:	dd000915 	stw	r20,36(sp)
    94e0:	dc000515 	stw	r16,20(sp)
    94e4:	dfc00e15 	stw	ra,56(sp)
    94e8:	df000d15 	stw	fp,52(sp)
    94ec:	ddc00c15 	stw	r23,48(sp)
    94f0:	dd400a15 	stw	r21,40(sp)
    94f4:	dcc00815 	stw	r19,32(sp)
    94f8:	dc800715 	stw	r18,28(sp)
    94fc:	dc400615 	stw	r17,24(sp)
    9500:	3021883a 	mov	r16,r6
    9504:	202d883a 	mov	r22,r4
    9508:	2829883a 	mov	r20,r5
    950c:	38002b1e 	bne	r7,zero,95bc <__umoddi3+0xe8>
    9510:	29805036 	bltu	r5,r6,9654 <__umoddi3+0x180>
    9514:	30008a26 	beq	r6,zero,9740 <__umoddi3+0x26c>
    9518:	00bfffd4 	movui	r2,65535
    951c:	14008236 	bltu	r2,r16,9728 <__umoddi3+0x254>
    9520:	00803fc4 	movi	r2,255
    9524:	14013636 	bltu	r2,r16,9a00 <__umoddi3+0x52c>
    9528:	000b883a 	mov	r5,zero
    952c:	0005883a 	mov	r2,zero
    9530:	8084d83a 	srl	r2,r16,r2
    9534:	01000074 	movhi	r4,1
    9538:	2107d404 	addi	r4,r4,8016
    953c:	01800804 	movi	r6,32
    9540:	1105883a 	add	r2,r2,r4
    9544:	10c00003 	ldbu	r3,0(r2)
    9548:	28c7883a 	add	r3,r5,r3
    954c:	30efc83a 	sub	r23,r6,r3
    9550:	b800941e 	bne	r23,zero,97a4 <__umoddi3+0x2d0>
    9554:	802ad43a 	srli	r21,r16,16
    9558:	a423c83a 	sub	r17,r20,r16
    955c:	0039883a 	mov	fp,zero
    9560:	853fffcc 	andi	r20,r16,65535
    9564:	8809883a 	mov	r4,r17
    9568:	a80b883a 	mov	r5,r21
    956c:	000acec0 	call	acec <__udivsi3>
    9570:	8809883a 	mov	r4,r17
    9574:	a80b883a 	mov	r5,r21
    9578:	a0a3383a 	mul	r17,r20,r2
    957c:	000acf40 	call	acf4 <__umodsi3>
    9580:	1004943a 	slli	r2,r2,16
    9584:	b006d43a 	srli	r3,r22,16
    9588:	10c4b03a 	or	r2,r2,r3
    958c:	1440032e 	bgeu	r2,r17,959c <__umoddi3+0xc8>
    9590:	1405883a 	add	r2,r2,r16
    9594:	14000136 	bltu	r2,r16,959c <__umoddi3+0xc8>
    9598:	14413536 	bltu	r2,r17,9a70 <__umoddi3+0x59c>
    959c:	1463c83a 	sub	r17,r2,r17
    95a0:	8809883a 	mov	r4,r17
    95a4:	a80b883a 	mov	r5,r21
    95a8:	000acec0 	call	acec <__udivsi3>
    95ac:	8809883a 	mov	r4,r17
    95b0:	a0a3383a 	mul	r17,r20,r2
    95b4:	a80b883a 	mov	r5,r21
    95b8:	00004d06 	br	96f0 <__umoddi3+0x21c>
    95bc:	380d883a 	mov	r6,r7
    95c0:	29c0102e 	bgeu	r5,r7,9604 <__umoddi3+0x130>
    95c4:	2011883a 	mov	r8,r4
    95c8:	2813883a 	mov	r9,r5
    95cc:	4005883a 	mov	r2,r8
    95d0:	4807883a 	mov	r3,r9
    95d4:	dfc00e17 	ldw	ra,56(sp)
    95d8:	df000d17 	ldw	fp,52(sp)
    95dc:	ddc00c17 	ldw	r23,48(sp)
    95e0:	dd800b17 	ldw	r22,44(sp)
    95e4:	dd400a17 	ldw	r21,40(sp)
    95e8:	dd000917 	ldw	r20,36(sp)
    95ec:	dcc00817 	ldw	r19,32(sp)
    95f0:	dc800717 	ldw	r18,28(sp)
    95f4:	dc400617 	ldw	r17,24(sp)
    95f8:	dc000517 	ldw	r16,20(sp)
    95fc:	dec00f04 	addi	sp,sp,60
    9600:	f800283a 	ret
    9604:	00bfffd4 	movui	r2,65535
    9608:	11c05a36 	bltu	r2,r7,9774 <__umoddi3+0x2a0>
    960c:	00803fc4 	movi	r2,255
    9610:	11c0fe36 	bltu	r2,r7,9a0c <__umoddi3+0x538>
    9614:	000b883a 	mov	r5,zero
    9618:	0005883a 	mov	r2,zero
    961c:	3084d83a 	srl	r2,r6,r2
    9620:	01000074 	movhi	r4,1
    9624:	2107d404 	addi	r4,r4,8016
    9628:	01c00804 	movi	r7,32
    962c:	1105883a 	add	r2,r2,r4
    9630:	10c00003 	ldbu	r3,0(r2)
    9634:	28c7883a 	add	r3,r5,r3
    9638:	38ebc83a 	sub	r21,r7,r3
    963c:	a800851e 	bne	r21,zero,9854 <__umoddi3+0x380>
    9640:	35005236 	bltu	r6,r20,978c <__umoddi3+0x2b8>
    9644:	b400512e 	bgeu	r22,r16,978c <__umoddi3+0x2b8>
    9648:	b011883a 	mov	r8,r22
    964c:	a013883a 	mov	r9,r20
    9650:	003fde06 	br	95cc <__umoddi3+0xf8>
    9654:	00bfffd4 	movui	r2,65535
    9658:	11804036 	bltu	r2,r6,975c <__umoddi3+0x288>
    965c:	00803fc4 	movi	r2,255
    9660:	1180ed36 	bltu	r2,r6,9a18 <__umoddi3+0x544>
    9664:	000b883a 	mov	r5,zero
    9668:	0005883a 	mov	r2,zero
    966c:	8084d83a 	srl	r2,r16,r2
    9670:	01000074 	movhi	r4,1
    9674:	2107d404 	addi	r4,r4,8016
    9678:	01800804 	movi	r6,32
    967c:	1105883a 	add	r2,r2,r4
    9680:	10c00003 	ldbu	r3,0(r2)
    9684:	28c7883a 	add	r3,r5,r3
    9688:	30c7c83a 	sub	r3,r6,r3
    968c:	1800bf1e 	bne	r3,zero,998c <__umoddi3+0x4b8>
    9690:	0039883a 	mov	fp,zero
    9694:	802ad43a 	srli	r21,r16,16
    9698:	a009883a 	mov	r4,r20
    969c:	85ffffcc 	andi	r23,r16,65535
    96a0:	a80b883a 	mov	r5,r21
    96a4:	000acec0 	call	acec <__udivsi3>
    96a8:	a009883a 	mov	r4,r20
    96ac:	a80b883a 	mov	r5,r21
    96b0:	b8a3383a 	mul	r17,r23,r2
    96b4:	000acf40 	call	acf4 <__umodsi3>
    96b8:	1004943a 	slli	r2,r2,16
    96bc:	b006d43a 	srli	r3,r22,16
    96c0:	10c4b03a 	or	r2,r2,r3
    96c4:	1440032e 	bgeu	r2,r17,96d4 <__umoddi3+0x200>
    96c8:	1405883a 	add	r2,r2,r16
    96cc:	14000136 	bltu	r2,r16,96d4 <__umoddi3+0x200>
    96d0:	1440e536 	bltu	r2,r17,9a68 <__umoddi3+0x594>
    96d4:	1463c83a 	sub	r17,r2,r17
    96d8:	8809883a 	mov	r4,r17
    96dc:	a80b883a 	mov	r5,r21
    96e0:	000acec0 	call	acec <__udivsi3>
    96e4:	8809883a 	mov	r4,r17
    96e8:	b8a3383a 	mul	r17,r23,r2
    96ec:	a80b883a 	mov	r5,r21
    96f0:	000acf40 	call	acf4 <__umodsi3>
    96f4:	1004943a 	slli	r2,r2,16
    96f8:	b0ffffcc 	andi	r3,r22,65535
    96fc:	10c4b03a 	or	r2,r2,r3
    9700:	1440042e 	bgeu	r2,r17,9714 <__umoddi3+0x240>
    9704:	1405883a 	add	r2,r2,r16
    9708:	14000236 	bltu	r2,r16,9714 <__umoddi3+0x240>
    970c:	1440012e 	bgeu	r2,r17,9714 <__umoddi3+0x240>
    9710:	1405883a 	add	r2,r2,r16
    9714:	1445c83a 	sub	r2,r2,r17
    9718:	1724d83a 	srl	r18,r2,fp
    971c:	0013883a 	mov	r9,zero
    9720:	9011883a 	mov	r8,r18
    9724:	003fa906 	br	95cc <__umoddi3+0xf8>
    9728:	00804034 	movhi	r2,256
    972c:	10bfffc4 	addi	r2,r2,-1
    9730:	1400b036 	bltu	r2,r16,99f4 <__umoddi3+0x520>
    9734:	01400404 	movi	r5,16
    9738:	2805883a 	mov	r2,r5
    973c:	003f7c06 	br	9530 <__umoddi3+0x5c>
    9740:	01000044 	movi	r4,1
    9744:	000b883a 	mov	r5,zero
    9748:	000acec0 	call	acec <__udivsi3>
    974c:	1021883a 	mov	r16,r2
    9750:	00bfffd4 	movui	r2,65535
    9754:	143ff436 	bltu	r2,r16,9728 <__umoddi3+0x254>
    9758:	003f7106 	br	9520 <__umoddi3+0x4c>
    975c:	00804034 	movhi	r2,256
    9760:	10bfffc4 	addi	r2,r2,-1
    9764:	1180af36 	bltu	r2,r6,9a24 <__umoddi3+0x550>
    9768:	01400404 	movi	r5,16
    976c:	2805883a 	mov	r2,r5
    9770:	003fbe06 	br	966c <__umoddi3+0x198>
    9774:	00804034 	movhi	r2,256
    9778:	10bfffc4 	addi	r2,r2,-1
    977c:	11c0ac36 	bltu	r2,r7,9a30 <__umoddi3+0x55c>
    9780:	01400404 	movi	r5,16
    9784:	2805883a 	mov	r2,r5
    9788:	003fa406 	br	961c <__umoddi3+0x148>
    978c:	b409c83a 	sub	r4,r22,r16
    9790:	b105803a 	cmpltu	r2,r22,r4
    9794:	a187c83a 	sub	r3,r20,r6
    9798:	18a9c83a 	sub	r20,r3,r2
    979c:	202d883a 	mov	r22,r4
    97a0:	003fa906 	br	9648 <__umoddi3+0x174>
    97a4:	85e0983a 	sll	r16,r16,r23
    97a8:	35c5c83a 	sub	r2,r6,r23
    97ac:	a0a2d83a 	srl	r17,r20,r2
    97b0:	802ad43a 	srli	r21,r16,16
    97b4:	b084d83a 	srl	r2,r22,r2
    97b8:	a5c6983a 	sll	r3,r20,r23
    97bc:	8809883a 	mov	r4,r17
    97c0:	a80b883a 	mov	r5,r21
    97c4:	1886b03a 	or	r3,r3,r2
    97c8:	d8c00115 	stw	r3,4(sp)
    97cc:	853fffcc 	andi	r20,r16,65535
    97d0:	000acec0 	call	acec <__udivsi3>
    97d4:	8809883a 	mov	r4,r17
    97d8:	a80b883a 	mov	r5,r21
    97dc:	a0a3383a 	mul	r17,r20,r2
    97e0:	000acf40 	call	acf4 <__umodsi3>
    97e4:	d9000117 	ldw	r4,4(sp)
    97e8:	1004943a 	slli	r2,r2,16
    97ec:	b839883a 	mov	fp,r23
    97f0:	2006d43a 	srli	r3,r4,16
    97f4:	10c4b03a 	or	r2,r2,r3
    97f8:	1440022e 	bgeu	r2,r17,9804 <__umoddi3+0x330>
    97fc:	1405883a 	add	r2,r2,r16
    9800:	1400962e 	bgeu	r2,r16,9a5c <__umoddi3+0x588>
    9804:	1463c83a 	sub	r17,r2,r17
    9808:	8809883a 	mov	r4,r17
    980c:	a80b883a 	mov	r5,r21
    9810:	000acec0 	call	acec <__udivsi3>
    9814:	8809883a 	mov	r4,r17
    9818:	a80b883a 	mov	r5,r21
    981c:	a0a3383a 	mul	r17,r20,r2
    9820:	000acf40 	call	acf4 <__umodsi3>
    9824:	d9400117 	ldw	r5,4(sp)
    9828:	1004943a 	slli	r2,r2,16
    982c:	28ffffcc 	andi	r3,r5,65535
    9830:	10c4b03a 	or	r2,r2,r3
    9834:	1440042e 	bgeu	r2,r17,9848 <__umoddi3+0x374>
    9838:	1405883a 	add	r2,r2,r16
    983c:	14000236 	bltu	r2,r16,9848 <__umoddi3+0x374>
    9840:	1440012e 	bgeu	r2,r17,9848 <__umoddi3+0x374>
    9844:	1405883a 	add	r2,r2,r16
    9848:	b5ec983a 	sll	r22,r22,r23
    984c:	1463c83a 	sub	r17,r2,r17
    9850:	003f4406 	br	9564 <__umoddi3+0x90>
    9854:	3d4fc83a 	sub	r7,r7,r21
    9858:	3546983a 	sll	r3,r6,r21
    985c:	81c4d83a 	srl	r2,r16,r7
    9860:	a1e2d83a 	srl	r17,r20,r7
    9864:	a54c983a 	sll	r6,r20,r21
    9868:	18aeb03a 	or	r23,r3,r2
    986c:	b828d43a 	srli	r20,r23,16
    9870:	b1c4d83a 	srl	r2,r22,r7
    9874:	8809883a 	mov	r4,r17
    9878:	a00b883a 	mov	r5,r20
    987c:	308cb03a 	or	r6,r6,r2
    9880:	d9c00315 	stw	r7,12(sp)
    9884:	d9800215 	stw	r6,8(sp)
    9888:	000acec0 	call	acec <__udivsi3>
    988c:	8809883a 	mov	r4,r17
    9890:	a00b883a 	mov	r5,r20
    9894:	1039883a 	mov	fp,r2
    9898:	000acf40 	call	acf4 <__umodsi3>
    989c:	b8ffffcc 	andi	r3,r23,65535
    98a0:	d8c00415 	stw	r3,16(sp)
    98a4:	d9000217 	ldw	r4,8(sp)
    98a8:	d9400417 	ldw	r5,16(sp)
    98ac:	1004943a 	slli	r2,r2,16
    98b0:	2006d43a 	srli	r3,r4,16
    98b4:	8560983a 	sll	r16,r16,r21
    98b8:	2f23383a 	mul	r17,r5,fp
    98bc:	10c4b03a 	or	r2,r2,r3
    98c0:	dc000015 	stw	r16,0(sp)
    98c4:	b56c983a 	sll	r22,r22,r21
    98c8:	1440032e 	bgeu	r2,r17,98d8 <__umoddi3+0x404>
    98cc:	15c5883a 	add	r2,r2,r23
    98d0:	e73fffc4 	addi	fp,fp,-1
    98d4:	15c05d2e 	bgeu	r2,r23,9a4c <__umoddi3+0x578>
    98d8:	1463c83a 	sub	r17,r2,r17
    98dc:	8809883a 	mov	r4,r17
    98e0:	a00b883a 	mov	r5,r20
    98e4:	000acec0 	call	acec <__udivsi3>
    98e8:	8809883a 	mov	r4,r17
    98ec:	a00b883a 	mov	r5,r20
    98f0:	1021883a 	mov	r16,r2
    98f4:	000acf40 	call	acf4 <__umodsi3>
    98f8:	d8c00417 	ldw	r3,16(sp)
    98fc:	d9000217 	ldw	r4,8(sp)
    9900:	1004943a 	slli	r2,r2,16
    9904:	1c23383a 	mul	r17,r3,r16
    9908:	20ffffcc 	andi	r3,r4,65535
    990c:	10ceb03a 	or	r7,r2,r3
    9910:	3c40032e 	bgeu	r7,r17,9920 <__umoddi3+0x44c>
    9914:	3dcf883a 	add	r7,r7,r23
    9918:	843fffc4 	addi	r16,r16,-1
    991c:	3dc0472e 	bgeu	r7,r23,9a3c <__umoddi3+0x568>
    9920:	e004943a 	slli	r2,fp,16
    9924:	d9400017 	ldw	r5,0(sp)
    9928:	3c4fc83a 	sub	r7,r7,r17
    992c:	8084b03a 	or	r2,r16,r2
    9930:	28ffffcc 	andi	r3,r5,65535
    9934:	280cd43a 	srli	r6,r5,16
    9938:	100ad43a 	srli	r5,r2,16
    993c:	10bfffcc 	andi	r2,r2,65535
    9940:	10d1383a 	mul	r8,r2,r3
    9944:	28c7383a 	mul	r3,r5,r3
    9948:	1185383a 	mul	r2,r2,r6
    994c:	4008d43a 	srli	r4,r8,16
    9950:	298b383a 	mul	r5,r5,r6
    9954:	10c5883a 	add	r2,r2,r3
    9958:	2089883a 	add	r4,r4,r2
    995c:	20c0022e 	bgeu	r4,r3,9968 <__umoddi3+0x494>
    9960:	00800074 	movhi	r2,1
    9964:	288b883a 	add	r5,r5,r2
    9968:	2004d43a 	srli	r2,r4,16
    996c:	2008943a 	slli	r4,r4,16
    9970:	40ffffcc 	andi	r3,r8,65535
    9974:	288b883a 	add	r5,r5,r2
    9978:	20c9883a 	add	r4,r4,r3
    997c:	39400b36 	bltu	r7,r5,99ac <__umoddi3+0x4d8>
    9980:	39403d26 	beq	r7,r5,9a78 <__umoddi3+0x5a4>
    9984:	394bc83a 	sub	r5,r7,r5
    9988:	00000f06 	br	99c8 <__umoddi3+0x4f4>
    998c:	30c5c83a 	sub	r2,r6,r3
    9990:	1839883a 	mov	fp,r3
    9994:	b084d83a 	srl	r2,r22,r2
    9998:	a0c6983a 	sll	r3,r20,r3
    999c:	8720983a 	sll	r16,r16,fp
    99a0:	b72c983a 	sll	r22,r22,fp
    99a4:	18a8b03a 	or	r20,r3,r2
    99a8:	003f3a06 	br	9694 <__umoddi3+0x1c0>
    99ac:	d8c00017 	ldw	r3,0(sp)
    99b0:	20c5c83a 	sub	r2,r4,r3
    99b4:	2089803a 	cmpltu	r4,r4,r2
    99b8:	2dc7c83a 	sub	r3,r5,r23
    99bc:	1907c83a 	sub	r3,r3,r4
    99c0:	38cbc83a 	sub	r5,r7,r3
    99c4:	1009883a 	mov	r4,r2
    99c8:	b105c83a 	sub	r2,r22,r4
    99cc:	b087803a 	cmpltu	r3,r22,r2
    99d0:	28c7c83a 	sub	r3,r5,r3
    99d4:	d9400317 	ldw	r5,12(sp)
    99d8:	1544d83a 	srl	r2,r2,r21
    99dc:	1948983a 	sll	r4,r3,r5
    99e0:	1d46d83a 	srl	r3,r3,r21
    99e4:	20a4b03a 	or	r18,r4,r2
    99e8:	9011883a 	mov	r8,r18
    99ec:	1813883a 	mov	r9,r3
    99f0:	003ef606 	br	95cc <__umoddi3+0xf8>
    99f4:	01400604 	movi	r5,24
    99f8:	2805883a 	mov	r2,r5
    99fc:	003ecc06 	br	9530 <__umoddi3+0x5c>
    9a00:	01400204 	movi	r5,8
    9a04:	2805883a 	mov	r2,r5
    9a08:	003ec906 	br	9530 <__umoddi3+0x5c>
    9a0c:	01400204 	movi	r5,8
    9a10:	2805883a 	mov	r2,r5
    9a14:	003f0106 	br	961c <__umoddi3+0x148>
    9a18:	01400204 	movi	r5,8
    9a1c:	2805883a 	mov	r2,r5
    9a20:	003f1206 	br	966c <__umoddi3+0x198>
    9a24:	01400604 	movi	r5,24
    9a28:	2805883a 	mov	r2,r5
    9a2c:	003f0f06 	br	966c <__umoddi3+0x198>
    9a30:	01400604 	movi	r5,24
    9a34:	2805883a 	mov	r2,r5
    9a38:	003ef806 	br	961c <__umoddi3+0x148>
    9a3c:	3c7fb82e 	bgeu	r7,r17,9920 <__umoddi3+0x44c>
    9a40:	843fffc4 	addi	r16,r16,-1
    9a44:	3dcf883a 	add	r7,r7,r23
    9a48:	003fb506 	br	9920 <__umoddi3+0x44c>
    9a4c:	147fa22e 	bgeu	r2,r17,98d8 <__umoddi3+0x404>
    9a50:	e73fffc4 	addi	fp,fp,-1
    9a54:	15c5883a 	add	r2,r2,r23
    9a58:	003f9f06 	br	98d8 <__umoddi3+0x404>
    9a5c:	147f692e 	bgeu	r2,r17,9804 <__umoddi3+0x330>
    9a60:	1405883a 	add	r2,r2,r16
    9a64:	003f6706 	br	9804 <__umoddi3+0x330>
    9a68:	1405883a 	add	r2,r2,r16
    9a6c:	003f1906 	br	96d4 <__umoddi3+0x200>
    9a70:	1405883a 	add	r2,r2,r16
    9a74:	003ec906 	br	959c <__umoddi3+0xc8>
    9a78:	b13fcc36 	bltu	r22,r4,99ac <__umoddi3+0x4d8>
    9a7c:	000b883a 	mov	r5,zero
    9a80:	003fd106 	br	99c8 <__umoddi3+0x4f4>

00009a84 <_fpadd_parts>:
    9a84:	defff804 	addi	sp,sp,-32
    9a88:	dcc00315 	stw	r19,12(sp)
    9a8c:	2027883a 	mov	r19,r4
    9a90:	21000017 	ldw	r4,0(r4)
    9a94:	00c00044 	movi	r3,1
    9a98:	dd400515 	stw	r21,20(sp)
    9a9c:	dd000415 	stw	r20,16(sp)
    9aa0:	ddc00715 	stw	r23,28(sp)
    9aa4:	dd800615 	stw	r22,24(sp)
    9aa8:	dc800215 	stw	r18,8(sp)
    9aac:	dc400115 	stw	r17,4(sp)
    9ab0:	dc000015 	stw	r16,0(sp)
    9ab4:	282b883a 	mov	r21,r5
    9ab8:	3029883a 	mov	r20,r6
    9abc:	1900632e 	bgeu	r3,r4,9c4c <_fpadd_parts+0x1c8>
    9ac0:	28800017 	ldw	r2,0(r5)
    9ac4:	1880812e 	bgeu	r3,r2,9ccc <_fpadd_parts+0x248>
    9ac8:	00c00104 	movi	r3,4
    9acc:	20c0dc26 	beq	r4,r3,9e40 <_fpadd_parts+0x3bc>
    9ad0:	10c07e26 	beq	r2,r3,9ccc <_fpadd_parts+0x248>
    9ad4:	00c00084 	movi	r3,2
    9ad8:	10c06726 	beq	r2,r3,9c78 <_fpadd_parts+0x1f4>
    9adc:	20c07b26 	beq	r4,r3,9ccc <_fpadd_parts+0x248>
    9ae0:	9dc00217 	ldw	r23,8(r19)
    9ae4:	28c00217 	ldw	r3,8(r5)
    9ae8:	9c400317 	ldw	r17,12(r19)
    9aec:	2bc00317 	ldw	r15,12(r5)
    9af0:	b8cdc83a 	sub	r6,r23,r3
    9af4:	9c800417 	ldw	r18,16(r19)
    9af8:	2c000417 	ldw	r16,16(r5)
    9afc:	3009883a 	mov	r4,r6
    9b00:	30009716 	blt	r6,zero,9d60 <_fpadd_parts+0x2dc>
    9b04:	00800fc4 	movi	r2,63
    9b08:	11806b16 	blt	r2,r6,9cb8 <_fpadd_parts+0x234>
    9b0c:	0100a40e 	bge	zero,r4,9da0 <_fpadd_parts+0x31c>
    9b10:	35bff804 	addi	r22,r6,-32
    9b14:	b000bc16 	blt	r22,zero,9e08 <_fpadd_parts+0x384>
    9b18:	8596d83a 	srl	r11,r16,r22
    9b1c:	0019883a 	mov	r12,zero
    9b20:	0013883a 	mov	r9,zero
    9b24:	01000044 	movi	r4,1
    9b28:	0015883a 	mov	r10,zero
    9b2c:	b000be16 	blt	r22,zero,9e28 <_fpadd_parts+0x3a4>
    9b30:	2590983a 	sll	r8,r4,r22
    9b34:	000f883a 	mov	r7,zero
    9b38:	00bfffc4 	movi	r2,-1
    9b3c:	3889883a 	add	r4,r7,r2
    9b40:	408b883a 	add	r5,r8,r2
    9b44:	21cd803a 	cmpltu	r6,r4,r7
    9b48:	314b883a 	add	r5,r6,r5
    9b4c:	7904703a 	and	r2,r15,r4
    9b50:	8146703a 	and	r3,r16,r5
    9b54:	10c4b03a 	or	r2,r2,r3
    9b58:	10000226 	beq	r2,zero,9b64 <_fpadd_parts+0xe0>
    9b5c:	02400044 	movi	r9,1
    9b60:	0015883a 	mov	r10,zero
    9b64:	5a5eb03a 	or	r15,r11,r9
    9b68:	62a0b03a 	or	r16,r12,r10
    9b6c:	99400117 	ldw	r5,4(r19)
    9b70:	a8800117 	ldw	r2,4(r21)
    9b74:	28806e26 	beq	r5,r2,9d30 <_fpadd_parts+0x2ac>
    9b78:	28006626 	beq	r5,zero,9d14 <_fpadd_parts+0x290>
    9b7c:	7c45c83a 	sub	r2,r15,r17
    9b80:	7889803a 	cmpltu	r4,r15,r2
    9b84:	8487c83a 	sub	r3,r16,r18
    9b88:	1909c83a 	sub	r4,r3,r4
    9b8c:	100d883a 	mov	r6,r2
    9b90:	200f883a 	mov	r7,r4
    9b94:	38007716 	blt	r7,zero,9d74 <_fpadd_parts+0x2f0>
    9b98:	a5c00215 	stw	r23,8(r20)
    9b9c:	a1c00415 	stw	r7,16(r20)
    9ba0:	a0000115 	stw	zero,4(r20)
    9ba4:	a1800315 	stw	r6,12(r20)
    9ba8:	a2000317 	ldw	r8,12(r20)
    9bac:	a2400417 	ldw	r9,16(r20)
    9bb0:	00bfffc4 	movi	r2,-1
    9bb4:	408b883a 	add	r5,r8,r2
    9bb8:	2a09803a 	cmpltu	r4,r5,r8
    9bbc:	488d883a 	add	r6,r9,r2
    9bc0:	01c40034 	movhi	r7,4096
    9bc4:	39ffffc4 	addi	r7,r7,-1
    9bc8:	218d883a 	add	r6,r4,r6
    9bcc:	39801736 	bltu	r7,r6,9c2c <_fpadd_parts+0x1a8>
    9bd0:	31c06526 	beq	r6,r7,9d68 <_fpadd_parts+0x2e4>
    9bd4:	a3000217 	ldw	r12,8(r20)
    9bd8:	4209883a 	add	r4,r8,r8
    9bdc:	00bfffc4 	movi	r2,-1
    9be0:	220f803a 	cmpltu	r7,r4,r8
    9be4:	4a4b883a 	add	r5,r9,r9
    9be8:	394f883a 	add	r7,r7,r5
    9bec:	2095883a 	add	r10,r4,r2
    9bf0:	3897883a 	add	r11,r7,r2
    9bf4:	510d803a 	cmpltu	r6,r10,r4
    9bf8:	6099883a 	add	r12,r12,r2
    9bfc:	32d7883a 	add	r11,r6,r11
    9c00:	00840034 	movhi	r2,4096
    9c04:	10bfffc4 	addi	r2,r2,-1
    9c08:	2011883a 	mov	r8,r4
    9c0c:	3813883a 	mov	r9,r7
    9c10:	a1000315 	stw	r4,12(r20)
    9c14:	a1c00415 	stw	r7,16(r20)
    9c18:	a3000215 	stw	r12,8(r20)
    9c1c:	12c00336 	bltu	r2,r11,9c2c <_fpadd_parts+0x1a8>
    9c20:	58bfed1e 	bne	r11,r2,9bd8 <_fpadd_parts+0x154>
    9c24:	00bfff84 	movi	r2,-2
    9c28:	12bfeb2e 	bgeu	r2,r10,9bd8 <_fpadd_parts+0x154>
    9c2c:	a2800417 	ldw	r10,16(r20)
    9c30:	008000c4 	movi	r2,3
    9c34:	00c80034 	movhi	r3,8192
    9c38:	18ffffc4 	addi	r3,r3,-1
    9c3c:	a2400317 	ldw	r9,12(r20)
    9c40:	a0800015 	stw	r2,0(r20)
    9c44:	1a802336 	bltu	r3,r10,9cd4 <_fpadd_parts+0x250>
    9c48:	a027883a 	mov	r19,r20
    9c4c:	9805883a 	mov	r2,r19
    9c50:	ddc00717 	ldw	r23,28(sp)
    9c54:	dd800617 	ldw	r22,24(sp)
    9c58:	dd400517 	ldw	r21,20(sp)
    9c5c:	dd000417 	ldw	r20,16(sp)
    9c60:	dcc00317 	ldw	r19,12(sp)
    9c64:	dc800217 	ldw	r18,8(sp)
    9c68:	dc400117 	ldw	r17,4(sp)
    9c6c:	dc000017 	ldw	r16,0(sp)
    9c70:	dec00804 	addi	sp,sp,32
    9c74:	f800283a 	ret
    9c78:	20fff41e 	bne	r4,r3,9c4c <_fpadd_parts+0x1c8>
    9c7c:	31000015 	stw	r4,0(r6)
    9c80:	98800117 	ldw	r2,4(r19)
    9c84:	30800115 	stw	r2,4(r6)
    9c88:	98c00217 	ldw	r3,8(r19)
    9c8c:	30c00215 	stw	r3,8(r6)
    9c90:	98800317 	ldw	r2,12(r19)
    9c94:	30800315 	stw	r2,12(r6)
    9c98:	98c00417 	ldw	r3,16(r19)
    9c9c:	30c00415 	stw	r3,16(r6)
    9ca0:	98800117 	ldw	r2,4(r19)
    9ca4:	28c00117 	ldw	r3,4(r5)
    9ca8:	3027883a 	mov	r19,r6
    9cac:	10c4703a 	and	r2,r2,r3
    9cb0:	30800115 	stw	r2,4(r6)
    9cb4:	003fe506 	br	9c4c <_fpadd_parts+0x1c8>
    9cb8:	1dc02616 	blt	r3,r23,9d54 <_fpadd_parts+0x2d0>
    9cbc:	0023883a 	mov	r17,zero
    9cc0:	182f883a 	mov	r23,r3
    9cc4:	0025883a 	mov	r18,zero
    9cc8:	003fa806 	br	9b6c <_fpadd_parts+0xe8>
    9ccc:	a827883a 	mov	r19,r21
    9cd0:	003fde06 	br	9c4c <_fpadd_parts+0x1c8>
    9cd4:	01800044 	movi	r6,1
    9cd8:	500497fa 	slli	r2,r10,31
    9cdc:	4808d07a 	srli	r4,r9,1
    9ce0:	518ad83a 	srl	r5,r10,r6
    9ce4:	a2000217 	ldw	r8,8(r20)
    9ce8:	1108b03a 	or	r4,r2,r4
    9cec:	0007883a 	mov	r3,zero
    9cf0:	4984703a 	and	r2,r9,r6
    9cf4:	208cb03a 	or	r6,r4,r2
    9cf8:	28ceb03a 	or	r7,r5,r3
    9cfc:	42000044 	addi	r8,r8,1
    9d00:	a027883a 	mov	r19,r20
    9d04:	a1c00415 	stw	r7,16(r20)
    9d08:	a2000215 	stw	r8,8(r20)
    9d0c:	a1800315 	stw	r6,12(r20)
    9d10:	003fce06 	br	9c4c <_fpadd_parts+0x1c8>
    9d14:	8bc5c83a 	sub	r2,r17,r15
    9d18:	8889803a 	cmpltu	r4,r17,r2
    9d1c:	9407c83a 	sub	r3,r18,r16
    9d20:	1909c83a 	sub	r4,r3,r4
    9d24:	100d883a 	mov	r6,r2
    9d28:	200f883a 	mov	r7,r4
    9d2c:	003f9906 	br	9b94 <_fpadd_parts+0x110>
    9d30:	7c45883a 	add	r2,r15,r17
    9d34:	13c9803a 	cmpltu	r4,r2,r15
    9d38:	8487883a 	add	r3,r16,r18
    9d3c:	20c9883a 	add	r4,r4,r3
    9d40:	a1400115 	stw	r5,4(r20)
    9d44:	a5c00215 	stw	r23,8(r20)
    9d48:	a0800315 	stw	r2,12(r20)
    9d4c:	a1000415 	stw	r4,16(r20)
    9d50:	003fb606 	br	9c2c <_fpadd_parts+0x1a8>
    9d54:	001f883a 	mov	r15,zero
    9d58:	0021883a 	mov	r16,zero
    9d5c:	003f8306 	br	9b6c <_fpadd_parts+0xe8>
    9d60:	018dc83a 	sub	r6,zero,r6
    9d64:	003f6706 	br	9b04 <_fpadd_parts+0x80>
    9d68:	00bfff84 	movi	r2,-2
    9d6c:	117faf36 	bltu	r2,r5,9c2c <_fpadd_parts+0x1a8>
    9d70:	003f9806 	br	9bd4 <_fpadd_parts+0x150>
    9d74:	0005883a 	mov	r2,zero
    9d78:	1189c83a 	sub	r4,r2,r6
    9d7c:	1105803a 	cmpltu	r2,r2,r4
    9d80:	01cbc83a 	sub	r5,zero,r7
    9d84:	2885c83a 	sub	r2,r5,r2
    9d88:	01800044 	movi	r6,1
    9d8c:	a1800115 	stw	r6,4(r20)
    9d90:	a5c00215 	stw	r23,8(r20)
    9d94:	a1000315 	stw	r4,12(r20)
    9d98:	a0800415 	stw	r2,16(r20)
    9d9c:	003f8206 	br	9ba8 <_fpadd_parts+0x124>
    9da0:	203f7226 	beq	r4,zero,9b6c <_fpadd_parts+0xe8>
    9da4:	35bff804 	addi	r22,r6,-32
    9da8:	b9af883a 	add	r23,r23,r6
    9dac:	b0003116 	blt	r22,zero,9e74 <_fpadd_parts+0x3f0>
    9db0:	959ad83a 	srl	r13,r18,r22
    9db4:	001d883a 	mov	r14,zero
    9db8:	000f883a 	mov	r7,zero
    9dbc:	01000044 	movi	r4,1
    9dc0:	0011883a 	mov	r8,zero
    9dc4:	b0002516 	blt	r22,zero,9e5c <_fpadd_parts+0x3d8>
    9dc8:	2594983a 	sll	r10,r4,r22
    9dcc:	0013883a 	mov	r9,zero
    9dd0:	00bfffc4 	movi	r2,-1
    9dd4:	4889883a 	add	r4,r9,r2
    9dd8:	508b883a 	add	r5,r10,r2
    9ddc:	224d803a 	cmpltu	r6,r4,r9
    9de0:	314b883a 	add	r5,r6,r5
    9de4:	8904703a 	and	r2,r17,r4
    9de8:	9146703a 	and	r3,r18,r5
    9dec:	10c4b03a 	or	r2,r2,r3
    9df0:	10000226 	beq	r2,zero,9dfc <_fpadd_parts+0x378>
    9df4:	01c00044 	movi	r7,1
    9df8:	0011883a 	mov	r8,zero
    9dfc:	69e2b03a 	or	r17,r13,r7
    9e00:	7224b03a 	or	r18,r14,r8
    9e04:	003f5906 	br	9b6c <_fpadd_parts+0xe8>
    9e08:	8407883a 	add	r3,r16,r16
    9e0c:	008007c4 	movi	r2,31
    9e10:	1185c83a 	sub	r2,r2,r6
    9e14:	1886983a 	sll	r3,r3,r2
    9e18:	7996d83a 	srl	r11,r15,r6
    9e1c:	8198d83a 	srl	r12,r16,r6
    9e20:	1ad6b03a 	or	r11,r3,r11
    9e24:	003f3e06 	br	9b20 <_fpadd_parts+0x9c>
    9e28:	2006d07a 	srli	r3,r4,1
    9e2c:	008007c4 	movi	r2,31
    9e30:	1185c83a 	sub	r2,r2,r6
    9e34:	1890d83a 	srl	r8,r3,r2
    9e38:	218e983a 	sll	r7,r4,r6
    9e3c:	003f3e06 	br	9b38 <_fpadd_parts+0xb4>
    9e40:	113f821e 	bne	r2,r4,9c4c <_fpadd_parts+0x1c8>
    9e44:	28c00117 	ldw	r3,4(r5)
    9e48:	98800117 	ldw	r2,4(r19)
    9e4c:	10ff7f26 	beq	r2,r3,9c4c <_fpadd_parts+0x1c8>
    9e50:	04c00074 	movhi	r19,1
    9e54:	9cc89204 	addi	r19,r19,8776
    9e58:	003f7c06 	br	9c4c <_fpadd_parts+0x1c8>
    9e5c:	2006d07a 	srli	r3,r4,1
    9e60:	008007c4 	movi	r2,31
    9e64:	1185c83a 	sub	r2,r2,r6
    9e68:	1894d83a 	srl	r10,r3,r2
    9e6c:	2192983a 	sll	r9,r4,r6
    9e70:	003fd706 	br	9dd0 <_fpadd_parts+0x34c>
    9e74:	9487883a 	add	r3,r18,r18
    9e78:	008007c4 	movi	r2,31
    9e7c:	1185c83a 	sub	r2,r2,r6
    9e80:	1886983a 	sll	r3,r3,r2
    9e84:	899ad83a 	srl	r13,r17,r6
    9e88:	919cd83a 	srl	r14,r18,r6
    9e8c:	1b5ab03a 	or	r13,r3,r13
    9e90:	003fc906 	br	9db8 <_fpadd_parts+0x334>

00009e94 <__subdf3>:
    9e94:	deffea04 	addi	sp,sp,-88
    9e98:	dcc01415 	stw	r19,80(sp)
    9e9c:	dcc00404 	addi	r19,sp,16
    9ea0:	2011883a 	mov	r8,r4
    9ea4:	2813883a 	mov	r9,r5
    9ea8:	dc401315 	stw	r17,76(sp)
    9eac:	d809883a 	mov	r4,sp
    9eb0:	980b883a 	mov	r5,r19
    9eb4:	dc400904 	addi	r17,sp,36
    9eb8:	dfc01515 	stw	ra,84(sp)
    9ebc:	da400115 	stw	r9,4(sp)
    9ec0:	d9c00315 	stw	r7,12(sp)
    9ec4:	da000015 	stw	r8,0(sp)
    9ec8:	d9800215 	stw	r6,8(sp)
    9ecc:	000b0a80 	call	b0a8 <__unpack_d>
    9ed0:	d9000204 	addi	r4,sp,8
    9ed4:	880b883a 	mov	r5,r17
    9ed8:	000b0a80 	call	b0a8 <__unpack_d>
    9edc:	d8800a17 	ldw	r2,40(sp)
    9ee0:	880b883a 	mov	r5,r17
    9ee4:	9809883a 	mov	r4,r19
    9ee8:	d9800e04 	addi	r6,sp,56
    9eec:	1080005c 	xori	r2,r2,1
    9ef0:	d8800a15 	stw	r2,40(sp)
    9ef4:	0009a840 	call	9a84 <_fpadd_parts>
    9ef8:	1009883a 	mov	r4,r2
    9efc:	000ad940 	call	ad94 <__pack_d>
    9f00:	dfc01517 	ldw	ra,84(sp)
    9f04:	dcc01417 	ldw	r19,80(sp)
    9f08:	dc401317 	ldw	r17,76(sp)
    9f0c:	dec01604 	addi	sp,sp,88
    9f10:	f800283a 	ret

00009f14 <__adddf3>:
    9f14:	deffea04 	addi	sp,sp,-88
    9f18:	dcc01415 	stw	r19,80(sp)
    9f1c:	dcc00404 	addi	r19,sp,16
    9f20:	2011883a 	mov	r8,r4
    9f24:	2813883a 	mov	r9,r5
    9f28:	dc401315 	stw	r17,76(sp)
    9f2c:	d809883a 	mov	r4,sp
    9f30:	980b883a 	mov	r5,r19
    9f34:	dc400904 	addi	r17,sp,36
    9f38:	dfc01515 	stw	ra,84(sp)
    9f3c:	da400115 	stw	r9,4(sp)
    9f40:	d9c00315 	stw	r7,12(sp)
    9f44:	da000015 	stw	r8,0(sp)
    9f48:	d9800215 	stw	r6,8(sp)
    9f4c:	000b0a80 	call	b0a8 <__unpack_d>
    9f50:	d9000204 	addi	r4,sp,8
    9f54:	880b883a 	mov	r5,r17
    9f58:	000b0a80 	call	b0a8 <__unpack_d>
    9f5c:	d9800e04 	addi	r6,sp,56
    9f60:	9809883a 	mov	r4,r19
    9f64:	880b883a 	mov	r5,r17
    9f68:	0009a840 	call	9a84 <_fpadd_parts>
    9f6c:	1009883a 	mov	r4,r2
    9f70:	000ad940 	call	ad94 <__pack_d>
    9f74:	dfc01517 	ldw	ra,84(sp)
    9f78:	dcc01417 	ldw	r19,80(sp)
    9f7c:	dc401317 	ldw	r17,76(sp)
    9f80:	dec01604 	addi	sp,sp,88
    9f84:	f800283a 	ret

00009f88 <__muldf3>:
    9f88:	deffe004 	addi	sp,sp,-128
    9f8c:	dc401815 	stw	r17,96(sp)
    9f90:	dc400404 	addi	r17,sp,16
    9f94:	2011883a 	mov	r8,r4
    9f98:	2813883a 	mov	r9,r5
    9f9c:	dc001715 	stw	r16,92(sp)
    9fa0:	d809883a 	mov	r4,sp
    9fa4:	880b883a 	mov	r5,r17
    9fa8:	dc000904 	addi	r16,sp,36
    9fac:	dfc01f15 	stw	ra,124(sp)
    9fb0:	da400115 	stw	r9,4(sp)
    9fb4:	d9c00315 	stw	r7,12(sp)
    9fb8:	da000015 	stw	r8,0(sp)
    9fbc:	d9800215 	stw	r6,8(sp)
    9fc0:	ddc01e15 	stw	r23,120(sp)
    9fc4:	dd801d15 	stw	r22,116(sp)
    9fc8:	dd401c15 	stw	r21,112(sp)
    9fcc:	dd001b15 	stw	r20,108(sp)
    9fd0:	dcc01a15 	stw	r19,104(sp)
    9fd4:	dc801915 	stw	r18,100(sp)
    9fd8:	000b0a80 	call	b0a8 <__unpack_d>
    9fdc:	d9000204 	addi	r4,sp,8
    9fe0:	800b883a 	mov	r5,r16
    9fe4:	000b0a80 	call	b0a8 <__unpack_d>
    9fe8:	d9000417 	ldw	r4,16(sp)
    9fec:	00800044 	movi	r2,1
    9ff0:	1100102e 	bgeu	r2,r4,a034 <__muldf3+0xac>
    9ff4:	d8c00917 	ldw	r3,36(sp)
    9ff8:	10c0062e 	bgeu	r2,r3,a014 <__muldf3+0x8c>
    9ffc:	00800104 	movi	r2,4
    a000:	20800a26 	beq	r4,r2,a02c <__muldf3+0xa4>
    a004:	1880cc26 	beq	r3,r2,a338 <__muldf3+0x3b0>
    a008:	00800084 	movi	r2,2
    a00c:	20800926 	beq	r4,r2,a034 <__muldf3+0xac>
    a010:	1880191e 	bne	r3,r2,a078 <__muldf3+0xf0>
    a014:	d8c00a17 	ldw	r3,40(sp)
    a018:	d8800517 	ldw	r2,20(sp)
    a01c:	8009883a 	mov	r4,r16
    a020:	10c4c03a 	cmpne	r2,r2,r3
    a024:	d8800a15 	stw	r2,40(sp)
    a028:	00000706 	br	a048 <__muldf3+0xc0>
    a02c:	00800084 	movi	r2,2
    a030:	1880c326 	beq	r3,r2,a340 <__muldf3+0x3b8>
    a034:	d8800517 	ldw	r2,20(sp)
    a038:	d8c00a17 	ldw	r3,40(sp)
    a03c:	8809883a 	mov	r4,r17
    a040:	10c4c03a 	cmpne	r2,r2,r3
    a044:	d8800515 	stw	r2,20(sp)
    a048:	000ad940 	call	ad94 <__pack_d>
    a04c:	dfc01f17 	ldw	ra,124(sp)
    a050:	ddc01e17 	ldw	r23,120(sp)
    a054:	dd801d17 	ldw	r22,116(sp)
    a058:	dd401c17 	ldw	r21,112(sp)
    a05c:	dd001b17 	ldw	r20,108(sp)
    a060:	dcc01a17 	ldw	r19,104(sp)
    a064:	dc801917 	ldw	r18,100(sp)
    a068:	dc401817 	ldw	r17,96(sp)
    a06c:	dc001717 	ldw	r16,92(sp)
    a070:	dec02004 	addi	sp,sp,128
    a074:	f800283a 	ret
    a078:	dd800717 	ldw	r22,28(sp)
    a07c:	dc800c17 	ldw	r18,48(sp)
    a080:	002b883a 	mov	r21,zero
    a084:	0023883a 	mov	r17,zero
    a088:	a80b883a 	mov	r5,r21
    a08c:	b00d883a 	mov	r6,r22
    a090:	880f883a 	mov	r7,r17
    a094:	ddc00817 	ldw	r23,32(sp)
    a098:	dcc00d17 	ldw	r19,52(sp)
    a09c:	9009883a 	mov	r4,r18
    a0a0:	000acfc0 	call	acfc <__muldi3>
    a0a4:	001b883a 	mov	r13,zero
    a0a8:	680f883a 	mov	r7,r13
    a0ac:	b009883a 	mov	r4,r22
    a0b0:	000b883a 	mov	r5,zero
    a0b4:	980d883a 	mov	r6,r19
    a0b8:	b82d883a 	mov	r22,r23
    a0bc:	002f883a 	mov	r23,zero
    a0c0:	db401615 	stw	r13,88(sp)
    a0c4:	d8801315 	stw	r2,76(sp)
    a0c8:	d8c01415 	stw	r3,80(sp)
    a0cc:	dcc01515 	stw	r19,84(sp)
    a0d0:	000acfc0 	call	acfc <__muldi3>
    a0d4:	b00d883a 	mov	r6,r22
    a0d8:	000b883a 	mov	r5,zero
    a0dc:	9009883a 	mov	r4,r18
    a0e0:	b80f883a 	mov	r7,r23
    a0e4:	1021883a 	mov	r16,r2
    a0e8:	1823883a 	mov	r17,r3
    a0ec:	000acfc0 	call	acfc <__muldi3>
    a0f0:	8085883a 	add	r2,r16,r2
    a0f4:	140d803a 	cmpltu	r6,r2,r16
    a0f8:	88c7883a 	add	r3,r17,r3
    a0fc:	30cd883a 	add	r6,r6,r3
    a100:	1029883a 	mov	r20,r2
    a104:	302b883a 	mov	r21,r6
    a108:	da801317 	ldw	r10,76(sp)
    a10c:	dac01417 	ldw	r11,80(sp)
    a110:	db001517 	ldw	r12,84(sp)
    a114:	db401617 	ldw	r13,88(sp)
    a118:	3440612e 	bgeu	r6,r17,a2a0 <__muldf3+0x318>
    a11c:	0009883a 	mov	r4,zero
    a120:	5105883a 	add	r2,r10,r4
    a124:	128d803a 	cmpltu	r6,r2,r10
    a128:	5d07883a 	add	r3,r11,r20
    a12c:	30cd883a 	add	r6,r6,r3
    a130:	0021883a 	mov	r16,zero
    a134:	04400044 	movi	r17,1
    a138:	1025883a 	mov	r18,r2
    a13c:	3027883a 	mov	r19,r6
    a140:	32c06236 	bltu	r6,r11,a2cc <__muldf3+0x344>
    a144:	59807a26 	beq	r11,r6,a330 <__muldf3+0x3a8>
    a148:	680b883a 	mov	r5,r13
    a14c:	b80f883a 	mov	r7,r23
    a150:	6009883a 	mov	r4,r12
    a154:	b00d883a 	mov	r6,r22
    a158:	000acfc0 	call	acfc <__muldi3>
    a15c:	1009883a 	mov	r4,r2
    a160:	000f883a 	mov	r7,zero
    a164:	1545883a 	add	r2,r2,r21
    a168:	1111803a 	cmpltu	r8,r2,r4
    a16c:	19c7883a 	add	r3,r3,r7
    a170:	40c7883a 	add	r3,r8,r3
    a174:	88cb883a 	add	r5,r17,r3
    a178:	d8c00617 	ldw	r3,24(sp)
    a17c:	8089883a 	add	r4,r16,r2
    a180:	d8800b17 	ldw	r2,44(sp)
    a184:	18c00104 	addi	r3,r3,4
    a188:	240d803a 	cmpltu	r6,r4,r16
    a18c:	10c7883a 	add	r3,r2,r3
    a190:	2013883a 	mov	r9,r4
    a194:	d8800a17 	ldw	r2,40(sp)
    a198:	d9000517 	ldw	r4,20(sp)
    a19c:	314d883a 	add	r6,r6,r5
    a1a0:	3015883a 	mov	r10,r6
    a1a4:	2088c03a 	cmpne	r4,r4,r2
    a1a8:	00880034 	movhi	r2,8192
    a1ac:	10bfffc4 	addi	r2,r2,-1
    a1b0:	d9000f15 	stw	r4,60(sp)
    a1b4:	d8c01015 	stw	r3,64(sp)
    a1b8:	1180162e 	bgeu	r2,r6,a214 <__muldf3+0x28c>
    a1bc:	1811883a 	mov	r8,r3
    a1c0:	101f883a 	mov	r15,r2
    a1c4:	980497fa 	slli	r2,r19,31
    a1c8:	9016d07a 	srli	r11,r18,1
    a1cc:	500697fa 	slli	r3,r10,31
    a1d0:	480cd07a 	srli	r6,r9,1
    a1d4:	500ed07a 	srli	r7,r10,1
    a1d8:	12d6b03a 	or	r11,r2,r11
    a1dc:	00800044 	movi	r2,1
    a1e0:	198cb03a 	or	r6,r3,r6
    a1e4:	4888703a 	and	r4,r9,r2
    a1e8:	9818d07a 	srli	r12,r19,1
    a1ec:	001b883a 	mov	r13,zero
    a1f0:	03a00034 	movhi	r14,32768
    a1f4:	3013883a 	mov	r9,r6
    a1f8:	3815883a 	mov	r10,r7
    a1fc:	4091883a 	add	r8,r8,r2
    a200:	20000226 	beq	r4,zero,a20c <__muldf3+0x284>
    a204:	5b64b03a 	or	r18,r11,r13
    a208:	63a6b03a 	or	r19,r12,r14
    a20c:	7abfed36 	bltu	r15,r10,a1c4 <__muldf3+0x23c>
    a210:	da001015 	stw	r8,64(sp)
    a214:	00840034 	movhi	r2,4096
    a218:	10bfffc4 	addi	r2,r2,-1
    a21c:	12801436 	bltu	r2,r10,a270 <__muldf3+0x2e8>
    a220:	da001017 	ldw	r8,64(sp)
    a224:	101f883a 	mov	r15,r2
    a228:	4a45883a 	add	r2,r9,r9
    a22c:	124d803a 	cmpltu	r6,r2,r9
    a230:	5287883a 	add	r3,r10,r10
    a234:	9497883a 	add	r11,r18,r18
    a238:	5c8f803a 	cmpltu	r7,r11,r18
    a23c:	9cd9883a 	add	r12,r19,r19
    a240:	01000044 	movi	r4,1
    a244:	30cd883a 	add	r6,r6,r3
    a248:	3b0f883a 	add	r7,r7,r12
    a24c:	423fffc4 	addi	r8,r8,-1
    a250:	1013883a 	mov	r9,r2
    a254:	3015883a 	mov	r10,r6
    a258:	111ab03a 	or	r13,r2,r4
    a25c:	98003016 	blt	r19,zero,a320 <__muldf3+0x398>
    a260:	5825883a 	mov	r18,r11
    a264:	3827883a 	mov	r19,r7
    a268:	7abfef2e 	bgeu	r15,r10,a228 <__muldf3+0x2a0>
    a26c:	da001015 	stw	r8,64(sp)
    a270:	00803fc4 	movi	r2,255
    a274:	488e703a 	and	r7,r9,r2
    a278:	00802004 	movi	r2,128
    a27c:	0007883a 	mov	r3,zero
    a280:	0011883a 	mov	r8,zero
    a284:	38801826 	beq	r7,r2,a2e8 <__muldf3+0x360>
    a288:	008000c4 	movi	r2,3
    a28c:	d9000e04 	addi	r4,sp,56
    a290:	da801215 	stw	r10,72(sp)
    a294:	d8800e15 	stw	r2,56(sp)
    a298:	da401115 	stw	r9,68(sp)
    a29c:	003f6a06 	br	a048 <__muldf3+0xc0>
    a2a0:	89802126 	beq	r17,r6,a328 <__muldf3+0x3a0>
    a2a4:	0009883a 	mov	r4,zero
    a2a8:	5105883a 	add	r2,r10,r4
    a2ac:	128d803a 	cmpltu	r6,r2,r10
    a2b0:	5d07883a 	add	r3,r11,r20
    a2b4:	30cd883a 	add	r6,r6,r3
    a2b8:	0021883a 	mov	r16,zero
    a2bc:	0023883a 	mov	r17,zero
    a2c0:	1025883a 	mov	r18,r2
    a2c4:	3027883a 	mov	r19,r6
    a2c8:	32ff9e2e 	bgeu	r6,r11,a144 <__muldf3+0x1bc>
    a2cc:	00800044 	movi	r2,1
    a2d0:	8089883a 	add	r4,r16,r2
    a2d4:	240d803a 	cmpltu	r6,r4,r16
    a2d8:	344d883a 	add	r6,r6,r17
    a2dc:	2021883a 	mov	r16,r4
    a2e0:	3023883a 	mov	r17,r6
    a2e4:	003f9806 	br	a148 <__muldf3+0x1c0>
    a2e8:	403fe71e 	bne	r8,zero,a288 <__muldf3+0x300>
    a2ec:	01004004 	movi	r4,256
    a2f0:	4904703a 	and	r2,r9,r4
    a2f4:	10c4b03a 	or	r2,r2,r3
    a2f8:	103fe31e 	bne	r2,zero,a288 <__muldf3+0x300>
    a2fc:	94c4b03a 	or	r2,r18,r19
    a300:	103fe126 	beq	r2,zero,a288 <__muldf3+0x300>
    a304:	49c5883a 	add	r2,r9,r7
    a308:	1251803a 	cmpltu	r8,r2,r9
    a30c:	4291883a 	add	r8,r8,r10
    a310:	013fc004 	movi	r4,-256
    a314:	1112703a 	and	r9,r2,r4
    a318:	4015883a 	mov	r10,r8
    a31c:	003fda06 	br	a288 <__muldf3+0x300>
    a320:	6813883a 	mov	r9,r13
    a324:	003fce06 	br	a260 <__muldf3+0x2d8>
    a328:	143f7c36 	bltu	r2,r16,a11c <__muldf3+0x194>
    a32c:	003fdd06 	br	a2a4 <__muldf3+0x31c>
    a330:	12bf852e 	bgeu	r2,r10,a148 <__muldf3+0x1c0>
    a334:	003fe506 	br	a2cc <__muldf3+0x344>
    a338:	00800084 	movi	r2,2
    a33c:	20bf351e 	bne	r4,r2,a014 <__muldf3+0x8c>
    a340:	01000074 	movhi	r4,1
    a344:	21089204 	addi	r4,r4,8776
    a348:	003f3f06 	br	a048 <__muldf3+0xc0>

0000a34c <__divdf3>:
    a34c:	deffed04 	addi	sp,sp,-76
    a350:	dcc01115 	stw	r19,68(sp)
    a354:	dcc00404 	addi	r19,sp,16
    a358:	2011883a 	mov	r8,r4
    a35c:	2813883a 	mov	r9,r5
    a360:	dc000e15 	stw	r16,56(sp)
    a364:	d809883a 	mov	r4,sp
    a368:	980b883a 	mov	r5,r19
    a36c:	dc000904 	addi	r16,sp,36
    a370:	dfc01215 	stw	ra,72(sp)
    a374:	da400115 	stw	r9,4(sp)
    a378:	d9c00315 	stw	r7,12(sp)
    a37c:	da000015 	stw	r8,0(sp)
    a380:	d9800215 	stw	r6,8(sp)
    a384:	dc801015 	stw	r18,64(sp)
    a388:	dc400f15 	stw	r17,60(sp)
    a38c:	000b0a80 	call	b0a8 <__unpack_d>
    a390:	d9000204 	addi	r4,sp,8
    a394:	800b883a 	mov	r5,r16
    a398:	000b0a80 	call	b0a8 <__unpack_d>
    a39c:	d9000417 	ldw	r4,16(sp)
    a3a0:	00800044 	movi	r2,1
    a3a4:	11000b2e 	bgeu	r2,r4,a3d4 <__divdf3+0x88>
    a3a8:	d9400917 	ldw	r5,36(sp)
    a3ac:	1140762e 	bgeu	r2,r5,a588 <__divdf3+0x23c>
    a3b0:	d8800517 	ldw	r2,20(sp)
    a3b4:	d8c00a17 	ldw	r3,40(sp)
    a3b8:	01800104 	movi	r6,4
    a3bc:	10c4f03a 	xor	r2,r2,r3
    a3c0:	d8800515 	stw	r2,20(sp)
    a3c4:	21800226 	beq	r4,r6,a3d0 <__divdf3+0x84>
    a3c8:	00800084 	movi	r2,2
    a3cc:	2080141e 	bne	r4,r2,a420 <__divdf3+0xd4>
    a3d0:	29000926 	beq	r5,r4,a3f8 <__divdf3+0xac>
    a3d4:	9809883a 	mov	r4,r19
    a3d8:	000ad940 	call	ad94 <__pack_d>
    a3dc:	dfc01217 	ldw	ra,72(sp)
    a3e0:	dcc01117 	ldw	r19,68(sp)
    a3e4:	dc801017 	ldw	r18,64(sp)
    a3e8:	dc400f17 	ldw	r17,60(sp)
    a3ec:	dc000e17 	ldw	r16,56(sp)
    a3f0:	dec01304 	addi	sp,sp,76
    a3f4:	f800283a 	ret
    a3f8:	01000074 	movhi	r4,1
    a3fc:	21089204 	addi	r4,r4,8776
    a400:	000ad940 	call	ad94 <__pack_d>
    a404:	dfc01217 	ldw	ra,72(sp)
    a408:	dcc01117 	ldw	r19,68(sp)
    a40c:	dc801017 	ldw	r18,64(sp)
    a410:	dc400f17 	ldw	r17,60(sp)
    a414:	dc000e17 	ldw	r16,56(sp)
    a418:	dec01304 	addi	sp,sp,76
    a41c:	f800283a 	ret
    a420:	29805b26 	beq	r5,r6,a590 <__divdf3+0x244>
    a424:	28802d26 	beq	r5,r2,a4dc <__divdf3+0x190>
    a428:	d8c00617 	ldw	r3,24(sp)
    a42c:	d8800b17 	ldw	r2,44(sp)
    a430:	d9c00817 	ldw	r7,32(sp)
    a434:	dc400d17 	ldw	r17,52(sp)
    a438:	188bc83a 	sub	r5,r3,r2
    a43c:	d9800717 	ldw	r6,28(sp)
    a440:	dc000c17 	ldw	r16,48(sp)
    a444:	d9400615 	stw	r5,24(sp)
    a448:	3c403836 	bltu	r7,r17,a52c <__divdf3+0x1e0>
    a44c:	89c03626 	beq	r17,r7,a528 <__divdf3+0x1dc>
    a450:	0015883a 	mov	r10,zero
    a454:	001d883a 	mov	r14,zero
    a458:	02c40034 	movhi	r11,4096
    a45c:	001f883a 	mov	r15,zero
    a460:	003f883a 	mov	ra,zero
    a464:	04800f44 	movi	r18,61
    a468:	00000f06 	br	a4a8 <__divdf3+0x15c>
    a46c:	601d883a 	mov	r14,r12
    a470:	681f883a 	mov	r15,r13
    a474:	400d883a 	mov	r6,r8
    a478:	100f883a 	mov	r7,r2
    a47c:	3191883a 	add	r8,r6,r6
    a480:	5808d07a 	srli	r4,r11,1
    a484:	4185803a 	cmpltu	r2,r8,r6
    a488:	39d3883a 	add	r9,r7,r7
    a48c:	28c6b03a 	or	r3,r5,r3
    a490:	1245883a 	add	r2,r2,r9
    a494:	1815883a 	mov	r10,r3
    a498:	2017883a 	mov	r11,r4
    a49c:	400d883a 	mov	r6,r8
    a4a0:	100f883a 	mov	r7,r2
    a4a4:	fc801726 	beq	ra,r18,a504 <__divdf3+0x1b8>
    a4a8:	580a97fa 	slli	r5,r11,31
    a4ac:	5006d07a 	srli	r3,r10,1
    a4b0:	ffc00044 	addi	ra,ra,1
    a4b4:	3c7ff136 	bltu	r7,r17,a47c <__divdf3+0x130>
    a4b8:	3411c83a 	sub	r8,r6,r16
    a4bc:	3205803a 	cmpltu	r2,r6,r8
    a4c0:	3c53c83a 	sub	r9,r7,r17
    a4c4:	7298b03a 	or	r12,r14,r10
    a4c8:	7adab03a 	or	r13,r15,r11
    a4cc:	4885c83a 	sub	r2,r9,r2
    a4d0:	89ffe61e 	bne	r17,r7,a46c <__divdf3+0x120>
    a4d4:	343fe936 	bltu	r6,r16,a47c <__divdf3+0x130>
    a4d8:	003fe406 	br	a46c <__divdf3+0x120>
    a4dc:	9809883a 	mov	r4,r19
    a4e0:	d9800415 	stw	r6,16(sp)
    a4e4:	000ad940 	call	ad94 <__pack_d>
    a4e8:	dfc01217 	ldw	ra,72(sp)
    a4ec:	dcc01117 	ldw	r19,68(sp)
    a4f0:	dc801017 	ldw	r18,64(sp)
    a4f4:	dc400f17 	ldw	r17,60(sp)
    a4f8:	dc000e17 	ldw	r16,56(sp)
    a4fc:	dec01304 	addi	sp,sp,76
    a500:	f800283a 	ret
    a504:	00803fc4 	movi	r2,255
    a508:	7090703a 	and	r8,r14,r2
    a50c:	00802004 	movi	r2,128
    a510:	0007883a 	mov	r3,zero
    a514:	0013883a 	mov	r9,zero
    a518:	40800d26 	beq	r8,r2,a550 <__divdf3+0x204>
    a51c:	dbc00815 	stw	r15,32(sp)
    a520:	db800715 	stw	r14,28(sp)
    a524:	003fab06 	br	a3d4 <__divdf3+0x88>
    a528:	343fc92e 	bgeu	r6,r16,a450 <__divdf3+0x104>
    a52c:	3185883a 	add	r2,r6,r6
    a530:	1189803a 	cmpltu	r4,r2,r6
    a534:	39c7883a 	add	r3,r7,r7
    a538:	20c9883a 	add	r4,r4,r3
    a53c:	297fffc4 	addi	r5,r5,-1
    a540:	100d883a 	mov	r6,r2
    a544:	200f883a 	mov	r7,r4
    a548:	d9400615 	stw	r5,24(sp)
    a54c:	003fc006 	br	a450 <__divdf3+0x104>
    a550:	483ff21e 	bne	r9,zero,a51c <__divdf3+0x1d0>
    a554:	01004004 	movi	r4,256
    a558:	7104703a 	and	r2,r14,r4
    a55c:	10c4b03a 	or	r2,r2,r3
    a560:	103fee1e 	bne	r2,zero,a51c <__divdf3+0x1d0>
    a564:	31c4b03a 	or	r2,r6,r7
    a568:	103fec26 	beq	r2,zero,a51c <__divdf3+0x1d0>
    a56c:	7205883a 	add	r2,r14,r8
    a570:	1391803a 	cmpltu	r8,r2,r14
    a574:	43d1883a 	add	r8,r8,r15
    a578:	013fc004 	movi	r4,-256
    a57c:	111c703a 	and	r14,r2,r4
    a580:	401f883a 	mov	r15,r8
    a584:	003fe506 	br	a51c <__divdf3+0x1d0>
    a588:	8009883a 	mov	r4,r16
    a58c:	003f9206 	br	a3d8 <__divdf3+0x8c>
    a590:	9809883a 	mov	r4,r19
    a594:	d8000715 	stw	zero,28(sp)
    a598:	d8000815 	stw	zero,32(sp)
    a59c:	d8000615 	stw	zero,24(sp)
    a5a0:	003f8d06 	br	a3d8 <__divdf3+0x8c>

0000a5a4 <__eqdf2>:
    a5a4:	deffef04 	addi	sp,sp,-68
    a5a8:	dc400f15 	stw	r17,60(sp)
    a5ac:	dc400404 	addi	r17,sp,16
    a5b0:	2005883a 	mov	r2,r4
    a5b4:	2807883a 	mov	r3,r5
    a5b8:	dc000e15 	stw	r16,56(sp)
    a5bc:	d809883a 	mov	r4,sp
    a5c0:	880b883a 	mov	r5,r17
    a5c4:	dc000904 	addi	r16,sp,36
    a5c8:	d8c00115 	stw	r3,4(sp)
    a5cc:	d8800015 	stw	r2,0(sp)
    a5d0:	d9800215 	stw	r6,8(sp)
    a5d4:	dfc01015 	stw	ra,64(sp)
    a5d8:	d9c00315 	stw	r7,12(sp)
    a5dc:	000b0a80 	call	b0a8 <__unpack_d>
    a5e0:	d9000204 	addi	r4,sp,8
    a5e4:	800b883a 	mov	r5,r16
    a5e8:	000b0a80 	call	b0a8 <__unpack_d>
    a5ec:	d8800417 	ldw	r2,16(sp)
    a5f0:	00c00044 	movi	r3,1
    a5f4:	180d883a 	mov	r6,r3
    a5f8:	1880062e 	bgeu	r3,r2,a614 <__eqdf2+0x70>
    a5fc:	d8800917 	ldw	r2,36(sp)
    a600:	8809883a 	mov	r4,r17
    a604:	800b883a 	mov	r5,r16
    a608:	1880022e 	bgeu	r3,r2,a614 <__eqdf2+0x70>
    a60c:	000b1e00 	call	b1e0 <__fpcmp_parts_d>
    a610:	100d883a 	mov	r6,r2
    a614:	3005883a 	mov	r2,r6
    a618:	dfc01017 	ldw	ra,64(sp)
    a61c:	dc400f17 	ldw	r17,60(sp)
    a620:	dc000e17 	ldw	r16,56(sp)
    a624:	dec01104 	addi	sp,sp,68
    a628:	f800283a 	ret

0000a62c <__nedf2>:
    a62c:	deffef04 	addi	sp,sp,-68
    a630:	dc400f15 	stw	r17,60(sp)
    a634:	dc400404 	addi	r17,sp,16
    a638:	2005883a 	mov	r2,r4
    a63c:	2807883a 	mov	r3,r5
    a640:	dc000e15 	stw	r16,56(sp)
    a644:	d809883a 	mov	r4,sp
    a648:	880b883a 	mov	r5,r17
    a64c:	dc000904 	addi	r16,sp,36
    a650:	d8c00115 	stw	r3,4(sp)
    a654:	d8800015 	stw	r2,0(sp)
    a658:	d9800215 	stw	r6,8(sp)
    a65c:	dfc01015 	stw	ra,64(sp)
    a660:	d9c00315 	stw	r7,12(sp)
    a664:	000b0a80 	call	b0a8 <__unpack_d>
    a668:	d9000204 	addi	r4,sp,8
    a66c:	800b883a 	mov	r5,r16
    a670:	000b0a80 	call	b0a8 <__unpack_d>
    a674:	d8800417 	ldw	r2,16(sp)
    a678:	00c00044 	movi	r3,1
    a67c:	180d883a 	mov	r6,r3
    a680:	1880062e 	bgeu	r3,r2,a69c <__nedf2+0x70>
    a684:	d8800917 	ldw	r2,36(sp)
    a688:	8809883a 	mov	r4,r17
    a68c:	800b883a 	mov	r5,r16
    a690:	1880022e 	bgeu	r3,r2,a69c <__nedf2+0x70>
    a694:	000b1e00 	call	b1e0 <__fpcmp_parts_d>
    a698:	100d883a 	mov	r6,r2
    a69c:	3005883a 	mov	r2,r6
    a6a0:	dfc01017 	ldw	ra,64(sp)
    a6a4:	dc400f17 	ldw	r17,60(sp)
    a6a8:	dc000e17 	ldw	r16,56(sp)
    a6ac:	dec01104 	addi	sp,sp,68
    a6b0:	f800283a 	ret

0000a6b4 <__gtdf2>:
    a6b4:	deffef04 	addi	sp,sp,-68
    a6b8:	dc400f15 	stw	r17,60(sp)
    a6bc:	dc400404 	addi	r17,sp,16
    a6c0:	2005883a 	mov	r2,r4
    a6c4:	2807883a 	mov	r3,r5
    a6c8:	dc000e15 	stw	r16,56(sp)
    a6cc:	d809883a 	mov	r4,sp
    a6d0:	880b883a 	mov	r5,r17
    a6d4:	dc000904 	addi	r16,sp,36
    a6d8:	d8c00115 	stw	r3,4(sp)
    a6dc:	d8800015 	stw	r2,0(sp)
    a6e0:	d9800215 	stw	r6,8(sp)
    a6e4:	dfc01015 	stw	ra,64(sp)
    a6e8:	d9c00315 	stw	r7,12(sp)
    a6ec:	000b0a80 	call	b0a8 <__unpack_d>
    a6f0:	d9000204 	addi	r4,sp,8
    a6f4:	800b883a 	mov	r5,r16
    a6f8:	000b0a80 	call	b0a8 <__unpack_d>
    a6fc:	d8800417 	ldw	r2,16(sp)
    a700:	00c00044 	movi	r3,1
    a704:	01bfffc4 	movi	r6,-1
    a708:	1880062e 	bgeu	r3,r2,a724 <__gtdf2+0x70>
    a70c:	d8800917 	ldw	r2,36(sp)
    a710:	8809883a 	mov	r4,r17
    a714:	800b883a 	mov	r5,r16
    a718:	1880022e 	bgeu	r3,r2,a724 <__gtdf2+0x70>
    a71c:	000b1e00 	call	b1e0 <__fpcmp_parts_d>
    a720:	100d883a 	mov	r6,r2
    a724:	3005883a 	mov	r2,r6
    a728:	dfc01017 	ldw	ra,64(sp)
    a72c:	dc400f17 	ldw	r17,60(sp)
    a730:	dc000e17 	ldw	r16,56(sp)
    a734:	dec01104 	addi	sp,sp,68
    a738:	f800283a 	ret

0000a73c <__gedf2>:
    a73c:	deffef04 	addi	sp,sp,-68
    a740:	dc400f15 	stw	r17,60(sp)
    a744:	dc400404 	addi	r17,sp,16
    a748:	2005883a 	mov	r2,r4
    a74c:	2807883a 	mov	r3,r5
    a750:	dc000e15 	stw	r16,56(sp)
    a754:	d809883a 	mov	r4,sp
    a758:	880b883a 	mov	r5,r17
    a75c:	dc000904 	addi	r16,sp,36
    a760:	d8c00115 	stw	r3,4(sp)
    a764:	d8800015 	stw	r2,0(sp)
    a768:	d9800215 	stw	r6,8(sp)
    a76c:	dfc01015 	stw	ra,64(sp)
    a770:	d9c00315 	stw	r7,12(sp)
    a774:	000b0a80 	call	b0a8 <__unpack_d>
    a778:	d9000204 	addi	r4,sp,8
    a77c:	800b883a 	mov	r5,r16
    a780:	000b0a80 	call	b0a8 <__unpack_d>
    a784:	d8800417 	ldw	r2,16(sp)
    a788:	00c00044 	movi	r3,1
    a78c:	01bfffc4 	movi	r6,-1
    a790:	1880062e 	bgeu	r3,r2,a7ac <__gedf2+0x70>
    a794:	d8800917 	ldw	r2,36(sp)
    a798:	8809883a 	mov	r4,r17
    a79c:	800b883a 	mov	r5,r16
    a7a0:	1880022e 	bgeu	r3,r2,a7ac <__gedf2+0x70>
    a7a4:	000b1e00 	call	b1e0 <__fpcmp_parts_d>
    a7a8:	100d883a 	mov	r6,r2
    a7ac:	3005883a 	mov	r2,r6
    a7b0:	dfc01017 	ldw	ra,64(sp)
    a7b4:	dc400f17 	ldw	r17,60(sp)
    a7b8:	dc000e17 	ldw	r16,56(sp)
    a7bc:	dec01104 	addi	sp,sp,68
    a7c0:	f800283a 	ret

0000a7c4 <__ltdf2>:
    a7c4:	deffef04 	addi	sp,sp,-68
    a7c8:	dc400f15 	stw	r17,60(sp)
    a7cc:	dc400404 	addi	r17,sp,16
    a7d0:	2005883a 	mov	r2,r4
    a7d4:	2807883a 	mov	r3,r5
    a7d8:	dc000e15 	stw	r16,56(sp)
    a7dc:	d809883a 	mov	r4,sp
    a7e0:	880b883a 	mov	r5,r17
    a7e4:	dc000904 	addi	r16,sp,36
    a7e8:	d8c00115 	stw	r3,4(sp)
    a7ec:	d8800015 	stw	r2,0(sp)
    a7f0:	d9800215 	stw	r6,8(sp)
    a7f4:	dfc01015 	stw	ra,64(sp)
    a7f8:	d9c00315 	stw	r7,12(sp)
    a7fc:	000b0a80 	call	b0a8 <__unpack_d>
    a800:	d9000204 	addi	r4,sp,8
    a804:	800b883a 	mov	r5,r16
    a808:	000b0a80 	call	b0a8 <__unpack_d>
    a80c:	d8800417 	ldw	r2,16(sp)
    a810:	00c00044 	movi	r3,1
    a814:	180d883a 	mov	r6,r3
    a818:	1880062e 	bgeu	r3,r2,a834 <__ltdf2+0x70>
    a81c:	d8800917 	ldw	r2,36(sp)
    a820:	8809883a 	mov	r4,r17
    a824:	800b883a 	mov	r5,r16
    a828:	1880022e 	bgeu	r3,r2,a834 <__ltdf2+0x70>
    a82c:	000b1e00 	call	b1e0 <__fpcmp_parts_d>
    a830:	100d883a 	mov	r6,r2
    a834:	3005883a 	mov	r2,r6
    a838:	dfc01017 	ldw	ra,64(sp)
    a83c:	dc400f17 	ldw	r17,60(sp)
    a840:	dc000e17 	ldw	r16,56(sp)
    a844:	dec01104 	addi	sp,sp,68
    a848:	f800283a 	ret

0000a84c <__floatsidf>:
    a84c:	2006d7fa 	srli	r3,r4,31
    a850:	defff604 	addi	sp,sp,-40
    a854:	008000c4 	movi	r2,3
    a858:	dfc00915 	stw	ra,36(sp)
    a85c:	dcc00815 	stw	r19,32(sp)
    a860:	dc800715 	stw	r18,28(sp)
    a864:	dc400615 	stw	r17,24(sp)
    a868:	dc000515 	stw	r16,20(sp)
    a86c:	d8800015 	stw	r2,0(sp)
    a870:	d8c00115 	stw	r3,4(sp)
    a874:	20000f1e 	bne	r4,zero,a8b4 <__floatsidf+0x68>
    a878:	00800084 	movi	r2,2
    a87c:	d8800015 	stw	r2,0(sp)
    a880:	d809883a 	mov	r4,sp
    a884:	000ad940 	call	ad94 <__pack_d>
    a888:	1009883a 	mov	r4,r2
    a88c:	180b883a 	mov	r5,r3
    a890:	2005883a 	mov	r2,r4
    a894:	2807883a 	mov	r3,r5
    a898:	dfc00917 	ldw	ra,36(sp)
    a89c:	dcc00817 	ldw	r19,32(sp)
    a8a0:	dc800717 	ldw	r18,28(sp)
    a8a4:	dc400617 	ldw	r17,24(sp)
    a8a8:	dc000517 	ldw	r16,20(sp)
    a8ac:	dec00a04 	addi	sp,sp,40
    a8b0:	f800283a 	ret
    a8b4:	00800f04 	movi	r2,60
    a8b8:	1807003a 	cmpeq	r3,r3,zero
    a8bc:	d8800215 	stw	r2,8(sp)
    a8c0:	18001126 	beq	r3,zero,a908 <__floatsidf+0xbc>
    a8c4:	0027883a 	mov	r19,zero
    a8c8:	2025883a 	mov	r18,r4
    a8cc:	d9000315 	stw	r4,12(sp)
    a8d0:	dcc00415 	stw	r19,16(sp)
    a8d4:	00016940 	call	1694 <__clzsi2>
    a8d8:	11000744 	addi	r4,r2,29
    a8dc:	013fe80e 	bge	zero,r4,a880 <__floatsidf+0x34>
    a8e0:	10bfff44 	addi	r2,r2,-3
    a8e4:	10000c16 	blt	r2,zero,a918 <__floatsidf+0xcc>
    a8e8:	90a2983a 	sll	r17,r18,r2
    a8ec:	0021883a 	mov	r16,zero
    a8f0:	d8800217 	ldw	r2,8(sp)
    a8f4:	dc400415 	stw	r17,16(sp)
    a8f8:	dc000315 	stw	r16,12(sp)
    a8fc:	1105c83a 	sub	r2,r2,r4
    a900:	d8800215 	stw	r2,8(sp)
    a904:	003fde06 	br	a880 <__floatsidf+0x34>
    a908:	00a00034 	movhi	r2,32768
    a90c:	20800a26 	beq	r4,r2,a938 <__floatsidf+0xec>
    a910:	0109c83a 	sub	r4,zero,r4
    a914:	003feb06 	br	a8c4 <__floatsidf+0x78>
    a918:	9006d07a 	srli	r3,r18,1
    a91c:	008007c4 	movi	r2,31
    a920:	1105c83a 	sub	r2,r2,r4
    a924:	1886d83a 	srl	r3,r3,r2
    a928:	9922983a 	sll	r17,r19,r4
    a92c:	9120983a 	sll	r16,r18,r4
    a930:	1c62b03a 	or	r17,r3,r17
    a934:	003fee06 	br	a8f0 <__floatsidf+0xa4>
    a938:	0009883a 	mov	r4,zero
    a93c:	01707834 	movhi	r5,49632
    a940:	003fd306 	br	a890 <__floatsidf+0x44>

0000a944 <__fixdfsi>:
    a944:	defff804 	addi	sp,sp,-32
    a948:	2005883a 	mov	r2,r4
    a94c:	2807883a 	mov	r3,r5
    a950:	d809883a 	mov	r4,sp
    a954:	d9400204 	addi	r5,sp,8
    a958:	d8c00115 	stw	r3,4(sp)
    a95c:	d8800015 	stw	r2,0(sp)
    a960:	dfc00715 	stw	ra,28(sp)
    a964:	000b0a80 	call	b0a8 <__unpack_d>
    a968:	d8c00217 	ldw	r3,8(sp)
    a96c:	00800084 	movi	r2,2
    a970:	1880051e 	bne	r3,r2,a988 <__fixdfsi+0x44>
    a974:	0007883a 	mov	r3,zero
    a978:	1805883a 	mov	r2,r3
    a97c:	dfc00717 	ldw	ra,28(sp)
    a980:	dec00804 	addi	sp,sp,32
    a984:	f800283a 	ret
    a988:	00800044 	movi	r2,1
    a98c:	10fff92e 	bgeu	r2,r3,a974 <__fixdfsi+0x30>
    a990:	00800104 	movi	r2,4
    a994:	18800426 	beq	r3,r2,a9a8 <__fixdfsi+0x64>
    a998:	d8c00417 	ldw	r3,16(sp)
    a99c:	183ff516 	blt	r3,zero,a974 <__fixdfsi+0x30>
    a9a0:	00800784 	movi	r2,30
    a9a4:	10c0080e 	bge	r2,r3,a9c8 <__fixdfsi+0x84>
    a9a8:	d8800317 	ldw	r2,12(sp)
    a9ac:	1000121e 	bne	r2,zero,a9f8 <__fixdfsi+0xb4>
    a9b0:	00e00034 	movhi	r3,32768
    a9b4:	18ffffc4 	addi	r3,r3,-1
    a9b8:	1805883a 	mov	r2,r3
    a9bc:	dfc00717 	ldw	ra,28(sp)
    a9c0:	dec00804 	addi	sp,sp,32
    a9c4:	f800283a 	ret
    a9c8:	00800f04 	movi	r2,60
    a9cc:	10d1c83a 	sub	r8,r2,r3
    a9d0:	40bff804 	addi	r2,r8,-32
    a9d4:	d9800517 	ldw	r6,20(sp)
    a9d8:	d9c00617 	ldw	r7,24(sp)
    a9dc:	10000816 	blt	r2,zero,aa00 <__fixdfsi+0xbc>
    a9e0:	3888d83a 	srl	r4,r7,r2
    a9e4:	d8800317 	ldw	r2,12(sp)
    a9e8:	2007883a 	mov	r3,r4
    a9ec:	103fe226 	beq	r2,zero,a978 <__fixdfsi+0x34>
    a9f0:	0107c83a 	sub	r3,zero,r4
    a9f4:	003fe006 	br	a978 <__fixdfsi+0x34>
    a9f8:	00e00034 	movhi	r3,32768
    a9fc:	003fde06 	br	a978 <__fixdfsi+0x34>
    aa00:	39c7883a 	add	r3,r7,r7
    aa04:	008007c4 	movi	r2,31
    aa08:	1205c83a 	sub	r2,r2,r8
    aa0c:	1886983a 	sll	r3,r3,r2
    aa10:	3208d83a 	srl	r4,r6,r8
    aa14:	1908b03a 	or	r4,r3,r4
    aa18:	003ff206 	br	a9e4 <__fixdfsi+0xa0>

0000aa1c <__floatunsidf>:
    aa1c:	defff204 	addi	sp,sp,-56
    aa20:	dfc00d15 	stw	ra,52(sp)
    aa24:	ddc00c15 	stw	r23,48(sp)
    aa28:	dd800b15 	stw	r22,44(sp)
    aa2c:	dd400a15 	stw	r21,40(sp)
    aa30:	dd000915 	stw	r20,36(sp)
    aa34:	dcc00815 	stw	r19,32(sp)
    aa38:	dc800715 	stw	r18,28(sp)
    aa3c:	dc400615 	stw	r17,24(sp)
    aa40:	dc000515 	stw	r16,20(sp)
    aa44:	d8000115 	stw	zero,4(sp)
    aa48:	20000f1e 	bne	r4,zero,aa88 <__floatunsidf+0x6c>
    aa4c:	00800084 	movi	r2,2
    aa50:	d8800015 	stw	r2,0(sp)
    aa54:	d809883a 	mov	r4,sp
    aa58:	000ad940 	call	ad94 <__pack_d>
    aa5c:	dfc00d17 	ldw	ra,52(sp)
    aa60:	ddc00c17 	ldw	r23,48(sp)
    aa64:	dd800b17 	ldw	r22,44(sp)
    aa68:	dd400a17 	ldw	r21,40(sp)
    aa6c:	dd000917 	ldw	r20,36(sp)
    aa70:	dcc00817 	ldw	r19,32(sp)
    aa74:	dc800717 	ldw	r18,28(sp)
    aa78:	dc400617 	ldw	r17,24(sp)
    aa7c:	dc000517 	ldw	r16,20(sp)
    aa80:	dec00e04 	addi	sp,sp,56
    aa84:	f800283a 	ret
    aa88:	008000c4 	movi	r2,3
    aa8c:	00c00f04 	movi	r3,60
    aa90:	002f883a 	mov	r23,zero
    aa94:	202d883a 	mov	r22,r4
    aa98:	d8800015 	stw	r2,0(sp)
    aa9c:	d8c00215 	stw	r3,8(sp)
    aaa0:	d9000315 	stw	r4,12(sp)
    aaa4:	ddc00415 	stw	r23,16(sp)
    aaa8:	00016940 	call	1694 <__clzsi2>
    aaac:	12400744 	addi	r9,r2,29
    aab0:	48000b16 	blt	r9,zero,aae0 <__floatunsidf+0xc4>
    aab4:	483fe726 	beq	r9,zero,aa54 <__floatunsidf+0x38>
    aab8:	10bfff44 	addi	r2,r2,-3
    aabc:	10002e16 	blt	r2,zero,ab78 <__floatunsidf+0x15c>
    aac0:	b0a2983a 	sll	r17,r22,r2
    aac4:	0021883a 	mov	r16,zero
    aac8:	d8800217 	ldw	r2,8(sp)
    aacc:	dc400415 	stw	r17,16(sp)
    aad0:	dc000315 	stw	r16,12(sp)
    aad4:	1245c83a 	sub	r2,r2,r9
    aad8:	d8800215 	stw	r2,8(sp)
    aadc:	003fdd06 	br	aa54 <__floatunsidf+0x38>
    aae0:	0255c83a 	sub	r10,zero,r9
    aae4:	51bff804 	addi	r6,r10,-32
    aae8:	30001b16 	blt	r6,zero,ab58 <__floatunsidf+0x13c>
    aaec:	b9a8d83a 	srl	r20,r23,r6
    aaf0:	002b883a 	mov	r21,zero
    aaf4:	000f883a 	mov	r7,zero
    aaf8:	01000044 	movi	r4,1
    aafc:	0011883a 	mov	r8,zero
    ab00:	30002516 	blt	r6,zero,ab98 <__floatunsidf+0x17c>
    ab04:	21a6983a 	sll	r19,r4,r6
    ab08:	0025883a 	mov	r18,zero
    ab0c:	00bfffc4 	movi	r2,-1
    ab10:	9089883a 	add	r4,r18,r2
    ab14:	988b883a 	add	r5,r19,r2
    ab18:	248d803a 	cmpltu	r6,r4,r18
    ab1c:	314b883a 	add	r5,r6,r5
    ab20:	b104703a 	and	r2,r22,r4
    ab24:	b946703a 	and	r3,r23,r5
    ab28:	10c4b03a 	or	r2,r2,r3
    ab2c:	10000226 	beq	r2,zero,ab38 <__floatunsidf+0x11c>
    ab30:	01c00044 	movi	r7,1
    ab34:	0011883a 	mov	r8,zero
    ab38:	d9000217 	ldw	r4,8(sp)
    ab3c:	a1c4b03a 	or	r2,r20,r7
    ab40:	aa06b03a 	or	r3,r21,r8
    ab44:	2249c83a 	sub	r4,r4,r9
    ab48:	d8c00415 	stw	r3,16(sp)
    ab4c:	d9000215 	stw	r4,8(sp)
    ab50:	d8800315 	stw	r2,12(sp)
    ab54:	003fbf06 	br	aa54 <__floatunsidf+0x38>
    ab58:	bdc7883a 	add	r3,r23,r23
    ab5c:	008007c4 	movi	r2,31
    ab60:	1285c83a 	sub	r2,r2,r10
    ab64:	1886983a 	sll	r3,r3,r2
    ab68:	b2a8d83a 	srl	r20,r22,r10
    ab6c:	baaad83a 	srl	r21,r23,r10
    ab70:	1d28b03a 	or	r20,r3,r20
    ab74:	003fdf06 	br	aaf4 <__floatunsidf+0xd8>
    ab78:	b006d07a 	srli	r3,r22,1
    ab7c:	008007c4 	movi	r2,31
    ab80:	1245c83a 	sub	r2,r2,r9
    ab84:	1886d83a 	srl	r3,r3,r2
    ab88:	ba62983a 	sll	r17,r23,r9
    ab8c:	b260983a 	sll	r16,r22,r9
    ab90:	1c62b03a 	or	r17,r3,r17
    ab94:	003fcc06 	br	aac8 <__floatunsidf+0xac>
    ab98:	2006d07a 	srli	r3,r4,1
    ab9c:	008007c4 	movi	r2,31
    aba0:	1285c83a 	sub	r2,r2,r10
    aba4:	18a6d83a 	srl	r19,r3,r2
    aba8:	22a4983a 	sll	r18,r4,r10
    abac:	003fd706 	br	ab0c <__floatunsidf+0xf0>

0000abb0 <udivmodsi4>:
    abb0:	29001b2e 	bgeu	r5,r4,ac20 <udivmodsi4+0x70>
    abb4:	28001a16 	blt	r5,zero,ac20 <udivmodsi4+0x70>
    abb8:	00800044 	movi	r2,1
    abbc:	0007883a 	mov	r3,zero
    abc0:	01c007c4 	movi	r7,31
    abc4:	00000306 	br	abd4 <udivmodsi4+0x24>
    abc8:	19c01326 	beq	r3,r7,ac18 <udivmodsi4+0x68>
    abcc:	18c00044 	addi	r3,r3,1
    abd0:	28000416 	blt	r5,zero,abe4 <udivmodsi4+0x34>
    abd4:	294b883a 	add	r5,r5,r5
    abd8:	1085883a 	add	r2,r2,r2
    abdc:	293ffa36 	bltu	r5,r4,abc8 <udivmodsi4+0x18>
    abe0:	10000d26 	beq	r2,zero,ac18 <udivmodsi4+0x68>
    abe4:	0007883a 	mov	r3,zero
    abe8:	21400236 	bltu	r4,r5,abf4 <udivmodsi4+0x44>
    abec:	2149c83a 	sub	r4,r4,r5
    abf0:	1886b03a 	or	r3,r3,r2
    abf4:	1004d07a 	srli	r2,r2,1
    abf8:	280ad07a 	srli	r5,r5,1
    abfc:	103ffa1e 	bne	r2,zero,abe8 <udivmodsi4+0x38>
    ac00:	30000226 	beq	r6,zero,ac0c <udivmodsi4+0x5c>
    ac04:	2005883a 	mov	r2,r4
    ac08:	f800283a 	ret
    ac0c:	1809883a 	mov	r4,r3
    ac10:	2005883a 	mov	r2,r4
    ac14:	f800283a 	ret
    ac18:	0007883a 	mov	r3,zero
    ac1c:	003ff806 	br	ac00 <udivmodsi4+0x50>
    ac20:	00800044 	movi	r2,1
    ac24:	0007883a 	mov	r3,zero
    ac28:	003fef06 	br	abe8 <udivmodsi4+0x38>

0000ac2c <__divsi3>:
    ac2c:	defffe04 	addi	sp,sp,-8
    ac30:	dc000015 	stw	r16,0(sp)
    ac34:	dfc00115 	stw	ra,4(sp)
    ac38:	0021883a 	mov	r16,zero
    ac3c:	20000c16 	blt	r4,zero,ac70 <__divsi3+0x44>
    ac40:	000d883a 	mov	r6,zero
    ac44:	28000e16 	blt	r5,zero,ac80 <__divsi3+0x54>
    ac48:	000abb00 	call	abb0 <udivmodsi4>
    ac4c:	1007883a 	mov	r3,r2
    ac50:	8005003a 	cmpeq	r2,r16,zero
    ac54:	1000011e 	bne	r2,zero,ac5c <__divsi3+0x30>
    ac58:	00c7c83a 	sub	r3,zero,r3
    ac5c:	1805883a 	mov	r2,r3
    ac60:	dfc00117 	ldw	ra,4(sp)
    ac64:	dc000017 	ldw	r16,0(sp)
    ac68:	dec00204 	addi	sp,sp,8
    ac6c:	f800283a 	ret
    ac70:	0109c83a 	sub	r4,zero,r4
    ac74:	04000044 	movi	r16,1
    ac78:	000d883a 	mov	r6,zero
    ac7c:	283ff20e 	bge	r5,zero,ac48 <__divsi3+0x1c>
    ac80:	014bc83a 	sub	r5,zero,r5
    ac84:	8021003a 	cmpeq	r16,r16,zero
    ac88:	003fef06 	br	ac48 <__divsi3+0x1c>

0000ac8c <__modsi3>:
    ac8c:	deffff04 	addi	sp,sp,-4
    ac90:	dfc00015 	stw	ra,0(sp)
    ac94:	01800044 	movi	r6,1
    ac98:	2807883a 	mov	r3,r5
    ac9c:	20000416 	blt	r4,zero,acb0 <__modsi3+0x24>
    aca0:	28000c16 	blt	r5,zero,acd4 <__modsi3+0x48>
    aca4:	dfc00017 	ldw	ra,0(sp)
    aca8:	dec00104 	addi	sp,sp,4
    acac:	000abb01 	jmpi	abb0 <udivmodsi4>
    acb0:	0109c83a 	sub	r4,zero,r4
    acb4:	28000b16 	blt	r5,zero,ace4 <__modsi3+0x58>
    acb8:	180b883a 	mov	r5,r3
    acbc:	01800044 	movi	r6,1
    acc0:	000abb00 	call	abb0 <udivmodsi4>
    acc4:	0085c83a 	sub	r2,zero,r2
    acc8:	dfc00017 	ldw	ra,0(sp)
    accc:	dec00104 	addi	sp,sp,4
    acd0:	f800283a 	ret
    acd4:	014bc83a 	sub	r5,zero,r5
    acd8:	dfc00017 	ldw	ra,0(sp)
    acdc:	dec00104 	addi	sp,sp,4
    ace0:	000abb01 	jmpi	abb0 <udivmodsi4>
    ace4:	0147c83a 	sub	r3,zero,r5
    ace8:	003ff306 	br	acb8 <__modsi3+0x2c>

0000acec <__udivsi3>:
    acec:	000d883a 	mov	r6,zero
    acf0:	000abb01 	jmpi	abb0 <udivmodsi4>

0000acf4 <__umodsi3>:
    acf4:	01800044 	movi	r6,1
    acf8:	000abb01 	jmpi	abb0 <udivmodsi4>

0000acfc <__muldi3>:
    acfc:	2011883a 	mov	r8,r4
    ad00:	427fffcc 	andi	r9,r8,65535
    ad04:	4018d43a 	srli	r12,r8,16
    ad08:	32bfffcc 	andi	r10,r6,65535
    ad0c:	3016d43a 	srli	r11,r6,16
    ad10:	4a85383a 	mul	r2,r9,r10
    ad14:	6295383a 	mul	r10,r12,r10
    ad18:	4ad3383a 	mul	r9,r9,r11
    ad1c:	113fffcc 	andi	r4,r2,65535
    ad20:	1004d43a 	srli	r2,r2,16
    ad24:	4a93883a 	add	r9,r9,r10
    ad28:	3807883a 	mov	r3,r7
    ad2c:	1245883a 	add	r2,r2,r9
    ad30:	280f883a 	mov	r7,r5
    ad34:	180b883a 	mov	r5,r3
    ad38:	1006943a 	slli	r3,r2,16
    ad3c:	defffd04 	addi	sp,sp,-12
    ad40:	dc800215 	stw	r18,8(sp)
    ad44:	1907883a 	add	r3,r3,r4
    ad48:	dc400115 	stw	r17,4(sp)
    ad4c:	dc000015 	stw	r16,0(sp)
    ad50:	4165383a 	mul	r18,r8,r5
    ad54:	31e3383a 	mul	r17,r6,r7
    ad58:	1012d43a 	srli	r9,r2,16
    ad5c:	62d9383a 	mul	r12,r12,r11
    ad60:	181f883a 	mov	r15,r3
    ad64:	1280022e 	bgeu	r2,r10,ad70 <__muldi3+0x74>
    ad68:	00800074 	movhi	r2,1
    ad6c:	6099883a 	add	r12,r12,r2
    ad70:	624d883a 	add	r6,r12,r9
    ad74:	9187883a 	add	r3,r18,r6
    ad78:	88c7883a 	add	r3,r17,r3
    ad7c:	7805883a 	mov	r2,r15
    ad80:	dc800217 	ldw	r18,8(sp)
    ad84:	dc400117 	ldw	r17,4(sp)
    ad88:	dc000017 	ldw	r16,0(sp)
    ad8c:	dec00304 	addi	sp,sp,12
    ad90:	f800283a 	ret

0000ad94 <__pack_d>:
    ad94:	20c00017 	ldw	r3,0(r4)
    ad98:	defffd04 	addi	sp,sp,-12
    ad9c:	dc000015 	stw	r16,0(sp)
    ada0:	dc800215 	stw	r18,8(sp)
    ada4:	dc400115 	stw	r17,4(sp)
    ada8:	00800044 	movi	r2,1
    adac:	22000317 	ldw	r8,12(r4)
    adb0:	001f883a 	mov	r15,zero
    adb4:	22400417 	ldw	r9,16(r4)
    adb8:	24000117 	ldw	r16,4(r4)
    adbc:	10c0552e 	bgeu	r2,r3,af14 <__pack_d+0x180>
    adc0:	00800104 	movi	r2,4
    adc4:	18804f26 	beq	r3,r2,af04 <__pack_d+0x170>
    adc8:	00800084 	movi	r2,2
    adcc:	18800226 	beq	r3,r2,add8 <__pack_d+0x44>
    add0:	4244b03a 	or	r2,r8,r9
    add4:	10001a1e 	bne	r2,zero,ae40 <__pack_d+0xac>
    add8:	000d883a 	mov	r6,zero
    addc:	000f883a 	mov	r7,zero
    ade0:	0011883a 	mov	r8,zero
    ade4:	00800434 	movhi	r2,16
    ade8:	10bfffc4 	addi	r2,r2,-1
    adec:	301d883a 	mov	r14,r6
    adf0:	3884703a 	and	r2,r7,r2
    adf4:	400a953a 	slli	r5,r8,20
    adf8:	79bffc2c 	andhi	r6,r15,65520
    adfc:	308cb03a 	or	r6,r6,r2
    ae00:	00e00434 	movhi	r3,32784
    ae04:	18ffffc4 	addi	r3,r3,-1
    ae08:	800497fa 	slli	r2,r16,31
    ae0c:	30c6703a 	and	r3,r6,r3
    ae10:	1946b03a 	or	r3,r3,r5
    ae14:	01600034 	movhi	r5,32768
    ae18:	297fffc4 	addi	r5,r5,-1
    ae1c:	194a703a 	and	r5,r3,r5
    ae20:	288ab03a 	or	r5,r5,r2
    ae24:	2807883a 	mov	r3,r5
    ae28:	7005883a 	mov	r2,r14
    ae2c:	dc800217 	ldw	r18,8(sp)
    ae30:	dc400117 	ldw	r17,4(sp)
    ae34:	dc000017 	ldw	r16,0(sp)
    ae38:	dec00304 	addi	sp,sp,12
    ae3c:	f800283a 	ret
    ae40:	21000217 	ldw	r4,8(r4)
    ae44:	00bf0084 	movi	r2,-1022
    ae48:	20803f16 	blt	r4,r2,af48 <__pack_d+0x1b4>
    ae4c:	0080ffc4 	movi	r2,1023
    ae50:	11002c16 	blt	r2,r4,af04 <__pack_d+0x170>
    ae54:	00803fc4 	movi	r2,255
    ae58:	408c703a 	and	r6,r8,r2
    ae5c:	00802004 	movi	r2,128
    ae60:	0007883a 	mov	r3,zero
    ae64:	000f883a 	mov	r7,zero
    ae68:	2280ffc4 	addi	r10,r4,1023
    ae6c:	30801e26 	beq	r6,r2,aee8 <__pack_d+0x154>
    ae70:	00801fc4 	movi	r2,127
    ae74:	4089883a 	add	r4,r8,r2
    ae78:	220d803a 	cmpltu	r6,r4,r8
    ae7c:	324d883a 	add	r6,r6,r9
    ae80:	2011883a 	mov	r8,r4
    ae84:	3013883a 	mov	r9,r6
    ae88:	00880034 	movhi	r2,8192
    ae8c:	10bfffc4 	addi	r2,r2,-1
    ae90:	12400d36 	bltu	r2,r9,aec8 <__pack_d+0x134>
    ae94:	4804963a 	slli	r2,r9,24
    ae98:	400cd23a 	srli	r6,r8,8
    ae9c:	480ed23a 	srli	r7,r9,8
    aea0:	013fffc4 	movi	r4,-1
    aea4:	118cb03a 	or	r6,r2,r6
    aea8:	01400434 	movhi	r5,16
    aeac:	297fffc4 	addi	r5,r5,-1
    aeb0:	3104703a 	and	r2,r6,r4
    aeb4:	3946703a 	and	r3,r7,r5
    aeb8:	5201ffcc 	andi	r8,r10,2047
    aebc:	100d883a 	mov	r6,r2
    aec0:	180f883a 	mov	r7,r3
    aec4:	003fc706 	br	ade4 <__pack_d+0x50>
    aec8:	480897fa 	slli	r4,r9,31
    aecc:	4004d07a 	srli	r2,r8,1
    aed0:	4806d07a 	srli	r3,r9,1
    aed4:	52800044 	addi	r10,r10,1
    aed8:	2084b03a 	or	r2,r4,r2
    aedc:	1011883a 	mov	r8,r2
    aee0:	1813883a 	mov	r9,r3
    aee4:	003feb06 	br	ae94 <__pack_d+0x100>
    aee8:	383fe11e 	bne	r7,zero,ae70 <__pack_d+0xdc>
    aeec:	01004004 	movi	r4,256
    aef0:	4104703a 	and	r2,r8,r4
    aef4:	10c4b03a 	or	r2,r2,r3
    aef8:	103fe326 	beq	r2,zero,ae88 <__pack_d+0xf4>
    aefc:	3005883a 	mov	r2,r6
    af00:	003fdc06 	br	ae74 <__pack_d+0xe0>
    af04:	000d883a 	mov	r6,zero
    af08:	000f883a 	mov	r7,zero
    af0c:	0201ffc4 	movi	r8,2047
    af10:	003fb406 	br	ade4 <__pack_d+0x50>
    af14:	0005883a 	mov	r2,zero
    af18:	00c00234 	movhi	r3,8
    af1c:	408cb03a 	or	r6,r8,r2
    af20:	48ceb03a 	or	r7,r9,r3
    af24:	013fffc4 	movi	r4,-1
    af28:	01400434 	movhi	r5,16
    af2c:	297fffc4 	addi	r5,r5,-1
    af30:	3104703a 	and	r2,r6,r4
    af34:	3946703a 	and	r3,r7,r5
    af38:	100d883a 	mov	r6,r2
    af3c:	180f883a 	mov	r7,r3
    af40:	0201ffc4 	movi	r8,2047
    af44:	003fa706 	br	ade4 <__pack_d+0x50>
    af48:	1109c83a 	sub	r4,r2,r4
    af4c:	00800e04 	movi	r2,56
    af50:	11004316 	blt	r2,r4,b060 <__pack_d+0x2cc>
    af54:	21fff804 	addi	r7,r4,-32
    af58:	38004516 	blt	r7,zero,b070 <__pack_d+0x2dc>
    af5c:	49d8d83a 	srl	r12,r9,r7
    af60:	001b883a 	mov	r13,zero
    af64:	0023883a 	mov	r17,zero
    af68:	01400044 	movi	r5,1
    af6c:	0025883a 	mov	r18,zero
    af70:	38004716 	blt	r7,zero,b090 <__pack_d+0x2fc>
    af74:	29d6983a 	sll	r11,r5,r7
    af78:	0015883a 	mov	r10,zero
    af7c:	00bfffc4 	movi	r2,-1
    af80:	5089883a 	add	r4,r10,r2
    af84:	588b883a 	add	r5,r11,r2
    af88:	228d803a 	cmpltu	r6,r4,r10
    af8c:	314b883a 	add	r5,r6,r5
    af90:	4104703a 	and	r2,r8,r4
    af94:	4946703a 	and	r3,r9,r5
    af98:	10c4b03a 	or	r2,r2,r3
    af9c:	10000226 	beq	r2,zero,afa8 <__pack_d+0x214>
    afa0:	04400044 	movi	r17,1
    afa4:	0025883a 	mov	r18,zero
    afa8:	00803fc4 	movi	r2,255
    afac:	644eb03a 	or	r7,r12,r17
    afb0:	3892703a 	and	r9,r7,r2
    afb4:	00802004 	movi	r2,128
    afb8:	6c90b03a 	or	r8,r13,r18
    afbc:	0015883a 	mov	r10,zero
    afc0:	48801626 	beq	r9,r2,b01c <__pack_d+0x288>
    afc4:	01001fc4 	movi	r4,127
    afc8:	3905883a 	add	r2,r7,r4
    afcc:	11cd803a 	cmpltu	r6,r2,r7
    afd0:	320d883a 	add	r6,r6,r8
    afd4:	100f883a 	mov	r7,r2
    afd8:	00840034 	movhi	r2,4096
    afdc:	10bfffc4 	addi	r2,r2,-1
    afe0:	3011883a 	mov	r8,r6
    afe4:	0007883a 	mov	r3,zero
    afe8:	11801b36 	bltu	r2,r6,b058 <__pack_d+0x2c4>
    afec:	4004963a 	slli	r2,r8,24
    aff0:	3808d23a 	srli	r4,r7,8
    aff4:	400ad23a 	srli	r5,r8,8
    aff8:	1813883a 	mov	r9,r3
    affc:	1108b03a 	or	r4,r2,r4
    b000:	00bfffc4 	movi	r2,-1
    b004:	00c00434 	movhi	r3,16
    b008:	18ffffc4 	addi	r3,r3,-1
    b00c:	208c703a 	and	r6,r4,r2
    b010:	28ce703a 	and	r7,r5,r3
    b014:	4a01ffcc 	andi	r8,r9,2047
    b018:	003f7206 	br	ade4 <__pack_d+0x50>
    b01c:	503fe91e 	bne	r10,zero,afc4 <__pack_d+0x230>
    b020:	01004004 	movi	r4,256
    b024:	3904703a 	and	r2,r7,r4
    b028:	0007883a 	mov	r3,zero
    b02c:	10c4b03a 	or	r2,r2,r3
    b030:	10000626 	beq	r2,zero,b04c <__pack_d+0x2b8>
    b034:	3a45883a 	add	r2,r7,r9
    b038:	11cd803a 	cmpltu	r6,r2,r7
    b03c:	320d883a 	add	r6,r6,r8
    b040:	100f883a 	mov	r7,r2
    b044:	3011883a 	mov	r8,r6
    b048:	0007883a 	mov	r3,zero
    b04c:	00840034 	movhi	r2,4096
    b050:	10bfffc4 	addi	r2,r2,-1
    b054:	123fe52e 	bgeu	r2,r8,afec <__pack_d+0x258>
    b058:	00c00044 	movi	r3,1
    b05c:	003fe306 	br	afec <__pack_d+0x258>
    b060:	0009883a 	mov	r4,zero
    b064:	0013883a 	mov	r9,zero
    b068:	000b883a 	mov	r5,zero
    b06c:	003fe406 	br	b000 <__pack_d+0x26c>
    b070:	4a47883a 	add	r3,r9,r9
    b074:	008007c4 	movi	r2,31
    b078:	1105c83a 	sub	r2,r2,r4
    b07c:	1886983a 	sll	r3,r3,r2
    b080:	4118d83a 	srl	r12,r8,r4
    b084:	491ad83a 	srl	r13,r9,r4
    b088:	1b18b03a 	or	r12,r3,r12
    b08c:	003fb506 	br	af64 <__pack_d+0x1d0>
    b090:	2806d07a 	srli	r3,r5,1
    b094:	008007c4 	movi	r2,31
    b098:	1105c83a 	sub	r2,r2,r4
    b09c:	1896d83a 	srl	r11,r3,r2
    b0a0:	2914983a 	sll	r10,r5,r4
    b0a4:	003fb506 	br	af7c <__pack_d+0x1e8>

0000b0a8 <__unpack_d>:
    b0a8:	20c00117 	ldw	r3,4(r4)
    b0ac:	22400017 	ldw	r9,0(r4)
    b0b0:	00800434 	movhi	r2,16
    b0b4:	10bfffc4 	addi	r2,r2,-1
    b0b8:	1808d53a 	srli	r4,r3,20
    b0bc:	180cd7fa 	srli	r6,r3,31
    b0c0:	1894703a 	and	r10,r3,r2
    b0c4:	2201ffcc 	andi	r8,r4,2047
    b0c8:	281b883a 	mov	r13,r5
    b0cc:	4817883a 	mov	r11,r9
    b0d0:	29800115 	stw	r6,4(r5)
    b0d4:	5019883a 	mov	r12,r10
    b0d8:	40001e1e 	bne	r8,zero,b154 <__unpack_d+0xac>
    b0dc:	4a84b03a 	or	r2,r9,r10
    b0e0:	10001926 	beq	r2,zero,b148 <__unpack_d+0xa0>
    b0e4:	4804d63a 	srli	r2,r9,24
    b0e8:	500c923a 	slli	r6,r10,8
    b0ec:	013f0084 	movi	r4,-1022
    b0f0:	00c40034 	movhi	r3,4096
    b0f4:	18ffffc4 	addi	r3,r3,-1
    b0f8:	118cb03a 	or	r6,r2,r6
    b0fc:	008000c4 	movi	r2,3
    b100:	480a923a 	slli	r5,r9,8
    b104:	68800015 	stw	r2,0(r13)
    b108:	69000215 	stw	r4,8(r13)
    b10c:	19800b36 	bltu	r3,r6,b13c <__unpack_d+0x94>
    b110:	200f883a 	mov	r7,r4
    b114:	1811883a 	mov	r8,r3
    b118:	2945883a 	add	r2,r5,r5
    b11c:	1149803a 	cmpltu	r4,r2,r5
    b120:	3187883a 	add	r3,r6,r6
    b124:	20c9883a 	add	r4,r4,r3
    b128:	100b883a 	mov	r5,r2
    b12c:	200d883a 	mov	r6,r4
    b130:	39ffffc4 	addi	r7,r7,-1
    b134:	413ff82e 	bgeu	r8,r4,b118 <__unpack_d+0x70>
    b138:	69c00215 	stw	r7,8(r13)
    b13c:	69800415 	stw	r6,16(r13)
    b140:	69400315 	stw	r5,12(r13)
    b144:	f800283a 	ret
    b148:	00800084 	movi	r2,2
    b14c:	28800015 	stw	r2,0(r5)
    b150:	f800283a 	ret
    b154:	0081ffc4 	movi	r2,2047
    b158:	40800f26 	beq	r8,r2,b198 <__unpack_d+0xf0>
    b15c:	480cd63a 	srli	r6,r9,24
    b160:	5006923a 	slli	r3,r10,8
    b164:	4804923a 	slli	r2,r9,8
    b168:	0009883a 	mov	r4,zero
    b16c:	30c6b03a 	or	r3,r6,r3
    b170:	01440034 	movhi	r5,4096
    b174:	110cb03a 	or	r6,r2,r4
    b178:	423f0044 	addi	r8,r8,-1023
    b17c:	194eb03a 	or	r7,r3,r5
    b180:	008000c4 	movi	r2,3
    b184:	69c00415 	stw	r7,16(r13)
    b188:	6a000215 	stw	r8,8(r13)
    b18c:	68800015 	stw	r2,0(r13)
    b190:	69800315 	stw	r6,12(r13)
    b194:	f800283a 	ret
    b198:	4a84b03a 	or	r2,r9,r10
    b19c:	1000031e 	bne	r2,zero,b1ac <__unpack_d+0x104>
    b1a0:	00800104 	movi	r2,4
    b1a4:	28800015 	stw	r2,0(r5)
    b1a8:	f800283a 	ret
    b1ac:	0009883a 	mov	r4,zero
    b1b0:	01400234 	movhi	r5,8
    b1b4:	4904703a 	and	r2,r9,r4
    b1b8:	5146703a 	and	r3,r10,r5
    b1bc:	10c4b03a 	or	r2,r2,r3
    b1c0:	10000526 	beq	r2,zero,b1d8 <__unpack_d+0x130>
    b1c4:	00800044 	movi	r2,1
    b1c8:	68800015 	stw	r2,0(r13)
    b1cc:	6b000415 	stw	r12,16(r13)
    b1d0:	6ac00315 	stw	r11,12(r13)
    b1d4:	f800283a 	ret
    b1d8:	68000015 	stw	zero,0(r13)
    b1dc:	003ffb06 	br	b1cc <__unpack_d+0x124>

0000b1e0 <__fpcmp_parts_d>:
    b1e0:	21800017 	ldw	r6,0(r4)
    b1e4:	00c00044 	movi	r3,1
    b1e8:	19800a2e 	bgeu	r3,r6,b214 <__fpcmp_parts_d+0x34>
    b1ec:	28800017 	ldw	r2,0(r5)
    b1f0:	1880082e 	bgeu	r3,r2,b214 <__fpcmp_parts_d+0x34>
    b1f4:	00c00104 	movi	r3,4
    b1f8:	30c02626 	beq	r6,r3,b294 <__fpcmp_parts_d+0xb4>
    b1fc:	10c02226 	beq	r2,r3,b288 <__fpcmp_parts_d+0xa8>
    b200:	00c00084 	movi	r3,2
    b204:	30c00526 	beq	r6,r3,b21c <__fpcmp_parts_d+0x3c>
    b208:	10c0071e 	bne	r2,r3,b228 <__fpcmp_parts_d+0x48>
    b20c:	20800117 	ldw	r2,4(r4)
    b210:	1000091e 	bne	r2,zero,b238 <__fpcmp_parts_d+0x58>
    b214:	00800044 	movi	r2,1
    b218:	f800283a 	ret
    b21c:	10c01a1e 	bne	r2,r3,b288 <__fpcmp_parts_d+0xa8>
    b220:	0005883a 	mov	r2,zero
    b224:	f800283a 	ret
    b228:	22000117 	ldw	r8,4(r4)
    b22c:	28800117 	ldw	r2,4(r5)
    b230:	40800326 	beq	r8,r2,b240 <__fpcmp_parts_d+0x60>
    b234:	403ff726 	beq	r8,zero,b214 <__fpcmp_parts_d+0x34>
    b238:	00bfffc4 	movi	r2,-1
    b23c:	f800283a 	ret
    b240:	20c00217 	ldw	r3,8(r4)
    b244:	28800217 	ldw	r2,8(r5)
    b248:	10fffa16 	blt	r2,r3,b234 <__fpcmp_parts_d+0x54>
    b24c:	18800916 	blt	r3,r2,b274 <__fpcmp_parts_d+0x94>
    b250:	21c00417 	ldw	r7,16(r4)
    b254:	28c00417 	ldw	r3,16(r5)
    b258:	21800317 	ldw	r6,12(r4)
    b25c:	28800317 	ldw	r2,12(r5)
    b260:	19fff436 	bltu	r3,r7,b234 <__fpcmp_parts_d+0x54>
    b264:	38c00526 	beq	r7,r3,b27c <__fpcmp_parts_d+0x9c>
    b268:	38c00236 	bltu	r7,r3,b274 <__fpcmp_parts_d+0x94>
    b26c:	19ffec1e 	bne	r3,r7,b220 <__fpcmp_parts_d+0x40>
    b270:	30bfeb2e 	bgeu	r6,r2,b220 <__fpcmp_parts_d+0x40>
    b274:	403fe71e 	bne	r8,zero,b214 <__fpcmp_parts_d+0x34>
    b278:	003fef06 	br	b238 <__fpcmp_parts_d+0x58>
    b27c:	11bffa2e 	bgeu	r2,r6,b268 <__fpcmp_parts_d+0x88>
    b280:	403fe426 	beq	r8,zero,b214 <__fpcmp_parts_d+0x34>
    b284:	003fec06 	br	b238 <__fpcmp_parts_d+0x58>
    b288:	28800117 	ldw	r2,4(r5)
    b28c:	103fe11e 	bne	r2,zero,b214 <__fpcmp_parts_d+0x34>
    b290:	003fe906 	br	b238 <__fpcmp_parts_d+0x58>
    b294:	11bfdd1e 	bne	r2,r6,b20c <__fpcmp_parts_d+0x2c>
    b298:	28c00117 	ldw	r3,4(r5)
    b29c:	20800117 	ldw	r2,4(r4)
    b2a0:	1885c83a 	sub	r2,r3,r2
    b2a4:	f800283a 	ret

0000b2a8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    b2a8:	defff804 	addi	sp,sp,-32
    b2ac:	dfc00715 	stw	ra,28(sp)
    b2b0:	df000615 	stw	fp,24(sp)
    b2b4:	df000604 	addi	fp,sp,24
    b2b8:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    b2bc:	e0bffc17 	ldw	r2,-16(fp)
    b2c0:	1004803a 	cmplt	r2,r2,zero
    b2c4:	1000081e 	bne	r2,zero,b2e8 <close+0x40>
    b2c8:	e0bffc17 	ldw	r2,-16(fp)
    b2cc:	10800324 	muli	r2,r2,12
    b2d0:	1007883a 	mov	r3,r2
    b2d4:	00800074 	movhi	r2,1
    b2d8:	108b1304 	addi	r2,r2,11340
    b2dc:	1887883a 	add	r3,r3,r2
    b2e0:	e0ffff15 	stw	r3,-4(fp)
    b2e4:	00000106 	br	b2ec <close+0x44>
    b2e8:	e03fff15 	stw	zero,-4(fp)
    b2ec:	e0bfff17 	ldw	r2,-4(fp)
    b2f0:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    b2f4:	e0bffb17 	ldw	r2,-20(fp)
    b2f8:	1005003a 	cmpeq	r2,r2,zero
    b2fc:	10001d1e 	bne	r2,zero,b374 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    b300:	e0bffb17 	ldw	r2,-20(fp)
    b304:	10800017 	ldw	r2,0(r2)
    b308:	10800417 	ldw	r2,16(r2)
    b30c:	1005003a 	cmpeq	r2,r2,zero
    b310:	1000071e 	bne	r2,zero,b330 <close+0x88>
    b314:	e0bffb17 	ldw	r2,-20(fp)
    b318:	10800017 	ldw	r2,0(r2)
    b31c:	10800417 	ldw	r2,16(r2)
    b320:	e13ffb17 	ldw	r4,-20(fp)
    b324:	103ee83a 	callr	r2
    b328:	e0bffe15 	stw	r2,-8(fp)
    b32c:	00000106 	br	b334 <close+0x8c>
    b330:	e03ffe15 	stw	zero,-8(fp)
    b334:	e0bffe17 	ldw	r2,-8(fp)
    b338:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    b33c:	e13ffc17 	ldw	r4,-16(fp)
    b340:	000bf440 	call	bf44 <alt_release_fd>
    if (rval < 0)
    b344:	e0bffa17 	ldw	r2,-24(fp)
    b348:	1004403a 	cmpge	r2,r2,zero
    b34c:	1000071e 	bne	r2,zero,b36c <close+0xc4>
    {
      ALT_ERRNO = -rval;
    b350:	000b3a40 	call	b3a4 <alt_get_errno>
    b354:	e0fffa17 	ldw	r3,-24(fp)
    b358:	00c7c83a 	sub	r3,zero,r3
    b35c:	10c00015 	stw	r3,0(r2)
      return -1;
    b360:	00bfffc4 	movi	r2,-1
    b364:	e0bffd15 	stw	r2,-12(fp)
    b368:	00000806 	br	b38c <close+0xe4>
    }
    return 0;
    b36c:	e03ffd15 	stw	zero,-12(fp)
    b370:	00000606 	br	b38c <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    b374:	000b3a40 	call	b3a4 <alt_get_errno>
    b378:	1007883a 	mov	r3,r2
    b37c:	00801444 	movi	r2,81
    b380:	18800015 	stw	r2,0(r3)
    return -1;
    b384:	00bfffc4 	movi	r2,-1
    b388:	e0bffd15 	stw	r2,-12(fp)
    b38c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    b390:	e037883a 	mov	sp,fp
    b394:	dfc00117 	ldw	ra,4(sp)
    b398:	df000017 	ldw	fp,0(sp)
    b39c:	dec00204 	addi	sp,sp,8
    b3a0:	f800283a 	ret

0000b3a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b3a4:	defffd04 	addi	sp,sp,-12
    b3a8:	dfc00215 	stw	ra,8(sp)
    b3ac:	df000115 	stw	fp,4(sp)
    b3b0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b3b4:	00800074 	movhi	r2,1
    b3b8:	10908304 	addi	r2,r2,16908
    b3bc:	10800017 	ldw	r2,0(r2)
    b3c0:	1005003a 	cmpeq	r2,r2,zero
    b3c4:	1000061e 	bne	r2,zero,b3e0 <alt_get_errno+0x3c>
    b3c8:	00800074 	movhi	r2,1
    b3cc:	10908304 	addi	r2,r2,16908
    b3d0:	10800017 	ldw	r2,0(r2)
    b3d4:	103ee83a 	callr	r2
    b3d8:	e0bfff15 	stw	r2,-4(fp)
    b3dc:	00000306 	br	b3ec <alt_get_errno+0x48>
    b3e0:	00800074 	movhi	r2,1
    b3e4:	10981704 	addi	r2,r2,24668
    b3e8:	e0bfff15 	stw	r2,-4(fp)
    b3ec:	e0bfff17 	ldw	r2,-4(fp)
}
    b3f0:	e037883a 	mov	sp,fp
    b3f4:	dfc00117 	ldw	ra,4(sp)
    b3f8:	df000017 	ldw	fp,0(sp)
    b3fc:	dec00204 	addi	sp,sp,8
    b400:	f800283a 	ret

0000b404 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    b404:	defffc04 	addi	sp,sp,-16
    b408:	df000315 	stw	fp,12(sp)
    b40c:	df000304 	addi	fp,sp,12
    b410:	e13ffd15 	stw	r4,-12(fp)
    b414:	e17ffe15 	stw	r5,-8(fp)
    b418:	e1bfff15 	stw	r6,-4(fp)
  return len;
    b41c:	e0bfff17 	ldw	r2,-4(fp)
}
    b420:	e037883a 	mov	sp,fp
    b424:	df000017 	ldw	fp,0(sp)
    b428:	dec00104 	addi	sp,sp,4
    b42c:	f800283a 	ret

0000b430 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    b430:	defff904 	addi	sp,sp,-28
    b434:	dfc00615 	stw	ra,24(sp)
    b438:	df000515 	stw	fp,20(sp)
    b43c:	df000504 	addi	fp,sp,20
    b440:	e13ffc15 	stw	r4,-16(fp)
    b444:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b448:	e0bffc17 	ldw	r2,-16(fp)
    b44c:	1004803a 	cmplt	r2,r2,zero
    b450:	1000081e 	bne	r2,zero,b474 <fstat+0x44>
    b454:	e0bffc17 	ldw	r2,-16(fp)
    b458:	10800324 	muli	r2,r2,12
    b45c:	1007883a 	mov	r3,r2
    b460:	00800074 	movhi	r2,1
    b464:	108b1304 	addi	r2,r2,11340
    b468:	1887883a 	add	r3,r3,r2
    b46c:	e0ffff15 	stw	r3,-4(fp)
    b470:	00000106 	br	b478 <fstat+0x48>
    b474:	e03fff15 	stw	zero,-4(fp)
    b478:	e0bfff17 	ldw	r2,-4(fp)
    b47c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    b480:	e0bffb17 	ldw	r2,-20(fp)
    b484:	1005003a 	cmpeq	r2,r2,zero
    b488:	1000121e 	bne	r2,zero,b4d4 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    b48c:	e0bffb17 	ldw	r2,-20(fp)
    b490:	10800017 	ldw	r2,0(r2)
    b494:	10800817 	ldw	r2,32(r2)
    b498:	1005003a 	cmpeq	r2,r2,zero
    b49c:	1000081e 	bne	r2,zero,b4c0 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
    b4a0:	e0bffb17 	ldw	r2,-20(fp)
    b4a4:	10800017 	ldw	r2,0(r2)
    b4a8:	10800817 	ldw	r2,32(r2)
    b4ac:	e13ffb17 	ldw	r4,-20(fp)
    b4b0:	e17ffd17 	ldw	r5,-12(fp)
    b4b4:	103ee83a 	callr	r2
    b4b8:	e0bffe15 	stw	r2,-8(fp)
    b4bc:	00000b06 	br	b4ec <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    b4c0:	e0fffd17 	ldw	r3,-12(fp)
    b4c4:	00880004 	movi	r2,8192
    b4c8:	18800115 	stw	r2,4(r3)
      return 0;
    b4cc:	e03ffe15 	stw	zero,-8(fp)
    b4d0:	00000606 	br	b4ec <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    b4d4:	000b5040 	call	b504 <alt_get_errno>
    b4d8:	1007883a 	mov	r3,r2
    b4dc:	00801444 	movi	r2,81
    b4e0:	18800015 	stw	r2,0(r3)
    return -1;
    b4e4:	00bfffc4 	movi	r2,-1
    b4e8:	e0bffe15 	stw	r2,-8(fp)
    b4ec:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    b4f0:	e037883a 	mov	sp,fp
    b4f4:	dfc00117 	ldw	ra,4(sp)
    b4f8:	df000017 	ldw	fp,0(sp)
    b4fc:	dec00204 	addi	sp,sp,8
    b500:	f800283a 	ret

0000b504 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b504:	defffd04 	addi	sp,sp,-12
    b508:	dfc00215 	stw	ra,8(sp)
    b50c:	df000115 	stw	fp,4(sp)
    b510:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b514:	00800074 	movhi	r2,1
    b518:	10908304 	addi	r2,r2,16908
    b51c:	10800017 	ldw	r2,0(r2)
    b520:	1005003a 	cmpeq	r2,r2,zero
    b524:	1000061e 	bne	r2,zero,b540 <alt_get_errno+0x3c>
    b528:	00800074 	movhi	r2,1
    b52c:	10908304 	addi	r2,r2,16908
    b530:	10800017 	ldw	r2,0(r2)
    b534:	103ee83a 	callr	r2
    b538:	e0bfff15 	stw	r2,-4(fp)
    b53c:	00000306 	br	b54c <alt_get_errno+0x48>
    b540:	00800074 	movhi	r2,1
    b544:	10981704 	addi	r2,r2,24668
    b548:	e0bfff15 	stw	r2,-4(fp)
    b54c:	e0bfff17 	ldw	r2,-4(fp)
}
    b550:	e037883a 	mov	sp,fp
    b554:	dfc00117 	ldw	ra,4(sp)
    b558:	df000017 	ldw	fp,0(sp)
    b55c:	dec00204 	addi	sp,sp,8
    b560:	f800283a 	ret

0000b564 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    b564:	deffef04 	addi	sp,sp,-68
    b568:	df001015 	stw	fp,64(sp)
    b56c:	df001004 	addi	fp,sp,64
    b570:	e13ffc15 	stw	r4,-16(fp)
    b574:	e17ffd15 	stw	r5,-12(fp)
    b578:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
    b57c:	00bffa84 	movi	r2,-22
    b580:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    b584:	e0bffc17 	ldw	r2,-16(fp)
    b588:	10800828 	cmpgeui	r2,r2,32
    b58c:	1000601e 	bne	r2,zero,b710 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b590:	0005303a 	rdctl	r2,status
    b594:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b598:	e0fff917 	ldw	r3,-28(fp)
    b59c:	00bfff84 	movi	r2,-2
    b5a0:	1884703a 	and	r2,r3,r2
    b5a4:	1001703a 	wrctl	status,r2
  
  return context;
    b5a8:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
    b5ac:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
    b5b0:	e0bffc17 	ldw	r2,-16(fp)
    b5b4:	00c00fb4 	movhi	r3,62
    b5b8:	18da6f04 	addi	r3,r3,27068
    b5bc:	100490fa 	slli	r2,r2,3
    b5c0:	10c7883a 	add	r3,r2,r3
    b5c4:	e0bffe17 	ldw	r2,-8(fp)
    b5c8:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
    b5cc:	e0bffc17 	ldw	r2,-16(fp)
    b5d0:	00c00fb4 	movhi	r3,62
    b5d4:	18da6f04 	addi	r3,r3,27068
    b5d8:	100490fa 	slli	r2,r2,3
    b5dc:	10c5883a 	add	r2,r2,r3
    b5e0:	10c00104 	addi	r3,r2,4
    b5e4:	e0bffd17 	ldw	r2,-12(fp)
    b5e8:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    b5ec:	e0bffe17 	ldw	r2,-8(fp)
    b5f0:	1005003a 	cmpeq	r2,r2,zero
    b5f4:	1000201e 	bne	r2,zero,b678 <alt_irq_register+0x114>
    b5f8:	e0bffc17 	ldw	r2,-16(fp)
    b5fc:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b600:	0005303a 	rdctl	r2,status
    b604:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b608:	e0fff617 	ldw	r3,-40(fp)
    b60c:	00bfff84 	movi	r2,-2
    b610:	1884703a 	and	r2,r3,r2
    b614:	1001703a 	wrctl	status,r2
  
  return context;
    b618:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    b61c:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
    b620:	e0fff717 	ldw	r3,-36(fp)
    b624:	00800044 	movi	r2,1
    b628:	10c4983a 	sll	r2,r2,r3
    b62c:	1007883a 	mov	r3,r2
    b630:	00800074 	movhi	r2,1
    b634:	10981804 	addi	r2,r2,24672
    b638:	10800017 	ldw	r2,0(r2)
    b63c:	1886b03a 	or	r3,r3,r2
    b640:	00800074 	movhi	r2,1
    b644:	10981804 	addi	r2,r2,24672
    b648:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    b64c:	00800074 	movhi	r2,1
    b650:	10981804 	addi	r2,r2,24672
    b654:	10800017 	ldw	r2,0(r2)
    b658:	100170fa 	wrctl	ienable,r2
    b65c:	e0bff817 	ldw	r2,-32(fp)
    b660:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b664:	e0bff517 	ldw	r2,-44(fp)
    b668:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    b66c:	0005883a 	mov	r2,zero
    b670:	e0bfff15 	stw	r2,-4(fp)
    b674:	00002006 	br	b6f8 <alt_irq_register+0x194>
    b678:	e0bffc17 	ldw	r2,-16(fp)
    b67c:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b680:	0005303a 	rdctl	r2,status
    b684:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b688:	e0fff217 	ldw	r3,-56(fp)
    b68c:	00bfff84 	movi	r2,-2
    b690:	1884703a 	and	r2,r3,r2
    b694:	1001703a 	wrctl	status,r2
  
  return context;
    b698:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    b69c:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
    b6a0:	e0fff317 	ldw	r3,-52(fp)
    b6a4:	00800044 	movi	r2,1
    b6a8:	10c4983a 	sll	r2,r2,r3
    b6ac:	0084303a 	nor	r2,zero,r2
    b6b0:	1007883a 	mov	r3,r2
    b6b4:	00800074 	movhi	r2,1
    b6b8:	10981804 	addi	r2,r2,24672
    b6bc:	10800017 	ldw	r2,0(r2)
    b6c0:	1886703a 	and	r3,r3,r2
    b6c4:	00800074 	movhi	r2,1
    b6c8:	10981804 	addi	r2,r2,24672
    b6cc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    b6d0:	00800074 	movhi	r2,1
    b6d4:	10981804 	addi	r2,r2,24672
    b6d8:	10800017 	ldw	r2,0(r2)
    b6dc:	100170fa 	wrctl	ienable,r2
    b6e0:	e0bff417 	ldw	r2,-48(fp)
    b6e4:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b6e8:	e0bff117 	ldw	r2,-60(fp)
    b6ec:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    b6f0:	0005883a 	mov	r2,zero
    b6f4:	e0bfff15 	stw	r2,-4(fp)
    b6f8:	e0bfff17 	ldw	r2,-4(fp)
    b6fc:	e0bffb15 	stw	r2,-20(fp)
    b700:	e0bffa17 	ldw	r2,-24(fp)
    b704:	e0bff015 	stw	r2,-64(fp)
    b708:	e0bff017 	ldw	r2,-64(fp)
    b70c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
    b710:	e0bffb17 	ldw	r2,-20(fp)
}
    b714:	e037883a 	mov	sp,fp
    b718:	df000017 	ldw	fp,0(sp)
    b71c:	dec00104 	addi	sp,sp,4
    b720:	f800283a 	ret

0000b724 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    b724:	deffeb04 	addi	sp,sp,-84
    b728:	dfc01415 	stw	ra,80(sp)
    b72c:	df001315 	stw	fp,76(sp)
    b730:	df001304 	addi	fp,sp,76
    b734:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b738:	e0bffd17 	ldw	r2,-12(fp)
    b73c:	1004803a 	cmplt	r2,r2,zero
    b740:	1000081e 	bne	r2,zero,b764 <isatty+0x40>
    b744:	e0bffd17 	ldw	r2,-12(fp)
    b748:	10800324 	muli	r2,r2,12
    b74c:	1007883a 	mov	r3,r2
    b750:	00800074 	movhi	r2,1
    b754:	108b1304 	addi	r2,r2,11340
    b758:	1887883a 	add	r3,r3,r2
    b75c:	e0ffff15 	stw	r3,-4(fp)
    b760:	00000106 	br	b768 <isatty+0x44>
    b764:	e03fff15 	stw	zero,-4(fp)
    b768:	e0bfff17 	ldw	r2,-4(fp)
    b76c:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
    b770:	e0bfed17 	ldw	r2,-76(fp)
    b774:	1005003a 	cmpeq	r2,r2,zero
    b778:	10000f1e 	bne	r2,zero,b7b8 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    b77c:	e0bfed17 	ldw	r2,-76(fp)
    b780:	10800017 	ldw	r2,0(r2)
    b784:	10800817 	ldw	r2,32(r2)
    b788:	1004c03a 	cmpne	r2,r2,zero
    b78c:	1000031e 	bne	r2,zero,b79c <isatty+0x78>
    {
      return 1;
    b790:	00800044 	movi	r2,1
    b794:	e0bffe15 	stw	r2,-8(fp)
    b798:	00000c06 	br	b7cc <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    b79c:	e17fee04 	addi	r5,fp,-72
    b7a0:	e13ffd17 	ldw	r4,-12(fp)
    b7a4:	000b4300 	call	b430 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    b7a8:	e0bfef17 	ldw	r2,-68(fp)
    b7ac:	10880020 	cmpeqi	r2,r2,8192
    b7b0:	e0bffe15 	stw	r2,-8(fp)
    b7b4:	00000506 	br	b7cc <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    b7b8:	000b7e40 	call	b7e4 <alt_get_errno>
    b7bc:	1007883a 	mov	r3,r2
    b7c0:	00801444 	movi	r2,81
    b7c4:	18800015 	stw	r2,0(r3)
    return 0;
    b7c8:	e03ffe15 	stw	zero,-8(fp)
    b7cc:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    b7d0:	e037883a 	mov	sp,fp
    b7d4:	dfc00117 	ldw	ra,4(sp)
    b7d8:	df000017 	ldw	fp,0(sp)
    b7dc:	dec00204 	addi	sp,sp,8
    b7e0:	f800283a 	ret

0000b7e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b7e4:	defffd04 	addi	sp,sp,-12
    b7e8:	dfc00215 	stw	ra,8(sp)
    b7ec:	df000115 	stw	fp,4(sp)
    b7f0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b7f4:	00800074 	movhi	r2,1
    b7f8:	10908304 	addi	r2,r2,16908
    b7fc:	10800017 	ldw	r2,0(r2)
    b800:	1005003a 	cmpeq	r2,r2,zero
    b804:	1000061e 	bne	r2,zero,b820 <alt_get_errno+0x3c>
    b808:	00800074 	movhi	r2,1
    b80c:	10908304 	addi	r2,r2,16908
    b810:	10800017 	ldw	r2,0(r2)
    b814:	103ee83a 	callr	r2
    b818:	e0bfff15 	stw	r2,-4(fp)
    b81c:	00000306 	br	b82c <alt_get_errno+0x48>
    b820:	00800074 	movhi	r2,1
    b824:	10981704 	addi	r2,r2,24668
    b828:	e0bfff15 	stw	r2,-4(fp)
    b82c:	e0bfff17 	ldw	r2,-4(fp)
}
    b830:	e037883a 	mov	sp,fp
    b834:	dfc00117 	ldw	ra,4(sp)
    b838:	df000017 	ldw	fp,0(sp)
    b83c:	dec00204 	addi	sp,sp,8
    b840:	f800283a 	ret

0000b844 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    b844:	defffe04 	addi	sp,sp,-8
    b848:	dfc00115 	stw	ra,4(sp)
    b84c:	df000015 	stw	fp,0(sp)
    b850:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    b854:	01000074 	movhi	r4,1
    b858:	21108804 	addi	r4,r4,16928
    b85c:	01400074 	movhi	r5,1
    b860:	29490404 	addi	r5,r5,9232
    b864:	01800074 	movhi	r6,1
    b868:	31908804 	addi	r6,r6,16928
    b86c:	000b8c40 	call	b8c4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    b870:	01000034 	movhi	r4,0
    b874:	21000804 	addi	r4,r4,32
    b878:	01400034 	movhi	r5,0
    b87c:	29400804 	addi	r5,r5,32
    b880:	01800034 	movhi	r6,0
    b884:	31806e04 	addi	r6,r6,440
    b888:	000b8c40 	call	b8c4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    b88c:	01000074 	movhi	r4,1
    b890:	2106cd04 	addi	r4,r4,6964
    b894:	01400074 	movhi	r5,1
    b898:	2946cd04 	addi	r5,r5,6964
    b89c:	01800074 	movhi	r6,1
    b8a0:	31890404 	addi	r6,r6,9232
    b8a4:	000b8c40 	call	b8c4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    b8a8:	0010ae40 	call	10ae4 <alt_dcache_flush_all>
  alt_icache_flush_all();
    b8ac:	0010d700 	call	10d70 <alt_icache_flush_all>
}
    b8b0:	e037883a 	mov	sp,fp
    b8b4:	dfc00117 	ldw	ra,4(sp)
    b8b8:	df000017 	ldw	fp,0(sp)
    b8bc:	dec00204 	addi	sp,sp,8
    b8c0:	f800283a 	ret

0000b8c4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    b8c4:	defffc04 	addi	sp,sp,-16
    b8c8:	df000315 	stw	fp,12(sp)
    b8cc:	df000304 	addi	fp,sp,12
    b8d0:	e13ffd15 	stw	r4,-12(fp)
    b8d4:	e17ffe15 	stw	r5,-8(fp)
    b8d8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    b8dc:	e0fffe17 	ldw	r3,-8(fp)
    b8e0:	e0bffd17 	ldw	r2,-12(fp)
    b8e4:	18800e26 	beq	r3,r2,b920 <alt_load_section+0x5c>
  {
    while( to != end )
    b8e8:	00000a06 	br	b914 <alt_load_section+0x50>
    {
      *to++ = *from++;
    b8ec:	e0bffd17 	ldw	r2,-12(fp)
    b8f0:	10c00017 	ldw	r3,0(r2)
    b8f4:	e0bffe17 	ldw	r2,-8(fp)
    b8f8:	10c00015 	stw	r3,0(r2)
    b8fc:	e0bffe17 	ldw	r2,-8(fp)
    b900:	10800104 	addi	r2,r2,4
    b904:	e0bffe15 	stw	r2,-8(fp)
    b908:	e0bffd17 	ldw	r2,-12(fp)
    b90c:	10800104 	addi	r2,r2,4
    b910:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    b914:	e0fffe17 	ldw	r3,-8(fp)
    b918:	e0bfff17 	ldw	r2,-4(fp)
    b91c:	18bff31e 	bne	r3,r2,b8ec <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    b920:	e037883a 	mov	sp,fp
    b924:	df000017 	ldw	fp,0(sp)
    b928:	dec00104 	addi	sp,sp,4
    b92c:	f800283a 	ret

0000b930 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    b930:	defff804 	addi	sp,sp,-32
    b934:	dfc00715 	stw	ra,28(sp)
    b938:	df000615 	stw	fp,24(sp)
    b93c:	df000604 	addi	fp,sp,24
    b940:	e13ffc15 	stw	r4,-16(fp)
    b944:	e17ffd15 	stw	r5,-12(fp)
    b948:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    b94c:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b950:	e0bffc17 	ldw	r2,-16(fp)
    b954:	1004803a 	cmplt	r2,r2,zero
    b958:	1000081e 	bne	r2,zero,b97c <lseek+0x4c>
    b95c:	e0bffc17 	ldw	r2,-16(fp)
    b960:	10800324 	muli	r2,r2,12
    b964:	1007883a 	mov	r3,r2
    b968:	00800074 	movhi	r2,1
    b96c:	108b1304 	addi	r2,r2,11340
    b970:	1887883a 	add	r3,r3,r2
    b974:	e0ffff15 	stw	r3,-4(fp)
    b978:	00000106 	br	b980 <lseek+0x50>
    b97c:	e03fff15 	stw	zero,-4(fp)
    b980:	e0bfff17 	ldw	r2,-4(fp)
    b984:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
    b988:	e0bffb17 	ldw	r2,-20(fp)
    b98c:	1005003a 	cmpeq	r2,r2,zero
    b990:	1000111e 	bne	r2,zero,b9d8 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    b994:	e0bffb17 	ldw	r2,-20(fp)
    b998:	10800017 	ldw	r2,0(r2)
    b99c:	10800717 	ldw	r2,28(r2)
    b9a0:	1005003a 	cmpeq	r2,r2,zero
    b9a4:	1000091e 	bne	r2,zero,b9cc <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    b9a8:	e0bffb17 	ldw	r2,-20(fp)
    b9ac:	10800017 	ldw	r2,0(r2)
    b9b0:	10800717 	ldw	r2,28(r2)
    b9b4:	e13ffb17 	ldw	r4,-20(fp)
    b9b8:	e17ffd17 	ldw	r5,-12(fp)
    b9bc:	e1bffe17 	ldw	r6,-8(fp)
    b9c0:	103ee83a 	callr	r2
    b9c4:	e0bffa15 	stw	r2,-24(fp)
    b9c8:	00000506 	br	b9e0 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    b9cc:	00bfde84 	movi	r2,-134
    b9d0:	e0bffa15 	stw	r2,-24(fp)
    b9d4:	00000206 	br	b9e0 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
    b9d8:	00bfebc4 	movi	r2,-81
    b9dc:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
    b9e0:	e0bffa17 	ldw	r2,-24(fp)
    b9e4:	1004403a 	cmpge	r2,r2,zero
    b9e8:	1000071e 	bne	r2,zero,ba08 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
    b9ec:	000ba200 	call	ba20 <alt_get_errno>
    b9f0:	1007883a 	mov	r3,r2
    b9f4:	e0bffa17 	ldw	r2,-24(fp)
    b9f8:	0085c83a 	sub	r2,zero,r2
    b9fc:	18800015 	stw	r2,0(r3)
    rc = -1;
    ba00:	00bfffc4 	movi	r2,-1
    ba04:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
    ba08:	e0bffa17 	ldw	r2,-24(fp)
}
    ba0c:	e037883a 	mov	sp,fp
    ba10:	dfc00117 	ldw	ra,4(sp)
    ba14:	df000017 	ldw	fp,0(sp)
    ba18:	dec00204 	addi	sp,sp,8
    ba1c:	f800283a 	ret

0000ba20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ba20:	defffd04 	addi	sp,sp,-12
    ba24:	dfc00215 	stw	ra,8(sp)
    ba28:	df000115 	stw	fp,4(sp)
    ba2c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    ba30:	00800074 	movhi	r2,1
    ba34:	10908304 	addi	r2,r2,16908
    ba38:	10800017 	ldw	r2,0(r2)
    ba3c:	1005003a 	cmpeq	r2,r2,zero
    ba40:	1000061e 	bne	r2,zero,ba5c <alt_get_errno+0x3c>
    ba44:	00800074 	movhi	r2,1
    ba48:	10908304 	addi	r2,r2,16908
    ba4c:	10800017 	ldw	r2,0(r2)
    ba50:	103ee83a 	callr	r2
    ba54:	e0bfff15 	stw	r2,-4(fp)
    ba58:	00000306 	br	ba68 <alt_get_errno+0x48>
    ba5c:	00800074 	movhi	r2,1
    ba60:	10981704 	addi	r2,r2,24668
    ba64:	e0bfff15 	stw	r2,-4(fp)
    ba68:	e0bfff17 	ldw	r2,-4(fp)
}
    ba6c:	e037883a 	mov	sp,fp
    ba70:	dfc00117 	ldw	ra,4(sp)
    ba74:	df000017 	ldw	fp,0(sp)
    ba78:	dec00204 	addi	sp,sp,8
    ba7c:	f800283a 	ret

0000ba80 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    ba80:	defffd04 	addi	sp,sp,-12
    ba84:	dfc00215 	stw	ra,8(sp)
    ba88:	df000115 	stw	fp,4(sp)
    ba8c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    ba90:	0009883a 	mov	r4,zero
    ba94:	000c1e00 	call	c1e0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    ba98:	000c2140 	call	c214 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    ba9c:	01000074 	movhi	r4,1
    baa0:	21089a04 	addi	r4,r4,8808
    baa4:	01400074 	movhi	r5,1
    baa8:	29489a04 	addi	r5,r5,8808
    baac:	01800074 	movhi	r6,1
    bab0:	31889a04 	addi	r6,r6,8808
    bab4:	0010e640 	call	10e64 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    bab8:	0010c140 	call	10c14 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    babc:	01000074 	movhi	r4,1
    bac0:	21031e04 	addi	r4,r4,3192
    bac4:	00117280 	call	11728 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    bac8:	d127a117 	ldw	r4,-24956(gp)
    bacc:	d167a217 	ldw	r5,-24952(gp)
    bad0:	d1a7a317 	ldw	r6,-24948(gp)
    bad4:	000058c0 	call	58c <main>
    bad8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    badc:	01000044 	movi	r4,1
    bae0:	000b2a80 	call	b2a8 <close>
  exit (result);
    bae4:	e13fff17 	ldw	r4,-4(fp)
    bae8:	001173c0 	call	1173c <exit>

0000baec <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    baec:	defffe04 	addi	sp,sp,-8
    baf0:	df000115 	stw	fp,4(sp)
    baf4:	df000104 	addi	fp,sp,4
    baf8:	e13fff15 	stw	r4,-4(fp)
}
    bafc:	e037883a 	mov	sp,fp
    bb00:	df000017 	ldw	fp,0(sp)
    bb04:	dec00104 	addi	sp,sp,4
    bb08:	f800283a 	ret

0000bb0c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    bb0c:	defffe04 	addi	sp,sp,-8
    bb10:	df000115 	stw	fp,4(sp)
    bb14:	df000104 	addi	fp,sp,4
    bb18:	e13fff15 	stw	r4,-4(fp)
}
    bb1c:	e037883a 	mov	sp,fp
    bb20:	df000017 	ldw	fp,0(sp)
    bb24:	dec00104 	addi	sp,sp,4
    bb28:	f800283a 	ret

0000bb2c <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    bb2c:	defff204 	addi	sp,sp,-56
    bb30:	dfc00a15 	stw	ra,40(sp)
    bb34:	df000915 	stw	fp,36(sp)
    bb38:	df000904 	addi	fp,sp,36
    bb3c:	e1400215 	stw	r5,8(fp)
    bb40:	e1800315 	stw	r6,12(fp)
    bb44:	e1c00415 	stw	r7,16(fp)
    bb48:	e13fff15 	stw	r4,-4(fp)
	va_list args;
	va_start(args, fmt);
    bb4c:	e0800204 	addi	r2,fp,8
    bb50:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    bb54:	e0bfff17 	ldw	r2,-4(fp)
    bb58:	e0bffd15 	stw	r2,-12(fp)
    while ((c = *w++) != 0)
    bb5c:	00007806 	br	bd40 <alt_printf+0x214>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    bb60:	e0bffc07 	ldb	r2,-16(fp)
    bb64:	10800960 	cmpeqi	r2,r2,37
    bb68:	1000031e 	bne	r2,zero,bb78 <alt_printf+0x4c>
        {
            alt_putchar(c);
    bb6c:	e13ffc07 	ldb	r4,-16(fp)
    bb70:	000bd840 	call	bd84 <alt_putchar>
    bb74:	00007206 	br	bd40 <alt_printf+0x214>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
    bb78:	e0bffd17 	ldw	r2,-12(fp)
    bb7c:	10800003 	ldbu	r2,0(r2)
    bb80:	e0bffc05 	stb	r2,-16(fp)
    bb84:	e0bffc07 	ldb	r2,-16(fp)
    bb88:	1004c03a 	cmpne	r2,r2,zero
    bb8c:	1007883a 	mov	r3,r2
    bb90:	e0bffd17 	ldw	r2,-12(fp)
    bb94:	10800044 	addi	r2,r2,1
    bb98:	e0bffd15 	stw	r2,-12(fp)
    bb9c:	18803fcc 	andi	r2,r3,255
    bba0:	1005003a 	cmpeq	r2,r2,zero
    bba4:	1000721e 	bne	r2,zero,bd70 <alt_printf+0x244>
            {
                if (c == '%')
    bba8:	e0bffc07 	ldb	r2,-16(fp)
    bbac:	10800958 	cmpnei	r2,r2,37
    bbb0:	1000031e 	bne	r2,zero,bbc0 <alt_printf+0x94>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
    bbb4:	e13ffc07 	ldb	r4,-16(fp)
    bbb8:	000bd840 	call	bd84 <alt_putchar>
    bbbc:	00006006 	br	bd40 <alt_printf+0x214>
                } 
                else if (c == 'c')
    bbc0:	e0bffc07 	ldb	r2,-16(fp)
    bbc4:	108018d8 	cmpnei	r2,r2,99
    bbc8:	1000091e 	bne	r2,zero,bbf0 <alt_printf+0xc4>
                {
                    int v = va_arg(args, int);
    bbcc:	e0fffe17 	ldw	r3,-8(fp)
    bbd0:	18800104 	addi	r2,r3,4
    bbd4:	e0bffe15 	stw	r2,-8(fp)
    bbd8:	1805883a 	mov	r2,r3
    bbdc:	10800017 	ldw	r2,0(r2)
    bbe0:	e0bffb15 	stw	r2,-20(fp)
                    alt_putchar(v);
    bbe4:	e13ffb17 	ldw	r4,-20(fp)
    bbe8:	000bd840 	call	bd84 <alt_putchar>
    bbec:	00005406 	br	bd40 <alt_printf+0x214>
                }
                else if (c == 'x')
    bbf0:	e0bffc07 	ldb	r2,-16(fp)
    bbf4:	10801e18 	cmpnei	r2,r2,120
    bbf8:	1000371e 	bne	r2,zero,bcd8 <alt_printf+0x1ac>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
    bbfc:	e0fffe17 	ldw	r3,-8(fp)
    bc00:	18800104 	addi	r2,r3,4
    bc04:	e0bffe15 	stw	r2,-8(fp)
    bc08:	1805883a 	mov	r2,r3
    bc0c:	10800017 	ldw	r2,0(r2)
    bc10:	e0bffa15 	stw	r2,-24(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    bc14:	e0bffa17 	ldw	r2,-24(fp)
    bc18:	1004c03a 	cmpne	r2,r2,zero
    bc1c:	1000031e 	bne	r2,zero,bc2c <alt_printf+0x100>
                    {
                        alt_putchar('0');
    bc20:	01000c04 	movi	r4,48
    bc24:	000bd840 	call	bd84 <alt_putchar>
                        continue;
    bc28:	00004506 	br	bd40 <alt_printf+0x214>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
    bc2c:	00800704 	movi	r2,28
    bc30:	e0bff815 	stw	r2,-32(fp)
                    while (!(v & (0xF << digit_shift)))
    bc34:	00000306 	br	bc44 <alt_printf+0x118>
                        digit_shift -= 4;
    bc38:	e0bff817 	ldw	r2,-32(fp)
    bc3c:	10bfff04 	addi	r2,r2,-4
    bc40:	e0bff815 	stw	r2,-32(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    bc44:	00c003c4 	movi	r3,15
    bc48:	e0bff817 	ldw	r2,-32(fp)
    bc4c:	1884983a 	sll	r2,r3,r2
    bc50:	1007883a 	mov	r3,r2
    bc54:	e0bffa17 	ldw	r2,-24(fp)
    bc58:	1884703a 	and	r2,r3,r2
    bc5c:	1005003a 	cmpeq	r2,r2,zero
    bc60:	103ff51e 	bne	r2,zero,bc38 <alt_printf+0x10c>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    bc64:	00001806 	br	bcc8 <alt_printf+0x19c>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    bc68:	00c003c4 	movi	r3,15
    bc6c:	e0bff817 	ldw	r2,-32(fp)
    bc70:	1884983a 	sll	r2,r3,r2
    bc74:	1007883a 	mov	r3,r2
    bc78:	e0bffa17 	ldw	r2,-24(fp)
    bc7c:	1886703a 	and	r3,r3,r2
    bc80:	e0bff817 	ldw	r2,-32(fp)
    bc84:	1884d83a 	srl	r2,r3,r2
    bc88:	e0bff915 	stw	r2,-28(fp)
                        if (digit <= 9)
    bc8c:	e0bff917 	ldw	r2,-28(fp)
    bc90:	108002a8 	cmpgeui	r2,r2,10
    bc94:	1000041e 	bne	r2,zero,bca8 <alt_printf+0x17c>
                            c = '0' + digit;
    bc98:	e0bff917 	ldw	r2,-28(fp)
    bc9c:	10800c04 	addi	r2,r2,48
    bca0:	e0bffc05 	stb	r2,-16(fp)
    bca4:	00000306 	br	bcb4 <alt_printf+0x188>
                        else
                            c = 'a' + digit - 10;
    bca8:	e0bff917 	ldw	r2,-28(fp)
    bcac:	108015c4 	addi	r2,r2,87
    bcb0:	e0bffc05 	stb	r2,-16(fp)
                        alt_putchar(c);
    bcb4:	e13ffc07 	ldb	r4,-16(fp)
    bcb8:	000bd840 	call	bd84 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    bcbc:	e0bff817 	ldw	r2,-32(fp)
    bcc0:	10bfff04 	addi	r2,r2,-4
    bcc4:	e0bff815 	stw	r2,-32(fp)
    bcc8:	e0bff817 	ldw	r2,-32(fp)
    bccc:	1004403a 	cmpge	r2,r2,zero
    bcd0:	103fe51e 	bne	r2,zero,bc68 <alt_printf+0x13c>
    bcd4:	00001a06 	br	bd40 <alt_printf+0x214>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    bcd8:	e0bffc07 	ldb	r2,-16(fp)
    bcdc:	10801cd8 	cmpnei	r2,r2,115
    bce0:	1000171e 	bne	r2,zero,bd40 <alt_printf+0x214>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
    bce4:	e0fffe17 	ldw	r3,-8(fp)
    bce8:	18800104 	addi	r2,r3,4
    bcec:	e0bffe15 	stw	r2,-8(fp)
    bcf0:	1805883a 	mov	r2,r3
    bcf4:	10800017 	ldw	r2,0(r2)
    bcf8:	e0bff715 	stw	r2,-36(fp)

                    while(*s)
    bcfc:	00000906 	br	bd24 <alt_printf+0x1f8>
                      alt_putchar(*s++);
    bd00:	e0bff717 	ldw	r2,-36(fp)
    bd04:	10800003 	ldbu	r2,0(r2)
    bd08:	11003fcc 	andi	r4,r2,255
    bd0c:	2100201c 	xori	r4,r4,128
    bd10:	213fe004 	addi	r4,r4,-128
    bd14:	e0bff717 	ldw	r2,-36(fp)
    bd18:	10800044 	addi	r2,r2,1
    bd1c:	e0bff715 	stw	r2,-36(fp)
    bd20:	000bd840 	call	bd84 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
    bd24:	e0bff717 	ldw	r2,-36(fp)
    bd28:	10800003 	ldbu	r2,0(r2)
    bd2c:	10803fcc 	andi	r2,r2,255
    bd30:	1080201c 	xori	r2,r2,128
    bd34:	10bfe004 	addi	r2,r2,-128
    bd38:	1004c03a 	cmpne	r2,r2,zero
    bd3c:	103ff01e 	bne	r2,zero,bd00 <alt_printf+0x1d4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    bd40:	e0bffd17 	ldw	r2,-12(fp)
    bd44:	10800003 	ldbu	r2,0(r2)
    bd48:	e0bffc05 	stb	r2,-16(fp)
    bd4c:	e0bffc07 	ldb	r2,-16(fp)
    bd50:	1004c03a 	cmpne	r2,r2,zero
    bd54:	1007883a 	mov	r3,r2
    bd58:	e0bffd17 	ldw	r2,-12(fp)
    bd5c:	10800044 	addi	r2,r2,1
    bd60:	e0bffd15 	stw	r2,-12(fp)
    bd64:	18803fcc 	andi	r2,r3,255
    bd68:	1004c03a 	cmpne	r2,r2,zero
    bd6c:	103f7c1e 	bne	r2,zero,bb60 <alt_printf+0x34>
            {
                break;
            }
        }
    }
}
    bd70:	e037883a 	mov	sp,fp
    bd74:	dfc00117 	ldw	ra,4(sp)
    bd78:	df000017 	ldw	fp,0(sp)
    bd7c:	dec00504 	addi	sp,sp,20
    bd80:	f800283a 	ret

0000bd84 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    bd84:	defffd04 	addi	sp,sp,-12
    bd88:	dfc00215 	stw	ra,8(sp)
    bd8c:	df000115 	stw	fp,4(sp)
    bd90:	df000104 	addi	fp,sp,4
    bd94:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
    bd98:	00800074 	movhi	r2,1
    bd9c:	10907804 	addi	r2,r2,16864
    bda0:	10800017 	ldw	r2,0(r2)
    bda4:	11400217 	ldw	r5,8(r2)
    bda8:	e13fff17 	ldw	r4,-4(fp)
    bdac:	0007ddc0 	call	7ddc <putc>
#endif
}
    bdb0:	e037883a 	mov	sp,fp
    bdb4:	dfc00117 	ldw	ra,4(sp)
    bdb8:	df000017 	ldw	fp,0(sp)
    bdbc:	dec00204 	addi	sp,sp,8
    bdc0:	f800283a 	ret

0000bdc4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    bdc4:	defff704 	addi	sp,sp,-36
    bdc8:	dfc00815 	stw	ra,32(sp)
    bdcc:	df000715 	stw	fp,28(sp)
    bdd0:	df000704 	addi	fp,sp,28
    bdd4:	e13ffb15 	stw	r4,-20(fp)
    bdd8:	e17ffc15 	stw	r5,-16(fp)
    bddc:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    bde0:	e0bffb17 	ldw	r2,-20(fp)
    bde4:	1004803a 	cmplt	r2,r2,zero
    bde8:	1000081e 	bne	r2,zero,be0c <read+0x48>
    bdec:	e0bffb17 	ldw	r2,-20(fp)
    bdf0:	10800324 	muli	r2,r2,12
    bdf4:	1007883a 	mov	r3,r2
    bdf8:	00800074 	movhi	r2,1
    bdfc:	108b1304 	addi	r2,r2,11340
    be00:	1887883a 	add	r3,r3,r2
    be04:	e0ffff15 	stw	r3,-4(fp)
    be08:	00000106 	br	be10 <read+0x4c>
    be0c:	e03fff15 	stw	zero,-4(fp)
    be10:	e0bfff17 	ldw	r2,-4(fp)
    be14:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    be18:	e0bffa17 	ldw	r2,-24(fp)
    be1c:	1005003a 	cmpeq	r2,r2,zero
    be20:	1000241e 	bne	r2,zero,beb4 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    be24:	e0bffa17 	ldw	r2,-24(fp)
    be28:	10800217 	ldw	r2,8(r2)
    be2c:	108000cc 	andi	r2,r2,3
    be30:	10800060 	cmpeqi	r2,r2,1
    be34:	10001a1e 	bne	r2,zero,bea0 <read+0xdc>
    be38:	e0bffa17 	ldw	r2,-24(fp)
    be3c:	10800017 	ldw	r2,0(r2)
    be40:	10800517 	ldw	r2,20(r2)
    be44:	1005003a 	cmpeq	r2,r2,zero
    be48:	1000151e 	bne	r2,zero,bea0 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    be4c:	e0bffa17 	ldw	r2,-24(fp)
    be50:	10800017 	ldw	r2,0(r2)
    be54:	10800517 	ldw	r2,20(r2)
    be58:	e17ffc17 	ldw	r5,-16(fp)
    be5c:	e1bffd17 	ldw	r6,-12(fp)
    be60:	e13ffa17 	ldw	r4,-24(fp)
    be64:	103ee83a 	callr	r2
    be68:	e0bff915 	stw	r2,-28(fp)
    be6c:	e0bff917 	ldw	r2,-28(fp)
    be70:	1004403a 	cmpge	r2,r2,zero
    be74:	1000071e 	bne	r2,zero,be94 <read+0xd0>
        {
          ALT_ERRNO = -rval;
    be78:	000bee40 	call	bee4 <alt_get_errno>
    be7c:	e0fff917 	ldw	r3,-28(fp)
    be80:	00c7c83a 	sub	r3,zero,r3
    be84:	10c00015 	stw	r3,0(r2)
          return -1;
    be88:	00bfffc4 	movi	r2,-1
    be8c:	e0bffe15 	stw	r2,-8(fp)
    be90:	00000e06 	br	becc <read+0x108>
        }
        return rval;
    be94:	e0bff917 	ldw	r2,-28(fp)
    be98:	e0bffe15 	stw	r2,-8(fp)
    be9c:	00000b06 	br	becc <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
    bea0:	000bee40 	call	bee4 <alt_get_errno>
    bea4:	1007883a 	mov	r3,r2
    bea8:	00800344 	movi	r2,13
    beac:	18800015 	stw	r2,0(r3)
    beb0:	00000406 	br	bec4 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    beb4:	000bee40 	call	bee4 <alt_get_errno>
    beb8:	1007883a 	mov	r3,r2
    bebc:	00801444 	movi	r2,81
    bec0:	18800015 	stw	r2,0(r3)
  }
  return -1;
    bec4:	00bfffc4 	movi	r2,-1
    bec8:	e0bffe15 	stw	r2,-8(fp)
    becc:	e0bffe17 	ldw	r2,-8(fp)
}
    bed0:	e037883a 	mov	sp,fp
    bed4:	dfc00117 	ldw	ra,4(sp)
    bed8:	df000017 	ldw	fp,0(sp)
    bedc:	dec00204 	addi	sp,sp,8
    bee0:	f800283a 	ret

0000bee4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    bee4:	defffd04 	addi	sp,sp,-12
    bee8:	dfc00215 	stw	ra,8(sp)
    beec:	df000115 	stw	fp,4(sp)
    bef0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    bef4:	00800074 	movhi	r2,1
    bef8:	10908304 	addi	r2,r2,16908
    befc:	10800017 	ldw	r2,0(r2)
    bf00:	1005003a 	cmpeq	r2,r2,zero
    bf04:	1000061e 	bne	r2,zero,bf20 <alt_get_errno+0x3c>
    bf08:	00800074 	movhi	r2,1
    bf0c:	10908304 	addi	r2,r2,16908
    bf10:	10800017 	ldw	r2,0(r2)
    bf14:	103ee83a 	callr	r2
    bf18:	e0bfff15 	stw	r2,-4(fp)
    bf1c:	00000306 	br	bf2c <alt_get_errno+0x48>
    bf20:	00800074 	movhi	r2,1
    bf24:	10981704 	addi	r2,r2,24668
    bf28:	e0bfff15 	stw	r2,-4(fp)
    bf2c:	e0bfff17 	ldw	r2,-4(fp)
}
    bf30:	e037883a 	mov	sp,fp
    bf34:	dfc00117 	ldw	ra,4(sp)
    bf38:	df000017 	ldw	fp,0(sp)
    bf3c:	dec00204 	addi	sp,sp,8
    bf40:	f800283a 	ret

0000bf44 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    bf44:	defffe04 	addi	sp,sp,-8
    bf48:	df000115 	stw	fp,4(sp)
    bf4c:	df000104 	addi	fp,sp,4
    bf50:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    bf54:	e0bfff17 	ldw	r2,-4(fp)
    bf58:	108000d0 	cmplti	r2,r2,3
    bf5c:	10000d1e 	bne	r2,zero,bf94 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    bf60:	e0bfff17 	ldw	r2,-4(fp)
    bf64:	00c00074 	movhi	r3,1
    bf68:	18cb1304 	addi	r3,r3,11340
    bf6c:	10800324 	muli	r2,r2,12
    bf70:	10c5883a 	add	r2,r2,r3
    bf74:	10800204 	addi	r2,r2,8
    bf78:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    bf7c:	e0bfff17 	ldw	r2,-4(fp)
    bf80:	00c00074 	movhi	r3,1
    bf84:	18cb1304 	addi	r3,r3,11340
    bf88:	10800324 	muli	r2,r2,12
    bf8c:	10c5883a 	add	r2,r2,r3
    bf90:	10000015 	stw	zero,0(r2)
  }
}
    bf94:	e037883a 	mov	sp,fp
    bf98:	df000017 	ldw	fp,0(sp)
    bf9c:	dec00104 	addi	sp,sp,4
    bfa0:	f800283a 	ret

0000bfa4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    bfa4:	defff804 	addi	sp,sp,-32
    bfa8:	df000715 	stw	fp,28(sp)
    bfac:	df000704 	addi	fp,sp,28
    bfb0:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bfb4:	0005303a 	rdctl	r2,status
    bfb8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bfbc:	e0fffb17 	ldw	r3,-20(fp)
    bfc0:	00bfff84 	movi	r2,-2
    bfc4:	1884703a 	and	r2,r3,r2
    bfc8:	1001703a 	wrctl	status,r2
  
  return context;
    bfcc:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    bfd0:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    bfd4:	d0a00d17 	ldw	r2,-32716(gp)
    bfd8:	10c000c4 	addi	r3,r2,3
    bfdc:	00bfff04 	movi	r2,-4
    bfe0:	1884703a 	and	r2,r3,r2
    bfe4:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    bfe8:	d0e00d17 	ldw	r3,-32716(gp)
    bfec:	e0bffe17 	ldw	r2,-8(fp)
    bff0:	1887883a 	add	r3,r3,r2
    bff4:	00802034 	movhi	r2,128
    bff8:	10800004 	addi	r2,r2,0
    bffc:	10c0072e 	bgeu	r2,r3,c01c <sbrk+0x78>
    c000:	e0bffd17 	ldw	r2,-12(fp)
    c004:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c008:	e0bffa17 	ldw	r2,-24(fp)
    c00c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    c010:	00bfffc4 	movi	r2,-1
    c014:	e0bfff15 	stw	r2,-4(fp)
    c018:	00000c06 	br	c04c <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
    c01c:	d0a00d17 	ldw	r2,-32716(gp)
    c020:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
    c024:	d0e00d17 	ldw	r3,-32716(gp)
    c028:	e0bffe17 	ldw	r2,-8(fp)
    c02c:	1885883a 	add	r2,r3,r2
    c030:	d0a00d15 	stw	r2,-32716(gp)
    c034:	e0bffd17 	ldw	r2,-12(fp)
    c038:	e0bff915 	stw	r2,-28(fp)
    c03c:	e0bff917 	ldw	r2,-28(fp)
    c040:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    c044:	e0bffc17 	ldw	r2,-16(fp)
    c048:	e0bfff15 	stw	r2,-4(fp)
    c04c:	e0bfff17 	ldw	r2,-4(fp)
} 
    c050:	e037883a 	mov	sp,fp
    c054:	df000017 	ldw	fp,0(sp)
    c058:	dec00104 	addi	sp,sp,4
    c05c:	f800283a 	ret

0000c060 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    c060:	defff704 	addi	sp,sp,-36
    c064:	dfc00815 	stw	ra,32(sp)
    c068:	df000715 	stw	fp,28(sp)
    c06c:	df000704 	addi	fp,sp,28
    c070:	e13ffb15 	stw	r4,-20(fp)
    c074:	e17ffc15 	stw	r5,-16(fp)
    c078:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    c07c:	e0bffb17 	ldw	r2,-20(fp)
    c080:	1004803a 	cmplt	r2,r2,zero
    c084:	1000081e 	bne	r2,zero,c0a8 <write+0x48>
    c088:	e0bffb17 	ldw	r2,-20(fp)
    c08c:	10800324 	muli	r2,r2,12
    c090:	1007883a 	mov	r3,r2
    c094:	00800074 	movhi	r2,1
    c098:	108b1304 	addi	r2,r2,11340
    c09c:	1887883a 	add	r3,r3,r2
    c0a0:	e0ffff15 	stw	r3,-4(fp)
    c0a4:	00000106 	br	c0ac <write+0x4c>
    c0a8:	e03fff15 	stw	zero,-4(fp)
    c0ac:	e0bfff17 	ldw	r2,-4(fp)
    c0b0:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    c0b4:	e0bffa17 	ldw	r2,-24(fp)
    c0b8:	1005003a 	cmpeq	r2,r2,zero
    c0bc:	1000241e 	bne	r2,zero,c150 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    c0c0:	e0bffa17 	ldw	r2,-24(fp)
    c0c4:	10800217 	ldw	r2,8(r2)
    c0c8:	108000cc 	andi	r2,r2,3
    c0cc:	1005003a 	cmpeq	r2,r2,zero
    c0d0:	10001a1e 	bne	r2,zero,c13c <write+0xdc>
    c0d4:	e0bffa17 	ldw	r2,-24(fp)
    c0d8:	10800017 	ldw	r2,0(r2)
    c0dc:	10800617 	ldw	r2,24(r2)
    c0e0:	1005003a 	cmpeq	r2,r2,zero
    c0e4:	1000151e 	bne	r2,zero,c13c <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    c0e8:	e0bffa17 	ldw	r2,-24(fp)
    c0ec:	10800017 	ldw	r2,0(r2)
    c0f0:	10800617 	ldw	r2,24(r2)
    c0f4:	e17ffc17 	ldw	r5,-16(fp)
    c0f8:	e1bffd17 	ldw	r6,-12(fp)
    c0fc:	e13ffa17 	ldw	r4,-24(fp)
    c100:	103ee83a 	callr	r2
    c104:	e0bff915 	stw	r2,-28(fp)
    c108:	e0bff917 	ldw	r2,-28(fp)
    c10c:	1004403a 	cmpge	r2,r2,zero
    c110:	1000071e 	bne	r2,zero,c130 <write+0xd0>
      {
        ALT_ERRNO = -rval;
    c114:	000c1800 	call	c180 <alt_get_errno>
    c118:	e0fff917 	ldw	r3,-28(fp)
    c11c:	00c7c83a 	sub	r3,zero,r3
    c120:	10c00015 	stw	r3,0(r2)
        return -1;
    c124:	00bfffc4 	movi	r2,-1
    c128:	e0bffe15 	stw	r2,-8(fp)
    c12c:	00000e06 	br	c168 <write+0x108>
      }
      return rval;
    c130:	e0bff917 	ldw	r2,-28(fp)
    c134:	e0bffe15 	stw	r2,-8(fp)
    c138:	00000b06 	br	c168 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
    c13c:	000c1800 	call	c180 <alt_get_errno>
    c140:	1007883a 	mov	r3,r2
    c144:	00800344 	movi	r2,13
    c148:	18800015 	stw	r2,0(r3)
    c14c:	00000406 	br	c160 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    c150:	000c1800 	call	c180 <alt_get_errno>
    c154:	1007883a 	mov	r3,r2
    c158:	00801444 	movi	r2,81
    c15c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    c160:	00bfffc4 	movi	r2,-1
    c164:	e0bffe15 	stw	r2,-8(fp)
    c168:	e0bffe17 	ldw	r2,-8(fp)
}
    c16c:	e037883a 	mov	sp,fp
    c170:	dfc00117 	ldw	ra,4(sp)
    c174:	df000017 	ldw	fp,0(sp)
    c178:	dec00204 	addi	sp,sp,8
    c17c:	f800283a 	ret

0000c180 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c180:	defffd04 	addi	sp,sp,-12
    c184:	dfc00215 	stw	ra,8(sp)
    c188:	df000115 	stw	fp,4(sp)
    c18c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    c190:	00800074 	movhi	r2,1
    c194:	10908304 	addi	r2,r2,16908
    c198:	10800017 	ldw	r2,0(r2)
    c19c:	1005003a 	cmpeq	r2,r2,zero
    c1a0:	1000061e 	bne	r2,zero,c1bc <alt_get_errno+0x3c>
    c1a4:	00800074 	movhi	r2,1
    c1a8:	10908304 	addi	r2,r2,16908
    c1ac:	10800017 	ldw	r2,0(r2)
    c1b0:	103ee83a 	callr	r2
    c1b4:	e0bfff15 	stw	r2,-4(fp)
    c1b8:	00000306 	br	c1c8 <alt_get_errno+0x48>
    c1bc:	00800074 	movhi	r2,1
    c1c0:	10981704 	addi	r2,r2,24668
    c1c4:	e0bfff15 	stw	r2,-4(fp)
    c1c8:	e0bfff17 	ldw	r2,-4(fp)
}
    c1cc:	e037883a 	mov	sp,fp
    c1d0:	dfc00117 	ldw	ra,4(sp)
    c1d4:	df000017 	ldw	fp,0(sp)
    c1d8:	dec00204 	addi	sp,sp,8
    c1dc:	f800283a 	ret

0000c1e0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    c1e0:	defffd04 	addi	sp,sp,-12
    c1e4:	dfc00215 	stw	ra,8(sp)
    c1e8:	df000115 	stw	fp,4(sp)
    c1ec:	df000104 	addi	fp,sp,4
    c1f0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, CPU);
    c1f4:	00113740 	call	11374 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    c1f8:	00800044 	movi	r2,1
    c1fc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    c200:	e037883a 	mov	sp,fp
    c204:	dfc00117 	ldw	ra,4(sp)
    c208:	df000017 	ldw	fp,0(sp)
    c20c:	dec00204 	addi	sp,sp,8
    c210:	f800283a 	ret

0000c214 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    c214:	defffd04 	addi	sp,sp,-12
    c218:	dfc00215 	stw	ra,8(sp)
    c21c:	df000115 	stw	fp,4(sp)
    c220:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
    c224:	01040034 	movhi	r4,4096
    c228:	21080004 	addi	r4,r4,8192
    c22c:	000b883a 	mov	r5,zero
    c230:	000d883a 	mov	r6,zero
    c234:	01c00204 	movi	r7,8
    c238:	000d1680 	call	d168 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
    c23c:	01000074 	movhi	r4,1
    c240:	210b7d04 	addi	r4,r4,11764
    c244:	000b883a 	mov	r5,zero
    c248:	01800204 	movi	r6,8
    c24c:	000c7940 	call	c794 <altera_avalon_jtag_uart_init>
    c250:	01000074 	movhi	r4,1
    c254:	210b7304 	addi	r4,r4,11724
    c258:	000c6140 	call	c614 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
    c25c:	01000074 	movhi	r4,1
    c260:	210f8b04 	addi	r4,r4,15916
    c264:	000c6140 	call	c614 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO, Audio);
    c268:	01000074 	movhi	r4,1
    c26c:	210f9704 	addi	r4,r4,15964
    c270:	000c6140 	call	c614 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
    c274:	01000074 	movhi	r4,1
    c278:	210fa304 	addi	r4,r4,16012
    c27c:	000daac0 	call	daac <alt_up_character_lcd_init>
    c280:	01000074 	movhi	r4,1
    c284:	210fa304 	addi	r4,r4,16012
    c288:	000c6140 	call	c614 <alt_dev_reg>
    ALTERA_UP_AVALON_ETHERNET_INIT ( ETHERNET, Ethernet);
    c28c:	01000074 	movhi	r4,1
    c290:	210fae04 	addi	r4,r4,16056
    c294:	000df2c0 	call	df2c <alt_up_ethernet_init>
    c298:	01000074 	movhi	r4,1
    c29c:	210fae04 	addi	r4,r4,16056
    c2a0:	000c6140 	call	c614 <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA_UART, IrDA_UART);
    c2a4:	01000074 	movhi	r4,1
    c2a8:	210fbd04 	addi	r4,r4,16116
    c2ac:	000c6140 	call	c614 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP1, Expansion_JP1);
    c2b0:	01000074 	movhi	r4,1
    c2b4:	210fc804 	addi	r4,r4,16160
    c2b8:	000c6140 	call	c614 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP2, Expansion_JP2);
    c2bc:	01000074 	movhi	r4,1
    c2c0:	210fd304 	addi	r4,r4,16204
    c2c4:	000c6140 	call	c614 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
    c2c8:	01000074 	movhi	r4,1
    c2cc:	210fde04 	addi	r4,r4,16248
    c2d0:	000c6140 	call	c614 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
    c2d4:	01000074 	movhi	r4,1
    c2d8:	210fe904 	addi	r4,r4,16292
    c2dc:	000c6140 	call	c614 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
    c2e0:	01000074 	movhi	r4,1
    c2e4:	210ff404 	addi	r4,r4,16336
    c2e8:	000c6140 	call	c614 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
    c2ec:	01000074 	movhi	r4,1
    c2f0:	210fff04 	addi	r4,r4,16380
    c2f4:	000c6140 	call	c614 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
    c2f8:	01000074 	movhi	r4,1
    c2fc:	21100a04 	addi	r4,r4,16424
    c300:	000c6140 	call	c614 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
    c304:	01000074 	movhi	r4,1
    c308:	21101504 	addi	r4,r4,16468
    c30c:	000c6140 	call	c614 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
    c310:	01000074 	movhi	r4,1
    c314:	21102004 	addi	r4,r4,16512
    c318:	000e7b40 	call	e7b4 <alt_up_ps2_init>
    c31c:	01000074 	movhi	r4,1
    c320:	21102004 	addi	r4,r4,16512
    c324:	000c6140 	call	c614 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
    c328:	01000074 	movhi	r4,1
    c32c:	21102e04 	addi	r4,r4,16568
    c330:	000c6140 	call	c614 <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
    c334:	01000074 	movhi	r4,1
    c338:	21103904 	addi	r4,r4,16612
    c33c:	000c6140 	call	c614 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VGA_CHAR_BUFFER, VGA_Char_Buffer);
    c340:	00800074 	movhi	r2,1
    c344:	10904604 	addi	r2,r2,16664
    c348:	10800a17 	ldw	r2,40(r2)
    c34c:	10800104 	addi	r2,r2,4
    c350:	10800017 	ldw	r2,0(r2)
    c354:	10ffffcc 	andi	r3,r2,65535
    c358:	00800074 	movhi	r2,1
    c35c:	10904604 	addi	r2,r2,16664
    c360:	10c00c15 	stw	r3,48(r2)
    c364:	00800074 	movhi	r2,1
    c368:	10904604 	addi	r2,r2,16664
    c36c:	10800a17 	ldw	r2,40(r2)
    c370:	10800104 	addi	r2,r2,4
    c374:	10800017 	ldw	r2,0(r2)
    c378:	1005d43a 	srai	r2,r2,16
    c37c:	10ffffcc 	andi	r3,r2,65535
    c380:	00800074 	movhi	r2,1
    c384:	10904604 	addi	r2,r2,16664
    c388:	10c00d15 	stw	r3,52(r2)
    c38c:	00800074 	movhi	r2,1
    c390:	10904604 	addi	r2,r2,16664
    c394:	10800c17 	ldw	r2,48(r2)
    c398:	10801068 	cmpgeui	r2,r2,65
    c39c:	1000081e 	bne	r2,zero,c3c0 <alt_sys_init+0x1ac>
    c3a0:	00c00074 	movhi	r3,1
    c3a4:	18d04604 	addi	r3,r3,16664
    c3a8:	00800fc4 	movi	r2,63
    c3ac:	18800f15 	stw	r2,60(r3)
    c3b0:	00c00074 	movhi	r3,1
    c3b4:	18d04604 	addi	r3,r3,16664
    c3b8:	00800184 	movi	r2,6
    c3bc:	18801015 	stw	r2,64(r3)
    c3c0:	00800074 	movhi	r2,1
    c3c4:	10904604 	addi	r2,r2,16664
    c3c8:	10800d17 	ldw	r2,52(r2)
    c3cc:	10800868 	cmpgeui	r2,r2,33
    c3d0:	1000041e 	bne	r2,zero,c3e4 <alt_sys_init+0x1d0>
    c3d4:	00c00074 	movhi	r3,1
    c3d8:	18d04604 	addi	r3,r3,16664
    c3dc:	008007c4 	movi	r2,31
    c3e0:	18801115 	stw	r2,68(r3)
    c3e4:	01000074 	movhi	r4,1
    c3e8:	21104604 	addi	r4,r4,16664
    c3ec:	000f1200 	call	f120 <alt_up_char_buffer_init>
    c3f0:	01000074 	movhi	r4,1
    c3f4:	21104604 	addi	r4,r4,16664
    c3f8:	000c6140 	call	c614 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_PIXEL_BUFFER, VGA_Pixel_Buffer);
    c3fc:	00800074 	movhi	r2,1
    c400:	10905804 	addi	r2,r2,16736
    c404:	10800a17 	ldw	r2,40(r2)
    c408:	10800017 	ldw	r2,0(r2)
    c40c:	1007883a 	mov	r3,r2
    c410:	00800074 	movhi	r2,1
    c414:	10905804 	addi	r2,r2,16736
    c418:	10c00b15 	stw	r3,44(r2)
    c41c:	00800074 	movhi	r2,1
    c420:	10905804 	addi	r2,r2,16736
    c424:	10800a17 	ldw	r2,40(r2)
    c428:	10800104 	addi	r2,r2,4
    c42c:	10800017 	ldw	r2,0(r2)
    c430:	1007883a 	mov	r3,r2
    c434:	00800074 	movhi	r2,1
    c438:	10905804 	addi	r2,r2,16736
    c43c:	10c00c15 	stw	r3,48(r2)
    c440:	00800074 	movhi	r2,1
    c444:	10905804 	addi	r2,r2,16736
    c448:	10800a17 	ldw	r2,40(r2)
    c44c:	10800204 	addi	r2,r2,8
    c450:	10800017 	ldw	r2,0(r2)
    c454:	10ffffcc 	andi	r3,r2,65535
    c458:	00800074 	movhi	r2,1
    c45c:	10905804 	addi	r2,r2,16736
    c460:	10c00f15 	stw	r3,60(r2)
    c464:	00800074 	movhi	r2,1
    c468:	10905804 	addi	r2,r2,16736
    c46c:	10800a17 	ldw	r2,40(r2)
    c470:	10800204 	addi	r2,r2,8
    c474:	10800017 	ldw	r2,0(r2)
    c478:	1005d43a 	srai	r2,r2,16
    c47c:	10ffffcc 	andi	r3,r2,65535
    c480:	00800074 	movhi	r2,1
    c484:	10905804 	addi	r2,r2,16736
    c488:	10c01015 	stw	r3,64(r2)
    c48c:	00800074 	movhi	r2,1
    c490:	10905804 	addi	r2,r2,16736
    c494:	10800a17 	ldw	r2,40(r2)
    c498:	10800304 	addi	r2,r2,12
    c49c:	10800017 	ldw	r2,0(r2)
    c4a0:	1005d07a 	srai	r2,r2,1
    c4a4:	10c0004c 	andi	r3,r2,1
    c4a8:	00800074 	movhi	r2,1
    c4ac:	10905804 	addi	r2,r2,16736
    c4b0:	10c00d15 	stw	r3,52(r2)
    c4b4:	00800074 	movhi	r2,1
    c4b8:	10905804 	addi	r2,r2,16736
    c4bc:	10800a17 	ldw	r2,40(r2)
    c4c0:	10800304 	addi	r2,r2,12
    c4c4:	10800017 	ldw	r2,0(r2)
    c4c8:	1005d13a 	srai	r2,r2,4
    c4cc:	10c003cc 	andi	r3,r2,15
    c4d0:	00800074 	movhi	r2,1
    c4d4:	10905804 	addi	r2,r2,16736
    c4d8:	10c00e15 	stw	r3,56(r2)
    c4dc:	00800074 	movhi	r2,1
    c4e0:	10905804 	addi	r2,r2,16736
    c4e4:	10800a17 	ldw	r2,40(r2)
    c4e8:	10800304 	addi	r2,r2,12
    c4ec:	10800017 	ldw	r2,0(r2)
    c4f0:	1005d43a 	srai	r2,r2,16
    c4f4:	1007883a 	mov	r3,r2
    c4f8:	00bfffc4 	movi	r2,-1
    c4fc:	1884703a 	and	r2,r3,r2
    c500:	e0bfff45 	stb	r2,-3(fp)
    c504:	00800074 	movhi	r2,1
    c508:	10905804 	addi	r2,r2,16736
    c50c:	10800a17 	ldw	r2,40(r2)
    c510:	10800304 	addi	r2,r2,12
    c514:	10800017 	ldw	r2,0(r2)
    c518:	1005d63a 	srai	r2,r2,24
    c51c:	1007883a 	mov	r3,r2
    c520:	00bfffc4 	movi	r2,-1
    c524:	1884703a 	and	r2,r3,r2
    c528:	e0bfff05 	stb	r2,-4(fp)
    c52c:	00800074 	movhi	r2,1
    c530:	10905804 	addi	r2,r2,16736
    c534:	10800e17 	ldw	r2,56(r2)
    c538:	10800058 	cmpnei	r2,r2,1
    c53c:	1000041e 	bne	r2,zero,c550 <alt_sys_init+0x33c>
    c540:	00800074 	movhi	r2,1
    c544:	10905804 	addi	r2,r2,16736
    c548:	10001115 	stw	zero,68(r2)
    c54c:	00000e06 	br	c588 <alt_sys_init+0x374>
    c550:	00800074 	movhi	r2,1
    c554:	10905804 	addi	r2,r2,16736
    c558:	10800e17 	ldw	r2,56(r2)
    c55c:	10800098 	cmpnei	r2,r2,2
    c560:	1000051e 	bne	r2,zero,c578 <alt_sys_init+0x364>
    c564:	00c00074 	movhi	r3,1
    c568:	18d05804 	addi	r3,r3,16736
    c56c:	00800044 	movi	r2,1
    c570:	18801115 	stw	r2,68(r3)
    c574:	00000406 	br	c588 <alt_sys_init+0x374>
    c578:	00c00074 	movhi	r3,1
    c57c:	18d05804 	addi	r3,r3,16736
    c580:	00800084 	movi	r2,2
    c584:	18801115 	stw	r2,68(r3)
    c588:	e0ffff43 	ldbu	r3,-3(fp)
    c58c:	00800804 	movi	r2,32
    c590:	10c7c83a 	sub	r3,r2,r3
    c594:	00bfffc4 	movi	r2,-1
    c598:	10c6d83a 	srl	r3,r2,r3
    c59c:	00800074 	movhi	r2,1
    c5a0:	10905804 	addi	r2,r2,16736
    c5a4:	10c01215 	stw	r3,72(r2)
    c5a8:	e0ffff43 	ldbu	r3,-3(fp)
    c5ac:	00800074 	movhi	r2,1
    c5b0:	10905804 	addi	r2,r2,16736
    c5b4:	10801117 	ldw	r2,68(r2)
    c5b8:	1887883a 	add	r3,r3,r2
    c5bc:	00800074 	movhi	r2,1
    c5c0:	10905804 	addi	r2,r2,16736
    c5c4:	10c01315 	stw	r3,76(r2)
    c5c8:	e0ffff03 	ldbu	r3,-4(fp)
    c5cc:	00800804 	movi	r2,32
    c5d0:	10c7c83a 	sub	r3,r2,r3
    c5d4:	00bfffc4 	movi	r2,-1
    c5d8:	10c6d83a 	srl	r3,r2,r3
    c5dc:	00800074 	movhi	r2,1
    c5e0:	10905804 	addi	r2,r2,16736
    c5e4:	10c01415 	stw	r3,80(r2)
    c5e8:	01000074 	movhi	r4,1
    c5ec:	21105804 	addi	r4,r4,16736
    c5f0:	000c6140 	call	c614 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
    c5f4:	01000074 	movhi	r4,1
    c5f8:	21106d04 	addi	r4,r4,16820
    c5fc:	000c6140 	call	c614 <alt_dev_reg>
}
    c600:	e037883a 	mov	sp,fp
    c604:	dfc00117 	ldw	ra,4(sp)
    c608:	df000017 	ldw	fp,0(sp)
    c60c:	dec00204 	addi	sp,sp,8
    c610:	f800283a 	ret

0000c614 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    c614:	defffd04 	addi	sp,sp,-12
    c618:	dfc00215 	stw	ra,8(sp)
    c61c:	df000115 	stw	fp,4(sp)
    c620:	df000104 	addi	fp,sp,4
    c624:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    c628:	e13fff17 	ldw	r4,-4(fp)
    c62c:	01400074 	movhi	r5,1
    c630:	29508004 	addi	r5,r5,16896
    c634:	0010b000 	call	10b00 <alt_dev_llist_insert>
}
    c638:	e037883a 	mov	sp,fp
    c63c:	dfc00117 	ldw	ra,4(sp)
    c640:	df000017 	ldw	fp,0(sp)
    c644:	dec00204 	addi	sp,sp,8
    c648:	f800283a 	ret

0000c64c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    c64c:	defffa04 	addi	sp,sp,-24
    c650:	dfc00515 	stw	ra,20(sp)
    c654:	df000415 	stw	fp,16(sp)
    c658:	df000404 	addi	fp,sp,16
    c65c:	e13ffd15 	stw	r4,-12(fp)
    c660:	e17ffe15 	stw	r5,-8(fp)
    c664:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    c668:	e0bffd17 	ldw	r2,-12(fp)
    c66c:	10800017 	ldw	r2,0(r2)
    c670:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    c674:	e0bffc17 	ldw	r2,-16(fp)
    c678:	11000a04 	addi	r4,r2,40
    c67c:	e0bffd17 	ldw	r2,-12(fp)
    c680:	11c00217 	ldw	r7,8(r2)
    c684:	e17ffe17 	ldw	r5,-8(fp)
    c688:	e1bfff17 	ldw	r6,-4(fp)
    c68c:	000cc900 	call	cc90 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    c690:	e037883a 	mov	sp,fp
    c694:	dfc00117 	ldw	ra,4(sp)
    c698:	df000017 	ldw	fp,0(sp)
    c69c:	dec00204 	addi	sp,sp,8
    c6a0:	f800283a 	ret

0000c6a4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    c6a4:	defffa04 	addi	sp,sp,-24
    c6a8:	dfc00515 	stw	ra,20(sp)
    c6ac:	df000415 	stw	fp,16(sp)
    c6b0:	df000404 	addi	fp,sp,16
    c6b4:	e13ffd15 	stw	r4,-12(fp)
    c6b8:	e17ffe15 	stw	r5,-8(fp)
    c6bc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    c6c0:	e0bffd17 	ldw	r2,-12(fp)
    c6c4:	10800017 	ldw	r2,0(r2)
    c6c8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    c6cc:	e0bffc17 	ldw	r2,-16(fp)
    c6d0:	11000a04 	addi	r4,r2,40
    c6d4:	e0bffd17 	ldw	r2,-12(fp)
    c6d8:	11c00217 	ldw	r7,8(r2)
    c6dc:	e17ffe17 	ldw	r5,-8(fp)
    c6e0:	e1bfff17 	ldw	r6,-4(fp)
    c6e4:	000ceb40 	call	ceb4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    c6e8:	e037883a 	mov	sp,fp
    c6ec:	dfc00117 	ldw	ra,4(sp)
    c6f0:	df000017 	ldw	fp,0(sp)
    c6f4:	dec00204 	addi	sp,sp,8
    c6f8:	f800283a 	ret

0000c6fc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    c6fc:	defffc04 	addi	sp,sp,-16
    c700:	dfc00315 	stw	ra,12(sp)
    c704:	df000215 	stw	fp,8(sp)
    c708:	df000204 	addi	fp,sp,8
    c70c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    c710:	e0bfff17 	ldw	r2,-4(fp)
    c714:	10800017 	ldw	r2,0(r2)
    c718:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    c71c:	e0bffe17 	ldw	r2,-8(fp)
    c720:	11000a04 	addi	r4,r2,40
    c724:	e0bfff17 	ldw	r2,-4(fp)
    c728:	11400217 	ldw	r5,8(r2)
    c72c:	000cb280 	call	cb28 <altera_avalon_jtag_uart_close>
}
    c730:	e037883a 	mov	sp,fp
    c734:	dfc00117 	ldw	ra,4(sp)
    c738:	df000017 	ldw	fp,0(sp)
    c73c:	dec00204 	addi	sp,sp,8
    c740:	f800283a 	ret

0000c744 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    c744:	defffa04 	addi	sp,sp,-24
    c748:	dfc00515 	stw	ra,20(sp)
    c74c:	df000415 	stw	fp,16(sp)
    c750:	df000404 	addi	fp,sp,16
    c754:	e13ffd15 	stw	r4,-12(fp)
    c758:	e17ffe15 	stw	r5,-8(fp)
    c75c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    c760:	e0bffd17 	ldw	r2,-12(fp)
    c764:	10800017 	ldw	r2,0(r2)
    c768:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    c76c:	e0bffc17 	ldw	r2,-16(fp)
    c770:	11000a04 	addi	r4,r2,40
    c774:	e17ffe17 	ldw	r5,-8(fp)
    c778:	e1bfff17 	ldw	r6,-4(fp)
    c77c:	000cb9c0 	call	cb9c <altera_avalon_jtag_uart_ioctl>
}
    c780:	e037883a 	mov	sp,fp
    c784:	dfc00117 	ldw	ra,4(sp)
    c788:	df000017 	ldw	fp,0(sp)
    c78c:	dec00204 	addi	sp,sp,8
    c790:	f800283a 	ret

0000c794 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    c794:	defffb04 	addi	sp,sp,-20
    c798:	dfc00415 	stw	ra,16(sp)
    c79c:	df000315 	stw	fp,12(sp)
    c7a0:	df000304 	addi	fp,sp,12
    c7a4:	e13ffd15 	stw	r4,-12(fp)
    c7a8:	e17ffe15 	stw	r5,-8(fp)
    c7ac:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    c7b0:	e0fffd17 	ldw	r3,-12(fp)
    c7b4:	00800044 	movi	r2,1
    c7b8:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    c7bc:	e0bffd17 	ldw	r2,-12(fp)
    c7c0:	10800017 	ldw	r2,0(r2)
    c7c4:	11000104 	addi	r4,r2,4
    c7c8:	e0bffd17 	ldw	r2,-12(fp)
    c7cc:	10800817 	ldw	r2,32(r2)
    c7d0:	1007883a 	mov	r3,r2
    c7d4:	2005883a 	mov	r2,r4
    c7d8:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
    c7dc:	e13fff17 	ldw	r4,-4(fp)
    c7e0:	e17ffd17 	ldw	r5,-12(fp)
    c7e4:	01800074 	movhi	r6,1
    c7e8:	31b21304 	addi	r6,r6,-14260
    c7ec:	000b5640 	call	b564 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    c7f0:	e0bffd17 	ldw	r2,-12(fp)
    c7f4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    c7f8:	e0bffd17 	ldw	r2,-12(fp)
    c7fc:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    c800:	00800074 	movhi	r2,1
    c804:	10981c04 	addi	r2,r2,24688
    c808:	10800017 	ldw	r2,0(r2)
    c80c:	100b883a 	mov	r5,r2
    c810:	01800074 	movhi	r6,1
    c814:	31b29e04 	addi	r6,r6,-13704
    c818:	e1fffd17 	ldw	r7,-12(fp)
    c81c:	00109900 	call	10990 <alt_alarm_start>
    c820:	1004403a 	cmpge	r2,r2,zero
    c824:	1000041e 	bne	r2,zero,c838 <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    c828:	e0fffd17 	ldw	r3,-12(fp)
    c82c:	00a00034 	movhi	r2,32768
    c830:	10bfffc4 	addi	r2,r2,-1
    c834:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    c838:	e037883a 	mov	sp,fp
    c83c:	dfc00117 	ldw	ra,4(sp)
    c840:	df000017 	ldw	fp,0(sp)
    c844:	dec00204 	addi	sp,sp,8
    c848:	f800283a 	ret

0000c84c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    c84c:	defff704 	addi	sp,sp,-36
    c850:	df000815 	stw	fp,32(sp)
    c854:	df000804 	addi	fp,sp,32
    c858:	e13ffe15 	stw	r4,-8(fp)
    c85c:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    c860:	e0bffe17 	ldw	r2,-8(fp)
    c864:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
    c868:	e0bffd17 	ldw	r2,-12(fp)
    c86c:	10800017 	ldw	r2,0(r2)
    c870:	e0bffc15 	stw	r2,-16(fp)
    c874:	00000006 	br	c878 <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    c878:	e0bffc17 	ldw	r2,-16(fp)
    c87c:	10800104 	addi	r2,r2,4
    c880:	10800037 	ldwio	r2,0(r2)
    c884:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    c888:	e0bffb17 	ldw	r2,-20(fp)
    c88c:	1080c00c 	andi	r2,r2,768
    c890:	1005003a 	cmpeq	r2,r2,zero
    c894:	1000741e 	bne	r2,zero,ca68 <altera_avalon_jtag_uart_irq+0x21c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    c898:	e0bffb17 	ldw	r2,-20(fp)
    c89c:	1080400c 	andi	r2,r2,256
    c8a0:	1005003a 	cmpeq	r2,r2,zero
    c8a4:	1000351e 	bne	r2,zero,c97c <altera_avalon_jtag_uart_irq+0x130>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    c8a8:	00800074 	movhi	r2,1
    c8ac:	e0bffa15 	stw	r2,-24(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c8b0:	e0bffd17 	ldw	r2,-12(fp)
    c8b4:	10800a17 	ldw	r2,40(r2)
    c8b8:	10800044 	addi	r2,r2,1
    c8bc:	1081ffcc 	andi	r2,r2,2047
    c8c0:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
    c8c4:	e0bffd17 	ldw	r2,-12(fp)
    c8c8:	10c00b17 	ldw	r3,44(r2)
    c8cc:	e0bff917 	ldw	r2,-28(fp)
    c8d0:	18801626 	beq	r3,r2,c92c <altera_avalon_jtag_uart_irq+0xe0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    c8d4:	e0bffc17 	ldw	r2,-16(fp)
    c8d8:	10800037 	ldwio	r2,0(r2)
    c8dc:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    c8e0:	e0bffa17 	ldw	r2,-24(fp)
    c8e4:	10a0000c 	andi	r2,r2,32768
    c8e8:	1005003a 	cmpeq	r2,r2,zero
    c8ec:	10000f1e 	bne	r2,zero,c92c <altera_avalon_jtag_uart_irq+0xe0>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    c8f0:	e0bffd17 	ldw	r2,-12(fp)
    c8f4:	10c00a17 	ldw	r3,40(r2)
    c8f8:	e0bffa17 	ldw	r2,-24(fp)
    c8fc:	1009883a 	mov	r4,r2
    c900:	e0bffd17 	ldw	r2,-12(fp)
    c904:	1885883a 	add	r2,r3,r2
    c908:	10800e04 	addi	r2,r2,56
    c90c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c910:	e0bffd17 	ldw	r2,-12(fp)
    c914:	10800a17 	ldw	r2,40(r2)
    c918:	10800044 	addi	r2,r2,1
    c91c:	10c1ffcc 	andi	r3,r2,2047
    c920:	e0bffd17 	ldw	r2,-12(fp)
    c924:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    c928:	003fe106 	br	c8b0 <altera_avalon_jtag_uart_irq+0x64>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    c92c:	e0bffa17 	ldw	r2,-24(fp)
    c930:	10bfffec 	andhi	r2,r2,65535
    c934:	1005003a 	cmpeq	r2,r2,zero
    c938:	1000101e 	bne	r2,zero,c97c <altera_avalon_jtag_uart_irq+0x130>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    c93c:	e0bffd17 	ldw	r2,-12(fp)
    c940:	10c00817 	ldw	r3,32(r2)
    c944:	00bfff84 	movi	r2,-2
    c948:	1886703a 	and	r3,r3,r2
    c94c:	e0bffd17 	ldw	r2,-12(fp)
    c950:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    c954:	e0bffc17 	ldw	r2,-16(fp)
    c958:	11000104 	addi	r4,r2,4
    c95c:	e0bffd17 	ldw	r2,-12(fp)
    c960:	10800817 	ldw	r2,32(r2)
    c964:	1007883a 	mov	r3,r2
    c968:	2005883a 	mov	r2,r4
    c96c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    c970:	e0bffc17 	ldw	r2,-16(fp)
    c974:	10800104 	addi	r2,r2,4
    c978:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    c97c:	e0bffb17 	ldw	r2,-20(fp)
    c980:	1080800c 	andi	r2,r2,512
    c984:	1005003a 	cmpeq	r2,r2,zero
    c988:	103fbb1e 	bne	r2,zero,c878 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    c98c:	e0bffb17 	ldw	r2,-20(fp)
    c990:	10bfffec 	andhi	r2,r2,65535
    c994:	1004d43a 	srli	r2,r2,16
    c998:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    c99c:	00001506 	br	c9f4 <altera_avalon_jtag_uart_irq+0x1a8>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    c9a0:	e13ffc17 	ldw	r4,-16(fp)
    c9a4:	e0bffd17 	ldw	r2,-12(fp)
    c9a8:	10c00d17 	ldw	r3,52(r2)
    c9ac:	e0bffd17 	ldw	r2,-12(fp)
    c9b0:	1885883a 	add	r2,r3,r2
    c9b4:	10820e04 	addi	r2,r2,2104
    c9b8:	10800003 	ldbu	r2,0(r2)
    c9bc:	10c03fcc 	andi	r3,r2,255
    c9c0:	18c0201c 	xori	r3,r3,128
    c9c4:	18ffe004 	addi	r3,r3,-128
    c9c8:	2005883a 	mov	r2,r4
    c9cc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c9d0:	e0bffd17 	ldw	r2,-12(fp)
    c9d4:	10800d17 	ldw	r2,52(r2)
    c9d8:	10800044 	addi	r2,r2,1
    c9dc:	10c1ffcc 	andi	r3,r2,2047
    c9e0:	e0bffd17 	ldw	r2,-12(fp)
    c9e4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    c9e8:	e0bff817 	ldw	r2,-32(fp)
    c9ec:	10bfffc4 	addi	r2,r2,-1
    c9f0:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    c9f4:	e0bff817 	ldw	r2,-32(fp)
    c9f8:	1005003a 	cmpeq	r2,r2,zero
    c9fc:	1000051e 	bne	r2,zero,ca14 <altera_avalon_jtag_uart_irq+0x1c8>
    ca00:	e0bffd17 	ldw	r2,-12(fp)
    ca04:	10c00d17 	ldw	r3,52(r2)
    ca08:	e0bffd17 	ldw	r2,-12(fp)
    ca0c:	10800c17 	ldw	r2,48(r2)
    ca10:	18bfe31e 	bne	r3,r2,c9a0 <altera_avalon_jtag_uart_irq+0x154>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    ca14:	e0bff817 	ldw	r2,-32(fp)
    ca18:	1005003a 	cmpeq	r2,r2,zero
    ca1c:	103f961e 	bne	r2,zero,c878 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    ca20:	e0bffd17 	ldw	r2,-12(fp)
    ca24:	10c00817 	ldw	r3,32(r2)
    ca28:	00bfff44 	movi	r2,-3
    ca2c:	1886703a 	and	r3,r3,r2
    ca30:	e0bffd17 	ldw	r2,-12(fp)
    ca34:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    ca38:	e0bffd17 	ldw	r2,-12(fp)
    ca3c:	10800017 	ldw	r2,0(r2)
    ca40:	11000104 	addi	r4,r2,4
    ca44:	e0bffd17 	ldw	r2,-12(fp)
    ca48:	10800817 	ldw	r2,32(r2)
    ca4c:	1007883a 	mov	r3,r2
    ca50:	2005883a 	mov	r2,r4
    ca54:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    ca58:	e0bffc17 	ldw	r2,-16(fp)
    ca5c:	10800104 	addi	r2,r2,4
    ca60:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    ca64:	003f8406 	br	c878 <altera_avalon_jtag_uart_irq+0x2c>
}
    ca68:	e037883a 	mov	sp,fp
    ca6c:	df000017 	ldw	fp,0(sp)
    ca70:	dec00104 	addi	sp,sp,4
    ca74:	f800283a 	ret

0000ca78 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    ca78:	defffc04 	addi	sp,sp,-16
    ca7c:	df000315 	stw	fp,12(sp)
    ca80:	df000304 	addi	fp,sp,12
    ca84:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    ca88:	e0bfff17 	ldw	r2,-4(fp)
    ca8c:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    ca90:	e0bffe17 	ldw	r2,-8(fp)
    ca94:	10800017 	ldw	r2,0(r2)
    ca98:	10800104 	addi	r2,r2,4
    ca9c:	10800037 	ldwio	r2,0(r2)
    caa0:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    caa4:	e0bffd17 	ldw	r2,-12(fp)
    caa8:	1081000c 	andi	r2,r2,1024
    caac:	1005003a 	cmpeq	r2,r2,zero
    cab0:	10000c1e 	bne	r2,zero,cae4 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    cab4:	e0bffe17 	ldw	r2,-8(fp)
    cab8:	10800017 	ldw	r2,0(r2)
    cabc:	11000104 	addi	r4,r2,4
    cac0:	e0bffe17 	ldw	r2,-8(fp)
    cac4:	10800817 	ldw	r2,32(r2)
    cac8:	10810014 	ori	r2,r2,1024
    cacc:	1007883a 	mov	r3,r2
    cad0:	2005883a 	mov	r2,r4
    cad4:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    cad8:	e0bffe17 	ldw	r2,-8(fp)
    cadc:	10000915 	stw	zero,36(r2)
    cae0:	00000a06 	br	cb0c <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    cae4:	e0bffe17 	ldw	r2,-8(fp)
    cae8:	10c00917 	ldw	r3,36(r2)
    caec:	00a00034 	movhi	r2,32768
    caf0:	10bfff04 	addi	r2,r2,-4
    caf4:	10c00536 	bltu	r2,r3,cb0c <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
    caf8:	e0bffe17 	ldw	r2,-8(fp)
    cafc:	10800917 	ldw	r2,36(r2)
    cb00:	10c00044 	addi	r3,r2,1
    cb04:	e0bffe17 	ldw	r2,-8(fp)
    cb08:	10c00915 	stw	r3,36(r2)
    cb0c:	00800074 	movhi	r2,1
    cb10:	10981c04 	addi	r2,r2,24688
    cb14:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    cb18:	e037883a 	mov	sp,fp
    cb1c:	df000017 	ldw	fp,0(sp)
    cb20:	dec00104 	addi	sp,sp,4
    cb24:	f800283a 	ret

0000cb28 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    cb28:	defffc04 	addi	sp,sp,-16
    cb2c:	df000315 	stw	fp,12(sp)
    cb30:	df000304 	addi	fp,sp,12
    cb34:	e13ffd15 	stw	r4,-12(fp)
    cb38:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    cb3c:	00000706 	br	cb5c <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    cb40:	e0bffe17 	ldw	r2,-8(fp)
    cb44:	1090000c 	andi	r2,r2,16384
    cb48:	1005003a 	cmpeq	r2,r2,zero
    cb4c:	1000031e 	bne	r2,zero,cb5c <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
    cb50:	00bffd44 	movi	r2,-11
    cb54:	e0bfff15 	stw	r2,-4(fp)
    cb58:	00000b06 	br	cb88 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    cb5c:	e0bffd17 	ldw	r2,-12(fp)
    cb60:	10c00d17 	ldw	r3,52(r2)
    cb64:	e0bffd17 	ldw	r2,-12(fp)
    cb68:	10800c17 	ldw	r2,48(r2)
    cb6c:	18800526 	beq	r3,r2,cb84 <altera_avalon_jtag_uart_close+0x5c>
    cb70:	e0bffd17 	ldw	r2,-12(fp)
    cb74:	10c00917 	ldw	r3,36(r2)
    cb78:	e0bffd17 	ldw	r2,-12(fp)
    cb7c:	10800117 	ldw	r2,4(r2)
    cb80:	18bfef36 	bltu	r3,r2,cb40 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    cb84:	e03fff15 	stw	zero,-4(fp)
    cb88:	e0bfff17 	ldw	r2,-4(fp)
}
    cb8c:	e037883a 	mov	sp,fp
    cb90:	df000017 	ldw	fp,0(sp)
    cb94:	dec00104 	addi	sp,sp,4
    cb98:	f800283a 	ret

0000cb9c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    cb9c:	defff804 	addi	sp,sp,-32
    cba0:	df000715 	stw	fp,28(sp)
    cba4:	df000704 	addi	fp,sp,28
    cba8:	e13ffb15 	stw	r4,-20(fp)
    cbac:	e17ffc15 	stw	r5,-16(fp)
    cbb0:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
    cbb4:	00bff9c4 	movi	r2,-25
    cbb8:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
    cbbc:	e0bffc17 	ldw	r2,-16(fp)
    cbc0:	e0bfff15 	stw	r2,-4(fp)
    cbc4:	e0ffff17 	ldw	r3,-4(fp)
    cbc8:	189a8060 	cmpeqi	r2,r3,27137
    cbcc:	1000041e 	bne	r2,zero,cbe0 <altera_avalon_jtag_uart_ioctl+0x44>
    cbd0:	e0ffff17 	ldw	r3,-4(fp)
    cbd4:	189a80a0 	cmpeqi	r2,r3,27138
    cbd8:	10001b1e 	bne	r2,zero,cc48 <altera_avalon_jtag_uart_ioctl+0xac>
    cbdc:	00002706 	br	cc7c <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    cbe0:	e0bffb17 	ldw	r2,-20(fp)
    cbe4:	10c00117 	ldw	r3,4(r2)
    cbe8:	00a00034 	movhi	r2,32768
    cbec:	10bfffc4 	addi	r2,r2,-1
    cbf0:	18802226 	beq	r3,r2,cc7c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
    cbf4:	e0bffd17 	ldw	r2,-12(fp)
    cbf8:	10800017 	ldw	r2,0(r2)
    cbfc:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    cc00:	e0bff917 	ldw	r2,-28(fp)
    cc04:	10800090 	cmplti	r2,r2,2
    cc08:	1000071e 	bne	r2,zero,cc28 <altera_avalon_jtag_uart_ioctl+0x8c>
    cc0c:	e0fff917 	ldw	r3,-28(fp)
    cc10:	00a00034 	movhi	r2,32768
    cc14:	10bfffc4 	addi	r2,r2,-1
    cc18:	18800326 	beq	r3,r2,cc28 <altera_avalon_jtag_uart_ioctl+0x8c>
    cc1c:	e0bff917 	ldw	r2,-28(fp)
    cc20:	e0bffe15 	stw	r2,-8(fp)
    cc24:	00000306 	br	cc34 <altera_avalon_jtag_uart_ioctl+0x98>
    cc28:	00e00034 	movhi	r3,32768
    cc2c:	18ffff84 	addi	r3,r3,-2
    cc30:	e0fffe15 	stw	r3,-8(fp)
    cc34:	e0bffb17 	ldw	r2,-20(fp)
    cc38:	e0fffe17 	ldw	r3,-8(fp)
    cc3c:	10c00115 	stw	r3,4(r2)
      rc = 0;
    cc40:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
    cc44:	00000d06 	br	cc7c <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    cc48:	e0bffb17 	ldw	r2,-20(fp)
    cc4c:	10c00117 	ldw	r3,4(r2)
    cc50:	00a00034 	movhi	r2,32768
    cc54:	10bfffc4 	addi	r2,r2,-1
    cc58:	18800826 	beq	r3,r2,cc7c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    cc5c:	e13ffd17 	ldw	r4,-12(fp)
    cc60:	e0bffb17 	ldw	r2,-20(fp)
    cc64:	10c00917 	ldw	r3,36(r2)
    cc68:	e0bffb17 	ldw	r2,-20(fp)
    cc6c:	10800117 	ldw	r2,4(r2)
    cc70:	1885803a 	cmpltu	r2,r3,r2
    cc74:	20800015 	stw	r2,0(r4)
      rc = 0;
    cc78:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
    cc7c:	e0bffa17 	ldw	r2,-24(fp)
}
    cc80:	e037883a 	mov	sp,fp
    cc84:	df000017 	ldw	fp,0(sp)
    cc88:	dec00104 	addi	sp,sp,4
    cc8c:	f800283a 	ret

0000cc90 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    cc90:	defff204 	addi	sp,sp,-56
    cc94:	dfc00d15 	stw	ra,52(sp)
    cc98:	df000c15 	stw	fp,48(sp)
    cc9c:	df000c04 	addi	fp,sp,48
    cca0:	e13ffb15 	stw	r4,-20(fp)
    cca4:	e17ffc15 	stw	r5,-16(fp)
    cca8:	e1bffd15 	stw	r6,-12(fp)
    ccac:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
    ccb0:	e0bffc17 	ldw	r2,-16(fp)
    ccb4:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    ccb8:	00004806 	br	cddc <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    ccbc:	e0bffb17 	ldw	r2,-20(fp)
    ccc0:	10800a17 	ldw	r2,40(r2)
    ccc4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    ccc8:	e0bffb17 	ldw	r2,-20(fp)
    cccc:	10800b17 	ldw	r2,44(r2)
    ccd0:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
    ccd4:	e0fff717 	ldw	r3,-36(fp)
    ccd8:	e0bff617 	ldw	r2,-40(fp)
    ccdc:	18800536 	bltu	r3,r2,ccf4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    cce0:	e0bff717 	ldw	r2,-36(fp)
    cce4:	e0fff617 	ldw	r3,-40(fp)
    cce8:	10c5c83a 	sub	r2,r2,r3
    ccec:	e0bff815 	stw	r2,-32(fp)
    ccf0:	00000406 	br	cd04 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    ccf4:	00820004 	movi	r2,2048
    ccf8:	e0fff617 	ldw	r3,-40(fp)
    ccfc:	10c5c83a 	sub	r2,r2,r3
    cd00:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    cd04:	e0bff817 	ldw	r2,-32(fp)
    cd08:	1005003a 	cmpeq	r2,r2,zero
    cd0c:	10001f1e 	bne	r2,zero,cd8c <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
    cd10:	e0fffd17 	ldw	r3,-12(fp)
    cd14:	e0bff817 	ldw	r2,-32(fp)
    cd18:	1880022e 	bgeu	r3,r2,cd24 <altera_avalon_jtag_uart_read+0x94>
        n = space;
    cd1c:	e0bffd17 	ldw	r2,-12(fp)
    cd20:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    cd24:	e0bffb17 	ldw	r2,-20(fp)
    cd28:	10c00e04 	addi	r3,r2,56
    cd2c:	e0bff617 	ldw	r2,-40(fp)
    cd30:	1887883a 	add	r3,r3,r2
    cd34:	e0bffa17 	ldw	r2,-24(fp)
    cd38:	1009883a 	mov	r4,r2
    cd3c:	180b883a 	mov	r5,r3
    cd40:	e1bff817 	ldw	r6,-32(fp)
    cd44:	000193c0 	call	193c <memcpy>
      ptr   += n;
    cd48:	e0fff817 	ldw	r3,-32(fp)
    cd4c:	e0bffa17 	ldw	r2,-24(fp)
    cd50:	10c5883a 	add	r2,r2,r3
    cd54:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
    cd58:	e0fffd17 	ldw	r3,-12(fp)
    cd5c:	e0bff817 	ldw	r2,-32(fp)
    cd60:	1885c83a 	sub	r2,r3,r2
    cd64:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    cd68:	e0fff617 	ldw	r3,-40(fp)
    cd6c:	e0bff817 	ldw	r2,-32(fp)
    cd70:	1885883a 	add	r2,r3,r2
    cd74:	10c1ffcc 	andi	r3,r2,2047
    cd78:	e0bffb17 	ldw	r2,-20(fp)
    cd7c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    cd80:	e0bffd17 	ldw	r2,-12(fp)
    cd84:	10800048 	cmpgei	r2,r2,1
    cd88:	103fcc1e 	bne	r2,zero,ccbc <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    cd8c:	e0fffa17 	ldw	r3,-24(fp)
    cd90:	e0bffc17 	ldw	r2,-16(fp)
    cd94:	1880141e 	bne	r3,r2,cde8 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    cd98:	e0bffe17 	ldw	r2,-8(fp)
    cd9c:	1090000c 	andi	r2,r2,16384
    cda0:	1004c03a 	cmpne	r2,r2,zero
    cda4:	1000101e 	bne	r2,zero,cde8 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    cda8:	e0bffb17 	ldw	r2,-20(fp)
    cdac:	10c00a17 	ldw	r3,40(r2)
    cdb0:	e0bff717 	ldw	r2,-36(fp)
    cdb4:	1880051e 	bne	r3,r2,cdcc <altera_avalon_jtag_uart_read+0x13c>
    cdb8:	e0bffb17 	ldw	r2,-20(fp)
    cdbc:	10c00917 	ldw	r3,36(r2)
    cdc0:	e0bffb17 	ldw	r2,-20(fp)
    cdc4:	10800117 	ldw	r2,4(r2)
    cdc8:	18bff736 	bltu	r3,r2,cda8 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    cdcc:	e0bffb17 	ldw	r2,-20(fp)
    cdd0:	10c00a17 	ldw	r3,40(r2)
    cdd4:	e0bff717 	ldw	r2,-36(fp)
    cdd8:	18800326 	beq	r3,r2,cde8 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    cddc:	e0bffd17 	ldw	r2,-12(fp)
    cde0:	10800048 	cmpgei	r2,r2,1
    cde4:	103fb51e 	bne	r2,zero,ccbc <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    cde8:	e0fffa17 	ldw	r3,-24(fp)
    cdec:	e0bffc17 	ldw	r2,-16(fp)
    cdf0:	18801926 	beq	r3,r2,ce58 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    cdf4:	0005303a 	rdctl	r2,status
    cdf8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cdfc:	e0fff517 	ldw	r3,-44(fp)
    ce00:	00bfff84 	movi	r2,-2
    ce04:	1884703a 	and	r2,r3,r2
    ce08:	1001703a 	wrctl	status,r2
  
  return context;
    ce0c:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    ce10:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ce14:	e0bffb17 	ldw	r2,-20(fp)
    ce18:	10800817 	ldw	r2,32(r2)
    ce1c:	10c00054 	ori	r3,r2,1
    ce20:	e0bffb17 	ldw	r2,-20(fp)
    ce24:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    ce28:	e0bffb17 	ldw	r2,-20(fp)
    ce2c:	10800017 	ldw	r2,0(r2)
    ce30:	11000104 	addi	r4,r2,4
    ce34:	e0bffb17 	ldw	r2,-20(fp)
    ce38:	10800817 	ldw	r2,32(r2)
    ce3c:	1007883a 	mov	r3,r2
    ce40:	2005883a 	mov	r2,r4
    ce44:	10c00035 	stwio	r3,0(r2)
    ce48:	e0bff917 	ldw	r2,-28(fp)
    ce4c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ce50:	e0bff417 	ldw	r2,-48(fp)
    ce54:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    ce58:	e0fffa17 	ldw	r3,-24(fp)
    ce5c:	e0bffc17 	ldw	r2,-16(fp)
    ce60:	18800526 	beq	r3,r2,ce78 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
    ce64:	e0fffa17 	ldw	r3,-24(fp)
    ce68:	e0bffc17 	ldw	r2,-16(fp)
    ce6c:	1887c83a 	sub	r3,r3,r2
    ce70:	e0ffff15 	stw	r3,-4(fp)
    ce74:	00000906 	br	ce9c <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
    ce78:	e0bffe17 	ldw	r2,-8(fp)
    ce7c:	1090000c 	andi	r2,r2,16384
    ce80:	1005003a 	cmpeq	r2,r2,zero
    ce84:	1000031e 	bne	r2,zero,ce94 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    ce88:	00bffd44 	movi	r2,-11
    ce8c:	e0bfff15 	stw	r2,-4(fp)
    ce90:	00000206 	br	ce9c <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
    ce94:	00bffec4 	movi	r2,-5
    ce98:	e0bfff15 	stw	r2,-4(fp)
    ce9c:	e0bfff17 	ldw	r2,-4(fp)
}
    cea0:	e037883a 	mov	sp,fp
    cea4:	dfc00117 	ldw	ra,4(sp)
    cea8:	df000017 	ldw	fp,0(sp)
    ceac:	dec00204 	addi	sp,sp,8
    ceb0:	f800283a 	ret

0000ceb4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    ceb4:	defff204 	addi	sp,sp,-56
    ceb8:	dfc00d15 	stw	ra,52(sp)
    cebc:	df000c15 	stw	fp,48(sp)
    cec0:	df000c04 	addi	fp,sp,48
    cec4:	e13ffb15 	stw	r4,-20(fp)
    cec8:	e17ffc15 	stw	r5,-16(fp)
    cecc:	e1bffd15 	stw	r6,-12(fp)
    ced0:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    ced4:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    ced8:	e0bffc17 	ldw	r2,-16(fp)
    cedc:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    cee0:	00003a06 	br	cfcc <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    cee4:	e0bffb17 	ldw	r2,-20(fp)
    cee8:	10800c17 	ldw	r2,48(r2)
    ceec:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
    cef0:	e0bffb17 	ldw	r2,-20(fp)
    cef4:	10800d17 	ldw	r2,52(r2)
    cef8:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
    cefc:	e0fffa17 	ldw	r3,-24(fp)
    cf00:	e0bff917 	ldw	r2,-28(fp)
    cf04:	1880062e 	bgeu	r3,r2,cf20 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    cf08:	e0fff917 	ldw	r3,-28(fp)
    cf0c:	e0bffa17 	ldw	r2,-24(fp)
    cf10:	1885c83a 	sub	r2,r3,r2
    cf14:	10bfffc4 	addi	r2,r2,-1
    cf18:	e0bff815 	stw	r2,-32(fp)
    cf1c:	00000c06 	br	cf50 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
    cf20:	e0bff917 	ldw	r2,-28(fp)
    cf24:	1005003a 	cmpeq	r2,r2,zero
    cf28:	1000051e 	bne	r2,zero,cf40 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    cf2c:	00820004 	movi	r2,2048
    cf30:	e0fffa17 	ldw	r3,-24(fp)
    cf34:	10c5c83a 	sub	r2,r2,r3
    cf38:	e0bff815 	stw	r2,-32(fp)
    cf3c:	00000406 	br	cf50 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    cf40:	0081ffc4 	movi	r2,2047
    cf44:	e0fffa17 	ldw	r3,-24(fp)
    cf48:	10c5c83a 	sub	r2,r2,r3
    cf4c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    cf50:	e0bff817 	ldw	r2,-32(fp)
    cf54:	1005003a 	cmpeq	r2,r2,zero
    cf58:	10001f1e 	bne	r2,zero,cfd8 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
    cf5c:	e0fffd17 	ldw	r3,-12(fp)
    cf60:	e0bff817 	ldw	r2,-32(fp)
    cf64:	1880022e 	bgeu	r3,r2,cf70 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
    cf68:	e0bffd17 	ldw	r2,-12(fp)
    cf6c:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    cf70:	e0bffb17 	ldw	r2,-20(fp)
    cf74:	10c20e04 	addi	r3,r2,2104
    cf78:	e0bffa17 	ldw	r2,-24(fp)
    cf7c:	1885883a 	add	r2,r3,r2
    cf80:	e0fffc17 	ldw	r3,-16(fp)
    cf84:	1009883a 	mov	r4,r2
    cf88:	180b883a 	mov	r5,r3
    cf8c:	e1bff817 	ldw	r6,-32(fp)
    cf90:	000193c0 	call	193c <memcpy>
      ptr   += n;
    cf94:	e0fff817 	ldw	r3,-32(fp)
    cf98:	e0bffc17 	ldw	r2,-16(fp)
    cf9c:	10c5883a 	add	r2,r2,r3
    cfa0:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
    cfa4:	e0fffd17 	ldw	r3,-12(fp)
    cfa8:	e0bff817 	ldw	r2,-32(fp)
    cfac:	1885c83a 	sub	r2,r3,r2
    cfb0:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    cfb4:	e0fffa17 	ldw	r3,-24(fp)
    cfb8:	e0bff817 	ldw	r2,-32(fp)
    cfbc:	1885883a 	add	r2,r3,r2
    cfc0:	10c1ffcc 	andi	r3,r2,2047
    cfc4:	e0bffb17 	ldw	r2,-20(fp)
    cfc8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    cfcc:	e0bffd17 	ldw	r2,-12(fp)
    cfd0:	10800048 	cmpgei	r2,r2,1
    cfd4:	103fc31e 	bne	r2,zero,cee4 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    cfd8:	0005303a 	rdctl	r2,status
    cfdc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cfe0:	e0fff517 	ldw	r3,-44(fp)
    cfe4:	00bfff84 	movi	r2,-2
    cfe8:	1884703a 	and	r2,r3,r2
    cfec:	1001703a 	wrctl	status,r2
  
  return context;
    cff0:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    cff4:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    cff8:	e0bffb17 	ldw	r2,-20(fp)
    cffc:	10800817 	ldw	r2,32(r2)
    d000:	10c00094 	ori	r3,r2,2
    d004:	e0bffb17 	ldw	r2,-20(fp)
    d008:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    d00c:	e0bffb17 	ldw	r2,-20(fp)
    d010:	10800017 	ldw	r2,0(r2)
    d014:	11000104 	addi	r4,r2,4
    d018:	e0bffb17 	ldw	r2,-20(fp)
    d01c:	10800817 	ldw	r2,32(r2)
    d020:	1007883a 	mov	r3,r2
    d024:	2005883a 	mov	r2,r4
    d028:	10c00035 	stwio	r3,0(r2)
    d02c:	e0bff717 	ldw	r2,-36(fp)
    d030:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d034:	e0bff417 	ldw	r2,-48(fp)
    d038:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    d03c:	e0bffd17 	ldw	r2,-12(fp)
    d040:	10800050 	cmplti	r2,r2,1
    d044:	1000111e 	bne	r2,zero,d08c <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
    d048:	e0bffe17 	ldw	r2,-8(fp)
    d04c:	1090000c 	andi	r2,r2,16384
    d050:	1004c03a 	cmpne	r2,r2,zero
    d054:	1000101e 	bne	r2,zero,d098 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    d058:	e0bffb17 	ldw	r2,-20(fp)
    d05c:	10c00d17 	ldw	r3,52(r2)
    d060:	e0bff917 	ldw	r2,-28(fp)
    d064:	1880051e 	bne	r3,r2,d07c <altera_avalon_jtag_uart_write+0x1c8>
    d068:	e0bffb17 	ldw	r2,-20(fp)
    d06c:	10c00917 	ldw	r3,36(r2)
    d070:	e0bffb17 	ldw	r2,-20(fp)
    d074:	10800117 	ldw	r2,4(r2)
    d078:	18bff736 	bltu	r3,r2,d058 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    d07c:	e0bffb17 	ldw	r2,-20(fp)
    d080:	10c00d17 	ldw	r3,52(r2)
    d084:	e0bff917 	ldw	r2,-28(fp)
    d088:	18800326 	beq	r3,r2,d098 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
    d08c:	e0bffd17 	ldw	r2,-12(fp)
    d090:	10800048 	cmpgei	r2,r2,1
    d094:	103fcd1e 	bne	r2,zero,cfcc <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    d098:	e0fffc17 	ldw	r3,-16(fp)
    d09c:	e0bff617 	ldw	r2,-40(fp)
    d0a0:	18800526 	beq	r3,r2,d0b8 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
    d0a4:	e0fffc17 	ldw	r3,-16(fp)
    d0a8:	e0bff617 	ldw	r2,-40(fp)
    d0ac:	1887c83a 	sub	r3,r3,r2
    d0b0:	e0ffff15 	stw	r3,-4(fp)
    d0b4:	00000906 	br	d0dc <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
    d0b8:	e0bffe17 	ldw	r2,-8(fp)
    d0bc:	1090000c 	andi	r2,r2,16384
    d0c0:	1005003a 	cmpeq	r2,r2,zero
    d0c4:	1000031e 	bne	r2,zero,d0d4 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
    d0c8:	00bffd44 	movi	r2,-11
    d0cc:	e0bfff15 	stw	r2,-4(fp)
    d0d0:	00000206 	br	d0dc <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    d0d4:	00bffec4 	movi	r2,-5
    d0d8:	e0bfff15 	stw	r2,-4(fp)
    d0dc:	e0bfff17 	ldw	r2,-4(fp)
}
    d0e0:	e037883a 	mov	sp,fp
    d0e4:	dfc00117 	ldw	ra,4(sp)
    d0e8:	df000017 	ldw	fp,0(sp)
    d0ec:	dec00204 	addi	sp,sp,8
    d0f0:	f800283a 	ret

0000d0f4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    d0f4:	defff904 	addi	sp,sp,-28
    d0f8:	dfc00615 	stw	ra,24(sp)
    d0fc:	df000515 	stw	fp,20(sp)
    d100:	df000504 	addi	fp,sp,20
    d104:	e13ffe15 	stw	r4,-8(fp)
    d108:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    d10c:	e0bffe17 	ldw	r2,-8(fp)
    d110:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    d114:	e0bffe17 	ldw	r2,-8(fp)
    d118:	10800104 	addi	r2,r2,4
    d11c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d120:	0005303a 	rdctl	r2,status
    d124:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d128:	e0fffc17 	ldw	r3,-16(fp)
    d12c:	00bfff84 	movi	r2,-2
    d130:	1884703a 	and	r2,r3,r2
    d134:	1001703a 	wrctl	status,r2
  
  return context;
    d138:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    d13c:	e0bffd15 	stw	r2,-12(fp)
  alt_tick ();
    d140:	00112380 	call	11238 <alt_tick>
    d144:	e0bffd17 	ldw	r2,-12(fp)
    d148:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d14c:	e0bffb17 	ldw	r2,-20(fp)
    d150:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    d154:	e037883a 	mov	sp,fp
    d158:	dfc00117 	ldw	ra,4(sp)
    d15c:	df000017 	ldw	fp,0(sp)
    d160:	dec00204 	addi	sp,sp,8
    d164:	f800283a 	ret

0000d168 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    d168:	defff904 	addi	sp,sp,-28
    d16c:	dfc00615 	stw	ra,24(sp)
    d170:	df000515 	stw	fp,20(sp)
    d174:	df000504 	addi	fp,sp,20
    d178:	e13ffc15 	stw	r4,-16(fp)
    d17c:	e17ffd15 	stw	r5,-12(fp)
    d180:	e1bffe15 	stw	r6,-8(fp)
    d184:	e1ffff15 	stw	r7,-4(fp)
    d188:	e0bfff17 	ldw	r2,-4(fp)
    d18c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    d190:	00800074 	movhi	r2,1
    d194:	10981c04 	addi	r2,r2,24688
    d198:	10800017 	ldw	r2,0(r2)
    d19c:	1004c03a 	cmpne	r2,r2,zero
    d1a0:	1000041e 	bne	r2,zero,d1b4 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
    d1a4:	00c00074 	movhi	r3,1
    d1a8:	18d81c04 	addi	r3,r3,24688
    d1ac:	e0bffb17 	ldw	r2,-20(fp)
    d1b0:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    d1b4:	e0bffc17 	ldw	r2,-16(fp)
    d1b8:	10800104 	addi	r2,r2,4
    d1bc:	1007883a 	mov	r3,r2
    d1c0:	008001c4 	movi	r2,7
    d1c4:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    d1c8:	e13ffe17 	ldw	r4,-8(fp)
    d1cc:	e17ffc17 	ldw	r5,-16(fp)
    d1d0:	01800074 	movhi	r6,1
    d1d4:	31b43d04 	addi	r6,r6,-12044
    d1d8:	000b5640 	call	b564 <alt_irq_register>
#endif  
}
    d1dc:	e037883a 	mov	sp,fp
    d1e0:	dfc00117 	ldw	ra,4(sp)
    d1e4:	df000017 	ldw	fp,0(sp)
    d1e8:	dec00204 	addi	sp,sp,8
    d1ec:	f800283a 	ret

0000d1f0 <alt_up_audio_open_dev>:
#include "altera_up_avalon_audio_regs.h"

///////////////////////////////////////////////////////////////////////////
// Direct functions
alt_up_audio_dev* alt_up_audio_open_dev(const char* name)
{
    d1f0:	defffc04 	addi	sp,sp,-16
    d1f4:	dfc00315 	stw	ra,12(sp)
    d1f8:	df000215 	stw	fp,8(sp)
    d1fc:	df000204 	addi	fp,sp,8
    d200:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_audio_dev *dev = (alt_up_audio_dev*)alt_find_dev(name, &alt_dev_list);
    d204:	e13fff17 	ldw	r4,-4(fp)
    d208:	01400074 	movhi	r5,1
    d20c:	29508004 	addi	r5,r5,16896
    d210:	0010cdc0 	call	10cdc <alt_find_dev>
    d214:	e0bffe15 	stw	r2,-8(fp)
  return dev;
    d218:	e0bffe17 	ldw	r2,-8(fp)
}
    d21c:	e037883a 	mov	sp,fp
    d220:	dfc00117 	ldw	ra,4(sp)
    d224:	df000017 	ldw	fp,0(sp)
    d228:	dec00204 	addi	sp,sp,8
    d22c:	f800283a 	ret

0000d230 <alt_up_audio_enable_read_interrupt>:

void alt_up_audio_enable_read_interrupt(alt_up_audio_dev *audio)
{
    d230:	defffd04 	addi	sp,sp,-12
    d234:	df000215 	stw	fp,8(sp)
    d238:	df000204 	addi	fp,sp,8
    d23c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    d240:	e0bfff17 	ldw	r2,-4(fp)
    d244:	10800a17 	ldw	r2,40(r2)
    d248:	10800037 	ldwio	r2,0(r2)
    d24c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_RE_MSK;
    d250:	e0bffe17 	ldw	r2,-8(fp)
    d254:	10800054 	ori	r2,r2,1
    d258:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    d25c:	e0bfff17 	ldw	r2,-4(fp)
    d260:	10800a17 	ldw	r2,40(r2)
    d264:	e0fffe17 	ldw	r3,-8(fp)
    d268:	10c00035 	stwio	r3,0(r2)
}
    d26c:	e037883a 	mov	sp,fp
    d270:	df000017 	ldw	fp,0(sp)
    d274:	dec00104 	addi	sp,sp,4
    d278:	f800283a 	ret

0000d27c <alt_up_audio_disable_read_interrupt>:

void alt_up_audio_disable_read_interrupt(alt_up_audio_dev *audio)
{
    d27c:	defffd04 	addi	sp,sp,-12
    d280:	df000215 	stw	fp,8(sp)
    d284:	df000204 	addi	fp,sp,8
    d288:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    d28c:	e0bfff17 	ldw	r2,-4(fp)
    d290:	10800a17 	ldw	r2,40(r2)
    d294:	10800037 	ldwio	r2,0(r2)
    d298:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_RE_MSK;
    d29c:	e0fffe17 	ldw	r3,-8(fp)
    d2a0:	00bfff84 	movi	r2,-2
    d2a4:	1884703a 	and	r2,r3,r2
    d2a8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    d2ac:	e0bfff17 	ldw	r2,-4(fp)
    d2b0:	10800a17 	ldw	r2,40(r2)
    d2b4:	e0fffe17 	ldw	r3,-8(fp)
    d2b8:	10c00035 	stwio	r3,0(r2)
}
    d2bc:	e037883a 	mov	sp,fp
    d2c0:	df000017 	ldw	fp,0(sp)
    d2c4:	dec00104 	addi	sp,sp,4
    d2c8:	f800283a 	ret

0000d2cc <alt_up_audio_enable_write_interrupt>:

void alt_up_audio_enable_write_interrupt(alt_up_audio_dev *audio)
{
    d2cc:	defffd04 	addi	sp,sp,-12
    d2d0:	df000215 	stw	fp,8(sp)
    d2d4:	df000204 	addi	fp,sp,8
    d2d8:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    d2dc:	e0bfff17 	ldw	r2,-4(fp)
    d2e0:	10800a17 	ldw	r2,40(r2)
    d2e4:	10800037 	ldwio	r2,0(r2)
    d2e8:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_WE_MSK;
    d2ec:	e0bffe17 	ldw	r2,-8(fp)
    d2f0:	10800094 	ori	r2,r2,2
    d2f4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    d2f8:	e0bfff17 	ldw	r2,-4(fp)
    d2fc:	10800a17 	ldw	r2,40(r2)
    d300:	e0fffe17 	ldw	r3,-8(fp)
    d304:	10c00035 	stwio	r3,0(r2)
}
    d308:	e037883a 	mov	sp,fp
    d30c:	df000017 	ldw	fp,0(sp)
    d310:	dec00104 	addi	sp,sp,4
    d314:	f800283a 	ret

0000d318 <alt_up_audio_disable_write_interrupt>:

void alt_up_audio_disable_write_interrupt(alt_up_audio_dev *audio)
{
    d318:	defffd04 	addi	sp,sp,-12
    d31c:	df000215 	stw	fp,8(sp)
    d320:	df000204 	addi	fp,sp,8
    d324:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    d328:	e0bfff17 	ldw	r2,-4(fp)
    d32c:	10800a17 	ldw	r2,40(r2)
    d330:	10800037 	ldwio	r2,0(r2)
    d334:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_WE_MSK;
    d338:	e0fffe17 	ldw	r3,-8(fp)
    d33c:	00bfff44 	movi	r2,-3
    d340:	1884703a 	and	r2,r3,r2
    d344:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    d348:	e0bfff17 	ldw	r2,-4(fp)
    d34c:	10800a17 	ldw	r2,40(r2)
    d350:	e0fffe17 	ldw	r3,-8(fp)
    d354:	10c00035 	stwio	r3,0(r2)
}
    d358:	e037883a 	mov	sp,fp
    d35c:	df000017 	ldw	fp,0(sp)
    d360:	dec00104 	addi	sp,sp,4
    d364:	f800283a 	ret

0000d368 <alt_up_audio_read_interrupt_pending>:

int alt_up_audio_read_interrupt_pending(alt_up_audio_dev *audio)
{
    d368:	defffd04 	addi	sp,sp,-12
    d36c:	df000215 	stw	fp,8(sp)
    d370:	df000204 	addi	fp,sp,8
    d374:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    d378:	e0bfff17 	ldw	r2,-4(fp)
    d37c:	10800a17 	ldw	r2,40(r2)
    d380:	10800037 	ldwio	r2,0(r2)
    d384:	e0bffe15 	stw	r2,-8(fp)
	// return 1 if RI is set to 1
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_RI_MSK) ? 1 : 0 );
    d388:	e0bffe17 	ldw	r2,-8(fp)
    d38c:	1080400c 	andi	r2,r2,256
    d390:	1004c03a 	cmpne	r2,r2,zero
}
    d394:	e037883a 	mov	sp,fp
    d398:	df000017 	ldw	fp,0(sp)
    d39c:	dec00104 	addi	sp,sp,4
    d3a0:	f800283a 	ret

0000d3a4 <alt_up_audio_write_interrupt_pending>:

int alt_up_audio_write_interrupt_pending(alt_up_audio_dev *audio)
{
    d3a4:	defffd04 	addi	sp,sp,-12
    d3a8:	df000215 	stw	fp,8(sp)
    d3ac:	df000204 	addi	fp,sp,8
    d3b0:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    d3b4:	e0bfff17 	ldw	r2,-4(fp)
    d3b8:	10800a17 	ldw	r2,40(r2)
    d3bc:	10800037 	ldwio	r2,0(r2)
    d3c0:	e0bffe15 	stw	r2,-8(fp)
	// return the WI value
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_WI_MSK) ? 1 : 0 );
    d3c4:	e0bffe17 	ldw	r2,-8(fp)
    d3c8:	1080800c 	andi	r2,r2,512
    d3cc:	1004c03a 	cmpne	r2,r2,zero
}
    d3d0:	e037883a 	mov	sp,fp
    d3d4:	df000017 	ldw	fp,0(sp)
    d3d8:	dec00104 	addi	sp,sp,4
    d3dc:	f800283a 	ret

0000d3e0 <alt_up_audio_reset_audio_core>:

void alt_up_audio_reset_audio_core(alt_up_audio_dev *audio)
{
    d3e0:	defffd04 	addi	sp,sp,-12
    d3e4:	df000215 	stw	fp,8(sp)
    d3e8:	df000204 	addi	fp,sp,8
    d3ec:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    d3f0:	e0bfff17 	ldw	r2,-4(fp)
    d3f4:	10800a17 	ldw	r2,40(r2)
    d3f8:	10800037 	ldwio	r2,0(r2)
    d3fc:	e0bffe15 	stw	r2,-8(fp)
	// set CR and CW to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CR_MSK;
    d400:	e0bffe17 	ldw	r2,-8(fp)
    d404:	10800114 	ori	r2,r2,4
    d408:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CW_MSK;
    d40c:	e0bffe17 	ldw	r2,-8(fp)
    d410:	10800214 	ori	r2,r2,8
    d414:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    d418:	e0bfff17 	ldw	r2,-4(fp)
    d41c:	10800a17 	ldw	r2,40(r2)
    d420:	e0fffe17 	ldw	r3,-8(fp)
    d424:	10c00035 	stwio	r3,0(r2)
	// set CR and CW to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CR_MSK;
    d428:	e0fffe17 	ldw	r3,-8(fp)
    d42c:	00bffec4 	movi	r2,-5
    d430:	1884703a 	and	r2,r3,r2
    d434:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CW_MSK;
    d438:	e0fffe17 	ldw	r3,-8(fp)
    d43c:	00bffdc4 	movi	r2,-9
    d440:	1884703a 	and	r2,r3,r2
    d444:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    d448:	e0bfff17 	ldw	r2,-4(fp)
    d44c:	10800a17 	ldw	r2,40(r2)
    d450:	e0fffe17 	ldw	r3,-8(fp)
    d454:	10c00035 	stwio	r3,0(r2)
}
    d458:	e037883a 	mov	sp,fp
    d45c:	df000017 	ldw	fp,0(sp)
    d460:	dec00104 	addi	sp,sp,4
    d464:	f800283a 	ret

0000d468 <alt_up_audio_read_fifo_avail>:

/* Provides number of words of data available in the incoming FIFO: RALC or RARC */
unsigned int alt_up_audio_read_fifo_avail(alt_up_audio_dev *audio, int channel)
{
    d468:	defffb04 	addi	sp,sp,-20
    d46c:	df000415 	stw	fp,16(sp)
    d470:	df000404 	addi	fp,sp,16
    d474:	e13ffd15 	stw	r4,-12(fp)
    d478:	e17ffe15 	stw	r5,-8(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
    d47c:	e0bffd17 	ldw	r2,-12(fp)
    d480:	10800a17 	ldw	r2,40(r2)
    d484:	10800104 	addi	r2,r2,4
    d488:	10800037 	ldwio	r2,0(r2)
    d48c:	e0bffc15 	stw	r2,-16(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
    d490:	e0bffe17 	ldw	r2,-8(fp)
    d494:	1004c03a 	cmpne	r2,r2,zero
    d498:	1000051e 	bne	r2,zero,d4b0 <alt_up_audio_read_fifo_avail+0x48>
    d49c:	e0bffc17 	ldw	r2,-16(fp)
    d4a0:	10bfc00c 	andi	r2,r2,65280
    d4a4:	1004d23a 	srli	r2,r2,8
    d4a8:	e0bfff15 	stw	r2,-4(fp)
    d4ac:	00000306 	br	d4bc <alt_up_audio_read_fifo_avail+0x54>
    d4b0:	e0bffc17 	ldw	r2,-16(fp)
    d4b4:	10803fcc 	andi	r2,r2,255
    d4b8:	e0bfff15 	stw	r2,-4(fp)
    d4bc:	e0bfff17 	ldw	r2,-4(fp)
    d4c0:	e0bffc15 	stw	r2,-16(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
	return (fifospace);
    d4c4:	e0bffc17 	ldw	r2,-16(fp)
}
    d4c8:	e037883a 	mov	sp,fp
    d4cc:	df000017 	ldw	fp,0(sp)
    d4d0:	dec00104 	addi	sp,sp,4
    d4d4:	f800283a 	ret

0000d4d8 <alt_up_audio_record_r>:
/* Checks if the read FIFO for the right channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
    d4d8:	defff904 	addi	sp,sp,-28
    d4dc:	dfc00615 	stw	ra,24(sp)
    d4e0:	df000515 	stw	fp,20(sp)
    d4e4:	df000504 	addi	fp,sp,20
    d4e8:	e13ffc15 	stw	r4,-16(fp)
    d4ec:	e17ffd15 	stw	r5,-12(fp)
    d4f0:	e1bffe15 	stw	r6,-8(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_RIGHT);
    d4f4:	e13ffc17 	ldw	r4,-16(fp)
    d4f8:	01400044 	movi	r5,1
    d4fc:	000d4680 	call	d468 <alt_up_audio_read_fifo_avail>
    d500:	e0bffb15 	stw	r2,-20(fp)
	if (data_words <= BUF_THRESHOLD)
    d504:	e0bffb17 	ldw	r2,-20(fp)
    d508:	10801868 	cmpgeui	r2,r2,97
    d50c:	1000021e 	bne	r2,zero,d518 <alt_up_audio_record_r+0x40>
		return 0;
    d510:	e03fff15 	stw	zero,-4(fp)
    d514:	00000606 	br	d530 <alt_up_audio_record_r+0x58>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
    d518:	e13ffc17 	ldw	r4,-16(fp)
    d51c:	e17ffd17 	ldw	r5,-12(fp)
    d520:	e1bffe17 	ldw	r6,-8(fp)
    d524:	01c00044 	movi	r7,1
    d528:	000d70c0 	call	d70c <alt_up_audio_read_fifo>
    d52c:	e0bfff15 	stw	r2,-4(fp)
    d530:	e0bfff17 	ldw	r2,-4(fp)
}
    d534:	e037883a 	mov	sp,fp
    d538:	dfc00117 	ldw	ra,4(sp)
    d53c:	df000017 	ldw	fp,0(sp)
    d540:	dec00204 	addi	sp,sp,8
    d544:	f800283a 	ret

0000d548 <alt_up_audio_record_l>:
/* Checks if the read FIFO for the left channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
    d548:	defff904 	addi	sp,sp,-28
    d54c:	dfc00615 	stw	ra,24(sp)
    d550:	df000515 	stw	fp,20(sp)
    d554:	df000504 	addi	fp,sp,20
    d558:	e13ffc15 	stw	r4,-16(fp)
    d55c:	e17ffd15 	stw	r5,-12(fp)
    d560:	e1bffe15 	stw	r6,-8(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_LEFT);
    d564:	e13ffc17 	ldw	r4,-16(fp)
    d568:	000b883a 	mov	r5,zero
    d56c:	000d4680 	call	d468 <alt_up_audio_read_fifo_avail>
    d570:	e0bffb15 	stw	r2,-20(fp)
	if (data_words <= BUF_THRESHOLD)
    d574:	e0bffb17 	ldw	r2,-20(fp)
    d578:	10801868 	cmpgeui	r2,r2,97
    d57c:	1000021e 	bne	r2,zero,d588 <alt_up_audio_record_l+0x40>
		return 0;
    d580:	e03fff15 	stw	zero,-4(fp)
    d584:	00000606 	br	d5a0 <alt_up_audio_record_l+0x58>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
    d588:	e13ffc17 	ldw	r4,-16(fp)
    d58c:	e17ffd17 	ldw	r5,-12(fp)
    d590:	e1bffe17 	ldw	r6,-8(fp)
    d594:	000f883a 	mov	r7,zero
    d598:	000d70c0 	call	d70c <alt_up_audio_read_fifo>
    d59c:	e0bfff15 	stw	r2,-4(fp)
    d5a0:	e0bfff17 	ldw	r2,-4(fp)
}
    d5a4:	e037883a 	mov	sp,fp
    d5a8:	dfc00117 	ldw	ra,4(sp)
    d5ac:	df000017 	ldw	fp,0(sp)
    d5b0:	dec00204 	addi	sp,sp,8
    d5b4:	f800283a 	ret

0000d5b8 <alt_up_audio_write_fifo_space>:

/* Provides the amount of empty space available in the outgoing FIFO: WSLC or WSRC */
unsigned int alt_up_audio_write_fifo_space(alt_up_audio_dev *audio, int channel)
{
    d5b8:	defffb04 	addi	sp,sp,-20
    d5bc:	df000415 	stw	fp,16(sp)
    d5c0:	df000404 	addi	fp,sp,16
    d5c4:	e13ffd15 	stw	r4,-12(fp)
    d5c8:	e17ffe15 	stw	r5,-8(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
    d5cc:	e0bffd17 	ldw	r2,-12(fp)
    d5d0:	10800a17 	ldw	r2,40(r2)
    d5d4:	10800104 	addi	r2,r2,4
    d5d8:	10800037 	ldwio	r2,0(r2)
    d5dc:	e0bffc15 	stw	r2,-16(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
    d5e0:	e0bffe17 	ldw	r2,-8(fp)
    d5e4:	1004c03a 	cmpne	r2,r2,zero
    d5e8:	1000051e 	bne	r2,zero,d600 <alt_up_audio_write_fifo_space+0x48>
    d5ec:	e0bffc17 	ldw	r2,-16(fp)
    d5f0:	10bfc02c 	andhi	r2,r2,65280
    d5f4:	1004d63a 	srli	r2,r2,24
    d5f8:	e0bfff15 	stw	r2,-4(fp)
    d5fc:	00000406 	br	d610 <alt_up_audio_write_fifo_space+0x58>
    d600:	e0bffc17 	ldw	r2,-16(fp)
    d604:	10803fec 	andhi	r2,r2,255
    d608:	1004d43a 	srli	r2,r2,16
    d60c:	e0bfff15 	stw	r2,-4(fp)
    d610:	e0bfff17 	ldw	r2,-4(fp)
    d614:	e0bffc15 	stw	r2,-16(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
	return (fifospace);
    d618:	e0bffc17 	ldw	r2,-16(fp)
}
    d61c:	e037883a 	mov	sp,fp
    d620:	df000017 	ldw	fp,0(sp)
    d624:	dec00104 	addi	sp,sp,4
    d628:	f800283a 	ret

0000d62c <alt_up_audio_play_r>:
/* Checks if the write FIFO for the right channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
    d62c:	defff904 	addi	sp,sp,-28
    d630:	dfc00615 	stw	ra,24(sp)
    d634:	df000515 	stw	fp,20(sp)
    d638:	df000504 	addi	fp,sp,20
    d63c:	e13ffc15 	stw	r4,-16(fp)
    d640:	e17ffd15 	stw	r5,-12(fp)
    d644:	e1bffe15 	stw	r6,-8(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_RIGHT);
    d648:	e13ffc17 	ldw	r4,-16(fp)
    d64c:	01400044 	movi	r5,1
    d650:	000d5b80 	call	d5b8 <alt_up_audio_write_fifo_space>
    d654:	e0bffb15 	stw	r2,-20(fp)
	if (space <= BUF_THRESHOLD)
    d658:	e0bffb17 	ldw	r2,-20(fp)
    d65c:	10801868 	cmpgeui	r2,r2,97
    d660:	1000021e 	bne	r2,zero,d66c <alt_up_audio_play_r+0x40>
		return 0;
    d664:	e03fff15 	stw	zero,-4(fp)
    d668:	00000606 	br	d684 <alt_up_audio_play_r+0x58>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
    d66c:	e13ffc17 	ldw	r4,-16(fp)
    d670:	e17ffd17 	ldw	r5,-12(fp)
    d674:	e1bffe17 	ldw	r6,-8(fp)
    d678:	01c00044 	movi	r7,1
    d67c:	000d8100 	call	d810 <alt_up_audio_write_fifo>
    d680:	e0bfff15 	stw	r2,-4(fp)
    d684:	e0bfff17 	ldw	r2,-4(fp)
}
    d688:	e037883a 	mov	sp,fp
    d68c:	dfc00117 	ldw	ra,4(sp)
    d690:	df000017 	ldw	fp,0(sp)
    d694:	dec00204 	addi	sp,sp,8
    d698:	f800283a 	ret

0000d69c <alt_up_audio_play_l>:
/* Checks if the write FIFO for the left channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
    d69c:	defff904 	addi	sp,sp,-28
    d6a0:	dfc00615 	stw	ra,24(sp)
    d6a4:	df000515 	stw	fp,20(sp)
    d6a8:	df000504 	addi	fp,sp,20
    d6ac:	e13ffc15 	stw	r4,-16(fp)
    d6b0:	e17ffd15 	stw	r5,-12(fp)
    d6b4:	e1bffe15 	stw	r6,-8(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_LEFT);
    d6b8:	e13ffc17 	ldw	r4,-16(fp)
    d6bc:	000b883a 	mov	r5,zero
    d6c0:	000d5b80 	call	d5b8 <alt_up_audio_write_fifo_space>
    d6c4:	e0bffb15 	stw	r2,-20(fp)
	if (space <= BUF_THRESHOLD)
    d6c8:	e0bffb17 	ldw	r2,-20(fp)
    d6cc:	10801868 	cmpgeui	r2,r2,97
    d6d0:	1000021e 	bne	r2,zero,d6dc <alt_up_audio_play_l+0x40>
		return 0;
    d6d4:	e03fff15 	stw	zero,-4(fp)
    d6d8:	00000606 	br	d6f4 <alt_up_audio_play_l+0x58>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
    d6dc:	e13ffc17 	ldw	r4,-16(fp)
    d6e0:	e17ffd17 	ldw	r5,-12(fp)
    d6e4:	e1bffe17 	ldw	r6,-8(fp)
    d6e8:	000f883a 	mov	r7,zero
    d6ec:	000d8100 	call	d810 <alt_up_audio_write_fifo>
    d6f0:	e0bfff15 	stw	r2,-4(fp)
    d6f4:	e0bfff17 	ldw	r2,-4(fp)
}
    d6f8:	e037883a 	mov	sp,fp
    d6fc:	dfc00117 	ldw	ra,4(sp)
    d700:	df000017 	ldw	fp,0(sp)
    d704:	dec00204 	addi	sp,sp,8
    d708:	f800283a 	ret

0000d70c <alt_up_audio_read_fifo>:

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
    d70c:	defff604 	addi	sp,sp,-40
    d710:	df000915 	stw	fp,36(sp)
    d714:	df000904 	addi	fp,sp,36
    d718:	e13ff915 	stw	r4,-28(fp)
    d71c:	e17ffa15 	stw	r5,-24(fp)
    d720:	e1bffb15 	stw	r6,-20(fp)
    d724:	e1fffc15 	stw	r7,-16(fp)
	unsigned int fifospace;
	int count = 0;
    d728:	e03ff715 	stw	zero,-36(fp)
	while ( count < len ) 
    d72c:	00003006 	br	d7f0 <alt_up_audio_read_fifo+0xe4>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
    d730:	e0bff917 	ldw	r2,-28(fp)
    d734:	10800a17 	ldw	r2,40(r2)
    d738:	10800104 	addi	r2,r2,4
    d73c:	10800037 	ldwio	r2,0(r2)
    d740:	e0bff815 	stw	r2,-32(fp)
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
    d744:	e0bffc17 	ldw	r2,-16(fp)
    d748:	1004c03a 	cmpne	r2,r2,zero
    d74c:	1000051e 	bne	r2,zero,d764 <alt_up_audio_read_fifo+0x58>
    d750:	e0bff817 	ldw	r2,-32(fp)
    d754:	10bfc00c 	andi	r2,r2,65280
    d758:	1004d23a 	srli	r2,r2,8
    d75c:	e0bfff15 	stw	r2,-4(fp)
    d760:	00000306 	br	d770 <alt_up_audio_read_fifo+0x64>
    d764:	e0bff817 	ldw	r2,-32(fp)
    d768:	10803fcc 	andi	r2,r2,255
    d76c:	e0bfff15 	stw	r2,-4(fp)
    d770:	e0bfff17 	ldw	r2,-4(fp)
    d774:	e0bff815 	stw	r2,-32(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
    d778:	e0bff817 	ldw	r2,-32(fp)
    d77c:	1005003a 	cmpeq	r2,r2,zero
    d780:	10001e1e 	bne	r2,zero,d7fc <alt_up_audio_read_fifo+0xf0>
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
    d784:	e0bff717 	ldw	r2,-36(fp)
    d788:	1085883a 	add	r2,r2,r2
    d78c:	1085883a 	add	r2,r2,r2
    d790:	1007883a 	mov	r3,r2
    d794:	e0bffa17 	ldw	r2,-24(fp)
    d798:	1887883a 	add	r3,r3,r2
    d79c:	e0fffe15 	stw	r3,-8(fp)
    d7a0:	e0bffc17 	ldw	r2,-16(fp)
    d7a4:	1004c03a 	cmpne	r2,r2,zero
    d7a8:	1000061e 	bne	r2,zero,d7c4 <alt_up_audio_read_fifo+0xb8>
    d7ac:	e0bff917 	ldw	r2,-28(fp)
    d7b0:	10800a17 	ldw	r2,40(r2)
    d7b4:	10800204 	addi	r2,r2,8
    d7b8:	10800037 	ldwio	r2,0(r2)
    d7bc:	e0bffd15 	stw	r2,-12(fp)
    d7c0:	00000506 	br	d7d8 <alt_up_audio_read_fifo+0xcc>
    d7c4:	e0bff917 	ldw	r2,-28(fp)
    d7c8:	10800a17 	ldw	r2,40(r2)
    d7cc:	10800304 	addi	r2,r2,12
    d7d0:	10800037 	ldwio	r2,0(r2)
    d7d4:	e0bffd15 	stw	r2,-12(fp)
    d7d8:	e0fffd17 	ldw	r3,-12(fp)
    d7dc:	e0bffe17 	ldw	r2,-8(fp)
    d7e0:	10c00015 	stw	r3,0(r2)
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
			count ++;
    d7e4:	e0bff717 	ldw	r2,-36(fp)
    d7e8:	10800044 	addi	r2,r2,1
    d7ec:	e0bff715 	stw	r2,-36(fp)

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
    d7f0:	e0fff717 	ldw	r3,-36(fp)
    d7f4:	e0bffb17 	ldw	r2,-20(fp)
    d7f8:	18bfcd16 	blt	r3,r2,d730 <alt_up_audio_read_fifo+0x24>
		{
			// no more data to read
			break;
		}
	}
	return count;
    d7fc:	e0bff717 	ldw	r2,-36(fp)
}
    d800:	e037883a 	mov	sp,fp
    d804:	df000017 	ldw	fp,0(sp)
    d808:	dec00104 	addi	sp,sp,4
    d80c:	f800283a 	ret

0000d810 <alt_up_audio_write_fifo>:

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
    d810:	defff804 	addi	sp,sp,-32
    d814:	df000715 	stw	fp,28(sp)
    d818:	df000704 	addi	fp,sp,28
    d81c:	e13ffb15 	stw	r4,-20(fp)
    d820:	e17ffc15 	stw	r5,-16(fp)
    d824:	e1bffd15 	stw	r6,-12(fp)
    d828:	e1fffe15 	stw	r7,-8(fp)
	unsigned int fifospace;
	int count = 0;
    d82c:	e03ff915 	stw	zero,-28(fp)
	while ( count < len ) 
    d830:	00003a06 	br	d91c <alt_up_audio_write_fifo+0x10c>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
    d834:	e0bffb17 	ldw	r2,-20(fp)
    d838:	10800a17 	ldw	r2,40(r2)
    d83c:	10800104 	addi	r2,r2,4
    d840:	10800037 	ldwio	r2,0(r2)
    d844:	e0bffa15 	stw	r2,-24(fp)
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
    d848:	e0bffe17 	ldw	r2,-8(fp)
    d84c:	1004c03a 	cmpne	r2,r2,zero
    d850:	1000051e 	bne	r2,zero,d868 <alt_up_audio_write_fifo+0x58>
    d854:	e0bffa17 	ldw	r2,-24(fp)
    d858:	10bfc02c 	andhi	r2,r2,65280
    d85c:	1004d63a 	srli	r2,r2,24
    d860:	e0bfff15 	stw	r2,-4(fp)
    d864:	00000406 	br	d878 <alt_up_audio_write_fifo+0x68>
    d868:	e0bffa17 	ldw	r2,-24(fp)
    d86c:	10803fec 	andhi	r2,r2,255
    d870:	1004d43a 	srli	r2,r2,16
    d874:	e0bfff15 	stw	r2,-4(fp)
    d878:	e0bfff17 	ldw	r2,-4(fp)
    d87c:	e0bffa15 	stw	r2,-24(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
		if (fifospace > 0) 
    d880:	e0bffa17 	ldw	r2,-24(fp)
    d884:	1005003a 	cmpeq	r2,r2,zero
    d888:	1000271e 	bne	r2,zero,d928 <alt_up_audio_write_fifo+0x118>
		{
			if (channel == ALT_UP_AUDIO_LEFT) 
    d88c:	e0bffe17 	ldw	r2,-8(fp)
    d890:	1004c03a 	cmpne	r2,r2,zero
    d894:	1000111e 	bne	r2,zero,d8dc <alt_up_audio_write_fifo+0xcc>
				IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, buf[count++]);
    d898:	e0bffb17 	ldw	r2,-20(fp)
    d89c:	10800a17 	ldw	r2,40(r2)
    d8a0:	11000204 	addi	r4,r2,8
    d8a4:	e0bff917 	ldw	r2,-28(fp)
    d8a8:	1085883a 	add	r2,r2,r2
    d8ac:	1085883a 	add	r2,r2,r2
    d8b0:	1007883a 	mov	r3,r2
    d8b4:	e0bffc17 	ldw	r2,-16(fp)
    d8b8:	1885883a 	add	r2,r3,r2
    d8bc:	10800017 	ldw	r2,0(r2)
    d8c0:	1007883a 	mov	r3,r2
    d8c4:	e0bff917 	ldw	r2,-28(fp)
    d8c8:	10800044 	addi	r2,r2,1
    d8cc:	e0bff915 	stw	r2,-28(fp)
    d8d0:	2005883a 	mov	r2,r4
    d8d4:	10c00035 	stwio	r3,0(r2)
    d8d8:	00001006 	br	d91c <alt_up_audio_write_fifo+0x10c>
			else
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
    d8dc:	e0bffb17 	ldw	r2,-20(fp)
    d8e0:	10800a17 	ldw	r2,40(r2)
    d8e4:	11000304 	addi	r4,r2,12
    d8e8:	e0bff917 	ldw	r2,-28(fp)
    d8ec:	1085883a 	add	r2,r2,r2
    d8f0:	1085883a 	add	r2,r2,r2
    d8f4:	1007883a 	mov	r3,r2
    d8f8:	e0bffc17 	ldw	r2,-16(fp)
    d8fc:	1885883a 	add	r2,r3,r2
    d900:	10800017 	ldw	r2,0(r2)
    d904:	1007883a 	mov	r3,r2
    d908:	e0bff917 	ldw	r2,-28(fp)
    d90c:	10800044 	addi	r2,r2,1
    d910:	e0bff915 	stw	r2,-28(fp)
    d914:	2005883a 	mov	r2,r4
    d918:	10c00035 	stwio	r3,0(r2)

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
    d91c:	e0fff917 	ldw	r3,-28(fp)
    d920:	e0bffd17 	ldw	r2,-12(fp)
    d924:	18bfc316 	blt	r3,r2,d834 <alt_up_audio_write_fifo+0x24>
		{
			// no more space to write
			break;
		}
	}
	return count;
    d928:	e0bff917 	ldw	r2,-28(fp)
}
    d92c:	e037883a 	mov	sp,fp
    d930:	df000017 	ldw	fp,0(sp)
    d934:	dec00104 	addi	sp,sp,4
    d938:	f800283a 	ret

0000d93c <alt_up_audio_read_fifo_head>:

unsigned int alt_up_audio_read_fifo_head(alt_up_audio_dev *audio, int channel)
{
    d93c:	defffc04 	addi	sp,sp,-16
    d940:	df000315 	stw	fp,12(sp)
    d944:	df000304 	addi	fp,sp,12
    d948:	e13ffd15 	stw	r4,-12(fp)
    d94c:	e17ffe15 	stw	r5,-8(fp)
	return ( (channel == ALT_UP_AUDIO_LEFT) ?  IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
    d950:	e0bffe17 	ldw	r2,-8(fp)
    d954:	1004c03a 	cmpne	r2,r2,zero
    d958:	1000061e 	bne	r2,zero,d974 <alt_up_audio_read_fifo_head+0x38>
    d95c:	e0bffd17 	ldw	r2,-12(fp)
    d960:	10800a17 	ldw	r2,40(r2)
    d964:	10800204 	addi	r2,r2,8
    d968:	10800037 	ldwio	r2,0(r2)
    d96c:	e0bfff15 	stw	r2,-4(fp)
    d970:	00000506 	br	d988 <alt_up_audio_read_fifo_head+0x4c>
    d974:	e0bffd17 	ldw	r2,-12(fp)
    d978:	10800a17 	ldw	r2,40(r2)
    d97c:	10800304 	addi	r2,r2,12
    d980:	10800037 	ldwio	r2,0(r2)
    d984:	e0bfff15 	stw	r2,-4(fp)
    d988:	e0bfff17 	ldw	r2,-4(fp)
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base) );
}
    d98c:	e037883a 	mov	sp,fp
    d990:	df000017 	ldw	fp,0(sp)
    d994:	dec00104 	addi	sp,sp,4
    d998:	f800283a 	ret

0000d99c <alt_up_audio_write_fifo_head>:

void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
    d99c:	defffc04 	addi	sp,sp,-16
    d9a0:	df000315 	stw	fp,12(sp)
    d9a4:	df000304 	addi	fp,sp,12
    d9a8:	e13ffd15 	stw	r4,-12(fp)
    d9ac:	e17ffe15 	stw	r5,-8(fp)
    d9b0:	e1bfff15 	stw	r6,-4(fp)
	if (channel == ALT_UP_AUDIO_LEFT) 
    d9b4:	e0bfff17 	ldw	r2,-4(fp)
    d9b8:	1004c03a 	cmpne	r2,r2,zero
    d9bc:	1000061e 	bne	r2,zero,d9d8 <alt_up_audio_write_fifo_head+0x3c>
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
    d9c0:	e0bffd17 	ldw	r2,-12(fp)
    d9c4:	10800a17 	ldw	r2,40(r2)
    d9c8:	10800204 	addi	r2,r2,8
    d9cc:	e0fffe17 	ldw	r3,-8(fp)
    d9d0:	10c00035 	stwio	r3,0(r2)
    d9d4:	00000506 	br	d9ec <alt_up_audio_write_fifo_head+0x50>
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
    d9d8:	e0bffd17 	ldw	r2,-12(fp)
    d9dc:	10800a17 	ldw	r2,40(r2)
    d9e0:	10800304 	addi	r2,r2,12
    d9e4:	e0fffe17 	ldw	r3,-8(fp)
    d9e8:	10c00035 	stwio	r3,0(r2)
}
    d9ec:	e037883a 	mov	sp,fp
    d9f0:	df000017 	ldw	fp,0(sp)
    d9f4:	dec00104 	addi	sp,sp,4
    d9f8:	f800283a 	ret

0000d9fc <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
    d9fc:	defffc04 	addi	sp,sp,-16
    da00:	df000315 	stw	fp,12(sp)
    da04:	df000304 	addi	fp,sp,12
    da08:	e13ffe15 	stw	r4,-8(fp)
    da0c:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
    da10:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
    da14:	e0bfff17 	ldw	r2,-4(fp)
    da18:	1004c03a 	cmpne	r2,r2,zero
    da1c:	1000061e 	bne	r2,zero,da38 <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
    da20:	e0bffe17 	ldw	r2,-8(fp)
    da24:	1007883a 	mov	r3,r2
    da28:	e0bffd03 	ldbu	r2,-12(fp)
    da2c:	10c4b03a 	or	r2,r2,r3
    da30:	e0bffd05 	stb	r2,-12(fp)
    da34:	00000806 	br	da58 <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
    da38:	e0bffe17 	ldw	r2,-8(fp)
    da3c:	1007883a 	mov	r3,r2
    da40:	e0bffd03 	ldbu	r2,-12(fp)
    da44:	10c4b03a 	or	r2,r2,r3
    da48:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
    da4c:	e0bffd03 	ldbu	r2,-12(fp)
    da50:	10801014 	ori	r2,r2,64
    da54:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
    da58:	e0fffd03 	ldbu	r3,-12(fp)
    da5c:	00bfe004 	movi	r2,-128
    da60:	1884b03a 	or	r2,r3,r2
    da64:	10803fcc 	andi	r2,r2,255
}
    da68:	e037883a 	mov	sp,fp
    da6c:	df000017 	ldw	fp,0(sp)
    da70:	dec00104 	addi	sp,sp,4
    da74:	f800283a 	ret

0000da78 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
    da78:	defffd04 	addi	sp,sp,-12
    da7c:	df000215 	stw	fp,8(sp)
    da80:	df000204 	addi	fp,sp,8
    da84:	e13ffe15 	stw	r4,-8(fp)
    da88:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
    da8c:	e0bffe17 	ldw	r2,-8(fp)
    da90:	10800a17 	ldw	r2,40(r2)
    da94:	e0ffff03 	ldbu	r3,-4(fp)
    da98:	10c00025 	stbio	r3,0(r2)
}
    da9c:	e037883a 	mov	sp,fp
    daa0:	df000017 	ldw	fp,0(sp)
    daa4:	dec00104 	addi	sp,sp,4
    daa8:	f800283a 	ret

0000daac <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
    daac:	defffe04 	addi	sp,sp,-8
    dab0:	df000115 	stw	fp,4(sp)
    dab4:	df000104 	addi	fp,sp,4
    dab8:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
    dabc:	e0bfff17 	ldw	r2,-4(fp)
    dac0:	10800a17 	ldw	r2,40(r2)
    dac4:	1007883a 	mov	r3,r2
    dac8:	00800044 	movi	r2,1
    dacc:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
    dad0:	e037883a 	mov	sp,fp
    dad4:	df000017 	ldw	fp,0(sp)
    dad8:	dec00104 	addi	sp,sp,4
    dadc:	f800283a 	ret

0000dae0 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
    dae0:	defffc04 	addi	sp,sp,-16
    dae4:	dfc00315 	stw	ra,12(sp)
    dae8:	df000215 	stw	fp,8(sp)
    daec:	df000204 	addi	fp,sp,8
    daf0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
    daf4:	e13fff17 	ldw	r4,-4(fp)
    daf8:	01400074 	movhi	r5,1
    dafc:	29508004 	addi	r5,r5,16896
    db00:	0010cdc0 	call	10cdc <alt_find_dev>
    db04:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    db08:	e0bffe17 	ldw	r2,-8(fp)
}
    db0c:	e037883a 	mov	sp,fp
    db10:	dfc00117 	ldw	ra,4(sp)
    db14:	df000017 	ldw	fp,0(sp)
    db18:	dec00204 	addi	sp,sp,8
    db1c:	f800283a 	ret

0000db20 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
    db20:	defffb04 	addi	sp,sp,-20
    db24:	df000415 	stw	fp,16(sp)
    db28:	df000404 	addi	fp,sp,16
    db2c:	e13ffd15 	stw	r4,-12(fp)
    db30:	e17ffe15 	stw	r5,-8(fp)
    db34:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
    db38:	e03ffc15 	stw	zero,-16(fp)
    db3c:	00000f06 	br	db7c <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
    db40:	e0bffd17 	ldw	r2,-12(fp)
    db44:	10800a17 	ldw	r2,40(r2)
    db48:	11000044 	addi	r4,r2,1
    db4c:	e0fffc17 	ldw	r3,-16(fp)
    db50:	e0bffe17 	ldw	r2,-8(fp)
    db54:	1885883a 	add	r2,r3,r2
    db58:	10800003 	ldbu	r2,0(r2)
    db5c:	10c03fcc 	andi	r3,r2,255
    db60:	18c0201c 	xori	r3,r3,128
    db64:	18ffe004 	addi	r3,r3,-128
    db68:	2005883a 	mov	r2,r4
    db6c:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
    db70:	e0bffc17 	ldw	r2,-16(fp)
    db74:	10800044 	addi	r2,r2,1
    db78:	e0bffc15 	stw	r2,-16(fp)
    db7c:	e0fffc17 	ldw	r3,-16(fp)
    db80:	e0bfff17 	ldw	r2,-4(fp)
    db84:	18bfee36 	bltu	r3,r2,db40 <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
    db88:	e037883a 	mov	sp,fp
    db8c:	df000017 	ldw	fp,0(sp)
    db90:	dec00104 	addi	sp,sp,4
    db94:	f800283a 	ret

0000db98 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
    db98:	defffd04 	addi	sp,sp,-12
    db9c:	df000215 	stw	fp,8(sp)
    dba0:	df000204 	addi	fp,sp,8
    dba4:	e13ffe15 	stw	r4,-8(fp)
    dba8:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
    dbac:	00000d06 	br	dbe4 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
    dbb0:	e0bffe17 	ldw	r2,-8(fp)
    dbb4:	10800a17 	ldw	r2,40(r2)
    dbb8:	11000044 	addi	r4,r2,1
    dbbc:	e0bfff17 	ldw	r2,-4(fp)
    dbc0:	10800003 	ldbu	r2,0(r2)
    dbc4:	10c03fcc 	andi	r3,r2,255
    dbc8:	18c0201c 	xori	r3,r3,128
    dbcc:	18ffe004 	addi	r3,r3,-128
    dbd0:	2005883a 	mov	r2,r4
    dbd4:	10c00025 	stbio	r3,0(r2)
		++ptr;
    dbd8:	e0bfff17 	ldw	r2,-4(fp)
    dbdc:	10800044 	addi	r2,r2,1
    dbe0:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
    dbe4:	e0bfff17 	ldw	r2,-4(fp)
    dbe8:	10800003 	ldbu	r2,0(r2)
    dbec:	10803fcc 	andi	r2,r2,255
    dbf0:	1080201c 	xori	r2,r2,128
    dbf4:	10bfe004 	addi	r2,r2,-128
    dbf8:	1004c03a 	cmpne	r2,r2,zero
    dbfc:	103fec1e 	bne	r2,zero,dbb0 <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
    dc00:	e037883a 	mov	sp,fp
    dc04:	df000017 	ldw	fp,0(sp)
    dc08:	dec00104 	addi	sp,sp,4
    dc0c:	f800283a 	ret

0000dc10 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
    dc10:	defffb04 	addi	sp,sp,-20
    dc14:	dfc00415 	stw	ra,16(sp)
    dc18:	df000315 	stw	fp,12(sp)
    dc1c:	df000304 	addi	fp,sp,12
    dc20:	e13ffd15 	stw	r4,-12(fp)
    dc24:	e17ffe15 	stw	r5,-8(fp)
    dc28:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
    dc2c:	e0bffd17 	ldw	r2,-12(fp)
    dc30:	10800017 	ldw	r2,0(r2)
    dc34:	1009883a 	mov	r4,r2
    dc38:	e1bfff17 	ldw	r6,-4(fp)
    dc3c:	e17ffe17 	ldw	r5,-8(fp)
    dc40:	000db200 	call	db20 <alt_up_character_lcd_write>
	return 0;
    dc44:	0005883a 	mov	r2,zero
}
    dc48:	e037883a 	mov	sp,fp
    dc4c:	dfc00117 	ldw	ra,4(sp)
    dc50:	df000017 	ldw	fp,0(sp)
    dc54:	dec00204 	addi	sp,sp,8
    dc58:	f800283a 	ret

0000dc5c <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
    dc5c:	defff904 	addi	sp,sp,-28
    dc60:	dfc00615 	stw	ra,24(sp)
    dc64:	df000515 	stw	fp,20(sp)
    dc68:	df000504 	addi	fp,sp,20
    dc6c:	e13ffc15 	stw	r4,-16(fp)
    dc70:	e17ffd15 	stw	r5,-12(fp)
    dc74:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
    dc78:	e0bffd17 	ldw	r2,-12(fp)
    dc7c:	10800a28 	cmpgeui	r2,r2,40
    dc80:	1000031e 	bne	r2,zero,dc90 <alt_up_character_lcd_set_cursor_pos+0x34>
    dc84:	e0bffe17 	ldw	r2,-8(fp)
    dc88:	108000b0 	cmpltui	r2,r2,2
    dc8c:	1000031e 	bne	r2,zero,dc9c <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
    dc90:	00bfffc4 	movi	r2,-1
    dc94:	e0bfff15 	stw	r2,-4(fp)
    dc98:	00000806 	br	dcbc <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    dc9c:	e13ffd17 	ldw	r4,-12(fp)
    dca0:	e17ffe17 	ldw	r5,-8(fp)
    dca4:	000d9fc0 	call	d9fc <get_DDRAM_addr>
    dca8:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
    dcac:	e17ffb03 	ldbu	r5,-20(fp)
    dcb0:	e13ffc17 	ldw	r4,-16(fp)
    dcb4:	000da780 	call	da78 <alt_up_character_lcd_send_cmd>
	return 0;
    dcb8:	e03fff15 	stw	zero,-4(fp)
    dcbc:	e0bfff17 	ldw	r2,-4(fp)
}
    dcc0:	e037883a 	mov	sp,fp
    dcc4:	dfc00117 	ldw	ra,4(sp)
    dcc8:	df000017 	ldw	fp,0(sp)
    dccc:	dec00204 	addi	sp,sp,8
    dcd0:	f800283a 	ret

0000dcd4 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    dcd4:	defff904 	addi	sp,sp,-28
    dcd8:	dfc00615 	stw	ra,24(sp)
    dcdc:	df000515 	stw	fp,20(sp)
    dce0:	df000504 	addi	fp,sp,20
    dce4:	e13ffc15 	stw	r4,-16(fp)
    dce8:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
    dcec:	e0bffd17 	ldw	r2,-12(fp)
    dcf0:	1005003a 	cmpeq	r2,r2,zero
    dcf4:	10001e1e 	bne	r2,zero,dd70 <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
    dcf8:	e0bffd17 	ldw	r2,-12(fp)
    dcfc:	10800050 	cmplti	r2,r2,1
    dd00:	1000031e 	bne	r2,zero,dd10 <alt_up_character_lcd_shift_cursor+0x3c>
    dd04:	00800504 	movi	r2,20
    dd08:	e0bfff05 	stb	r2,-4(fp)
    dd0c:	00000206 	br	dd18 <alt_up_character_lcd_shift_cursor+0x44>
    dd10:	00c00404 	movi	r3,16
    dd14:	e0ffff05 	stb	r3,-4(fp)
    dd18:	e0bfff03 	ldbu	r2,-4(fp)
    dd1c:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
    dd20:	e0fffd17 	ldw	r3,-12(fp)
    dd24:	e0fffe15 	stw	r3,-8(fp)
    dd28:	e0fffe17 	ldw	r3,-8(fp)
    dd2c:	1804403a 	cmpge	r2,r3,zero
    dd30:	1000031e 	bne	r2,zero,dd40 <alt_up_character_lcd_shift_cursor+0x6c>
    dd34:	e0bffe17 	ldw	r2,-8(fp)
    dd38:	0085c83a 	sub	r2,zero,r2
    dd3c:	e0bffe15 	stw	r2,-8(fp)
    dd40:	e0fffe17 	ldw	r3,-8(fp)
    dd44:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
    dd48:	00000306 	br	dd58 <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    dd4c:	e17ffb43 	ldbu	r5,-19(fp)
    dd50:	e13ffc17 	ldw	r4,-16(fp)
    dd54:	000da780 	call	da78 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    dd58:	e0bffb03 	ldbu	r2,-20(fp)
    dd5c:	10bfffc4 	addi	r2,r2,-1
    dd60:	e0bffb05 	stb	r2,-20(fp)
    dd64:	e0bffb03 	ldbu	r2,-20(fp)
    dd68:	10803fd8 	cmpnei	r2,r2,255
    dd6c:	103ff71e 	bne	r2,zero,dd4c <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    dd70:	e037883a 	mov	sp,fp
    dd74:	dfc00117 	ldw	ra,4(sp)
    dd78:	df000017 	ldw	fp,0(sp)
    dd7c:	dec00204 	addi	sp,sp,8
    dd80:	f800283a 	ret

0000dd84 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    dd84:	defff904 	addi	sp,sp,-28
    dd88:	dfc00615 	stw	ra,24(sp)
    dd8c:	df000515 	stw	fp,20(sp)
    dd90:	df000504 	addi	fp,sp,20
    dd94:	e13ffc15 	stw	r4,-16(fp)
    dd98:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
    dd9c:	e0bffd17 	ldw	r2,-12(fp)
    dda0:	1005003a 	cmpeq	r2,r2,zero
    dda4:	10001e1e 	bne	r2,zero,de20 <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
    dda8:	e0bffd17 	ldw	r2,-12(fp)
    ddac:	10800050 	cmplti	r2,r2,1
    ddb0:	1000031e 	bne	r2,zero,ddc0 <alt_up_character_lcd_shift_display+0x3c>
    ddb4:	00800704 	movi	r2,28
    ddb8:	e0bfff05 	stb	r2,-4(fp)
    ddbc:	00000206 	br	ddc8 <alt_up_character_lcd_shift_display+0x44>
    ddc0:	00c00604 	movi	r3,24
    ddc4:	e0ffff05 	stb	r3,-4(fp)
    ddc8:	e0bfff03 	ldbu	r2,-4(fp)
    ddcc:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
    ddd0:	e0fffd17 	ldw	r3,-12(fp)
    ddd4:	e0fffe15 	stw	r3,-8(fp)
    ddd8:	e0fffe17 	ldw	r3,-8(fp)
    dddc:	1804403a 	cmpge	r2,r3,zero
    dde0:	1000031e 	bne	r2,zero,ddf0 <alt_up_character_lcd_shift_display+0x6c>
    dde4:	e0bffe17 	ldw	r2,-8(fp)
    dde8:	0085c83a 	sub	r2,zero,r2
    ddec:	e0bffe15 	stw	r2,-8(fp)
    ddf0:	e0fffe17 	ldw	r3,-8(fp)
    ddf4:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
    ddf8:	00000306 	br	de08 <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    ddfc:	e17ffb43 	ldbu	r5,-19(fp)
    de00:	e13ffc17 	ldw	r4,-16(fp)
    de04:	000da780 	call	da78 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    de08:	e0bffb03 	ldbu	r2,-20(fp)
    de0c:	10bfffc4 	addi	r2,r2,-1
    de10:	e0bffb05 	stb	r2,-20(fp)
    de14:	e0bffb03 	ldbu	r2,-20(fp)
    de18:	10803fd8 	cmpnei	r2,r2,255
    de1c:	103ff71e 	bne	r2,zero,ddfc <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    de20:	e037883a 	mov	sp,fp
    de24:	dfc00117 	ldw	ra,4(sp)
    de28:	df000017 	ldw	fp,0(sp)
    de2c:	dec00204 	addi	sp,sp,8
    de30:	f800283a 	ret

0000de34 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
    de34:	defff904 	addi	sp,sp,-28
    de38:	dfc00615 	stw	ra,24(sp)
    de3c:	df000515 	stw	fp,20(sp)
    de40:	df000504 	addi	fp,sp,20
    de44:	e13ffc15 	stw	r4,-16(fp)
    de48:	e17ffd15 	stw	r5,-12(fp)
    de4c:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
    de50:	e0bffd17 	ldw	r2,-12(fp)
    de54:	10800a28 	cmpgeui	r2,r2,40
    de58:	1000031e 	bne	r2,zero,de68 <alt_up_character_lcd_erase_pos+0x34>
    de5c:	e0bffe17 	ldw	r2,-8(fp)
    de60:	108000b0 	cmpltui	r2,r2,2
    de64:	1000031e 	bne	r2,zero,de74 <alt_up_character_lcd_erase_pos+0x40>
		return -1;
    de68:	00bfffc4 	movi	r2,-1
    de6c:	e0bfff15 	stw	r2,-4(fp)
    de70:	00000e06 	br	deac <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    de74:	e13ffd17 	ldw	r4,-12(fp)
    de78:	e17ffe17 	ldw	r5,-8(fp)
    de7c:	000d9fc0 	call	d9fc <get_DDRAM_addr>
    de80:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
    de84:	e17ffb03 	ldbu	r5,-20(fp)
    de88:	e13ffc17 	ldw	r4,-16(fp)
    de8c:	000da780 	call	da78 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
    de90:	e0bffc17 	ldw	r2,-16(fp)
    de94:	10800a17 	ldw	r2,40(r2)
    de98:	10800044 	addi	r2,r2,1
    de9c:	1007883a 	mov	r3,r2
    dea0:	00800084 	movi	r2,2
    dea4:	18800025 	stbio	r2,0(r3)
	return 0;
    dea8:	e03fff15 	stw	zero,-4(fp)
    deac:	e0bfff17 	ldw	r2,-4(fp)
}
    deb0:	e037883a 	mov	sp,fp
    deb4:	dfc00117 	ldw	ra,4(sp)
    deb8:	df000017 	ldw	fp,0(sp)
    debc:	dec00204 	addi	sp,sp,8
    dec0:	f800283a 	ret

0000dec4 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
    dec4:	defffd04 	addi	sp,sp,-12
    dec8:	dfc00215 	stw	ra,8(sp)
    decc:	df000115 	stw	fp,4(sp)
    ded0:	df000104 	addi	fp,sp,4
    ded4:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
    ded8:	e13fff17 	ldw	r4,-4(fp)
    dedc:	01400304 	movi	r5,12
    dee0:	000da780 	call	da78 <alt_up_character_lcd_send_cmd>
}
    dee4:	e037883a 	mov	sp,fp
    dee8:	dfc00117 	ldw	ra,4(sp)
    deec:	df000017 	ldw	fp,0(sp)
    def0:	dec00204 	addi	sp,sp,8
    def4:	f800283a 	ret

0000def8 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
    def8:	defffd04 	addi	sp,sp,-12
    defc:	dfc00215 	stw	ra,8(sp)
    df00:	df000115 	stw	fp,4(sp)
    df04:	df000104 	addi	fp,sp,4
    df08:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
    df0c:	e13fff17 	ldw	r4,-4(fp)
    df10:	014003c4 	movi	r5,15
    df14:	000da780 	call	da78 <alt_up_character_lcd_send_cmd>
}
    df18:	e037883a 	mov	sp,fp
    df1c:	dfc00117 	ldw	ra,4(sp)
    df20:	df000017 	ldw	fp,0(sp)
    df24:	dec00204 	addi	sp,sp,8
    df28:	f800283a 	ret

0000df2c <alt_up_ethernet_init>:
#include "altera_up_avalon_ethernet.h"
#include "altera_up_avalon_ethernet_regs.h"
#include "altera_up_avalon_ethernet_low_level_driver.h"

void alt_up_ethernet_init(alt_up_ethernet_dev *ethernet)
{
    df2c:	defffb04 	addi	sp,sp,-20
    df30:	dfc00415 	stw	ra,16(sp)
    df34:	df000315 	stw	fp,12(sp)
    df38:	df000304 	addi	fp,sp,12
    df3c:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned int base = ethernet->base;
    df40:	e0bfff17 	ldw	r2,-4(fp)
    df44:	10800a17 	ldw	r2,40(r2)
    df48:	e0bffe15 	stw	r2,-8(fp)
	int i;

	// Power on the internal PHY
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_GPR, 0x00 );
    df4c:	e13ffe17 	ldw	r4,-8(fp)
    df50:	014007c4 	movi	r5,31
    df54:	000d883a 	mov	r6,zero
    df58:	000e0b80 	call	e0b8 <alt_up_ethernet_reg_write>

	// Software Reset of the Ethernet chip
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_NCR, 0x01 );
    df5c:	e13ffe17 	ldw	r4,-8(fp)
    df60:	000b883a 	mov	r5,zero
    df64:	01800044 	movi	r6,1
    df68:	000e0b80 	call	e0b8 <alt_up_ethernet_reg_write>
	usleep(10);
    df6c:	01000284 	movi	r4,10
    df70:	00113440 	call	11344 <usleep>
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_NCR, 0x00 );
    df74:	e13ffe17 	ldw	r4,-8(fp)
    df78:	000b883a 	mov	r5,zero
    df7c:	000d883a 	mov	r6,zero
    df80:	000e0b80 	call	e0b8 <alt_up_ethernet_reg_write>
	usleep(1);
    df84:	01000044 	movi	r4,1
    df88:	00113440 	call	11344 <usleep>

	// Initialize the MAC Address
	for (i = 0; i < 6; i++) 
    df8c:	e03ffd15 	stw	zero,-12(fp)
    df90:	00000e06 	br	dfcc <alt_up_ethernet_init+0xa0>
		alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_PAR + i, ethernet->mac_addr[i] );
    df94:	e0bffd17 	ldw	r2,-12(fp)
    df98:	10800404 	addi	r2,r2,16
    df9c:	100b883a 	mov	r5,r2
    dfa0:	e0fffd17 	ldw	r3,-12(fp)
    dfa4:	e0bfff17 	ldw	r2,-4(fp)
    dfa8:	1885883a 	add	r2,r3,r2
    dfac:	10800d04 	addi	r2,r2,52
    dfb0:	10800003 	ldbu	r2,0(r2)
    dfb4:	11803fcc 	andi	r6,r2,255
    dfb8:	e13ffe17 	ldw	r4,-8(fp)
    dfbc:	000e0b80 	call	e0b8 <alt_up_ethernet_reg_write>
	usleep(10);
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_NCR, 0x00 );
	usleep(1);

	// Initialize the MAC Address
	for (i = 0; i < 6; i++) 
    dfc0:	e0bffd17 	ldw	r2,-12(fp)
    dfc4:	10800044 	addi	r2,r2,1
    dfc8:	e0bffd15 	stw	r2,-12(fp)
    dfcc:	e0bffd17 	ldw	r2,-12(fp)
    dfd0:	10800190 	cmplti	r2,r2,6
    dfd4:	103fef1e 	bne	r2,zero,df94 <alt_up_ethernet_init+0x68>
		alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_PAR + i, ethernet->mac_addr[i] );

	/* clear any pending interrupt */
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_ISR,  0x3F );
    dfd8:	e13ffe17 	ldw	r4,-8(fp)
    dfdc:	01403f84 	movi	r5,254
    dfe0:	01800fc4 	movi	r6,63
    dfe4:	000e0b80 	call	e0b8 <alt_up_ethernet_reg_write>
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_NSR,  0x2C );
    dfe8:	e13ffe17 	ldw	r4,-8(fp)
    dfec:	01400044 	movi	r5,1
    dff0:	01800b04 	movi	r6,44
    dff4:	000e0b80 	call	e0b8 <alt_up_ethernet_reg_write>

	/* set PAR bit, don't enable interrupts (do that with the set_interrupts() function */
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_IMR, 0x80 );
    dff8:	e13ffe17 	ldw	r4,-8(fp)
    dffc:	01403fc4 	movi	r5,255
    e000:	01802004 	movi	r6,128
    e004:	000e0b80 	call	e0b8 <alt_up_ethernet_reg_write>

	/* enable RX (Broadcast/ ALL_MULTICAST) */
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_RCR, 0x39 );
    e008:	e13ffe17 	ldw	r4,-8(fp)
    e00c:	01400144 	movi	r5,5
    e010:	01800e44 	movi	r6,57
    e014:	000e0b80 	call	e0b8 <alt_up_ethernet_reg_write>

	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_ETXCSR, 0x03 );
    e018:	e13ffe17 	ldw	r4,-8(fp)
    e01c:	01400c04 	movi	r5,48
    e020:	018000c4 	movi	r6,3
    e024:	000e0b80 	call	e0b8 <alt_up_ethernet_reg_write>

	return;
}
    e028:	e037883a 	mov	sp,fp
    e02c:	dfc00117 	ldw	ra,4(sp)
    e030:	df000017 	ldw	fp,0(sp)
    e034:	dec00204 	addi	sp,sp,8
    e038:	f800283a 	ret

0000e03c <alt_up_ethernet_open_dev>:

alt_up_ethernet_dev* alt_up_ethernet_open_dev(const char* name)
{
    e03c:	defffc04 	addi	sp,sp,-16
    e040:	dfc00315 	stw	ra,12(sp)
    e044:	df000215 	stw	fp,8(sp)
    e048:	df000204 	addi	fp,sp,8
    e04c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ethernet_dev * dev = (alt_up_ethernet_dev *) alt_find_dev( name, &alt_dev_list );
    e050:	e13fff17 	ldw	r4,-4(fp)
    e054:	01400074 	movhi	r5,1
    e058:	29508004 	addi	r5,r5,16896
    e05c:	0010cdc0 	call	10cdc <alt_find_dev>
    e060:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    e064:	e0bffe17 	ldw	r2,-8(fp)
}
    e068:	e037883a 	mov	sp,fp
    e06c:	dfc00117 	ldw	ra,4(sp)
    e070:	df000017 	ldw	fp,0(sp)
    e074:	dec00204 	addi	sp,sp,8
    e078:	f800283a 	ret

0000e07c <alt_up_ethernet_reg_read>:
#include "altera_up_avalon_ethernet_low_level_driver.h"
#include "altera_up_avalon_ethernet_regs.h"
#include <unistd.h>

unsigned int alt_up_ethernet_reg_read(unsigned int base, unsigned int reg)
{
    e07c:	defffd04 	addi	sp,sp,-12
    e080:	df000215 	stw	fp,8(sp)
    e084:	df000204 	addi	fp,sp,8
    e088:	e13ffe15 	stw	r4,-8(fp)
    e08c:	e17fff15 	stw	r5,-4(fp)
	IOWR_ALTERA_UP_AVALON_ETHERNET_INDEX(base, reg);
    e090:	e0bffe17 	ldw	r2,-8(fp)
    e094:	e0ffff17 	ldw	r3,-4(fp)
    e098:	10c00035 	stwio	r3,0(r2)
	return IORD_ALTERA_UP_AVALON_ETHERNET_DATA(base);
    e09c:	e0bffe17 	ldw	r2,-8(fp)
    e0a0:	10800104 	addi	r2,r2,4
    e0a4:	10800037 	ldwio	r2,0(r2)
}
    e0a8:	e037883a 	mov	sp,fp
    e0ac:	df000017 	ldw	fp,0(sp)
    e0b0:	dec00104 	addi	sp,sp,4
    e0b4:	f800283a 	ret

0000e0b8 <alt_up_ethernet_reg_write>:

void alt_up_ethernet_reg_write(unsigned int base, unsigned int reg, unsigned int data)
{
    e0b8:	defffc04 	addi	sp,sp,-16
    e0bc:	df000315 	stw	fp,12(sp)
    e0c0:	df000304 	addi	fp,sp,12
    e0c4:	e13ffd15 	stw	r4,-12(fp)
    e0c8:	e17ffe15 	stw	r5,-8(fp)
    e0cc:	e1bfff15 	stw	r6,-4(fp)
	IOWR_ALTERA_UP_AVALON_ETHERNET_INDEX(base, reg);
    e0d0:	e0bffd17 	ldw	r2,-12(fp)
    e0d4:	e0fffe17 	ldw	r3,-8(fp)
    e0d8:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_UP_AVALON_ETHERNET_DATA(base, data);
    e0dc:	e0bffd17 	ldw	r2,-12(fp)
    e0e0:	10800104 	addi	r2,r2,4
    e0e4:	e0ffff17 	ldw	r3,-4(fp)
    e0e8:	10c00035 	stwio	r3,0(r2)
}
    e0ec:	e037883a 	mov	sp,fp
    e0f0:	df000017 	ldw	fp,0(sp)
    e0f4:	dec00104 	addi	sp,sp,4
    e0f8:	f800283a 	ret

0000e0fc <alt_up_ethernet_phy_reg_read>:

unsigned int alt_up_ethernet_phy_reg_read (unsigned int base, unsigned int reg)
{
    e0fc:	defffa04 	addi	sp,sp,-24
    e100:	dfc00515 	stw	ra,20(sp)
    e104:	df000415 	stw	fp,16(sp)
    e108:	df000404 	addi	fp,sp,16
    e10c:	e13ffe15 	stw	r4,-8(fp)
    e110:	e17fff15 	stw	r5,-4(fp)
	unsigned int result = 0;
    e114:	e03ffd15 	stw	zero,-12(fp)
	unsigned int timeout = 0;
    e118:	e03ffc15 	stw	zero,-16(fp)

	/* set PHY register address into EPAR REG. 0CH */
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPAR, reg | 0x40);				/* PHY register address setting, and DM9000_PHY offset = 0x40 */
    e11c:	e0bfff17 	ldw	r2,-4(fp)
    e120:	11801014 	ori	r6,r2,64
    e124:	e13ffe17 	ldw	r4,-8(fp)
    e128:	01400304 	movi	r5,12
    e12c:	000e0b80 	call	e0b8 <alt_up_ethernet_reg_write>

	/* issue PHY + READ command = 0xC into EPCR REG. 0BH */
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPCR, 0x0C);					/* issue PHY + READ command */
    e130:	e13ffe17 	ldw	r4,-8(fp)
    e134:	014002c4 	movi	r5,11
    e138:	01800304 	movi	r6,12
    e13c:	000e0b80 	call	e0b8 <alt_up_ethernet_reg_write>
	do {
		usleep(1);
    e140:	01000044 	movi	r4,1
    e144:	00113440 	call	11344 <usleep>
		timeout++;
    e148:	e0bffc17 	ldw	r2,-16(fp)
    e14c:	10800044 	addi	r2,r2,1
    e150:	e0bffc15 	stw	r2,-16(fp)
	} while ((timeout < 50) && (alt_up_ethernet_reg_read(base, ALT_UP_ETHERNET_EPCR) & 0x01));
    e154:	e0bffc17 	ldw	r2,-16(fp)
    e158:	10800ca8 	cmpgeui	r2,r2,50
    e15c:	1000071e 	bne	r2,zero,e17c <alt_up_ethernet_phy_reg_read+0x80>
    e160:	e13ffe17 	ldw	r4,-8(fp)
    e164:	014002c4 	movi	r5,11
    e168:	000e07c0 	call	e07c <alt_up_ethernet_reg_read>
    e16c:	1080004c 	andi	r2,r2,1
    e170:	10803fcc 	andi	r2,r2,255
    e174:	1004c03a 	cmpne	r2,r2,zero
    e178:	103ff11e 	bne	r2,zero,e140 <alt_up_ethernet_phy_reg_read+0x44>
	
	usleep(1);
    e17c:	01000044 	movi	r4,1
    e180:	00113440 	call	11344 <usleep>
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPCR, 0x08);					/* clear PHY command */
    e184:	e13ffe17 	ldw	r4,-8(fp)
    e188:	014002c4 	movi	r5,11
    e18c:	01800204 	movi	r6,8
    e190:	000e0b80 	call	e0b8 <alt_up_ethernet_reg_write>

	/* read PHY data from EPDR REG. 0EH & REG. 0DH */
	result = (alt_up_ethernet_reg_read(base, ALT_UP_ETHERNET_EPDRH) << 8);			/* PHY data high_byte */
    e194:	e13ffe17 	ldw	r4,-8(fp)
    e198:	01400384 	movi	r5,14
    e19c:	000e07c0 	call	e07c <alt_up_ethernet_reg_read>
    e1a0:	1004923a 	slli	r2,r2,8
    e1a4:	e0bffd15 	stw	r2,-12(fp)
	result |= alt_up_ethernet_reg_read(base, ALT_UP_ETHERNET_EPDRL);				/* PHY data low_byte */
    e1a8:	e13ffe17 	ldw	r4,-8(fp)
    e1ac:	01400344 	movi	r5,13
    e1b0:	000e07c0 	call	e07c <alt_up_ethernet_reg_read>
    e1b4:	1007883a 	mov	r3,r2
    e1b8:	e0bffd17 	ldw	r2,-12(fp)
    e1bc:	10c4b03a 	or	r2,r2,r3
    e1c0:	e0bffd15 	stw	r2,-12(fp)

	return result;
    e1c4:	e0bffd17 	ldw	r2,-12(fp)
}
    e1c8:	e037883a 	mov	sp,fp
    e1cc:	dfc00117 	ldw	ra,4(sp)
    e1d0:	df000017 	ldw	fp,0(sp)
    e1d4:	dec00204 	addi	sp,sp,8
    e1d8:	f800283a 	ret

0000e1dc <alt_up_ethernet_phy_reg_write>:

void alt_up_ethernet_phy_reg_write (unsigned int base, unsigned int reg, unsigned int data)
{ 
    e1dc:	defffa04 	addi	sp,sp,-24
    e1e0:	dfc00515 	stw	ra,20(sp)
    e1e4:	df000415 	stw	fp,16(sp)
    e1e8:	df000404 	addi	fp,sp,16
    e1ec:	e13ffd15 	stw	r4,-12(fp)
    e1f0:	e17ffe15 	stw	r5,-8(fp)
    e1f4:	e1bfff15 	stw	r6,-4(fp)
	unsigned int timeout = 0;
    e1f8:	e03ffc15 	stw	zero,-16(fp)
	
	/* set PHY register address into EPAR REG. 0CH */
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPAR, reg | 0x40);				/* PHY register address setting, and DM9000_PHY offset = 0x40 */
    e1fc:	e0bffe17 	ldw	r2,-8(fp)
    e200:	11801014 	ori	r6,r2,64
    e204:	e13ffd17 	ldw	r4,-12(fp)
    e208:	01400304 	movi	r5,12
    e20c:	000e0b80 	call	e0b8 <alt_up_ethernet_reg_write>

	/* fill PHY WRITE data into EPDR REG. 0EH & REG. 0DH */
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPDRH, ((data >> 8) & 0xFF));	/* PHY data high_byte */
    e210:	e0bfff17 	ldw	r2,-4(fp)
    e214:	1004d23a 	srli	r2,r2,8
    e218:	11803fcc 	andi	r6,r2,255
    e21c:	e13ffd17 	ldw	r4,-12(fp)
    e220:	01400384 	movi	r5,14
    e224:	000e0b80 	call	e0b8 <alt_up_ethernet_reg_write>
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPDRL, data & 0xFF);			/* PHY data low_byte */
    e228:	e0bfff17 	ldw	r2,-4(fp)
    e22c:	11803fcc 	andi	r6,r2,255
    e230:	e13ffd17 	ldw	r4,-12(fp)
    e234:	01400344 	movi	r5,13
    e238:	000e0b80 	call	e0b8 <alt_up_ethernet_reg_write>

	/* issue PHY + WRITE command = 0xA into EPCR REG. 0BH */
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPCR, 0x0A);					/* issue PHY + WRITE command */
    e23c:	e13ffd17 	ldw	r4,-12(fp)
    e240:	014002c4 	movi	r5,11
    e244:	01800284 	movi	r6,10
    e248:	000e0b80 	call	e0b8 <alt_up_ethernet_reg_write>
	do {
		usleep(1);
    e24c:	01000044 	movi	r4,1
    e250:	00113440 	call	11344 <usleep>
		timeout++;
    e254:	e0bffc17 	ldw	r2,-16(fp)
    e258:	10800044 	addi	r2,r2,1
    e25c:	e0bffc15 	stw	r2,-16(fp)
	} while ((timeout < 50) && (alt_up_ethernet_reg_read(base, ALT_UP_ETHERNET_EPCR) & 0x01));
    e260:	e0bffc17 	ldw	r2,-16(fp)
    e264:	10800ca8 	cmpgeui	r2,r2,50
    e268:	1000071e 	bne	r2,zero,e288 <alt_up_ethernet_phy_reg_write+0xac>
    e26c:	e13ffd17 	ldw	r4,-12(fp)
    e270:	014002c4 	movi	r5,11
    e274:	000e07c0 	call	e07c <alt_up_ethernet_reg_read>
    e278:	1080004c 	andi	r2,r2,1
    e27c:	10803fcc 	andi	r2,r2,255
    e280:	1004c03a 	cmpne	r2,r2,zero
    e284:	103ff11e 	bne	r2,zero,e24c <alt_up_ethernet_phy_reg_write+0x70>
	
	usleep(1);
    e288:	01000044 	movi	r4,1
    e28c:	00113440 	call	11344 <usleep>
	
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPCR, 0x08);					/* clear PHY command */
    e290:	e13ffd17 	ldw	r4,-12(fp)
    e294:	014002c4 	movi	r5,11
    e298:	01800204 	movi	r6,8
    e29c:	000e0b80 	call	e0b8 <alt_up_ethernet_reg_write>
}
    e2a0:	e037883a 	mov	sp,fp
    e2a4:	dfc00117 	ldw	ra,4(sp)
    e2a8:	df000017 	ldw	fp,0(sp)
    e2ac:	dec00204 	addi	sp,sp,8
    e2b0:	f800283a 	ret

0000e2b4 <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
    e2b4:	defffd04 	addi	sp,sp,-12
    e2b8:	df000215 	stw	fp,8(sp)
    e2bc:	df000204 	addi	fp,sp,8
    e2c0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    e2c4:	e0bfff17 	ldw	r2,-4(fp)
    e2c8:	10800a17 	ldw	r2,40(r2)
    e2cc:	10800104 	addi	r2,r2,4
    e2d0:	10800037 	ldwio	r2,0(r2)
    e2d4:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
    e2d8:	e0bffe17 	ldw	r2,-8(fp)
    e2dc:	10800054 	ori	r2,r2,1
    e2e0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    e2e4:	e0bfff17 	ldw	r2,-4(fp)
    e2e8:	10800a17 	ldw	r2,40(r2)
    e2ec:	10800104 	addi	r2,r2,4
    e2f0:	e0fffe17 	ldw	r3,-8(fp)
    e2f4:	10c00035 	stwio	r3,0(r2)
}
    e2f8:	e037883a 	mov	sp,fp
    e2fc:	df000017 	ldw	fp,0(sp)
    e300:	dec00104 	addi	sp,sp,4
    e304:	f800283a 	ret

0000e308 <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
    e308:	defffd04 	addi	sp,sp,-12
    e30c:	df000215 	stw	fp,8(sp)
    e310:	df000204 	addi	fp,sp,8
    e314:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    e318:	e0bfff17 	ldw	r2,-4(fp)
    e31c:	10800a17 	ldw	r2,40(r2)
    e320:	10800104 	addi	r2,r2,4
    e324:	10800037 	ldwio	r2,0(r2)
    e328:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
    e32c:	e0fffe17 	ldw	r3,-8(fp)
    e330:	00bfff84 	movi	r2,-2
    e334:	1884703a 	and	r2,r3,r2
    e338:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    e33c:	e0bfff17 	ldw	r2,-4(fp)
    e340:	10800a17 	ldw	r2,40(r2)
    e344:	10800104 	addi	r2,r2,4
    e348:	e0fffe17 	ldw	r3,-8(fp)
    e34c:	10c00035 	stwio	r3,0(r2)
}
    e350:	e037883a 	mov	sp,fp
    e354:	df000017 	ldw	fp,0(sp)
    e358:	dec00104 	addi	sp,sp,4
    e35c:	f800283a 	ret

0000e360 <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
    e360:	defffd04 	addi	sp,sp,-12
    e364:	df000215 	stw	fp,8(sp)
    e368:	df000204 	addi	fp,sp,8
    e36c:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
    e370:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
    e374:	e0bfff17 	ldw	r2,-4(fp)
    e378:	10800a17 	ldw	r2,40(r2)
    e37c:	10800084 	addi	r2,r2,2
    e380:	1080002b 	ldhuio	r2,0(r2)
    e384:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
    e388:	e0bffe0b 	ldhu	r2,-8(fp)
}
    e38c:	e037883a 	mov	sp,fp
    e390:	df000017 	ldw	fp,0(sp)
    e394:	dec00104 	addi	sp,sp,4
    e398:	f800283a 	ret

0000e39c <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
    e39c:	defffd04 	addi	sp,sp,-12
    e3a0:	df000215 	stw	fp,8(sp)
    e3a4:	df000204 	addi	fp,sp,8
    e3a8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    e3ac:	e0bfff17 	ldw	r2,-4(fp)
    e3b0:	10800a17 	ldw	r2,40(r2)
    e3b4:	10800104 	addi	r2,r2,4
    e3b8:	10800037 	ldwio	r2,0(r2)
    e3bc:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
    e3c0:	e0bffe17 	ldw	r2,-8(fp)
    e3c4:	10bfffec 	andhi	r2,r2,65535
    e3c8:	1004d43a 	srli	r2,r2,16
}
    e3cc:	e037883a 	mov	sp,fp
    e3d0:	df000017 	ldw	fp,0(sp)
    e3d4:	dec00104 	addi	sp,sp,4
    e3d8:	f800283a 	ret

0000e3dc <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
    e3dc:	defffc04 	addi	sp,sp,-16
    e3e0:	df000315 	stw	fp,12(sp)
    e3e4:	df000304 	addi	fp,sp,12
    e3e8:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
    e3ec:	e0bffe17 	ldw	r2,-8(fp)
    e3f0:	1080800c 	andi	r2,r2,512
    e3f4:	1004d27a 	srli	r2,r2,9
    e3f8:	e0bffd15 	stw	r2,-12(fp)
	return (parity_error ? -1 : 0);
    e3fc:	e0bffd17 	ldw	r2,-12(fp)
    e400:	1005003a 	cmpeq	r2,r2,zero
    e404:	1000031e 	bne	r2,zero,e414 <alt_up_irda_check_parity+0x38>
    e408:	00bfffc4 	movi	r2,-1
    e40c:	e0bfff15 	stw	r2,-4(fp)
    e410:	00000106 	br	e418 <alt_up_irda_check_parity+0x3c>
    e414:	e03fff15 	stw	zero,-4(fp)
    e418:	e0bfff17 	ldw	r2,-4(fp)
}
    e41c:	e037883a 	mov	sp,fp
    e420:	df000017 	ldw	fp,0(sp)
    e424:	dec00104 	addi	sp,sp,4
    e428:	f800283a 	ret

0000e42c <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
    e42c:	defffc04 	addi	sp,sp,-16
    e430:	df000315 	stw	fp,12(sp)
    e434:	df000304 	addi	fp,sp,12
    e438:	e13ffe15 	stw	r4,-8(fp)
    e43c:	e17fff05 	stb	r5,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    e440:	e0bffe17 	ldw	r2,-8(fp)
    e444:	10800a17 	ldw	r2,40(r2)
    e448:	10800037 	ldwio	r2,0(r2)
    e44c:	e0bffd15 	stw	r2,-12(fp)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
    e450:	e0bffe17 	ldw	r2,-8(fp)
    e454:	10800a17 	ldw	r2,40(r2)
    e458:	e0ffff03 	ldbu	r3,-4(fp)
    e45c:	10c00035 	stwio	r3,0(r2)
	return 0;
    e460:	0005883a 	mov	r2,zero
}
    e464:	e037883a 	mov	sp,fp
    e468:	df000017 	ldw	fp,0(sp)
    e46c:	dec00104 	addi	sp,sp,4
    e470:	f800283a 	ret

0000e474 <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
    e474:	defffa04 	addi	sp,sp,-24
    e478:	dfc00515 	stw	ra,20(sp)
    e47c:	df000415 	stw	fp,16(sp)
    e480:	df000404 	addi	fp,sp,16
    e484:	e13ffd15 	stw	r4,-12(fp)
    e488:	e17ffe15 	stw	r5,-8(fp)
    e48c:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    e490:	e0bffd17 	ldw	r2,-12(fp)
    e494:	10800a17 	ldw	r2,40(r2)
    e498:	10800037 	ldwio	r2,0(r2)
    e49c:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
    e4a0:	e0bffc17 	ldw	r2,-16(fp)
    e4a4:	1007883a 	mov	r3,r2
    e4a8:	e0bffe17 	ldw	r2,-8(fp)
    e4ac:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
    e4b0:	e13ffc17 	ldw	r4,-16(fp)
    e4b4:	000e3dc0 	call	e3dc <alt_up_irda_check_parity>
    e4b8:	1007883a 	mov	r3,r2
    e4bc:	e0bfff17 	ldw	r2,-4(fp)
    e4c0:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
    e4c4:	e0bffc17 	ldw	r2,-16(fp)
    e4c8:	10a0000c 	andi	r2,r2,32768
    e4cc:	1004d3fa 	srli	r2,r2,15
    e4d0:	10bfffc4 	addi	r2,r2,-1
}
    e4d4:	e037883a 	mov	sp,fp
    e4d8:	dfc00117 	ldw	ra,4(sp)
    e4dc:	df000017 	ldw	fp,0(sp)
    e4e0:	dec00204 	addi	sp,sp,8
    e4e4:	f800283a 	ret

0000e4e8 <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
    e4e8:	defff804 	addi	sp,sp,-32
    e4ec:	dfc00715 	stw	ra,28(sp)
    e4f0:	df000615 	stw	fp,24(sp)
    e4f4:	df000604 	addi	fp,sp,24
    e4f8:	e13ffd15 	stw	r4,-12(fp)
    e4fc:	e17ffe15 	stw	r5,-8(fp)
    e500:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    e504:	e0bffd17 	ldw	r2,-12(fp)
    e508:	10800017 	ldw	r2,0(r2)
    e50c:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
    e510:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
    e514:	00000c06 	br	e548 <alt_up_irda_read_fd+0x60>
	{
		if (alt_up_irda_read_data(irda, ptr++, &parity_error)==0)
    e518:	e17ffe17 	ldw	r5,-8(fp)
    e51c:	e0bffe17 	ldw	r2,-8(fp)
    e520:	10800044 	addi	r2,r2,1
    e524:	e0bffe15 	stw	r2,-8(fp)
    e528:	e1bffc04 	addi	r6,fp,-16
    e52c:	e13ffb17 	ldw	r4,-20(fp)
    e530:	000e4740 	call	e474 <alt_up_irda_read_data>
    e534:	1004c03a 	cmpne	r2,r2,zero
    e538:	1000091e 	bne	r2,zero,e560 <alt_up_irda_read_fd+0x78>
			count++;
    e53c:	e0bffa17 	ldw	r2,-24(fp)
    e540:	10800044 	addi	r2,r2,1
    e544:	e0bffa15 	stw	r2,-24(fp)
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    e548:	e0bfff17 	ldw	r2,-4(fp)
    e54c:	10bfffc4 	addi	r2,r2,-1
    e550:	e0bfff15 	stw	r2,-4(fp)
    e554:	e0bfff17 	ldw	r2,-4(fp)
    e558:	10bfffd8 	cmpnei	r2,r2,-1
    e55c:	103fee1e 	bne	r2,zero,e518 <alt_up_irda_read_fd+0x30>
		if (alt_up_irda_read_data(irda, ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
    e560:	e0bffa17 	ldw	r2,-24(fp)
}
    e564:	e037883a 	mov	sp,fp
    e568:	dfc00117 	ldw	ra,4(sp)
    e56c:	df000017 	ldw	fp,0(sp)
    e570:	dec00204 	addi	sp,sp,8
    e574:	f800283a 	ret

0000e578 <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
    e578:	defff904 	addi	sp,sp,-28
    e57c:	dfc00615 	stw	ra,24(sp)
    e580:	df000515 	stw	fp,20(sp)
    e584:	df000504 	addi	fp,sp,20
    e588:	e13ffd15 	stw	r4,-12(fp)
    e58c:	e17ffe15 	stw	r5,-8(fp)
    e590:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    e594:	e0bffd17 	ldw	r2,-12(fp)
    e598:	10800017 	ldw	r2,0(r2)
    e59c:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
    e5a0:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
    e5a4:	00000c06 	br	e5d8 <alt_up_irda_write_fd+0x60>
	{
		if (alt_up_irda_write_data(irda, ptr++)==0)
    e5a8:	e0bffe17 	ldw	r2,-8(fp)
    e5ac:	11403fcc 	andi	r5,r2,255
    e5b0:	e0bffe17 	ldw	r2,-8(fp)
    e5b4:	10800044 	addi	r2,r2,1
    e5b8:	e0bffe15 	stw	r2,-8(fp)
    e5bc:	e13ffc17 	ldw	r4,-16(fp)
    e5c0:	000e42c0 	call	e42c <alt_up_irda_write_data>
    e5c4:	1004c03a 	cmpne	r2,r2,zero
    e5c8:	1000091e 	bne	r2,zero,e5f0 <alt_up_irda_write_fd+0x78>
			count++;
    e5cc:	e0bffb17 	ldw	r2,-20(fp)
    e5d0:	10800044 	addi	r2,r2,1
    e5d4:	e0bffb15 	stw	r2,-20(fp)

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
    e5d8:	e0bfff17 	ldw	r2,-4(fp)
    e5dc:	10bfffc4 	addi	r2,r2,-1
    e5e0:	e0bfff15 	stw	r2,-4(fp)
    e5e4:	e0bfff17 	ldw	r2,-4(fp)
    e5e8:	10bfffd8 	cmpnei	r2,r2,-1
    e5ec:	103fee1e 	bne	r2,zero,e5a8 <alt_up_irda_write_fd+0x30>
		if (alt_up_irda_write_data(irda, ptr++)==0)
			count++;
		else
			break;
	}
	return count;
    e5f0:	e0bffb17 	ldw	r2,-20(fp)
}
    e5f4:	e037883a 	mov	sp,fp
    e5f8:	dfc00117 	ldw	ra,4(sp)
    e5fc:	df000017 	ldw	fp,0(sp)
    e600:	dec00204 	addi	sp,sp,8
    e604:	f800283a 	ret

0000e608 <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
    e608:	defffc04 	addi	sp,sp,-16
    e60c:	dfc00315 	stw	ra,12(sp)
    e610:	df000215 	stw	fp,8(sp)
    e614:	df000204 	addi	fp,sp,8
    e618:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
    e61c:	e13fff17 	ldw	r4,-4(fp)
    e620:	01400074 	movhi	r5,1
    e624:	29508004 	addi	r5,r5,16896
    e628:	0010cdc0 	call	10cdc <alt_find_dev>
    e62c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    e630:	e0bffe17 	ldw	r2,-8(fp)
}
    e634:	e037883a 	mov	sp,fp
    e638:	dfc00117 	ldw	ra,4(sp)
    e63c:	df000017 	ldw	fp,0(sp)
    e640:	dec00204 	addi	sp,sp,8
    e644:	f800283a 	ret

0000e648 <alt_up_parallel_port_open_dev>:

#include "altera_up_avalon_parallel_port.h"
#include "altera_up_avalon_parallel_port_regs.h"

alt_up_parallel_port_dev* alt_up_parallel_port_open_dev(const char* name)
{
    e648:	defffc04 	addi	sp,sp,-16
    e64c:	dfc00315 	stw	ra,12(sp)
    e650:	df000215 	stw	fp,8(sp)
    e654:	df000204 	addi	fp,sp,8
    e658:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_parallel_port_dev *dev = (alt_up_parallel_port_dev*)alt_find_dev(name, &alt_dev_list);
    e65c:	e13fff17 	ldw	r4,-4(fp)
    e660:	01400074 	movhi	r5,1
    e664:	29508004 	addi	r5,r5,16896
    e668:	0010cdc0 	call	10cdc <alt_find_dev>
    e66c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    e670:	e0bffe17 	ldw	r2,-8(fp)
}
    e674:	e037883a 	mov	sp,fp
    e678:	dfc00117 	ldw	ra,4(sp)
    e67c:	df000017 	ldw	fp,0(sp)
    e680:	dec00204 	addi	sp,sp,8
    e684:	f800283a 	ret

0000e688 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
    e688:	defffd04 	addi	sp,sp,-12
    e68c:	df000215 	stw	fp,8(sp)
    e690:	df000204 	addi	fp,sp,8
    e694:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
    e698:	e0bfff17 	ldw	r2,-4(fp)
    e69c:	1080400c 	andi	r2,r2,256
    e6a0:	1004d23a 	srli	r2,r2,8
    e6a4:	e0bffe05 	stb	r2,-8(fp)
	return ri;
    e6a8:	e0bffe03 	ldbu	r2,-8(fp)
}
    e6ac:	e037883a 	mov	sp,fp
    e6b0:	df000017 	ldw	fp,0(sp)
    e6b4:	dec00104 	addi	sp,sp,4
    e6b8:	f800283a 	ret

0000e6bc <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
    e6bc:	defffd04 	addi	sp,sp,-12
    e6c0:	df000215 	stw	fp,8(sp)
    e6c4:	df000204 	addi	fp,sp,8
    e6c8:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
    e6cc:	e0bfff17 	ldw	r2,-4(fp)
    e6d0:	1080004c 	andi	r2,r2,1
    e6d4:	e0bffe05 	stb	r2,-8(fp)
	return re;
    e6d8:	e0bffe03 	ldbu	r2,-8(fp)
}
    e6dc:	e037883a 	mov	sp,fp
    e6e0:	df000017 	ldw	fp,0(sp)
    e6e4:	dec00104 	addi	sp,sp,4
    e6e8:	f800283a 	ret

0000e6ec <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
    e6ec:	defffd04 	addi	sp,sp,-12
    e6f0:	df000215 	stw	fp,8(sp)
    e6f4:	df000204 	addi	fp,sp,8
    e6f8:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
    e6fc:	e0bfff17 	ldw	r2,-4(fp)
    e700:	1081000c 	andi	r2,r2,1024
    e704:	1004d2ba 	srli	r2,r2,10
    e708:	e0bffe05 	stb	r2,-8(fp)
	return re;
    e70c:	e0bffe03 	ldbu	r2,-8(fp)
}
    e710:	e037883a 	mov	sp,fp
    e714:	df000017 	ldw	fp,0(sp)
    e718:	dec00104 	addi	sp,sp,4
    e71c:	f800283a 	ret

0000e720 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
    e720:	defffd04 	addi	sp,sp,-12
    e724:	df000215 	stw	fp,8(sp)
    e728:	df000204 	addi	fp,sp,8
    e72c:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
    e730:	e0bfff17 	ldw	r2,-4(fp)
    e734:	10bfffec 	andhi	r2,r2,65535
    e738:	1004d43a 	srli	r2,r2,16
    e73c:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
    e740:	e0bffe0b 	ldhu	r2,-8(fp)
}
    e744:	e037883a 	mov	sp,fp
    e748:	df000017 	ldw	fp,0(sp)
    e74c:	dec00104 	addi	sp,sp,4
    e750:	f800283a 	ret

0000e754 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
    e754:	defffd04 	addi	sp,sp,-12
    e758:	df000215 	stw	fp,8(sp)
    e75c:	df000204 	addi	fp,sp,8
    e760:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
    e764:	e0bfff17 	ldw	r2,-4(fp)
    e768:	10a0000c 	andi	r2,r2,32768
    e76c:	1004d3fa 	srli	r2,r2,15
    e770:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
    e774:	e0bffe03 	ldbu	r2,-8(fp)
}
    e778:	e037883a 	mov	sp,fp
    e77c:	df000017 	ldw	fp,0(sp)
    e780:	dec00104 	addi	sp,sp,4
    e784:	f800283a 	ret

0000e788 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
    e788:	defffd04 	addi	sp,sp,-12
    e78c:	df000215 	stw	fp,8(sp)
    e790:	df000204 	addi	fp,sp,8
    e794:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
    e798:	e0bfff17 	ldw	r2,-4(fp)
    e79c:	e0bffe05 	stb	r2,-8(fp)
	return data;
    e7a0:	e0bffe03 	ldbu	r2,-8(fp)
}
    e7a4:	e037883a 	mov	sp,fp
    e7a8:	df000017 	ldw	fp,0(sp)
    e7ac:	dec00104 	addi	sp,sp,4
    e7b0:	f800283a 	ret

0000e7b4 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
    e7b4:	defffb04 	addi	sp,sp,-20
    e7b8:	dfc00415 	stw	ra,16(sp)
    e7bc:	df000315 	stw	fp,12(sp)
    e7c0:	df000304 	addi	fp,sp,12
    e7c4:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
    e7c8:	e13fff17 	ldw	r4,-4(fp)
    e7cc:	01403fc4 	movi	r5,255
    e7d0:	000ea140 	call	ea14 <alt_up_ps2_write_data_byte_with_ack>
    e7d4:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
    e7d8:	e0bffd17 	ldw	r2,-12(fp)
    e7dc:	1004c03a 	cmpne	r2,r2,zero
    e7e0:	1000221e 	bne	r2,zero,e86c <alt_up_ps2_init+0xb8>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    e7e4:	e17ffe04 	addi	r5,fp,-8
    e7e8:	e13fff17 	ldw	r4,-4(fp)
    e7ec:	000ea800 	call	ea80 <alt_up_ps2_read_data_byte_timeout>
    e7f0:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
    e7f4:	e0bffd17 	ldw	r2,-12(fp)
    e7f8:	1004c03a 	cmpne	r2,r2,zero
    e7fc:	10001b1e 	bne	r2,zero,e86c <alt_up_ps2_init+0xb8>
    e800:	e0bffe03 	ldbu	r2,-8(fp)
    e804:	10803fcc 	andi	r2,r2,255
    e808:	10802a98 	cmpnei	r2,r2,170
    e80c:	1000171e 	bne	r2,zero,e86c <alt_up_ps2_init+0xb8>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    e810:	e17ffe04 	addi	r5,fp,-8
    e814:	e13fff17 	ldw	r4,-4(fp)
    e818:	000ea800 	call	ea80 <alt_up_ps2_read_data_byte_timeout>
    e81c:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
    e820:	e0bffd17 	ldw	r2,-12(fp)
    e824:	10bfe318 	cmpnei	r2,r2,-116
    e828:	1000041e 	bne	r2,zero,e83c <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
    e82c:	e0ffff17 	ldw	r3,-4(fp)
    e830:	00800044 	movi	r2,1
    e834:	18800d15 	stw	r2,52(r3)
    e838:	00000c06 	br	e86c <alt_up_ps2_init+0xb8>
			}
			else if (status == 0 && byte == 0x00)
    e83c:	e0bffd17 	ldw	r2,-12(fp)
    e840:	1004c03a 	cmpne	r2,r2,zero
    e844:	1000091e 	bne	r2,zero,e86c <alt_up_ps2_init+0xb8>
    e848:	e0bffe03 	ldbu	r2,-8(fp)
    e84c:	10803fcc 	andi	r2,r2,255
    e850:	1004c03a 	cmpne	r2,r2,zero
    e854:	1000051e 	bne	r2,zero,e86c <alt_up_ps2_init+0xb8>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
    e858:	e0bfff17 	ldw	r2,-4(fp)
    e85c:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
    e860:	e13fff17 	ldw	r4,-4(fp)
    e864:	01403d04 	movi	r5,244
    e868:	000e92c0 	call	e92c <alt_up_ps2_write_data_byte>
			}
		}
	}
}
    e86c:	e037883a 	mov	sp,fp
    e870:	dfc00117 	ldw	ra,4(sp)
    e874:	df000017 	ldw	fp,0(sp)
    e878:	dec00204 	addi	sp,sp,8
    e87c:	f800283a 	ret

0000e880 <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
    e880:	defffd04 	addi	sp,sp,-12
    e884:	df000215 	stw	fp,8(sp)
    e888:	df000204 	addi	fp,sp,8
    e88c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    e890:	e0bfff17 	ldw	r2,-4(fp)
    e894:	10800a17 	ldw	r2,40(r2)
    e898:	10800104 	addi	r2,r2,4
    e89c:	10800037 	ldwio	r2,0(r2)
    e8a0:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    e8a4:	e0bffe17 	ldw	r2,-8(fp)
    e8a8:	10800054 	ori	r2,r2,1
    e8ac:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    e8b0:	e0bfff17 	ldw	r2,-4(fp)
    e8b4:	10800a17 	ldw	r2,40(r2)
    e8b8:	10800104 	addi	r2,r2,4
    e8bc:	e0fffe17 	ldw	r3,-8(fp)
    e8c0:	10c00035 	stwio	r3,0(r2)
}
    e8c4:	e037883a 	mov	sp,fp
    e8c8:	df000017 	ldw	fp,0(sp)
    e8cc:	dec00104 	addi	sp,sp,4
    e8d0:	f800283a 	ret

0000e8d4 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
    e8d4:	defffd04 	addi	sp,sp,-12
    e8d8:	df000215 	stw	fp,8(sp)
    e8dc:	df000204 	addi	fp,sp,8
    e8e0:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    e8e4:	e0bfff17 	ldw	r2,-4(fp)
    e8e8:	10800a17 	ldw	r2,40(r2)
    e8ec:	10800104 	addi	r2,r2,4
    e8f0:	10800037 	ldwio	r2,0(r2)
    e8f4:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    e8f8:	e0fffe17 	ldw	r3,-8(fp)
    e8fc:	00bfff84 	movi	r2,-2
    e900:	1884703a 	and	r2,r3,r2
    e904:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    e908:	e0bfff17 	ldw	r2,-4(fp)
    e90c:	10800a17 	ldw	r2,40(r2)
    e910:	10800104 	addi	r2,r2,4
    e914:	e0fffe17 	ldw	r3,-8(fp)
    e918:	10c00035 	stwio	r3,0(r2)
}
    e91c:	e037883a 	mov	sp,fp
    e920:	df000017 	ldw	fp,0(sp)
    e924:	dec00104 	addi	sp,sp,4
    e928:	f800283a 	ret

0000e92c <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
    e92c:	defffa04 	addi	sp,sp,-24
    e930:	dfc00515 	stw	ra,20(sp)
    e934:	df000415 	stw	fp,16(sp)
    e938:	df000404 	addi	fp,sp,16
    e93c:	e13ffd15 	stw	r4,-12(fp)
    e940:	e17ffe05 	stb	r5,-8(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
    e944:	e0bffd17 	ldw	r2,-12(fp)
    e948:	10800a17 	ldw	r2,40(r2)
    e94c:	e0fffe03 	ldbu	r3,-8(fp)
    e950:	10c00025 	stbio	r3,0(r2)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
    e954:	e0bffd17 	ldw	r2,-12(fp)
    e958:	10800a17 	ldw	r2,40(r2)
    e95c:	10800104 	addi	r2,r2,4
    e960:	10800037 	ldwio	r2,0(r2)
    e964:	e0bffc15 	stw	r2,-16(fp)
	if (read_CE_bit(ctrl_reg))
    e968:	e13ffc17 	ldw	r4,-16(fp)
    e96c:	000e6ec0 	call	e6ec <read_CE_bit>
    e970:	10803fcc 	andi	r2,r2,255
    e974:	1005003a 	cmpeq	r2,r2,zero
    e978:	1000031e 	bne	r2,zero,e988 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
    e97c:	00bffec4 	movi	r2,-5
    e980:	e0bfff15 	stw	r2,-4(fp)
    e984:	00000106 	br	e98c <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
    e988:	e03fff15 	stw	zero,-4(fp)
    e98c:	e0bfff17 	ldw	r2,-4(fp)
}
    e990:	e037883a 	mov	sp,fp
    e994:	dfc00117 	ldw	ra,4(sp)
    e998:	df000017 	ldw	fp,0(sp)
    e99c:	dec00204 	addi	sp,sp,8
    e9a0:	f800283a 	ret

0000e9a4 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
    e9a4:	defffb04 	addi	sp,sp,-20
    e9a8:	dfc00415 	stw	ra,16(sp)
    e9ac:	df000315 	stw	fp,12(sp)
    e9b0:	df000304 	addi	fp,sp,12
    e9b4:	e13ffe15 	stw	r4,-8(fp)
	unsigned char data = 0;
    e9b8:	e03ffd45 	stb	zero,-11(fp)
	unsigned char status = 0;
    e9bc:	e03ffd05 	stb	zero,-12(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
    e9c0:	e17ffd44 	addi	r5,fp,-11
    e9c4:	e13ffe17 	ldw	r4,-8(fp)
    e9c8:	000ea800 	call	ea80 <alt_up_ps2_read_data_byte_timeout>
    e9cc:	e0bffd05 	stb	r2,-12(fp)
		if ( status == 0)
    e9d0:	e0bffd03 	ldbu	r2,-12(fp)
    e9d4:	1004c03a 	cmpne	r2,r2,zero
    e9d8:	1000061e 	bne	r2,zero,e9f4 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
    e9dc:	e0bffd43 	ldbu	r2,-11(fp)
    e9e0:	10803fcc 	andi	r2,r2,255
    e9e4:	10803e98 	cmpnei	r2,r2,250
    e9e8:	103ff51e 	bne	r2,zero,e9c0 <alt_up_ps2_wait_for_ack+0x1c>
				return 0;
    e9ec:	e03fff15 	stw	zero,-4(fp)
    e9f0:	00000206 	br	e9fc <alt_up_ps2_wait_for_ack+0x58>
		}
		else 
		{
			return status;
    e9f4:	e0bffd03 	ldbu	r2,-12(fp)
    e9f8:	e0bfff15 	stw	r2,-4(fp)
    e9fc:	e0bfff17 	ldw	r2,-4(fp)
		}
	} while(1);
	return -ETIMEDOUT;
}
    ea00:	e037883a 	mov	sp,fp
    ea04:	dfc00117 	ldw	ra,4(sp)
    ea08:	df000017 	ldw	fp,0(sp)
    ea0c:	dec00204 	addi	sp,sp,8
    ea10:	f800283a 	ret

0000ea14 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
    ea14:	defff904 	addi	sp,sp,-28
    ea18:	dfc00615 	stw	ra,24(sp)
    ea1c:	df000515 	stw	fp,20(sp)
    ea20:	df000504 	addi	fp,sp,20
    ea24:	e13ffd15 	stw	r4,-12(fp)
    ea28:	e17ffe05 	stb	r5,-8(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
    ea2c:	e17ffe03 	ldbu	r5,-8(fp)
    ea30:	e13ffd17 	ldw	r4,-12(fp)
    ea34:	000e92c0 	call	e92c <alt_up_ps2_write_data_byte>
    ea38:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
    ea3c:	e0bffc17 	ldw	r2,-16(fp)
    ea40:	1005003a 	cmpeq	r2,r2,zero
    ea44:	1000031e 	bne	r2,zero,ea54 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
    ea48:	e0bffc17 	ldw	r2,-16(fp)
    ea4c:	e0bfff15 	stw	r2,-4(fp)
    ea50:	00000506 	br	ea68 <alt_up_ps2_write_data_byte_with_ack+0x54>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
    ea54:	e13ffd17 	ldw	r4,-12(fp)
    ea58:	000e9a40 	call	e9a4 <alt_up_ps2_wait_for_ack>
    ea5c:	e0bffb15 	stw	r2,-20(fp)
	return ack_status;
    ea60:	e0bffb17 	ldw	r2,-20(fp)
    ea64:	e0bfff15 	stw	r2,-4(fp)
    ea68:	e0bfff17 	ldw	r2,-4(fp)
}
    ea6c:	e037883a 	mov	sp,fp
    ea70:	dfc00117 	ldw	ra,4(sp)
    ea74:	df000017 	ldw	fp,0(sp)
    ea78:	dec00204 	addi	sp,sp,8
    ea7c:	f800283a 	ret

0000ea80 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    ea80:	defff904 	addi	sp,sp,-28
    ea84:	dfc00615 	stw	ra,24(sp)
    ea88:	df000515 	stw	fp,20(sp)
    ea8c:	df000504 	addi	fp,sp,20
    ea90:	e13ffd15 	stw	r4,-12(fp)
    ea94:	e17ffe15 	stw	r5,-8(fp)
	unsigned int data_reg = 0; 
    ea98:	e03ffc15 	stw	zero,-16(fp)
	unsigned int count = 0;
    ea9c:	e03ffb15 	stw	zero,-20(fp)
    eaa0:	00000006 	br	eaa4 <alt_up_ps2_read_data_byte_timeout+0x24>
	do {
		count++;
    eaa4:	e0bffb17 	ldw	r2,-20(fp)
    eaa8:	10800044 	addi	r2,r2,1
    eaac:	e0bffb15 	stw	r2,-20(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    eab0:	e0bffd17 	ldw	r2,-12(fp)
    eab4:	10800a17 	ldw	r2,40(r2)
    eab8:	10800037 	ldwio	r2,0(r2)
    eabc:	e0bffc15 	stw	r2,-16(fp)
		if (read_data_valid(data_reg))
    eac0:	e13ffc17 	ldw	r4,-16(fp)
    eac4:	000e7540 	call	e754 <read_data_valid>
    eac8:	10803fcc 	andi	r2,r2,255
    eacc:	1005003a 	cmpeq	r2,r2,zero
    ead0:	1000071e 	bne	r2,zero,eaf0 <alt_up_ps2_read_data_byte_timeout+0x70>
		{
			*byte = read_data_byte(data_reg);
    ead4:	e13ffc17 	ldw	r4,-16(fp)
    ead8:	000e7880 	call	e788 <read_data_byte>
    eadc:	1007883a 	mov	r3,r2
    eae0:	e0bffe17 	ldw	r2,-8(fp)
    eae4:	10c00005 	stb	r3,0(r2)
			return 0;
    eae8:	e03fff15 	stw	zero,-4(fp)
    eaec:	00000a06 	br	eb18 <alt_up_ps2_read_data_byte_timeout+0x98>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
    eaf0:	e0bffd17 	ldw	r2,-12(fp)
    eaf4:	10800c17 	ldw	r2,48(r2)
    eaf8:	1005003a 	cmpeq	r2,r2,zero
    eafc:	103fe91e 	bne	r2,zero,eaa4 <alt_up_ps2_read_data_byte_timeout+0x24>
    eb00:	e0bffd17 	ldw	r2,-12(fp)
    eb04:	10c00c17 	ldw	r3,48(r2)
    eb08:	e0bffb17 	ldw	r2,-20(fp)
    eb0c:	18bfe52e 	bgeu	r3,r2,eaa4 <alt_up_ps2_read_data_byte_timeout+0x24>
		{
			return -ETIMEDOUT;
    eb10:	00bfe304 	movi	r2,-116
    eb14:	e0bfff15 	stw	r2,-4(fp)
		}
	} while (1);
    eb18:	e0bfff17 	ldw	r2,-4(fp)
}
    eb1c:	e037883a 	mov	sp,fp
    eb20:	dfc00117 	ldw	ra,4(sp)
    eb24:	df000017 	ldw	fp,0(sp)
    eb28:	dec00204 	addi	sp,sp,8
    eb2c:	f800283a 	ret

0000eb30 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    eb30:	defffa04 	addi	sp,sp,-24
    eb34:	dfc00515 	stw	ra,20(sp)
    eb38:	df000415 	stw	fp,16(sp)
    eb3c:	df000404 	addi	fp,sp,16
    eb40:	e13ffd15 	stw	r4,-12(fp)
    eb44:	e17ffe15 	stw	r5,-8(fp)
	unsigned int data_reg = 0; 
    eb48:	e03ffc15 	stw	zero,-16(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    eb4c:	e0bffd17 	ldw	r2,-12(fp)
    eb50:	10800a17 	ldw	r2,40(r2)
    eb54:	10800037 	ldwio	r2,0(r2)
    eb58:	e0bffc15 	stw	r2,-16(fp)
	if (read_data_valid(data_reg))
    eb5c:	e13ffc17 	ldw	r4,-16(fp)
    eb60:	000e7540 	call	e754 <read_data_valid>
    eb64:	10803fcc 	andi	r2,r2,255
    eb68:	1005003a 	cmpeq	r2,r2,zero
    eb6c:	1000071e 	bne	r2,zero,eb8c <alt_up_ps2_read_data_byte+0x5c>
	{
		*byte = read_data_byte(data_reg);
    eb70:	e13ffc17 	ldw	r4,-16(fp)
    eb74:	000e7880 	call	e788 <read_data_byte>
    eb78:	1007883a 	mov	r3,r2
    eb7c:	e0bffe17 	ldw	r2,-8(fp)
    eb80:	10c00005 	stb	r3,0(r2)
		return 0;
    eb84:	e03fff15 	stw	zero,-4(fp)
    eb88:	00000206 	br	eb94 <alt_up_ps2_read_data_byte+0x64>
	}
	return -1;
    eb8c:	00bfffc4 	movi	r2,-1
    eb90:	e0bfff15 	stw	r2,-4(fp)
    eb94:	e0bfff17 	ldw	r2,-4(fp)
}
    eb98:	e037883a 	mov	sp,fp
    eb9c:	dfc00117 	ldw	ra,4(sp)
    eba0:	df000017 	ldw	fp,0(sp)
    eba4:	dec00204 	addi	sp,sp,8
    eba8:	f800283a 	ret

0000ebac <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
    ebac:	defffb04 	addi	sp,sp,-20
    ebb0:	dfc00415 	stw	ra,16(sp)
    ebb4:	df000315 	stw	fp,12(sp)
    ebb8:	df000304 	addi	fp,sp,12
    ebbc:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
    ebc0:	e03ffe0d 	sth	zero,-8(fp)
	unsigned int data_reg = 0;
    ebc4:	e03ffd15 	stw	zero,-12(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    ebc8:	e0bfff17 	ldw	r2,-4(fp)
    ebcc:	10800a17 	ldw	r2,40(r2)
    ebd0:	10800037 	ldwio	r2,0(r2)
    ebd4:	e0bffd15 	stw	r2,-12(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
    ebd8:	e13ffd17 	ldw	r4,-12(fp)
    ebdc:	000e7200 	call	e720 <read_num_bytes_available>
    ebe0:	e0bffe0d 	sth	r2,-8(fp)
	} while (num > 0);
    ebe4:	e0bffe0b 	ldhu	r2,-8(fp)
    ebe8:	1004c03a 	cmpne	r2,r2,zero
    ebec:	103ff61e 	bne	r2,zero,ebc8 <alt_up_ps2_clear_fifo+0x1c>
}
    ebf0:	e037883a 	mov	sp,fp
    ebf4:	dfc00117 	ldw	ra,4(sp)
    ebf8:	df000017 	ldw	fp,0(sp)
    ebfc:	dec00204 	addi	sp,sp,8
    ec00:	f800283a 	ret

0000ec04 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
    ec04:	defff704 	addi	sp,sp,-36
    ec08:	dfc00815 	stw	ra,32(sp)
    ec0c:	df000715 	stw	fp,28(sp)
    ec10:	df000704 	addi	fp,sp,28
    ec14:	e13ffc15 	stw	r4,-16(fp)
    ec18:	e17ffd15 	stw	r5,-12(fp)
    ec1c:	e1bffe15 	stw	r6,-8(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    ec20:	e0bffc17 	ldw	r2,-16(fp)
    ec24:	10800017 	ldw	r2,0(r2)
    ec28:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
    ec2c:	e03ffa15 	stw	zero,-24(fp)
	int count = 0;
    ec30:	e03ff915 	stw	zero,-28(fp)
	while (count < len);
    ec34:	e0fff917 	ldw	r3,-28(fp)
    ec38:	e0bffe17 	ldw	r2,-8(fp)
    ec3c:	18bffd16 	blt	r3,r2,ec34 <alt_up_ps2_read_fd+0x30>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, ptr++);
    ec40:	e17ffd17 	ldw	r5,-12(fp)
    ec44:	e0bffd17 	ldw	r2,-12(fp)
    ec48:	10800044 	addi	r2,r2,1
    ec4c:	e0bffd15 	stw	r2,-12(fp)
    ec50:	e13ffb17 	ldw	r4,-20(fp)
    ec54:	000ea800 	call	ea80 <alt_up_ps2_read_data_byte_timeout>
    ec58:	e0bffa15 	stw	r2,-24(fp)
		if (status!=0)
    ec5c:	e0bffa17 	ldw	r2,-24(fp)
    ec60:	1005003a 	cmpeq	r2,r2,zero
    ec64:	1000031e 	bne	r2,zero,ec74 <alt_up_ps2_read_fd+0x70>
			return count;
    ec68:	e0bff917 	ldw	r2,-28(fp)
    ec6c:	e0bfff15 	stw	r2,-4(fp)
    ec70:	00000506 	br	ec88 <alt_up_ps2_read_fd+0x84>
		count++;
    ec74:	e0bff917 	ldw	r2,-28(fp)
    ec78:	10800044 	addi	r2,r2,1
    ec7c:	e0bff915 	stw	r2,-28(fp)
	} 
	return count;
    ec80:	e0bff917 	ldw	r2,-28(fp)
    ec84:	e0bfff15 	stw	r2,-4(fp)
    ec88:	e0bfff17 	ldw	r2,-4(fp)
}
    ec8c:	e037883a 	mov	sp,fp
    ec90:	dfc00117 	ldw	ra,4(sp)
    ec94:	df000017 	ldw	fp,0(sp)
    ec98:	dec00204 	addi	sp,sp,8
    ec9c:	f800283a 	ret

0000eca0 <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
    eca0:	defff704 	addi	sp,sp,-36
    eca4:	dfc00815 	stw	ra,32(sp)
    eca8:	df000715 	stw	fp,28(sp)
    ecac:	df000704 	addi	fp,sp,28
    ecb0:	e13ffc15 	stw	r4,-16(fp)
    ecb4:	e17ffd15 	stw	r5,-12(fp)
    ecb8:	e1bffe15 	stw	r6,-8(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    ecbc:	e0bffc17 	ldw	r2,-16(fp)
    ecc0:	10800017 	ldw	r2,0(r2)
    ecc4:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
    ecc8:	e03ffa15 	stw	zero,-24(fp)
	int count = 0;
    eccc:	e03ff915 	stw	zero,-28(fp)
	while (count < len)
    ecd0:	00001206 	br	ed1c <alt_up_ps2_write_fd+0x7c>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
    ecd4:	e0bffd17 	ldw	r2,-12(fp)
    ecd8:	10800003 	ldbu	r2,0(r2)
    ecdc:	11403fcc 	andi	r5,r2,255
    ece0:	e0bffd17 	ldw	r2,-12(fp)
    ece4:	10800044 	addi	r2,r2,1
    ece8:	e0bffd15 	stw	r2,-12(fp)
    ecec:	e13ffb17 	ldw	r4,-20(fp)
    ecf0:	000e92c0 	call	e92c <alt_up_ps2_write_data_byte>
    ecf4:	e0bffa15 	stw	r2,-24(fp)
		if (status!=0)
    ecf8:	e0bffa17 	ldw	r2,-24(fp)
    ecfc:	1005003a 	cmpeq	r2,r2,zero
    ed00:	1000031e 	bne	r2,zero,ed10 <alt_up_ps2_write_fd+0x70>
			return count;
    ed04:	e0bff917 	ldw	r2,-28(fp)
    ed08:	e0bfff15 	stw	r2,-4(fp)
    ed0c:	00000806 	br	ed30 <alt_up_ps2_write_fd+0x90>
		count++;
    ed10:	e0bff917 	ldw	r2,-28(fp)
    ed14:	10800044 	addi	r2,r2,1
    ed18:	e0bff915 	stw	r2,-28(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
    ed1c:	e0fff917 	ldw	r3,-28(fp)
    ed20:	e0bffe17 	ldw	r2,-8(fp)
    ed24:	18bfeb16 	blt	r3,r2,ecd4 <alt_up_ps2_write_fd+0x34>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
    ed28:	e0bff917 	ldw	r2,-28(fp)
    ed2c:	e0bfff15 	stw	r2,-4(fp)
    ed30:	e0bfff17 	ldw	r2,-4(fp)
}
    ed34:	e037883a 	mov	sp,fp
    ed38:	dfc00117 	ldw	ra,4(sp)
    ed3c:	df000017 	ldw	fp,0(sp)
    ed40:	dec00204 	addi	sp,sp,8
    ed44:	f800283a 	ret

0000ed48 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
    ed48:	defffc04 	addi	sp,sp,-16
    ed4c:	dfc00315 	stw	ra,12(sp)
    ed50:	df000215 	stw	fp,8(sp)
    ed54:	df000204 	addi	fp,sp,8
    ed58:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
    ed5c:	e13fff17 	ldw	r4,-4(fp)
    ed60:	01400074 	movhi	r5,1
    ed64:	29508004 	addi	r5,r5,16896
    ed68:	0010cdc0 	call	10cdc <alt_find_dev>
    ed6c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    ed70:	e0bffe17 	ldw	r2,-8(fp)
}
    ed74:	e037883a 	mov	sp,fp
    ed78:	dfc00117 	ldw	ra,4(sp)
    ed7c:	df000017 	ldw	fp,0(sp)
    ed80:	dec00204 	addi	sp,sp,8
    ed84:	f800283a 	ret

0000ed88 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
    ed88:	defffd04 	addi	sp,sp,-12
    ed8c:	df000215 	stw	fp,8(sp)
    ed90:	df000204 	addi	fp,sp,8
    ed94:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    ed98:	e0bfff17 	ldw	r2,-4(fp)
    ed9c:	10800a17 	ldw	r2,40(r2)
    eda0:	10800104 	addi	r2,r2,4
    eda4:	10800037 	ldwio	r2,0(r2)
    eda8:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
    edac:	e0bffe17 	ldw	r2,-8(fp)
    edb0:	10800054 	ori	r2,r2,1
    edb4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    edb8:	e0bfff17 	ldw	r2,-4(fp)
    edbc:	10800a17 	ldw	r2,40(r2)
    edc0:	10800104 	addi	r2,r2,4
    edc4:	e0fffe17 	ldw	r3,-8(fp)
    edc8:	10c00035 	stwio	r3,0(r2)
}
    edcc:	e037883a 	mov	sp,fp
    edd0:	df000017 	ldw	fp,0(sp)
    edd4:	dec00104 	addi	sp,sp,4
    edd8:	f800283a 	ret

0000eddc <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
    eddc:	defffd04 	addi	sp,sp,-12
    ede0:	df000215 	stw	fp,8(sp)
    ede4:	df000204 	addi	fp,sp,8
    ede8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    edec:	e0bfff17 	ldw	r2,-4(fp)
    edf0:	10800a17 	ldw	r2,40(r2)
    edf4:	10800104 	addi	r2,r2,4
    edf8:	10800037 	ldwio	r2,0(r2)
    edfc:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
    ee00:	e0fffe17 	ldw	r3,-8(fp)
    ee04:	00bfff84 	movi	r2,-2
    ee08:	1884703a 	and	r2,r3,r2
    ee0c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    ee10:	e0bfff17 	ldw	r2,-4(fp)
    ee14:	10800a17 	ldw	r2,40(r2)
    ee18:	10800104 	addi	r2,r2,4
    ee1c:	e0fffe17 	ldw	r3,-8(fp)
    ee20:	10c00035 	stwio	r3,0(r2)
}
    ee24:	e037883a 	mov	sp,fp
    ee28:	df000017 	ldw	fp,0(sp)
    ee2c:	dec00104 	addi	sp,sp,4
    ee30:	f800283a 	ret

0000ee34 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
    ee34:	defffd04 	addi	sp,sp,-12
    ee38:	df000215 	stw	fp,8(sp)
    ee3c:	df000204 	addi	fp,sp,8
    ee40:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
    ee44:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
    ee48:	e0bfff17 	ldw	r2,-4(fp)
    ee4c:	10800a17 	ldw	r2,40(r2)
    ee50:	10800084 	addi	r2,r2,2
    ee54:	1080002b 	ldhuio	r2,0(r2)
    ee58:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
    ee5c:	e0bffe0b 	ldhu	r2,-8(fp)
}
    ee60:	e037883a 	mov	sp,fp
    ee64:	df000017 	ldw	fp,0(sp)
    ee68:	dec00104 	addi	sp,sp,4
    ee6c:	f800283a 	ret

0000ee70 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
    ee70:	defffd04 	addi	sp,sp,-12
    ee74:	df000215 	stw	fp,8(sp)
    ee78:	df000204 	addi	fp,sp,8
    ee7c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    ee80:	e0bfff17 	ldw	r2,-4(fp)
    ee84:	10800a17 	ldw	r2,40(r2)
    ee88:	10800104 	addi	r2,r2,4
    ee8c:	10800037 	ldwio	r2,0(r2)
    ee90:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
    ee94:	e0bffe17 	ldw	r2,-8(fp)
    ee98:	10bfffec 	andhi	r2,r2,65535
    ee9c:	1004d43a 	srli	r2,r2,16
}
    eea0:	e037883a 	mov	sp,fp
    eea4:	df000017 	ldw	fp,0(sp)
    eea8:	dec00104 	addi	sp,sp,4
    eeac:	f800283a 	ret

0000eeb0 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
    eeb0:	defffc04 	addi	sp,sp,-16
    eeb4:	df000315 	stw	fp,12(sp)
    eeb8:	df000304 	addi	fp,sp,12
    eebc:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
    eec0:	e0bffe17 	ldw	r2,-8(fp)
    eec4:	1080800c 	andi	r2,r2,512
    eec8:	1004d27a 	srli	r2,r2,9
    eecc:	e0bffd15 	stw	r2,-12(fp)
	return (parity_error ? -1 : 0);
    eed0:	e0bffd17 	ldw	r2,-12(fp)
    eed4:	1005003a 	cmpeq	r2,r2,zero
    eed8:	1000031e 	bne	r2,zero,eee8 <alt_up_rs232_check_parity+0x38>
    eedc:	00bfffc4 	movi	r2,-1
    eee0:	e0bfff15 	stw	r2,-4(fp)
    eee4:	00000106 	br	eeec <alt_up_rs232_check_parity+0x3c>
    eee8:	e03fff15 	stw	zero,-4(fp)
    eeec:	e0bfff17 	ldw	r2,-4(fp)
}
    eef0:	e037883a 	mov	sp,fp
    eef4:	df000017 	ldw	fp,0(sp)
    eef8:	dec00104 	addi	sp,sp,4
    eefc:	f800283a 	ret

0000ef00 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
    ef00:	defffc04 	addi	sp,sp,-16
    ef04:	df000315 	stw	fp,12(sp)
    ef08:	df000304 	addi	fp,sp,12
    ef0c:	e13ffe15 	stw	r4,-8(fp)
    ef10:	e17fff05 	stb	r5,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    ef14:	e0bffe17 	ldw	r2,-8(fp)
    ef18:	10800a17 	ldw	r2,40(r2)
    ef1c:	10800037 	ldwio	r2,0(r2)
    ef20:	e0bffd15 	stw	r2,-12(fp)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
    ef24:	e0bffe17 	ldw	r2,-8(fp)
    ef28:	10800a17 	ldw	r2,40(r2)
    ef2c:	e0ffff03 	ldbu	r3,-4(fp)
    ef30:	10c00035 	stwio	r3,0(r2)
	return 0;
    ef34:	0005883a 	mov	r2,zero
}
    ef38:	e037883a 	mov	sp,fp
    ef3c:	df000017 	ldw	fp,0(sp)
    ef40:	dec00104 	addi	sp,sp,4
    ef44:	f800283a 	ret

0000ef48 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
    ef48:	defffa04 	addi	sp,sp,-24
    ef4c:	dfc00515 	stw	ra,20(sp)
    ef50:	df000415 	stw	fp,16(sp)
    ef54:	df000404 	addi	fp,sp,16
    ef58:	e13ffd15 	stw	r4,-12(fp)
    ef5c:	e17ffe15 	stw	r5,-8(fp)
    ef60:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    ef64:	e0bffd17 	ldw	r2,-12(fp)
    ef68:	10800a17 	ldw	r2,40(r2)
    ef6c:	10800037 	ldwio	r2,0(r2)
    ef70:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
    ef74:	e0bffc17 	ldw	r2,-16(fp)
    ef78:	1007883a 	mov	r3,r2
    ef7c:	e0bffe17 	ldw	r2,-8(fp)
    ef80:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
    ef84:	e13ffc17 	ldw	r4,-16(fp)
    ef88:	000eeb00 	call	eeb0 <alt_up_rs232_check_parity>
    ef8c:	1007883a 	mov	r3,r2
    ef90:	e0bfff17 	ldw	r2,-4(fp)
    ef94:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
    ef98:	e0bffc17 	ldw	r2,-16(fp)
    ef9c:	10a0000c 	andi	r2,r2,32768
    efa0:	1004d3fa 	srli	r2,r2,15
    efa4:	10bfffc4 	addi	r2,r2,-1
}
    efa8:	e037883a 	mov	sp,fp
    efac:	dfc00117 	ldw	ra,4(sp)
    efb0:	df000017 	ldw	fp,0(sp)
    efb4:	dec00204 	addi	sp,sp,8
    efb8:	f800283a 	ret

0000efbc <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
    efbc:	defff804 	addi	sp,sp,-32
    efc0:	dfc00715 	stw	ra,28(sp)
    efc4:	df000615 	stw	fp,24(sp)
    efc8:	df000604 	addi	fp,sp,24
    efcc:	e13ffd15 	stw	r4,-12(fp)
    efd0:	e17ffe15 	stw	r5,-8(fp)
    efd4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    efd8:	e0bffd17 	ldw	r2,-12(fp)
    efdc:	10800017 	ldw	r2,0(r2)
    efe0:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
    efe4:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
    efe8:	00000c06 	br	f01c <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
    efec:	e17ffe17 	ldw	r5,-8(fp)
    eff0:	e0bffe17 	ldw	r2,-8(fp)
    eff4:	10800044 	addi	r2,r2,1
    eff8:	e0bffe15 	stw	r2,-8(fp)
    effc:	e1bffc04 	addi	r6,fp,-16
    f000:	e13ffb17 	ldw	r4,-20(fp)
    f004:	000ef480 	call	ef48 <alt_up_rs232_read_data>
    f008:	1004c03a 	cmpne	r2,r2,zero
    f00c:	1000091e 	bne	r2,zero,f034 <alt_up_rs232_read_fd+0x78>
			count++;
    f010:	e0bffa17 	ldw	r2,-24(fp)
    f014:	10800044 	addi	r2,r2,1
    f018:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    f01c:	e0bfff17 	ldw	r2,-4(fp)
    f020:	10bfffc4 	addi	r2,r2,-1
    f024:	e0bfff15 	stw	r2,-4(fp)
    f028:	e0bfff17 	ldw	r2,-4(fp)
    f02c:	10bfffd8 	cmpnei	r2,r2,-1
    f030:	103fee1e 	bne	r2,zero,efec <alt_up_rs232_read_fd+0x30>
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
    f034:	e0bffa17 	ldw	r2,-24(fp)
}
    f038:	e037883a 	mov	sp,fp
    f03c:	dfc00117 	ldw	ra,4(sp)
    f040:	df000017 	ldw	fp,0(sp)
    f044:	dec00204 	addi	sp,sp,8
    f048:	f800283a 	ret

0000f04c <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
    f04c:	defff904 	addi	sp,sp,-28
    f050:	dfc00615 	stw	ra,24(sp)
    f054:	df000515 	stw	fp,20(sp)
    f058:	df000504 	addi	fp,sp,20
    f05c:	e13ffd15 	stw	r4,-12(fp)
    f060:	e17ffe15 	stw	r5,-8(fp)
    f064:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    f068:	e0bffd17 	ldw	r2,-12(fp)
    f06c:	10800017 	ldw	r2,0(r2)
    f070:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
    f074:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
    f078:	00000d06 	br	f0b0 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
    f07c:	e0bffe17 	ldw	r2,-8(fp)
    f080:	10800003 	ldbu	r2,0(r2)
    f084:	11403fcc 	andi	r5,r2,255
    f088:	e13ffc17 	ldw	r4,-16(fp)
    f08c:	000ef000 	call	ef00 <alt_up_rs232_write_data>
    f090:	1004c03a 	cmpne	r2,r2,zero
    f094:	10000c1e 	bne	r2,zero,f0c8 <alt_up_rs232_write_fd+0x7c>
		{
			count++;
    f098:	e0bffb17 	ldw	r2,-20(fp)
    f09c:	10800044 	addi	r2,r2,1
    f0a0:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
    f0a4:	e0bffe17 	ldw	r2,-8(fp)
    f0a8:	10800044 	addi	r2,r2,1
    f0ac:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
    f0b0:	e0bfff17 	ldw	r2,-4(fp)
    f0b4:	10bfffc4 	addi	r2,r2,-1
    f0b8:	e0bfff15 	stw	r2,-4(fp)
    f0bc:	e0bfff17 	ldw	r2,-4(fp)
    f0c0:	10bfffd8 	cmpnei	r2,r2,-1
    f0c4:	103fed1e 	bne	r2,zero,f07c <alt_up_rs232_write_fd+0x30>
			ptr++;
		}
		else
			break;
	}
	return count;
    f0c8:	e0bffb17 	ldw	r2,-20(fp)
}
    f0cc:	e037883a 	mov	sp,fp
    f0d0:	dfc00117 	ldw	ra,4(sp)
    f0d4:	df000017 	ldw	fp,0(sp)
    f0d8:	dec00204 	addi	sp,sp,8
    f0dc:	f800283a 	ret

0000f0e0 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
    f0e0:	defffc04 	addi	sp,sp,-16
    f0e4:	dfc00315 	stw	ra,12(sp)
    f0e8:	df000215 	stw	fp,8(sp)
    f0ec:	df000204 	addi	fp,sp,8
    f0f0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
    f0f4:	e13fff17 	ldw	r4,-4(fp)
    f0f8:	01400074 	movhi	r5,1
    f0fc:	29508004 	addi	r5,r5,16896
    f100:	0010cdc0 	call	10cdc <alt_find_dev>
    f104:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    f108:	e0bffe17 	ldw	r2,-8(fp)
}
    f10c:	e037883a 	mov	sp,fp
    f110:	dfc00117 	ldw	ra,4(sp)
    f114:	df000017 	ldw	fp,0(sp)
    f118:	dec00204 	addi	sp,sp,8
    f11c:	f800283a 	ret

0000f120 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
    f120:	defffc04 	addi	sp,sp,-16
    f124:	dfc00315 	stw	ra,12(sp)
    f128:	df000215 	stw	fp,8(sp)
    f12c:	df000204 	addi	fp,sp,8
    f130:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
    f134:	e0bfff17 	ldw	r2,-4(fp)
    f138:	10800217 	ldw	r2,8(r2)
    f13c:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
    f140:	00000c06 	br	f174 <alt_up_char_buffer_init+0x54>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
    f144:	e13ffe17 	ldw	r4,-8(fp)
    f148:	01400074 	movhi	r5,1
    f14c:	2948fd04 	addi	r5,r5,9204
    f150:	00087e80 	call	87e8 <strcmp>
    f154:	1004c03a 	cmpne	r2,r2,zero
    f158:	1000031e 	bne	r2,zero,f168 <alt_up_char_buffer_init+0x48>
			(*name) = '\0';
    f15c:	e0bffe17 	ldw	r2,-8(fp)
    f160:	10000005 	stb	zero,0(r2)
			break;
    f164:	00000a06 	br	f190 <alt_up_char_buffer_init+0x70>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
    f168:	e0bffe17 	ldw	r2,-8(fp)
    f16c:	10800044 	addi	r2,r2,1
    f170:	e0bffe15 	stw	r2,-8(fp)
    f174:	e0bffe17 	ldw	r2,-8(fp)
    f178:	10800003 	ldbu	r2,0(r2)
    f17c:	10803fcc 	andi	r2,r2,255
    f180:	1080201c 	xori	r2,r2,128
    f184:	10bfe004 	addi	r2,r2,-128
    f188:	1004c03a 	cmpne	r2,r2,zero
    f18c:	103fed1e 	bne	r2,zero,f144 <alt_up_char_buffer_init+0x24>
			break;
		}
	}
	
	return;
}
    f190:	e037883a 	mov	sp,fp
    f194:	dfc00117 	ldw	ra,4(sp)
    f198:	df000017 	ldw	fp,0(sp)
    f19c:	dec00204 	addi	sp,sp,8
    f1a0:	f800283a 	ret

0000f1a4 <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
    f1a4:	defffc04 	addi	sp,sp,-16
    f1a8:	dfc00315 	stw	ra,12(sp)
    f1ac:	df000215 	stw	fp,8(sp)
    f1b0:	df000204 	addi	fp,sp,8
    f1b4:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
    f1b8:	e13fff17 	ldw	r4,-4(fp)
    f1bc:	01400074 	movhi	r5,1
    f1c0:	29508004 	addi	r5,r5,16896
    f1c4:	0010cdc0 	call	10cdc <alt_find_dev>
    f1c8:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    f1cc:	e0bffe17 	ldw	r2,-8(fp)
}
    f1d0:	e037883a 	mov	sp,fp
    f1d4:	dfc00117 	ldw	ra,4(sp)
    f1d8:	df000017 	ldw	fp,0(sp)
    f1dc:	dec00204 	addi	sp,sp,8
    f1e0:	f800283a 	ret

0000f1e4 <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
    f1e4:	defff904 	addi	sp,sp,-28
    f1e8:	df000615 	stw	fp,24(sp)
    f1ec:	df000604 	addi	fp,sp,24
    f1f0:	e13ffb15 	stw	r4,-20(fp)
    f1f4:	e1bffd15 	stw	r6,-12(fp)
    f1f8:	e1fffe15 	stw	r7,-8(fp)
    f1fc:	e17ffc05 	stb	r5,-16(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    f200:	e0bffb17 	ldw	r2,-20(fp)
    f204:	10c00c17 	ldw	r3,48(r2)
    f208:	e0bffd17 	ldw	r2,-12(fp)
    f20c:	10c0042e 	bgeu	r2,r3,f220 <alt_up_char_buffer_draw+0x3c>
    f210:	e0bffb17 	ldw	r2,-20(fp)
    f214:	10c00d17 	ldw	r3,52(r2)
    f218:	e0bffe17 	ldw	r2,-8(fp)
    f21c:	10c00336 	bltu	r2,r3,f22c <alt_up_char_buffer_draw+0x48>
		return -1;
    f220:	00bfffc4 	movi	r2,-1
    f224:	e0bfff15 	stw	r2,-4(fp)
    f228:	00001d06 	br	f2a0 <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
    f22c:	e03ffa15 	stw	zero,-24(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
    f230:	e0bffb17 	ldw	r2,-20(fp)
    f234:	10c00f17 	ldw	r3,60(r2)
    f238:	e0bffd17 	ldw	r2,-12(fp)
    f23c:	1886703a 	and	r3,r3,r2
    f240:	e0bffb17 	ldw	r2,-20(fp)
    f244:	10800e17 	ldw	r2,56(r2)
    f248:	1886983a 	sll	r3,r3,r2
    f24c:	e0bffa17 	ldw	r2,-24(fp)
    f250:	10c4b03a 	or	r2,r2,r3
    f254:	e0bffa15 	stw	r2,-24(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
    f258:	e0bffb17 	ldw	r2,-20(fp)
    f25c:	10c01117 	ldw	r3,68(r2)
    f260:	e0bffe17 	ldw	r2,-8(fp)
    f264:	1886703a 	and	r3,r3,r2
    f268:	e0bffb17 	ldw	r2,-20(fp)
    f26c:	10801017 	ldw	r2,64(r2)
    f270:	1886983a 	sll	r3,r3,r2
    f274:	e0bffa17 	ldw	r2,-24(fp)
    f278:	10c4b03a 	or	r2,r2,r3
    f27c:	e0bffa15 	stw	r2,-24(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
    f280:	e0bffb17 	ldw	r2,-20(fp)
    f284:	10800b17 	ldw	r2,44(r2)
    f288:	1007883a 	mov	r3,r2
    f28c:	e0bffa17 	ldw	r2,-24(fp)
    f290:	1885883a 	add	r2,r3,r2
    f294:	e0fffc03 	ldbu	r3,-16(fp)
    f298:	10c00025 	stbio	r3,0(r2)

	return 0;
    f29c:	e03fff15 	stw	zero,-4(fp)
    f2a0:	e0bfff17 	ldw	r2,-4(fp)
}
    f2a4:	e037883a 	mov	sp,fp
    f2a8:	df000017 	ldw	fp,0(sp)
    f2ac:	dec00104 	addi	sp,sp,4
    f2b0:	f800283a 	ret

0000f2b4 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
    f2b4:	defff904 	addi	sp,sp,-28
    f2b8:	df000615 	stw	fp,24(sp)
    f2bc:	df000604 	addi	fp,sp,24
    f2c0:	e13ffb15 	stw	r4,-20(fp)
    f2c4:	e17ffc15 	stw	r5,-16(fp)
    f2c8:	e1bffd15 	stw	r6,-12(fp)
    f2cc:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    f2d0:	e0bffb17 	ldw	r2,-20(fp)
    f2d4:	10c00c17 	ldw	r3,48(r2)
    f2d8:	e0bffd17 	ldw	r2,-12(fp)
    f2dc:	10c0042e 	bgeu	r2,r3,f2f0 <alt_up_char_buffer_string+0x3c>
    f2e0:	e0bffb17 	ldw	r2,-20(fp)
    f2e4:	10c00d17 	ldw	r3,52(r2)
    f2e8:	e0bffe17 	ldw	r2,-8(fp)
    f2ec:	10c00336 	bltu	r2,r3,f2fc <alt_up_char_buffer_string+0x48>
		return -1;
    f2f0:	00bfffc4 	movi	r2,-1
    f2f4:	e0bfff15 	stw	r2,-4(fp)
    f2f8:	00002e06 	br	f3b4 <alt_up_char_buffer_string+0x100>
	
	unsigned int offset = 0;
    f2fc:	e03ffa15 	stw	zero,-24(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
    f300:	e0bffb17 	ldw	r2,-20(fp)
    f304:	10801017 	ldw	r2,64(r2)
    f308:	1007883a 	mov	r3,r2
    f30c:	e0bffe17 	ldw	r2,-8(fp)
    f310:	10c6983a 	sll	r3,r2,r3
    f314:	e0bffd17 	ldw	r2,-12(fp)
    f318:	1885883a 	add	r2,r3,r2
    f31c:	e0bffa15 	stw	r2,-24(fp)

	while ( *ptr )
    f320:	00001c06 	br	f394 <alt_up_char_buffer_string+0xe0>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
    f324:	e0bffb17 	ldw	r2,-20(fp)
    f328:	10800b17 	ldw	r2,44(r2)
    f32c:	1007883a 	mov	r3,r2
    f330:	e0bffa17 	ldw	r2,-24(fp)
    f334:	1889883a 	add	r4,r3,r2
    f338:	e0bffc17 	ldw	r2,-16(fp)
    f33c:	10800003 	ldbu	r2,0(r2)
    f340:	10c03fcc 	andi	r3,r2,255
    f344:	18c0201c 	xori	r3,r3,128
    f348:	18ffe004 	addi	r3,r3,-128
    f34c:	2005883a 	mov	r2,r4
    f350:	10c00025 	stbio	r3,0(r2)
		++ptr;
    f354:	e0bffc17 	ldw	r2,-16(fp)
    f358:	10800044 	addi	r2,r2,1
    f35c:	e0bffc15 	stw	r2,-16(fp)
		if (++x >= char_buffer->x_resolution)
    f360:	e0bffd17 	ldw	r2,-12(fp)
    f364:	10800044 	addi	r2,r2,1
    f368:	e0bffd15 	stw	r2,-12(fp)
    f36c:	e0bffb17 	ldw	r2,-20(fp)
    f370:	10c00c17 	ldw	r3,48(r2)
    f374:	e0bffd17 	ldw	r2,-12(fp)
    f378:	10c00336 	bltu	r2,r3,f388 <alt_up_char_buffer_string+0xd4>
			return -1;
    f37c:	00bfffc4 	movi	r2,-1
    f380:	e0bfff15 	stw	r2,-4(fp)
    f384:	00000b06 	br	f3b4 <alt_up_char_buffer_string+0x100>
		++offset;
    f388:	e0bffa17 	ldw	r2,-24(fp)
    f38c:	10800044 	addi	r2,r2,1
    f390:	e0bffa15 	stw	r2,-24(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
    f394:	e0bffc17 	ldw	r2,-16(fp)
    f398:	10800003 	ldbu	r2,0(r2)
    f39c:	10803fcc 	andi	r2,r2,255
    f3a0:	1080201c 	xori	r2,r2,128
    f3a4:	10bfe004 	addi	r2,r2,-128
    f3a8:	1004c03a 	cmpne	r2,r2,zero
    f3ac:	103fdd1e 	bne	r2,zero,f324 <alt_up_char_buffer_string+0x70>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
    f3b0:	e03fff15 	stw	zero,-4(fp)
    f3b4:	e0bfff17 	ldw	r2,-4(fp)
}
    f3b8:	e037883a 	mov	sp,fp
    f3bc:	df000017 	ldw	fp,0(sp)
    f3c0:	dec00104 	addi	sp,sp,4
    f3c4:	f800283a 	ret

0000f3c8 <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
    f3c8:	defffe04 	addi	sp,sp,-8
    f3cc:	df000115 	stw	fp,4(sp)
    f3d0:	df000104 	addi	fp,sp,4
    f3d4:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
    f3d8:	e0bfff17 	ldw	r2,-4(fp)
    f3dc:	10800a17 	ldw	r2,40(r2)
    f3e0:	10800084 	addi	r2,r2,2
    f3e4:	1007883a 	mov	r3,r2
    f3e8:	00800044 	movi	r2,1
    f3ec:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
    f3f0:	e0bfff17 	ldw	r2,-4(fp)
    f3f4:	10800a17 	ldw	r2,40(r2)
    f3f8:	10800084 	addi	r2,r2,2
    f3fc:	10800023 	ldbuio	r2,0(r2)
    f400:	1080004c 	andi	r2,r2,1
    f404:	10803fcc 	andi	r2,r2,255
    f408:	1004c03a 	cmpne	r2,r2,zero
    f40c:	103ff81e 	bne	r2,zero,f3f0 <alt_up_char_buffer_clear+0x28>
	return 0;
    f410:	0005883a 	mov	r2,zero
}
    f414:	e037883a 	mov	sp,fp
    f418:	df000017 	ldw	fp,0(sp)
    f41c:	dec00104 	addi	sp,sp,4
    f420:	f800283a 	ret

0000f424 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
    f424:	defffc04 	addi	sp,sp,-16
    f428:	dfc00315 	stw	ra,12(sp)
    f42c:	df000215 	stw	fp,8(sp)
    f430:	df000204 	addi	fp,sp,8
    f434:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
    f438:	e13fff17 	ldw	r4,-4(fp)
    f43c:	01400074 	movhi	r5,1
    f440:	29508004 	addi	r5,r5,16896
    f444:	0010cdc0 	call	10cdc <alt_find_dev>
    f448:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    f44c:	e0bffe17 	ldw	r2,-8(fp)
}
    f450:	e037883a 	mov	sp,fp
    f454:	dfc00117 	ldw	ra,4(sp)
    f458:	df000017 	ldw	fp,0(sp)
    f45c:	dec00204 	addi	sp,sp,8
    f460:	f800283a 	ret

0000f464 <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
    f464:	defff904 	addi	sp,sp,-28
    f468:	df000615 	stw	fp,24(sp)
    f46c:	df000604 	addi	fp,sp,24
    f470:	e13ffb15 	stw	r4,-20(fp)
    f474:	e17ffc15 	stw	r5,-16(fp)
    f478:	e1bffd15 	stw	r6,-12(fp)
    f47c:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
    f480:	e0bffb17 	ldw	r2,-20(fp)
    f484:	10c00f17 	ldw	r3,60(r2)
    f488:	e0bffd17 	ldw	r2,-12(fp)
    f48c:	10c0042e 	bgeu	r2,r3,f4a0 <alt_up_pixel_buffer_dma_draw+0x3c>
    f490:	e0bffb17 	ldw	r2,-20(fp)
    f494:	10c01017 	ldw	r3,64(r2)
    f498:	e0bffe17 	ldw	r2,-8(fp)
    f49c:	10c00336 	bltu	r2,r3,f4ac <alt_up_pixel_buffer_dma_draw+0x48>
		return -1;
    f4a0:	00bfffc4 	movi	r2,-1
    f4a4:	e0bfff15 	stw	r2,-4(fp)
    f4a8:	00005106 	br	f5f0 <alt_up_pixel_buffer_dma_draw+0x18c>

	unsigned int addr = 0;
    f4ac:	e03ffa15 	stw	zero,-24(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    f4b0:	e0bffb17 	ldw	r2,-20(fp)
    f4b4:	10800d17 	ldw	r2,52(r2)
    f4b8:	1004c03a 	cmpne	r2,r2,zero
    f4bc:	1000151e 	bne	r2,zero,f514 <alt_up_pixel_buffer_dma_draw+0xb0>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
    f4c0:	e0bffb17 	ldw	r2,-20(fp)
    f4c4:	10c01217 	ldw	r3,72(r2)
    f4c8:	e0bffd17 	ldw	r2,-12(fp)
    f4cc:	1886703a 	and	r3,r3,r2
    f4d0:	e0bffb17 	ldw	r2,-20(fp)
    f4d4:	10801117 	ldw	r2,68(r2)
    f4d8:	1886983a 	sll	r3,r3,r2
    f4dc:	e0bffa17 	ldw	r2,-24(fp)
    f4e0:	10c4b03a 	or	r2,r2,r3
    f4e4:	e0bffa15 	stw	r2,-24(fp)
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
    f4e8:	e0bffb17 	ldw	r2,-20(fp)
    f4ec:	10c01417 	ldw	r3,80(r2)
    f4f0:	e0bffe17 	ldw	r2,-8(fp)
    f4f4:	1886703a 	and	r3,r3,r2
    f4f8:	e0bffb17 	ldw	r2,-20(fp)
    f4fc:	10801317 	ldw	r2,76(r2)
    f500:	1886983a 	sll	r3,r3,r2
    f504:	e0bffa17 	ldw	r2,-24(fp)
    f508:	10c4b03a 	or	r2,r2,r3
    f50c:	e0bffa15 	stw	r2,-24(fp)
    f510:	00001706 	br	f570 <alt_up_pixel_buffer_dma_draw+0x10c>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
    f514:	e0bffb17 	ldw	r2,-20(fp)
    f518:	10c01217 	ldw	r3,72(r2)
    f51c:	e0bffd17 	ldw	r2,-12(fp)
    f520:	1886703a 	and	r3,r3,r2
    f524:	e0bffb17 	ldw	r2,-20(fp)
    f528:	10801117 	ldw	r2,68(r2)
    f52c:	1886983a 	sll	r3,r3,r2
    f530:	e0bffa17 	ldw	r2,-24(fp)
    f534:	10c5883a 	add	r2,r2,r3
    f538:	e0bffa15 	stw	r2,-24(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
    f53c:	e0bffb17 	ldw	r2,-20(fp)
    f540:	10c01417 	ldw	r3,80(r2)
    f544:	e0bffe17 	ldw	r2,-8(fp)
    f548:	1886703a 	and	r3,r3,r2
    f54c:	e0bffb17 	ldw	r2,-20(fp)
    f550:	10800f17 	ldw	r2,60(r2)
    f554:	1887383a 	mul	r3,r3,r2
    f558:	e0bffb17 	ldw	r2,-20(fp)
    f55c:	10801117 	ldw	r2,68(r2)
    f560:	1886983a 	sll	r3,r3,r2
    f564:	e0bffa17 	ldw	r2,-24(fp)
    f568:	10c5883a 	add	r2,r2,r3
    f56c:	e0bffa15 	stw	r2,-24(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    f570:	e0bffb17 	ldw	r2,-20(fp)
    f574:	10800e17 	ldw	r2,56(r2)
    f578:	10800058 	cmpnei	r2,r2,1
    f57c:	1000081e 	bne	r2,zero,f5a0 <alt_up_pixel_buffer_dma_draw+0x13c>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    f580:	e0bffb17 	ldw	r2,-20(fp)
    f584:	10800c17 	ldw	r2,48(r2)
    f588:	1007883a 	mov	r3,r2
    f58c:	e0bffa17 	ldw	r2,-24(fp)
    f590:	1885883a 	add	r2,r3,r2
    f594:	e0fffc17 	ldw	r3,-16(fp)
    f598:	10c00025 	stbio	r3,0(r2)
    f59c:	00001306 	br	f5ec <alt_up_pixel_buffer_dma_draw+0x188>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    f5a0:	e0bffb17 	ldw	r2,-20(fp)
    f5a4:	10800e17 	ldw	r2,56(r2)
    f5a8:	10800098 	cmpnei	r2,r2,2
    f5ac:	1000081e 	bne	r2,zero,f5d0 <alt_up_pixel_buffer_dma_draw+0x16c>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    f5b0:	e0bffb17 	ldw	r2,-20(fp)
    f5b4:	10800c17 	ldw	r2,48(r2)
    f5b8:	1007883a 	mov	r3,r2
    f5bc:	e0bffa17 	ldw	r2,-24(fp)
    f5c0:	1885883a 	add	r2,r3,r2
    f5c4:	e0fffc17 	ldw	r3,-16(fp)
    f5c8:	10c0002d 	sthio	r3,0(r2)
    f5cc:	00000706 	br	f5ec <alt_up_pixel_buffer_dma_draw+0x188>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    f5d0:	e0bffb17 	ldw	r2,-20(fp)
    f5d4:	10800c17 	ldw	r2,48(r2)
    f5d8:	1007883a 	mov	r3,r2
    f5dc:	e0bffa17 	ldw	r2,-24(fp)
    f5e0:	1885883a 	add	r2,r3,r2
    f5e4:	e0fffc17 	ldw	r3,-16(fp)
    f5e8:	10c00035 	stwio	r3,0(r2)
	}

	return 0;
    f5ec:	e03fff15 	stw	zero,-4(fp)
    f5f0:	e0bfff17 	ldw	r2,-4(fp)
}
    f5f4:	e037883a 	mov	sp,fp
    f5f8:	df000017 	ldw	fp,0(sp)
    f5fc:	dec00104 	addi	sp,sp,4
    f600:	f800283a 	ret

0000f604 <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
    f604:	defffd04 	addi	sp,sp,-12
    f608:	df000215 	stw	fp,8(sp)
    f60c:	df000204 	addi	fp,sp,8
    f610:	e13ffe15 	stw	r4,-8(fp)
    f614:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
    f618:	e0bffe17 	ldw	r2,-8(fp)
    f61c:	10800a17 	ldw	r2,40(r2)
    f620:	10800104 	addi	r2,r2,4
    f624:	e0ffff17 	ldw	r3,-4(fp)
    f628:	10c00035 	stwio	r3,0(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
    f62c:	e0bffe17 	ldw	r2,-8(fp)
    f630:	10800a17 	ldw	r2,40(r2)
    f634:	10800104 	addi	r2,r2,4
    f638:	10800037 	ldwio	r2,0(r2)
    f63c:	1007883a 	mov	r3,r2
    f640:	e0bffe17 	ldw	r2,-8(fp)
    f644:	10c00c15 	stw	r3,48(r2)
	return 0;
    f648:	0005883a 	mov	r2,zero
}
    f64c:	e037883a 	mov	sp,fp
    f650:	df000017 	ldw	fp,0(sp)
    f654:	dec00104 	addi	sp,sp,4
    f658:	f800283a 	ret

0000f65c <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
    f65c:	defffe04 	addi	sp,sp,-8
    f660:	df000115 	stw	fp,4(sp)
    f664:	df000104 	addi	fp,sp,4
    f668:	e13fff15 	stw	r4,-4(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
    f66c:	e0bfff17 	ldw	r2,-4(fp)
    f670:	11000c17 	ldw	r4,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
    f674:	e0bfff17 	ldw	r2,-4(fp)
    f678:	10800a17 	ldw	r2,40(r2)
    f67c:	1007883a 	mov	r3,r2
    f680:	00800044 	movi	r2,1
    f684:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
    f688:	e0bfff17 	ldw	r2,-4(fp)
    f68c:	10c00b17 	ldw	r3,44(r2)
    f690:	e0bfff17 	ldw	r2,-4(fp)
    f694:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
    f698:	e0bfff17 	ldw	r2,-4(fp)
    f69c:	11000b15 	stw	r4,44(r2)
	return 0;
    f6a0:	0005883a 	mov	r2,zero
}
    f6a4:	e037883a 	mov	sp,fp
    f6a8:	df000017 	ldw	fp,0(sp)
    f6ac:	dec00104 	addi	sp,sp,4
    f6b0:	f800283a 	ret

0000f6b4 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
    f6b4:	defffe04 	addi	sp,sp,-8
    f6b8:	df000115 	stw	fp,4(sp)
    f6bc:	df000104 	addi	fp,sp,4
    f6c0:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
    f6c4:	e0bfff17 	ldw	r2,-4(fp)
    f6c8:	10800a17 	ldw	r2,40(r2)
    f6cc:	10800304 	addi	r2,r2,12
    f6d0:	10800037 	ldwio	r2,0(r2)
    f6d4:	1080004c 	andi	r2,r2,1
}
    f6d8:	e037883a 	mov	sp,fp
    f6dc:	df000017 	ldw	fp,0(sp)
    f6e0:	dec00104 	addi	sp,sp,4
    f6e4:	f800283a 	ret

0000f6e8 <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
    f6e8:	defff604 	addi	sp,sp,-40
    f6ec:	df000915 	stw	fp,36(sp)
    f6f0:	df000904 	addi	fp,sp,36
    f6f4:	e13ff715 	stw	r4,-36(fp)
    f6f8:	e17ff815 	stw	r5,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    f6fc:	e0bff817 	ldw	r2,-32(fp)
    f700:	10800058 	cmpnei	r2,r2,1
    f704:	1000041e 	bne	r2,zero,f718 <alt_up_pixel_buffer_dma_clear_screen+0x30>
		addr = pixel_buffer->back_buffer_start_address;
    f708:	e0bff717 	ldw	r2,-36(fp)
    f70c:	10800c17 	ldw	r2,48(r2)
    f710:	e0bfff15 	stw	r2,-4(fp)
    f714:	00000306 	br	f724 <alt_up_pixel_buffer_dma_clear_screen+0x3c>
	else
		addr = pixel_buffer->buffer_start_address;
    f718:	e0bff717 	ldw	r2,-36(fp)
    f71c:	10800b17 	ldw	r2,44(r2)
    f720:	e0bfff15 	stw	r2,-4(fp)
	limit_x = pixel_buffer->x_resolution;
    f724:	e0bff717 	ldw	r2,-36(fp)
    f728:	10800f17 	ldw	r2,60(r2)
    f72c:	e0bffe15 	stw	r2,-8(fp)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    f730:	e0bff717 	ldw	r2,-36(fp)
    f734:	10800e17 	ldw	r2,56(r2)
    f738:	10800098 	cmpnei	r2,r2,2
    f73c:	1000051e 	bne	r2,zero,f754 <alt_up_pixel_buffer_dma_clear_screen+0x6c>
		limit_x = limit_x << 1;
    f740:	e0fffe17 	ldw	r3,-8(fp)
    f744:	e0fffe17 	ldw	r3,-8(fp)
    f748:	18c5883a 	add	r2,r3,r3
    f74c:	e0bffe15 	stw	r2,-8(fp)
    f750:	00000506 	br	f768 <alt_up_pixel_buffer_dma_clear_screen+0x80>
	} else {
		limit_x = limit_x << 2;
    f754:	e13ffe17 	ldw	r4,-8(fp)
    f758:	e13ffe17 	ldw	r4,-8(fp)
    f75c:	2105883a 	add	r2,r4,r4
    f760:	1085883a 	add	r2,r2,r2
    f764:	e0bffe15 	stw	r2,-8(fp)
	}	
	limit_y = pixel_buffer->y_resolution;
    f768:	e0bff717 	ldw	r2,-36(fp)
    f76c:	10801017 	ldw	r2,64(r2)
    f770:	e0bffd15 	stw	r2,-12(fp)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    f774:	e0bff717 	ldw	r2,-36(fp)
    f778:	10800d17 	ldw	r2,52(r2)
    f77c:	1004c03a 	cmpne	r2,r2,zero
    f780:	10001e1e 	bne	r2,zero,f7fc <alt_up_pixel_buffer_dma_clear_screen+0x114>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
    f784:	e0bff717 	ldw	r2,-36(fp)
    f788:	10801317 	ldw	r2,76(r2)
    f78c:	e0bffa15 	stw	r2,-24(fp)

		for (y = 0; y < limit_y; y++)
    f790:	e03ffb15 	stw	zero,-20(fp)
    f794:	00001506 	br	f7ec <alt_up_pixel_buffer_dma_clear_screen+0x104>
		{
			for (x = 0; x < limit_x; x = x + 4)
    f798:	e03ffc15 	stw	zero,-16(fp)
    f79c:	00000706 	br	f7bc <alt_up_pixel_buffer_dma_clear_screen+0xd4>
			{
				IOWR_32DIRECT(addr, x, 0);
    f7a0:	e0ffff17 	ldw	r3,-4(fp)
    f7a4:	e0bffc17 	ldw	r2,-16(fp)
    f7a8:	1885883a 	add	r2,r3,r2
    f7ac:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
    f7b0:	e0bffc17 	ldw	r2,-16(fp)
    f7b4:	10800104 	addi	r2,r2,4
    f7b8:	e0bffc15 	stw	r2,-16(fp)
    f7bc:	e0fffc17 	ldw	r3,-16(fp)
    f7c0:	e13ffe17 	ldw	r4,-8(fp)
    f7c4:	193ff636 	bltu	r3,r4,f7a0 <alt_up_pixel_buffer_dma_clear_screen+0xb8>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
    f7c8:	e0fffa17 	ldw	r3,-24(fp)
    f7cc:	00800044 	movi	r2,1
    f7d0:	10c4983a 	sll	r2,r2,r3
    f7d4:	e0ffff17 	ldw	r3,-4(fp)
    f7d8:	1887883a 	add	r3,r3,r2
    f7dc:	e0ffff15 	stw	r3,-4(fp)
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
    f7e0:	e13ffb17 	ldw	r4,-20(fp)
    f7e4:	21000044 	addi	r4,r4,1
    f7e8:	e13ffb15 	stw	r4,-20(fp)
    f7ec:	e0bffb17 	ldw	r2,-20(fp)
    f7f0:	e0fffd17 	ldw	r3,-12(fp)
    f7f4:	10ffe836 	bltu	r2,r3,f798 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
    f7f8:	00001006 	br	f83c <alt_up_pixel_buffer_dma_clear_screen+0x154>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
    f7fc:	e13ffd17 	ldw	r4,-12(fp)
    f800:	e0bffe17 	ldw	r2,-8(fp)
    f804:	2089383a 	mul	r4,r4,r2
    f808:	e13ffd15 	stw	r4,-12(fp)

		for (x = 0; x < limit_y; x = x + 4)
    f80c:	e03ff915 	stw	zero,-28(fp)
    f810:	00000706 	br	f830 <alt_up_pixel_buffer_dma_clear_screen+0x148>
		{
			IOWR_32DIRECT(addr, x, 0);
    f814:	e0ffff17 	ldw	r3,-4(fp)
    f818:	e0bff917 	ldw	r2,-28(fp)
    f81c:	1885883a 	add	r2,r3,r2
    f820:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
    f824:	e0fff917 	ldw	r3,-28(fp)
    f828:	18c00104 	addi	r3,r3,4
    f82c:	e0fff915 	stw	r3,-28(fp)
    f830:	e0bff917 	ldw	r2,-28(fp)
    f834:	e13ffd17 	ldw	r4,-12(fp)
    f838:	113ff636 	bltu	r2,r4,f814 <alt_up_pixel_buffer_dma_clear_screen+0x12c>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
    f83c:	e037883a 	mov	sp,fp
    f840:	df000017 	ldw	fp,0(sp)
    f844:	dec00104 	addi	sp,sp,4
    f848:	f800283a 	ret

0000f84c <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
    f84c:	deffed04 	addi	sp,sp,-76
    f850:	df001215 	stw	fp,72(sp)
    f854:	df001204 	addi	fp,sp,72
    f858:	e13fee15 	stw	r4,-72(fp)
    f85c:	e17fef15 	stw	r5,-68(fp)
    f860:	e1bff015 	stw	r6,-64(fp)
    f864:	e1fff115 	stw	r7,-60(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
    f868:	e0bfee17 	ldw	r2,-72(fp)
    f86c:	10800f17 	ldw	r2,60(r2)
    f870:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
    f874:	e0bfee17 	ldw	r2,-72(fp)
    f878:	10801017 	ldw	r2,64(r2)
    f87c:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
    f880:	e0bfef17 	ldw	r2,-68(fp)
    f884:	e0bffb15 	stw	r2,-20(fp)
	register unsigned int r_x = x1;
    f888:	e0fff117 	ldw	r3,-60(fp)
    f88c:	e0fffa15 	stw	r3,-24(fp)
	register unsigned int t_y = y0;
    f890:	e13ff017 	ldw	r4,-64(fp)
    f894:	e13ff915 	stw	r4,-28(fp)
	register unsigned int b_y = y1;
    f898:	e0800117 	ldw	r2,4(fp)
    f89c:	e0bff815 	stw	r2,-32(fp)
	register unsigned int local_color = color;
    f8a0:	e0c00217 	ldw	r3,8(fp)
    f8a4:	e0fff715 	stw	r3,-36(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
    f8a8:	e13ffa17 	ldw	r4,-24(fp)
    f8ac:	e0bffb17 	ldw	r2,-20(fp)
    f8b0:	2080062e 	bgeu	r4,r2,f8cc <alt_up_pixel_buffer_dma_draw_box+0x80>
	{
		temp = l_x;
    f8b4:	e0fffb17 	ldw	r3,-20(fp)
    f8b8:	e0fffc15 	stw	r3,-16(fp)
		l_x = r_x;
    f8bc:	e13ffa17 	ldw	r4,-24(fp)
    f8c0:	e13ffb15 	stw	r4,-20(fp)
		r_x = temp;
    f8c4:	e0bffc17 	ldw	r2,-16(fp)
    f8c8:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y > b_y)
    f8cc:	e0fff817 	ldw	r3,-32(fp)
    f8d0:	e13ff917 	ldw	r4,-28(fp)
    f8d4:	1900062e 	bgeu	r3,r4,f8f0 <alt_up_pixel_buffer_dma_draw_box+0xa4>
	{
		temp = t_y;
    f8d8:	e0bff917 	ldw	r2,-28(fp)
    f8dc:	e0bffc15 	stw	r2,-16(fp)
		t_y = b_y;
    f8e0:	e0fff817 	ldw	r3,-32(fp)
    f8e4:	e0fff915 	stw	r3,-28(fp)
		b_y = temp;
    f8e8:	e13ffc17 	ldw	r4,-16(fp)
    f8ec:	e13ff815 	stw	r4,-32(fp)
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
    f8f0:	e0bffb17 	ldw	r2,-20(fp)
    f8f4:	e0fffe17 	ldw	r3,-8(fp)
    f8f8:	10c10d2e 	bgeu	r2,r3,fd30 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
    f8fc:	e13ff917 	ldw	r4,-28(fp)
    f900:	e0bffd17 	ldw	r2,-12(fp)
    f904:	20800136 	bltu	r4,r2,f90c <alt_up_pixel_buffer_dma_draw_box+0xc0>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
    f908:	00010906 	br	fd30 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
    f90c:	e0fffa17 	ldw	r3,-24(fp)
    f910:	e13ffe17 	ldw	r4,-8(fp)
    f914:	19000336 	bltu	r3,r4,f924 <alt_up_pixel_buffer_dma_draw_box+0xd8>
	{
		r_x = limit_x - 1;
    f918:	e0bffe17 	ldw	r2,-8(fp)
    f91c:	10bfffc4 	addi	r2,r2,-1
    f920:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
    f924:	e0fff817 	ldw	r3,-32(fp)
    f928:	e13ffd17 	ldw	r4,-12(fp)
    f92c:	19000336 	bltu	r3,r4,f93c <alt_up_pixel_buffer_dma_draw_box+0xf0>
	{
		b_y = limit_y - 1;
    f930:	e0bffd17 	ldw	r2,-12(fp)
    f934:	10bfffc4 	addi	r2,r2,-1
    f938:	e0bff815 	stw	r2,-32(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    f93c:	e0800317 	ldw	r2,12(fp)
    f940:	10800058 	cmpnei	r2,r2,1
    f944:	1000041e 	bne	r2,zero,f958 <alt_up_pixel_buffer_dma_draw_box+0x10c>
		addr = pixel_buffer->back_buffer_start_address;
    f948:	e0bfee17 	ldw	r2,-72(fp)
    f94c:	10800c17 	ldw	r2,48(r2)
    f950:	e0bfff15 	stw	r2,-4(fp)
    f954:	00000306 	br	f964 <alt_up_pixel_buffer_dma_draw_box+0x118>
	else
		addr = pixel_buffer->buffer_start_address;
    f958:	e0bfee17 	ldw	r2,-72(fp)
    f95c:	10800b17 	ldw	r2,44(r2)
    f960:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    f964:	e0bfee17 	ldw	r2,-72(fp)
    f968:	10800d17 	ldw	r2,52(r2)
    f96c:	1004c03a 	cmpne	r2,r2,zero
    f970:	1000721e 	bne	r2,zero,fb3c <alt_up_pixel_buffer_dma_draw_box+0x2f0>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
    f974:	e0bfee17 	ldw	r2,-72(fp)
    f978:	10801317 	ldw	r2,76(r2)
    f97c:	e0bff415 	stw	r2,-48(fp)
		addr = addr + (t_y << offset_y);
    f980:	e0bff417 	ldw	r2,-48(fp)
    f984:	e0fff917 	ldw	r3,-28(fp)
    f988:	1884983a 	sll	r2,r3,r2
    f98c:	e13fff17 	ldw	r4,-4(fp)
    f990:	2089883a 	add	r4,r4,r2
    f994:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    f998:	e0bfee17 	ldw	r2,-72(fp)
    f99c:	10800e17 	ldw	r2,56(r2)
    f9a0:	10800058 	cmpnei	r2,r2,1
    f9a4:	10001e1e 	bne	r2,zero,fa20 <alt_up_pixel_buffer_dma_draw_box+0x1d4>
			for (y = t_y; y <= b_y; y++)
    f9a8:	e0bff917 	ldw	r2,-28(fp)
    f9ac:	e0bff515 	stw	r2,-44(fp)
    f9b0:	00001706 	br	fa10 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
			{
				for (x = l_x; x <= r_x; x++)
    f9b4:	e0fffb17 	ldw	r3,-20(fp)
    f9b8:	e0fff615 	stw	r3,-40(fp)
    f9bc:	00000806 	br	f9e0 <alt_up_pixel_buffer_dma_draw_box+0x194>
				{
					IOWR_8DIRECT(addr, x, local_color);
    f9c0:	e0ffff17 	ldw	r3,-4(fp)
    f9c4:	e0bff617 	ldw	r2,-40(fp)
    f9c8:	1885883a 	add	r2,r3,r2
    f9cc:	e0fff717 	ldw	r3,-36(fp)
    f9d0:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    f9d4:	e13ff617 	ldw	r4,-40(fp)
    f9d8:	21000044 	addi	r4,r4,1
    f9dc:	e13ff615 	stw	r4,-40(fp)
    f9e0:	e0bffa17 	ldw	r2,-24(fp)
    f9e4:	e0fff617 	ldw	r3,-40(fp)
    f9e8:	10fff52e 	bgeu	r2,r3,f9c0 <alt_up_pixel_buffer_dma_draw_box+0x174>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
    f9ec:	e0fff417 	ldw	r3,-48(fp)
    f9f0:	00800044 	movi	r2,1
    f9f4:	10c4983a 	sll	r2,r2,r3
    f9f8:	e13fff17 	ldw	r4,-4(fp)
    f9fc:	2089883a 	add	r4,r4,r2
    fa00:	e13fff15 	stw	r4,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    fa04:	e0bff517 	ldw	r2,-44(fp)
    fa08:	10800044 	addi	r2,r2,1
    fa0c:	e0bff515 	stw	r2,-44(fp)
    fa10:	e0fff817 	ldw	r3,-32(fp)
    fa14:	e13ff517 	ldw	r4,-44(fp)
    fa18:	193fe62e 	bgeu	r3,r4,f9b4 <alt_up_pixel_buffer_dma_draw_box+0x168>
    fa1c:	0000c406 	br	fd30 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    fa20:	e0bfee17 	ldw	r2,-72(fp)
    fa24:	10800e17 	ldw	r2,56(r2)
    fa28:	10800098 	cmpnei	r2,r2,2
    fa2c:	1000211e 	bne	r2,zero,fab4 <alt_up_pixel_buffer_dma_draw_box+0x268>
			for (y = t_y; y <= b_y; y++)
    fa30:	e0bff917 	ldw	r2,-28(fp)
    fa34:	e0bff515 	stw	r2,-44(fp)
    fa38:	00001a06 	br	faa4 <alt_up_pixel_buffer_dma_draw_box+0x258>
			{
				for (x = l_x; x <= r_x; x++)
    fa3c:	e0fffb17 	ldw	r3,-20(fp)
    fa40:	e0fff615 	stw	r3,-40(fp)
    fa44:	00000b06 	br	fa74 <alt_up_pixel_buffer_dma_draw_box+0x228>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
    fa48:	e13ff617 	ldw	r4,-40(fp)
    fa4c:	e13ff617 	ldw	r4,-40(fp)
    fa50:	2105883a 	add	r2,r4,r4
    fa54:	1007883a 	mov	r3,r2
    fa58:	e0bfff17 	ldw	r2,-4(fp)
    fa5c:	1885883a 	add	r2,r3,r2
    fa60:	e0fff717 	ldw	r3,-36(fp)
    fa64:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    fa68:	e0bff617 	ldw	r2,-40(fp)
    fa6c:	10800044 	addi	r2,r2,1
    fa70:	e0bff615 	stw	r2,-40(fp)
    fa74:	e0fffa17 	ldw	r3,-24(fp)
    fa78:	e13ff617 	ldw	r4,-40(fp)
    fa7c:	193ff22e 	bgeu	r3,r4,fa48 <alt_up_pixel_buffer_dma_draw_box+0x1fc>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
    fa80:	e0fff417 	ldw	r3,-48(fp)
    fa84:	00800044 	movi	r2,1
    fa88:	10c4983a 	sll	r2,r2,r3
    fa8c:	e0ffff17 	ldw	r3,-4(fp)
    fa90:	1887883a 	add	r3,r3,r2
    fa94:	e0ffff15 	stw	r3,-4(fp)
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    fa98:	e13ff517 	ldw	r4,-44(fp)
    fa9c:	21000044 	addi	r4,r4,1
    faa0:	e13ff515 	stw	r4,-44(fp)
    faa4:	e0bff817 	ldw	r2,-32(fp)
    faa8:	e0fff517 	ldw	r3,-44(fp)
    faac:	10ffe32e 	bgeu	r2,r3,fa3c <alt_up_pixel_buffer_dma_draw_box+0x1f0>
    fab0:	00009f06 	br	fd30 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    fab4:	e13ff917 	ldw	r4,-28(fp)
    fab8:	e13ff515 	stw	r4,-44(fp)
    fabc:	00001b06 	br	fb2c <alt_up_pixel_buffer_dma_draw_box+0x2e0>
			{
				for (x = l_x; x <= r_x; x++)
    fac0:	e0bffb17 	ldw	r2,-20(fp)
    fac4:	e0bff615 	stw	r2,-40(fp)
    fac8:	00000c06 	br	fafc <alt_up_pixel_buffer_dma_draw_box+0x2b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
    facc:	e0fff617 	ldw	r3,-40(fp)
    fad0:	e0fff617 	ldw	r3,-40(fp)
    fad4:	18c5883a 	add	r2,r3,r3
    fad8:	1085883a 	add	r2,r2,r2
    fadc:	1007883a 	mov	r3,r2
    fae0:	e0bfff17 	ldw	r2,-4(fp)
    fae4:	1885883a 	add	r2,r3,r2
    fae8:	e0fff717 	ldw	r3,-36(fp)
    faec:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    faf0:	e13ff617 	ldw	r4,-40(fp)
    faf4:	21000044 	addi	r4,r4,1
    faf8:	e13ff615 	stw	r4,-40(fp)
    fafc:	e0bffa17 	ldw	r2,-24(fp)
    fb00:	e0fff617 	ldw	r3,-40(fp)
    fb04:	10fff12e 	bgeu	r2,r3,facc <alt_up_pixel_buffer_dma_draw_box+0x280>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
    fb08:	e0fff417 	ldw	r3,-48(fp)
    fb0c:	00800044 	movi	r2,1
    fb10:	10c4983a 	sll	r2,r2,r3
    fb14:	e13fff17 	ldw	r4,-4(fp)
    fb18:	2089883a 	add	r4,r4,r2
    fb1c:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    fb20:	e0bff517 	ldw	r2,-44(fp)
    fb24:	10800044 	addi	r2,r2,1
    fb28:	e0bff515 	stw	r2,-44(fp)
    fb2c:	e0fff817 	ldw	r3,-32(fp)
    fb30:	e13ff517 	ldw	r4,-44(fp)
    fb34:	193fe22e 	bgeu	r3,r4,fac0 <alt_up_pixel_buffer_dma_draw_box+0x274>
    fb38:	00007d06 	br	fd30 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    fb3c:	e0bfee17 	ldw	r2,-72(fp)
    fb40:	10800e17 	ldw	r2,56(r2)
    fb44:	10800058 	cmpnei	r2,r2,1
    fb48:	1000221e 	bne	r2,zero,fbd4 <alt_up_pixel_buffer_dma_draw_box+0x388>
			addr = addr + t_y * limit_x;
    fb4c:	e0fff917 	ldw	r3,-28(fp)
    fb50:	e13ffe17 	ldw	r4,-8(fp)
    fb54:	1905383a 	mul	r2,r3,r4
    fb58:	e0ffff17 	ldw	r3,-4(fp)
    fb5c:	1887883a 	add	r3,r3,r2
    fb60:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
    fb64:	e13ff917 	ldw	r4,-28(fp)
    fb68:	e13ff215 	stw	r4,-56(fp)
    fb6c:	00001506 	br	fbc4 <alt_up_pixel_buffer_dma_draw_box+0x378>
			{
				for (x = l_x; x <= r_x; x++)
    fb70:	e0bffb17 	ldw	r2,-20(fp)
    fb74:	e0bff315 	stw	r2,-52(fp)
    fb78:	00000806 	br	fb9c <alt_up_pixel_buffer_dma_draw_box+0x350>
				{
					IOWR_8DIRECT(addr, x, local_color);
    fb7c:	e0ffff17 	ldw	r3,-4(fp)
    fb80:	e0bff317 	ldw	r2,-52(fp)
    fb84:	1885883a 	add	r2,r3,r2
    fb88:	e0fff717 	ldw	r3,-36(fp)
    fb8c:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    fb90:	e0fff317 	ldw	r3,-52(fp)
    fb94:	18c00044 	addi	r3,r3,1
    fb98:	e0fff315 	stw	r3,-52(fp)
    fb9c:	e13ffa17 	ldw	r4,-24(fp)
    fba0:	e0bff317 	ldw	r2,-52(fp)
    fba4:	20bff52e 	bgeu	r4,r2,fb7c <alt_up_pixel_buffer_dma_draw_box+0x330>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
    fba8:	e0ffff17 	ldw	r3,-4(fp)
    fbac:	e13ffe17 	ldw	r4,-8(fp)
    fbb0:	1907883a 	add	r3,r3,r4
    fbb4:	e0ffff15 	stw	r3,-4(fp)
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    fbb8:	e0bff217 	ldw	r2,-56(fp)
    fbbc:	10800044 	addi	r2,r2,1
    fbc0:	e0bff215 	stw	r2,-56(fp)
    fbc4:	e0fff817 	ldw	r3,-32(fp)
    fbc8:	e13ff217 	ldw	r4,-56(fp)
    fbcc:	193fe82e 	bgeu	r3,r4,fb70 <alt_up_pixel_buffer_dma_draw_box+0x324>
    fbd0:	00005706 	br	fd30 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    fbd4:	e0bfee17 	ldw	r2,-72(fp)
    fbd8:	10800e17 	ldw	r2,56(r2)
    fbdc:	10800098 	cmpnei	r2,r2,2
    fbe0:	1000291e 	bne	r2,zero,fc88 <alt_up_pixel_buffer_dma_draw_box+0x43c>
			limit_x = limit_x << 1;
    fbe4:	e0fffe17 	ldw	r3,-8(fp)
    fbe8:	e0fffe17 	ldw	r3,-8(fp)
    fbec:	18c5883a 	add	r2,r3,r3
    fbf0:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
    fbf4:	e13ff917 	ldw	r4,-28(fp)
    fbf8:	e0fffe17 	ldw	r3,-8(fp)
    fbfc:	20c5383a 	mul	r2,r4,r3
    fc00:	e13fff17 	ldw	r4,-4(fp)
    fc04:	2089883a 	add	r4,r4,r2
    fc08:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
    fc0c:	e0bff917 	ldw	r2,-28(fp)
    fc10:	e0bff215 	stw	r2,-56(fp)
    fc14:	00001806 	br	fc78 <alt_up_pixel_buffer_dma_draw_box+0x42c>
			{
				for (x = l_x; x <= r_x; x++)
    fc18:	e0fffb17 	ldw	r3,-20(fp)
    fc1c:	e0fff315 	stw	r3,-52(fp)
    fc20:	00000b06 	br	fc50 <alt_up_pixel_buffer_dma_draw_box+0x404>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
    fc24:	e13ff317 	ldw	r4,-52(fp)
    fc28:	e13ff317 	ldw	r4,-52(fp)
    fc2c:	2105883a 	add	r2,r4,r4
    fc30:	1007883a 	mov	r3,r2
    fc34:	e0bfff17 	ldw	r2,-4(fp)
    fc38:	1885883a 	add	r2,r3,r2
    fc3c:	e0fff717 	ldw	r3,-36(fp)
    fc40:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    fc44:	e0bff317 	ldw	r2,-52(fp)
    fc48:	10800044 	addi	r2,r2,1
    fc4c:	e0bff315 	stw	r2,-52(fp)
    fc50:	e0fffa17 	ldw	r3,-24(fp)
    fc54:	e13ff317 	ldw	r4,-52(fp)
    fc58:	193ff22e 	bgeu	r3,r4,fc24 <alt_up_pixel_buffer_dma_draw_box+0x3d8>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
    fc5c:	e0bfff17 	ldw	r2,-4(fp)
    fc60:	e0fffe17 	ldw	r3,-8(fp)
    fc64:	10c5883a 	add	r2,r2,r3
    fc68:	e0bfff15 	stw	r2,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    fc6c:	e13ff217 	ldw	r4,-56(fp)
    fc70:	21000044 	addi	r4,r4,1
    fc74:	e13ff215 	stw	r4,-56(fp)
    fc78:	e0bff817 	ldw	r2,-32(fp)
    fc7c:	e0fff217 	ldw	r3,-56(fp)
    fc80:	10ffe52e 	bgeu	r2,r3,fc18 <alt_up_pixel_buffer_dma_draw_box+0x3cc>
    fc84:	00002a06 	br	fd30 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
    fc88:	e13ffe17 	ldw	r4,-8(fp)
    fc8c:	e13ffe17 	ldw	r4,-8(fp)
    fc90:	2105883a 	add	r2,r4,r4
    fc94:	1085883a 	add	r2,r2,r2
    fc98:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
    fc9c:	e0fff917 	ldw	r3,-28(fp)
    fca0:	e13ffe17 	ldw	r4,-8(fp)
    fca4:	1905383a 	mul	r2,r3,r4
    fca8:	e0ffff17 	ldw	r3,-4(fp)
    fcac:	1887883a 	add	r3,r3,r2
    fcb0:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
    fcb4:	e13ff917 	ldw	r4,-28(fp)
    fcb8:	e13ff215 	stw	r4,-56(fp)
    fcbc:	00001906 	br	fd24 <alt_up_pixel_buffer_dma_draw_box+0x4d8>
			{
				for (x = l_x; x <= r_x; x++)
    fcc0:	e0bffb17 	ldw	r2,-20(fp)
    fcc4:	e0bff315 	stw	r2,-52(fp)
    fcc8:	00000c06 	br	fcfc <alt_up_pixel_buffer_dma_draw_box+0x4b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
    fccc:	e0fff317 	ldw	r3,-52(fp)
    fcd0:	e0fff317 	ldw	r3,-52(fp)
    fcd4:	18c5883a 	add	r2,r3,r3
    fcd8:	1085883a 	add	r2,r2,r2
    fcdc:	1007883a 	mov	r3,r2
    fce0:	e0bfff17 	ldw	r2,-4(fp)
    fce4:	1885883a 	add	r2,r3,r2
    fce8:	e0fff717 	ldw	r3,-36(fp)
    fcec:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    fcf0:	e13ff317 	ldw	r4,-52(fp)
    fcf4:	21000044 	addi	r4,r4,1
    fcf8:	e13ff315 	stw	r4,-52(fp)
    fcfc:	e0bffa17 	ldw	r2,-24(fp)
    fd00:	e0fff317 	ldw	r3,-52(fp)
    fd04:	10fff12e 	bgeu	r2,r3,fccc <alt_up_pixel_buffer_dma_draw_box+0x480>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
    fd08:	e13fff17 	ldw	r4,-4(fp)
    fd0c:	e0bffe17 	ldw	r2,-8(fp)
    fd10:	2089883a 	add	r4,r4,r2
    fd14:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    fd18:	e0fff217 	ldw	r3,-56(fp)
    fd1c:	18c00044 	addi	r3,r3,1
    fd20:	e0fff215 	stw	r3,-56(fp)
    fd24:	e13ff817 	ldw	r4,-32(fp)
    fd28:	e0bff217 	ldw	r2,-56(fp)
    fd2c:	20bfe42e 	bgeu	r4,r2,fcc0 <alt_up_pixel_buffer_dma_draw_box+0x474>
				}
				addr = addr + limit_x;
			}
		}
	}
}
    fd30:	e037883a 	mov	sp,fp
    fd34:	df000017 	ldw	fp,0(sp)
    fd38:	dec00104 	addi	sp,sp,4
    fd3c:	f800283a 	ret

0000fd40 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
    fd40:	defff204 	addi	sp,sp,-56
    fd44:	df000d15 	stw	fp,52(sp)
    fd48:	df000d04 	addi	fp,sp,52
    fd4c:	e13ff315 	stw	r4,-52(fp)
    fd50:	e17ff415 	stw	r5,-48(fp)
    fd54:	e1bff515 	stw	r6,-44(fp)
    fd58:	e1fff615 	stw	r7,-40(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
    fd5c:	e0bff317 	ldw	r2,-52(fp)
    fd60:	10800f17 	ldw	r2,60(r2)
    fd64:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
    fd68:	e0bff317 	ldw	r2,-52(fp)
    fd6c:	10801017 	ldw	r2,64(r2)
    fd70:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
    fd74:	e0bff417 	ldw	r2,-48(fp)
    fd78:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int r_x = x1;
    fd7c:	e0fff517 	ldw	r3,-44(fp)
    fd80:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int line_y = y;
    fd84:	e13ff617 	ldw	r4,-40(fp)
    fd88:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
    fd8c:	e0800117 	ldw	r2,4(fp)
    fd90:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
    fd94:	e0fffb17 	ldw	r3,-20(fp)
    fd98:	e13ffc17 	ldw	r4,-16(fp)
    fd9c:	1900042e 	bgeu	r3,r4,fdb0 <alt_up_pixel_buffer_dma_draw_hline+0x70>
	{
		temp = l_x;
    fda0:	e0bffc17 	ldw	r2,-16(fp)
		l_x = r_x;
    fda4:	e0fffb17 	ldw	r3,-20(fp)
    fda8:	e0fffc15 	stw	r3,-16(fp)
		r_x = temp;
    fdac:	e0bffb15 	stw	r2,-20(fp)
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
    fdb0:	e13ffc17 	ldw	r4,-16(fp)
    fdb4:	e0bffe17 	ldw	r2,-8(fp)
    fdb8:	2080b12e 	bgeu	r4,r2,10080 <alt_up_pixel_buffer_dma_draw_hline+0x340>
    fdbc:	e0fffa17 	ldw	r3,-24(fp)
    fdc0:	e13ffd17 	ldw	r4,-12(fp)
    fdc4:	19000136 	bltu	r3,r4,fdcc <alt_up_pixel_buffer_dma_draw_hline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
    fdc8:	0000ad06 	br	10080 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
    fdcc:	e0bffb17 	ldw	r2,-20(fp)
    fdd0:	e0fffe17 	ldw	r3,-8(fp)
    fdd4:	10c00336 	bltu	r2,r3,fde4 <alt_up_pixel_buffer_dma_draw_hline+0xa4>
	{
		r_x = limit_x - 1;
    fdd8:	e13ffe17 	ldw	r4,-8(fp)
    fddc:	213fffc4 	addi	r4,r4,-1
    fde0:	e13ffb15 	stw	r4,-20(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    fde4:	e0800217 	ldw	r2,8(fp)
    fde8:	10800058 	cmpnei	r2,r2,1
    fdec:	1000041e 	bne	r2,zero,fe00 <alt_up_pixel_buffer_dma_draw_hline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
    fdf0:	e0bff317 	ldw	r2,-52(fp)
    fdf4:	10800c17 	ldw	r2,48(r2)
    fdf8:	e0bfff15 	stw	r2,-4(fp)
    fdfc:	00000306 	br	fe0c <alt_up_pixel_buffer_dma_draw_hline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
    fe00:	e0bff317 	ldw	r2,-52(fp)
    fe04:	10800b17 	ldw	r2,44(r2)
    fe08:	e0bfff15 	stw	r2,-4(fp)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    fe0c:	e0bff317 	ldw	r2,-52(fp)
    fe10:	10800d17 	ldw	r2,52(r2)
    fe14:	1004c03a 	cmpne	r2,r2,zero
    fe18:	1000431e 	bne	r2,zero,ff28 <alt_up_pixel_buffer_dma_draw_hline+0x1e8>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
    fe1c:	e0bff317 	ldw	r2,-52(fp)
    fe20:	10801317 	ldw	r2,76(r2)
		addr = addr + (line_y << offset_y);
    fe24:	e0fffa17 	ldw	r3,-24(fp)
    fe28:	1884983a 	sll	r2,r3,r2
    fe2c:	e13fff17 	ldw	r4,-4(fp)
    fe30:	2089883a 	add	r4,r4,r2
    fe34:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    fe38:	e0bff317 	ldw	r2,-52(fp)
    fe3c:	10800e17 	ldw	r2,56(r2)
    fe40:	10800058 	cmpnei	r2,r2,1
    fe44:	10000f1e 	bne	r2,zero,fe84 <alt_up_pixel_buffer_dma_draw_hline+0x144>
			for (x = l_x; x <= r_x; x++)
    fe48:	e0bffc17 	ldw	r2,-16(fp)
    fe4c:	e0bff815 	stw	r2,-32(fp)
    fe50:	00000806 	br	fe74 <alt_up_pixel_buffer_dma_draw_hline+0x134>
			{
				IOWR_8DIRECT(addr, x, local_color);
    fe54:	e0ffff17 	ldw	r3,-4(fp)
    fe58:	e0bff817 	ldw	r2,-32(fp)
    fe5c:	1885883a 	add	r2,r3,r2
    fe60:	e0fff917 	ldw	r3,-28(fp)
    fe64:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
    fe68:	e0fff817 	ldw	r3,-32(fp)
    fe6c:	18c00044 	addi	r3,r3,1
    fe70:	e0fff815 	stw	r3,-32(fp)
    fe74:	e13ffb17 	ldw	r4,-20(fp)
    fe78:	e0bff817 	ldw	r2,-32(fp)
    fe7c:	20bff52e 	bgeu	r4,r2,fe54 <alt_up_pixel_buffer_dma_draw_hline+0x114>
    fe80:	00007f06 	br	10080 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    fe84:	e0bff317 	ldw	r2,-52(fp)
    fe88:	10800e17 	ldw	r2,56(r2)
    fe8c:	10800098 	cmpnei	r2,r2,2
    fe90:	1000121e 	bne	r2,zero,fedc <alt_up_pixel_buffer_dma_draw_hline+0x19c>
			for (x = l_x; x <= r_x; x++)
    fe94:	e0fffc17 	ldw	r3,-16(fp)
    fe98:	e0fff815 	stw	r3,-32(fp)
    fe9c:	00000b06 	br	fecc <alt_up_pixel_buffer_dma_draw_hline+0x18c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
    fea0:	e13ff817 	ldw	r4,-32(fp)
    fea4:	e13ff817 	ldw	r4,-32(fp)
    fea8:	2105883a 	add	r2,r4,r4
    feac:	1007883a 	mov	r3,r2
    feb0:	e0bfff17 	ldw	r2,-4(fp)
    feb4:	1885883a 	add	r2,r3,r2
    feb8:	e0fff917 	ldw	r3,-28(fp)
    febc:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
    fec0:	e0bff817 	ldw	r2,-32(fp)
    fec4:	10800044 	addi	r2,r2,1
    fec8:	e0bff815 	stw	r2,-32(fp)
    fecc:	e0fffb17 	ldw	r3,-20(fp)
    fed0:	e13ff817 	ldw	r4,-32(fp)
    fed4:	193ff22e 	bgeu	r3,r4,fea0 <alt_up_pixel_buffer_dma_draw_hline+0x160>
    fed8:	00006906 	br	10080 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
    fedc:	e0bffc17 	ldw	r2,-16(fp)
    fee0:	e0bff815 	stw	r2,-32(fp)
    fee4:	00000c06 	br	ff18 <alt_up_pixel_buffer_dma_draw_hline+0x1d8>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
    fee8:	e0fff817 	ldw	r3,-32(fp)
    feec:	e0fff817 	ldw	r3,-32(fp)
    fef0:	18c5883a 	add	r2,r3,r3
    fef4:	1085883a 	add	r2,r2,r2
    fef8:	1007883a 	mov	r3,r2
    fefc:	e0bfff17 	ldw	r2,-4(fp)
    ff00:	1885883a 	add	r2,r3,r2
    ff04:	e0fff917 	ldw	r3,-28(fp)
    ff08:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
    ff0c:	e13ff817 	ldw	r4,-32(fp)
    ff10:	21000044 	addi	r4,r4,1
    ff14:	e13ff815 	stw	r4,-32(fp)
    ff18:	e0bffb17 	ldw	r2,-20(fp)
    ff1c:	e0fff817 	ldw	r3,-32(fp)
    ff20:	10fff12e 	bgeu	r2,r3,fee8 <alt_up_pixel_buffer_dma_draw_hline+0x1a8>
    ff24:	00005606 	br	10080 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    ff28:	e0bff317 	ldw	r2,-52(fp)
    ff2c:	10800e17 	ldw	r2,56(r2)
    ff30:	10800058 	cmpnei	r2,r2,1
    ff34:	1000151e 	bne	r2,zero,ff8c <alt_up_pixel_buffer_dma_draw_hline+0x24c>
			addr = addr + line_y * limit_x;
    ff38:	e13ffa17 	ldw	r4,-24(fp)
    ff3c:	e0fffe17 	ldw	r3,-8(fp)
    ff40:	20c5383a 	mul	r2,r4,r3
    ff44:	e13fff17 	ldw	r4,-4(fp)
    ff48:	2089883a 	add	r4,r4,r2
    ff4c:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
    ff50:	e0bffc17 	ldw	r2,-16(fp)
    ff54:	e0bff715 	stw	r2,-36(fp)
    ff58:	00000806 	br	ff7c <alt_up_pixel_buffer_dma_draw_hline+0x23c>
			{
				IOWR_8DIRECT(addr, x, local_color);
    ff5c:	e0ffff17 	ldw	r3,-4(fp)
    ff60:	e0bff717 	ldw	r2,-36(fp)
    ff64:	1885883a 	add	r2,r3,r2
    ff68:	e0fff917 	ldw	r3,-28(fp)
    ff6c:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
    ff70:	e0fff717 	ldw	r3,-36(fp)
    ff74:	18c00044 	addi	r3,r3,1
    ff78:	e0fff715 	stw	r3,-36(fp)
    ff7c:	e13ffb17 	ldw	r4,-20(fp)
    ff80:	e0bff717 	ldw	r2,-36(fp)
    ff84:	20bff52e 	bgeu	r4,r2,ff5c <alt_up_pixel_buffer_dma_draw_hline+0x21c>
    ff88:	00003d06 	br	10080 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    ff8c:	e0bff317 	ldw	r2,-52(fp)
    ff90:	10800e17 	ldw	r2,56(r2)
    ff94:	10800098 	cmpnei	r2,r2,2
    ff98:	10001c1e 	bne	r2,zero,1000c <alt_up_pixel_buffer_dma_draw_hline+0x2cc>
			limit_x = limit_x << 1;
    ff9c:	e0fffe17 	ldw	r3,-8(fp)
    ffa0:	e0fffe17 	ldw	r3,-8(fp)
    ffa4:	18c5883a 	add	r2,r3,r3
    ffa8:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
    ffac:	e13ffa17 	ldw	r4,-24(fp)
    ffb0:	e0fffe17 	ldw	r3,-8(fp)
    ffb4:	20c5383a 	mul	r2,r4,r3
    ffb8:	e13fff17 	ldw	r4,-4(fp)
    ffbc:	2089883a 	add	r4,r4,r2
    ffc0:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
    ffc4:	e0bffc17 	ldw	r2,-16(fp)
    ffc8:	e0bff715 	stw	r2,-36(fp)
    ffcc:	00000b06 	br	fffc <alt_up_pixel_buffer_dma_draw_hline+0x2bc>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
    ffd0:	e0fff717 	ldw	r3,-36(fp)
    ffd4:	e0fff717 	ldw	r3,-36(fp)
    ffd8:	18c5883a 	add	r2,r3,r3
    ffdc:	1007883a 	mov	r3,r2
    ffe0:	e0bfff17 	ldw	r2,-4(fp)
    ffe4:	1885883a 	add	r2,r3,r2
    ffe8:	e0fff917 	ldw	r3,-28(fp)
    ffec:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
    fff0:	e13ff717 	ldw	r4,-36(fp)
    fff4:	21000044 	addi	r4,r4,1
    fff8:	e13ff715 	stw	r4,-36(fp)
    fffc:	e0bffb17 	ldw	r2,-20(fp)
   10000:	e0fff717 	ldw	r3,-36(fp)
   10004:	10fff22e 	bgeu	r2,r3,ffd0 <alt_up_pixel_buffer_dma_draw_hline+0x290>
   10008:	00001d06 	br	10080 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
   1000c:	e13ffe17 	ldw	r4,-8(fp)
   10010:	e13ffe17 	ldw	r4,-8(fp)
   10014:	2105883a 	add	r2,r4,r4
   10018:	1085883a 	add	r2,r2,r2
   1001c:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
   10020:	e0fffa17 	ldw	r3,-24(fp)
   10024:	e13ffe17 	ldw	r4,-8(fp)
   10028:	1905383a 	mul	r2,r3,r4
   1002c:	e0ffff17 	ldw	r3,-4(fp)
   10030:	1887883a 	add	r3,r3,r2
   10034:	e0ffff15 	stw	r3,-4(fp)
			for (x = l_x; x <= r_x; x++)
   10038:	e13ffc17 	ldw	r4,-16(fp)
   1003c:	e13ff715 	stw	r4,-36(fp)
   10040:	00000c06 	br	10074 <alt_up_pixel_buffer_dma_draw_hline+0x334>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
   10044:	e0fff717 	ldw	r3,-36(fp)
   10048:	e0fff717 	ldw	r3,-36(fp)
   1004c:	18c5883a 	add	r2,r3,r3
   10050:	1085883a 	add	r2,r2,r2
   10054:	1007883a 	mov	r3,r2
   10058:	e0bfff17 	ldw	r2,-4(fp)
   1005c:	1885883a 	add	r2,r3,r2
   10060:	e0fff917 	ldw	r3,-28(fp)
   10064:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
   10068:	e13ff717 	ldw	r4,-36(fp)
   1006c:	21000044 	addi	r4,r4,1
   10070:	e13ff715 	stw	r4,-36(fp)
   10074:	e0bffb17 	ldw	r2,-20(fp)
   10078:	e0fff717 	ldw	r3,-36(fp)
   1007c:	10fff12e 	bgeu	r2,r3,10044 <alt_up_pixel_buffer_dma_draw_hline+0x304>
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
   10080:	e037883a 	mov	sp,fp
   10084:	df000017 	ldw	fp,0(sp)
   10088:	dec00104 	addi	sp,sp,4
   1008c:	f800283a 	ret

00010090 <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
   10090:	defff104 	addi	sp,sp,-60
   10094:	df000e15 	stw	fp,56(sp)
   10098:	df000e04 	addi	fp,sp,56
   1009c:	e13ff215 	stw	r4,-56(fp)
   100a0:	e17ff315 	stw	r5,-52(fp)
   100a4:	e1bff415 	stw	r6,-48(fp)
   100a8:	e1fff515 	stw	r7,-44(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
   100ac:	e0bff217 	ldw	r2,-56(fp)
   100b0:	10800f17 	ldw	r2,60(r2)
   100b4:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
   100b8:	e0bff217 	ldw	r2,-56(fp)
   100bc:	10801017 	ldw	r2,64(r2)
   100c0:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int line_x = x;
   100c4:	e0bff317 	ldw	r2,-52(fp)
   100c8:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int t_y = y0;
   100cc:	e0fff417 	ldw	r3,-48(fp)
   100d0:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int b_y = y1;
   100d4:	e13ff517 	ldw	r4,-44(fp)
   100d8:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
   100dc:	e0800117 	ldw	r2,4(fp)
   100e0:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
   100e4:	e0fffa17 	ldw	r3,-24(fp)
   100e8:	e13ffb17 	ldw	r4,-20(fp)
   100ec:	1900042e 	bgeu	r3,r4,10100 <alt_up_pixel_buffer_dma_draw_vline+0x70>
	{
		temp = t_y;
   100f0:	e0bffb17 	ldw	r2,-20(fp)
		t_y = b_y;
   100f4:	e0fffa17 	ldw	r3,-24(fp)
   100f8:	e0fffb15 	stw	r3,-20(fp)
		b_y = temp;
   100fc:	e0bffa15 	stw	r2,-24(fp)
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
   10100:	e13ffc17 	ldw	r4,-16(fp)
   10104:	e0bffe17 	ldw	r2,-8(fp)
   10108:	2080d12e 	bgeu	r4,r2,10450 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
   1010c:	e0fffb17 	ldw	r3,-20(fp)
   10110:	e13ffd17 	ldw	r4,-12(fp)
   10114:	19000136 	bltu	r3,r4,1011c <alt_up_pixel_buffer_dma_draw_vline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
   10118:	0000cd06 	br	10450 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
   1011c:	e0bffa17 	ldw	r2,-24(fp)
   10120:	e0fffd17 	ldw	r3,-12(fp)
   10124:	10c00336 	bltu	r2,r3,10134 <alt_up_pixel_buffer_dma_draw_vline+0xa4>
	{
		b_y = limit_y - 1;
   10128:	e13ffd17 	ldw	r4,-12(fp)
   1012c:	213fffc4 	addi	r4,r4,-1
   10130:	e13ffa15 	stw	r4,-24(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
   10134:	e0800217 	ldw	r2,8(fp)
   10138:	10800058 	cmpnei	r2,r2,1
   1013c:	1000041e 	bne	r2,zero,10150 <alt_up_pixel_buffer_dma_draw_vline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
   10140:	e0bff217 	ldw	r2,-56(fp)
   10144:	10800c17 	ldw	r2,48(r2)
   10148:	e0bfff15 	stw	r2,-4(fp)
   1014c:	00000306 	br	1015c <alt_up_pixel_buffer_dma_draw_vline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
   10150:	e0bff217 	ldw	r2,-56(fp)
   10154:	10800b17 	ldw	r2,44(r2)
   10158:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
   1015c:	e0bff217 	ldw	r2,-56(fp)
   10160:	10800d17 	ldw	r2,52(r2)
   10164:	1004c03a 	cmpne	r2,r2,zero
   10168:	1000571e 	bne	r2,zero,102c8 <alt_up_pixel_buffer_dma_draw_vline+0x238>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
   1016c:	e0bff217 	ldw	r2,-56(fp)
   10170:	10801317 	ldw	r2,76(r2)
   10174:	e0bff715 	stw	r2,-36(fp)
		addr = addr + (t_y << offset_y);
   10178:	e0bff717 	ldw	r2,-36(fp)
   1017c:	e0fffb17 	ldw	r3,-20(fp)
   10180:	1884983a 	sll	r2,r3,r2
   10184:	e13fff17 	ldw	r4,-4(fp)
   10188:	2089883a 	add	r4,r4,r2
   1018c:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   10190:	e0bff217 	ldw	r2,-56(fp)
   10194:	10800e17 	ldw	r2,56(r2)
   10198:	10800058 	cmpnei	r2,r2,1
   1019c:	1000151e 	bne	r2,zero,101f4 <alt_up_pixel_buffer_dma_draw_vline+0x164>
			for (y = t_y; y <= b_y; y++)
   101a0:	e0bffb17 	ldw	r2,-20(fp)
   101a4:	e0bff815 	stw	r2,-32(fp)
   101a8:	00000e06 	br	101e4 <alt_up_pixel_buffer_dma_draw_vline+0x154>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
   101ac:	e0ffff17 	ldw	r3,-4(fp)
   101b0:	e0bffc17 	ldw	r2,-16(fp)
   101b4:	1885883a 	add	r2,r3,r2
   101b8:	e0fff917 	ldw	r3,-28(fp)
   101bc:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
   101c0:	e0fff717 	ldw	r3,-36(fp)
   101c4:	00800044 	movi	r2,1
   101c8:	10c4983a 	sll	r2,r2,r3
   101cc:	e0ffff17 	ldw	r3,-4(fp)
   101d0:	1887883a 	add	r3,r3,r2
   101d4:	e0ffff15 	stw	r3,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
   101d8:	e13ff817 	ldw	r4,-32(fp)
   101dc:	21000044 	addi	r4,r4,1
   101e0:	e13ff815 	stw	r4,-32(fp)
   101e4:	e0bffa17 	ldw	r2,-24(fp)
   101e8:	e0fff817 	ldw	r3,-32(fp)
   101ec:	10ffef2e 	bgeu	r2,r3,101ac <alt_up_pixel_buffer_dma_draw_vline+0x11c>
   101f0:	00009706 	br	10450 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   101f4:	e0bff217 	ldw	r2,-56(fp)
   101f8:	10800e17 	ldw	r2,56(r2)
   101fc:	10800098 	cmpnei	r2,r2,2
   10200:	1000181e 	bne	r2,zero,10264 <alt_up_pixel_buffer_dma_draw_vline+0x1d4>
			for (y = t_y; y <= b_y; y++)
   10204:	e13ffb17 	ldw	r4,-20(fp)
   10208:	e13ff815 	stw	r4,-32(fp)
   1020c:	00001106 	br	10254 <alt_up_pixel_buffer_dma_draw_vline+0x1c4>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
   10210:	e0fffc17 	ldw	r3,-16(fp)
   10214:	e0fffc17 	ldw	r3,-16(fp)
   10218:	18c5883a 	add	r2,r3,r3
   1021c:	1007883a 	mov	r3,r2
   10220:	e0bfff17 	ldw	r2,-4(fp)
   10224:	1885883a 	add	r2,r3,r2
   10228:	e0fff917 	ldw	r3,-28(fp)
   1022c:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
   10230:	e0fff717 	ldw	r3,-36(fp)
   10234:	00800044 	movi	r2,1
   10238:	10c4983a 	sll	r2,r2,r3
   1023c:	e13fff17 	ldw	r4,-4(fp)
   10240:	2089883a 	add	r4,r4,r2
   10244:	e13fff15 	stw	r4,-4(fp)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
   10248:	e0bff817 	ldw	r2,-32(fp)
   1024c:	10800044 	addi	r2,r2,1
   10250:	e0bff815 	stw	r2,-32(fp)
   10254:	e0fffa17 	ldw	r3,-24(fp)
   10258:	e13ff817 	ldw	r4,-32(fp)
   1025c:	193fec2e 	bgeu	r3,r4,10210 <alt_up_pixel_buffer_dma_draw_vline+0x180>
   10260:	00007b06 	br	10450 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
   10264:	e0bffb17 	ldw	r2,-20(fp)
   10268:	e0bff815 	stw	r2,-32(fp)
   1026c:	00001206 	br	102b8 <alt_up_pixel_buffer_dma_draw_vline+0x228>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
   10270:	e0fffc17 	ldw	r3,-16(fp)
   10274:	e0fffc17 	ldw	r3,-16(fp)
   10278:	18c5883a 	add	r2,r3,r3
   1027c:	1085883a 	add	r2,r2,r2
   10280:	1007883a 	mov	r3,r2
   10284:	e0bfff17 	ldw	r2,-4(fp)
   10288:	1885883a 	add	r2,r3,r2
   1028c:	e0fff917 	ldw	r3,-28(fp)
   10290:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
   10294:	e0fff717 	ldw	r3,-36(fp)
   10298:	00800044 	movi	r2,1
   1029c:	10c4983a 	sll	r2,r2,r3
   102a0:	e13fff17 	ldw	r4,-4(fp)
   102a4:	2089883a 	add	r4,r4,r2
   102a8:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
   102ac:	e0bff817 	ldw	r2,-32(fp)
   102b0:	10800044 	addi	r2,r2,1
   102b4:	e0bff815 	stw	r2,-32(fp)
   102b8:	e0fffa17 	ldw	r3,-24(fp)
   102bc:	e13ff817 	ldw	r4,-32(fp)
   102c0:	193feb2e 	bgeu	r3,r4,10270 <alt_up_pixel_buffer_dma_draw_vline+0x1e0>
   102c4:	00006206 	br	10450 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   102c8:	e0bff217 	ldw	r2,-56(fp)
   102cc:	10800e17 	ldw	r2,56(r2)
   102d0:	10800058 	cmpnei	r2,r2,1
   102d4:	1000191e 	bne	r2,zero,1033c <alt_up_pixel_buffer_dma_draw_vline+0x2ac>
			addr = addr + t_y * limit_x;
   102d8:	e0fffb17 	ldw	r3,-20(fp)
   102dc:	e13ffe17 	ldw	r4,-8(fp)
   102e0:	1905383a 	mul	r2,r3,r4
   102e4:	e0ffff17 	ldw	r3,-4(fp)
   102e8:	1887883a 	add	r3,r3,r2
   102ec:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
   102f0:	e13ffb17 	ldw	r4,-20(fp)
   102f4:	e13ff615 	stw	r4,-40(fp)
   102f8:	00000c06 	br	1032c <alt_up_pixel_buffer_dma_draw_vline+0x29c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
   102fc:	e0ffff17 	ldw	r3,-4(fp)
   10300:	e0bffc17 	ldw	r2,-16(fp)
   10304:	1885883a 	add	r2,r3,r2
   10308:	e0fff917 	ldw	r3,-28(fp)
   1030c:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
   10310:	e0bfff17 	ldw	r2,-4(fp)
   10314:	e0fffe17 	ldw	r3,-8(fp)
   10318:	10c5883a 	add	r2,r2,r3
   1031c:	e0bfff15 	stw	r2,-4(fp)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   10320:	e13ff617 	ldw	r4,-40(fp)
   10324:	21000044 	addi	r4,r4,1
   10328:	e13ff615 	stw	r4,-40(fp)
   1032c:	e0bffa17 	ldw	r2,-24(fp)
   10330:	e0fff617 	ldw	r3,-40(fp)
   10334:	10fff12e 	bgeu	r2,r3,102fc <alt_up_pixel_buffer_dma_draw_vline+0x26c>
   10338:	00004506 	br	10450 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   1033c:	e0bff217 	ldw	r2,-56(fp)
   10340:	10800e17 	ldw	r2,56(r2)
   10344:	10800098 	cmpnei	r2,r2,2
   10348:	1000201e 	bne	r2,zero,103cc <alt_up_pixel_buffer_dma_draw_vline+0x33c>
			limit_x = limit_x << 1;
   1034c:	e13ffe17 	ldw	r4,-8(fp)
   10350:	e13ffe17 	ldw	r4,-8(fp)
   10354:	2105883a 	add	r2,r4,r4
   10358:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
   1035c:	e0fffb17 	ldw	r3,-20(fp)
   10360:	e13ffe17 	ldw	r4,-8(fp)
   10364:	1905383a 	mul	r2,r3,r4
   10368:	e0ffff17 	ldw	r3,-4(fp)
   1036c:	1887883a 	add	r3,r3,r2
   10370:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
   10374:	e13ffb17 	ldw	r4,-20(fp)
   10378:	e13ff615 	stw	r4,-40(fp)
   1037c:	00000f06 	br	103bc <alt_up_pixel_buffer_dma_draw_vline+0x32c>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
   10380:	e0fffc17 	ldw	r3,-16(fp)
   10384:	e0fffc17 	ldw	r3,-16(fp)
   10388:	18c5883a 	add	r2,r3,r3
   1038c:	1007883a 	mov	r3,r2
   10390:	e0bfff17 	ldw	r2,-4(fp)
   10394:	1885883a 	add	r2,r3,r2
   10398:	e0fff917 	ldw	r3,-28(fp)
   1039c:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
   103a0:	e13fff17 	ldw	r4,-4(fp)
   103a4:	e0bffe17 	ldw	r2,-8(fp)
   103a8:	2089883a 	add	r4,r4,r2
   103ac:	e13fff15 	stw	r4,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   103b0:	e0fff617 	ldw	r3,-40(fp)
   103b4:	18c00044 	addi	r3,r3,1
   103b8:	e0fff615 	stw	r3,-40(fp)
   103bc:	e13ffa17 	ldw	r4,-24(fp)
   103c0:	e0bff617 	ldw	r2,-40(fp)
   103c4:	20bfee2e 	bgeu	r4,r2,10380 <alt_up_pixel_buffer_dma_draw_vline+0x2f0>
   103c8:	00002106 	br	10450 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
   103cc:	e0fffe17 	ldw	r3,-8(fp)
   103d0:	e0fffe17 	ldw	r3,-8(fp)
   103d4:	18c5883a 	add	r2,r3,r3
   103d8:	1085883a 	add	r2,r2,r2
   103dc:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
   103e0:	e13ffb17 	ldw	r4,-20(fp)
   103e4:	e0fffe17 	ldw	r3,-8(fp)
   103e8:	20c5383a 	mul	r2,r4,r3
   103ec:	e13fff17 	ldw	r4,-4(fp)
   103f0:	2089883a 	add	r4,r4,r2
   103f4:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
   103f8:	e0bffb17 	ldw	r2,-20(fp)
   103fc:	e0bff615 	stw	r2,-40(fp)
   10400:	00001006 	br	10444 <alt_up_pixel_buffer_dma_draw_vline+0x3b4>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
   10404:	e0fffc17 	ldw	r3,-16(fp)
   10408:	e0fffc17 	ldw	r3,-16(fp)
   1040c:	18c5883a 	add	r2,r3,r3
   10410:	1085883a 	add	r2,r2,r2
   10414:	1007883a 	mov	r3,r2
   10418:	e0bfff17 	ldw	r2,-4(fp)
   1041c:	1885883a 	add	r2,r3,r2
   10420:	e0fff917 	ldw	r3,-28(fp)
   10424:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
   10428:	e13fff17 	ldw	r4,-4(fp)
   1042c:	e0bffe17 	ldw	r2,-8(fp)
   10430:	2089883a 	add	r4,r4,r2
   10434:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   10438:	e0fff617 	ldw	r3,-40(fp)
   1043c:	18c00044 	addi	r3,r3,1
   10440:	e0fff615 	stw	r3,-40(fp)
   10444:	e13ffa17 	ldw	r4,-24(fp)
   10448:	e0bff617 	ldw	r2,-40(fp)
   1044c:	20bfed2e 	bgeu	r4,r2,10404 <alt_up_pixel_buffer_dma_draw_vline+0x374>
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
   10450:	e037883a 	mov	sp,fp
   10454:	df000017 	ldw	fp,0(sp)
   10458:	dec00104 	addi	sp,sp,4
   1045c:	f800283a 	ret

00010460 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
   10460:	defff804 	addi	sp,sp,-32
   10464:	dfc00715 	stw	ra,28(sp)
   10468:	df000615 	stw	fp,24(sp)
   1046c:	df000604 	addi	fp,sp,24
   10470:	e13ffc15 	stw	r4,-16(fp)
   10474:	e17ffd15 	stw	r5,-12(fp)
   10478:	e1bffe15 	stw	r6,-8(fp)
   1047c:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
   10480:	e0800317 	ldw	r2,12(fp)
   10484:	d8800015 	stw	r2,0(sp)
   10488:	e0800417 	ldw	r2,16(fp)
   1048c:	d8800115 	stw	r2,4(sp)
   10490:	e13ffc17 	ldw	r4,-16(fp)
   10494:	e17ffd17 	ldw	r5,-12(fp)
   10498:	e1bfff17 	ldw	r6,-4(fp)
   1049c:	e1fffe17 	ldw	r7,-8(fp)
   104a0:	000fd400 	call	fd40 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
   104a4:	e0800317 	ldw	r2,12(fp)
   104a8:	d8800015 	stw	r2,0(sp)
   104ac:	e0800417 	ldw	r2,16(fp)
   104b0:	d8800115 	stw	r2,4(sp)
   104b4:	e13ffc17 	ldw	r4,-16(fp)
   104b8:	e17ffd17 	ldw	r5,-12(fp)
   104bc:	e1bfff17 	ldw	r6,-4(fp)
   104c0:	e1c00217 	ldw	r7,8(fp)
   104c4:	000fd400 	call	fd40 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
   104c8:	e0800317 	ldw	r2,12(fp)
   104cc:	d8800015 	stw	r2,0(sp)
   104d0:	e0800417 	ldw	r2,16(fp)
   104d4:	d8800115 	stw	r2,4(sp)
   104d8:	e13ffc17 	ldw	r4,-16(fp)
   104dc:	e17ffd17 	ldw	r5,-12(fp)
   104e0:	e1bffe17 	ldw	r6,-8(fp)
   104e4:	e1c00217 	ldw	r7,8(fp)
   104e8:	00100900 	call	10090 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
   104ec:	e0800317 	ldw	r2,12(fp)
   104f0:	d8800015 	stw	r2,0(sp)
   104f4:	e0800417 	ldw	r2,16(fp)
   104f8:	d8800115 	stw	r2,4(sp)
   104fc:	e13ffc17 	ldw	r4,-16(fp)
   10500:	e17fff17 	ldw	r5,-4(fp)
   10504:	e1bffe17 	ldw	r6,-8(fp)
   10508:	e1c00217 	ldw	r7,8(fp)
   1050c:	00100900 	call	10090 <alt_up_pixel_buffer_dma_draw_vline>
}
   10510:	e037883a 	mov	sp,fp
   10514:	dfc00117 	ldw	ra,4(sp)
   10518:	df000017 	ldw	fp,0(sp)
   1051c:	dec00204 	addi	sp,sp,8
   10520:	f800283a 	ret

00010524 <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
   10524:	defffb04 	addi	sp,sp,-20
   10528:	df000415 	stw	fp,16(sp)
   1052c:	df000404 	addi	fp,sp,16
   10530:	e13ffc15 	stw	r4,-16(fp)
   10534:	e17ffd15 	stw	r5,-12(fp)
   10538:	e1bffe15 	stw	r6,-8(fp)
   1053c:	e1ffff15 	stw	r7,-4(fp)
	if (mode == 0)
   10540:	e0c00217 	ldw	r3,8(fp)
   10544:	1804c03a 	cmpne	r2,r3,zero
   10548:	10000b1e 	bne	r2,zero,10578 <helper_plot_pixel+0x54>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
   1054c:	e13ffd17 	ldw	r4,-12(fp)
   10550:	e0ffff17 	ldw	r3,-4(fp)
   10554:	20c5383a 	mul	r2,r4,r3
   10558:	e13ffe17 	ldw	r4,-8(fp)
   1055c:	1105883a 	add	r2,r2,r4
   10560:	1007883a 	mov	r3,r2
   10564:	e0bffc17 	ldw	r2,-16(fp)
   10568:	1885883a 	add	r2,r3,r2
   1056c:	e0c00117 	ldw	r3,4(fp)
   10570:	10c00025 	stbio	r3,0(r2)
   10574:	00001b06 	br	105e4 <helper_plot_pixel+0xc0>
	else if (mode == 1)
   10578:	e1000217 	ldw	r4,8(fp)
   1057c:	20800058 	cmpnei	r2,r4,1
   10580:	10000c1e 	bne	r2,zero,105b4 <helper_plot_pixel+0x90>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
   10584:	e0fffd17 	ldw	r3,-12(fp)
   10588:	e13fff17 	ldw	r4,-4(fp)
   1058c:	1905383a 	mul	r2,r3,r4
   10590:	e0fffe17 	ldw	r3,-8(fp)
   10594:	10c5883a 	add	r2,r2,r3
   10598:	1085883a 	add	r2,r2,r2
   1059c:	1007883a 	mov	r3,r2
   105a0:	e0bffc17 	ldw	r2,-16(fp)
   105a4:	1885883a 	add	r2,r3,r2
   105a8:	e1000117 	ldw	r4,4(fp)
   105ac:	1100002d 	sthio	r4,0(r2)
   105b0:	00000c06 	br	105e4 <helper_plot_pixel+0xc0>
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
   105b4:	e0fffd17 	ldw	r3,-12(fp)
   105b8:	e13fff17 	ldw	r4,-4(fp)
   105bc:	1905383a 	mul	r2,r3,r4
   105c0:	e0fffe17 	ldw	r3,-8(fp)
   105c4:	10c5883a 	add	r2,r2,r3
   105c8:	1085883a 	add	r2,r2,r2
   105cc:	1085883a 	add	r2,r2,r2
   105d0:	1007883a 	mov	r3,r2
   105d4:	e0bffc17 	ldw	r2,-16(fp)
   105d8:	1885883a 	add	r2,r3,r2
   105dc:	e1000117 	ldw	r4,4(fp)
   105e0:	11000035 	stwio	r4,0(r2)
}
   105e4:	e037883a 	mov	sp,fp
   105e8:	df000017 	ldw	fp,0(sp)
   105ec:	dec00104 	addi	sp,sp,4
   105f0:	f800283a 	ret

000105f4 <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
   105f4:	deffe404 	addi	sp,sp,-112
   105f8:	dfc01b15 	stw	ra,108(sp)
   105fc:	df001a15 	stw	fp,104(sp)
   10600:	df001a04 	addi	fp,sp,104
   10604:	e13fe815 	stw	r4,-96(fp)
   10608:	e17fe915 	stw	r5,-92(fp)
   1060c:	e1bfea15 	stw	r6,-88(fp)
   10610:	e1ffeb15 	stw	r7,-84(fp)
	register int x_0 = x0;
   10614:	e0bfe917 	ldw	r2,-92(fp)
   10618:	e0bffa15 	stw	r2,-24(fp)
	register int y_0 = y0;
   1061c:	e0ffea17 	ldw	r3,-88(fp)
   10620:	e0fff915 	stw	r3,-28(fp)
	register int x_1 = x1;
   10624:	e13feb17 	ldw	r4,-84(fp)
   10628:	e13ff815 	stw	r4,-32(fp)
	register int y_1 = y1;
   1062c:	e0800217 	ldw	r2,8(fp)
   10630:	e0bff715 	stw	r2,-36(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
   10634:	e0fff717 	ldw	r3,-36(fp)
   10638:	e13ff917 	ldw	r4,-28(fp)
   1063c:	1905c83a 	sub	r2,r3,r4
   10640:	e0bfff15 	stw	r2,-4(fp)
   10644:	e0ffff17 	ldw	r3,-4(fp)
   10648:	1804403a 	cmpge	r2,r3,zero
   1064c:	1000031e 	bne	r2,zero,1065c <alt_up_pixel_buffer_dma_draw_line+0x68>
   10650:	e13fff17 	ldw	r4,-4(fp)
   10654:	0109c83a 	sub	r4,zero,r4
   10658:	e13fff15 	stw	r4,-4(fp)
   1065c:	e0fff817 	ldw	r3,-32(fp)
   10660:	e13ffa17 	ldw	r4,-24(fp)
   10664:	1905c83a 	sub	r2,r3,r4
   10668:	e0bffe15 	stw	r2,-8(fp)
   1066c:	e0fffe17 	ldw	r3,-8(fp)
   10670:	1804403a 	cmpge	r2,r3,zero
   10674:	1000031e 	bne	r2,zero,10684 <alt_up_pixel_buffer_dma_draw_line+0x90>
   10678:	e13ffe17 	ldw	r4,-8(fp)
   1067c:	0109c83a 	sub	r4,zero,r4
   10680:	e13ffe15 	stw	r4,-8(fp)
   10684:	e0fffe17 	ldw	r3,-8(fp)
   10688:	e13fff17 	ldw	r4,-4(fp)
   1068c:	1904803a 	cmplt	r2,r3,r4
   10690:	e0bff605 	stb	r2,-40(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
   10694:	e0bfe817 	ldw	r2,-96(fp)
   10698:	10800e17 	ldw	r2,56(r2)
   1069c:	10800060 	cmpeqi	r2,r2,1
   106a0:	10000c1e 	bne	r2,zero,106d4 <alt_up_pixel_buffer_dma_draw_line+0xe0>
   106a4:	e0bfe817 	ldw	r2,-96(fp)
   106a8:	10800e17 	ldw	r2,56(r2)
   106ac:	10800098 	cmpnei	r2,r2,2
   106b0:	1000031e 	bne	r2,zero,106c0 <alt_up_pixel_buffer_dma_draw_line+0xcc>
   106b4:	00800044 	movi	r2,1
   106b8:	e0bffc15 	stw	r2,-16(fp)
   106bc:	00000206 	br	106c8 <alt_up_pixel_buffer_dma_draw_line+0xd4>
   106c0:	00c00084 	movi	r3,2
   106c4:	e0fffc15 	stw	r3,-16(fp)
   106c8:	e13ffc17 	ldw	r4,-16(fp)
   106cc:	e13ffd15 	stw	r4,-12(fp)
   106d0:	00000106 	br	106d8 <alt_up_pixel_buffer_dma_draw_line+0xe4>
   106d4:	e03ffd15 	stw	zero,-12(fp)
   106d8:	e0bffd17 	ldw	r2,-12(fp)
   106dc:	e0bfef15 	stw	r2,-68(fp)
	register int line_color = color;
   106e0:	e0c00317 	ldw	r3,12(fp)
   106e4:	e0ffee15 	stw	r3,-72(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
   106e8:	e0bfe817 	ldw	r2,-96(fp)
   106ec:	10800d17 	ldw	r2,52(r2)
   106f0:	1004c03a 	cmpne	r2,r2,zero
   106f4:	1000091e 	bne	r2,zero,1071c <alt_up_pixel_buffer_dma_draw_line+0x128>
   106f8:	e0bfe817 	ldw	r2,-96(fp)
   106fc:	10c01317 	ldw	r3,76(r2)
   10700:	e0bfef17 	ldw	r2,-68(fp)
   10704:	1885c83a 	sub	r2,r3,r2
   10708:	1007883a 	mov	r3,r2
   1070c:	00800044 	movi	r2,1
   10710:	10c4983a 	sll	r2,r2,r3
   10714:	e0bffb15 	stw	r2,-20(fp)
   10718:	00000306 	br	10728 <alt_up_pixel_buffer_dma_draw_line+0x134>
   1071c:	e0bfe817 	ldw	r2,-96(fp)
   10720:	10800f17 	ldw	r2,60(r2)
   10724:	e0bffb15 	stw	r2,-20(fp)
   10728:	e13ffb17 	ldw	r4,-20(fp)
   1072c:	e13fec15 	stw	r4,-80(fp)

	if (backbuffer == 1)
   10730:	e0800417 	ldw	r2,16(fp)
   10734:	10800058 	cmpnei	r2,r2,1
   10738:	1000041e 	bne	r2,zero,1074c <alt_up_pixel_buffer_dma_draw_line+0x158>
		buffer_start = pixel_buffer->back_buffer_start_address;
   1073c:	e0bfe817 	ldw	r2,-96(fp)
   10740:	10800c17 	ldw	r2,48(r2)
   10744:	e0bfed15 	stw	r2,-76(fp)
   10748:	00000306 	br	10758 <alt_up_pixel_buffer_dma_draw_line+0x164>
	else
		buffer_start = pixel_buffer->buffer_start_address;
   1074c:	e0bfe817 	ldw	r2,-96(fp)
   10750:	10800b17 	ldw	r2,44(r2)
   10754:	e0bfed15 	stw	r2,-76(fp)

	/* Preprocessing inputs */
	if (steep > 0) {
   10758:	e0fff603 	ldbu	r3,-40(fp)
   1075c:	18803fcc 	andi	r2,r3,255
   10760:	1080201c 	xori	r2,r2,128
   10764:	10bfe004 	addi	r2,r2,-128
   10768:	10800050 	cmplti	r2,r2,1
   1076c:	10000c1e 	bne	r2,zero,107a0 <alt_up_pixel_buffer_dma_draw_line+0x1ac>
		// Swap x_0 and y_0
		error = x_0;
   10770:	e13ffa17 	ldw	r4,-24(fp)
   10774:	e13ff315 	stw	r4,-52(fp)
		x_0 = y_0;
   10778:	e0bff917 	ldw	r2,-28(fp)
   1077c:	e0bffa15 	stw	r2,-24(fp)
		y_0 = error;
   10780:	e0fff317 	ldw	r3,-52(fp)
   10784:	e0fff915 	stw	r3,-28(fp)
		// Swap x_1 and y_1
		error = x_1;
   10788:	e13ff817 	ldw	r4,-32(fp)
   1078c:	e13ff315 	stw	r4,-52(fp)
		x_1 = y_1;
   10790:	e0bff717 	ldw	r2,-36(fp)
   10794:	e0bff815 	stw	r2,-32(fp)
		y_1 = error;
   10798:	e0fff317 	ldw	r3,-52(fp)
   1079c:	e0fff715 	stw	r3,-36(fp)
	}
	if (x_0 > x_1) {
   107a0:	e13ff817 	ldw	r4,-32(fp)
   107a4:	e0bffa17 	ldw	r2,-24(fp)
   107a8:	20800c0e 	bge	r4,r2,107dc <alt_up_pixel_buffer_dma_draw_line+0x1e8>
		// Swap x_0 and x_1
		error = x_0;
   107ac:	e0fffa17 	ldw	r3,-24(fp)
   107b0:	e0fff315 	stw	r3,-52(fp)
		x_0 = x_1;
   107b4:	e13ff817 	ldw	r4,-32(fp)
   107b8:	e13ffa15 	stw	r4,-24(fp)
		x_1 = error;
   107bc:	e0bff317 	ldw	r2,-52(fp)
   107c0:	e0bff815 	stw	r2,-32(fp)
		// Swap y_0 and y_1
		error = y_0;
   107c4:	e0fff917 	ldw	r3,-28(fp)
   107c8:	e0fff315 	stw	r3,-52(fp)
		y_0 = y_1;
   107cc:	e13ff717 	ldw	r4,-36(fp)
   107d0:	e13ff915 	stw	r4,-28(fp)
		y_1 = error;
   107d4:	e0bff317 	ldw	r2,-52(fp)
   107d8:	e0bff715 	stw	r2,-36(fp)
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
   107dc:	e0fff817 	ldw	r3,-32(fp)
   107e0:	e13ffa17 	ldw	r4,-24(fp)
   107e4:	1907c83a 	sub	r3,r3,r4
   107e8:	e0fff515 	stw	r3,-44(fp)
	deltay = ABS(y_1 - y_0);
   107ec:	e0fff717 	ldw	r3,-36(fp)
   107f0:	e13ff917 	ldw	r4,-28(fp)
   107f4:	1905c83a 	sub	r2,r3,r4
   107f8:	e0bff415 	stw	r2,-48(fp)
   107fc:	e0fff417 	ldw	r3,-48(fp)
   10800:	1804403a 	cmpge	r2,r3,zero
   10804:	1000031e 	bne	r2,zero,10814 <alt_up_pixel_buffer_dma_draw_line+0x220>
   10808:	e13ff417 	ldw	r4,-48(fp)
   1080c:	0109c83a 	sub	r4,zero,r4
   10810:	e13ff415 	stw	r4,-48(fp)
	error = -(deltax / 2); 
   10814:	e0fff517 	ldw	r3,-44(fp)
   10818:	1804d7fa 	srli	r2,r3,31
   1081c:	e13ff517 	ldw	r4,-44(fp)
   10820:	1105883a 	add	r2,r2,r4
   10824:	1005d07a 	srai	r2,r2,1
   10828:	0085c83a 	sub	r2,zero,r2
   1082c:	e0bff315 	stw	r2,-52(fp)
	y = y_0;
   10830:	e0bff917 	ldw	r2,-28(fp)
   10834:	e0bff015 	stw	r2,-64(fp)
	if (y_0 < y_1)
   10838:	e0fff917 	ldw	r3,-28(fp)
   1083c:	e13ff717 	ldw	r4,-36(fp)
   10840:	1900030e 	bge	r3,r4,10850 <alt_up_pixel_buffer_dma_draw_line+0x25c>
		ystep = 1;
   10844:	00800044 	movi	r2,1
   10848:	e0bff215 	stw	r2,-56(fp)
   1084c:	00000206 	br	10858 <alt_up_pixel_buffer_dma_draw_line+0x264>
	else
		ystep = -1;
   10850:	00ffffc4 	movi	r3,-1
   10854:	e0fff215 	stw	r3,-56(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
   10858:	e13ff603 	ldbu	r4,-40(fp)
   1085c:	20803fcc 	andi	r2,r4,255
   10860:	1080201c 	xori	r2,r2,128
   10864:	10bfe004 	addi	r2,r2,-128
   10868:	10800058 	cmpnei	r2,r2,1
   1086c:	1000221e 	bne	r2,zero,108f8 <alt_up_pixel_buffer_dma_draw_line+0x304>
	{
		for (x=x_0; x <= x_1; x++) {
   10870:	e0bffa17 	ldw	r2,-24(fp)
   10874:	e0bff115 	stw	r2,-60(fp)
   10878:	00001b06 	br	108e8 <alt_up_pixel_buffer_dma_draw_line+0x2f4>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
   1087c:	e0ffee17 	ldw	r3,-72(fp)
   10880:	d8c00015 	stw	r3,0(sp)
   10884:	e13fef17 	ldw	r4,-68(fp)
   10888:	d9000115 	stw	r4,4(sp)
   1088c:	e13fed17 	ldw	r4,-76(fp)
   10890:	e17fec17 	ldw	r5,-80(fp)
   10894:	e1bff017 	ldw	r6,-64(fp)
   10898:	e1fff117 	ldw	r7,-60(fp)
   1089c:	00105240 	call	10524 <helper_plot_pixel>
			error = error + deltay;
   108a0:	e0bff317 	ldw	r2,-52(fp)
   108a4:	e0fff417 	ldw	r3,-48(fp)
   108a8:	10c5883a 	add	r2,r2,r3
   108ac:	e0bff315 	stw	r2,-52(fp)
			if (error > 0) {
   108b0:	e13ff317 	ldw	r4,-52(fp)
   108b4:	20800050 	cmplti	r2,r4,1
   108b8:	1000081e 	bne	r2,zero,108dc <alt_up_pixel_buffer_dma_draw_line+0x2e8>
				y = y + ystep;
   108bc:	e0bff017 	ldw	r2,-64(fp)
   108c0:	e0fff217 	ldw	r3,-56(fp)
   108c4:	10c5883a 	add	r2,r2,r3
   108c8:	e0bff015 	stw	r2,-64(fp)
				error = error - deltax;
   108cc:	e13ff317 	ldw	r4,-52(fp)
   108d0:	e0bff517 	ldw	r2,-44(fp)
   108d4:	2089c83a 	sub	r4,r4,r2
   108d8:	e13ff315 	stw	r4,-52(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
   108dc:	e0fff117 	ldw	r3,-60(fp)
   108e0:	18c00044 	addi	r3,r3,1
   108e4:	e0fff115 	stw	r3,-60(fp)
   108e8:	e13ff817 	ldw	r4,-32(fp)
   108ec:	e0bff117 	ldw	r2,-60(fp)
   108f0:	20bfe20e 	bge	r4,r2,1087c <alt_up_pixel_buffer_dma_draw_line+0x288>
   108f4:	00002106 	br	1097c <alt_up_pixel_buffer_dma_draw_line+0x388>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
   108f8:	e0fffa17 	ldw	r3,-24(fp)
   108fc:	e0fff115 	stw	r3,-60(fp)
   10900:	00001b06 	br	10970 <alt_up_pixel_buffer_dma_draw_line+0x37c>
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
   10904:	e13fee17 	ldw	r4,-72(fp)
   10908:	d9000015 	stw	r4,0(sp)
   1090c:	e0bfef17 	ldw	r2,-68(fp)
   10910:	d8800115 	stw	r2,4(sp)
   10914:	e13fed17 	ldw	r4,-76(fp)
   10918:	e17fec17 	ldw	r5,-80(fp)
   1091c:	e1bff117 	ldw	r6,-60(fp)
   10920:	e1fff017 	ldw	r7,-64(fp)
   10924:	00105240 	call	10524 <helper_plot_pixel>
			error = error + deltay;
   10928:	e0fff317 	ldw	r3,-52(fp)
   1092c:	e13ff417 	ldw	r4,-48(fp)
   10930:	1907883a 	add	r3,r3,r4
   10934:	e0fff315 	stw	r3,-52(fp)
			if (error > 0) {
   10938:	e0fff317 	ldw	r3,-52(fp)
   1093c:	18800050 	cmplti	r2,r3,1
   10940:	1000081e 	bne	r2,zero,10964 <alt_up_pixel_buffer_dma_draw_line+0x370>
				y = y + ystep;
   10944:	e13ff017 	ldw	r4,-64(fp)
   10948:	e0bff217 	ldw	r2,-56(fp)
   1094c:	2089883a 	add	r4,r4,r2
   10950:	e13ff015 	stw	r4,-64(fp)
				error = error - deltax;
   10954:	e0fff317 	ldw	r3,-52(fp)
   10958:	e13ff517 	ldw	r4,-44(fp)
   1095c:	1907c83a 	sub	r3,r3,r4
   10960:	e0fff315 	stw	r3,-52(fp)
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
   10964:	e0bff117 	ldw	r2,-60(fp)
   10968:	10800044 	addi	r2,r2,1
   1096c:	e0bff115 	stw	r2,-60(fp)
   10970:	e0fff817 	ldw	r3,-32(fp)
   10974:	e13ff117 	ldw	r4,-60(fp)
   10978:	193fe20e 	bge	r3,r4,10904 <alt_up_pixel_buffer_dma_draw_line+0x310>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
   1097c:	e037883a 	mov	sp,fp
   10980:	dfc00117 	ldw	ra,4(sp)
   10984:	df000017 	ldw	fp,0(sp)
   10988:	dec00204 	addi	sp,sp,8
   1098c:	f800283a 	ret

00010990 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   10990:	defff404 	addi	sp,sp,-48
   10994:	df000b15 	stw	fp,44(sp)
   10998:	df000b04 	addi	fp,sp,44
   1099c:	e13ffb15 	stw	r4,-20(fp)
   109a0:	e17ffc15 	stw	r5,-16(fp)
   109a4:	e1bffd15 	stw	r6,-12(fp)
   109a8:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   109ac:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   109b0:	00800074 	movhi	r2,1
   109b4:	10981c04 	addi	r2,r2,24688
   109b8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   109bc:	1005003a 	cmpeq	r2,r2,zero
   109c0:	1000411e 	bne	r2,zero,10ac8 <alt_alarm_start+0x138>
  {
    if (alarm)
   109c4:	e0bffb17 	ldw	r2,-20(fp)
   109c8:	1005003a 	cmpeq	r2,r2,zero
   109cc:	10003b1e 	bne	r2,zero,10abc <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   109d0:	e0fffb17 	ldw	r3,-20(fp)
   109d4:	e0bffd17 	ldw	r2,-12(fp)
   109d8:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   109dc:	e0fffb17 	ldw	r3,-20(fp)
   109e0:	e0bffe17 	ldw	r2,-8(fp)
   109e4:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   109e8:	0005303a 	rdctl	r2,status
   109ec:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   109f0:	e0fff817 	ldw	r3,-32(fp)
   109f4:	00bfff84 	movi	r2,-2
   109f8:	1884703a 	and	r2,r3,r2
   109fc:	1001703a 	wrctl	status,r2
  
  return context;
   10a00:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   10a04:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   10a08:	00800074 	movhi	r2,1
   10a0c:	10981d04 	addi	r2,r2,24692
   10a10:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   10a14:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   10a18:	e0fffc17 	ldw	r3,-16(fp)
   10a1c:	e0bff917 	ldw	r2,-28(fp)
   10a20:	1885883a 	add	r2,r3,r2
   10a24:	10c00044 	addi	r3,r2,1
   10a28:	e0bffb17 	ldw	r2,-20(fp)
   10a2c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   10a30:	e0bffb17 	ldw	r2,-20(fp)
   10a34:	10c00217 	ldw	r3,8(r2)
   10a38:	e0bff917 	ldw	r2,-28(fp)
   10a3c:	1880042e 	bgeu	r3,r2,10a50 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   10a40:	e0fffb17 	ldw	r3,-20(fp)
   10a44:	00800044 	movi	r2,1
   10a48:	18800405 	stb	r2,16(r3)
   10a4c:	00000206 	br	10a58 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   10a50:	e0bffb17 	ldw	r2,-20(fp)
   10a54:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   10a58:	e0fffb17 	ldw	r3,-20(fp)
   10a5c:	00800074 	movhi	r2,1
   10a60:	10908604 	addi	r2,r2,16920
   10a64:	e0bff615 	stw	r2,-40(fp)
   10a68:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10a6c:	e0fff717 	ldw	r3,-36(fp)
   10a70:	e0bff617 	ldw	r2,-40(fp)
   10a74:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   10a78:	e0bff617 	ldw	r2,-40(fp)
   10a7c:	10c00017 	ldw	r3,0(r2)
   10a80:	e0bff717 	ldw	r2,-36(fp)
   10a84:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   10a88:	e0bff617 	ldw	r2,-40(fp)
   10a8c:	10c00017 	ldw	r3,0(r2)
   10a90:	e0bff717 	ldw	r2,-36(fp)
   10a94:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   10a98:	e0fff617 	ldw	r3,-40(fp)
   10a9c:	e0bff717 	ldw	r2,-36(fp)
   10aa0:	18800015 	stw	r2,0(r3)
   10aa4:	e0bffa17 	ldw	r2,-24(fp)
   10aa8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10aac:	e0bff517 	ldw	r2,-44(fp)
   10ab0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   10ab4:	e03fff15 	stw	zero,-4(fp)
   10ab8:	00000506 	br	10ad0 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   10abc:	00bffa84 	movi	r2,-22
   10ac0:	e0bfff15 	stw	r2,-4(fp)
   10ac4:	00000206 	br	10ad0 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   10ac8:	00bfde84 	movi	r2,-134
   10acc:	e0bfff15 	stw	r2,-4(fp)
   10ad0:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   10ad4:	e037883a 	mov	sp,fp
   10ad8:	df000017 	ldw	fp,0(sp)
   10adc:	dec00104 	addi	sp,sp,4
   10ae0:	f800283a 	ret

00010ae4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   10ae4:	deffff04 	addi	sp,sp,-4
   10ae8:	df000015 	stw	fp,0(sp)
   10aec:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   10af0:	e037883a 	mov	sp,fp
   10af4:	df000017 	ldw	fp,0(sp)
   10af8:	dec00104 	addi	sp,sp,4
   10afc:	f800283a 	ret

00010b00 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   10b00:	defff904 	addi	sp,sp,-28
   10b04:	dfc00615 	stw	ra,24(sp)
   10b08:	df000515 	stw	fp,20(sp)
   10b0c:	df000504 	addi	fp,sp,20
   10b10:	e13ffd15 	stw	r4,-12(fp)
   10b14:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   10b18:	e0bffd17 	ldw	r2,-12(fp)
   10b1c:	1005003a 	cmpeq	r2,r2,zero
   10b20:	1000041e 	bne	r2,zero,10b34 <alt_dev_llist_insert+0x34>
   10b24:	e0bffd17 	ldw	r2,-12(fp)
   10b28:	10800217 	ldw	r2,8(r2)
   10b2c:	1004c03a 	cmpne	r2,r2,zero
   10b30:	1000071e 	bne	r2,zero,10b50 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   10b34:	0010bb40 	call	10bb4 <alt_get_errno>
   10b38:	1007883a 	mov	r3,r2
   10b3c:	00800584 	movi	r2,22
   10b40:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   10b44:	00bffa84 	movi	r2,-22
   10b48:	e0bfff15 	stw	r2,-4(fp)
   10b4c:	00001306 	br	10b9c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   10b50:	e0fffd17 	ldw	r3,-12(fp)
   10b54:	e0bffe17 	ldw	r2,-8(fp)
   10b58:	e0bffb15 	stw	r2,-20(fp)
   10b5c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10b60:	e0fffc17 	ldw	r3,-16(fp)
   10b64:	e0bffb17 	ldw	r2,-20(fp)
   10b68:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   10b6c:	e0bffb17 	ldw	r2,-20(fp)
   10b70:	10c00017 	ldw	r3,0(r2)
   10b74:	e0bffc17 	ldw	r2,-16(fp)
   10b78:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   10b7c:	e0bffb17 	ldw	r2,-20(fp)
   10b80:	10c00017 	ldw	r3,0(r2)
   10b84:	e0bffc17 	ldw	r2,-16(fp)
   10b88:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   10b8c:	e0fffb17 	ldw	r3,-20(fp)
   10b90:	e0bffc17 	ldw	r2,-16(fp)
   10b94:	18800015 	stw	r2,0(r3)

  return 0;  
   10b98:	e03fff15 	stw	zero,-4(fp)
   10b9c:	e0bfff17 	ldw	r2,-4(fp)
}
   10ba0:	e037883a 	mov	sp,fp
   10ba4:	dfc00117 	ldw	ra,4(sp)
   10ba8:	df000017 	ldw	fp,0(sp)
   10bac:	dec00204 	addi	sp,sp,8
   10bb0:	f800283a 	ret

00010bb4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10bb4:	defffd04 	addi	sp,sp,-12
   10bb8:	dfc00215 	stw	ra,8(sp)
   10bbc:	df000115 	stw	fp,4(sp)
   10bc0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   10bc4:	00800074 	movhi	r2,1
   10bc8:	10908304 	addi	r2,r2,16908
   10bcc:	10800017 	ldw	r2,0(r2)
   10bd0:	1005003a 	cmpeq	r2,r2,zero
   10bd4:	1000061e 	bne	r2,zero,10bf0 <alt_get_errno+0x3c>
   10bd8:	00800074 	movhi	r2,1
   10bdc:	10908304 	addi	r2,r2,16908
   10be0:	10800017 	ldw	r2,0(r2)
   10be4:	103ee83a 	callr	r2
   10be8:	e0bfff15 	stw	r2,-4(fp)
   10bec:	00000306 	br	10bfc <alt_get_errno+0x48>
   10bf0:	00800074 	movhi	r2,1
   10bf4:	10981704 	addi	r2,r2,24668
   10bf8:	e0bfff15 	stw	r2,-4(fp)
   10bfc:	e0bfff17 	ldw	r2,-4(fp)
}
   10c00:	e037883a 	mov	sp,fp
   10c04:	dfc00117 	ldw	ra,4(sp)
   10c08:	df000017 	ldw	fp,0(sp)
   10c0c:	dec00204 	addi	sp,sp,8
   10c10:	f800283a 	ret

00010c14 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   10c14:	defffd04 	addi	sp,sp,-12
   10c18:	dfc00215 	stw	ra,8(sp)
   10c1c:	df000115 	stw	fp,4(sp)
   10c20:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   10c24:	00bfff04 	movi	r2,-4
   10c28:	00c00074 	movhi	r3,1
   10c2c:	18c6cd04 	addi	r3,r3,6964
   10c30:	1885883a 	add	r2,r3,r2
   10c34:	e0bfff15 	stw	r2,-4(fp)
   10c38:	00000606 	br	10c54 <_do_ctors+0x40>
        (*ctor) (); 
   10c3c:	e0bfff17 	ldw	r2,-4(fp)
   10c40:	10800017 	ldw	r2,0(r2)
   10c44:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   10c48:	e0bfff17 	ldw	r2,-4(fp)
   10c4c:	10bfff04 	addi	r2,r2,-4
   10c50:	e0bfff15 	stw	r2,-4(fp)
   10c54:	e0ffff17 	ldw	r3,-4(fp)
   10c58:	00800074 	movhi	r2,1
   10c5c:	1086cc04 	addi	r2,r2,6960
   10c60:	18bff62e 	bgeu	r3,r2,10c3c <_do_ctors+0x28>
        (*ctor) (); 
}
   10c64:	e037883a 	mov	sp,fp
   10c68:	dfc00117 	ldw	ra,4(sp)
   10c6c:	df000017 	ldw	fp,0(sp)
   10c70:	dec00204 	addi	sp,sp,8
   10c74:	f800283a 	ret

00010c78 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   10c78:	defffd04 	addi	sp,sp,-12
   10c7c:	dfc00215 	stw	ra,8(sp)
   10c80:	df000115 	stw	fp,4(sp)
   10c84:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   10c88:	00bfff04 	movi	r2,-4
   10c8c:	00c00074 	movhi	r3,1
   10c90:	18c6cd04 	addi	r3,r3,6964
   10c94:	1885883a 	add	r2,r3,r2
   10c98:	e0bfff15 	stw	r2,-4(fp)
   10c9c:	00000606 	br	10cb8 <_do_dtors+0x40>
        (*dtor) (); 
   10ca0:	e0bfff17 	ldw	r2,-4(fp)
   10ca4:	10800017 	ldw	r2,0(r2)
   10ca8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   10cac:	e0bfff17 	ldw	r2,-4(fp)
   10cb0:	10bfff04 	addi	r2,r2,-4
   10cb4:	e0bfff15 	stw	r2,-4(fp)
   10cb8:	e0ffff17 	ldw	r3,-4(fp)
   10cbc:	00800074 	movhi	r2,1
   10cc0:	1086cd04 	addi	r2,r2,6964
   10cc4:	18bff62e 	bgeu	r3,r2,10ca0 <_do_dtors+0x28>
        (*dtor) (); 
}
   10cc8:	e037883a 	mov	sp,fp
   10ccc:	dfc00117 	ldw	ra,4(sp)
   10cd0:	df000017 	ldw	fp,0(sp)
   10cd4:	dec00204 	addi	sp,sp,8
   10cd8:	f800283a 	ret

00010cdc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   10cdc:	defff904 	addi	sp,sp,-28
   10ce0:	dfc00615 	stw	ra,24(sp)
   10ce4:	df000515 	stw	fp,20(sp)
   10ce8:	df000504 	addi	fp,sp,20
   10cec:	e13ffd15 	stw	r4,-12(fp)
   10cf0:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   10cf4:	e0bffe17 	ldw	r2,-8(fp)
   10cf8:	10800017 	ldw	r2,0(r2)
   10cfc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   10d00:	e13ffd17 	ldw	r4,-12(fp)
   10d04:	00088a40 	call	88a4 <strlen>
   10d08:	10800044 	addi	r2,r2,1
   10d0c:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   10d10:	00000d06 	br	10d48 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   10d14:	e0bffc17 	ldw	r2,-16(fp)
   10d18:	11000217 	ldw	r4,8(r2)
   10d1c:	e1bffb17 	ldw	r6,-20(fp)
   10d20:	e17ffd17 	ldw	r5,-12(fp)
   10d24:	00117740 	call	11774 <memcmp>
   10d28:	1004c03a 	cmpne	r2,r2,zero
   10d2c:	1000031e 	bne	r2,zero,10d3c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   10d30:	e0bffc17 	ldw	r2,-16(fp)
   10d34:	e0bfff15 	stw	r2,-4(fp)
   10d38:	00000706 	br	10d58 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   10d3c:	e0bffc17 	ldw	r2,-16(fp)
   10d40:	10800017 	ldw	r2,0(r2)
   10d44:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   10d48:	e0fffe17 	ldw	r3,-8(fp)
   10d4c:	e0bffc17 	ldw	r2,-16(fp)
   10d50:	10fff01e 	bne	r2,r3,10d14 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   10d54:	e03fff15 	stw	zero,-4(fp)
   10d58:	e0bfff17 	ldw	r2,-4(fp)
}
   10d5c:	e037883a 	mov	sp,fp
   10d60:	dfc00117 	ldw	ra,4(sp)
   10d64:	df000017 	ldw	fp,0(sp)
   10d68:	dec00204 	addi	sp,sp,8
   10d6c:	f800283a 	ret

00010d70 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   10d70:	defffe04 	addi	sp,sp,-8
   10d74:	dfc00115 	stw	ra,4(sp)
   10d78:	df000015 	stw	fp,0(sp)
   10d7c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   10d80:	0009883a 	mov	r4,zero
   10d84:	01440004 	movi	r5,4096
   10d88:	00116980 	call	11698 <alt_icache_flush>
#endif
}
   10d8c:	e037883a 	mov	sp,fp
   10d90:	dfc00117 	ldw	ra,4(sp)
   10d94:	df000017 	ldw	fp,0(sp)
   10d98:	dec00204 	addi	sp,sp,8
   10d9c:	f800283a 	ret

00010da0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   10da0:	defff904 	addi	sp,sp,-28
   10da4:	dfc00615 	stw	ra,24(sp)
   10da8:	df000515 	stw	fp,20(sp)
   10dac:	df000504 	addi	fp,sp,20
   10db0:	e13ffc15 	stw	r4,-16(fp)
   10db4:	e17ffd15 	stw	r5,-12(fp)
   10db8:	e1bffe15 	stw	r6,-8(fp)
   10dbc:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   10dc0:	e13ffd17 	ldw	r4,-12(fp)
   10dc4:	e17ffe17 	ldw	r5,-8(fp)
   10dc8:	e1bfff17 	ldw	r6,-4(fp)
   10dcc:	0010fb80 	call	10fb8 <open>
   10dd0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   10dd4:	e0bffb17 	ldw	r2,-20(fp)
   10dd8:	1004803a 	cmplt	r2,r2,zero
   10ddc:	10001c1e 	bne	r2,zero,10e50 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
   10de0:	e0bffb17 	ldw	r2,-20(fp)
   10de4:	00c00074 	movhi	r3,1
   10de8:	18cb1304 	addi	r3,r3,11340
   10dec:	10800324 	muli	r2,r2,12
   10df0:	10c5883a 	add	r2,r2,r3
   10df4:	10c00017 	ldw	r3,0(r2)
   10df8:	e0bffc17 	ldw	r2,-16(fp)
   10dfc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   10e00:	e0bffb17 	ldw	r2,-20(fp)
   10e04:	00c00074 	movhi	r3,1
   10e08:	18cb1304 	addi	r3,r3,11340
   10e0c:	10800324 	muli	r2,r2,12
   10e10:	10c5883a 	add	r2,r2,r3
   10e14:	10800104 	addi	r2,r2,4
   10e18:	10c00017 	ldw	r3,0(r2)
   10e1c:	e0bffc17 	ldw	r2,-16(fp)
   10e20:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   10e24:	e0bffb17 	ldw	r2,-20(fp)
   10e28:	00c00074 	movhi	r3,1
   10e2c:	18cb1304 	addi	r3,r3,11340
   10e30:	10800324 	muli	r2,r2,12
   10e34:	10c5883a 	add	r2,r2,r3
   10e38:	10800204 	addi	r2,r2,8
   10e3c:	10c00017 	ldw	r3,0(r2)
   10e40:	e0bffc17 	ldw	r2,-16(fp)
   10e44:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   10e48:	e13ffb17 	ldw	r4,-20(fp)
   10e4c:	000bf440 	call	bf44 <alt_release_fd>
  }
} 
   10e50:	e037883a 	mov	sp,fp
   10e54:	dfc00117 	ldw	ra,4(sp)
   10e58:	df000017 	ldw	fp,0(sp)
   10e5c:	dec00204 	addi	sp,sp,8
   10e60:	f800283a 	ret

00010e64 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   10e64:	defffb04 	addi	sp,sp,-20
   10e68:	dfc00415 	stw	ra,16(sp)
   10e6c:	df000315 	stw	fp,12(sp)
   10e70:	df000304 	addi	fp,sp,12
   10e74:	e13ffd15 	stw	r4,-12(fp)
   10e78:	e17ffe15 	stw	r5,-8(fp)
   10e7c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   10e80:	01000074 	movhi	r4,1
   10e84:	210b1604 	addi	r4,r4,11352
   10e88:	e17ffd17 	ldw	r5,-12(fp)
   10e8c:	01800044 	movi	r6,1
   10e90:	01c07fc4 	movi	r7,511
   10e94:	0010da00 	call	10da0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   10e98:	01000074 	movhi	r4,1
   10e9c:	210b1304 	addi	r4,r4,11340
   10ea0:	e17ffe17 	ldw	r5,-8(fp)
   10ea4:	000d883a 	mov	r6,zero
   10ea8:	01c07fc4 	movi	r7,511
   10eac:	0010da00 	call	10da0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   10eb0:	01000074 	movhi	r4,1
   10eb4:	210b1904 	addi	r4,r4,11364
   10eb8:	e17fff17 	ldw	r5,-4(fp)
   10ebc:	01800044 	movi	r6,1
   10ec0:	01c07fc4 	movi	r7,511
   10ec4:	0010da00 	call	10da0 <alt_open_fd>
}  
   10ec8:	e037883a 	mov	sp,fp
   10ecc:	dfc00117 	ldw	ra,4(sp)
   10ed0:	df000017 	ldw	fp,0(sp)
   10ed4:	dec00204 	addi	sp,sp,8
   10ed8:	f800283a 	ret

00010edc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   10edc:	defffc04 	addi	sp,sp,-16
   10ee0:	df000315 	stw	fp,12(sp)
   10ee4:	df000304 	addi	fp,sp,12
   10ee8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   10eec:	e0bffe17 	ldw	r2,-8(fp)
   10ef0:	10800217 	ldw	r2,8(r2)
   10ef4:	10d00034 	orhi	r3,r2,16384
   10ef8:	e0bffe17 	ldw	r2,-8(fp)
   10efc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   10f00:	e03ffd15 	stw	zero,-12(fp)
   10f04:	00002006 	br	10f88 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   10f08:	e0bffd17 	ldw	r2,-12(fp)
   10f0c:	00c00074 	movhi	r3,1
   10f10:	18cb1304 	addi	r3,r3,11340
   10f14:	10800324 	muli	r2,r2,12
   10f18:	10c5883a 	add	r2,r2,r3
   10f1c:	10c00017 	ldw	r3,0(r2)
   10f20:	e0bffe17 	ldw	r2,-8(fp)
   10f24:	10800017 	ldw	r2,0(r2)
   10f28:	1880141e 	bne	r3,r2,10f7c <alt_file_locked+0xa0>
   10f2c:	e0bffd17 	ldw	r2,-12(fp)
   10f30:	00c00074 	movhi	r3,1
   10f34:	18cb1304 	addi	r3,r3,11340
   10f38:	10800324 	muli	r2,r2,12
   10f3c:	10c5883a 	add	r2,r2,r3
   10f40:	10800204 	addi	r2,r2,8
   10f44:	10800017 	ldw	r2,0(r2)
   10f48:	1004403a 	cmpge	r2,r2,zero
   10f4c:	10000b1e 	bne	r2,zero,10f7c <alt_file_locked+0xa0>
   10f50:	e0bffd17 	ldw	r2,-12(fp)
   10f54:	10800324 	muli	r2,r2,12
   10f58:	1007883a 	mov	r3,r2
   10f5c:	00800074 	movhi	r2,1
   10f60:	108b1304 	addi	r2,r2,11340
   10f64:	1887883a 	add	r3,r3,r2
   10f68:	e0bffe17 	ldw	r2,-8(fp)
   10f6c:	18800326 	beq	r3,r2,10f7c <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   10f70:	00bffcc4 	movi	r2,-13
   10f74:	e0bfff15 	stw	r2,-4(fp)
   10f78:	00000a06 	br	10fa4 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   10f7c:	e0bffd17 	ldw	r2,-12(fp)
   10f80:	10800044 	addi	r2,r2,1
   10f84:	e0bffd15 	stw	r2,-12(fp)
   10f88:	00800074 	movhi	r2,1
   10f8c:	10908204 	addi	r2,r2,16904
   10f90:	10800017 	ldw	r2,0(r2)
   10f94:	1007883a 	mov	r3,r2
   10f98:	e0bffd17 	ldw	r2,-12(fp)
   10f9c:	18bfda2e 	bgeu	r3,r2,10f08 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   10fa0:	e03fff15 	stw	zero,-4(fp)
   10fa4:	e0bfff17 	ldw	r2,-4(fp)
}
   10fa8:	e037883a 	mov	sp,fp
   10fac:	df000017 	ldw	fp,0(sp)
   10fb0:	dec00104 	addi	sp,sp,4
   10fb4:	f800283a 	ret

00010fb8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   10fb8:	defff404 	addi	sp,sp,-48
   10fbc:	dfc00b15 	stw	ra,44(sp)
   10fc0:	df000a15 	stw	fp,40(sp)
   10fc4:	df000a04 	addi	fp,sp,40
   10fc8:	e13ffb15 	stw	r4,-20(fp)
   10fcc:	e17ffc15 	stw	r5,-16(fp)
   10fd0:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   10fd4:	00bfffc4 	movi	r2,-1
   10fd8:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   10fdc:	00bffb44 	movi	r2,-19
   10fe0:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   10fe4:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   10fe8:	e13ffb17 	ldw	r4,-20(fp)
   10fec:	01400074 	movhi	r5,1
   10ff0:	29508004 	addi	r5,r5,16896
   10ff4:	0010cdc0 	call	10cdc <alt_find_dev>
   10ff8:	e0bffa15 	stw	r2,-24(fp)
   10ffc:	e0bffa17 	ldw	r2,-24(fp)
   11000:	1004c03a 	cmpne	r2,r2,zero
   11004:	1000051e 	bne	r2,zero,1101c <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   11008:	e13ffb17 	ldw	r4,-20(fp)
   1100c:	00114c00 	call	114c0 <alt_find_file>
   11010:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   11014:	00800044 	movi	r2,1
   11018:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   1101c:	e0bffa17 	ldw	r2,-24(fp)
   11020:	1005003a 	cmpeq	r2,r2,zero
   11024:	1000301e 	bne	r2,zero,110e8 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
   11028:	e13ffa17 	ldw	r4,-24(fp)
   1102c:	00115e00 	call	115e0 <alt_get_fd>
   11030:	e0bff815 	stw	r2,-32(fp)
   11034:	e0bff817 	ldw	r2,-32(fp)
   11038:	1004403a 	cmpge	r2,r2,zero
   1103c:	1000031e 	bne	r2,zero,1104c <open+0x94>
    {
      status = index;
   11040:	e0bff817 	ldw	r2,-32(fp)
   11044:	e0bff715 	stw	r2,-36(fp)
   11048:	00002906 	br	110f0 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
   1104c:	e0bff817 	ldw	r2,-32(fp)
   11050:	10800324 	muli	r2,r2,12
   11054:	1007883a 	mov	r3,r2
   11058:	00800074 	movhi	r2,1
   1105c:	108b1304 	addi	r2,r2,11340
   11060:	1885883a 	add	r2,r3,r2
   11064:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   11068:	e0fffc17 	ldw	r3,-16(fp)
   1106c:	00900034 	movhi	r2,16384
   11070:	10bfffc4 	addi	r2,r2,-1
   11074:	1886703a 	and	r3,r3,r2
   11078:	e0bff917 	ldw	r2,-28(fp)
   1107c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   11080:	e0bff617 	ldw	r2,-40(fp)
   11084:	1004c03a 	cmpne	r2,r2,zero
   11088:	1000061e 	bne	r2,zero,110a4 <open+0xec>
   1108c:	e13ff917 	ldw	r4,-28(fp)
   11090:	0010edc0 	call	10edc <alt_file_locked>
   11094:	e0bff715 	stw	r2,-36(fp)
   11098:	e0bff717 	ldw	r2,-36(fp)
   1109c:	1004803a 	cmplt	r2,r2,zero
   110a0:	1000131e 	bne	r2,zero,110f0 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   110a4:	e0bffa17 	ldw	r2,-24(fp)
   110a8:	10800317 	ldw	r2,12(r2)
   110ac:	1005003a 	cmpeq	r2,r2,zero
   110b0:	1000091e 	bne	r2,zero,110d8 <open+0x120>
   110b4:	e0bffa17 	ldw	r2,-24(fp)
   110b8:	10800317 	ldw	r2,12(r2)
   110bc:	e13ff917 	ldw	r4,-28(fp)
   110c0:	e17ffb17 	ldw	r5,-20(fp)
   110c4:	e1bffc17 	ldw	r6,-16(fp)
   110c8:	e1fffd17 	ldw	r7,-12(fp)
   110cc:	103ee83a 	callr	r2
   110d0:	e0bfff15 	stw	r2,-4(fp)
   110d4:	00000106 	br	110dc <open+0x124>
   110d8:	e03fff15 	stw	zero,-4(fp)
   110dc:	e0bfff17 	ldw	r2,-4(fp)
   110e0:	e0bff715 	stw	r2,-36(fp)
   110e4:	00000206 	br	110f0 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
   110e8:	00bffb44 	movi	r2,-19
   110ec:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   110f0:	e0bff717 	ldw	r2,-36(fp)
   110f4:	1004403a 	cmpge	r2,r2,zero
   110f8:	1000091e 	bne	r2,zero,11120 <open+0x168>
  {
    alt_release_fd (index);  
   110fc:	e13ff817 	ldw	r4,-32(fp)
   11100:	000bf440 	call	bf44 <alt_release_fd>
    ALT_ERRNO = -status;
   11104:	00111400 	call	11140 <alt_get_errno>
   11108:	e0fff717 	ldw	r3,-36(fp)
   1110c:	00c7c83a 	sub	r3,zero,r3
   11110:	10c00015 	stw	r3,0(r2)
    return -1;
   11114:	00bfffc4 	movi	r2,-1
   11118:	e0bffe15 	stw	r2,-8(fp)
   1111c:	00000206 	br	11128 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
   11120:	e0bff817 	ldw	r2,-32(fp)
   11124:	e0bffe15 	stw	r2,-8(fp)
   11128:	e0bffe17 	ldw	r2,-8(fp)
}
   1112c:	e037883a 	mov	sp,fp
   11130:	dfc00117 	ldw	ra,4(sp)
   11134:	df000017 	ldw	fp,0(sp)
   11138:	dec00204 	addi	sp,sp,8
   1113c:	f800283a 	ret

00011140 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11140:	defffd04 	addi	sp,sp,-12
   11144:	dfc00215 	stw	ra,8(sp)
   11148:	df000115 	stw	fp,4(sp)
   1114c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   11150:	00800074 	movhi	r2,1
   11154:	10908304 	addi	r2,r2,16908
   11158:	10800017 	ldw	r2,0(r2)
   1115c:	1005003a 	cmpeq	r2,r2,zero
   11160:	1000061e 	bne	r2,zero,1117c <alt_get_errno+0x3c>
   11164:	00800074 	movhi	r2,1
   11168:	10908304 	addi	r2,r2,16908
   1116c:	10800017 	ldw	r2,0(r2)
   11170:	103ee83a 	callr	r2
   11174:	e0bfff15 	stw	r2,-4(fp)
   11178:	00000306 	br	11188 <alt_get_errno+0x48>
   1117c:	00800074 	movhi	r2,1
   11180:	10981704 	addi	r2,r2,24668
   11184:	e0bfff15 	stw	r2,-4(fp)
   11188:	e0bfff17 	ldw	r2,-4(fp)
}
   1118c:	e037883a 	mov	sp,fp
   11190:	dfc00117 	ldw	ra,4(sp)
   11194:	df000017 	ldw	fp,0(sp)
   11198:	dec00204 	addi	sp,sp,8
   1119c:	f800283a 	ret

000111a0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   111a0:	defffa04 	addi	sp,sp,-24
   111a4:	df000515 	stw	fp,20(sp)
   111a8:	df000504 	addi	fp,sp,20
   111ac:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   111b0:	0005303a 	rdctl	r2,status
   111b4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   111b8:	e0fffd17 	ldw	r3,-12(fp)
   111bc:	00bfff84 	movi	r2,-2
   111c0:	1884703a 	and	r2,r3,r2
   111c4:	1001703a 	wrctl	status,r2
  
  return context;
   111c8:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   111cc:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   111d0:	e0bfff17 	ldw	r2,-4(fp)
   111d4:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   111d8:	e0bffc17 	ldw	r2,-16(fp)
   111dc:	10c00017 	ldw	r3,0(r2)
   111e0:	e0bffc17 	ldw	r2,-16(fp)
   111e4:	10800117 	ldw	r2,4(r2)
   111e8:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   111ec:	e0bffc17 	ldw	r2,-16(fp)
   111f0:	10c00117 	ldw	r3,4(r2)
   111f4:	e0bffc17 	ldw	r2,-16(fp)
   111f8:	10800017 	ldw	r2,0(r2)
   111fc:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   11200:	e0fffc17 	ldw	r3,-16(fp)
   11204:	e0bffc17 	ldw	r2,-16(fp)
   11208:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   1120c:	e0fffc17 	ldw	r3,-16(fp)
   11210:	e0bffc17 	ldw	r2,-16(fp)
   11214:	18800015 	stw	r2,0(r3)
   11218:	e0bffe17 	ldw	r2,-8(fp)
   1121c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11220:	e0bffb17 	ldw	r2,-20(fp)
   11224:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   11228:	e037883a 	mov	sp,fp
   1122c:	df000017 	ldw	fp,0(sp)
   11230:	dec00104 	addi	sp,sp,4
   11234:	f800283a 	ret

00011238 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   11238:	defffb04 	addi	sp,sp,-20
   1123c:	dfc00415 	stw	ra,16(sp)
   11240:	df000315 	stw	fp,12(sp)
   11244:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   11248:	d0a00e17 	ldw	r2,-32712(gp)
   1124c:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   11250:	d0a7a517 	ldw	r2,-24940(gp)
   11254:	10800044 	addi	r2,r2,1
   11258:	d0a7a515 	stw	r2,-24940(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1125c:	00003106 	br	11324 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   11260:	e0bffe17 	ldw	r2,-8(fp)
   11264:	10800017 	ldw	r2,0(r2)
   11268:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   1126c:	e0bffe17 	ldw	r2,-8(fp)
   11270:	10800403 	ldbu	r2,16(r2)
   11274:	10803fcc 	andi	r2,r2,255
   11278:	1005003a 	cmpeq	r2,r2,zero
   1127c:	1000051e 	bne	r2,zero,11294 <alt_tick+0x5c>
   11280:	d0a7a517 	ldw	r2,-24940(gp)
   11284:	1004c03a 	cmpne	r2,r2,zero
   11288:	1000021e 	bne	r2,zero,11294 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   1128c:	e0bffe17 	ldw	r2,-8(fp)
   11290:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   11294:	e0bffe17 	ldw	r2,-8(fp)
   11298:	10c00217 	ldw	r3,8(r2)
   1129c:	d0a7a517 	ldw	r2,-24940(gp)
   112a0:	10c01e36 	bltu	r2,r3,1131c <alt_tick+0xe4>
   112a4:	e0bffe17 	ldw	r2,-8(fp)
   112a8:	10800403 	ldbu	r2,16(r2)
   112ac:	10803fcc 	andi	r2,r2,255
   112b0:	1004c03a 	cmpne	r2,r2,zero
   112b4:	1000191e 	bne	r2,zero,1131c <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   112b8:	e0bffe17 	ldw	r2,-8(fp)
   112bc:	10c00317 	ldw	r3,12(r2)
   112c0:	e0bffe17 	ldw	r2,-8(fp)
   112c4:	11000517 	ldw	r4,20(r2)
   112c8:	183ee83a 	callr	r3
   112cc:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   112d0:	e0bffd17 	ldw	r2,-12(fp)
   112d4:	1004c03a 	cmpne	r2,r2,zero
   112d8:	1000031e 	bne	r2,zero,112e8 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   112dc:	e13ffe17 	ldw	r4,-8(fp)
   112e0:	00111a00 	call	111a0 <alt_alarm_stop>
   112e4:	00000d06 	br	1131c <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   112e8:	e0bffe17 	ldw	r2,-8(fp)
   112ec:	10c00217 	ldw	r3,8(r2)
   112f0:	e0bffd17 	ldw	r2,-12(fp)
   112f4:	1887883a 	add	r3,r3,r2
   112f8:	e0bffe17 	ldw	r2,-8(fp)
   112fc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   11300:	e0bffe17 	ldw	r2,-8(fp)
   11304:	10c00217 	ldw	r3,8(r2)
   11308:	d0a7a517 	ldw	r2,-24940(gp)
   1130c:	1880032e 	bgeu	r3,r2,1131c <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   11310:	e0fffe17 	ldw	r3,-8(fp)
   11314:	00800044 	movi	r2,1
   11318:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   1131c:	e0bfff17 	ldw	r2,-4(fp)
   11320:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   11324:	d0e00e04 	addi	r3,gp,-32712
   11328:	e0bffe17 	ldw	r2,-8(fp)
   1132c:	10ffcc1e 	bne	r2,r3,11260 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   11330:	e037883a 	mov	sp,fp
   11334:	dfc00117 	ldw	ra,4(sp)
   11338:	df000017 	ldw	fp,0(sp)
   1133c:	dec00204 	addi	sp,sp,8
   11340:	f800283a 	ret

00011344 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   11344:	defffd04 	addi	sp,sp,-12
   11348:	dfc00215 	stw	ra,8(sp)
   1134c:	df000115 	stw	fp,4(sp)
   11350:	df000104 	addi	fp,sp,4
   11354:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   11358:	e13fff17 	ldw	r4,-4(fp)
   1135c:	00113940 	call	11394 <alt_busy_sleep>
}
   11360:	e037883a 	mov	sp,fp
   11364:	dfc00117 	ldw	ra,4(sp)
   11368:	df000017 	ldw	fp,0(sp)
   1136c:	dec00204 	addi	sp,sp,8
   11370:	f800283a 	ret

00011374 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   11374:	deffff04 	addi	sp,sp,-4
   11378:	df000015 	stw	fp,0(sp)
   1137c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   11380:	000170fa 	wrctl	ienable,zero
}
   11384:	e037883a 	mov	sp,fp
   11388:	df000017 	ldw	fp,0(sp)
   1138c:	dec00104 	addi	sp,sp,4
   11390:	f800283a 	ret

00011394 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   11394:	defffb04 	addi	sp,sp,-20
   11398:	df000415 	stw	fp,16(sp)
   1139c:	df000404 	addi	fp,sp,16
   113a0:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   113a4:	008000c4 	movi	r2,3
   113a8:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
   113ac:	e0fffc17 	ldw	r3,-16(fp)
   113b0:	008003f4 	movhi	r2,15
   113b4:	10909004 	addi	r2,r2,16960
   113b8:	1887383a 	mul	r3,r3,r2
   113bc:	0080bef4 	movhi	r2,763
   113c0:	10bc2004 	addi	r2,r2,-3968
   113c4:	10c7203a 	divu	r3,r2,r3
   113c8:	00a00034 	movhi	r2,32768
   113cc:	10bfffc4 	addi	r2,r2,-1
   113d0:	10c7203a 	divu	r3,r2,r3
   113d4:	e0bfff17 	ldw	r2,-4(fp)
   113d8:	10c5203a 	divu	r2,r2,r3
   113dc:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   113e0:	e0bffd17 	ldw	r2,-12(fp)
   113e4:	1005003a 	cmpeq	r2,r2,zero
   113e8:	1000251e 	bne	r2,zero,11480 <alt_busy_sleep+0xec>
  {
    for(i=0;i<big_loops;i++)
   113ec:	e03ffe15 	stw	zero,-8(fp)
   113f0:	00001406 	br	11444 <alt_busy_sleep+0xb0>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   113f4:	00a00034 	movhi	r2,32768
   113f8:	10bfffc4 	addi	r2,r2,-1
   113fc:	10bfffc4 	addi	r2,r2,-1
   11400:	103ffe1e 	bne	r2,zero,113fc <alt_busy_sleep+0x68>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   11404:	e0fffc17 	ldw	r3,-16(fp)
   11408:	008003f4 	movhi	r2,15
   1140c:	10909004 	addi	r2,r2,16960
   11410:	1887383a 	mul	r3,r3,r2
   11414:	0080bef4 	movhi	r2,763
   11418:	10bc2004 	addi	r2,r2,-3968
   1141c:	10c7203a 	divu	r3,r2,r3
   11420:	00a00034 	movhi	r2,32768
   11424:	10bfffc4 	addi	r2,r2,-1
   11428:	10c7203a 	divu	r3,r2,r3
   1142c:	e0bfff17 	ldw	r2,-4(fp)
   11430:	10c5c83a 	sub	r2,r2,r3
   11434:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   11438:	e0bffe17 	ldw	r2,-8(fp)
   1143c:	10800044 	addi	r2,r2,1
   11440:	e0bffe15 	stw	r2,-8(fp)
   11444:	e0fffe17 	ldw	r3,-8(fp)
   11448:	e0bffd17 	ldw	r2,-12(fp)
   1144c:	18bfe916 	blt	r3,r2,113f4 <alt_busy_sleep+0x60>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   11450:	e0fffc17 	ldw	r3,-16(fp)
   11454:	008003f4 	movhi	r2,15
   11458:	10909004 	addi	r2,r2,16960
   1145c:	1887383a 	mul	r3,r3,r2
   11460:	0080bef4 	movhi	r2,763
   11464:	10bc2004 	addi	r2,r2,-3968
   11468:	10c7203a 	divu	r3,r2,r3
   1146c:	e0bfff17 	ldw	r2,-4(fp)
   11470:	1885383a 	mul	r2,r3,r2
   11474:	10bfffc4 	addi	r2,r2,-1
   11478:	103ffe1e 	bne	r2,zero,11474 <alt_busy_sleep+0xe0>
   1147c:	00000b06 	br	114ac <alt_busy_sleep+0x118>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   11480:	e0fffc17 	ldw	r3,-16(fp)
   11484:	008003f4 	movhi	r2,15
   11488:	10909004 	addi	r2,r2,16960
   1148c:	1887383a 	mul	r3,r3,r2
   11490:	0080bef4 	movhi	r2,763
   11494:	10bc2004 	addi	r2,r2,-3968
   11498:	10c7203a 	divu	r3,r2,r3
   1149c:	e0bfff17 	ldw	r2,-4(fp)
   114a0:	1885383a 	mul	r2,r3,r2
   114a4:	10bfffc4 	addi	r2,r2,-1
   114a8:	00bffe16 	blt	zero,r2,114a4 <alt_busy_sleep+0x110>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   114ac:	0005883a 	mov	r2,zero
}
   114b0:	e037883a 	mov	sp,fp
   114b4:	df000017 	ldw	fp,0(sp)
   114b8:	dec00104 	addi	sp,sp,4
   114bc:	f800283a 	ret

000114c0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   114c0:	defffa04 	addi	sp,sp,-24
   114c4:	dfc00515 	stw	ra,20(sp)
   114c8:	df000415 	stw	fp,16(sp)
   114cc:	df000404 	addi	fp,sp,16
   114d0:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   114d4:	00800074 	movhi	r2,1
   114d8:	10907e04 	addi	r2,r2,16888
   114dc:	10800017 	ldw	r2,0(r2)
   114e0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   114e4:	00003306 	br	115b4 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   114e8:	e0bffd17 	ldw	r2,-12(fp)
   114ec:	11000217 	ldw	r4,8(r2)
   114f0:	00088a40 	call	88a4 <strlen>
   114f4:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   114f8:	e0bffd17 	ldw	r2,-12(fp)
   114fc:	10c00217 	ldw	r3,8(r2)
   11500:	e0bffc17 	ldw	r2,-16(fp)
   11504:	1885883a 	add	r2,r3,r2
   11508:	10bfffc4 	addi	r2,r2,-1
   1150c:	10800003 	ldbu	r2,0(r2)
   11510:	10803fcc 	andi	r2,r2,255
   11514:	1080201c 	xori	r2,r2,128
   11518:	10bfe004 	addi	r2,r2,-128
   1151c:	10800bd8 	cmpnei	r2,r2,47
   11520:	1000031e 	bne	r2,zero,11530 <alt_find_file+0x70>
    {
      len -= 1;
   11524:	e0bffc17 	ldw	r2,-16(fp)
   11528:	10bfffc4 	addi	r2,r2,-1
   1152c:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   11530:	e0bffc17 	ldw	r2,-16(fp)
   11534:	1007883a 	mov	r3,r2
   11538:	e0bffe17 	ldw	r2,-8(fp)
   1153c:	1885883a 	add	r2,r3,r2
   11540:	10800003 	ldbu	r2,0(r2)
   11544:	10803fcc 	andi	r2,r2,255
   11548:	1080201c 	xori	r2,r2,128
   1154c:	10bfe004 	addi	r2,r2,-128
   11550:	10800be0 	cmpeqi	r2,r2,47
   11554:	10000a1e 	bne	r2,zero,11580 <alt_find_file+0xc0>
   11558:	e0bffc17 	ldw	r2,-16(fp)
   1155c:	1007883a 	mov	r3,r2
   11560:	e0bffe17 	ldw	r2,-8(fp)
   11564:	1885883a 	add	r2,r3,r2
   11568:	10800003 	ldbu	r2,0(r2)
   1156c:	10803fcc 	andi	r2,r2,255
   11570:	1080201c 	xori	r2,r2,128
   11574:	10bfe004 	addi	r2,r2,-128
   11578:	1004c03a 	cmpne	r2,r2,zero
   1157c:	10000a1e 	bne	r2,zero,115a8 <alt_find_file+0xe8>
   11580:	e0bffd17 	ldw	r2,-12(fp)
   11584:	11000217 	ldw	r4,8(r2)
   11588:	e1bffc17 	ldw	r6,-16(fp)
   1158c:	e17ffe17 	ldw	r5,-8(fp)
   11590:	00117740 	call	11774 <memcmp>
   11594:	1004c03a 	cmpne	r2,r2,zero
   11598:	1000031e 	bne	r2,zero,115a8 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   1159c:	e0bffd17 	ldw	r2,-12(fp)
   115a0:	e0bfff15 	stw	r2,-4(fp)
   115a4:	00000806 	br	115c8 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   115a8:	e0bffd17 	ldw	r2,-12(fp)
   115ac:	10800017 	ldw	r2,0(r2)
   115b0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   115b4:	00c00074 	movhi	r3,1
   115b8:	18d07e04 	addi	r3,r3,16888
   115bc:	e0bffd17 	ldw	r2,-12(fp)
   115c0:	10ffc91e 	bne	r2,r3,114e8 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   115c4:	e03fff15 	stw	zero,-4(fp)
   115c8:	e0bfff17 	ldw	r2,-4(fp)
}
   115cc:	e037883a 	mov	sp,fp
   115d0:	dfc00117 	ldw	ra,4(sp)
   115d4:	df000017 	ldw	fp,0(sp)
   115d8:	dec00204 	addi	sp,sp,8
   115dc:	f800283a 	ret

000115e0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   115e0:	defffc04 	addi	sp,sp,-16
   115e4:	df000315 	stw	fp,12(sp)
   115e8:	df000304 	addi	fp,sp,12
   115ec:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   115f0:	00bffa04 	movi	r2,-24
   115f4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   115f8:	e03ffe15 	stw	zero,-8(fp)
   115fc:	00001e06 	br	11678 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
   11600:	e0bffe17 	ldw	r2,-8(fp)
   11604:	00c00074 	movhi	r3,1
   11608:	18cb1304 	addi	r3,r3,11340
   1160c:	10800324 	muli	r2,r2,12
   11610:	10c5883a 	add	r2,r2,r3
   11614:	10800017 	ldw	r2,0(r2)
   11618:	1004c03a 	cmpne	r2,r2,zero
   1161c:	1000131e 	bne	r2,zero,1166c <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
   11620:	e0bffe17 	ldw	r2,-8(fp)
   11624:	00c00074 	movhi	r3,1
   11628:	18cb1304 	addi	r3,r3,11340
   1162c:	10800324 	muli	r2,r2,12
   11630:	10c7883a 	add	r3,r2,r3
   11634:	e0bfff17 	ldw	r2,-4(fp)
   11638:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   1163c:	00800074 	movhi	r2,1
   11640:	10908204 	addi	r2,r2,16904
   11644:	10c00017 	ldw	r3,0(r2)
   11648:	e0bffe17 	ldw	r2,-8(fp)
   1164c:	1880040e 	bge	r3,r2,11660 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
   11650:	00c00074 	movhi	r3,1
   11654:	18d08204 	addi	r3,r3,16904
   11658:	e0bffe17 	ldw	r2,-8(fp)
   1165c:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   11660:	e0bffe17 	ldw	r2,-8(fp)
   11664:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   11668:	00000606 	br	11684 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1166c:	e0bffe17 	ldw	r2,-8(fp)
   11670:	10800044 	addi	r2,r2,1
   11674:	e0bffe15 	stw	r2,-8(fp)
   11678:	e0bffe17 	ldw	r2,-8(fp)
   1167c:	10800810 	cmplti	r2,r2,32
   11680:	103fdf1e 	bne	r2,zero,11600 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   11684:	e0bffd17 	ldw	r2,-12(fp)
}
   11688:	e037883a 	mov	sp,fp
   1168c:	df000017 	ldw	fp,0(sp)
   11690:	dec00104 	addi	sp,sp,4
   11694:	f800283a 	ret

00011698 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   11698:	defffb04 	addi	sp,sp,-20
   1169c:	df000415 	stw	fp,16(sp)
   116a0:	df000404 	addi	fp,sp,16
   116a4:	e13ffe15 	stw	r4,-8(fp)
   116a8:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   116ac:	e0bfff17 	ldw	r2,-4(fp)
   116b0:	10840070 	cmpltui	r2,r2,4097
   116b4:	1000021e 	bne	r2,zero,116c0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   116b8:	00840004 	movi	r2,4096
   116bc:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   116c0:	e0fffe17 	ldw	r3,-8(fp)
   116c4:	e0bfff17 	ldw	r2,-4(fp)
   116c8:	1885883a 	add	r2,r3,r2
   116cc:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   116d0:	e0bffe17 	ldw	r2,-8(fp)
   116d4:	e0bffd15 	stw	r2,-12(fp)
   116d8:	00000506 	br	116f0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   116dc:	e0bffd17 	ldw	r2,-12(fp)
   116e0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   116e4:	e0bffd17 	ldw	r2,-12(fp)
   116e8:	10800804 	addi	r2,r2,32
   116ec:	e0bffd15 	stw	r2,-12(fp)
   116f0:	e0fffd17 	ldw	r3,-12(fp)
   116f4:	e0bffc17 	ldw	r2,-16(fp)
   116f8:	18bff836 	bltu	r3,r2,116dc <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   116fc:	e0bffe17 	ldw	r2,-8(fp)
   11700:	108007cc 	andi	r2,r2,31
   11704:	1005003a 	cmpeq	r2,r2,zero
   11708:	1000021e 	bne	r2,zero,11714 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   1170c:	e0bffd17 	ldw	r2,-12(fp)
   11710:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   11714:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   11718:	e037883a 	mov	sp,fp
   1171c:	df000017 	ldw	fp,0(sp)
   11720:	dec00104 	addi	sp,sp,4
   11724:	f800283a 	ret

00011728 <atexit>:
   11728:	200b883a 	mov	r5,r4
   1172c:	000d883a 	mov	r6,zero
   11730:	0009883a 	mov	r4,zero
   11734:	000f883a 	mov	r7,zero
   11738:	00117e81 	jmpi	117e8 <__register_exitproc>

0001173c <exit>:
   1173c:	defffe04 	addi	sp,sp,-8
   11740:	000b883a 	mov	r5,zero
   11744:	dc000015 	stw	r16,0(sp)
   11748:	dfc00115 	stw	ra,4(sp)
   1174c:	2021883a 	mov	r16,r4
   11750:	00119200 	call	11920 <__call_exitprocs>
   11754:	00800074 	movhi	r2,1
   11758:	10907904 	addi	r2,r2,16868
   1175c:	11000017 	ldw	r4,0(r2)
   11760:	20800f17 	ldw	r2,60(r4)
   11764:	10000126 	beq	r2,zero,1176c <exit+0x30>
   11768:	103ee83a 	callr	r2
   1176c:	8009883a 	mov	r4,r16
   11770:	0011b100 	call	11b10 <_exit>

00011774 <memcmp>:
   11774:	00c000c4 	movi	r3,3
   11778:	1980032e 	bgeu	r3,r6,11788 <memcmp+0x14>
   1177c:	2144b03a 	or	r2,r4,r5
   11780:	10c4703a 	and	r2,r2,r3
   11784:	10000f26 	beq	r2,zero,117c4 <memcmp+0x50>
   11788:	31ffffc4 	addi	r7,r6,-1
   1178c:	3000061e 	bne	r6,zero,117a8 <memcmp+0x34>
   11790:	00000a06 	br	117bc <memcmp+0x48>
   11794:	39ffffc4 	addi	r7,r7,-1
   11798:	00bfffc4 	movi	r2,-1
   1179c:	21000044 	addi	r4,r4,1
   117a0:	29400044 	addi	r5,r5,1
   117a4:	38800526 	beq	r7,r2,117bc <memcmp+0x48>
   117a8:	20c00003 	ldbu	r3,0(r4)
   117ac:	28800003 	ldbu	r2,0(r5)
   117b0:	18bff826 	beq	r3,r2,11794 <memcmp+0x20>
   117b4:	1885c83a 	sub	r2,r3,r2
   117b8:	f800283a 	ret
   117bc:	0005883a 	mov	r2,zero
   117c0:	f800283a 	ret
   117c4:	180f883a 	mov	r7,r3
   117c8:	20c00017 	ldw	r3,0(r4)
   117cc:	28800017 	ldw	r2,0(r5)
   117d0:	18bfed1e 	bne	r3,r2,11788 <memcmp+0x14>
   117d4:	31bfff04 	addi	r6,r6,-4
   117d8:	21000104 	addi	r4,r4,4
   117dc:	29400104 	addi	r5,r5,4
   117e0:	39bff936 	bltu	r7,r6,117c8 <memcmp+0x54>
   117e4:	003fe806 	br	11788 <memcmp+0x14>

000117e8 <__register_exitproc>:
   117e8:	defffa04 	addi	sp,sp,-24
   117ec:	00800074 	movhi	r2,1
   117f0:	10907904 	addi	r2,r2,16868
   117f4:	dc000015 	stw	r16,0(sp)
   117f8:	14000017 	ldw	r16,0(r2)
   117fc:	dd000415 	stw	r20,16(sp)
   11800:	2829883a 	mov	r20,r5
   11804:	81405217 	ldw	r5,328(r16)
   11808:	dcc00315 	stw	r19,12(sp)
   1180c:	dc800215 	stw	r18,8(sp)
   11810:	dc400115 	stw	r17,4(sp)
   11814:	dfc00515 	stw	ra,20(sp)
   11818:	2023883a 	mov	r17,r4
   1181c:	3027883a 	mov	r19,r6
   11820:	3825883a 	mov	r18,r7
   11824:	28002526 	beq	r5,zero,118bc <__register_exitproc+0xd4>
   11828:	29000117 	ldw	r4,4(r5)
   1182c:	008007c4 	movi	r2,31
   11830:	11002716 	blt	r2,r4,118d0 <__register_exitproc+0xe8>
   11834:	8800101e 	bne	r17,zero,11878 <__register_exitproc+0x90>
   11838:	2105883a 	add	r2,r4,r4
   1183c:	1085883a 	add	r2,r2,r2
   11840:	20c00044 	addi	r3,r4,1
   11844:	1145883a 	add	r2,r2,r5
   11848:	0009883a 	mov	r4,zero
   1184c:	15000215 	stw	r20,8(r2)
   11850:	28c00115 	stw	r3,4(r5)
   11854:	2005883a 	mov	r2,r4
   11858:	dfc00517 	ldw	ra,20(sp)
   1185c:	dd000417 	ldw	r20,16(sp)
   11860:	dcc00317 	ldw	r19,12(sp)
   11864:	dc800217 	ldw	r18,8(sp)
   11868:	dc400117 	ldw	r17,4(sp)
   1186c:	dc000017 	ldw	r16,0(sp)
   11870:	dec00604 	addi	sp,sp,24
   11874:	f800283a 	ret
   11878:	29802204 	addi	r6,r5,136
   1187c:	00800044 	movi	r2,1
   11880:	110e983a 	sll	r7,r2,r4
   11884:	30c04017 	ldw	r3,256(r6)
   11888:	2105883a 	add	r2,r4,r4
   1188c:	1085883a 	add	r2,r2,r2
   11890:	1185883a 	add	r2,r2,r6
   11894:	19c6b03a 	or	r3,r3,r7
   11898:	14802015 	stw	r18,128(r2)
   1189c:	14c00015 	stw	r19,0(r2)
   118a0:	00800084 	movi	r2,2
   118a4:	30c04015 	stw	r3,256(r6)
   118a8:	88bfe31e 	bne	r17,r2,11838 <__register_exitproc+0x50>
   118ac:	30804117 	ldw	r2,260(r6)
   118b0:	11c4b03a 	or	r2,r2,r7
   118b4:	30804115 	stw	r2,260(r6)
   118b8:	003fdf06 	br	11838 <__register_exitproc+0x50>
   118bc:	00800fb4 	movhi	r2,62
   118c0:	109aaf04 	addi	r2,r2,27324
   118c4:	100b883a 	mov	r5,r2
   118c8:	80805215 	stw	r2,328(r16)
   118cc:	003fd606 	br	11828 <__register_exitproc+0x40>
   118d0:	00800034 	movhi	r2,0
   118d4:	10800004 	addi	r2,r2,0
   118d8:	1000021e 	bne	r2,zero,118e4 <__register_exitproc+0xfc>
   118dc:	013fffc4 	movi	r4,-1
   118e0:	003fdc06 	br	11854 <__register_exitproc+0x6c>
   118e4:	01006404 	movi	r4,400
   118e8:	103ee83a 	callr	r2
   118ec:	1007883a 	mov	r3,r2
   118f0:	103ffa26 	beq	r2,zero,118dc <__register_exitproc+0xf4>
   118f4:	80805217 	ldw	r2,328(r16)
   118f8:	180b883a 	mov	r5,r3
   118fc:	18000115 	stw	zero,4(r3)
   11900:	18800015 	stw	r2,0(r3)
   11904:	80c05215 	stw	r3,328(r16)
   11908:	18006215 	stw	zero,392(r3)
   1190c:	18006315 	stw	zero,396(r3)
   11910:	0009883a 	mov	r4,zero
   11914:	883fc826 	beq	r17,zero,11838 <__register_exitproc+0x50>
   11918:	003fd706 	br	11878 <__register_exitproc+0x90>

0001191c <register_fini>:
   1191c:	f800283a 	ret

00011920 <__call_exitprocs>:
   11920:	00800074 	movhi	r2,1
   11924:	10907904 	addi	r2,r2,16868
   11928:	10800017 	ldw	r2,0(r2)
   1192c:	defff304 	addi	sp,sp,-52
   11930:	df000b15 	stw	fp,44(sp)
   11934:	d8800115 	stw	r2,4(sp)
   11938:	00800034 	movhi	r2,0
   1193c:	10800004 	addi	r2,r2,0
   11940:	1005003a 	cmpeq	r2,r2,zero
   11944:	d8800215 	stw	r2,8(sp)
   11948:	d8800117 	ldw	r2,4(sp)
   1194c:	dd400815 	stw	r21,32(sp)
   11950:	dd000715 	stw	r20,28(sp)
   11954:	10805204 	addi	r2,r2,328
   11958:	dfc00c15 	stw	ra,48(sp)
   1195c:	ddc00a15 	stw	r23,40(sp)
   11960:	dd800915 	stw	r22,36(sp)
   11964:	dcc00615 	stw	r19,24(sp)
   11968:	dc800515 	stw	r18,20(sp)
   1196c:	dc400415 	stw	r17,16(sp)
   11970:	dc000315 	stw	r16,12(sp)
   11974:	282b883a 	mov	r21,r5
   11978:	2039883a 	mov	fp,r4
   1197c:	d8800015 	stw	r2,0(sp)
   11980:	2829003a 	cmpeq	r20,r5,zero
   11984:	d8800117 	ldw	r2,4(sp)
   11988:	14405217 	ldw	r17,328(r2)
   1198c:	88001026 	beq	r17,zero,119d0 <__call_exitprocs+0xb0>
   11990:	ddc00017 	ldw	r23,0(sp)
   11994:	88800117 	ldw	r2,4(r17)
   11998:	8c802204 	addi	r18,r17,136
   1199c:	143fffc4 	addi	r16,r2,-1
   119a0:	80000916 	blt	r16,zero,119c8 <__call_exitprocs+0xa8>
   119a4:	05bfffc4 	movi	r22,-1
   119a8:	a000151e 	bne	r20,zero,11a00 <__call_exitprocs+0xe0>
   119ac:	8409883a 	add	r4,r16,r16
   119b0:	2105883a 	add	r2,r4,r4
   119b4:	1485883a 	add	r2,r2,r18
   119b8:	10c02017 	ldw	r3,128(r2)
   119bc:	a8c01126 	beq	r21,r3,11a04 <__call_exitprocs+0xe4>
   119c0:	843fffc4 	addi	r16,r16,-1
   119c4:	85bff81e 	bne	r16,r22,119a8 <__call_exitprocs+0x88>
   119c8:	d8800217 	ldw	r2,8(sp)
   119cc:	10003126 	beq	r2,zero,11a94 <__call_exitprocs+0x174>
   119d0:	dfc00c17 	ldw	ra,48(sp)
   119d4:	df000b17 	ldw	fp,44(sp)
   119d8:	ddc00a17 	ldw	r23,40(sp)
   119dc:	dd800917 	ldw	r22,36(sp)
   119e0:	dd400817 	ldw	r21,32(sp)
   119e4:	dd000717 	ldw	r20,28(sp)
   119e8:	dcc00617 	ldw	r19,24(sp)
   119ec:	dc800517 	ldw	r18,20(sp)
   119f0:	dc400417 	ldw	r17,16(sp)
   119f4:	dc000317 	ldw	r16,12(sp)
   119f8:	dec00d04 	addi	sp,sp,52
   119fc:	f800283a 	ret
   11a00:	8409883a 	add	r4,r16,r16
   11a04:	88c00117 	ldw	r3,4(r17)
   11a08:	2105883a 	add	r2,r4,r4
   11a0c:	1445883a 	add	r2,r2,r17
   11a10:	18ffffc4 	addi	r3,r3,-1
   11a14:	11800217 	ldw	r6,8(r2)
   11a18:	1c001526 	beq	r3,r16,11a70 <__call_exitprocs+0x150>
   11a1c:	10000215 	stw	zero,8(r2)
   11a20:	303fe726 	beq	r6,zero,119c0 <__call_exitprocs+0xa0>
   11a24:	00c00044 	movi	r3,1
   11a28:	1c06983a 	sll	r3,r3,r16
   11a2c:	90804017 	ldw	r2,256(r18)
   11a30:	8cc00117 	ldw	r19,4(r17)
   11a34:	1884703a 	and	r2,r3,r2
   11a38:	10001426 	beq	r2,zero,11a8c <__call_exitprocs+0x16c>
   11a3c:	90804117 	ldw	r2,260(r18)
   11a40:	1884703a 	and	r2,r3,r2
   11a44:	10000c1e 	bne	r2,zero,11a78 <__call_exitprocs+0x158>
   11a48:	2105883a 	add	r2,r4,r4
   11a4c:	1485883a 	add	r2,r2,r18
   11a50:	11400017 	ldw	r5,0(r2)
   11a54:	e009883a 	mov	r4,fp
   11a58:	303ee83a 	callr	r6
   11a5c:	88800117 	ldw	r2,4(r17)
   11a60:	98bfc81e 	bne	r19,r2,11984 <__call_exitprocs+0x64>
   11a64:	b8800017 	ldw	r2,0(r23)
   11a68:	147fd526 	beq	r2,r17,119c0 <__call_exitprocs+0xa0>
   11a6c:	003fc506 	br	11984 <__call_exitprocs+0x64>
   11a70:	8c000115 	stw	r16,4(r17)
   11a74:	003fea06 	br	11a20 <__call_exitprocs+0x100>
   11a78:	2105883a 	add	r2,r4,r4
   11a7c:	1485883a 	add	r2,r2,r18
   11a80:	11000017 	ldw	r4,0(r2)
   11a84:	303ee83a 	callr	r6
   11a88:	003ff406 	br	11a5c <__call_exitprocs+0x13c>
   11a8c:	303ee83a 	callr	r6
   11a90:	003ff206 	br	11a5c <__call_exitprocs+0x13c>
   11a94:	88800117 	ldw	r2,4(r17)
   11a98:	1000081e 	bne	r2,zero,11abc <__call_exitprocs+0x19c>
   11a9c:	89000017 	ldw	r4,0(r17)
   11aa0:	20000726 	beq	r4,zero,11ac0 <__call_exitprocs+0x1a0>
   11aa4:	b9000015 	stw	r4,0(r23)
   11aa8:	8809883a 	mov	r4,r17
   11aac:	00000000 	call	0 <__alt_mem_SDRAM>
   11ab0:	bc400017 	ldw	r17,0(r23)
   11ab4:	883fb71e 	bne	r17,zero,11994 <__call_exitprocs+0x74>
   11ab8:	003fc506 	br	119d0 <__call_exitprocs+0xb0>
   11abc:	89000017 	ldw	r4,0(r17)
   11ac0:	882f883a 	mov	r23,r17
   11ac4:	2023883a 	mov	r17,r4
   11ac8:	883fb21e 	bne	r17,zero,11994 <__call_exitprocs+0x74>
   11acc:	003fc006 	br	119d0 <__call_exitprocs+0xb0>

00011ad0 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   11ad0:	defffd04 	addi	sp,sp,-12
   11ad4:	df000215 	stw	fp,8(sp)
   11ad8:	df000204 	addi	fp,sp,8
   11adc:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   11ae0:	e0bfff17 	ldw	r2,-4(fp)
   11ae4:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   11ae8:	e0bffe17 	ldw	r2,-8(fp)
   11aec:	1005003a 	cmpeq	r2,r2,zero
   11af0:	1000021e 	bne	r2,zero,11afc <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   11af4:	002af070 	cmpltui	zero,zero,43969
   11af8:	00000106 	br	11b00 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   11afc:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   11b00:	e037883a 	mov	sp,fp
   11b04:	df000017 	ldw	fp,0(sp)
   11b08:	dec00104 	addi	sp,sp,4
   11b0c:	f800283a 	ret

00011b10 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   11b10:	defffd04 	addi	sp,sp,-12
   11b14:	dfc00215 	stw	ra,8(sp)
   11b18:	df000115 	stw	fp,4(sp)
   11b1c:	df000104 	addi	fp,sp,4
   11b20:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   11b24:	e13fff17 	ldw	r4,-4(fp)
   11b28:	0011ad00 	call	11ad0 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   11b2c:	003fff06 	br	11b2c <_exit+0x1c>
   11b30:	0001191c 	xori	zero,zero,1124
