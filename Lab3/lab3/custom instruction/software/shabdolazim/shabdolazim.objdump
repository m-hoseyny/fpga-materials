
shabdolazim.elf:     file format elf32-littlenios2
shabdolazim.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00011dcc memsz 0x00011dcc flags r-x
    LOAD off    0x00012dec vaddr 0x00011dec paddr 0x00013bfc align 2**12
         filesz 0x00001e10 memsz 0x00001e10 flags rw-
    LOAD off    0x00015a0c vaddr 0x00015a0c paddr 0x00015a0c align 2**12
         filesz 0x00000000 memsz 0x003d0c1c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011450  000001b8  000001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000007e4  00011608  00011608  00012608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001e10  00011dec  00013bfc  00012dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          003d0ef6  00015a0c  00015a0c  00015a0c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00014bfc  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000eb8  00000000  00000000  00014c28  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00002219  00000000  00000000  00015ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002d047  00000000  00000000  00017cf9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00008f3c  00000000  00000000  00044d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00018649  00000000  00000000  0004dc7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000241c  00000000  00000000  000662c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002b5b  00000000  00000000  000686e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000d07b  00000000  00000000  0006b23f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000050  00000000  00000000  000782bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000990  00000000  00000000  00078310  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007d26a  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0007d26d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0007d270  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0007d271  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0007d272  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0007d276  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0007d27a  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0007d27e  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0007d287  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0007d290  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  0007d299  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000001e  00000000  00000000  0007d2a4  2**0
                  CONTENTS, READONLY
 29 .jdi          00004ec8  00000000  00000000  0007d2c2  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00103dc1  00000000  00000000  0008218a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b8 l    d  .text	00000000 .text
00011608 l    d  .rodata	00000000 .rodata
00011dec l    d  .rwdata	00000000 .rwdata
00015a0c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 PS2_ISR.c
00000000 l    df *ABS*	00000000 audio_ISR.c
00000000 l    df *ABS*	00000000 globals.c
00000000 l    df *ABS*	00000000 interval_timer_ISR.c
00000000 l    df *ABS*	00000000 media_interrupt_HAL.c
0001191a l     O .rodata	00000010 C.30.2135
00000000 l    df *ABS*	00000000 pushbutton_ISR.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
00001564 l     F .text	00000058 __sprint_r
0001199a l     O .rodata	00000010 blanks.3452
0001198a l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
000035c8 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00004fc4 l     F .text	00000058 std
000050d0 l     F .text	00000008 __fp_lock
000050d8 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00011dec l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
00013bc8 l     O .rwdata	00000004 charset
000119d0 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
00011b18 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
000091a0 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000a2cc l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0000ab40 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000aba0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000aca0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0000af80 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000b060 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000b1bc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
0000b680 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00013bf0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000b91c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
000127a8 l     O .rwdata	00001060 JTAG_UART
00013808 l     O .rwdata	00000030 AV_Config
00013838 l     O .rwdata	00000030 Audio
00013868 l     O .rwdata	0000002c Char_LCD_16x2
00013894 l     O .rwdata	0000003c Ethernet
000138d0 l     O .rwdata	0000002c IrDA_UART
000138fc l     O .rwdata	0000002c Expansion_JP1
00013928 l     O .rwdata	0000002c Expansion_JP2
00013954 l     O .rwdata	0000002c Green_LEDs
00013980 l     O .rwdata	0000002c HEX3_HEX0
000139ac l     O .rwdata	0000002c HEX7_HEX4
000139d8 l     O .rwdata	0000002c Pushbuttons
00013a04 l     O .rwdata	0000002c Red_LEDs
00013a30 l     O .rwdata	0000002c Slider_Switches
00013a5c l     O .rwdata	00000038 PS2_Port
00013a94 l     O .rwdata	0000002c Serial_Port
00013ac0 l     O .rwdata	00000034 USB
00013af4 l     O .rwdata	00000048 VGA_Char_Buffer
00013b3c l     O .rwdata	00000054 VGA_Pixel_Buffer
00013b90 l     O .rwdata	0000002c SD_Card
0000bdb0 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000bfe8 l     F .text	0000022c altera_avalon_jtag_uart_irq
0000c214 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000c890 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_audio.c
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ethernet.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ethernet_low_level_driver.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_parallel_port.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00010350 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0001053c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00010678 l     F .text	000000dc alt_file_locked
000108dc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
000113f0 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
000115a4 l     F .text	00000040 alt_sim_halt
00006c48 g     F .text	00000094 _mprec_log10
00006d34 g     F .text	00000088 __any_on
000084b4 g     F .text	00000070 _isatty_r
00011af0 g     O .rodata	00000028 __mprec_tinytens
0000b21c g     F .text	0000006c alt_main
0000f82c g     F .text	000003d0 alt_up_pixel_buffer_dma_draw_vline
0000052c g     F .text	00000060 interval_timer_ISR
0000e070 g     F .text	00000058 alt_up_ps2_disable_read_interrupt
003e6398 g     O .bss	00000100 alt_irq
00008524 g     F .text	00000078 _lseek_r
00013bfc g       *ABS*	00000000 __flash_rwdata_start
0000d214 g     F .text	00000034 alt_up_character_lcd_send_cmd
00009cc0 g     F .text	00000088 __eqdf2
00015a10 g     O .bss	00000001 byte2
0000cc04 g     F .text	00000070 alt_up_audio_read_fifo_avail
003e6628 g       *ABS*	00000000 __alt_heap_start
000014ec g     F .text	00000044 printf
0000cc74 g     F .text	00000070 alt_up_audio_record_r
00015a11 g     O .bss	00000001 byte3
00007f0c g     F .text	00000068 __sseek
0000502c g     F .text	000000a4 __sinit
00011170 g     F .text	00000130 __swbuf_r
0000ea50 g     F .text	00000114 alt_up_char_buffer_string
0000de88 g     F .text	00000034 read_CE_bit
00005d04 g     F .text	00000084 _setlocale_r
0000512c g     F .text	00000068 __sfmoreglue
0000b2a8 g     F .text	00000020 __malloc_unlock
0000e21c g     F .text	000000b0 alt_up_ps2_read_data_byte_timeout
0000e758 g     F .text	00000090 alt_up_rs232_read_fd
0000e980 g     F .text	000000d0 alt_up_char_buffer_draw
0000cb7c g     F .text	00000088 alt_up_audio_reset_audio_core
0000675c g     F .text	000000e0 memmove
00015a12 g     O .bss	00000001 byte1
0000511c g     F .text	00000010 _cleanup
00006dbc g     F .text	000000bc _Balloc
0000ec00 g     F .text	000001a0 alt_up_pixel_buffer_dma_draw
00009dd0 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
0000d198 g     F .text	0000007c get_DDRAM_addr
0000ebc0 g     F .text	00000040 alt_up_pixel_buffer_dma_open_dev
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00008440 g     F .text	00000074 _fstat_r
00015a38 g     O .bss	00000004 errno
00015a7c g     O .bss	000f4240 le_buf
0000cb40 g     F .text	0000003c alt_up_audio_write_interrupt_pending
00015a44 g     O .bss	00000004 alt_argv
0001bbbc g       *ABS*	00000000 _gp
00010ae0 g     F .text	00000030 usleep
0000eda0 g     F .text	00000058 alt_up_pixel_buffer_dma_change_back_buffer_address
00012628 g     O .rwdata	00000180 alt_fd_list
00010478 g     F .text	00000094 alt_find_dev
000013b4 g     F .text	000000a0 memcpy
0000d3ac g     F .text	0000004c alt_up_character_lcd_write_fd
0000eb64 g     F .text	0000005c alt_up_char_buffer_clear
00005110 g     F .text	0000000c _cleanup_r
00009f68 g     F .text	000000f8 __floatsidf
00010600 g     F .text	00000078 alt_io_redirect
00009ee0 g     F .text	00000088 __ltdf2
00011608 g       *ABS*	00000000 __DTOR_END__
0000dd14 g     F .text	00000090 alt_up_irda_write_fd
0000e6e4 g     F .text	00000074 alt_up_rs232_read_data
00006b98 g     F .text	000000b0 __ratio
0000d0d8 g     F .text	00000060 alt_up_audio_read_fifo_head
0000ee50 g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
0000dafc g     F .text	0000003c alt_up_irda_get_used_space_in_read_FIFO
0000c42c g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00001530 g     F .text	00000034 _printf_r
0000a408 g     F .text	00000008 __udivsi3
0000aec0 g     F .text	000000c0 isatty
0000d854 g     F .text	00000044 alt_up_ethernet_reg_write
00011a00 g     O .rodata	000000c8 __mprec_tens
0000f4dc g     F .text	00000350 alt_up_pixel_buffer_dma_draw_hline
00005ce0 g     F .text	00000008 __locale_charset
0000daa4 g     F .text	00000058 alt_up_irda_disable_read_interrupt
00010e34 g     F .text	00000090 alt_icache_flush
00015a2c g     O .bss	00000004 __malloc_top_pad
00015a0c g     O .bss	00000004 flag
00013bc4 g     O .rwdata	00000004 __mb_cur_max
00005ce8 g     F .text	0000000c _localeconv_r
000074b4 g     F .text	0000003c __i2b
000056c4 g     F .text	0000049c __sfvwrite_r
00007e94 g     F .text	00000070 _sbrk_r
003e637c g     O .bss	0000001c up_dev
0000fcc0 g     F .text	000000d0 helper_plot_pixel
0000859c g     F .text	00000078 _read_r
000121ec g     O .rwdata	0000000c __lc_ctype
00013be4 g     O .rwdata	00000004 alt_max_fd
0000e64c g     F .text	00000050 alt_up_rs232_check_parity
0000d138 g     F .text	00000060 alt_up_audio_write_fifo_head
0000d6c8 g     F .text	00000110 alt_up_ethernet_init
0000a844 g     F .text	00000138 __unpack_d
0000831c g     F .text	00000110 _fclose_r
0000debc g     F .text	00000034 read_num_bytes_available
00004f90 g     F .text	00000034 fflush
00015a30 g     O .bss	00000004 __malloc_max_sbrked_mem
0000ad00 g     F .text	000001c0 alt_irq_register
0000de24 g     F .text	00000034 read_RI_bit
00009630 g     F .text	00000074 __adddf3
00006a78 g     F .text	00000120 __b2d
0000ee84 g     F .text	00000164 alt_up_pixel_buffer_dma_clear_screen
00008bf0 g     F .text	000005b0 __umoddi3
0000b0cc g     F .text	000000f0 lseek
00013bc0 g     O .rwdata	00000004 _global_impure_ptr
00007830 g     F .text	000005f4 _realloc_r
003e6628 g       *ABS*	00000000 __bss_end
0000efe8 g     F .text	000004f4 alt_up_pixel_buffer_dma_draw_box
000109d4 g     F .text	0000010c alt_tick
00008614 g     F .text	000005dc __udivdi3
00011ac8 g     O .rodata	00000028 __mprec_bigtens
00007710 g     F .text	00000120 __s2b
0000a138 g     F .text	00000194 __floatunsidf
00006998 g     F .text	00000060 __mcmp
0c000000 g       *ABS*	00000000 __alt_mem_Flash_flash_data
0000c98c g     F .text	00000040 alt_up_audio_open_dev
0000df24 g     F .text	0000002c read_data_byte
000050f8 g     F .text	00000018 __fp_lock_all
0000cdc8 g     F .text	00000070 alt_up_audio_play_r
0001093c g     F .text	00000098 alt_alarm_stop
0000de58 g     F .text	00000030 read_RE_bit
00015a3c g     O .bss	00000004 alt_irq_active
0000db38 g     F .text	00000040 alt_up_irda_get_available_space_in_write_FIFO
000000ec g     F .exceptions	000000cc alt_irq_handler
00012600 g     O .rwdata	00000028 alt_dev_null
0000d694 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
0000dde4 g     F .text	00000040 alt_up_parallel_port_open_dev
0000e0c8 g     F .text	00000078 alt_up_ps2_write_data_byte
00010280 g     F .text	0000001c alt_dcache_flush_all
00006864 g     F .text	00000070 __hi0bits
0000fbfc g     F .text	000000c4 alt_up_pixel_buffer_dma_draw_rectangle
0000a060 g     F .text	000000d8 __fixdfsi
00013bfc g       *ABS*	00000000 __ram_rwdata_end
00013bdc g     O .rwdata	00000008 alt_dev_list
0000b7fc g     F .text	00000120 write
00011088 g     F .text	000000e8 _putc_r
0000fd90 g     F .text	0000039c alt_up_pixel_buffer_dma_draw_line
00011dec g       *ABS*	00000000 __ram_rodata_end
0000abcc g     F .text	000000d4 fstat
0000e7e8 g     F .text	00000094 alt_up_rs232_write_fd
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
000075f0 g     F .text	00000120 __pow5mult
00015a20 g     O .bss	00000004 __nlocale_changed
0000a410 g     F .text	00000008 __umodsi3
003e6628 g       *ABS*	00000000 end
0000e43c g     F .text	000000a8 alt_up_ps2_write_fd
0000db78 g     F .text	00000050 alt_up_irda_check_parity
0000e8bc g     F .text	00000084 alt_up_char_buffer_init
00109cbc g     O .bss	000f4240 r_buf
0000bf30 g     F .text	000000b8 altera_avalon_jtag_uart_init
00011604 g       *ABS*	00000000 __CTOR_LIST__
00800000 g       *ABS*	00000000 __alt_stack_pointer
000011d8 g     F .text	00000124 HEX_PS2
0000c904 g     F .text	00000088 alt_avalon_timer_sc_init
0000a4b0 g     F .text	00000080 __clzsi2
0000c650 g     F .text	00000240 altera_avalon_jtag_uart_write
0000501c g     F .text	00000004 __sfp_lock_acquire
00006678 g     F .text	000000e4 memchr
0000d2bc g     F .text	00000078 alt_up_character_lcd_write
000015bc g     F .text	00001eac ___vfprintf_internal_r
000053b0 g     F .text	00000314 _free_r
0000b2c8 g     F .text	00000258 alt_printf
000113f4 g     F .text	000001b0 __call_exitprocs
00015a24 g     O .bss	00000004 __mlocale_changed
00013bd0 g     O .rwdata	00000004 __malloc_sbrk_base
000001b8 g     F .text	0000003c _start
00015a4c g     O .bss	00000004 _alt_tick_rate
0000cfac g     F .text	0000012c alt_up_audio_write_fifo
00007180 g     F .text	0000014c __lshift
00015a50 g     O .bss	00000004 _alt_nticks
0000b560 g     F .text	00000120 read
0000b9b0 g     F .text	00000400 alt_sys_init
0000d520 g     F .text	000000b0 alt_up_character_lcd_shift_display
0000cea8 g     F .text	00000104 alt_up_audio_read_fifo
000112bc g     F .text	00000134 __register_exitproc
0000cab4 g     F .text	00000050 alt_up_audio_disable_write_interrupt
0000e348 g     F .text	00000058 alt_up_ps2_clear_fifo
0000e60c g     F .text	00000040 alt_up_rs232_get_available_space_in_write_FIFO
000072cc g     F .text	000001e8 __multiply
0000d5d0 g     F .text	00000090 alt_up_character_lcd_erase_pos
0000c2c4 g     F .text	00000074 altera_avalon_jtag_uart_close
00011dec g       *ABS*	00000000 __ram_rwdata_start
00011608 g       *ABS*	00000000 __ram_rodata_start
00015a54 g     O .bss	00000028 __malloc_current_mallinfo
00006e78 g     F .text	0000017c __d2b
0000bde8 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00010d7c g     F .text	000000b8 alt_get_fd
001fdefc g     O .bss	000f4240 re_buf
00010b30 g     F .text	0000012c alt_busy_sleep
0000a97c g     F .text	000000c8 __fpcmp_parts_d
000082ac g     F .text	00000070 _close_r
0000ca68 g     F .text	0000004c alt_up_audio_enable_write_interrupt
00010f10 g     F .text	00000074 memcmp
0000be98 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
003e6628 g       *ABS*	00000000 __alt_stack_base
0000bee0 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
0000da50 g     F .text	00000054 alt_up_irda_enable_read_interrupt
0000348c g     F .text	0000013c __swsetup_r
00009a68 g     F .text	00000258 __divdf3
0000ca18 g     F .text	00000050 alt_up_audio_disable_read_interrupt
00005194 g     F .text	000000f0 __sfp
00006cdc g     F .text	00000058 __copybits
000121f8 g     O .rwdata	00000408 __malloc_av_
00005028 g     F .text	00000004 __sinit_lock_release
000096a4 g     F .text	000003c4 __muldf3
00007ff0 g     F .text	00000060 __sread
0000e578 g     F .text	00000058 alt_up_rs232_disable_read_interrupt
00010c5c g     F .text	00000120 alt_find_file
0001029c g     F .text	000000b4 alt_dev_llist_insert
0000b288 g     F .text	00000020 __malloc_lock
0000b740 g     F .text	000000bc sbrk
00004d94 g     F .text	000001fc _fflush_r
000081f8 g     F .text	000000b4 _calloc_r
00015a0c g       *ABS*	00000000 __bss_start
00001454 g     F .text	00000098 memset
0000058c g     F .text	00000c4c main
0000cd54 g     F .text	00000074 alt_up_audio_write_fifo_space
00015a48 g     O .bss	00000004 alt_envp
00015a34 g     O .bss	00000004 __malloc_max_total_mem
0000edf8 g     F .text	00000058 alt_up_pixel_buffer_dma_swap_buffers
0000e940 g     F .text	00000040 alt_up_char_buffer_open_dev
0000be40 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
000112a0 g     F .text	0000001c __swbuf
0000d470 g     F .text	000000b0 alt_up_character_lcd_shift_cursor
00007f04 g     F .text	00000008 __sclose
00800000 g       *ABS*	00000000 __alt_heap_limit
0000842c g     F .text	00000014 fclose
0000e2cc g     F .text	0000007c alt_up_ps2_read_data_byte
00015a14 g     O .bss	00000004 timeout
003e6498 g     O .bss	00000190 _atexit0
000037e0 g     F .text	000015b4 _dtoa_r
00005f38 g     F .text	00000740 _malloc_r
00013be8 g     O .rwdata	00000004 alt_errno
00005c28 g     F .text	000000b8 _fwalk
0000dbc8 g     F .text	00000048 alt_up_irda_write_data
0000e4e4 g     F .text	00000040 alt_up_ps2_open_dev
00010f84 g     F .text	00000104 putc
0000a348 g     F .text	00000060 __divsi3
00011b24 g     O .rodata	00000014 __thenan_df
0000d27c g     F .text	00000040 alt_up_character_lcd_open_dev
00005284 g     F .text	0000012c _malloc_trim_r
0000e01c g     F .text	00000054 alt_up_ps2_enable_read_interrupt
00011608 g       *ABS*	00000000 __CTOR_END__
0000d248 g     F .text	00000034 alt_up_character_lcd_init
00008050 g     F .text	000000bc strcmp
00011608 g       *ABS*	00000000 __flash_rodata_start
00011608 g       *ABS*	00000000 __DTOR_LIST__
0000e87c g     F .text	00000040 alt_up_rs232_open_dev
00009d48 g     F .text	00000088 __nedf2
0000b97c g     F .text	00000034 alt_irq_init
0000b6e0 g     F .text	00000060 alt_release_fd
0000def0 g     F .text	00000034 read_data_valid
0000d660 g     F .text	00000034 alt_up_character_lcd_cursor_off
00011b38 g     O .rodata	00000100 __clz_tab
00015a28 g     O .bss	00000004 _PathLocale
0000e1b0 g     F .text	0000006c alt_up_ps2_write_data_byte_with_ack
00010ec4 g     F .text	00000014 atexit
00008180 g     F .text	00000078 _write_r
00005d88 g     F .text	0000001c setlocale
000012fc g     F .text	000000b8 pushbutton_ISR
000001f4 g     F .text	000000c4 PS2_ISR
00013bbc g     O .rwdata	00000004 _impure_ptr
00015a18 g     O .bss	00000004 buf_index_play
00015a40 g     O .bss	00000004 alt_argc
00010414 g     F .text	00000064 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
000069f8 g     F .text	00000080 __ulp
00007e24 g     F .text	00000040 __isinfd
000050e0 g     F .text	00000018 __fp_unlock_all
00013bd4 g     O .rwdata	00000008 alt_fs_list
0000e524 g     F .text	00000054 alt_up_rs232_enable_read_interrupt
0000cce4 g     F .text	00000070 alt_up_audio_record_l
0000e69c g     F .text	00000048 alt_up_rs232_write_data
0000d898 g     F .text	000000e0 alt_up_ethernet_phy_reg_read
00000020 g       *ABS*	00000000 __ram_exceptions_start
00005cf4 g     F .text	00000010 localeconv
00013bfc g       *ABS*	00000000 _edata
003e6628 g       *ABS*	00000000 _end
000001b8 g       *ABS*	00000000 __ram_exceptions_end
0000c338 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
000002b8 g     F .text	00000274 audio_ISR
002f213c g     O .bss	000f4240 l_buf
0000ce38 g     F .text	00000070 alt_up_audio_play_l
00007f74 g     F .text	0000007c __swrite
00013bcc g     O .rwdata	00000004 __malloc_trim_threshold
00010b10 g     F .text	00000020 altera_nios2_qsys_irq_init
00010ed8 g     F .text	00000038 exit
0000dc10 g     F .text	00000074 alt_up_irda_read_data
00005b60 g     F .text	000000c8 _fwalk_reent
0000df50 g     F .text	000000cc alt_up_ps2_init
00006ff4 g     F .text	0000018c __mdiff
0000a3a8 g     F .text	00000060 __modsi3
00800000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00005020 g     F .text	00000004 __sfp_lock_release
0000d334 g     F .text	00000078 alt_up_character_lcd_string
0000dda4 g     F .text	00000040 alt_up_irda_open_dev
000115e4 g     F .text	00000020 _exit
00007e64 g     F .text	00000030 __isnand
0001012c g     F .text	00000154 alt_alarm_start
0000a418 g     F .text	00000098 __muldi3
00005da4 g     F .text	00000194 __smakebuf_r
0000e140 g     F .text	00000070 alt_up_ps2_wait_for_ack
0000810c g     F .text	00000074 strlen
0000d7d8 g     F .text	00000040 alt_up_ethernet_open_dev
00010754 g     F .text	00000188 open
00009e58 g     F .text	00000088 __gedf2
0000b520 g     F .text	00000040 alt_putchar
00015a1c g     O .bss	00000004 buf_index_record
0001050c g     F .text	00000030 alt_icache_flush_all
0000d978 g     F .text	000000d8 alt_up_ethernet_phy_reg_write
0000d3f8 g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
00013bec g     O .rwdata	00000004 alt_priority_mask
00003468 g     F .text	00000024 __vfprintf_internal
0000e3a0 g     F .text	0000009c alt_up_ps2_read_fd
000095b0 g     F .text	00000080 __subdf3
0000dc84 g     F .text	00000090 alt_up_irda_read_fd
000068d4 g     F .text	000000c4 __lo0bits
00013bf4 g     O .rwdata	00000008 alt_alarm_list
000103b0 g     F .text	00000064 _do_ctors
0000e5d0 g     F .text	0000003c alt_up_rs232_get_used_space_in_read_FIFO
0000aa44 g     F .text	000000fc close
0000afe0 g     F .text	00000080 alt_load
0000d818 g     F .text	0000003c alt_up_ethernet_reg_read
0000c9cc g     F .text	0000004c alt_up_audio_enable_read_interrupt
0000a530 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
00005024 g     F .text	00000004 __sinit_lock_acquire
000074f0 g     F .text	00000100 __multadd
0000683c g     F .text	00000028 _Bfree
0000cb04 g     F .text	0000003c alt_up_audio_read_interrupt_pending



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406e14 	ori	at,at,440
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  fc:	0005313a 	rdctl	r2,ipending
 100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 10c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 110:	00800044 	movi	r2,1
 114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 118:	e0ffff17 	ldw	r3,-4(fp)
 11c:	e0bffe17 	ldw	r2,-8(fp)
 120:	1884703a 	and	r2,r3,r2
 124:	1005003a 	cmpeq	r2,r2,zero
 128:	1000171e 	bne	r2,zero,188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 12c:	e0bffd17 	ldw	r2,-12(fp)
 130:	00c00fb4 	movhi	r3,62
 134:	18d8e604 	addi	r3,r3,25496
 138:	100490fa 	slli	r2,r2,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	11800017 	ldw	r6,0(r2)
 144:	e0bffd17 	ldw	r2,-12(fp)
 148:	00c00fb4 	movhi	r3,62
 14c:	18d8e604 	addi	r3,r3,25496
 150:	100490fa 	slli	r2,r2,3
 154:	10c5883a 	add	r2,r2,r3
 158:	10800104 	addi	r2,r2,4
 15c:	11000017 	ldw	r4,0(r2)
 160:	e17ffd17 	ldw	r5,-12(fp)
 164:	303ee83a 	callr	r6
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 168:	0005313a 	rdctl	r2,ipending
 16c:	e0bffb15 	stw	r2,-20(fp)

  return active;
 170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 178:	e0bfff17 	ldw	r2,-4(fp)
 17c:	1004c03a 	cmpne	r2,r2,zero
 180:	103fe21e 	bne	r2,zero,10c <alt_irq_handler+0x20>
 184:	00000706 	br	1a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 188:	e0bffe17 	ldw	r2,-8(fp)
 18c:	1085883a 	add	r2,r2,r2
 190:	e0bffe15 	stw	r2,-8(fp)
      i++;
 194:	e0bffd17 	ldw	r2,-12(fp)
 198:	10800044 	addi	r2,r2,1
 19c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a0:	003fdd06 	br	118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a4:	e037883a 	mov	sp,fp
 1a8:	dfc00117 	ldw	ra,4(sp)
 1ac:	df000017 	ldw	fp,0(sp)
 1b0:	dec00204 	addi	sp,sp,8
 1b4:	f800283a 	ret

Disassembly of section .text:

000001b8 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1b8:	06c02034 	movhi	sp,128
    ori sp, sp, %lo(__alt_stack_pointer)
     1bc:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1c0:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1c4:	d6aeef14 	ori	gp,gp,48060
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1c8:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1cc:	10968314 	ori	r2,r2,23052

    movhi r3, %hi(__bss_end)
     1d0:	00c00fb4 	movhi	r3,62
    ori r3, r3, %lo(__bss_end)
     1d4:	18d98a14 	ori	r3,r3,26152

    beq r2, r3, 1f
     1d8:	10c00326 	beq	r2,r3,1e8 <_start+0x30>

0:
    stw zero, (r2)
     1dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1e4:	10fffd36 	bltu	r2,r3,1dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1e8:	000afe00 	call	afe0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1ec:	000b21c0 	call	b21c <alt_main>

000001f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1f0:	003fff06 	br	1f0 <alt_after_alt_main>

000001f4 <PS2_ISR>:
 * This routine checks which KEY has been pressed. If it is KEY1 or KEY2, it writes this 
 * value to the global variable key_pressed. If it is KEY3 then it loads the SW switch 
 * values and stores in the variable pattern
****************************************************************************************/
void PS2_ISR(struct alt_up_dev *up_dev, unsigned int id)
{
     1f4:	defffb04 	addi	sp,sp,-20
     1f8:	dfc00415 	stw	ra,16(sp)
     1fc:	df000315 	stw	fp,12(sp)
     200:	df000304 	addi	fp,sp,12
     204:	e13ffe15 	stw	r4,-8(fp)
     208:	e17fff15 	stw	r5,-4(fp)
	unsigned char PS2_data;

	/* check for PS/2 data--display on HEX displays */
	if (alt_up_ps2_read_data_byte (up_dev->PS2_dev, &PS2_data) == 0)
     20c:	e0bffe17 	ldw	r2,-8(fp)
     210:	11000217 	ldw	r4,8(r2)
     214:	e17ffd04 	addi	r5,fp,-12
     218:	000e2cc0 	call	e2cc <alt_up_ps2_read_data_byte>
     21c:	1004c03a 	cmpne	r2,r2,zero
     220:	1000201e 	bne	r2,zero,2a4 <PS2_ISR+0xb0>
	{
		/* allows save the last three bytes of data */
		byte1 = byte2;
     224:	00800074 	movhi	r2,1
     228:	10968404 	addi	r2,r2,23056
     22c:	10c00003 	ldbu	r3,0(r2)
     230:	00800074 	movhi	r2,1
     234:	10968484 	addi	r2,r2,23058
     238:	10c00005 	stb	r3,0(r2)
		byte2 = byte3;
     23c:	00800074 	movhi	r2,1
     240:	10968444 	addi	r2,r2,23057
     244:	10c00003 	ldbu	r3,0(r2)
     248:	00800074 	movhi	r2,1
     24c:	10968404 	addi	r2,r2,23056
     250:	10c00005 	stb	r3,0(r2)
		byte3 = PS2_data;
     254:	e0fffd03 	ldbu	r3,-12(fp)
     258:	00800074 	movhi	r2,1
     25c:	10968444 	addi	r2,r2,23057
     260:	10c00005 	stb	r3,0(r2)
		if ( (byte2 == (unsigned char) 0xAA) && (byte3 == (unsigned char) 0x00) )
     264:	00800074 	movhi	r2,1
     268:	10968404 	addi	r2,r2,23056
     26c:	10800003 	ldbu	r2,0(r2)
     270:	10803fcc 	andi	r2,r2,255
     274:	10802a98 	cmpnei	r2,r2,170
     278:	10000a1e 	bne	r2,zero,2a4 <PS2_ISR+0xb0>
     27c:	00800074 	movhi	r2,1
     280:	10968444 	addi	r2,r2,23057
     284:	10800003 	ldbu	r2,0(r2)
     288:	10803fcc 	andi	r2,r2,255
     28c:	1004c03a 	cmpne	r2,r2,zero
     290:	1000041e 	bne	r2,zero,2a4 <PS2_ISR+0xb0>
			// mouse inserted; initialize sending of data
			(void) alt_up_ps2_write_data_byte (up_dev->PS2_dev, (unsigned char) 0xF4);
     294:	e0bffe17 	ldw	r2,-8(fp)
     298:	11000217 	ldw	r4,8(r2)
     29c:	01403d04 	movi	r5,244
     2a0:	000e0c80 	call	e0c8 <alt_up_ps2_write_data_byte>
	}
	return;
}
     2a4:	e037883a 	mov	sp,fp
     2a8:	dfc00117 	ldw	ra,4(sp)
     2ac:	df000017 	ldw	fp,0(sp)
     2b0:	dec00204 	addi	sp,sp,8
     2b4:	f800283a 	ret

000002b8 <audio_ISR>:
 *                                                                          
 * This interrupt service routine records or plays back audio, depending on which type
 * interrupt (read or write) is pending in the audio device.
****************************************************************************************/
void audio_ISR(struct alt_up_dev *up_dev, unsigned int id)
{
     2b8:	defff904 	addi	sp,sp,-28
     2bc:	dfc00615 	stw	ra,24(sp)
     2c0:	df000515 	stw	fp,20(sp)
     2c4:	df000504 	addi	fp,sp,20
     2c8:	e13ffe15 	stw	r4,-8(fp)
     2cc:	e17fff15 	stw	r5,-4(fp)
	int num_read; int num_written;

	unsigned int fifospace;
		
	if (alt_up_audio_read_interrupt_pending(up_dev->audio_dev))	// check for read interrupt
     2d0:	e0bffe17 	ldw	r2,-8(fp)
     2d4:	11000417 	ldw	r4,16(r2)
     2d8:	000cb040 	call	cb04 <alt_up_audio_read_interrupt_pending>
     2dc:	1005003a 	cmpeq	r2,r2,zero
     2e0:	1000451e 	bne	r2,zero,3f8 <audio_ISR+0x140>
	{
		alt_up_parallel_port_write_data (up_dev->green_LEDs_dev, 0x1); // set LEDG[0] on
     2e4:	e0bffe17 	ldw	r2,-8(fp)
     2e8:	10800117 	ldw	r2,4(r2)
     2ec:	10800a17 	ldw	r2,40(r2)
     2f0:	1007883a 	mov	r3,r2
     2f4:	00800044 	movi	r2,1
     2f8:	18800035 	stwio	r2,0(r3)

		// store data until the buffer is full
		if (buf_index_record < BUF_SIZE)
     2fc:	00800074 	movhi	r2,1
     300:	10968704 	addi	r2,r2,23068
     304:	10c00017 	ldw	r3,0(r2)
     308:	00800134 	movhi	r2,4
     30c:	10b423c4 	addi	r2,r2,-12145
     310:	10c03916 	blt	r2,r3,3f8 <audio_ISR+0x140>
		{
			num_read = alt_up_audio_record_r (up_dev->audio_dev, &(r_buf[buf_index_record]), 
     314:	e0bffe17 	ldw	r2,-8(fp)
     318:	11000417 	ldw	r4,16(r2)
     31c:	00800074 	movhi	r2,1
     320:	10968704 	addi	r2,r2,23068
     324:	10800017 	ldw	r2,0(r2)
     328:	1085883a 	add	r2,r2,r2
     32c:	1085883a 	add	r2,r2,r2
     330:	1007883a 	mov	r3,r2
     334:	00800474 	movhi	r2,17
     338:	10a72f04 	addi	r2,r2,-25412
     33c:	1885883a 	add	r2,r3,r2
     340:	100b883a 	mov	r5,r2
     344:	00800074 	movhi	r2,1
     348:	10968704 	addi	r2,r2,23068
     34c:	10c00017 	ldw	r3,0(r2)
     350:	00800134 	movhi	r2,4
     354:	10b42404 	addi	r2,r2,-12144
     358:	10cdc83a 	sub	r6,r2,r3
     35c:	000cc740 	call	cc74 <alt_up_audio_record_r>
     360:	e0bffd15 	stw	r2,-12(fp)
				BUF_SIZE - buf_index_record);
			/* assume we can read same # words from the left and right */
			(void) alt_up_audio_record_l (up_dev->audio_dev, &(l_buf[buf_index_record]), 
     364:	e0bffe17 	ldw	r2,-8(fp)
     368:	11000417 	ldw	r4,16(r2)
     36c:	00800074 	movhi	r2,1
     370:	10968704 	addi	r2,r2,23068
     374:	10800017 	ldw	r2,0(r2)
     378:	1085883a 	add	r2,r2,r2
     37c:	1085883a 	add	r2,r2,r2
     380:	1007883a 	mov	r3,r2
     384:	00800bf4 	movhi	r2,47
     388:	10884f04 	addi	r2,r2,8508
     38c:	1885883a 	add	r2,r3,r2
     390:	100b883a 	mov	r5,r2
     394:	e1bffd17 	ldw	r6,-12(fp)
     398:	000cce40 	call	cce4 <alt_up_audio_record_l>
				num_read);
			buf_index_record += num_read;
     39c:	00800074 	movhi	r2,1
     3a0:	10968704 	addi	r2,r2,23068
     3a4:	10c00017 	ldw	r3,0(r2)
     3a8:	e0bffd17 	ldw	r2,-12(fp)
     3ac:	1887883a 	add	r3,r3,r2
     3b0:	00800074 	movhi	r2,1
     3b4:	10968704 	addi	r2,r2,23068
     3b8:	10c00015 	stw	r3,0(r2)

			if (buf_index_record == BUF_SIZE)
     3bc:	00800074 	movhi	r2,1
     3c0:	10968704 	addi	r2,r2,23068
     3c4:	10c00017 	ldw	r3,0(r2)
     3c8:	00800134 	movhi	r2,4
     3cc:	10b42404 	addi	r2,r2,-12144
     3d0:	1880091e 	bne	r3,r2,3f8 <audio_ISR+0x140>
			{
				// done recording
				flag=1;
     3d4:	00800044 	movi	r2,1
     3d8:	d0a79415 	stw	r2,-25008(gp)
				alt_up_parallel_port_write_data (up_dev->green_LEDs_dev, 0); // turn off LEDG
     3dc:	e0bffe17 	ldw	r2,-8(fp)
     3e0:	10800117 	ldw	r2,4(r2)
     3e4:	10800a17 	ldw	r2,40(r2)
     3e8:	10000035 	stwio	zero,0(r2)
				alt_up_audio_disable_read_interrupt(up_dev->audio_dev);
     3ec:	e0bffe17 	ldw	r2,-8(fp)
     3f0:	11000417 	ldw	r4,16(r2)
     3f4:	000ca180 	call	ca18 <alt_up_audio_disable_read_interrupt>
			}
		}
	}
	if (alt_up_audio_write_interrupt_pending(up_dev->audio_dev))	// check for write interrupt
     3f8:	e0bffe17 	ldw	r2,-8(fp)
     3fc:	11000417 	ldw	r4,16(r2)
     400:	000cb400 	call	cb40 <alt_up_audio_write_interrupt_pending>
     404:	1005003a 	cmpeq	r2,r2,zero
     408:	1000431e 	bne	r2,zero,518 <audio_ISR+0x260>
	{
		alt_up_parallel_port_write_data (up_dev->green_LEDs_dev, 0x2); // set LEDG[1] on
     40c:	e0bffe17 	ldw	r2,-8(fp)
     410:	10800117 	ldw	r2,4(r2)
     414:	10800a17 	ldw	r2,40(r2)
     418:	1007883a 	mov	r3,r2
     41c:	00800084 	movi	r2,2
     420:	18800035 	stwio	r2,0(r3)

		// output data until the buffer is empty 
		if (buf_index_play < BUF_SIZE)
     424:	00800074 	movhi	r2,1
     428:	10968604 	addi	r2,r2,23064
     42c:	10c00017 	ldw	r3,0(r2)
     430:	00800134 	movhi	r2,4
     434:	10b423c4 	addi	r2,r2,-12145
     438:	10c03716 	blt	r2,r3,518 <audio_ISR+0x260>
		{
			num_written = alt_up_audio_play_r (up_dev->audio_dev, &(re_buf[buf_index_play]),
     43c:	e0bffe17 	ldw	r2,-8(fp)
     440:	11000417 	ldw	r4,16(r2)
     444:	00800074 	movhi	r2,1
     448:	10968604 	addi	r2,r2,23064
     44c:	10800017 	ldw	r2,0(r2)
     450:	1085883a 	add	r2,r2,r2
     454:	1085883a 	add	r2,r2,r2
     458:	1007883a 	mov	r3,r2
     45c:	00800834 	movhi	r2,32
     460:	10b7bf04 	addi	r2,r2,-8452
     464:	1885883a 	add	r2,r3,r2
     468:	100b883a 	mov	r5,r2
     46c:	00800074 	movhi	r2,1
     470:	10968604 	addi	r2,r2,23064
     474:	10c00017 	ldw	r3,0(r2)
     478:	00800134 	movhi	r2,4
     47c:	10b42404 	addi	r2,r2,-12144
     480:	10cdc83a 	sub	r6,r2,r3
     484:	000cdc80 	call	cdc8 <alt_up_audio_play_r>
     488:	e0bffc15 	stw	r2,-16(fp)
			 	BUF_SIZE - buf_index_play);
			/* assume that we can write the same # words to the left and right */
			(void) alt_up_audio_play_l (up_dev->audio_dev, &(le_buf[buf_index_play]),
     48c:	e0bffe17 	ldw	r2,-8(fp)
     490:	11000417 	ldw	r4,16(r2)
     494:	00800074 	movhi	r2,1
     498:	10968604 	addi	r2,r2,23064
     49c:	10800017 	ldw	r2,0(r2)
     4a0:	1085883a 	add	r2,r2,r2
     4a4:	1085883a 	add	r2,r2,r2
     4a8:	1007883a 	mov	r3,r2
     4ac:	00800074 	movhi	r2,1
     4b0:	10969f04 	addi	r2,r2,23164
     4b4:	1885883a 	add	r2,r3,r2
     4b8:	100b883a 	mov	r5,r2
     4bc:	e1bffc17 	ldw	r6,-16(fp)
     4c0:	000ce380 	call	ce38 <alt_up_audio_play_l>
				num_written);
			buf_index_play += num_written;
     4c4:	00800074 	movhi	r2,1
     4c8:	10968604 	addi	r2,r2,23064
     4cc:	10c00017 	ldw	r3,0(r2)
     4d0:	e0bffc17 	ldw	r2,-16(fp)
     4d4:	1887883a 	add	r3,r3,r2
     4d8:	00800074 	movhi	r2,1
     4dc:	10968604 	addi	r2,r2,23064
     4e0:	10c00015 	stw	r3,0(r2)
	
			if (buf_index_play == BUF_SIZE)
     4e4:	00800074 	movhi	r2,1
     4e8:	10968604 	addi	r2,r2,23064
     4ec:	10c00017 	ldw	r3,0(r2)
     4f0:	00800134 	movhi	r2,4
     4f4:	10b42404 	addi	r2,r2,-12144
     4f8:	1880071e 	bne	r3,r2,518 <audio_ISR+0x260>
			{
				// done playback
				alt_up_parallel_port_write_data (up_dev->green_LEDs_dev, 0); // turn off LEDG
     4fc:	e0bffe17 	ldw	r2,-8(fp)
     500:	10800117 	ldw	r2,4(r2)
     504:	10800a17 	ldw	r2,40(r2)
     508:	10000035 	stwio	zero,0(r2)
				alt_up_audio_disable_write_interrupt(up_dev->audio_dev);
     50c:	e0bffe17 	ldw	r2,-8(fp)
     510:	11000417 	ldw	r4,16(r2)
     514:	000cab40 	call	cab4 <alt_up_audio_disable_write_interrupt>
			}
		}
	}
	return;
}
     518:	e037883a 	mov	sp,fp
     51c:	dfc00117 	ldw	ra,4(sp)
     520:	df000017 	ldw	fp,0(sp)
     524:	dec00204 	addi	sp,sp,8
     528:	f800283a 	ret

0000052c <interval_timer_ISR>:
 * Shifts a PATTERN being displayed on the LCD character display. The shift 
 * direction is determined by the external variable KEY_PRESSED.
 * 
******************************************************************************/
void interval_timer_ISR(struct alt_up_dev *up_dev, unsigned int id)
{
     52c:	defffb04 	addi	sp,sp,-20
     530:	dfc00415 	stw	ra,16(sp)
     534:	df000315 	stw	fp,12(sp)
     538:	df000304 	addi	fp,sp,12
     53c:	e13ffe15 	stw	r4,-8(fp)
     540:	e17fff15 	stw	r5,-4(fp)
	volatile int *interval_timer_ptr = (int *) 0x10002000;
     544:	00840034 	movhi	r2,4096
     548:	10880004 	addi	r2,r2,8192
     54c:	e0bffd15 	stw	r2,-12(fp)

	*(interval_timer_ptr) = 0; 										// clear the interrupt
     550:	e0bffd17 	ldw	r2,-12(fp)
     554:	10000015 	stw	zero,0(r2)
	timeout = 1;															// set global variable
     558:	00c00074 	movhi	r3,1
     55c:	18d68504 	addi	r3,r3,23060
     560:	00800044 	movi	r2,1
     564:	18800015 	stw	r2,0(r3)

	/* shift the LCD display to the left */
	alt_up_character_lcd_shift_display (up_dev->lcd_dev, -1);
     568:	e0bffe17 	ldw	r2,-8(fp)
     56c:	11000317 	ldw	r4,12(r2)
     570:	017fffc4 	movi	r5,-1
     574:	000d5200 	call	d520 <alt_up_character_lcd_shift_display>

	return;
}
     578:	e037883a 	mov	sp,fp
     57c:	dfc00117 	ldw	ra,4(sp)
     580:	df000017 	ldw	fp,0(sp)
     584:	dec00204 	addi	sp,sp,8
     588:	f800283a 	ret

0000058c <main>:
 * 	   interrupts
 * 	6. The speed of scrolling the LCD display and of refreshing the VGA screen
 * 	   are controlled by interrupts from the interval timer
********************************************************************************/
int main(void)
{
     58c:	defffe04 	addi	sp,sp,-8
     590:	dfc00115 	stw	ra,4(sp)
     594:	df000015 	stw	fp,0(sp)
     598:	d839883a 	mov	fp,sp
     59c:	023ff874 	movhi	r8,65505
     5a0:	421ea104 	addi	r8,r8,31364
     5a4:	da37883a 	add	sp,sp,r8
	alt_up_character_lcd_dev *lcd_dev;
	alt_up_audio_dev *audio_dev;
	alt_up_char_buffer_dev *char_buffer_dev;
	alt_up_pixel_buffer_dma_dev *pixel_buffer_dev;
	/* declare volatile pointer for interval timer, which does not have HAL functions */
	volatile int * interval_timer_ptr = (int *) 0x10002000;	// interal timer base address
     5a8:	00840034 	movhi	r2,4096
     5ac:	10880004 	addi	r2,r2,8192
     5b0:	00fff874 	movhi	r3,65505
     5b4:	18deb404 	addi	r3,r3,31440
     5b8:	1f07883a 	add	r3,r3,fp
     5bc:	18800015 	stw	r2,0(r3)
int i;
	/* initialize some variables */
	byte1 = 0; byte2 = 0; byte3 = 0; 			// used to hold PS/2 data
     5c0:	00800074 	movhi	r2,1
     5c4:	10968484 	addi	r2,r2,23058
     5c8:	10000005 	stb	zero,0(r2)
     5cc:	00800074 	movhi	r2,1
     5d0:	10968404 	addi	r2,r2,23056
     5d4:	10000005 	stb	zero,0(r2)
     5d8:	00800074 	movhi	r2,1
     5dc:	10968444 	addi	r2,r2,23057
     5e0:	10000005 	stb	zero,0(r2)
	timeout = 0;										// synchronize with the timer
     5e4:	00800074 	movhi	r2,1
     5e8:	10968504 	addi	r2,r2,23060
     5ec:	10000015 	stw	zero,0(r2)
	int blue_x1; int blue_y1; int blue_x2; int blue_y2; 
	int screen_x; int screen_y; int char_buffer_x; int char_buffer_y;
	short color;

	/* set the interval timer period for scrolling the HEX displays */
	int counter = 0x960000;				// 1/(50 MHz) x (0x960000) ~= 200 msec
     5f0:	008025b4 	movhi	r2,150
     5f4:	013ff874 	movhi	r4,65505
     5f8:	211ea404 	addi	r4,r4,31376
     5fc:	2709883a 	add	r4,r4,fp
     600:	20800015 	stw	r2,0(r4)
	*(interval_timer_ptr + 0x2) = (counter & 0xFFFF);
     604:	01bff874 	movhi	r6,65505
     608:	319eb404 	addi	r6,r6,31440
     60c:	370d883a 	add	r6,r6,fp
     610:	30800017 	ldw	r2,0(r6)
     614:	10c00204 	addi	r3,r2,8
     618:	013ff874 	movhi	r4,65505
     61c:	211ea404 	addi	r4,r4,31376
     620:	2709883a 	add	r4,r4,fp
     624:	20800017 	ldw	r2,0(r4)
     628:	10bfffcc 	andi	r2,r2,65535
     62c:	18800015 	stw	r2,0(r3)
	*(interval_timer_ptr + 0x3) = (counter >> 16) & 0xFFFF;
     630:	01bff874 	movhi	r6,65505
     634:	319eb404 	addi	r6,r6,31440
     638:	370d883a 	add	r6,r6,fp
     63c:	30800017 	ldw	r2,0(r6)
     640:	10c00304 	addi	r3,r2,12
     644:	013ff874 	movhi	r4,65505
     648:	211ea404 	addi	r4,r4,31376
     64c:	2709883a 	add	r4,r4,fp
     650:	20800017 	ldw	r2,0(r4)
     654:	1005d43a 	srai	r2,r2,16
     658:	10bfffcc 	andi	r2,r2,65535
     65c:	18800015 	stw	r2,0(r3)

	/* start interval timer, enable its interrupts */
	*(interval_timer_ptr + 1) = 0x7;	// STOP = 0, START = 1, CONT = 1, ITO = 1 
     660:	01bff874 	movhi	r6,65505
     664:	319eb404 	addi	r6,r6,31440
     668:	370d883a 	add	r6,r6,fp
     66c:	30800017 	ldw	r2,0(r6)
     670:	10c00104 	addi	r3,r2,4
     674:	008001c4 	movi	r2,7
     678:	18800015 	stw	r2,0(r3)
	flag=0;
     67c:	d0279415 	stw	zero,-25008(gp)
	// open the pushbuttom KEY parallel port
	KEY_dev = alt_up_parallel_port_open_dev ("/dev/Pushbuttons");
     680:	01000074 	movhi	r4,1
     684:	21058204 	addi	r4,r4,5640
     688:	000dde40 	call	dde4 <alt_up_parallel_port_open_dev>
     68c:	00fff874 	movhi	r3,65505
     690:	18debb04 	addi	r3,r3,31468
     694:	1f07883a 	add	r3,r3,fp
     698:	18800015 	stw	r2,0(r3)
	if ( KEY_dev == NULL)
     69c:	013ff874 	movhi	r4,65505
     6a0:	211ebb04 	addi	r4,r4,31468
     6a4:	2709883a 	add	r4,r4,fp
     6a8:	20800017 	ldw	r2,0(r4)
     6ac:	1004c03a 	cmpne	r2,r2,zero
     6b0:	1000061e 	bne	r2,zero,6cc <main+0x140>
	{
		alt_printf ("Error: could not open pushbutton KEY device\n");
     6b4:	01000074 	movhi	r4,1
     6b8:	21058704 	addi	r4,r4,5660
     6bc:	000b2c80 	call	b2c8 <alt_printf>
		return -1;
     6c0:	01bfffc4 	movi	r6,-1
     6c4:	e1bfff15 	stw	r6,-4(fp)
     6c8:	0002bd06 	br	11c0 <main+0xc34>
	}
	else
	{
		alt_printf ("Opened pushbutton KEY device\n");
     6cc:	01000074 	movhi	r4,1
     6d0:	21059304 	addi	r4,r4,5708
     6d4:	000b2c80 	call	b2c8 <alt_printf>
		up_dev.KEY_dev = KEY_dev;	// store for use by ISRs
     6d8:	00c00fb4 	movhi	r3,62
     6dc:	18d8df04 	addi	r3,r3,25468
     6e0:	013ff874 	movhi	r4,65505
     6e4:	211ebb04 	addi	r4,r4,31468
     6e8:	2709883a 	add	r4,r4,fp
     6ec:	20800017 	ldw	r2,0(r4)
     6f0:	18800015 	stw	r2,0(r3)
	}
	/* write to the pushbutton interrupt mask register, and set 3 mask bits to 1 
	 * (bit 0 is Nios II reset) */
	alt_up_parallel_port_set_interrupt_mask (KEY_dev, 0xE);
     6f4:	01bff874 	movhi	r6,65505
     6f8:	319ebb04 	addi	r6,r6,31468
     6fc:	370d883a 	add	r6,r6,fp
     700:	30800017 	ldw	r2,0(r6)
     704:	10800a17 	ldw	r2,40(r2)
     708:	10800204 	addi	r2,r2,8
     70c:	1007883a 	mov	r3,r2
     710:	00800384 	movi	r2,14
     714:	18800035 	stwio	r2,0(r3)

	// open the green LEDs parallel port
	green_LEDs_dev = alt_up_parallel_port_open_dev ("/dev/Green_LEDs");
     718:	01000074 	movhi	r4,1
     71c:	21059b04 	addi	r4,r4,5740
     720:	000dde40 	call	dde4 <alt_up_parallel_port_open_dev>
     724:	00fff874 	movhi	r3,65505
     728:	18deba04 	addi	r3,r3,31464
     72c:	1f07883a 	add	r3,r3,fp
     730:	18800015 	stw	r2,0(r3)
	if ( green_LEDs_dev == NULL)
     734:	013ff874 	movhi	r4,65505
     738:	211eba04 	addi	r4,r4,31464
     73c:	2709883a 	add	r4,r4,fp
     740:	20800017 	ldw	r2,0(r4)
     744:	1004c03a 	cmpne	r2,r2,zero
     748:	1000061e 	bne	r2,zero,764 <main+0x1d8>
	{
		alt_printf ("Error: could not open green LEDs device\n");
     74c:	01000074 	movhi	r4,1
     750:	21059f04 	addi	r4,r4,5756
     754:	000b2c80 	call	b2c8 <alt_printf>
		return -1;
     758:	01bfffc4 	movi	r6,-1
     75c:	e1bfff15 	stw	r6,-4(fp)
     760:	00029706 	br	11c0 <main+0xc34>
	}
	else
	{
		alt_printf ("Opened green LEDs device\n");
     764:	01000074 	movhi	r4,1
     768:	2105aa04 	addi	r4,r4,5800
     76c:	000b2c80 	call	b2c8 <alt_printf>
		up_dev.green_LEDs_dev = green_LEDs_dev;	// store for use by ISRs
     770:	00c00fb4 	movhi	r3,62
     774:	18d8df04 	addi	r3,r3,25468
     778:	013ff874 	movhi	r4,65505
     77c:	211eba04 	addi	r4,r4,31464
     780:	2709883a 	add	r4,r4,fp
     784:	20800017 	ldw	r2,0(r4)
     788:	18800115 	stw	r2,4(r3)
	}

	// open the PS2 port
	PS2_dev = alt_up_ps2_open_dev ("/dev/PS2_Port");
     78c:	01000074 	movhi	r4,1
     790:	2105b104 	addi	r4,r4,5828
     794:	000e4e40 	call	e4e4 <alt_up_ps2_open_dev>
     798:	01bff874 	movhi	r6,65505
     79c:	319eb904 	addi	r6,r6,31460
     7a0:	370d883a 	add	r6,r6,fp
     7a4:	30800015 	stw	r2,0(r6)
	if ( PS2_dev == NULL)
     7a8:	00fff874 	movhi	r3,65505
     7ac:	18deb904 	addi	r3,r3,31460
     7b0:	1f07883a 	add	r3,r3,fp
     7b4:	18800017 	ldw	r2,0(r3)
     7b8:	1004c03a 	cmpne	r2,r2,zero
     7bc:	1000061e 	bne	r2,zero,7d8 <main+0x24c>
	{
		alt_printf ("Error: could not open PS2 device\n");
     7c0:	01000074 	movhi	r4,1
     7c4:	2105b504 	addi	r4,r4,5844
     7c8:	000b2c80 	call	b2c8 <alt_printf>
		return -1;
     7cc:	013fffc4 	movi	r4,-1
     7d0:	e13fff15 	stw	r4,-4(fp)
     7d4:	00027a06 	br	11c0 <main+0xc34>
	}
	else
	{
		alt_printf ("Opened PS2 device\n");
     7d8:	01000074 	movhi	r4,1
     7dc:	2105be04 	addi	r4,r4,5880
     7e0:	000b2c80 	call	b2c8 <alt_printf>
		up_dev.PS2_dev = PS2_dev;	// store for use by ISRs
     7e4:	00c00fb4 	movhi	r3,62
     7e8:	18d8df04 	addi	r3,r3,25468
     7ec:	01bff874 	movhi	r6,65505
     7f0:	319eb904 	addi	r6,r6,31460
     7f4:	370d883a 	add	r6,r6,fp
     7f8:	30800017 	ldw	r2,0(r6)
     7fc:	18800215 	stw	r2,8(r3)
	}
	(void) alt_up_ps2_write_data_byte (PS2_dev, 0xFF);		// reset
     800:	00bff874 	movhi	r2,65505
     804:	109eb904 	addi	r2,r2,31460
     808:	1705883a 	add	r2,r2,fp
     80c:	11000017 	ldw	r4,0(r2)
     810:	01403fc4 	movi	r5,255
     814:	000e0c80 	call	e0c8 <alt_up_ps2_write_data_byte>
	alt_up_ps2_enable_read_interrupt (PS2_dev); // enable interrupts from PS/2 port
     818:	00fff874 	movhi	r3,65505
     81c:	18deb904 	addi	r3,r3,31460
     820:	1f07883a 	add	r3,r3,fp
     824:	19000017 	ldw	r4,0(r3)
     828:	000e01c0 	call	e01c <alt_up_ps2_enable_read_interrupt>

	// open the audio port
	audio_dev = alt_up_audio_open_dev ("/dev/Audio");
     82c:	01000074 	movhi	r4,1
     830:	2105c304 	addi	r4,r4,5900
     834:	000c98c0 	call	c98c <alt_up_audio_open_dev>
     838:	013ff874 	movhi	r4,65505
     83c:	211eb704 	addi	r4,r4,31452
     840:	2709883a 	add	r4,r4,fp
     844:	20800015 	stw	r2,0(r4)
	if ( audio_dev == NULL)
     848:	01bff874 	movhi	r6,65505
     84c:	319eb704 	addi	r6,r6,31452
     850:	370d883a 	add	r6,r6,fp
     854:	30800017 	ldw	r2,0(r6)
     858:	1004c03a 	cmpne	r2,r2,zero
     85c:	1000061e 	bne	r2,zero,878 <main+0x2ec>
	{
		alt_printf ("Error: could not open audio device\n");
     860:	01000074 	movhi	r4,1
     864:	2105c604 	addi	r4,r4,5912
     868:	000b2c80 	call	b2c8 <alt_printf>
		return -1;
     86c:	00bfffc4 	movi	r2,-1
     870:	e0bfff15 	stw	r2,-4(fp)
     874:	00025206 	br	11c0 <main+0xc34>
	}
	else
	{
		alt_printf ("Opened audio device\n");
     878:	01000074 	movhi	r4,1
     87c:	2105cf04 	addi	r4,r4,5948
     880:	000b2c80 	call	b2c8 <alt_printf>
		up_dev.audio_dev = audio_dev;	// store for use by ISRs
     884:	00c00fb4 	movhi	r3,62
     888:	18d8df04 	addi	r3,r3,25468
     88c:	013ff874 	movhi	r4,65505
     890:	211eb704 	addi	r4,r4,31452
     894:	2709883a 	add	r4,r4,fp
     898:	20800017 	ldw	r2,0(r4)
     89c:	18800415 	stw	r2,16(r3)
	}

	// open the 16x2 character display port
	lcd_dev = alt_up_character_lcd_open_dev ("/dev/Char_LCD_16x2");
     8a0:	01000074 	movhi	r4,1
     8a4:	2105d504 	addi	r4,r4,5972
     8a8:	000d27c0 	call	d27c <alt_up_character_lcd_open_dev>
     8ac:	01bff874 	movhi	r6,65505
     8b0:	319eb804 	addi	r6,r6,31456
     8b4:	370d883a 	add	r6,r6,fp
     8b8:	30800015 	stw	r2,0(r6)
	if ( lcd_dev == NULL)
     8bc:	00fff874 	movhi	r3,65505
     8c0:	18deb804 	addi	r3,r3,31456
     8c4:	1f07883a 	add	r3,r3,fp
     8c8:	18800017 	ldw	r2,0(r3)
     8cc:	1004c03a 	cmpne	r2,r2,zero
     8d0:	1000061e 	bne	r2,zero,8ec <main+0x360>
	{
		alt_printf ("Error: could not open character LCD device\n");
     8d4:	01000074 	movhi	r4,1
     8d8:	2105da04 	addi	r4,r4,5992
     8dc:	000b2c80 	call	b2c8 <alt_printf>
		return -1;
     8e0:	013fffc4 	movi	r4,-1
     8e4:	e13fff15 	stw	r4,-4(fp)
     8e8:	00023506 	br	11c0 <main+0xc34>
	}
	else
	{
		alt_printf ("Opened character LCD device\n");
     8ec:	01000074 	movhi	r4,1
     8f0:	2105e504 	addi	r4,r4,6036
     8f4:	000b2c80 	call	b2c8 <alt_printf>
		up_dev.lcd_dev = lcd_dev;	// store for use by ISRs
     8f8:	00c00fb4 	movhi	r3,62
     8fc:	18d8df04 	addi	r3,r3,25468
     900:	01bff874 	movhi	r6,65505
     904:	319eb804 	addi	r6,r6,31456
     908:	370d883a 	add	r6,r6,fp
     90c:	30800017 	ldw	r2,0(r6)
     910:	18800315 	stw	r2,12(r3)
	/* use the HAL facility for registering interrupt service routines. */
	/* Note: we are passsing a pointer to up_dev to each ISR (using the context argument) as 
	 * a way of giving the ISR a pointer to every open device. This is useful because some of the
	 * ISRs need to access more than just one device (e.g. the pushbutton ISR accesses both
	 * the pushbutton device and the audio device) */
	alt_irq_register (0, (void *) &up_dev, (void *) interval_timer_ISR);
     914:	01800034 	movhi	r6,0
     918:	31814b04 	addi	r6,r6,1324
     91c:	0009883a 	mov	r4,zero
     920:	01400fb4 	movhi	r5,62
     924:	2958df04 	addi	r5,r5,25468
     928:	000ad000 	call	ad00 <alt_irq_register>
	alt_irq_register (1, (void *) &up_dev, (void *) pushbutton_ISR);
     92c:	01800034 	movhi	r6,0
     930:	3184bf04 	addi	r6,r6,4860
     934:	01000044 	movi	r4,1
     938:	01400fb4 	movhi	r5,62
     93c:	2958df04 	addi	r5,r5,25468
     940:	000ad000 	call	ad00 <alt_irq_register>
	alt_irq_register (6, (void *) &up_dev, (void *) audio_ISR);
     944:	01800034 	movhi	r6,0
     948:	3180ae04 	addi	r6,r6,696
     94c:	01000184 	movi	r4,6
     950:	01400fb4 	movhi	r5,62
     954:	2958df04 	addi	r5,r5,25468
     958:	000ad000 	call	ad00 <alt_irq_register>
	alt_irq_register (7, (void *) &up_dev, (void *) PS2_ISR);
     95c:	01800034 	movhi	r6,0
     960:	31807d04 	addi	r6,r6,500
     964:	010001c4 	movi	r4,7
     968:	01400fb4 	movhi	r5,62
     96c:	2958df04 	addi	r5,r5,25468
     970:	000ad000 	call	ad00 <alt_irq_register>

	/* create a messages to be displayed on the VGA and LCD displays */
	char text_top_LCD[80] = "Welcome to the DE2 Media Computer...\0";
     974:	008007f4 	movhi	r2,31
     978:	10a13804 	addi	r2,r2,-31520
     97c:	013ff874 	movhi	r4,65505
     980:	211ea404 	addi	r4,r4,31376
     984:	2709883a 	add	r4,r4,fp
     988:	2087883a 	add	r3,r4,r2
     98c:	01000074 	movhi	r4,1
     990:	21062304 	addi	r4,r4,6284
     994:	20800017 	ldw	r2,0(r4)
     998:	18800015 	stw	r2,0(r3)
     99c:	20800117 	ldw	r2,4(r4)
     9a0:	18800115 	stw	r2,4(r3)
     9a4:	20800217 	ldw	r2,8(r4)
     9a8:	18800215 	stw	r2,8(r3)
     9ac:	20800317 	ldw	r2,12(r4)
     9b0:	18800315 	stw	r2,12(r3)
     9b4:	20800417 	ldw	r2,16(r4)
     9b8:	18800415 	stw	r2,16(r3)
     9bc:	20800517 	ldw	r2,20(r4)
     9c0:	18800515 	stw	r2,20(r3)
     9c4:	20800617 	ldw	r2,24(r4)
     9c8:	18800615 	stw	r2,24(r3)
     9cc:	20800717 	ldw	r2,28(r4)
     9d0:	18800715 	stw	r2,28(r3)
     9d4:	20800817 	ldw	r2,32(r4)
     9d8:	18800815 	stw	r2,32(r3)
     9dc:	2080090b 	ldhu	r2,36(r4)
     9e0:	1880090d 	sth	r2,36(r3)
     9e4:	19000984 	addi	r4,r3,38
     9e8:	01800a84 	movi	r6,42
     9ec:	000b883a 	mov	r5,zero
     9f0:	00014540 	call	1454 <memset>
	char text_top_VGA[20] = "Altera DE2\0";
     9f4:	008007f4 	movhi	r2,31
     9f8:	10a14c04 	addi	r2,r2,-31440
     9fc:	01bff874 	movhi	r6,65505
     a00:	319ea404 	addi	r6,r6,31376
     a04:	370d883a 	add	r6,r6,fp
     a08:	3089883a 	add	r4,r6,r2
     a0c:	00c00074 	movhi	r3,1
     a10:	18c63704 	addi	r3,r3,6364
     a14:	18800017 	ldw	r2,0(r3)
     a18:	20800015 	stw	r2,0(r4)
     a1c:	18800117 	ldw	r2,4(r3)
     a20:	20800115 	stw	r2,4(r4)
     a24:	18800217 	ldw	r2,8(r3)
     a28:	20800215 	stw	r2,8(r4)
     a2c:	20000315 	stw	zero,12(r4)
     a30:	20000415 	stw	zero,16(r4)
	char text_bottom_VGA[20] = "Media Computer\0";
     a34:	008007f4 	movhi	r2,31
     a38:	10a15104 	addi	r2,r2,-31420
     a3c:	00fff874 	movhi	r3,65505
     a40:	18dea404 	addi	r3,r3,31376
     a44:	1f07883a 	add	r3,r3,fp
     a48:	1889883a 	add	r4,r3,r2
     a4c:	00c00074 	movhi	r3,1
     a50:	18c63c04 	addi	r3,r3,6384
     a54:	18800017 	ldw	r2,0(r3)
     a58:	20800015 	stw	r2,0(r4)
     a5c:	18800117 	ldw	r2,4(r3)
     a60:	20800115 	stw	r2,4(r4)
     a64:	18800217 	ldw	r2,8(r3)
     a68:	20800215 	stw	r2,8(r4)
     a6c:	18800317 	ldw	r2,12(r3)
     a70:	20800315 	stw	r2,12(r4)
     a74:	20000415 	stw	zero,16(r4)
	char text_ALTERA[10] = "ALTERA\0";
     a78:	008007f4 	movhi	r2,31
     a7c:	10a15604 	addi	r2,r2,-31400
     a80:	013ff874 	movhi	r4,65505
     a84:	211ea404 	addi	r4,r4,31376
     a88:	2709883a 	add	r4,r4,fp
     a8c:	2087883a 	add	r3,r4,r2
     a90:	01000074 	movhi	r4,1
     a94:	21064104 	addi	r4,r4,6404
     a98:	20800017 	ldw	r2,0(r4)
     a9c:	18800015 	stw	r2,0(r3)
     aa0:	20800117 	ldw	r2,4(r4)
     aa4:	18800115 	stw	r2,4(r3)
     aa8:	1800020d 	sth	zero,8(r3)
	char text_erase[10] = "      \0";
     aac:	008007f4 	movhi	r2,31
     ab0:	10a15884 	addi	r2,r2,-31390
     ab4:	01bff874 	movhi	r6,65505
     ab8:	319ea404 	addi	r6,r6,31376
     abc:	370d883a 	add	r6,r6,fp
     ac0:	3089883a 	add	r4,r6,r2
     ac4:	00c00074 	movhi	r3,1
     ac8:	18c64404 	addi	r3,r3,6416
     acc:	1880000b 	ldhu	r2,0(r3)
     ad0:	2080000d 	sth	r2,0(r4)
     ad4:	1880008b 	ldhu	r2,2(r3)
     ad8:	2080008d 	sth	r2,2(r4)
     adc:	1880010b 	ldhu	r2,4(r3)
     ae0:	2080010d 	sth	r2,4(r4)
     ae4:	1880018b 	ldhu	r2,6(r3)
     ae8:	2080018d 	sth	r2,6(r4)
     aec:	2000020d 	sth	zero,8(r4)

	/* output text message to the LCD */
	alt_up_character_lcd_set_cursor_pos (lcd_dev, 0, 0);	// set LCD cursor location to top row
     af0:	00bff874 	movhi	r2,65505
     af4:	109eb804 	addi	r2,r2,31456
     af8:	1705883a 	add	r2,r2,fp
     afc:	11000017 	ldw	r4,0(r2)
     b00:	000b883a 	mov	r5,zero
     b04:	000d883a 	mov	r6,zero
     b08:	000d3f80 	call	d3f8 <alt_up_character_lcd_set_cursor_pos>
	alt_up_character_lcd_string (lcd_dev, text_top_LCD);
     b0c:	008007f4 	movhi	r2,31
     b10:	10a13804 	addi	r2,r2,-31520
     b14:	00fff874 	movhi	r3,65505
     b18:	18dea404 	addi	r3,r3,31376
     b1c:	1f07883a 	add	r3,r3,fp
     b20:	188b883a 	add	r5,r3,r2
     b24:	01bff874 	movhi	r6,65505
     b28:	319eb804 	addi	r6,r6,31456
     b2c:	370d883a 	add	r6,r6,fp
     b30:	31000017 	ldw	r4,0(r6)
     b34:	000d3340 	call	d334 <alt_up_character_lcd_string>
	alt_up_character_lcd_cursor_off (lcd_dev);				// turn off the LCD cursor 
     b38:	00bff874 	movhi	r2,65505
     b3c:	109eb804 	addi	r2,r2,31456
     b40:	1705883a 	add	r2,r2,fp
     b44:	11000017 	ldw	r4,0(r2)
     b48:	000d6600 	call	d660 <alt_up_character_lcd_cursor_off>

	/* open the pixel buffer */
	pixel_buffer_dev = alt_up_pixel_buffer_dma_open_dev ("/dev/VGA_Pixel_Buffer");
     b4c:	01000074 	movhi	r4,1
     b50:	2105ed04 	addi	r4,r4,6068
     b54:	000ebc00 	call	ebc0 <alt_up_pixel_buffer_dma_open_dev>
     b58:	00fff874 	movhi	r3,65505
     b5c:	18deb504 	addi	r3,r3,31444
     b60:	1f07883a 	add	r3,r3,fp
     b64:	18800015 	stw	r2,0(r3)
	if ( pixel_buffer_dev == NULL)
     b68:	013ff874 	movhi	r4,65505
     b6c:	211eb504 	addi	r4,r4,31444
     b70:	2709883a 	add	r4,r4,fp
     b74:	20800017 	ldw	r2,0(r4)
     b78:	1004c03a 	cmpne	r2,r2,zero
     b7c:	1000041e 	bne	r2,zero,b90 <main+0x604>
		alt_printf ("Error: could not open pixel buffer device\n");
     b80:	01000074 	movhi	r4,1
     b84:	2105f304 	addi	r4,r4,6092
     b88:	000b2c80 	call	b2c8 <alt_printf>
     b8c:	00000306 	br	b9c <main+0x610>
	else
		alt_printf ("Opened pixel buffer device\n");
     b90:	01000074 	movhi	r4,1
     b94:	2105fe04 	addi	r4,r4,6136
     b98:	000b2c80 	call	b2c8 <alt_printf>

	/* the following variables give the size of the pixel buffer */
	screen_x = 319; screen_y = 239;
     b9c:	00804fc4 	movi	r2,319
     ba0:	01bff874 	movhi	r6,65505
     ba4:	319ea904 	addi	r6,r6,31396
     ba8:	370d883a 	add	r6,r6,fp
     bac:	30800015 	stw	r2,0(r6)
     bb0:	00803bc4 	movi	r2,239
     bb4:	00fff874 	movhi	r3,65505
     bb8:	18dea804 	addi	r3,r3,31392
     bbc:	1f07883a 	add	r3,r3,fp
     bc0:	18800015 	stw	r2,0(r3)
	color = 0x1863;		// a dark grey color
     bc4:	008618c4 	movi	r2,6243
     bc8:	013ff874 	movhi	r4,65505
     bcc:	211ea504 	addi	r4,r4,31380
     bd0:	2709883a 	add	r4,r4,fp
     bd4:	2080000d 	sth	r2,0(r4)
	alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, 0, 0, screen_x, 
     bd8:	01bff874 	movhi	r6,65505
     bdc:	319ea504 	addi	r6,r6,31380
     be0:	370d883a 	add	r6,r6,fp
     be4:	30c0000f 	ldh	r3,0(r6)
     be8:	013ff874 	movhi	r4,65505
     bec:	211ea804 	addi	r4,r4,31392
     bf0:	2709883a 	add	r4,r4,fp
     bf4:	20800017 	ldw	r2,0(r4)
     bf8:	d8800015 	stw	r2,0(sp)
     bfc:	d8c00115 	stw	r3,4(sp)
     c00:	d8000215 	stw	zero,8(sp)
     c04:	01bff874 	movhi	r6,65505
     c08:	319eb504 	addi	r6,r6,31444
     c0c:	370d883a 	add	r6,r6,fp
     c10:	31000017 	ldw	r4,0(r6)
     c14:	000b883a 	mov	r5,zero
     c18:	000d883a 	mov	r6,zero
     c1c:	00bff874 	movhi	r2,65505
     c20:	109ea904 	addi	r2,r2,31396
     c24:	1705883a 	add	r2,r2,fp
     c28:	11c00017 	ldw	r7,0(r2)
     c2c:	000efe80 	call	efe8 <alt_up_pixel_buffer_dma_draw_box>
		screen_y, color, 0); // fill the screen
	
	// draw a medium-blue box in the middle of the screen, using character buffer coordinates
	blue_x1 = 28; blue_x2 = 52; blue_y1 = 26; blue_y2 = 34;
     c30:	00800704 	movi	r2,28
     c34:	00fff874 	movhi	r3,65505
     c38:	18dead04 	addi	r3,r3,31412
     c3c:	1f07883a 	add	r3,r3,fp
     c40:	18800015 	stw	r2,0(r3)
     c44:	00800d04 	movi	r2,52
     c48:	013ff874 	movhi	r4,65505
     c4c:	211eab04 	addi	r4,r4,31404
     c50:	2709883a 	add	r4,r4,fp
     c54:	20800015 	stw	r2,0(r4)
     c58:	00800684 	movi	r2,26
     c5c:	01bff874 	movhi	r6,65505
     c60:	319eac04 	addi	r6,r6,31408
     c64:	370d883a 	add	r6,r6,fp
     c68:	30800015 	stw	r2,0(r6)
     c6c:	00800884 	movi	r2,34
     c70:	00fff874 	movhi	r3,65505
     c74:	18deaa04 	addi	r3,r3,31400
     c78:	1f07883a 	add	r3,r3,fp
     c7c:	18800015 	stw	r2,0(r3)
	// character coords * 4 since characters are 4 x 4 pixel buffer coords (8 x 8 VGA coords)
	color = 0x187F;		// a medium blue color
     c80:	00861fc4 	movi	r2,6271
     c84:	013ff874 	movhi	r4,65505
     c88:	211ea504 	addi	r4,r4,31380
     c8c:	2709883a 	add	r4,r4,fp
     c90:	2080000d 	sth	r2,0(r4)
	alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, blue_x1 * 4, blue_y1 * 4, blue_x2 * 4, 
     c94:	01bff874 	movhi	r6,65505
     c98:	319ead04 	addi	r6,r6,31412
     c9c:	370d883a 	add	r6,r6,fp
     ca0:	30800017 	ldw	r2,0(r6)
     ca4:	1085883a 	add	r2,r2,r2
     ca8:	1085883a 	add	r2,r2,r2
     cac:	100b883a 	mov	r5,r2
     cb0:	00fff874 	movhi	r3,65505
     cb4:	18deac04 	addi	r3,r3,31408
     cb8:	1f07883a 	add	r3,r3,fp
     cbc:	18800017 	ldw	r2,0(r3)
     cc0:	1085883a 	add	r2,r2,r2
     cc4:	1085883a 	add	r2,r2,r2
     cc8:	100d883a 	mov	r6,r2
     ccc:	013ff874 	movhi	r4,65505
     cd0:	211eab04 	addi	r4,r4,31404
     cd4:	2709883a 	add	r4,r4,fp
     cd8:	20800017 	ldw	r2,0(r4)
     cdc:	1085883a 	add	r2,r2,r2
     ce0:	1085883a 	add	r2,r2,r2
     ce4:	100f883a 	mov	r7,r2
     ce8:	00fff874 	movhi	r3,65505
     cec:	18deaa04 	addi	r3,r3,31400
     cf0:	1f07883a 	add	r3,r3,fp
     cf4:	18800017 	ldw	r2,0(r3)
     cf8:	1085883a 	add	r2,r2,r2
     cfc:	1085883a 	add	r2,r2,r2
     d00:	013ff874 	movhi	r4,65505
     d04:	211ea504 	addi	r4,r4,31380
     d08:	2709883a 	add	r4,r4,fp
     d0c:	20c0000f 	ldh	r3,0(r4)
     d10:	d8800015 	stw	r2,0(sp)
     d14:	d8c00115 	stw	r3,4(sp)
     d18:	d8000215 	stw	zero,8(sp)
     d1c:	00bff874 	movhi	r2,65505
     d20:	109eb504 	addi	r2,r2,31444
     d24:	1705883a 	add	r2,r2,fp
     d28:	11000017 	ldw	r4,0(r2)
     d2c:	000efe80 	call	efe8 <alt_up_pixel_buffer_dma_draw_box>
		blue_y2 * 4, color, 0);

	/* output text message in the middle of the VGA monitor */
	char_buffer_dev = alt_up_char_buffer_open_dev ("/dev/VGA_Char_Buffer");
     d30:	01000074 	movhi	r4,1
     d34:	21060504 	addi	r4,r4,6164
     d38:	000e9400 	call	e940 <alt_up_char_buffer_open_dev>
     d3c:	00fff874 	movhi	r3,65505
     d40:	18deb604 	addi	r3,r3,31448
     d44:	1f07883a 	add	r3,r3,fp
     d48:	18800015 	stw	r2,0(r3)
	if ( char_buffer_dev == NULL)
     d4c:	013ff874 	movhi	r4,65505
     d50:	211eb604 	addi	r4,r4,31448
     d54:	2709883a 	add	r4,r4,fp
     d58:	20800017 	ldw	r2,0(r4)
     d5c:	1004c03a 	cmpne	r2,r2,zero
     d60:	1000041e 	bne	r2,zero,d74 <main+0x7e8>
		alt_printf ("Error: could not open character buffer device\n");
     d64:	01000074 	movhi	r4,1
     d68:	21060b04 	addi	r4,r4,6188
     d6c:	000b2c80 	call	b2c8 <alt_printf>
     d70:	00000306 	br	d80 <main+0x7f4>
	else
		alt_printf ("Opened character buffer device\n");
     d74:	01000074 	movhi	r4,1
     d78:	21061704 	addi	r4,r4,6236
     d7c:	000b2c80 	call	b2c8 <alt_printf>

	alt_up_char_buffer_string (char_buffer_dev, text_top_VGA, blue_x1 + 5, blue_y1 + 3);
     d80:	01bff874 	movhi	r6,65505
     d84:	319ead04 	addi	r6,r6,31412
     d88:	370d883a 	add	r6,r6,fp
     d8c:	30800017 	ldw	r2,0(r6)
     d90:	10800144 	addi	r2,r2,5
     d94:	100d883a 	mov	r6,r2
     d98:	00fff874 	movhi	r3,65505
     d9c:	18deac04 	addi	r3,r3,31408
     da0:	1f07883a 	add	r3,r3,fp
     da4:	18800017 	ldw	r2,0(r3)
     da8:	108000c4 	addi	r2,r2,3
     dac:	100f883a 	mov	r7,r2
     db0:	008007f4 	movhi	r2,31
     db4:	10a14c04 	addi	r2,r2,-31440
     db8:	013ff874 	movhi	r4,65505
     dbc:	211ea404 	addi	r4,r4,31376
     dc0:	2709883a 	add	r4,r4,fp
     dc4:	208b883a 	add	r5,r4,r2
     dc8:	00bff874 	movhi	r2,65505
     dcc:	109eb604 	addi	r2,r2,31448
     dd0:	1705883a 	add	r2,r2,fp
     dd4:	11000017 	ldw	r4,0(r2)
     dd8:	000ea500 	call	ea50 <alt_up_char_buffer_string>
	alt_up_char_buffer_string (char_buffer_dev, text_bottom_VGA, blue_x1 + 5, blue_y1 + 4);
     ddc:	00fff874 	movhi	r3,65505
     de0:	18dead04 	addi	r3,r3,31412
     de4:	1f07883a 	add	r3,r3,fp
     de8:	18800017 	ldw	r2,0(r3)
     dec:	10800144 	addi	r2,r2,5
     df0:	100d883a 	mov	r6,r2
     df4:	013ff874 	movhi	r4,65505
     df8:	211eac04 	addi	r4,r4,31408
     dfc:	2709883a 	add	r4,r4,fp
     e00:	20800017 	ldw	r2,0(r4)
     e04:	10800104 	addi	r2,r2,4
     e08:	100f883a 	mov	r7,r2
     e0c:	008007f4 	movhi	r2,31
     e10:	10a15104 	addi	r2,r2,-31420
     e14:	00fff874 	movhi	r3,65505
     e18:	18dea404 	addi	r3,r3,31376
     e1c:	1f07883a 	add	r3,r3,fp
     e20:	188b883a 	add	r5,r3,r2
     e24:	00bff874 	movhi	r2,65505
     e28:	109eb604 	addi	r2,r2,31448
     e2c:	1705883a 	add	r2,r2,fp
     e30:	11000017 	ldw	r4,0(r2)
     e34:	000ea500 	call	ea50 <alt_up_char_buffer_string>
	
	char_buffer_x = 79; char_buffer_y = 59;
     e38:	008013c4 	movi	r2,79
     e3c:	00fff874 	movhi	r3,65505
     e40:	18dea704 	addi	r3,r3,31388
     e44:	1f07883a 	add	r3,r3,fp
     e48:	18800015 	stw	r2,0(r3)
     e4c:	00800ec4 	movi	r2,59
     e50:	013ff874 	movhi	r4,65505
     e54:	211ea604 	addi	r4,r4,31384
     e58:	2709883a 	add	r4,r4,fp
     e5c:	20800015 	stw	r2,0(r4)
	ALT_x1 = 0; ALT_x2 = 5/* ALTERA = 6 chars */; ALT_y = 0; ALT_inc_x = 1; ALT_inc_y = 1;
     e60:	01bff874 	movhi	r6,65505
     e64:	319eb204 	addi	r6,r6,31432
     e68:	370d883a 	add	r6,r6,fp
     e6c:	30000015 	stw	zero,0(r6)
     e70:	00800144 	movi	r2,5
     e74:	00fff874 	movhi	r3,65505
     e78:	18deb104 	addi	r3,r3,31428
     e7c:	1f07883a 	add	r3,r3,fp
     e80:	18800015 	stw	r2,0(r3)
     e84:	013ff874 	movhi	r4,65505
     e88:	211eb004 	addi	r4,r4,31424
     e8c:	2709883a 	add	r4,r4,fp
     e90:	20000015 	stw	zero,0(r4)
     e94:	00800044 	movi	r2,1
     e98:	01bff874 	movhi	r6,65505
     e9c:	319eaf04 	addi	r6,r6,31420
     ea0:	370d883a 	add	r6,r6,fp
     ea4:	30800015 	stw	r2,0(r6)
     ea8:	00800044 	movi	r2,1
     eac:	00fff874 	movhi	r3,65505
     eb0:	18deae04 	addi	r3,r3,31416
     eb4:	1f07883a 	add	r3,r3,fp
     eb8:	18800015 	stw	r2,0(r3)
	alt_up_char_buffer_string (char_buffer_dev, text_ALTERA, ALT_x1, ALT_y);
     ebc:	013ff874 	movhi	r4,65505
     ec0:	211eb204 	addi	r4,r4,31432
     ec4:	2709883a 	add	r4,r4,fp
     ec8:	21800017 	ldw	r6,0(r4)
     ecc:	00bff874 	movhi	r2,65505
     ed0:	109eb004 	addi	r2,r2,31424
     ed4:	1705883a 	add	r2,r2,fp
     ed8:	11c00017 	ldw	r7,0(r2)
     edc:	008007f4 	movhi	r2,31
     ee0:	10a15604 	addi	r2,r2,-31400
     ee4:	00fff874 	movhi	r3,65505
     ee8:	18dea404 	addi	r3,r3,31376
     eec:	1f07883a 	add	r3,r3,fp
     ef0:	188b883a 	add	r5,r3,r2
     ef4:	00bff874 	movhi	r2,65505
     ef8:	109eb604 	addi	r2,r2,31448
     efc:	1705883a 	add	r2,r2,fp
     f00:	11000017 	ldw	r4,0(r2)
     f04:	000ea500 	call	ea50 <alt_up_char_buffer_string>
     f08:	00000006 	br	f0c <main+0x980>

	/* this loops "bounces" the word ALTERA around on the VGA screen */
	while (1)
	{
		while (!timeout)
     f0c:	00800074 	movhi	r2,1
     f10:	10968504 	addi	r2,r2,23060
     f14:	10800017 	ldw	r2,0(r2)
     f18:	1005003a 	cmpeq	r2,r2,zero
     f1c:	103ffb1e 	bne	r2,zero,f0c <main+0x980>
			;	// wait to synchronize with timeout, which is set by the interval timer ISR 
		if (flag==1){
     f20:	d0a79417 	ldw	r2,-25008(gp)
     f24:	10800058 	cmpnei	r2,r2,1
     f28:	103ff81e 	bne	r2,zero,f0c <main+0x980>
		/* move the ALTERA text around on the VGA screen */
			printf("sharm");
     f2c:	01000074 	movhi	r4,1
     f30:	21061f04 	addi	r4,r4,6268
     f34:	00014ec0 	call	14ec <printf>
		for (i=0;i<BUF_SIZE;i++)
     f38:	00fff874 	movhi	r3,65505
     f3c:	18deb304 	addi	r3,r3,31436
     f40:	1f07883a 	add	r3,r3,fp
     f44:	18000015 	stw	zero,0(r3)
     f48:	00002206 	br	fd4 <main+0xa48>
			rbufe[i]=ALT_CI_FIR_0(r_buf[i]);
     f4c:	01bff874 	movhi	r6,65505
     f50:	319eb304 	addi	r6,r6,31436
     f54:	370d883a 	add	r6,r6,fp
     f58:	31000017 	ldw	r4,0(r6)
     f5c:	00fff874 	movhi	r3,65505
     f60:	18deb304 	addi	r3,r3,31436
     f64:	1f07883a 	add	r3,r3,fp
     f68:	18800017 	ldw	r2,0(r3)
     f6c:	00c00474 	movhi	r3,17
     f70:	18e72f04 	addi	r3,r3,-25412
     f74:	1085883a 	add	r2,r2,r2
     f78:	1085883a 	add	r2,r2,r2
     f7c:	10c5883a 	add	r2,r2,r3
     f80:	10800017 	ldw	r2,0(r2)
     f84:	100bc032 	custom	0,r5,r2,zero
     f88:	008003f4 	movhi	r2,15
     f8c:	1090a804 	addi	r2,r2,17056
     f90:	01bff874 	movhi	r6,65505
     f94:	319ea404 	addi	r6,r6,31376
     f98:	370d883a 	add	r6,r6,fp
     f9c:	3087883a 	add	r3,r6,r2
     fa0:	2105883a 	add	r2,r4,r4
     fa4:	1085883a 	add	r2,r2,r2
     fa8:	10c5883a 	add	r2,r2,r3
     fac:	11400015 	stw	r5,0(r2)
		while (!timeout)
			;	// wait to synchronize with timeout, which is set by the interval timer ISR 
		if (flag==1){
		/* move the ALTERA text around on the VGA screen */
			printf("sharm");
		for (i=0;i<BUF_SIZE;i++)
     fb0:	00fff874 	movhi	r3,65505
     fb4:	18deb304 	addi	r3,r3,31436
     fb8:	1f07883a 	add	r3,r3,fp
     fbc:	18800017 	ldw	r2,0(r3)
     fc0:	10800044 	addi	r2,r2,1
     fc4:	013ff874 	movhi	r4,65505
     fc8:	211eb304 	addi	r4,r4,31436
     fcc:	2709883a 	add	r4,r4,fp
     fd0:	20800015 	stw	r2,0(r4)
     fd4:	01bff874 	movhi	r6,65505
     fd8:	319eb304 	addi	r6,r6,31436
     fdc:	370d883a 	add	r6,r6,fp
     fe0:	30c00017 	ldw	r3,0(r6)
     fe4:	00800134 	movhi	r2,4
     fe8:	10b423c4 	addi	r2,r2,-12145
     fec:	10ffd70e 	bge	r2,r3,f4c <main+0x9c0>
			rbufe[i]=ALT_CI_FIR_0(r_buf[i]);

		for (i=0;i<BUF_SIZE;i++)
     ff0:	00bff874 	movhi	r2,65505
     ff4:	109eb304 	addi	r2,r2,31436
     ff8:	1705883a 	add	r2,r2,fp
     ffc:	10000015 	stw	zero,0(r2)
    1000:	00002006 	br	1084 <main+0xaf8>
					lbufe[i]=ALT_CI_FIR_0(r_buf[i]);
    1004:	00fff874 	movhi	r3,65505
    1008:	18deb304 	addi	r3,r3,31436
    100c:	1f07883a 	add	r3,r3,fp
    1010:	19000017 	ldw	r4,0(r3)
    1014:	01bff874 	movhi	r6,65505
    1018:	319eb304 	addi	r6,r6,31436
    101c:	370d883a 	add	r6,r6,fp
    1020:	30800017 	ldw	r2,0(r6)
    1024:	00c00474 	movhi	r3,17
    1028:	18e72f04 	addi	r3,r3,-25412
    102c:	1085883a 	add	r2,r2,r2
    1030:	1085883a 	add	r2,r2,r2
    1034:	10c5883a 	add	r2,r2,r3
    1038:	10800017 	ldw	r2,0(r2)
    103c:	1007c032 	custom	0,r3,r2,zero
    1040:	2105883a 	add	r2,r4,r4
    1044:	1085883a 	add	r2,r2,r2
    1048:	013ff874 	movhi	r4,65505
    104c:	211ea404 	addi	r4,r4,31376
    1050:	2709883a 	add	r4,r4,fp
    1054:	1105883a 	add	r2,r2,r4
    1058:	10801804 	addi	r2,r2,96
    105c:	10c00015 	stw	r3,0(r2)
		/* move the ALTERA text around on the VGA screen */
			printf("sharm");
		for (i=0;i<BUF_SIZE;i++)
			rbufe[i]=ALT_CI_FIR_0(r_buf[i]);

		for (i=0;i<BUF_SIZE;i++)
    1060:	01bff874 	movhi	r6,65505
    1064:	319eb304 	addi	r6,r6,31436
    1068:	370d883a 	add	r6,r6,fp
    106c:	30800017 	ldw	r2,0(r6)
    1070:	10800044 	addi	r2,r2,1
    1074:	00fff874 	movhi	r3,65505
    1078:	18deb304 	addi	r3,r3,31436
    107c:	1f07883a 	add	r3,r3,fp
    1080:	18800015 	stw	r2,0(r3)
    1084:	013ff874 	movhi	r4,65505
    1088:	211eb304 	addi	r4,r4,31436
    108c:	2709883a 	add	r4,r4,fp
    1090:	20c00017 	ldw	r3,0(r4)
    1094:	00800134 	movhi	r2,4
    1098:	10b423c4 	addi	r2,r2,-12145
    109c:	10ffd90e 	bge	r2,r3,1004 <main+0xa78>
					lbufe[i]=ALT_CI_FIR_0(r_buf[i]);
		for(i=0;i<BUF_SIZE;i++){
    10a0:	01bff874 	movhi	r6,65505
    10a4:	319eb304 	addi	r6,r6,31436
    10a8:	370d883a 	add	r6,r6,fp
    10ac:	30000015 	stw	zero,0(r6)
    10b0:	00003706 	br	1190 <main+0xc04>
					re_buf[i]=rbufe[i];
    10b4:	00bff874 	movhi	r2,65505
    10b8:	109eb304 	addi	r2,r2,31436
    10bc:	1705883a 	add	r2,r2,fp
    10c0:	11400017 	ldw	r5,0(r2)
    10c4:	013ff874 	movhi	r4,65505
    10c8:	211eb304 	addi	r4,r4,31436
    10cc:	2709883a 	add	r4,r4,fp
    10d0:	20c00017 	ldw	r3,0(r4)
    10d4:	008003f4 	movhi	r2,15
    10d8:	1090a804 	addi	r2,r2,17056
    10dc:	01bff874 	movhi	r6,65505
    10e0:	319ea404 	addi	r6,r6,31376
    10e4:	370d883a 	add	r6,r6,fp
    10e8:	3089883a 	add	r4,r6,r2
    10ec:	18c5883a 	add	r2,r3,r3
    10f0:	1085883a 	add	r2,r2,r2
    10f4:	1105883a 	add	r2,r2,r4
    10f8:	11000017 	ldw	r4,0(r2)
    10fc:	00c00834 	movhi	r3,32
    1100:	18f7bf04 	addi	r3,r3,-8452
    1104:	2945883a 	add	r2,r5,r5
    1108:	1085883a 	add	r2,r2,r2
    110c:	10c5883a 	add	r2,r2,r3
    1110:	11000015 	stw	r4,0(r2)
					le_buf[i]=lbufe[i];
    1114:	00bff874 	movhi	r2,65505
    1118:	109eb304 	addi	r2,r2,31436
    111c:	1705883a 	add	r2,r2,fp
    1120:	11400017 	ldw	r5,0(r2)
    1124:	00fff874 	movhi	r3,65505
    1128:	18deb304 	addi	r3,r3,31436
    112c:	1f07883a 	add	r3,r3,fp
    1130:	18800017 	ldw	r2,0(r3)
    1134:	1085883a 	add	r2,r2,r2
    1138:	1085883a 	add	r2,r2,r2
    113c:	013ff874 	movhi	r4,65505
    1140:	211ea404 	addi	r4,r4,31376
    1144:	2709883a 	add	r4,r4,fp
    1148:	1105883a 	add	r2,r2,r4
    114c:	10801804 	addi	r2,r2,96
    1150:	11000017 	ldw	r4,0(r2)
    1154:	00c00074 	movhi	r3,1
    1158:	18d69f04 	addi	r3,r3,23164
    115c:	2945883a 	add	r2,r5,r5
    1160:	1085883a 	add	r2,r2,r2
    1164:	10c5883a 	add	r2,r2,r3
    1168:	11000015 	stw	r4,0(r2)
		for (i=0;i<BUF_SIZE;i++)
			rbufe[i]=ALT_CI_FIR_0(r_buf[i]);

		for (i=0;i<BUF_SIZE;i++)
					lbufe[i]=ALT_CI_FIR_0(r_buf[i]);
		for(i=0;i<BUF_SIZE;i++){
    116c:	01bff874 	movhi	r6,65505
    1170:	319eb304 	addi	r6,r6,31436
    1174:	370d883a 	add	r6,r6,fp
    1178:	30800017 	ldw	r2,0(r6)
    117c:	10800044 	addi	r2,r2,1
    1180:	00fff874 	movhi	r3,65505
    1184:	18deb304 	addi	r3,r3,31436
    1188:	1f07883a 	add	r3,r3,fp
    118c:	18800015 	stw	r2,0(r3)
    1190:	013ff874 	movhi	r4,65505
    1194:	211eb304 	addi	r4,r4,31436
    1198:	2709883a 	add	r4,r4,fp
    119c:	20c00017 	ldw	r3,0(r4)
    11a0:	00800134 	movhi	r2,4
    11a4:	10b423c4 	addi	r2,r2,-12145
    11a8:	10ffc20e 	bge	r2,r3,10b4 <main+0xb28>
					re_buf[i]=rbufe[i];
					le_buf[i]=lbufe[i];
				}
		printf("done");
    11ac:	01000074 	movhi	r4,1
    11b0:	21062104 	addi	r4,r4,6276
    11b4:	00014ec0 	call	14ec <printf>
		flag=0;
    11b8:	d0279415 	stw	zero,-25008(gp)
		}
	}
    11bc:	003f5306 	br	f0c <main+0x980>
    11c0:	e0bfff17 	ldw	r2,-4(fp)
}
    11c4:	e037883a 	mov	sp,fp
    11c8:	dfc00117 	ldw	ra,4(sp)
    11cc:	df000017 	ldw	fp,0(sp)
    11d0:	dec00204 	addi	sp,sp,8
    11d4:	f800283a 	ret

000011d8 <HEX_PS2>:
 * Subroutine to show a string of HEX data on the HEX displays
 * Note that we are using pointer accesses for the HEX displays parallel port. We could
 * also use the HAL functions for these ports instead
****************************************************************************************/
void HEX_PS2(unsigned char b1, unsigned char b2, unsigned char b3)
{
    11d8:	deffef04 	addi	sp,sp,-68
    11dc:	dfc01015 	stw	ra,64(sp)
    11e0:	df000f15 	stw	fp,60(sp)
    11e4:	df000f04 	addi	fp,sp,60
    11e8:	e13ffd05 	stb	r4,-12(fp)
    11ec:	e17ffe05 	stb	r5,-8(fp)
    11f0:	e1bfff05 	stb	r6,-4(fp)
	volatile int *HEX3_HEX0_ptr = (int *) 0x10000020;
    11f4:	00840034 	movhi	r2,4096
    11f8:	10800804 	addi	r2,r2,32
    11fc:	e0bff615 	stw	r2,-40(fp)
	volatile int *HEX7_HEX4_ptr = (int *) 0x10000030;
    1200:	00840034 	movhi	r2,4096
    1204:	10800c04 	addi	r2,r2,48
    1208:	e0bff515 	stw	r2,-44(fp)

	/* SEVEN_SEGMENT_DECODE_TABLE gives the on/off settings for all segments in 
	 * a single 7-seg display in the DE2 Media Computer, for the hex digits 0 - F */
	unsigned char	seven_seg_decode_table[] = {	0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 
		  										0x7F, 0x67, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71 };
    120c:	00800074 	movhi	r2,1
    1210:	10864684 	addi	r2,r2,6426
    1214:	e13ff704 	addi	r4,fp,-36
    1218:	100b883a 	mov	r5,r2
    121c:	01800404 	movi	r6,16
    1220:	00013b40 	call	13b4 <memcpy>
	unsigned char	hex_segs[] = { 0, 0, 0, 0, 0, 0, 0, 0 };
    1224:	e03ffb05 	stb	zero,-20(fp)
    1228:	e03ffb45 	stb	zero,-19(fp)
    122c:	e03ffb85 	stb	zero,-18(fp)
    1230:	e03ffbc5 	stb	zero,-17(fp)
    1234:	e03ffc05 	stb	zero,-16(fp)
    1238:	e03ffc45 	stb	zero,-15(fp)
    123c:	e03ffc85 	stb	zero,-14(fp)
    1240:	e03ffcc5 	stb	zero,-13(fp)
	unsigned int shift_buffer, nibble;
	unsigned char code;
	int i;

	shift_buffer = (b1 << 16) | (b2 << 8) | b3;
    1244:	e0bffd03 	ldbu	r2,-12(fp)
    1248:	1006943a 	slli	r3,r2,16
    124c:	e0bffe03 	ldbu	r2,-8(fp)
    1250:	1004923a 	slli	r2,r2,8
    1254:	1886b03a 	or	r3,r3,r2
    1258:	e0bfff03 	ldbu	r2,-4(fp)
    125c:	1884b03a 	or	r2,r3,r2
    1260:	e0bff415 	stw	r2,-48(fp)
	for ( i = 0; i < 6; ++i )
    1264:	e03ff115 	stw	zero,-60(fp)
    1268:	00001306 	br	12b8 <HEX_PS2+0xe0>
	{
		nibble = shift_buffer & 0x0000000F;		// character is in rightmost nibble
    126c:	e0bff417 	ldw	r2,-48(fp)
    1270:	108003cc 	andi	r2,r2,15
    1274:	e0bff315 	stw	r2,-52(fp)
		code = seven_seg_decode_table[nibble];
    1278:	e0fff317 	ldw	r3,-52(fp)
    127c:	e0bff704 	addi	r2,fp,-36
    1280:	10c5883a 	add	r2,r2,r3
    1284:	10800003 	ldbu	r2,0(r2)
    1288:	e0bff205 	stb	r2,-56(fp)
		hex_segs[i] = code;
    128c:	e0fff117 	ldw	r3,-60(fp)
    1290:	e0bffb04 	addi	r2,fp,-20
    1294:	10c7883a 	add	r3,r2,r3
    1298:	e0bff203 	ldbu	r2,-56(fp)
    129c:	18800005 	stb	r2,0(r3)
		shift_buffer = shift_buffer >> 4;
    12a0:	e0bff417 	ldw	r2,-48(fp)
    12a4:	1004d13a 	srli	r2,r2,4
    12a8:	e0bff415 	stw	r2,-48(fp)
	unsigned int shift_buffer, nibble;
	unsigned char code;
	int i;

	shift_buffer = (b1 << 16) | (b2 << 8) | b3;
	for ( i = 0; i < 6; ++i )
    12ac:	e0bff117 	ldw	r2,-60(fp)
    12b0:	10800044 	addi	r2,r2,1
    12b4:	e0bff115 	stw	r2,-60(fp)
    12b8:	e0bff117 	ldw	r2,-60(fp)
    12bc:	10800190 	cmplti	r2,r2,6
    12c0:	103fea1e 	bne	r2,zero,126c <HEX_PS2+0x94>
		code = seven_seg_decode_table[nibble];
		hex_segs[i] = code;
		shift_buffer = shift_buffer >> 4;
	}
	/* drive the hex displays */
	*(HEX3_HEX0_ptr) = *(int *) (hex_segs);
    12c4:	e0bffb04 	addi	r2,fp,-20
    12c8:	10c00017 	ldw	r3,0(r2)
    12cc:	e0bff617 	ldw	r2,-40(fp)
    12d0:	10c00015 	stw	r3,0(r2)
	*(HEX7_HEX4_ptr) = *(int *) (hex_segs+4);
    12d4:	e0bffb04 	addi	r2,fp,-20
    12d8:	10800104 	addi	r2,r2,4
    12dc:	10c00017 	ldw	r3,0(r2)
    12e0:	e0bff517 	ldw	r2,-44(fp)
    12e4:	10c00015 	stw	r3,0(r2)
}
    12e8:	e037883a 	mov	sp,fp
    12ec:	dfc00117 	ldw	ra,4(sp)
    12f0:	df000017 	ldw	fp,0(sp)
    12f4:	dec00204 	addi	sp,sp,8
    12f8:	f800283a 	ret

000012fc <pushbutton_ISR>:
 *                                                                          
 * This ISR checks which KEY has been pressed. If KEY1, then it enables audio-in
 * interrupts (recording). If KEY2, it enables audio-out interrupts (playback).
****************************************************************************************/
void pushbutton_ISR(struct alt_up_dev *up_dev, unsigned int id)
{
    12fc:	defffa04 	addi	sp,sp,-24
    1300:	dfc00515 	stw	ra,20(sp)
    1304:	df000415 	stw	fp,16(sp)
    1308:	df000404 	addi	fp,sp,16
    130c:	e13ffe15 	stw	r4,-8(fp)
    1310:	e17fff15 	stw	r5,-4(fp)
	alt_up_audio_dev *audio_dev;

	audio_dev = up_dev->audio_dev;
    1314:	e0bffe17 	ldw	r2,-8(fp)
    1318:	10800417 	ldw	r2,16(r2)
    131c:	e0bffd15 	stw	r2,-12(fp)
	
	int KEY_value;

	/* read the pushbutton interrupt register */
	KEY_value = alt_up_parallel_port_read_edge_capture (up_dev->KEY_dev);
    1320:	e0bffe17 	ldw	r2,-8(fp)
    1324:	10800017 	ldw	r2,0(r2)
    1328:	10800a17 	ldw	r2,40(r2)
    132c:	10800304 	addi	r2,r2,12
    1330:	10800037 	ldwio	r2,0(r2)
    1334:	e0bffc15 	stw	r2,-16(fp)
	alt_up_parallel_port_clear_edge_capture (up_dev->KEY_dev);	// Clear the interrupt
    1338:	e0bffe17 	ldw	r2,-8(fp)
    133c:	10800017 	ldw	r2,0(r2)
    1340:	10800a17 	ldw	r2,40(r2)
    1344:	10800304 	addi	r2,r2,12
    1348:	10000035 	stwio	zero,0(r2)

	if (KEY_value == 0x2)										// check KEY1
    134c:	e0bffc17 	ldw	r2,-16(fp)
    1350:	10800098 	cmpnei	r2,r2,2
    1354:	1000081e 	bne	r2,zero,1378 <pushbutton_ISR+0x7c>
	{
		// reset the buffer index for recording
		buf_index_record = 0;
    1358:	00800074 	movhi	r2,1
    135c:	10968704 	addi	r2,r2,23068
    1360:	10000015 	stw	zero,0(r2)
		// clear audio FIFOs
		alt_up_audio_reset_audio_core (audio_dev);
    1364:	e13ffd17 	ldw	r4,-12(fp)
    1368:	000cb7c0 	call	cb7c <alt_up_audio_reset_audio_core>
		// enable audio-in interrupts
		alt_up_audio_enable_read_interrupt (audio_dev);
    136c:	e13ffd17 	ldw	r4,-12(fp)
    1370:	000c9cc0 	call	c9cc <alt_up_audio_enable_read_interrupt>
    1374:	00000a06 	br	13a0 <pushbutton_ISR+0xa4>
	}
	else if (KEY_value == 0x4)									// check KEY2
    1378:	e0bffc17 	ldw	r2,-16(fp)
    137c:	10800118 	cmpnei	r2,r2,4
    1380:	1000071e 	bne	r2,zero,13a0 <pushbutton_ISR+0xa4>
	{
		// reset counter to start playback
		buf_index_play = 0;
    1384:	00800074 	movhi	r2,1
    1388:	10968604 	addi	r2,r2,23064
    138c:	10000015 	stw	zero,0(r2)
		// clear audio FIFOs
		alt_up_audio_reset_audio_core (audio_dev);
    1390:	e13ffd17 	ldw	r4,-12(fp)
    1394:	000cb7c0 	call	cb7c <alt_up_audio_reset_audio_core>
		// enable audio-out interrupts
		alt_up_audio_enable_write_interrupt (audio_dev);
    1398:	e13ffd17 	ldw	r4,-12(fp)
    139c:	000ca680 	call	ca68 <alt_up_audio_enable_write_interrupt>
	}
	return;
}
    13a0:	e037883a 	mov	sp,fp
    13a4:	dfc00117 	ldw	ra,4(sp)
    13a8:	df000017 	ldw	fp,0(sp)
    13ac:	dec00204 	addi	sp,sp,8
    13b0:	f800283a 	ret

000013b4 <memcpy>:
    13b4:	01c003c4 	movi	r7,15
    13b8:	2007883a 	mov	r3,r4
    13bc:	3980032e 	bgeu	r7,r6,13cc <memcpy+0x18>
    13c0:	2904b03a 	or	r2,r5,r4
    13c4:	108000cc 	andi	r2,r2,3
    13c8:	10000926 	beq	r2,zero,13f0 <memcpy+0x3c>
    13cc:	30000626 	beq	r6,zero,13e8 <memcpy+0x34>
    13d0:	30cd883a 	add	r6,r6,r3
    13d4:	28800003 	ldbu	r2,0(r5)
    13d8:	29400044 	addi	r5,r5,1
    13dc:	18800005 	stb	r2,0(r3)
    13e0:	18c00044 	addi	r3,r3,1
    13e4:	30fffb1e 	bne	r6,r3,13d4 <memcpy+0x20>
    13e8:	2005883a 	mov	r2,r4
    13ec:	f800283a 	ret
    13f0:	3811883a 	mov	r8,r7
    13f4:	200f883a 	mov	r7,r4
    13f8:	28c00017 	ldw	r3,0(r5)
    13fc:	31bffc04 	addi	r6,r6,-16
    1400:	38c00015 	stw	r3,0(r7)
    1404:	28800117 	ldw	r2,4(r5)
    1408:	38800115 	stw	r2,4(r7)
    140c:	28c00217 	ldw	r3,8(r5)
    1410:	38c00215 	stw	r3,8(r7)
    1414:	28800317 	ldw	r2,12(r5)
    1418:	29400404 	addi	r5,r5,16
    141c:	38800315 	stw	r2,12(r7)
    1420:	39c00404 	addi	r7,r7,16
    1424:	41bff436 	bltu	r8,r6,13f8 <memcpy+0x44>
    1428:	008000c4 	movi	r2,3
    142c:	1180072e 	bgeu	r2,r6,144c <memcpy+0x98>
    1430:	1007883a 	mov	r3,r2
    1434:	28800017 	ldw	r2,0(r5)
    1438:	31bfff04 	addi	r6,r6,-4
    143c:	29400104 	addi	r5,r5,4
    1440:	38800015 	stw	r2,0(r7)
    1444:	39c00104 	addi	r7,r7,4
    1448:	19bffa36 	bltu	r3,r6,1434 <memcpy+0x80>
    144c:	3807883a 	mov	r3,r7
    1450:	003fde06 	br	13cc <memcpy+0x18>

00001454 <memset>:
    1454:	008000c4 	movi	r2,3
    1458:	29403fcc 	andi	r5,r5,255
    145c:	2007883a 	mov	r3,r4
    1460:	1180022e 	bgeu	r2,r6,146c <memset+0x18>
    1464:	2084703a 	and	r2,r4,r2
    1468:	10000826 	beq	r2,zero,148c <memset+0x38>
    146c:	30000526 	beq	r6,zero,1484 <memset+0x30>
    1470:	2805883a 	mov	r2,r5
    1474:	30cd883a 	add	r6,r6,r3
    1478:	18800005 	stb	r2,0(r3)
    147c:	18c00044 	addi	r3,r3,1
    1480:	19bffd1e 	bne	r3,r6,1478 <memset+0x24>
    1484:	2005883a 	mov	r2,r4
    1488:	f800283a 	ret
    148c:	2804923a 	slli	r2,r5,8
    1490:	020003c4 	movi	r8,15
    1494:	200f883a 	mov	r7,r4
    1498:	2884b03a 	or	r2,r5,r2
    149c:	1006943a 	slli	r3,r2,16
    14a0:	10c6b03a 	or	r3,r2,r3
    14a4:	41800a2e 	bgeu	r8,r6,14d0 <memset+0x7c>
    14a8:	4005883a 	mov	r2,r8
    14ac:	31bffc04 	addi	r6,r6,-16
    14b0:	38c00015 	stw	r3,0(r7)
    14b4:	38c00115 	stw	r3,4(r7)
    14b8:	38c00215 	stw	r3,8(r7)
    14bc:	38c00315 	stw	r3,12(r7)
    14c0:	39c00404 	addi	r7,r7,16
    14c4:	11bff936 	bltu	r2,r6,14ac <memset+0x58>
    14c8:	008000c4 	movi	r2,3
    14cc:	1180052e 	bgeu	r2,r6,14e4 <memset+0x90>
    14d0:	31bfff04 	addi	r6,r6,-4
    14d4:	008000c4 	movi	r2,3
    14d8:	38c00015 	stw	r3,0(r7)
    14dc:	39c00104 	addi	r7,r7,4
    14e0:	11bffb36 	bltu	r2,r6,14d0 <memset+0x7c>
    14e4:	3807883a 	mov	r3,r7
    14e8:	003fe006 	br	146c <memset+0x18>

000014ec <printf>:
    14ec:	defffb04 	addi	sp,sp,-20
    14f0:	dfc00115 	stw	ra,4(sp)
    14f4:	d9400215 	stw	r5,8(sp)
    14f8:	d9800315 	stw	r6,12(sp)
    14fc:	d9c00415 	stw	r7,16(sp)
    1500:	00800074 	movhi	r2,1
    1504:	108eef04 	addi	r2,r2,15292
    1508:	10c00017 	ldw	r3,0(r2)
    150c:	200b883a 	mov	r5,r4
    1510:	d8800204 	addi	r2,sp,8
    1514:	19000217 	ldw	r4,8(r3)
    1518:	100d883a 	mov	r6,r2
    151c:	d8800015 	stw	r2,0(sp)
    1520:	00034680 	call	3468 <__vfprintf_internal>
    1524:	dfc00117 	ldw	ra,4(sp)
    1528:	dec00504 	addi	sp,sp,20
    152c:	f800283a 	ret

00001530 <_printf_r>:
    1530:	defffc04 	addi	sp,sp,-16
    1534:	dfc00115 	stw	ra,4(sp)
    1538:	d9800215 	stw	r6,8(sp)
    153c:	d9c00315 	stw	r7,12(sp)
    1540:	280d883a 	mov	r6,r5
    1544:	21400217 	ldw	r5,8(r4)
    1548:	d8c00204 	addi	r3,sp,8
    154c:	180f883a 	mov	r7,r3
    1550:	d8c00015 	stw	r3,0(sp)
    1554:	00015bc0 	call	15bc <___vfprintf_internal_r>
    1558:	dfc00117 	ldw	ra,4(sp)
    155c:	dec00404 	addi	sp,sp,16
    1560:	f800283a 	ret

00001564 <__sprint_r>:
    1564:	30800217 	ldw	r2,8(r6)
    1568:	defffe04 	addi	sp,sp,-8
    156c:	dc000015 	stw	r16,0(sp)
    1570:	dfc00115 	stw	ra,4(sp)
    1574:	3021883a 	mov	r16,r6
    1578:	0007883a 	mov	r3,zero
    157c:	1000061e 	bne	r2,zero,1598 <__sprint_r+0x34>
    1580:	1805883a 	mov	r2,r3
    1584:	30000115 	stw	zero,4(r6)
    1588:	dfc00117 	ldw	ra,4(sp)
    158c:	dc000017 	ldw	r16,0(sp)
    1590:	dec00204 	addi	sp,sp,8
    1594:	f800283a 	ret
    1598:	00056c40 	call	56c4 <__sfvwrite_r>
    159c:	1007883a 	mov	r3,r2
    15a0:	1805883a 	mov	r2,r3
    15a4:	80000115 	stw	zero,4(r16)
    15a8:	80000215 	stw	zero,8(r16)
    15ac:	dfc00117 	ldw	ra,4(sp)
    15b0:	dc000017 	ldw	r16,0(sp)
    15b4:	dec00204 	addi	sp,sp,8
    15b8:	f800283a 	ret

000015bc <___vfprintf_internal_r>:
    15bc:	defea404 	addi	sp,sp,-1392
    15c0:	dd815815 	stw	r22,1376(sp)
    15c4:	dc015215 	stw	r16,1352(sp)
    15c8:	d9c15115 	stw	r7,1348(sp)
    15cc:	dfc15b15 	stw	ra,1388(sp)
    15d0:	df015a15 	stw	fp,1384(sp)
    15d4:	ddc15915 	stw	r23,1380(sp)
    15d8:	dd415715 	stw	r21,1372(sp)
    15dc:	dd015615 	stw	r20,1368(sp)
    15e0:	dcc15515 	stw	r19,1364(sp)
    15e4:	dc815415 	stw	r18,1360(sp)
    15e8:	dc415315 	stw	r17,1356(sp)
    15ec:	282d883a 	mov	r22,r5
    15f0:	3021883a 	mov	r16,r6
    15f4:	d9014f15 	stw	r4,1340(sp)
    15f8:	0005ce80 	call	5ce8 <_localeconv_r>
    15fc:	10800017 	ldw	r2,0(r2)
    1600:	d9c15117 	ldw	r7,1348(sp)
    1604:	d8814915 	stw	r2,1316(sp)
    1608:	d8814f17 	ldw	r2,1340(sp)
    160c:	10000226 	beq	r2,zero,1618 <___vfprintf_internal_r+0x5c>
    1610:	10800e17 	ldw	r2,56(r2)
    1614:	10020d26 	beq	r2,zero,1e4c <___vfprintf_internal_r+0x890>
    1618:	b080030b 	ldhu	r2,12(r22)
    161c:	1080020c 	andi	r2,r2,8
    1620:	10020e26 	beq	r2,zero,1e5c <___vfprintf_internal_r+0x8a0>
    1624:	b0800417 	ldw	r2,16(r22)
    1628:	10020c26 	beq	r2,zero,1e5c <___vfprintf_internal_r+0x8a0>
    162c:	b200030b 	ldhu	r8,12(r22)
    1630:	00800284 	movi	r2,10
    1634:	40c0068c 	andi	r3,r8,26
    1638:	18802f1e 	bne	r3,r2,16f8 <___vfprintf_internal_r+0x13c>
    163c:	b080038f 	ldh	r2,14(r22)
    1640:	10002d16 	blt	r2,zero,16f8 <___vfprintf_internal_r+0x13c>
    1644:	b240038b 	ldhu	r9,14(r22)
    1648:	b2800717 	ldw	r10,28(r22)
    164c:	b2c00917 	ldw	r11,36(r22)
    1650:	d9014f17 	ldw	r4,1340(sp)
    1654:	dc402904 	addi	r17,sp,164
    1658:	d8804004 	addi	r2,sp,256
    165c:	00c10004 	movi	r3,1024
    1660:	423fff4c 	andi	r8,r8,65533
    1664:	800d883a 	mov	r6,r16
    1668:	880b883a 	mov	r5,r17
    166c:	da002c0d 	sth	r8,176(sp)
    1670:	da402c8d 	sth	r9,178(sp)
    1674:	da803015 	stw	r10,192(sp)
    1678:	dac03215 	stw	r11,200(sp)
    167c:	d8802d15 	stw	r2,180(sp)
    1680:	d8c02e15 	stw	r3,184(sp)
    1684:	d8802915 	stw	r2,164(sp)
    1688:	d8c02b15 	stw	r3,172(sp)
    168c:	d8002f15 	stw	zero,188(sp)
    1690:	00015bc0 	call	15bc <___vfprintf_internal_r>
    1694:	d8814b15 	stw	r2,1324(sp)
    1698:	10000416 	blt	r2,zero,16ac <___vfprintf_internal_r+0xf0>
    169c:	d9014f17 	ldw	r4,1340(sp)
    16a0:	880b883a 	mov	r5,r17
    16a4:	0004d940 	call	4d94 <_fflush_r>
    16a8:	1002321e 	bne	r2,zero,1f74 <___vfprintf_internal_r+0x9b8>
    16ac:	d8802c0b 	ldhu	r2,176(sp)
    16b0:	1080100c 	andi	r2,r2,64
    16b4:	10000326 	beq	r2,zero,16c4 <___vfprintf_internal_r+0x108>
    16b8:	b080030b 	ldhu	r2,12(r22)
    16bc:	10801014 	ori	r2,r2,64
    16c0:	b080030d 	sth	r2,12(r22)
    16c4:	d8814b17 	ldw	r2,1324(sp)
    16c8:	dfc15b17 	ldw	ra,1388(sp)
    16cc:	df015a17 	ldw	fp,1384(sp)
    16d0:	ddc15917 	ldw	r23,1380(sp)
    16d4:	dd815817 	ldw	r22,1376(sp)
    16d8:	dd415717 	ldw	r21,1372(sp)
    16dc:	dd015617 	ldw	r20,1368(sp)
    16e0:	dcc15517 	ldw	r19,1364(sp)
    16e4:	dc815417 	ldw	r18,1360(sp)
    16e8:	dc415317 	ldw	r17,1356(sp)
    16ec:	dc015217 	ldw	r16,1352(sp)
    16f0:	dec15c04 	addi	sp,sp,1392
    16f4:	f800283a 	ret
    16f8:	0005883a 	mov	r2,zero
    16fc:	0007883a 	mov	r3,zero
    1700:	dd401904 	addi	r21,sp,100
    1704:	d8814215 	stw	r2,1288(sp)
    1708:	802f883a 	mov	r23,r16
    170c:	d8c14315 	stw	r3,1292(sp)
    1710:	d8014b15 	stw	zero,1324(sp)
    1714:	d8014815 	stw	zero,1312(sp)
    1718:	d8014415 	stw	zero,1296(sp)
    171c:	d8014715 	stw	zero,1308(sp)
    1720:	dd400c15 	stw	r21,48(sp)
    1724:	d8000e15 	stw	zero,56(sp)
    1728:	d8000d15 	stw	zero,52(sp)
    172c:	b8800007 	ldb	r2,0(r23)
    1730:	10001926 	beq	r2,zero,1798 <___vfprintf_internal_r+0x1dc>
    1734:	00c00944 	movi	r3,37
    1738:	10c01726 	beq	r2,r3,1798 <___vfprintf_internal_r+0x1dc>
    173c:	b821883a 	mov	r16,r23
    1740:	00000106 	br	1748 <___vfprintf_internal_r+0x18c>
    1744:	10c00326 	beq	r2,r3,1754 <___vfprintf_internal_r+0x198>
    1748:	84000044 	addi	r16,r16,1
    174c:	80800007 	ldb	r2,0(r16)
    1750:	103ffc1e 	bne	r2,zero,1744 <___vfprintf_internal_r+0x188>
    1754:	85e7c83a 	sub	r19,r16,r23
    1758:	98000e26 	beq	r19,zero,1794 <___vfprintf_internal_r+0x1d8>
    175c:	dc800e17 	ldw	r18,56(sp)
    1760:	dc400d17 	ldw	r17,52(sp)
    1764:	008001c4 	movi	r2,7
    1768:	94e5883a 	add	r18,r18,r19
    176c:	8c400044 	addi	r17,r17,1
    1770:	adc00015 	stw	r23,0(r21)
    1774:	dc800e15 	stw	r18,56(sp)
    1778:	acc00115 	stw	r19,4(r21)
    177c:	dc400d15 	stw	r17,52(sp)
    1780:	14428b16 	blt	r2,r17,21b0 <___vfprintf_internal_r+0xbf4>
    1784:	ad400204 	addi	r21,r21,8
    1788:	d9014b17 	ldw	r4,1324(sp)
    178c:	24c9883a 	add	r4,r4,r19
    1790:	d9014b15 	stw	r4,1324(sp)
    1794:	802f883a 	mov	r23,r16
    1798:	b8800007 	ldb	r2,0(r23)
    179c:	10013c26 	beq	r2,zero,1c90 <___vfprintf_internal_r+0x6d4>
    17a0:	bdc00044 	addi	r23,r23,1
    17a4:	d8000405 	stb	zero,16(sp)
    17a8:	b8c00007 	ldb	r3,0(r23)
    17ac:	04ffffc4 	movi	r19,-1
    17b0:	d8014c15 	stw	zero,1328(sp)
    17b4:	d8014a15 	stw	zero,1320(sp)
    17b8:	d8c14d15 	stw	r3,1332(sp)
    17bc:	bdc00044 	addi	r23,r23,1
    17c0:	d9414d17 	ldw	r5,1332(sp)
    17c4:	00801604 	movi	r2,88
    17c8:	28fff804 	addi	r3,r5,-32
    17cc:	10c06036 	bltu	r2,r3,1950 <___vfprintf_internal_r+0x394>
    17d0:	18c5883a 	add	r2,r3,r3
    17d4:	1085883a 	add	r2,r2,r2
    17d8:	00c00034 	movhi	r3,0
    17dc:	18c5fb04 	addi	r3,r3,6124
    17e0:	10c5883a 	add	r2,r2,r3
    17e4:	11000017 	ldw	r4,0(r2)
    17e8:	2000683a 	jmp	r4
    17ec:	00002760 	cmpeqi	zero,zero,157
    17f0:	00001950 	cmplti	zero,zero,101
    17f4:	00001950 	cmplti	zero,zero,101
    17f8:	0000274c 	andi	zero,zero,157
    17fc:	00001950 	cmplti	zero,zero,101
    1800:	00001950 	cmplti	zero,zero,101
    1804:	00001950 	cmplti	zero,zero,101
    1808:	00001950 	cmplti	zero,zero,101
    180c:	00001950 	cmplti	zero,zero,101
    1810:	00001950 	cmplti	zero,zero,101
    1814:	0000252c 	andhi	zero,zero,148
    1818:	0000273c 	xorhi	zero,zero,156
    181c:	00001950 	cmplti	zero,zero,101
    1820:	00002544 	movi	zero,149
    1824:	000027d8 	cmpnei	zero,zero,159
    1828:	00001950 	cmplti	zero,zero,101
    182c:	000027c4 	movi	zero,159
    1830:	0000278c 	andi	zero,zero,158
    1834:	0000278c 	andi	zero,zero,158
    1838:	0000278c 	andi	zero,zero,158
    183c:	0000278c 	andi	zero,zero,158
    1840:	0000278c 	andi	zero,zero,158
    1844:	0000278c 	andi	zero,zero,158
    1848:	0000278c 	andi	zero,zero,158
    184c:	0000278c 	andi	zero,zero,158
    1850:	0000278c 	andi	zero,zero,158
    1854:	00001950 	cmplti	zero,zero,101
    1858:	00001950 	cmplti	zero,zero,101
    185c:	00001950 	cmplti	zero,zero,101
    1860:	00001950 	cmplti	zero,zero,101
    1864:	00001950 	cmplti	zero,zero,101
    1868:	00001950 	cmplti	zero,zero,101
    186c:	00001950 	cmplti	zero,zero,101
    1870:	00001950 	cmplti	zero,zero,101
    1874:	00001950 	cmplti	zero,zero,101
    1878:	00001950 	cmplti	zero,zero,101
    187c:	00001fa8 	cmpgeui	zero,zero,126
    1880:	00002614 	movui	zero,152
    1884:	00001950 	cmplti	zero,zero,101
    1888:	00002614 	movui	zero,152
    188c:	00001950 	cmplti	zero,zero,101
    1890:	00001950 	cmplti	zero,zero,101
    1894:	00001950 	cmplti	zero,zero,101
    1898:	00001950 	cmplti	zero,zero,101
    189c:	00002778 	rdprs	zero,zero,157
    18a0:	00001950 	cmplti	zero,zero,101
    18a4:	00001950 	cmplti	zero,zero,101
    18a8:	0000205c 	xori	zero,zero,129
    18ac:	00001950 	cmplti	zero,zero,101
    18b0:	00001950 	cmplti	zero,zero,101
    18b4:	00001950 	cmplti	zero,zero,101
    18b8:	00001950 	cmplti	zero,zero,101
    18bc:	00001950 	cmplti	zero,zero,101
    18c0:	000020a8 	cmpgeui	zero,zero,130
    18c4:	00001950 	cmplti	zero,zero,101
    18c8:	00001950 	cmplti	zero,zero,101
    18cc:	000026c8 	cmpgei	zero,zero,155
    18d0:	00001950 	cmplti	zero,zero,101
    18d4:	00001950 	cmplti	zero,zero,101
    18d8:	00001950 	cmplti	zero,zero,101
    18dc:	00001950 	cmplti	zero,zero,101
    18e0:	00001950 	cmplti	zero,zero,101
    18e4:	00001950 	cmplti	zero,zero,101
    18e8:	00001950 	cmplti	zero,zero,101
    18ec:	00001950 	cmplti	zero,zero,101
    18f0:	00001950 	cmplti	zero,zero,101
    18f4:	00001950 	cmplti	zero,zero,101
    18f8:	0000269c 	xori	zero,zero,154
    18fc:	00001fb4 	movhi	zero,126
    1900:	00002614 	movui	zero,152
    1904:	00002614 	movui	zero,152
    1908:	00002614 	movui	zero,152
    190c:	00002600 	call	260 <PS2_ISR+0x6c>
    1910:	00001fb4 	movhi	zero,126
    1914:	00001950 	cmplti	zero,zero,101
    1918:	00001950 	cmplti	zero,zero,101
    191c:	00002588 	cmpgei	zero,zero,150
    1920:	00001950 	cmplti	zero,zero,101
    1924:	00002558 	cmpnei	zero,zero,149
    1928:	00002068 	cmpgeui	zero,zero,129
    192c:	000025b8 	rdprs	zero,zero,150
    1930:	000025a4 	muli	zero,zero,150
    1934:	00001950 	cmplti	zero,zero,101
    1938:	00002834 	movhi	zero,160
    193c:	00001950 	cmplti	zero,zero,101
    1940:	000020b4 	movhi	zero,130
    1944:	00001950 	cmplti	zero,zero,101
    1948:	00001950 	cmplti	zero,zero,101
    194c:	0000272c 	andhi	zero,zero,156
    1950:	d9014d17 	ldw	r4,1332(sp)
    1954:	2000ce26 	beq	r4,zero,1c90 <___vfprintf_internal_r+0x6d4>
    1958:	01400044 	movi	r5,1
    195c:	d9800f04 	addi	r6,sp,60
    1960:	d9c14015 	stw	r7,1280(sp)
    1964:	d9414515 	stw	r5,1300(sp)
    1968:	d9814115 	stw	r6,1284(sp)
    196c:	280f883a 	mov	r7,r5
    1970:	d9000f05 	stb	r4,60(sp)
    1974:	d8000405 	stb	zero,16(sp)
    1978:	d8014615 	stw	zero,1304(sp)
    197c:	d8c14c17 	ldw	r3,1328(sp)
    1980:	1880008c 	andi	r2,r3,2
    1984:	1005003a 	cmpeq	r2,r2,zero
    1988:	d8815015 	stw	r2,1344(sp)
    198c:	1000031e 	bne	r2,zero,199c <___vfprintf_internal_r+0x3e0>
    1990:	d9014517 	ldw	r4,1300(sp)
    1994:	21000084 	addi	r4,r4,2
    1998:	d9014515 	stw	r4,1300(sp)
    199c:	d9414c17 	ldw	r5,1328(sp)
    19a0:	2940210c 	andi	r5,r5,132
    19a4:	d9414e15 	stw	r5,1336(sp)
    19a8:	28002d1e 	bne	r5,zero,1a60 <___vfprintf_internal_r+0x4a4>
    19ac:	d9814a17 	ldw	r6,1320(sp)
    19b0:	d8814517 	ldw	r2,1300(sp)
    19b4:	30a1c83a 	sub	r16,r6,r2
    19b8:	0400290e 	bge	zero,r16,1a60 <___vfprintf_internal_r+0x4a4>
    19bc:	00800404 	movi	r2,16
    19c0:	1404580e 	bge	r2,r16,2b24 <___vfprintf_internal_r+0x1568>
    19c4:	dc800e17 	ldw	r18,56(sp)
    19c8:	dc400d17 	ldw	r17,52(sp)
    19cc:	1027883a 	mov	r19,r2
    19d0:	07000074 	movhi	fp,1
    19d4:	e7066684 	addi	fp,fp,6554
    19d8:	050001c4 	movi	r20,7
    19dc:	00000306 	br	19ec <___vfprintf_internal_r+0x430>
    19e0:	843ffc04 	addi	r16,r16,-16
    19e4:	ad400204 	addi	r21,r21,8
    19e8:	9c00130e 	bge	r19,r16,1a38 <___vfprintf_internal_r+0x47c>
    19ec:	94800404 	addi	r18,r18,16
    19f0:	8c400044 	addi	r17,r17,1
    19f4:	af000015 	stw	fp,0(r21)
    19f8:	acc00115 	stw	r19,4(r21)
    19fc:	dc800e15 	stw	r18,56(sp)
    1a00:	dc400d15 	stw	r17,52(sp)
    1a04:	a47ff60e 	bge	r20,r17,19e0 <___vfprintf_internal_r+0x424>
    1a08:	d9014f17 	ldw	r4,1340(sp)
    1a0c:	b00b883a 	mov	r5,r22
    1a10:	d9800c04 	addi	r6,sp,48
    1a14:	d9c15115 	stw	r7,1348(sp)
    1a18:	00015640 	call	1564 <__sprint_r>
    1a1c:	d9c15117 	ldw	r7,1348(sp)
    1a20:	10009e1e 	bne	r2,zero,1c9c <___vfprintf_internal_r+0x6e0>
    1a24:	843ffc04 	addi	r16,r16,-16
    1a28:	dc800e17 	ldw	r18,56(sp)
    1a2c:	dc400d17 	ldw	r17,52(sp)
    1a30:	dd401904 	addi	r21,sp,100
    1a34:	9c3fed16 	blt	r19,r16,19ec <___vfprintf_internal_r+0x430>
    1a38:	9425883a 	add	r18,r18,r16
    1a3c:	8c400044 	addi	r17,r17,1
    1a40:	008001c4 	movi	r2,7
    1a44:	af000015 	stw	fp,0(r21)
    1a48:	ac000115 	stw	r16,4(r21)
    1a4c:	dc800e15 	stw	r18,56(sp)
    1a50:	dc400d15 	stw	r17,52(sp)
    1a54:	1441f516 	blt	r2,r17,222c <___vfprintf_internal_r+0xc70>
    1a58:	ad400204 	addi	r21,r21,8
    1a5c:	00000206 	br	1a68 <___vfprintf_internal_r+0x4ac>
    1a60:	dc800e17 	ldw	r18,56(sp)
    1a64:	dc400d17 	ldw	r17,52(sp)
    1a68:	d8800407 	ldb	r2,16(sp)
    1a6c:	10000b26 	beq	r2,zero,1a9c <___vfprintf_internal_r+0x4e0>
    1a70:	00800044 	movi	r2,1
    1a74:	94800044 	addi	r18,r18,1
    1a78:	8c400044 	addi	r17,r17,1
    1a7c:	a8800115 	stw	r2,4(r21)
    1a80:	d8c00404 	addi	r3,sp,16
    1a84:	008001c4 	movi	r2,7
    1a88:	a8c00015 	stw	r3,0(r21)
    1a8c:	dc800e15 	stw	r18,56(sp)
    1a90:	dc400d15 	stw	r17,52(sp)
    1a94:	1441da16 	blt	r2,r17,2200 <___vfprintf_internal_r+0xc44>
    1a98:	ad400204 	addi	r21,r21,8
    1a9c:	d9015017 	ldw	r4,1344(sp)
    1aa0:	20000b1e 	bne	r4,zero,1ad0 <___vfprintf_internal_r+0x514>
    1aa4:	d8800444 	addi	r2,sp,17
    1aa8:	94800084 	addi	r18,r18,2
    1aac:	8c400044 	addi	r17,r17,1
    1ab0:	a8800015 	stw	r2,0(r21)
    1ab4:	00c00084 	movi	r3,2
    1ab8:	008001c4 	movi	r2,7
    1abc:	a8c00115 	stw	r3,4(r21)
    1ac0:	dc800e15 	stw	r18,56(sp)
    1ac4:	dc400d15 	stw	r17,52(sp)
    1ac8:	1441c216 	blt	r2,r17,21d4 <___vfprintf_internal_r+0xc18>
    1acc:	ad400204 	addi	r21,r21,8
    1ad0:	d9414e17 	ldw	r5,1336(sp)
    1ad4:	00802004 	movi	r2,128
    1ad8:	2880b126 	beq	r5,r2,1da0 <___vfprintf_internal_r+0x7e4>
    1adc:	d8c14617 	ldw	r3,1304(sp)
    1ae0:	19e1c83a 	sub	r16,r3,r7
    1ae4:	0400260e 	bge	zero,r16,1b80 <___vfprintf_internal_r+0x5c4>
    1ae8:	00800404 	movi	r2,16
    1aec:	1403c90e 	bge	r2,r16,2a14 <___vfprintf_internal_r+0x1458>
    1af0:	1027883a 	mov	r19,r2
    1af4:	07000074 	movhi	fp,1
    1af8:	e7066284 	addi	fp,fp,6538
    1afc:	050001c4 	movi	r20,7
    1b00:	00000306 	br	1b10 <___vfprintf_internal_r+0x554>
    1b04:	843ffc04 	addi	r16,r16,-16
    1b08:	ad400204 	addi	r21,r21,8
    1b0c:	9c00130e 	bge	r19,r16,1b5c <___vfprintf_internal_r+0x5a0>
    1b10:	94800404 	addi	r18,r18,16
    1b14:	8c400044 	addi	r17,r17,1
    1b18:	af000015 	stw	fp,0(r21)
    1b1c:	acc00115 	stw	r19,4(r21)
    1b20:	dc800e15 	stw	r18,56(sp)
    1b24:	dc400d15 	stw	r17,52(sp)
    1b28:	a47ff60e 	bge	r20,r17,1b04 <___vfprintf_internal_r+0x548>
    1b2c:	d9014f17 	ldw	r4,1340(sp)
    1b30:	b00b883a 	mov	r5,r22
    1b34:	d9800c04 	addi	r6,sp,48
    1b38:	d9c15115 	stw	r7,1348(sp)
    1b3c:	00015640 	call	1564 <__sprint_r>
    1b40:	d9c15117 	ldw	r7,1348(sp)
    1b44:	1000551e 	bne	r2,zero,1c9c <___vfprintf_internal_r+0x6e0>
    1b48:	843ffc04 	addi	r16,r16,-16
    1b4c:	dc800e17 	ldw	r18,56(sp)
    1b50:	dc400d17 	ldw	r17,52(sp)
    1b54:	dd401904 	addi	r21,sp,100
    1b58:	9c3fed16 	blt	r19,r16,1b10 <___vfprintf_internal_r+0x554>
    1b5c:	9425883a 	add	r18,r18,r16
    1b60:	8c400044 	addi	r17,r17,1
    1b64:	008001c4 	movi	r2,7
    1b68:	af000015 	stw	fp,0(r21)
    1b6c:	ac000115 	stw	r16,4(r21)
    1b70:	dc800e15 	stw	r18,56(sp)
    1b74:	dc400d15 	stw	r17,52(sp)
    1b78:	14418216 	blt	r2,r17,2184 <___vfprintf_internal_r+0xbc8>
    1b7c:	ad400204 	addi	r21,r21,8
    1b80:	d9014c17 	ldw	r4,1328(sp)
    1b84:	2080400c 	andi	r2,r4,256
    1b88:	10004a1e 	bne	r2,zero,1cb4 <___vfprintf_internal_r+0x6f8>
    1b8c:	d9414117 	ldw	r5,1284(sp)
    1b90:	91e5883a 	add	r18,r18,r7
    1b94:	8c400044 	addi	r17,r17,1
    1b98:	008001c4 	movi	r2,7
    1b9c:	a9400015 	stw	r5,0(r21)
    1ba0:	a9c00115 	stw	r7,4(r21)
    1ba4:	dc800e15 	stw	r18,56(sp)
    1ba8:	dc400d15 	stw	r17,52(sp)
    1bac:	14416716 	blt	r2,r17,214c <___vfprintf_internal_r+0xb90>
    1bb0:	a8c00204 	addi	r3,r21,8
    1bb4:	d9814c17 	ldw	r6,1328(sp)
    1bb8:	3080010c 	andi	r2,r6,4
    1bbc:	10002826 	beq	r2,zero,1c60 <___vfprintf_internal_r+0x6a4>
    1bc0:	d8814a17 	ldw	r2,1320(sp)
    1bc4:	d9014517 	ldw	r4,1300(sp)
    1bc8:	1121c83a 	sub	r16,r2,r4
    1bcc:	0400240e 	bge	zero,r16,1c60 <___vfprintf_internal_r+0x6a4>
    1bd0:	00800404 	movi	r2,16
    1bd4:	14044f0e 	bge	r2,r16,2d14 <___vfprintf_internal_r+0x1758>
    1bd8:	dc400d17 	ldw	r17,52(sp)
    1bdc:	1027883a 	mov	r19,r2
    1be0:	07000074 	movhi	fp,1
    1be4:	e7066684 	addi	fp,fp,6554
    1be8:	050001c4 	movi	r20,7
    1bec:	00000306 	br	1bfc <___vfprintf_internal_r+0x640>
    1bf0:	843ffc04 	addi	r16,r16,-16
    1bf4:	18c00204 	addi	r3,r3,8
    1bf8:	9c00110e 	bge	r19,r16,1c40 <___vfprintf_internal_r+0x684>
    1bfc:	94800404 	addi	r18,r18,16
    1c00:	8c400044 	addi	r17,r17,1
    1c04:	1f000015 	stw	fp,0(r3)
    1c08:	1cc00115 	stw	r19,4(r3)
    1c0c:	dc800e15 	stw	r18,56(sp)
    1c10:	dc400d15 	stw	r17,52(sp)
    1c14:	a47ff60e 	bge	r20,r17,1bf0 <___vfprintf_internal_r+0x634>
    1c18:	d9014f17 	ldw	r4,1340(sp)
    1c1c:	b00b883a 	mov	r5,r22
    1c20:	d9800c04 	addi	r6,sp,48
    1c24:	00015640 	call	1564 <__sprint_r>
    1c28:	10001c1e 	bne	r2,zero,1c9c <___vfprintf_internal_r+0x6e0>
    1c2c:	843ffc04 	addi	r16,r16,-16
    1c30:	dc800e17 	ldw	r18,56(sp)
    1c34:	dc400d17 	ldw	r17,52(sp)
    1c38:	d8c01904 	addi	r3,sp,100
    1c3c:	9c3fef16 	blt	r19,r16,1bfc <___vfprintf_internal_r+0x640>
    1c40:	9425883a 	add	r18,r18,r16
    1c44:	8c400044 	addi	r17,r17,1
    1c48:	008001c4 	movi	r2,7
    1c4c:	1f000015 	stw	fp,0(r3)
    1c50:	1c000115 	stw	r16,4(r3)
    1c54:	dc800e15 	stw	r18,56(sp)
    1c58:	dc400d15 	stw	r17,52(sp)
    1c5c:	1440cb16 	blt	r2,r17,1f8c <___vfprintf_internal_r+0x9d0>
    1c60:	d8814a17 	ldw	r2,1320(sp)
    1c64:	d9414517 	ldw	r5,1300(sp)
    1c68:	1140010e 	bge	r2,r5,1c70 <___vfprintf_internal_r+0x6b4>
    1c6c:	2805883a 	mov	r2,r5
    1c70:	d9814b17 	ldw	r6,1324(sp)
    1c74:	308d883a 	add	r6,r6,r2
    1c78:	d9814b15 	stw	r6,1324(sp)
    1c7c:	90013b1e 	bne	r18,zero,216c <___vfprintf_internal_r+0xbb0>
    1c80:	d9c14017 	ldw	r7,1280(sp)
    1c84:	dd401904 	addi	r21,sp,100
    1c88:	d8000d15 	stw	zero,52(sp)
    1c8c:	003ea706 	br	172c <___vfprintf_internal_r+0x170>
    1c90:	d8800e17 	ldw	r2,56(sp)
    1c94:	10053f1e 	bne	r2,zero,3194 <___vfprintf_internal_r+0x1bd8>
    1c98:	d8000d15 	stw	zero,52(sp)
    1c9c:	b080030b 	ldhu	r2,12(r22)
    1ca0:	1080100c 	andi	r2,r2,64
    1ca4:	103e8726 	beq	r2,zero,16c4 <___vfprintf_internal_r+0x108>
    1ca8:	00bfffc4 	movi	r2,-1
    1cac:	d8814b15 	stw	r2,1324(sp)
    1cb0:	003e8406 	br	16c4 <___vfprintf_internal_r+0x108>
    1cb4:	d9814d17 	ldw	r6,1332(sp)
    1cb8:	00801944 	movi	r2,101
    1cbc:	11806e16 	blt	r2,r6,1e78 <___vfprintf_internal_r+0x8bc>
    1cc0:	d9414717 	ldw	r5,1308(sp)
    1cc4:	00c00044 	movi	r3,1
    1cc8:	1943430e 	bge	r3,r5,29d8 <___vfprintf_internal_r+0x141c>
    1ccc:	d8814117 	ldw	r2,1284(sp)
    1cd0:	94800044 	addi	r18,r18,1
    1cd4:	8c400044 	addi	r17,r17,1
    1cd8:	a8800015 	stw	r2,0(r21)
    1cdc:	008001c4 	movi	r2,7
    1ce0:	a8c00115 	stw	r3,4(r21)
    1ce4:	dc800e15 	stw	r18,56(sp)
    1ce8:	dc400d15 	stw	r17,52(sp)
    1cec:	1441ca16 	blt	r2,r17,2418 <___vfprintf_internal_r+0xe5c>
    1cf0:	a8c00204 	addi	r3,r21,8
    1cf4:	d9014917 	ldw	r4,1316(sp)
    1cf8:	00800044 	movi	r2,1
    1cfc:	94800044 	addi	r18,r18,1
    1d00:	8c400044 	addi	r17,r17,1
    1d04:	18800115 	stw	r2,4(r3)
    1d08:	008001c4 	movi	r2,7
    1d0c:	19000015 	stw	r4,0(r3)
    1d10:	dc800e15 	stw	r18,56(sp)
    1d14:	dc400d15 	stw	r17,52(sp)
    1d18:	1441b616 	blt	r2,r17,23f4 <___vfprintf_internal_r+0xe38>
    1d1c:	1cc00204 	addi	r19,r3,8
    1d20:	d9014217 	ldw	r4,1288(sp)
    1d24:	d9414317 	ldw	r5,1292(sp)
    1d28:	000d883a 	mov	r6,zero
    1d2c:	000f883a 	mov	r7,zero
    1d30:	0009d480 	call	9d48 <__nedf2>
    1d34:	10017426 	beq	r2,zero,2308 <___vfprintf_internal_r+0xd4c>
    1d38:	d9414717 	ldw	r5,1308(sp)
    1d3c:	d9814117 	ldw	r6,1284(sp)
    1d40:	8c400044 	addi	r17,r17,1
    1d44:	2c85883a 	add	r2,r5,r18
    1d48:	14bfffc4 	addi	r18,r2,-1
    1d4c:	28bfffc4 	addi	r2,r5,-1
    1d50:	30c00044 	addi	r3,r6,1
    1d54:	98800115 	stw	r2,4(r19)
    1d58:	008001c4 	movi	r2,7
    1d5c:	98c00015 	stw	r3,0(r19)
    1d60:	dc800e15 	stw	r18,56(sp)
    1d64:	dc400d15 	stw	r17,52(sp)
    1d68:	14418e16 	blt	r2,r17,23a4 <___vfprintf_internal_r+0xde8>
    1d6c:	9cc00204 	addi	r19,r19,8
    1d70:	d9414817 	ldw	r5,1312(sp)
    1d74:	d8800804 	addi	r2,sp,32
    1d78:	8c400044 	addi	r17,r17,1
    1d7c:	9165883a 	add	r18,r18,r5
    1d80:	98800015 	stw	r2,0(r19)
    1d84:	008001c4 	movi	r2,7
    1d88:	99400115 	stw	r5,4(r19)
    1d8c:	dc800e15 	stw	r18,56(sp)
    1d90:	dc400d15 	stw	r17,52(sp)
    1d94:	1440ed16 	blt	r2,r17,214c <___vfprintf_internal_r+0xb90>
    1d98:	98c00204 	addi	r3,r19,8
    1d9c:	003f8506 	br	1bb4 <___vfprintf_internal_r+0x5f8>
    1da0:	d9814a17 	ldw	r6,1320(sp)
    1da4:	d8814517 	ldw	r2,1300(sp)
    1da8:	30a1c83a 	sub	r16,r6,r2
    1dac:	043f4b0e 	bge	zero,r16,1adc <___vfprintf_internal_r+0x520>
    1db0:	00800404 	movi	r2,16
    1db4:	1404340e 	bge	r2,r16,2e88 <___vfprintf_internal_r+0x18cc>
    1db8:	1027883a 	mov	r19,r2
    1dbc:	07000074 	movhi	fp,1
    1dc0:	e7066284 	addi	fp,fp,6538
    1dc4:	050001c4 	movi	r20,7
    1dc8:	00000306 	br	1dd8 <___vfprintf_internal_r+0x81c>
    1dcc:	843ffc04 	addi	r16,r16,-16
    1dd0:	ad400204 	addi	r21,r21,8
    1dd4:	9c00130e 	bge	r19,r16,1e24 <___vfprintf_internal_r+0x868>
    1dd8:	94800404 	addi	r18,r18,16
    1ddc:	8c400044 	addi	r17,r17,1
    1de0:	af000015 	stw	fp,0(r21)
    1de4:	acc00115 	stw	r19,4(r21)
    1de8:	dc800e15 	stw	r18,56(sp)
    1dec:	dc400d15 	stw	r17,52(sp)
    1df0:	a47ff60e 	bge	r20,r17,1dcc <___vfprintf_internal_r+0x810>
    1df4:	d9014f17 	ldw	r4,1340(sp)
    1df8:	b00b883a 	mov	r5,r22
    1dfc:	d9800c04 	addi	r6,sp,48
    1e00:	d9c15115 	stw	r7,1348(sp)
    1e04:	00015640 	call	1564 <__sprint_r>
    1e08:	d9c15117 	ldw	r7,1348(sp)
    1e0c:	103fa31e 	bne	r2,zero,1c9c <___vfprintf_internal_r+0x6e0>
    1e10:	843ffc04 	addi	r16,r16,-16
    1e14:	dc800e17 	ldw	r18,56(sp)
    1e18:	dc400d17 	ldw	r17,52(sp)
    1e1c:	dd401904 	addi	r21,sp,100
    1e20:	9c3fed16 	blt	r19,r16,1dd8 <___vfprintf_internal_r+0x81c>
    1e24:	9425883a 	add	r18,r18,r16
    1e28:	8c400044 	addi	r17,r17,1
    1e2c:	008001c4 	movi	r2,7
    1e30:	af000015 	stw	fp,0(r21)
    1e34:	ac000115 	stw	r16,4(r21)
    1e38:	dc800e15 	stw	r18,56(sp)
    1e3c:	dc400d15 	stw	r17,52(sp)
    1e40:	14416116 	blt	r2,r17,23c8 <___vfprintf_internal_r+0xe0c>
    1e44:	ad400204 	addi	r21,r21,8
    1e48:	003f2406 	br	1adc <___vfprintf_internal_r+0x520>
    1e4c:	d9014f17 	ldw	r4,1340(sp)
    1e50:	000502c0 	call	502c <__sinit>
    1e54:	d9c15117 	ldw	r7,1348(sp)
    1e58:	003def06 	br	1618 <___vfprintf_internal_r+0x5c>
    1e5c:	d9014f17 	ldw	r4,1340(sp)
    1e60:	b00b883a 	mov	r5,r22
    1e64:	d9c15115 	stw	r7,1348(sp)
    1e68:	000348c0 	call	348c <__swsetup_r>
    1e6c:	d9c15117 	ldw	r7,1348(sp)
    1e70:	103dee26 	beq	r2,zero,162c <___vfprintf_internal_r+0x70>
    1e74:	003f8c06 	br	1ca8 <___vfprintf_internal_r+0x6ec>
    1e78:	d9014217 	ldw	r4,1288(sp)
    1e7c:	d9414317 	ldw	r5,1292(sp)
    1e80:	000d883a 	mov	r6,zero
    1e84:	000f883a 	mov	r7,zero
    1e88:	0009cc00 	call	9cc0 <__eqdf2>
    1e8c:	1000f21e 	bne	r2,zero,2258 <___vfprintf_internal_r+0xc9c>
    1e90:	00800074 	movhi	r2,1
    1e94:	10866204 	addi	r2,r2,6536
    1e98:	94800044 	addi	r18,r18,1
    1e9c:	8c400044 	addi	r17,r17,1
    1ea0:	a8800015 	stw	r2,0(r21)
    1ea4:	00c00044 	movi	r3,1
    1ea8:	008001c4 	movi	r2,7
    1eac:	a8c00115 	stw	r3,4(r21)
    1eb0:	dc800e15 	stw	r18,56(sp)
    1eb4:	dc400d15 	stw	r17,52(sp)
    1eb8:	1442fa16 	blt	r2,r17,2aa4 <___vfprintf_internal_r+0x14e8>
    1ebc:	a8c00204 	addi	r3,r21,8
    1ec0:	d8800517 	ldw	r2,20(sp)
    1ec4:	d9014717 	ldw	r4,1308(sp)
    1ec8:	11015c0e 	bge	r2,r4,243c <___vfprintf_internal_r+0xe80>
    1ecc:	dc400d17 	ldw	r17,52(sp)
    1ed0:	d9814917 	ldw	r6,1316(sp)
    1ed4:	00800044 	movi	r2,1
    1ed8:	94800044 	addi	r18,r18,1
    1edc:	8c400044 	addi	r17,r17,1
    1ee0:	18800115 	stw	r2,4(r3)
    1ee4:	008001c4 	movi	r2,7
    1ee8:	19800015 	stw	r6,0(r3)
    1eec:	dc800e15 	stw	r18,56(sp)
    1ef0:	dc400d15 	stw	r17,52(sp)
    1ef4:	14431016 	blt	r2,r17,2b38 <___vfprintf_internal_r+0x157c>
    1ef8:	18c00204 	addi	r3,r3,8
    1efc:	d8814717 	ldw	r2,1308(sp)
    1f00:	143fffc4 	addi	r16,r2,-1
    1f04:	043f2b0e 	bge	zero,r16,1bb4 <___vfprintf_internal_r+0x5f8>
    1f08:	00800404 	movi	r2,16
    1f0c:	1402a20e 	bge	r2,r16,2998 <___vfprintf_internal_r+0x13dc>
    1f10:	dc400d17 	ldw	r17,52(sp)
    1f14:	1027883a 	mov	r19,r2
    1f18:	07000074 	movhi	fp,1
    1f1c:	e7066284 	addi	fp,fp,6538
    1f20:	050001c4 	movi	r20,7
    1f24:	00000306 	br	1f34 <___vfprintf_internal_r+0x978>
    1f28:	18c00204 	addi	r3,r3,8
    1f2c:	843ffc04 	addi	r16,r16,-16
    1f30:	9c029c0e 	bge	r19,r16,29a4 <___vfprintf_internal_r+0x13e8>
    1f34:	94800404 	addi	r18,r18,16
    1f38:	8c400044 	addi	r17,r17,1
    1f3c:	1f000015 	stw	fp,0(r3)
    1f40:	1cc00115 	stw	r19,4(r3)
    1f44:	dc800e15 	stw	r18,56(sp)
    1f48:	dc400d15 	stw	r17,52(sp)
    1f4c:	a47ff60e 	bge	r20,r17,1f28 <___vfprintf_internal_r+0x96c>
    1f50:	d9014f17 	ldw	r4,1340(sp)
    1f54:	b00b883a 	mov	r5,r22
    1f58:	d9800c04 	addi	r6,sp,48
    1f5c:	00015640 	call	1564 <__sprint_r>
    1f60:	103f4e1e 	bne	r2,zero,1c9c <___vfprintf_internal_r+0x6e0>
    1f64:	dc800e17 	ldw	r18,56(sp)
    1f68:	dc400d17 	ldw	r17,52(sp)
    1f6c:	d8c01904 	addi	r3,sp,100
    1f70:	003fee06 	br	1f2c <___vfprintf_internal_r+0x970>
    1f74:	d8802c0b 	ldhu	r2,176(sp)
    1f78:	00ffffc4 	movi	r3,-1
    1f7c:	d8c14b15 	stw	r3,1324(sp)
    1f80:	1080100c 	andi	r2,r2,64
    1f84:	103dcc1e 	bne	r2,zero,16b8 <___vfprintf_internal_r+0xfc>
    1f88:	003dce06 	br	16c4 <___vfprintf_internal_r+0x108>
    1f8c:	d9014f17 	ldw	r4,1340(sp)
    1f90:	b00b883a 	mov	r5,r22
    1f94:	d9800c04 	addi	r6,sp,48
    1f98:	00015640 	call	1564 <__sprint_r>
    1f9c:	103f3f1e 	bne	r2,zero,1c9c <___vfprintf_internal_r+0x6e0>
    1fa0:	dc800e17 	ldw	r18,56(sp)
    1fa4:	003f2e06 	br	1c60 <___vfprintf_internal_r+0x6a4>
    1fa8:	d9414c17 	ldw	r5,1328(sp)
    1fac:	29400414 	ori	r5,r5,16
    1fb0:	d9414c15 	stw	r5,1328(sp)
    1fb4:	d9814c17 	ldw	r6,1328(sp)
    1fb8:	3080080c 	andi	r2,r6,32
    1fbc:	10014f1e 	bne	r2,zero,24fc <___vfprintf_internal_r+0xf40>
    1fc0:	d8c14c17 	ldw	r3,1328(sp)
    1fc4:	1880040c 	andi	r2,r3,16
    1fc8:	1002ea1e 	bne	r2,zero,2b74 <___vfprintf_internal_r+0x15b8>
    1fcc:	d9014c17 	ldw	r4,1328(sp)
    1fd0:	2080100c 	andi	r2,r4,64
    1fd4:	1002e726 	beq	r2,zero,2b74 <___vfprintf_internal_r+0x15b8>
    1fd8:	3880000f 	ldh	r2,0(r7)
    1fdc:	39c00104 	addi	r7,r7,4
    1fe0:	d9c14015 	stw	r7,1280(sp)
    1fe4:	1023d7fa 	srai	r17,r2,31
    1fe8:	1021883a 	mov	r16,r2
    1fec:	88037216 	blt	r17,zero,2db8 <___vfprintf_internal_r+0x17fc>
    1ff0:	01000044 	movi	r4,1
    1ff4:	98000416 	blt	r19,zero,2008 <___vfprintf_internal_r+0xa4c>
    1ff8:	d8c14c17 	ldw	r3,1328(sp)
    1ffc:	00bfdfc4 	movi	r2,-129
    2000:	1886703a 	and	r3,r3,r2
    2004:	d8c14c15 	stw	r3,1328(sp)
    2008:	8444b03a 	or	r2,r16,r17
    200c:	1002261e 	bne	r2,zero,28a8 <___vfprintf_internal_r+0x12ec>
    2010:	9802251e 	bne	r19,zero,28a8 <___vfprintf_internal_r+0x12ec>
    2014:	20803fcc 	andi	r2,r4,255
    2018:	10029b26 	beq	r2,zero,2a88 <___vfprintf_internal_r+0x14cc>
    201c:	d8c01904 	addi	r3,sp,100
    2020:	dd000f04 	addi	r20,sp,60
    2024:	d8c14115 	stw	r3,1284(sp)
    2028:	d8c14117 	ldw	r3,1284(sp)
    202c:	dcc14515 	stw	r19,1300(sp)
    2030:	a0c5c83a 	sub	r2,r20,r3
    2034:	11c00a04 	addi	r7,r2,40
    2038:	99c0010e 	bge	r19,r7,2040 <___vfprintf_internal_r+0xa84>
    203c:	d9c14515 	stw	r7,1300(sp)
    2040:	dcc14615 	stw	r19,1304(sp)
    2044:	d8800407 	ldb	r2,16(sp)
    2048:	103e4c26 	beq	r2,zero,197c <___vfprintf_internal_r+0x3c0>
    204c:	d8814517 	ldw	r2,1300(sp)
    2050:	10800044 	addi	r2,r2,1
    2054:	d8814515 	stw	r2,1300(sp)
    2058:	003e4806 	br	197c <___vfprintf_internal_r+0x3c0>
    205c:	d9814c17 	ldw	r6,1328(sp)
    2060:	31800414 	ori	r6,r6,16
    2064:	d9814c15 	stw	r6,1328(sp)
    2068:	d8c14c17 	ldw	r3,1328(sp)
    206c:	1880080c 	andi	r2,r3,32
    2070:	1001271e 	bne	r2,zero,2510 <___vfprintf_internal_r+0xf54>
    2074:	d9414c17 	ldw	r5,1328(sp)
    2078:	2880040c 	andi	r2,r5,16
    207c:	1002b61e 	bne	r2,zero,2b58 <___vfprintf_internal_r+0x159c>
    2080:	d9814c17 	ldw	r6,1328(sp)
    2084:	3080100c 	andi	r2,r6,64
    2088:	1002b326 	beq	r2,zero,2b58 <___vfprintf_internal_r+0x159c>
    208c:	3c00000b 	ldhu	r16,0(r7)
    2090:	0009883a 	mov	r4,zero
    2094:	39c00104 	addi	r7,r7,4
    2098:	0023883a 	mov	r17,zero
    209c:	d9c14015 	stw	r7,1280(sp)
    20a0:	d8000405 	stb	zero,16(sp)
    20a4:	003fd306 	br	1ff4 <___vfprintf_internal_r+0xa38>
    20a8:	d9014c17 	ldw	r4,1328(sp)
    20ac:	21000414 	ori	r4,r4,16
    20b0:	d9014c15 	stw	r4,1328(sp)
    20b4:	d9414c17 	ldw	r5,1328(sp)
    20b8:	2880080c 	andi	r2,r5,32
    20bc:	1001081e 	bne	r2,zero,24e0 <___vfprintf_internal_r+0xf24>
    20c0:	d8c14c17 	ldw	r3,1328(sp)
    20c4:	1880040c 	andi	r2,r3,16
    20c8:	1002b01e 	bne	r2,zero,2b8c <___vfprintf_internal_r+0x15d0>
    20cc:	d9014c17 	ldw	r4,1328(sp)
    20d0:	2080100c 	andi	r2,r4,64
    20d4:	1002ad26 	beq	r2,zero,2b8c <___vfprintf_internal_r+0x15d0>
    20d8:	3c00000b 	ldhu	r16,0(r7)
    20dc:	01000044 	movi	r4,1
    20e0:	39c00104 	addi	r7,r7,4
    20e4:	0023883a 	mov	r17,zero
    20e8:	d9c14015 	stw	r7,1280(sp)
    20ec:	d8000405 	stb	zero,16(sp)
    20f0:	003fc006 	br	1ff4 <___vfprintf_internal_r+0xa38>
    20f4:	d9014f17 	ldw	r4,1340(sp)
    20f8:	b00b883a 	mov	r5,r22
    20fc:	d9800c04 	addi	r6,sp,48
    2100:	00015640 	call	1564 <__sprint_r>
    2104:	103ee51e 	bne	r2,zero,1c9c <___vfprintf_internal_r+0x6e0>
    2108:	dc800e17 	ldw	r18,56(sp)
    210c:	d8c01904 	addi	r3,sp,100
    2110:	d9814c17 	ldw	r6,1328(sp)
    2114:	3080004c 	andi	r2,r6,1
    2118:	1005003a 	cmpeq	r2,r2,zero
    211c:	103ea51e 	bne	r2,zero,1bb4 <___vfprintf_internal_r+0x5f8>
    2120:	00800044 	movi	r2,1
    2124:	dc400d17 	ldw	r17,52(sp)
    2128:	18800115 	stw	r2,4(r3)
    212c:	d8814917 	ldw	r2,1316(sp)
    2130:	94800044 	addi	r18,r18,1
    2134:	8c400044 	addi	r17,r17,1
    2138:	18800015 	stw	r2,0(r3)
    213c:	008001c4 	movi	r2,7
    2140:	dc800e15 	stw	r18,56(sp)
    2144:	dc400d15 	stw	r17,52(sp)
    2148:	14421e0e 	bge	r2,r17,29c4 <___vfprintf_internal_r+0x1408>
    214c:	d9014f17 	ldw	r4,1340(sp)
    2150:	b00b883a 	mov	r5,r22
    2154:	d9800c04 	addi	r6,sp,48
    2158:	00015640 	call	1564 <__sprint_r>
    215c:	103ecf1e 	bne	r2,zero,1c9c <___vfprintf_internal_r+0x6e0>
    2160:	dc800e17 	ldw	r18,56(sp)
    2164:	d8c01904 	addi	r3,sp,100
    2168:	003e9206 	br	1bb4 <___vfprintf_internal_r+0x5f8>
    216c:	d9014f17 	ldw	r4,1340(sp)
    2170:	b00b883a 	mov	r5,r22
    2174:	d9800c04 	addi	r6,sp,48
    2178:	00015640 	call	1564 <__sprint_r>
    217c:	103ec026 	beq	r2,zero,1c80 <___vfprintf_internal_r+0x6c4>
    2180:	003ec606 	br	1c9c <___vfprintf_internal_r+0x6e0>
    2184:	d9014f17 	ldw	r4,1340(sp)
    2188:	b00b883a 	mov	r5,r22
    218c:	d9800c04 	addi	r6,sp,48
    2190:	d9c15115 	stw	r7,1348(sp)
    2194:	00015640 	call	1564 <__sprint_r>
    2198:	d9c15117 	ldw	r7,1348(sp)
    219c:	103ebf1e 	bne	r2,zero,1c9c <___vfprintf_internal_r+0x6e0>
    21a0:	dc800e17 	ldw	r18,56(sp)
    21a4:	dc400d17 	ldw	r17,52(sp)
    21a8:	dd401904 	addi	r21,sp,100
    21ac:	003e7406 	br	1b80 <___vfprintf_internal_r+0x5c4>
    21b0:	d9014f17 	ldw	r4,1340(sp)
    21b4:	b00b883a 	mov	r5,r22
    21b8:	d9800c04 	addi	r6,sp,48
    21bc:	d9c15115 	stw	r7,1348(sp)
    21c0:	00015640 	call	1564 <__sprint_r>
    21c4:	d9c15117 	ldw	r7,1348(sp)
    21c8:	103eb41e 	bne	r2,zero,1c9c <___vfprintf_internal_r+0x6e0>
    21cc:	dd401904 	addi	r21,sp,100
    21d0:	003d6d06 	br	1788 <___vfprintf_internal_r+0x1cc>
    21d4:	d9014f17 	ldw	r4,1340(sp)
    21d8:	b00b883a 	mov	r5,r22
    21dc:	d9800c04 	addi	r6,sp,48
    21e0:	d9c15115 	stw	r7,1348(sp)
    21e4:	00015640 	call	1564 <__sprint_r>
    21e8:	d9c15117 	ldw	r7,1348(sp)
    21ec:	103eab1e 	bne	r2,zero,1c9c <___vfprintf_internal_r+0x6e0>
    21f0:	dc800e17 	ldw	r18,56(sp)
    21f4:	dc400d17 	ldw	r17,52(sp)
    21f8:	dd401904 	addi	r21,sp,100
    21fc:	003e3406 	br	1ad0 <___vfprintf_internal_r+0x514>
    2200:	d9014f17 	ldw	r4,1340(sp)
    2204:	b00b883a 	mov	r5,r22
    2208:	d9800c04 	addi	r6,sp,48
    220c:	d9c15115 	stw	r7,1348(sp)
    2210:	00015640 	call	1564 <__sprint_r>
    2214:	d9c15117 	ldw	r7,1348(sp)
    2218:	103ea01e 	bne	r2,zero,1c9c <___vfprintf_internal_r+0x6e0>
    221c:	dc800e17 	ldw	r18,56(sp)
    2220:	dc400d17 	ldw	r17,52(sp)
    2224:	dd401904 	addi	r21,sp,100
    2228:	003e1c06 	br	1a9c <___vfprintf_internal_r+0x4e0>
    222c:	d9014f17 	ldw	r4,1340(sp)
    2230:	b00b883a 	mov	r5,r22
    2234:	d9800c04 	addi	r6,sp,48
    2238:	d9c15115 	stw	r7,1348(sp)
    223c:	00015640 	call	1564 <__sprint_r>
    2240:	d9c15117 	ldw	r7,1348(sp)
    2244:	103e951e 	bne	r2,zero,1c9c <___vfprintf_internal_r+0x6e0>
    2248:	dc800e17 	ldw	r18,56(sp)
    224c:	dc400d17 	ldw	r17,52(sp)
    2250:	dd401904 	addi	r21,sp,100
    2254:	003e0406 	br	1a68 <___vfprintf_internal_r+0x4ac>
    2258:	d9000517 	ldw	r4,20(sp)
    225c:	0102520e 	bge	zero,r4,2ba8 <___vfprintf_internal_r+0x15ec>
    2260:	d9814717 	ldw	r6,1308(sp)
    2264:	21807a16 	blt	r4,r6,2450 <___vfprintf_internal_r+0xe94>
    2268:	d8814117 	ldw	r2,1284(sp)
    226c:	91a5883a 	add	r18,r18,r6
    2270:	8c400044 	addi	r17,r17,1
    2274:	a8800015 	stw	r2,0(r21)
    2278:	008001c4 	movi	r2,7
    227c:	a9800115 	stw	r6,4(r21)
    2280:	dc800e15 	stw	r18,56(sp)
    2284:	dc400d15 	stw	r17,52(sp)
    2288:	1442f616 	blt	r2,r17,2e64 <___vfprintf_internal_r+0x18a8>
    228c:	a8c00204 	addi	r3,r21,8
    2290:	d9414717 	ldw	r5,1308(sp)
    2294:	2161c83a 	sub	r16,r4,r5
    2298:	043f9d0e 	bge	zero,r16,2110 <___vfprintf_internal_r+0xb54>
    229c:	00800404 	movi	r2,16
    22a0:	1402130e 	bge	r2,r16,2af0 <___vfprintf_internal_r+0x1534>
    22a4:	dc400d17 	ldw	r17,52(sp)
    22a8:	1027883a 	mov	r19,r2
    22ac:	07000074 	movhi	fp,1
    22b0:	e7066284 	addi	fp,fp,6538
    22b4:	050001c4 	movi	r20,7
    22b8:	00000306 	br	22c8 <___vfprintf_internal_r+0xd0c>
    22bc:	18c00204 	addi	r3,r3,8
    22c0:	843ffc04 	addi	r16,r16,-16
    22c4:	9c020d0e 	bge	r19,r16,2afc <___vfprintf_internal_r+0x1540>
    22c8:	94800404 	addi	r18,r18,16
    22cc:	8c400044 	addi	r17,r17,1
    22d0:	1f000015 	stw	fp,0(r3)
    22d4:	1cc00115 	stw	r19,4(r3)
    22d8:	dc800e15 	stw	r18,56(sp)
    22dc:	dc400d15 	stw	r17,52(sp)
    22e0:	a47ff60e 	bge	r20,r17,22bc <___vfprintf_internal_r+0xd00>
    22e4:	d9014f17 	ldw	r4,1340(sp)
    22e8:	b00b883a 	mov	r5,r22
    22ec:	d9800c04 	addi	r6,sp,48
    22f0:	00015640 	call	1564 <__sprint_r>
    22f4:	103e691e 	bne	r2,zero,1c9c <___vfprintf_internal_r+0x6e0>
    22f8:	dc800e17 	ldw	r18,56(sp)
    22fc:	dc400d17 	ldw	r17,52(sp)
    2300:	d8c01904 	addi	r3,sp,100
    2304:	003fee06 	br	22c0 <___vfprintf_internal_r+0xd04>
    2308:	d8814717 	ldw	r2,1308(sp)
    230c:	143fffc4 	addi	r16,r2,-1
    2310:	043e970e 	bge	zero,r16,1d70 <___vfprintf_internal_r+0x7b4>
    2314:	00800404 	movi	r2,16
    2318:	1400180e 	bge	r2,r16,237c <___vfprintf_internal_r+0xdc0>
    231c:	1029883a 	mov	r20,r2
    2320:	07000074 	movhi	fp,1
    2324:	e7066284 	addi	fp,fp,6538
    2328:	054001c4 	movi	r21,7
    232c:	00000306 	br	233c <___vfprintf_internal_r+0xd80>
    2330:	9cc00204 	addi	r19,r19,8
    2334:	843ffc04 	addi	r16,r16,-16
    2338:	a400120e 	bge	r20,r16,2384 <___vfprintf_internal_r+0xdc8>
    233c:	94800404 	addi	r18,r18,16
    2340:	8c400044 	addi	r17,r17,1
    2344:	9f000015 	stw	fp,0(r19)
    2348:	9d000115 	stw	r20,4(r19)
    234c:	dc800e15 	stw	r18,56(sp)
    2350:	dc400d15 	stw	r17,52(sp)
    2354:	ac7ff60e 	bge	r21,r17,2330 <___vfprintf_internal_r+0xd74>
    2358:	d9014f17 	ldw	r4,1340(sp)
    235c:	b00b883a 	mov	r5,r22
    2360:	d9800c04 	addi	r6,sp,48
    2364:	00015640 	call	1564 <__sprint_r>
    2368:	103e4c1e 	bne	r2,zero,1c9c <___vfprintf_internal_r+0x6e0>
    236c:	dc800e17 	ldw	r18,56(sp)
    2370:	dc400d17 	ldw	r17,52(sp)
    2374:	dcc01904 	addi	r19,sp,100
    2378:	003fee06 	br	2334 <___vfprintf_internal_r+0xd78>
    237c:	07000074 	movhi	fp,1
    2380:	e7066284 	addi	fp,fp,6538
    2384:	9425883a 	add	r18,r18,r16
    2388:	8c400044 	addi	r17,r17,1
    238c:	008001c4 	movi	r2,7
    2390:	9f000015 	stw	fp,0(r19)
    2394:	9c000115 	stw	r16,4(r19)
    2398:	dc800e15 	stw	r18,56(sp)
    239c:	dc400d15 	stw	r17,52(sp)
    23a0:	147e720e 	bge	r2,r17,1d6c <___vfprintf_internal_r+0x7b0>
    23a4:	d9014f17 	ldw	r4,1340(sp)
    23a8:	b00b883a 	mov	r5,r22
    23ac:	d9800c04 	addi	r6,sp,48
    23b0:	00015640 	call	1564 <__sprint_r>
    23b4:	103e391e 	bne	r2,zero,1c9c <___vfprintf_internal_r+0x6e0>
    23b8:	dc800e17 	ldw	r18,56(sp)
    23bc:	dc400d17 	ldw	r17,52(sp)
    23c0:	dcc01904 	addi	r19,sp,100
    23c4:	003e6a06 	br	1d70 <___vfprintf_internal_r+0x7b4>
    23c8:	d9014f17 	ldw	r4,1340(sp)
    23cc:	b00b883a 	mov	r5,r22
    23d0:	d9800c04 	addi	r6,sp,48
    23d4:	d9c15115 	stw	r7,1348(sp)
    23d8:	00015640 	call	1564 <__sprint_r>
    23dc:	d9c15117 	ldw	r7,1348(sp)
    23e0:	103e2e1e 	bne	r2,zero,1c9c <___vfprintf_internal_r+0x6e0>
    23e4:	dc800e17 	ldw	r18,56(sp)
    23e8:	dc400d17 	ldw	r17,52(sp)
    23ec:	dd401904 	addi	r21,sp,100
    23f0:	003dba06 	br	1adc <___vfprintf_internal_r+0x520>
    23f4:	d9014f17 	ldw	r4,1340(sp)
    23f8:	b00b883a 	mov	r5,r22
    23fc:	d9800c04 	addi	r6,sp,48
    2400:	00015640 	call	1564 <__sprint_r>
    2404:	103e251e 	bne	r2,zero,1c9c <___vfprintf_internal_r+0x6e0>
    2408:	dc800e17 	ldw	r18,56(sp)
    240c:	dc400d17 	ldw	r17,52(sp)
    2410:	dcc01904 	addi	r19,sp,100
    2414:	003e4206 	br	1d20 <___vfprintf_internal_r+0x764>
    2418:	d9014f17 	ldw	r4,1340(sp)
    241c:	b00b883a 	mov	r5,r22
    2420:	d9800c04 	addi	r6,sp,48
    2424:	00015640 	call	1564 <__sprint_r>
    2428:	103e1c1e 	bne	r2,zero,1c9c <___vfprintf_internal_r+0x6e0>
    242c:	dc800e17 	ldw	r18,56(sp)
    2430:	dc400d17 	ldw	r17,52(sp)
    2434:	d8c01904 	addi	r3,sp,100
    2438:	003e2e06 	br	1cf4 <___vfprintf_internal_r+0x738>
    243c:	d9414c17 	ldw	r5,1328(sp)
    2440:	2880004c 	andi	r2,r5,1
    2444:	1005003a 	cmpeq	r2,r2,zero
    2448:	103dda1e 	bne	r2,zero,1bb4 <___vfprintf_internal_r+0x5f8>
    244c:	003e9f06 	br	1ecc <___vfprintf_internal_r+0x910>
    2450:	d8c14117 	ldw	r3,1284(sp)
    2454:	9125883a 	add	r18,r18,r4
    2458:	8c400044 	addi	r17,r17,1
    245c:	008001c4 	movi	r2,7
    2460:	a8c00015 	stw	r3,0(r21)
    2464:	a9000115 	stw	r4,4(r21)
    2468:	dc800e15 	stw	r18,56(sp)
    246c:	dc400d15 	stw	r17,52(sp)
    2470:	14426616 	blt	r2,r17,2e0c <___vfprintf_internal_r+0x1850>
    2474:	a8c00204 	addi	r3,r21,8
    2478:	d9414917 	ldw	r5,1316(sp)
    247c:	00800044 	movi	r2,1
    2480:	94800044 	addi	r18,r18,1
    2484:	8c400044 	addi	r17,r17,1
    2488:	18800115 	stw	r2,4(r3)
    248c:	008001c4 	movi	r2,7
    2490:	19400015 	stw	r5,0(r3)
    2494:	dc800e15 	stw	r18,56(sp)
    2498:	dc400d15 	stw	r17,52(sp)
    249c:	2021883a 	mov	r16,r4
    24a0:	14425016 	blt	r2,r17,2de4 <___vfprintf_internal_r+0x1828>
    24a4:	19400204 	addi	r5,r3,8
    24a8:	d9814717 	ldw	r6,1308(sp)
    24ac:	8c400044 	addi	r17,r17,1
    24b0:	dc400d15 	stw	r17,52(sp)
    24b4:	3107c83a 	sub	r3,r6,r4
    24b8:	d9014117 	ldw	r4,1284(sp)
    24bc:	90e5883a 	add	r18,r18,r3
    24c0:	28c00115 	stw	r3,4(r5)
    24c4:	8105883a 	add	r2,r16,r4
    24c8:	28800015 	stw	r2,0(r5)
    24cc:	008001c4 	movi	r2,7
    24d0:	dc800e15 	stw	r18,56(sp)
    24d4:	147f1d16 	blt	r2,r17,214c <___vfprintf_internal_r+0xb90>
    24d8:	28c00204 	addi	r3,r5,8
    24dc:	003db506 	br	1bb4 <___vfprintf_internal_r+0x5f8>
    24e0:	3c000017 	ldw	r16,0(r7)
    24e4:	3c400117 	ldw	r17,4(r7)
    24e8:	39800204 	addi	r6,r7,8
    24ec:	01000044 	movi	r4,1
    24f0:	d9814015 	stw	r6,1280(sp)
    24f4:	d8000405 	stb	zero,16(sp)
    24f8:	003ebe06 	br	1ff4 <___vfprintf_internal_r+0xa38>
    24fc:	3c000017 	ldw	r16,0(r7)
    2500:	3c400117 	ldw	r17,4(r7)
    2504:	38800204 	addi	r2,r7,8
    2508:	d8814015 	stw	r2,1280(sp)
    250c:	003eb706 	br	1fec <___vfprintf_internal_r+0xa30>
    2510:	3c000017 	ldw	r16,0(r7)
    2514:	3c400117 	ldw	r17,4(r7)
    2518:	39000204 	addi	r4,r7,8
    251c:	d9014015 	stw	r4,1280(sp)
    2520:	0009883a 	mov	r4,zero
    2524:	d8000405 	stb	zero,16(sp)
    2528:	003eb206 	br	1ff4 <___vfprintf_internal_r+0xa38>
    252c:	38c00017 	ldw	r3,0(r7)
    2530:	39c00104 	addi	r7,r7,4
    2534:	d8c14a15 	stw	r3,1320(sp)
    2538:	1800d10e 	bge	r3,zero,2880 <___vfprintf_internal_r+0x12c4>
    253c:	00c7c83a 	sub	r3,zero,r3
    2540:	d8c14a15 	stw	r3,1320(sp)
    2544:	d9014c17 	ldw	r4,1328(sp)
    2548:	b8c00007 	ldb	r3,0(r23)
    254c:	21000114 	ori	r4,r4,4
    2550:	d9014c15 	stw	r4,1328(sp)
    2554:	003c9806 	br	17b8 <___vfprintf_internal_r+0x1fc>
    2558:	d9814c17 	ldw	r6,1328(sp)
    255c:	3080080c 	andi	r2,r6,32
    2560:	1001f026 	beq	r2,zero,2d24 <___vfprintf_internal_r+0x1768>
    2564:	d9014b17 	ldw	r4,1324(sp)
    2568:	38800017 	ldw	r2,0(r7)
    256c:	39c00104 	addi	r7,r7,4
    2570:	d9c14015 	stw	r7,1280(sp)
    2574:	2007d7fa 	srai	r3,r4,31
    2578:	d9c14017 	ldw	r7,1280(sp)
    257c:	11000015 	stw	r4,0(r2)
    2580:	10c00115 	stw	r3,4(r2)
    2584:	003c6906 	br	172c <___vfprintf_internal_r+0x170>
    2588:	b8c00007 	ldb	r3,0(r23)
    258c:	00801b04 	movi	r2,108
    2590:	18824f26 	beq	r3,r2,2ed0 <___vfprintf_internal_r+0x1914>
    2594:	d9414c17 	ldw	r5,1328(sp)
    2598:	29400414 	ori	r5,r5,16
    259c:	d9414c15 	stw	r5,1328(sp)
    25a0:	003c8506 	br	17b8 <___vfprintf_internal_r+0x1fc>
    25a4:	d9814c17 	ldw	r6,1328(sp)
    25a8:	b8c00007 	ldb	r3,0(r23)
    25ac:	31800814 	ori	r6,r6,32
    25b0:	d9814c15 	stw	r6,1328(sp)
    25b4:	003c8006 	br	17b8 <___vfprintf_internal_r+0x1fc>
    25b8:	d8814c17 	ldw	r2,1328(sp)
    25bc:	3c000017 	ldw	r16,0(r7)
    25c0:	00c01e04 	movi	r3,120
    25c4:	10800094 	ori	r2,r2,2
    25c8:	d8814c15 	stw	r2,1328(sp)
    25cc:	39c00104 	addi	r7,r7,4
    25d0:	01400074 	movhi	r5,1
    25d4:	29464b04 	addi	r5,r5,6444
    25d8:	00800c04 	movi	r2,48
    25dc:	0023883a 	mov	r17,zero
    25e0:	01000084 	movi	r4,2
    25e4:	d9c14015 	stw	r7,1280(sp)
    25e8:	d8c14d15 	stw	r3,1332(sp)
    25ec:	d9414415 	stw	r5,1296(sp)
    25f0:	d8800445 	stb	r2,17(sp)
    25f4:	d8c00485 	stb	r3,18(sp)
    25f8:	d8000405 	stb	zero,16(sp)
    25fc:	003e7d06 	br	1ff4 <___vfprintf_internal_r+0xa38>
    2600:	d8814c17 	ldw	r2,1328(sp)
    2604:	b8c00007 	ldb	r3,0(r23)
    2608:	10801014 	ori	r2,r2,64
    260c:	d8814c15 	stw	r2,1328(sp)
    2610:	003c6906 	br	17b8 <___vfprintf_internal_r+0x1fc>
    2614:	d9414c17 	ldw	r5,1328(sp)
    2618:	2880020c 	andi	r2,r5,8
    261c:	1001df26 	beq	r2,zero,2d9c <___vfprintf_internal_r+0x17e0>
    2620:	39800017 	ldw	r6,0(r7)
    2624:	38800204 	addi	r2,r7,8
    2628:	d8814015 	stw	r2,1280(sp)
    262c:	d9814215 	stw	r6,1288(sp)
    2630:	39c00117 	ldw	r7,4(r7)
    2634:	d9c14315 	stw	r7,1292(sp)
    2638:	d9014217 	ldw	r4,1288(sp)
    263c:	d9414317 	ldw	r5,1292(sp)
    2640:	0007e240 	call	7e24 <__isinfd>
    2644:	10021726 	beq	r2,zero,2ea4 <___vfprintf_internal_r+0x18e8>
    2648:	d9014217 	ldw	r4,1288(sp)
    264c:	d9414317 	ldw	r5,1292(sp)
    2650:	000d883a 	mov	r6,zero
    2654:	000f883a 	mov	r7,zero
    2658:	0009ee00 	call	9ee0 <__ltdf2>
    265c:	1002ca16 	blt	r2,zero,3188 <___vfprintf_internal_r+0x1bcc>
    2660:	d9414d17 	ldw	r5,1332(sp)
    2664:	008011c4 	movi	r2,71
    2668:	11420a16 	blt	r2,r5,2e94 <___vfprintf_internal_r+0x18d8>
    266c:	01800074 	movhi	r6,1
    2670:	31865004 	addi	r6,r6,6464
    2674:	d9814115 	stw	r6,1284(sp)
    2678:	d9014c17 	ldw	r4,1328(sp)
    267c:	00c000c4 	movi	r3,3
    2680:	00bfdfc4 	movi	r2,-129
    2684:	2088703a 	and	r4,r4,r2
    2688:	180f883a 	mov	r7,r3
    268c:	d8c14515 	stw	r3,1300(sp)
    2690:	d9014c15 	stw	r4,1328(sp)
    2694:	d8014615 	stw	zero,1304(sp)
    2698:	003e6a06 	br	2044 <___vfprintf_internal_r+0xa88>
    269c:	38800017 	ldw	r2,0(r7)
    26a0:	00c00044 	movi	r3,1
    26a4:	39c00104 	addi	r7,r7,4
    26a8:	d9c14015 	stw	r7,1280(sp)
    26ac:	d9000f04 	addi	r4,sp,60
    26b0:	180f883a 	mov	r7,r3
    26b4:	d8c14515 	stw	r3,1300(sp)
    26b8:	d9014115 	stw	r4,1284(sp)
    26bc:	d8800f05 	stb	r2,60(sp)
    26c0:	d8000405 	stb	zero,16(sp)
    26c4:	003cac06 	br	1978 <___vfprintf_internal_r+0x3bc>
    26c8:	01400074 	movhi	r5,1
    26cc:	29465604 	addi	r5,r5,6488
    26d0:	d9414415 	stw	r5,1296(sp)
    26d4:	d9814c17 	ldw	r6,1328(sp)
    26d8:	3080080c 	andi	r2,r6,32
    26dc:	1000f926 	beq	r2,zero,2ac4 <___vfprintf_internal_r+0x1508>
    26e0:	3c000017 	ldw	r16,0(r7)
    26e4:	3c400117 	ldw	r17,4(r7)
    26e8:	38800204 	addi	r2,r7,8
    26ec:	d8814015 	stw	r2,1280(sp)
    26f0:	d9414c17 	ldw	r5,1328(sp)
    26f4:	2880004c 	andi	r2,r5,1
    26f8:	1005003a 	cmpeq	r2,r2,zero
    26fc:	1000b31e 	bne	r2,zero,29cc <___vfprintf_internal_r+0x1410>
    2700:	8444b03a 	or	r2,r16,r17
    2704:	1000b126 	beq	r2,zero,29cc <___vfprintf_internal_r+0x1410>
    2708:	d9814d17 	ldw	r6,1332(sp)
    270c:	29400094 	ori	r5,r5,2
    2710:	00800c04 	movi	r2,48
    2714:	01000084 	movi	r4,2
    2718:	d9414c15 	stw	r5,1328(sp)
    271c:	d8800445 	stb	r2,17(sp)
    2720:	d9800485 	stb	r6,18(sp)
    2724:	d8000405 	stb	zero,16(sp)
    2728:	003e3206 	br	1ff4 <___vfprintf_internal_r+0xa38>
    272c:	01800074 	movhi	r6,1
    2730:	31864b04 	addi	r6,r6,6444
    2734:	d9814415 	stw	r6,1296(sp)
    2738:	003fe606 	br	26d4 <___vfprintf_internal_r+0x1118>
    273c:	00800ac4 	movi	r2,43
    2740:	d8800405 	stb	r2,16(sp)
    2744:	b8c00007 	ldb	r3,0(r23)
    2748:	003c1b06 	br	17b8 <___vfprintf_internal_r+0x1fc>
    274c:	d8814c17 	ldw	r2,1328(sp)
    2750:	b8c00007 	ldb	r3,0(r23)
    2754:	10800054 	ori	r2,r2,1
    2758:	d8814c15 	stw	r2,1328(sp)
    275c:	003c1606 	br	17b8 <___vfprintf_internal_r+0x1fc>
    2760:	d8800407 	ldb	r2,16(sp)
    2764:	1000461e 	bne	r2,zero,2880 <___vfprintf_internal_r+0x12c4>
    2768:	00800804 	movi	r2,32
    276c:	d8800405 	stb	r2,16(sp)
    2770:	b8c00007 	ldb	r3,0(r23)
    2774:	003c1006 	br	17b8 <___vfprintf_internal_r+0x1fc>
    2778:	d9814c17 	ldw	r6,1328(sp)
    277c:	b8c00007 	ldb	r3,0(r23)
    2780:	31800214 	ori	r6,r6,8
    2784:	d9814c15 	stw	r6,1328(sp)
    2788:	003c0b06 	br	17b8 <___vfprintf_internal_r+0x1fc>
    278c:	0007883a 	mov	r3,zero
    2790:	01000244 	movi	r4,9
    2794:	188002a4 	muli	r2,r3,10
    2798:	b8c00007 	ldb	r3,0(r23)
    279c:	d9814d17 	ldw	r6,1332(sp)
    27a0:	bdc00044 	addi	r23,r23,1
    27a4:	d8c14d15 	stw	r3,1332(sp)
    27a8:	d9414d17 	ldw	r5,1332(sp)
    27ac:	3085883a 	add	r2,r6,r2
    27b0:	10fff404 	addi	r3,r2,-48
    27b4:	28bff404 	addi	r2,r5,-48
    27b8:	20bff62e 	bgeu	r4,r2,2794 <___vfprintf_internal_r+0x11d8>
    27bc:	d8c14a15 	stw	r3,1320(sp)
    27c0:	003bff06 	br	17c0 <___vfprintf_internal_r+0x204>
    27c4:	d9414c17 	ldw	r5,1328(sp)
    27c8:	b8c00007 	ldb	r3,0(r23)
    27cc:	29402014 	ori	r5,r5,128
    27d0:	d9414c15 	stw	r5,1328(sp)
    27d4:	003bf806 	br	17b8 <___vfprintf_internal_r+0x1fc>
    27d8:	b8c00007 	ldb	r3,0(r23)
    27dc:	00800a84 	movi	r2,42
    27e0:	bdc00044 	addi	r23,r23,1
    27e4:	18831526 	beq	r3,r2,343c <___vfprintf_internal_r+0x1e80>
    27e8:	d8c14d15 	stw	r3,1332(sp)
    27ec:	18bff404 	addi	r2,r3,-48
    27f0:	00c00244 	movi	r3,9
    27f4:	18827836 	bltu	r3,r2,31d8 <___vfprintf_internal_r+0x1c1c>
    27f8:	000d883a 	mov	r6,zero
    27fc:	308002a4 	muli	r2,r6,10
    2800:	b9800007 	ldb	r6,0(r23)
    2804:	d9414d17 	ldw	r5,1332(sp)
    2808:	bdc00044 	addi	r23,r23,1
    280c:	d9814d15 	stw	r6,1332(sp)
    2810:	d9014d17 	ldw	r4,1332(sp)
    2814:	1145883a 	add	r2,r2,r5
    2818:	11bff404 	addi	r6,r2,-48
    281c:	20bff404 	addi	r2,r4,-48
    2820:	18bff62e 	bgeu	r3,r2,27fc <___vfprintf_internal_r+0x1240>
    2824:	3027883a 	mov	r19,r6
    2828:	303be50e 	bge	r6,zero,17c0 <___vfprintf_internal_r+0x204>
    282c:	04ffffc4 	movi	r19,-1
    2830:	003be306 	br	17c0 <___vfprintf_internal_r+0x204>
    2834:	d8000405 	stb	zero,16(sp)
    2838:	39800017 	ldw	r6,0(r7)
    283c:	39c00104 	addi	r7,r7,4
    2840:	d9c14015 	stw	r7,1280(sp)
    2844:	d9814115 	stw	r6,1284(sp)
    2848:	3001c926 	beq	r6,zero,2f70 <___vfprintf_internal_r+0x19b4>
    284c:	98000e16 	blt	r19,zero,2888 <___vfprintf_internal_r+0x12cc>
    2850:	d9014117 	ldw	r4,1284(sp)
    2854:	000b883a 	mov	r5,zero
    2858:	980d883a 	mov	r6,r19
    285c:	00066780 	call	6678 <memchr>
    2860:	10025926 	beq	r2,zero,31c8 <___vfprintf_internal_r+0x1c0c>
    2864:	d8c14117 	ldw	r3,1284(sp)
    2868:	10cfc83a 	sub	r7,r2,r3
    286c:	99c19e16 	blt	r19,r7,2ee8 <___vfprintf_internal_r+0x192c>
    2870:	d9c14515 	stw	r7,1300(sp)
    2874:	38000916 	blt	r7,zero,289c <___vfprintf_internal_r+0x12e0>
    2878:	d8014615 	stw	zero,1304(sp)
    287c:	003df106 	br	2044 <___vfprintf_internal_r+0xa88>
    2880:	b8c00007 	ldb	r3,0(r23)
    2884:	003bcc06 	br	17b8 <___vfprintf_internal_r+0x1fc>
    2888:	d9014117 	ldw	r4,1284(sp)
    288c:	000810c0 	call	810c <strlen>
    2890:	d8814515 	stw	r2,1300(sp)
    2894:	100f883a 	mov	r7,r2
    2898:	103ff70e 	bge	r2,zero,2878 <___vfprintf_internal_r+0x12bc>
    289c:	d8014515 	stw	zero,1300(sp)
    28a0:	d8014615 	stw	zero,1304(sp)
    28a4:	003de706 	br	2044 <___vfprintf_internal_r+0xa88>
    28a8:	20c03fcc 	andi	r3,r4,255
    28ac:	00800044 	movi	r2,1
    28b0:	18802d26 	beq	r3,r2,2968 <___vfprintf_internal_r+0x13ac>
    28b4:	18800e36 	bltu	r3,r2,28f0 <___vfprintf_internal_r+0x1334>
    28b8:	00800084 	movi	r2,2
    28bc:	1880fa26 	beq	r3,r2,2ca8 <___vfprintf_internal_r+0x16ec>
    28c0:	01000074 	movhi	r4,1
    28c4:	21065b04 	addi	r4,r4,6508
    28c8:	000810c0 	call	810c <strlen>
    28cc:	100f883a 	mov	r7,r2
    28d0:	dcc14515 	stw	r19,1300(sp)
    28d4:	9880010e 	bge	r19,r2,28dc <___vfprintf_internal_r+0x1320>
    28d8:	d8814515 	stw	r2,1300(sp)
    28dc:	00800074 	movhi	r2,1
    28e0:	10865b04 	addi	r2,r2,6508
    28e4:	dcc14615 	stw	r19,1304(sp)
    28e8:	d8814115 	stw	r2,1284(sp)
    28ec:	003dd506 	br	2044 <___vfprintf_internal_r+0xa88>
    28f0:	d9401904 	addi	r5,sp,100
    28f4:	dd000f04 	addi	r20,sp,60
    28f8:	d9414115 	stw	r5,1284(sp)
    28fc:	880a977a 	slli	r5,r17,29
    2900:	d9814117 	ldw	r6,1284(sp)
    2904:	8004d0fa 	srli	r2,r16,3
    2908:	8806d0fa 	srli	r3,r17,3
    290c:	810001cc 	andi	r4,r16,7
    2910:	2884b03a 	or	r2,r5,r2
    2914:	31bfffc4 	addi	r6,r6,-1
    2918:	21000c04 	addi	r4,r4,48
    291c:	d9814115 	stw	r6,1284(sp)
    2920:	10cab03a 	or	r5,r2,r3
    2924:	31000005 	stb	r4,0(r6)
    2928:	1021883a 	mov	r16,r2
    292c:	1823883a 	mov	r17,r3
    2930:	283ff21e 	bne	r5,zero,28fc <___vfprintf_internal_r+0x1340>
    2934:	d8c14c17 	ldw	r3,1328(sp)
    2938:	1880004c 	andi	r2,r3,1
    293c:	1005003a 	cmpeq	r2,r2,zero
    2940:	103db91e 	bne	r2,zero,2028 <___vfprintf_internal_r+0xa6c>
    2944:	20803fcc 	andi	r2,r4,255
    2948:	1080201c 	xori	r2,r2,128
    294c:	10bfe004 	addi	r2,r2,-128
    2950:	00c00c04 	movi	r3,48
    2954:	10fdb426 	beq	r2,r3,2028 <___vfprintf_internal_r+0xa6c>
    2958:	31bfffc4 	addi	r6,r6,-1
    295c:	d9814115 	stw	r6,1284(sp)
    2960:	30c00005 	stb	r3,0(r6)
    2964:	003db006 	br	2028 <___vfprintf_internal_r+0xa6c>
    2968:	88800068 	cmpgeui	r2,r17,1
    296c:	10002c1e 	bne	r2,zero,2a20 <___vfprintf_internal_r+0x1464>
    2970:	8800021e 	bne	r17,zero,297c <___vfprintf_internal_r+0x13c0>
    2974:	00800244 	movi	r2,9
    2978:	14002936 	bltu	r2,r16,2a20 <___vfprintf_internal_r+0x1464>
    297c:	d90018c4 	addi	r4,sp,99
    2980:	dd000f04 	addi	r20,sp,60
    2984:	d9014115 	stw	r4,1284(sp)
    2988:	d9014117 	ldw	r4,1284(sp)
    298c:	80800c04 	addi	r2,r16,48
    2990:	20800005 	stb	r2,0(r4)
    2994:	003da406 	br	2028 <___vfprintf_internal_r+0xa6c>
    2998:	dc400d17 	ldw	r17,52(sp)
    299c:	07000074 	movhi	fp,1
    29a0:	e7066284 	addi	fp,fp,6538
    29a4:	9425883a 	add	r18,r18,r16
    29a8:	8c400044 	addi	r17,r17,1
    29ac:	008001c4 	movi	r2,7
    29b0:	1f000015 	stw	fp,0(r3)
    29b4:	1c000115 	stw	r16,4(r3)
    29b8:	dc800e15 	stw	r18,56(sp)
    29bc:	dc400d15 	stw	r17,52(sp)
    29c0:	147de216 	blt	r2,r17,214c <___vfprintf_internal_r+0xb90>
    29c4:	18c00204 	addi	r3,r3,8
    29c8:	003c7a06 	br	1bb4 <___vfprintf_internal_r+0x5f8>
    29cc:	01000084 	movi	r4,2
    29d0:	d8000405 	stb	zero,16(sp)
    29d4:	003d8706 	br	1ff4 <___vfprintf_internal_r+0xa38>
    29d8:	d9814c17 	ldw	r6,1328(sp)
    29dc:	30c4703a 	and	r2,r6,r3
    29e0:	1005003a 	cmpeq	r2,r2,zero
    29e4:	103cb926 	beq	r2,zero,1ccc <___vfprintf_internal_r+0x710>
    29e8:	d9014117 	ldw	r4,1284(sp)
    29ec:	94800044 	addi	r18,r18,1
    29f0:	8c400044 	addi	r17,r17,1
    29f4:	008001c4 	movi	r2,7
    29f8:	a9000015 	stw	r4,0(r21)
    29fc:	a8c00115 	stw	r3,4(r21)
    2a00:	dc800e15 	stw	r18,56(sp)
    2a04:	dc400d15 	stw	r17,52(sp)
    2a08:	147e6616 	blt	r2,r17,23a4 <___vfprintf_internal_r+0xde8>
    2a0c:	acc00204 	addi	r19,r21,8
    2a10:	003cd706 	br	1d70 <___vfprintf_internal_r+0x7b4>
    2a14:	07000074 	movhi	fp,1
    2a18:	e7066284 	addi	fp,fp,6538
    2a1c:	003c4f06 	br	1b5c <___vfprintf_internal_r+0x5a0>
    2a20:	dd000f04 	addi	r20,sp,60
    2a24:	dc801904 	addi	r18,sp,100
    2a28:	8009883a 	mov	r4,r16
    2a2c:	880b883a 	mov	r5,r17
    2a30:	01800284 	movi	r6,10
    2a34:	000f883a 	mov	r7,zero
    2a38:	0008bf00 	call	8bf0 <__umoddi3>
    2a3c:	12000c04 	addi	r8,r2,48
    2a40:	94bfffc4 	addi	r18,r18,-1
    2a44:	8009883a 	mov	r4,r16
    2a48:	880b883a 	mov	r5,r17
    2a4c:	01800284 	movi	r6,10
    2a50:	000f883a 	mov	r7,zero
    2a54:	92000005 	stb	r8,0(r18)
    2a58:	00086140 	call	8614 <__udivdi3>
    2a5c:	1009883a 	mov	r4,r2
    2a60:	1021883a 	mov	r16,r2
    2a64:	18800068 	cmpgeui	r2,r3,1
    2a68:	1823883a 	mov	r17,r3
    2a6c:	103fee1e 	bne	r2,zero,2a28 <___vfprintf_internal_r+0x146c>
    2a70:	1800021e 	bne	r3,zero,2a7c <___vfprintf_internal_r+0x14c0>
    2a74:	00800244 	movi	r2,9
    2a78:	113feb36 	bltu	r2,r4,2a28 <___vfprintf_internal_r+0x146c>
    2a7c:	94bfffc4 	addi	r18,r18,-1
    2a80:	dc814115 	stw	r18,1284(sp)
    2a84:	003fc006 	br	2988 <___vfprintf_internal_r+0x13cc>
    2a88:	d9014c17 	ldw	r4,1328(sp)
    2a8c:	2080004c 	andi	r2,r4,1
    2a90:	10009a1e 	bne	r2,zero,2cfc <___vfprintf_internal_r+0x1740>
    2a94:	d9401904 	addi	r5,sp,100
    2a98:	dd000f04 	addi	r20,sp,60
    2a9c:	d9414115 	stw	r5,1284(sp)
    2aa0:	003d6106 	br	2028 <___vfprintf_internal_r+0xa6c>
    2aa4:	d9014f17 	ldw	r4,1340(sp)
    2aa8:	b00b883a 	mov	r5,r22
    2aac:	d9800c04 	addi	r6,sp,48
    2ab0:	00015640 	call	1564 <__sprint_r>
    2ab4:	103c791e 	bne	r2,zero,1c9c <___vfprintf_internal_r+0x6e0>
    2ab8:	dc800e17 	ldw	r18,56(sp)
    2abc:	d8c01904 	addi	r3,sp,100
    2ac0:	003cff06 	br	1ec0 <___vfprintf_internal_r+0x904>
    2ac4:	d8c14c17 	ldw	r3,1328(sp)
    2ac8:	1880040c 	andi	r2,r3,16
    2acc:	1000711e 	bne	r2,zero,2c94 <___vfprintf_internal_r+0x16d8>
    2ad0:	d9014c17 	ldw	r4,1328(sp)
    2ad4:	2080100c 	andi	r2,r4,64
    2ad8:	10006e26 	beq	r2,zero,2c94 <___vfprintf_internal_r+0x16d8>
    2adc:	3c00000b 	ldhu	r16,0(r7)
    2ae0:	0023883a 	mov	r17,zero
    2ae4:	39c00104 	addi	r7,r7,4
    2ae8:	d9c14015 	stw	r7,1280(sp)
    2aec:	003f0006 	br	26f0 <___vfprintf_internal_r+0x1134>
    2af0:	dc400d17 	ldw	r17,52(sp)
    2af4:	07000074 	movhi	fp,1
    2af8:	e7066284 	addi	fp,fp,6538
    2afc:	9425883a 	add	r18,r18,r16
    2b00:	8c400044 	addi	r17,r17,1
    2b04:	008001c4 	movi	r2,7
    2b08:	1f000015 	stw	fp,0(r3)
    2b0c:	1c000115 	stw	r16,4(r3)
    2b10:	dc800e15 	stw	r18,56(sp)
    2b14:	dc400d15 	stw	r17,52(sp)
    2b18:	147d7616 	blt	r2,r17,20f4 <___vfprintf_internal_r+0xb38>
    2b1c:	18c00204 	addi	r3,r3,8
    2b20:	003d7b06 	br	2110 <___vfprintf_internal_r+0xb54>
    2b24:	dc800e17 	ldw	r18,56(sp)
    2b28:	dc400d17 	ldw	r17,52(sp)
    2b2c:	07000074 	movhi	fp,1
    2b30:	e7066684 	addi	fp,fp,6554
    2b34:	003bc006 	br	1a38 <___vfprintf_internal_r+0x47c>
    2b38:	d9014f17 	ldw	r4,1340(sp)
    2b3c:	b00b883a 	mov	r5,r22
    2b40:	d9800c04 	addi	r6,sp,48
    2b44:	00015640 	call	1564 <__sprint_r>
    2b48:	103c541e 	bne	r2,zero,1c9c <___vfprintf_internal_r+0x6e0>
    2b4c:	dc800e17 	ldw	r18,56(sp)
    2b50:	d8c01904 	addi	r3,sp,100
    2b54:	003ce906 	br	1efc <___vfprintf_internal_r+0x940>
    2b58:	3c000017 	ldw	r16,0(r7)
    2b5c:	0009883a 	mov	r4,zero
    2b60:	39c00104 	addi	r7,r7,4
    2b64:	0023883a 	mov	r17,zero
    2b68:	d9c14015 	stw	r7,1280(sp)
    2b6c:	d8000405 	stb	zero,16(sp)
    2b70:	003d2006 	br	1ff4 <___vfprintf_internal_r+0xa38>
    2b74:	38800017 	ldw	r2,0(r7)
    2b78:	39c00104 	addi	r7,r7,4
    2b7c:	d9c14015 	stw	r7,1280(sp)
    2b80:	1023d7fa 	srai	r17,r2,31
    2b84:	1021883a 	mov	r16,r2
    2b88:	003d1806 	br	1fec <___vfprintf_internal_r+0xa30>
    2b8c:	3c000017 	ldw	r16,0(r7)
    2b90:	01000044 	movi	r4,1
    2b94:	39c00104 	addi	r7,r7,4
    2b98:	0023883a 	mov	r17,zero
    2b9c:	d9c14015 	stw	r7,1280(sp)
    2ba0:	d8000405 	stb	zero,16(sp)
    2ba4:	003d1306 	br	1ff4 <___vfprintf_internal_r+0xa38>
    2ba8:	00800074 	movhi	r2,1
    2bac:	10866204 	addi	r2,r2,6536
    2bb0:	94800044 	addi	r18,r18,1
    2bb4:	8c400044 	addi	r17,r17,1
    2bb8:	a8800015 	stw	r2,0(r21)
    2bbc:	00c00044 	movi	r3,1
    2bc0:	008001c4 	movi	r2,7
    2bc4:	a8c00115 	stw	r3,4(r21)
    2bc8:	dc800e15 	stw	r18,56(sp)
    2bcc:	dc400d15 	stw	r17,52(sp)
    2bd0:	1440ca16 	blt	r2,r17,2efc <___vfprintf_internal_r+0x1940>
    2bd4:	a8c00204 	addi	r3,r21,8
    2bd8:	2000061e 	bne	r4,zero,2bf4 <___vfprintf_internal_r+0x1638>
    2bdc:	d9414717 	ldw	r5,1308(sp)
    2be0:	2800041e 	bne	r5,zero,2bf4 <___vfprintf_internal_r+0x1638>
    2be4:	d9814c17 	ldw	r6,1328(sp)
    2be8:	3080004c 	andi	r2,r6,1
    2bec:	1005003a 	cmpeq	r2,r2,zero
    2bf0:	103bf01e 	bne	r2,zero,1bb4 <___vfprintf_internal_r+0x5f8>
    2bf4:	00800044 	movi	r2,1
    2bf8:	dc400d17 	ldw	r17,52(sp)
    2bfc:	18800115 	stw	r2,4(r3)
    2c00:	d8814917 	ldw	r2,1316(sp)
    2c04:	94800044 	addi	r18,r18,1
    2c08:	8c400044 	addi	r17,r17,1
    2c0c:	18800015 	stw	r2,0(r3)
    2c10:	008001c4 	movi	r2,7
    2c14:	dc800e15 	stw	r18,56(sp)
    2c18:	dc400d15 	stw	r17,52(sp)
    2c1c:	1440ca16 	blt	r2,r17,2f48 <___vfprintf_internal_r+0x198c>
    2c20:	18c00204 	addi	r3,r3,8
    2c24:	0121c83a 	sub	r16,zero,r4
    2c28:	0400500e 	bge	zero,r16,2d6c <___vfprintf_internal_r+0x17b0>
    2c2c:	00800404 	movi	r2,16
    2c30:	1400800e 	bge	r2,r16,2e34 <___vfprintf_internal_r+0x1878>
    2c34:	1027883a 	mov	r19,r2
    2c38:	07000074 	movhi	fp,1
    2c3c:	e7066284 	addi	fp,fp,6538
    2c40:	050001c4 	movi	r20,7
    2c44:	00000306 	br	2c54 <___vfprintf_internal_r+0x1698>
    2c48:	18c00204 	addi	r3,r3,8
    2c4c:	843ffc04 	addi	r16,r16,-16
    2c50:	9c007a0e 	bge	r19,r16,2e3c <___vfprintf_internal_r+0x1880>
    2c54:	94800404 	addi	r18,r18,16
    2c58:	8c400044 	addi	r17,r17,1
    2c5c:	1f000015 	stw	fp,0(r3)
    2c60:	1cc00115 	stw	r19,4(r3)
    2c64:	dc800e15 	stw	r18,56(sp)
    2c68:	dc400d15 	stw	r17,52(sp)
    2c6c:	a47ff60e 	bge	r20,r17,2c48 <___vfprintf_internal_r+0x168c>
    2c70:	d9014f17 	ldw	r4,1340(sp)
    2c74:	b00b883a 	mov	r5,r22
    2c78:	d9800c04 	addi	r6,sp,48
    2c7c:	00015640 	call	1564 <__sprint_r>
    2c80:	103c061e 	bne	r2,zero,1c9c <___vfprintf_internal_r+0x6e0>
    2c84:	dc800e17 	ldw	r18,56(sp)
    2c88:	dc400d17 	ldw	r17,52(sp)
    2c8c:	d8c01904 	addi	r3,sp,100
    2c90:	003fee06 	br	2c4c <___vfprintf_internal_r+0x1690>
    2c94:	3c000017 	ldw	r16,0(r7)
    2c98:	0023883a 	mov	r17,zero
    2c9c:	39c00104 	addi	r7,r7,4
    2ca0:	d9c14015 	stw	r7,1280(sp)
    2ca4:	003e9206 	br	26f0 <___vfprintf_internal_r+0x1134>
    2ca8:	d9401904 	addi	r5,sp,100
    2cac:	dd000f04 	addi	r20,sp,60
    2cb0:	d9414115 	stw	r5,1284(sp)
    2cb4:	d9814417 	ldw	r6,1296(sp)
    2cb8:	880a973a 	slli	r5,r17,28
    2cbc:	8004d13a 	srli	r2,r16,4
    2cc0:	810003cc 	andi	r4,r16,15
    2cc4:	3109883a 	add	r4,r6,r4
    2cc8:	2884b03a 	or	r2,r5,r2
    2ccc:	21400003 	ldbu	r5,0(r4)
    2cd0:	d9014117 	ldw	r4,1284(sp)
    2cd4:	8806d13a 	srli	r3,r17,4
    2cd8:	1021883a 	mov	r16,r2
    2cdc:	213fffc4 	addi	r4,r4,-1
    2ce0:	d9014115 	stw	r4,1284(sp)
    2ce4:	d9814117 	ldw	r6,1284(sp)
    2ce8:	10c8b03a 	or	r4,r2,r3
    2cec:	1823883a 	mov	r17,r3
    2cf0:	31400005 	stb	r5,0(r6)
    2cf4:	203fef1e 	bne	r4,zero,2cb4 <___vfprintf_internal_r+0x16f8>
    2cf8:	003ccb06 	br	2028 <___vfprintf_internal_r+0xa6c>
    2cfc:	00800c04 	movi	r2,48
    2d00:	d98018c4 	addi	r6,sp,99
    2d04:	dd000f04 	addi	r20,sp,60
    2d08:	d88018c5 	stb	r2,99(sp)
    2d0c:	d9814115 	stw	r6,1284(sp)
    2d10:	003cc506 	br	2028 <___vfprintf_internal_r+0xa6c>
    2d14:	dc400d17 	ldw	r17,52(sp)
    2d18:	07000074 	movhi	fp,1
    2d1c:	e7066684 	addi	fp,fp,6554
    2d20:	003bc706 	br	1c40 <___vfprintf_internal_r+0x684>
    2d24:	d9414c17 	ldw	r5,1328(sp)
    2d28:	2880040c 	andi	r2,r5,16
    2d2c:	10007c26 	beq	r2,zero,2f20 <___vfprintf_internal_r+0x1964>
    2d30:	38800017 	ldw	r2,0(r7)
    2d34:	39c00104 	addi	r7,r7,4
    2d38:	d9c14015 	stw	r7,1280(sp)
    2d3c:	d9814b17 	ldw	r6,1324(sp)
    2d40:	d9c14017 	ldw	r7,1280(sp)
    2d44:	11800015 	stw	r6,0(r2)
    2d48:	003a7806 	br	172c <___vfprintf_internal_r+0x170>
    2d4c:	d9014f17 	ldw	r4,1340(sp)
    2d50:	b00b883a 	mov	r5,r22
    2d54:	d9800c04 	addi	r6,sp,48
    2d58:	00015640 	call	1564 <__sprint_r>
    2d5c:	103bcf1e 	bne	r2,zero,1c9c <___vfprintf_internal_r+0x6e0>
    2d60:	dc800e17 	ldw	r18,56(sp)
    2d64:	dc400d17 	ldw	r17,52(sp)
    2d68:	d8c01904 	addi	r3,sp,100
    2d6c:	d9014717 	ldw	r4,1308(sp)
    2d70:	d9414117 	ldw	r5,1284(sp)
    2d74:	8c400044 	addi	r17,r17,1
    2d78:	9125883a 	add	r18,r18,r4
    2d7c:	008001c4 	movi	r2,7
    2d80:	19400015 	stw	r5,0(r3)
    2d84:	19000115 	stw	r4,4(r3)
    2d88:	dc800e15 	stw	r18,56(sp)
    2d8c:	dc400d15 	stw	r17,52(sp)
    2d90:	147cee16 	blt	r2,r17,214c <___vfprintf_internal_r+0xb90>
    2d94:	18c00204 	addi	r3,r3,8
    2d98:	003b8606 	br	1bb4 <___vfprintf_internal_r+0x5f8>
    2d9c:	38c00017 	ldw	r3,0(r7)
    2da0:	39000204 	addi	r4,r7,8
    2da4:	d9014015 	stw	r4,1280(sp)
    2da8:	d8c14215 	stw	r3,1288(sp)
    2dac:	39c00117 	ldw	r7,4(r7)
    2db0:	d9c14315 	stw	r7,1292(sp)
    2db4:	003e2006 	br	2638 <___vfprintf_internal_r+0x107c>
    2db8:	0005883a 	mov	r2,zero
    2dbc:	1409c83a 	sub	r4,r2,r16
    2dc0:	1105803a 	cmpltu	r2,r2,r4
    2dc4:	044bc83a 	sub	r5,zero,r17
    2dc8:	2885c83a 	sub	r2,r5,r2
    2dcc:	2021883a 	mov	r16,r4
    2dd0:	1023883a 	mov	r17,r2
    2dd4:	01000044 	movi	r4,1
    2dd8:	00800b44 	movi	r2,45
    2ddc:	d8800405 	stb	r2,16(sp)
    2de0:	003c8406 	br	1ff4 <___vfprintf_internal_r+0xa38>
    2de4:	d9014f17 	ldw	r4,1340(sp)
    2de8:	b00b883a 	mov	r5,r22
    2dec:	d9800c04 	addi	r6,sp,48
    2df0:	00015640 	call	1564 <__sprint_r>
    2df4:	103ba91e 	bne	r2,zero,1c9c <___vfprintf_internal_r+0x6e0>
    2df8:	dc800e17 	ldw	r18,56(sp)
    2dfc:	dc400d17 	ldw	r17,52(sp)
    2e00:	d9000517 	ldw	r4,20(sp)
    2e04:	d9401904 	addi	r5,sp,100
    2e08:	003da706 	br	24a8 <___vfprintf_internal_r+0xeec>
    2e0c:	d9014f17 	ldw	r4,1340(sp)
    2e10:	b00b883a 	mov	r5,r22
    2e14:	d9800c04 	addi	r6,sp,48
    2e18:	00015640 	call	1564 <__sprint_r>
    2e1c:	103b9f1e 	bne	r2,zero,1c9c <___vfprintf_internal_r+0x6e0>
    2e20:	dc800e17 	ldw	r18,56(sp)
    2e24:	dc400d17 	ldw	r17,52(sp)
    2e28:	d9000517 	ldw	r4,20(sp)
    2e2c:	d8c01904 	addi	r3,sp,100
    2e30:	003d9106 	br	2478 <___vfprintf_internal_r+0xebc>
    2e34:	07000074 	movhi	fp,1
    2e38:	e7066284 	addi	fp,fp,6538
    2e3c:	9425883a 	add	r18,r18,r16
    2e40:	8c400044 	addi	r17,r17,1
    2e44:	008001c4 	movi	r2,7
    2e48:	1f000015 	stw	fp,0(r3)
    2e4c:	1c000115 	stw	r16,4(r3)
    2e50:	dc800e15 	stw	r18,56(sp)
    2e54:	dc400d15 	stw	r17,52(sp)
    2e58:	147fbc16 	blt	r2,r17,2d4c <___vfprintf_internal_r+0x1790>
    2e5c:	18c00204 	addi	r3,r3,8
    2e60:	003fc206 	br	2d6c <___vfprintf_internal_r+0x17b0>
    2e64:	d9014f17 	ldw	r4,1340(sp)
    2e68:	b00b883a 	mov	r5,r22
    2e6c:	d9800c04 	addi	r6,sp,48
    2e70:	00015640 	call	1564 <__sprint_r>
    2e74:	103b891e 	bne	r2,zero,1c9c <___vfprintf_internal_r+0x6e0>
    2e78:	dc800e17 	ldw	r18,56(sp)
    2e7c:	d9000517 	ldw	r4,20(sp)
    2e80:	d8c01904 	addi	r3,sp,100
    2e84:	003d0206 	br	2290 <___vfprintf_internal_r+0xcd4>
    2e88:	07000074 	movhi	fp,1
    2e8c:	e7066284 	addi	fp,fp,6538
    2e90:	003be406 	br	1e24 <___vfprintf_internal_r+0x868>
    2e94:	00800074 	movhi	r2,1
    2e98:	10865104 	addi	r2,r2,6468
    2e9c:	d8814115 	stw	r2,1284(sp)
    2ea0:	003df506 	br	2678 <___vfprintf_internal_r+0x10bc>
    2ea4:	d9014217 	ldw	r4,1288(sp)
    2ea8:	d9414317 	ldw	r5,1292(sp)
    2eac:	0007e640 	call	7e64 <__isnand>
    2eb0:	10003926 	beq	r2,zero,2f98 <___vfprintf_internal_r+0x19dc>
    2eb4:	d9414d17 	ldw	r5,1332(sp)
    2eb8:	008011c4 	movi	r2,71
    2ebc:	1140ce16 	blt	r2,r5,31f8 <___vfprintf_internal_r+0x1c3c>
    2ec0:	01800074 	movhi	r6,1
    2ec4:	31865204 	addi	r6,r6,6472
    2ec8:	d9814115 	stw	r6,1284(sp)
    2ecc:	003dea06 	br	2678 <___vfprintf_internal_r+0x10bc>
    2ed0:	d9014c17 	ldw	r4,1328(sp)
    2ed4:	bdc00044 	addi	r23,r23,1
    2ed8:	b8c00007 	ldb	r3,0(r23)
    2edc:	21000814 	ori	r4,r4,32
    2ee0:	d9014c15 	stw	r4,1328(sp)
    2ee4:	003a3406 	br	17b8 <___vfprintf_internal_r+0x1fc>
    2ee8:	dcc14515 	stw	r19,1300(sp)
    2eec:	98011016 	blt	r19,zero,3330 <___vfprintf_internal_r+0x1d74>
    2ef0:	980f883a 	mov	r7,r19
    2ef4:	d8014615 	stw	zero,1304(sp)
    2ef8:	003c5206 	br	2044 <___vfprintf_internal_r+0xa88>
    2efc:	d9014f17 	ldw	r4,1340(sp)
    2f00:	b00b883a 	mov	r5,r22
    2f04:	d9800c04 	addi	r6,sp,48
    2f08:	00015640 	call	1564 <__sprint_r>
    2f0c:	103b631e 	bne	r2,zero,1c9c <___vfprintf_internal_r+0x6e0>
    2f10:	dc800e17 	ldw	r18,56(sp)
    2f14:	d9000517 	ldw	r4,20(sp)
    2f18:	d8c01904 	addi	r3,sp,100
    2f1c:	003f2e06 	br	2bd8 <___vfprintf_internal_r+0x161c>
    2f20:	d8c14c17 	ldw	r3,1328(sp)
    2f24:	1880100c 	andi	r2,r3,64
    2f28:	1000a026 	beq	r2,zero,31ac <___vfprintf_internal_r+0x1bf0>
    2f2c:	38800017 	ldw	r2,0(r7)
    2f30:	39c00104 	addi	r7,r7,4
    2f34:	d9c14015 	stw	r7,1280(sp)
    2f38:	d9014b17 	ldw	r4,1324(sp)
    2f3c:	d9c14017 	ldw	r7,1280(sp)
    2f40:	1100000d 	sth	r4,0(r2)
    2f44:	0039f906 	br	172c <___vfprintf_internal_r+0x170>
    2f48:	d9014f17 	ldw	r4,1340(sp)
    2f4c:	b00b883a 	mov	r5,r22
    2f50:	d9800c04 	addi	r6,sp,48
    2f54:	00015640 	call	1564 <__sprint_r>
    2f58:	103b501e 	bne	r2,zero,1c9c <___vfprintf_internal_r+0x6e0>
    2f5c:	dc800e17 	ldw	r18,56(sp)
    2f60:	dc400d17 	ldw	r17,52(sp)
    2f64:	d9000517 	ldw	r4,20(sp)
    2f68:	d8c01904 	addi	r3,sp,100
    2f6c:	003f2d06 	br	2c24 <___vfprintf_internal_r+0x1668>
    2f70:	00800184 	movi	r2,6
    2f74:	14c09a36 	bltu	r2,r19,31e0 <___vfprintf_internal_r+0x1c24>
    2f78:	dcc14515 	stw	r19,1300(sp)
    2f7c:	9800010e 	bge	r19,zero,2f84 <___vfprintf_internal_r+0x19c8>
    2f80:	d8014515 	stw	zero,1300(sp)
    2f84:	00800074 	movhi	r2,1
    2f88:	10865404 	addi	r2,r2,6480
    2f8c:	980f883a 	mov	r7,r19
    2f90:	d8814115 	stw	r2,1284(sp)
    2f94:	003a7806 	br	1978 <___vfprintf_internal_r+0x3bc>
    2f98:	00bfffc4 	movi	r2,-1
    2f9c:	9880e226 	beq	r19,r2,3328 <___vfprintf_internal_r+0x1d6c>
    2fa0:	d9414d17 	ldw	r5,1332(sp)
    2fa4:	008019c4 	movi	r2,103
    2fa8:	2880dc26 	beq	r5,r2,331c <___vfprintf_internal_r+0x1d60>
    2fac:	008011c4 	movi	r2,71
    2fb0:	2880da26 	beq	r5,r2,331c <___vfprintf_internal_r+0x1d60>
    2fb4:	d9414c17 	ldw	r5,1328(sp)
    2fb8:	d9014317 	ldw	r4,1292(sp)
    2fbc:	d9814217 	ldw	r6,1288(sp)
    2fc0:	29404014 	ori	r5,r5,256
    2fc4:	d9414c15 	stw	r5,1328(sp)
    2fc8:	2000cc16 	blt	r4,zero,32fc <___vfprintf_internal_r+0x1d40>
    2fcc:	3021883a 	mov	r16,r6
    2fd0:	2023883a 	mov	r17,r4
    2fd4:	0039883a 	mov	fp,zero
    2fd8:	d9414d17 	ldw	r5,1332(sp)
    2fdc:	00801984 	movi	r2,102
    2fe0:	2880b726 	beq	r5,r2,32c0 <___vfprintf_internal_r+0x1d04>
    2fe4:	00801184 	movi	r2,70
    2fe8:	2880b526 	beq	r5,r2,32c0 <___vfprintf_internal_r+0x1d04>
    2fec:	00801944 	movi	r2,101
    2ff0:	2880c826 	beq	r5,r2,3314 <___vfprintf_internal_r+0x1d58>
    2ff4:	00801144 	movi	r2,69
    2ff8:	2880c626 	beq	r5,r2,3314 <___vfprintf_internal_r+0x1d58>
    2ffc:	9829883a 	mov	r20,r19
    3000:	d9014f17 	ldw	r4,1340(sp)
    3004:	d8800504 	addi	r2,sp,20
    3008:	880d883a 	mov	r6,r17
    300c:	d8800115 	stw	r2,4(sp)
    3010:	d8c00604 	addi	r3,sp,24
    3014:	d8800704 	addi	r2,sp,28
    3018:	800b883a 	mov	r5,r16
    301c:	01c00084 	movi	r7,2
    3020:	d8c00215 	stw	r3,8(sp)
    3024:	d8800315 	stw	r2,12(sp)
    3028:	dd000015 	stw	r20,0(sp)
    302c:	00037e00 	call	37e0 <_dtoa_r>
    3030:	d9814d17 	ldw	r6,1332(sp)
    3034:	d8814115 	stw	r2,1284(sp)
    3038:	008019c4 	movi	r2,103
    303c:	30809526 	beq	r6,r2,3294 <___vfprintf_internal_r+0x1cd8>
    3040:	d8c14d17 	ldw	r3,1332(sp)
    3044:	008011c4 	movi	r2,71
    3048:	18809226 	beq	r3,r2,3294 <___vfprintf_internal_r+0x1cd8>
    304c:	d9414117 	ldw	r5,1284(sp)
    3050:	d9814d17 	ldw	r6,1332(sp)
    3054:	00801984 	movi	r2,102
    3058:	2d25883a 	add	r18,r5,r20
    305c:	30808626 	beq	r6,r2,3278 <___vfprintf_internal_r+0x1cbc>
    3060:	00801184 	movi	r2,70
    3064:	30808426 	beq	r6,r2,3278 <___vfprintf_internal_r+0x1cbc>
    3068:	000d883a 	mov	r6,zero
    306c:	000f883a 	mov	r7,zero
    3070:	880b883a 	mov	r5,r17
    3074:	8009883a 	mov	r4,r16
    3078:	0009cc00 	call	9cc0 <__eqdf2>
    307c:	1000751e 	bne	r2,zero,3254 <___vfprintf_internal_r+0x1c98>
    3080:	9005883a 	mov	r2,r18
    3084:	dc800715 	stw	r18,28(sp)
    3088:	d9014117 	ldw	r4,1284(sp)
    308c:	d9414d17 	ldw	r5,1332(sp)
    3090:	00c019c4 	movi	r3,103
    3094:	1125c83a 	sub	r18,r2,r4
    3098:	28c06826 	beq	r5,r3,323c <___vfprintf_internal_r+0x1c80>
    309c:	008011c4 	movi	r2,71
    30a0:	28806626 	beq	r5,r2,323c <___vfprintf_internal_r+0x1c80>
    30a4:	d9000517 	ldw	r4,20(sp)
    30a8:	d8c14d17 	ldw	r3,1332(sp)
    30ac:	00801944 	movi	r2,101
    30b0:	10c05516 	blt	r2,r3,3208 <___vfprintf_internal_r+0x1c4c>
    30b4:	213fffc4 	addi	r4,r4,-1
    30b8:	d9000515 	stw	r4,20(sp)
    30bc:	d8c00805 	stb	r3,32(sp)
    30c0:	2021883a 	mov	r16,r4
    30c4:	2000c116 	blt	r4,zero,33cc <___vfprintf_internal_r+0x1e10>
    30c8:	00800ac4 	movi	r2,43
    30cc:	d8800845 	stb	r2,33(sp)
    30d0:	00800244 	movi	r2,9
    30d4:	1400af0e 	bge	r2,r16,3394 <___vfprintf_internal_r+0x1dd8>
    30d8:	1027883a 	mov	r19,r2
    30dc:	dc400b84 	addi	r17,sp,46
    30e0:	8009883a 	mov	r4,r16
    30e4:	01400284 	movi	r5,10
    30e8:	000a3a80 	call	a3a8 <__modsi3>
    30ec:	10800c04 	addi	r2,r2,48
    30f0:	8c7fffc4 	addi	r17,r17,-1
    30f4:	8009883a 	mov	r4,r16
    30f8:	01400284 	movi	r5,10
    30fc:	88800005 	stb	r2,0(r17)
    3100:	000a3480 	call	a348 <__divsi3>
    3104:	1021883a 	mov	r16,r2
    3108:	98bff516 	blt	r19,r2,30e0 <___vfprintf_internal_r+0x1b24>
    310c:	10c00c04 	addi	r3,r2,48
    3110:	d88009c4 	addi	r2,sp,39
    3114:	108001c4 	addi	r2,r2,7
    3118:	897fffc4 	addi	r5,r17,-1
    311c:	88ffffc5 	stb	r3,-1(r17)
    3120:	2880a72e 	bgeu	r5,r2,33c0 <___vfprintf_internal_r+0x1e04>
    3124:	1009883a 	mov	r4,r2
    3128:	d9800804 	addi	r6,sp,32
    312c:	d8c00884 	addi	r3,sp,34
    3130:	28800003 	ldbu	r2,0(r5)
    3134:	29400044 	addi	r5,r5,1
    3138:	18800005 	stb	r2,0(r3)
    313c:	18c00044 	addi	r3,r3,1
    3140:	293ffb36 	bltu	r5,r4,3130 <___vfprintf_internal_r+0x1b74>
    3144:	1987c83a 	sub	r3,r3,r6
    3148:	00800044 	movi	r2,1
    314c:	d8c14815 	stw	r3,1312(sp)
    3150:	90cf883a 	add	r7,r18,r3
    3154:	1480960e 	bge	r2,r18,33b0 <___vfprintf_internal_r+0x1df4>
    3158:	39c00044 	addi	r7,r7,1
    315c:	d9c14515 	stw	r7,1300(sp)
    3160:	38003416 	blt	r7,zero,3234 <___vfprintf_internal_r+0x1c78>
    3164:	e0803fcc 	andi	r2,fp,255
    3168:	1080201c 	xori	r2,r2,128
    316c:	10bfe004 	addi	r2,r2,-128
    3170:	10004e26 	beq	r2,zero,32ac <___vfprintf_internal_r+0x1cf0>
    3174:	00800b44 	movi	r2,45
    3178:	dc814715 	stw	r18,1308(sp)
    317c:	d8014615 	stw	zero,1304(sp)
    3180:	d8800405 	stb	r2,16(sp)
    3184:	003bb106 	br	204c <___vfprintf_internal_r+0xa90>
    3188:	00800b44 	movi	r2,45
    318c:	d8800405 	stb	r2,16(sp)
    3190:	003d3306 	br	2660 <___vfprintf_internal_r+0x10a4>
    3194:	d9014f17 	ldw	r4,1340(sp)
    3198:	b00b883a 	mov	r5,r22
    319c:	d9800c04 	addi	r6,sp,48
    31a0:	00015640 	call	1564 <__sprint_r>
    31a4:	103abd1e 	bne	r2,zero,1c9c <___vfprintf_internal_r+0x6e0>
    31a8:	003abb06 	br	1c98 <___vfprintf_internal_r+0x6dc>
    31ac:	38800017 	ldw	r2,0(r7)
    31b0:	39c00104 	addi	r7,r7,4
    31b4:	d9c14015 	stw	r7,1280(sp)
    31b8:	d9414b17 	ldw	r5,1324(sp)
    31bc:	d9c14017 	ldw	r7,1280(sp)
    31c0:	11400015 	stw	r5,0(r2)
    31c4:	00395906 	br	172c <___vfprintf_internal_r+0x170>
    31c8:	980f883a 	mov	r7,r19
    31cc:	dcc14515 	stw	r19,1300(sp)
    31d0:	d8014615 	stw	zero,1304(sp)
    31d4:	003b9b06 	br	2044 <___vfprintf_internal_r+0xa88>
    31d8:	0027883a 	mov	r19,zero
    31dc:	00397806 	br	17c0 <___vfprintf_internal_r+0x204>
    31e0:	00c00074 	movhi	r3,1
    31e4:	18c65404 	addi	r3,r3,6480
    31e8:	100f883a 	mov	r7,r2
    31ec:	d8814515 	stw	r2,1300(sp)
    31f0:	d8c14115 	stw	r3,1284(sp)
    31f4:	0039e006 	br	1978 <___vfprintf_internal_r+0x3bc>
    31f8:	00800074 	movhi	r2,1
    31fc:	10865304 	addi	r2,r2,6476
    3200:	d8814115 	stw	r2,1284(sp)
    3204:	003d1c06 	br	2678 <___vfprintf_internal_r+0x10bc>
    3208:	d9414d17 	ldw	r5,1332(sp)
    320c:	00801984 	movi	r2,102
    3210:	28804926 	beq	r5,r2,3338 <___vfprintf_internal_r+0x1d7c>
    3214:	200f883a 	mov	r7,r4
    3218:	24805716 	blt	r4,r18,3378 <___vfprintf_internal_r+0x1dbc>
    321c:	d9414c17 	ldw	r5,1328(sp)
    3220:	2880004c 	andi	r2,r5,1
    3224:	10000126 	beq	r2,zero,322c <___vfprintf_internal_r+0x1c70>
    3228:	21c00044 	addi	r7,r4,1
    322c:	d9c14515 	stw	r7,1300(sp)
    3230:	383fcc0e 	bge	r7,zero,3164 <___vfprintf_internal_r+0x1ba8>
    3234:	d8014515 	stw	zero,1300(sp)
    3238:	003fca06 	br	3164 <___vfprintf_internal_r+0x1ba8>
    323c:	d9000517 	ldw	r4,20(sp)
    3240:	00bfff04 	movi	r2,-4
    3244:	1100480e 	bge	r2,r4,3368 <___vfprintf_internal_r+0x1dac>
    3248:	99004716 	blt	r19,r4,3368 <___vfprintf_internal_r+0x1dac>
    324c:	d8c14d15 	stw	r3,1332(sp)
    3250:	003ff006 	br	3214 <___vfprintf_internal_r+0x1c58>
    3254:	d8800717 	ldw	r2,28(sp)
    3258:	14bf8b2e 	bgeu	r2,r18,3088 <___vfprintf_internal_r+0x1acc>
    325c:	9007883a 	mov	r3,r18
    3260:	01000c04 	movi	r4,48
    3264:	11000005 	stb	r4,0(r2)
    3268:	10800044 	addi	r2,r2,1
    326c:	d8800715 	stw	r2,28(sp)
    3270:	18bffc1e 	bne	r3,r2,3264 <___vfprintf_internal_r+0x1ca8>
    3274:	003f8406 	br	3088 <___vfprintf_internal_r+0x1acc>
    3278:	d8814117 	ldw	r2,1284(sp)
    327c:	10c00007 	ldb	r3,0(r2)
    3280:	00800c04 	movi	r2,48
    3284:	18805b26 	beq	r3,r2,33f4 <___vfprintf_internal_r+0x1e38>
    3288:	d9000517 	ldw	r4,20(sp)
    328c:	9125883a 	add	r18,r18,r4
    3290:	003f7506 	br	3068 <___vfprintf_internal_r+0x1aac>
    3294:	d9014c17 	ldw	r4,1328(sp)
    3298:	2080004c 	andi	r2,r4,1
    329c:	1005003a 	cmpeq	r2,r2,zero
    32a0:	103f6a26 	beq	r2,zero,304c <___vfprintf_internal_r+0x1a90>
    32a4:	d8800717 	ldw	r2,28(sp)
    32a8:	003f7706 	br	3088 <___vfprintf_internal_r+0x1acc>
    32ac:	d9c14515 	stw	r7,1300(sp)
    32b0:	38004d16 	blt	r7,zero,33e8 <___vfprintf_internal_r+0x1e2c>
    32b4:	dc814715 	stw	r18,1308(sp)
    32b8:	d8014615 	stw	zero,1304(sp)
    32bc:	003b6106 	br	2044 <___vfprintf_internal_r+0xa88>
    32c0:	d9014f17 	ldw	r4,1340(sp)
    32c4:	d8800504 	addi	r2,sp,20
    32c8:	d8800115 	stw	r2,4(sp)
    32cc:	d8c00604 	addi	r3,sp,24
    32d0:	d8800704 	addi	r2,sp,28
    32d4:	800b883a 	mov	r5,r16
    32d8:	880d883a 	mov	r6,r17
    32dc:	01c000c4 	movi	r7,3
    32e0:	d8c00215 	stw	r3,8(sp)
    32e4:	d8800315 	stw	r2,12(sp)
    32e8:	dcc00015 	stw	r19,0(sp)
    32ec:	9829883a 	mov	r20,r19
    32f0:	00037e00 	call	37e0 <_dtoa_r>
    32f4:	d8814115 	stw	r2,1284(sp)
    32f8:	003f5106 	br	3040 <___vfprintf_internal_r+0x1a84>
    32fc:	d8c14217 	ldw	r3,1288(sp)
    3300:	d9014317 	ldw	r4,1292(sp)
    3304:	07000b44 	movi	fp,45
    3308:	1821883a 	mov	r16,r3
    330c:	2460003c 	xorhi	r17,r4,32768
    3310:	003f3106 	br	2fd8 <___vfprintf_internal_r+0x1a1c>
    3314:	9d000044 	addi	r20,r19,1
    3318:	003f3906 	br	3000 <___vfprintf_internal_r+0x1a44>
    331c:	983f251e 	bne	r19,zero,2fb4 <___vfprintf_internal_r+0x19f8>
    3320:	04c00044 	movi	r19,1
    3324:	003f2306 	br	2fb4 <___vfprintf_internal_r+0x19f8>
    3328:	04c00184 	movi	r19,6
    332c:	003f2106 	br	2fb4 <___vfprintf_internal_r+0x19f8>
    3330:	d8014515 	stw	zero,1300(sp)
    3334:	003eee06 	br	2ef0 <___vfprintf_internal_r+0x1934>
    3338:	200f883a 	mov	r7,r4
    333c:	0100370e 	bge	zero,r4,341c <___vfprintf_internal_r+0x1e60>
    3340:	9800031e 	bne	r19,zero,3350 <___vfprintf_internal_r+0x1d94>
    3344:	d9814c17 	ldw	r6,1328(sp)
    3348:	3080004c 	andi	r2,r6,1
    334c:	103fb726 	beq	r2,zero,322c <___vfprintf_internal_r+0x1c70>
    3350:	20800044 	addi	r2,r4,1
    3354:	98a7883a 	add	r19,r19,r2
    3358:	dcc14515 	stw	r19,1300(sp)
    335c:	980f883a 	mov	r7,r19
    3360:	983f800e 	bge	r19,zero,3164 <___vfprintf_internal_r+0x1ba8>
    3364:	003fb306 	br	3234 <___vfprintf_internal_r+0x1c78>
    3368:	d9814d17 	ldw	r6,1332(sp)
    336c:	31bfff84 	addi	r6,r6,-2
    3370:	d9814d15 	stw	r6,1332(sp)
    3374:	003f4c06 	br	30a8 <___vfprintf_internal_r+0x1aec>
    3378:	0100180e 	bge	zero,r4,33dc <___vfprintf_internal_r+0x1e20>
    337c:	00800044 	movi	r2,1
    3380:	1485883a 	add	r2,r2,r18
    3384:	d8814515 	stw	r2,1300(sp)
    3388:	100f883a 	mov	r7,r2
    338c:	103f750e 	bge	r2,zero,3164 <___vfprintf_internal_r+0x1ba8>
    3390:	003fa806 	br	3234 <___vfprintf_internal_r+0x1c78>
    3394:	80c00c04 	addi	r3,r16,48
    3398:	00800c04 	movi	r2,48
    339c:	d8c008c5 	stb	r3,35(sp)
    33a0:	d9800804 	addi	r6,sp,32
    33a4:	d8c00904 	addi	r3,sp,36
    33a8:	d8800885 	stb	r2,34(sp)
    33ac:	003f6506 	br	3144 <___vfprintf_internal_r+0x1b88>
    33b0:	d9014c17 	ldw	r4,1328(sp)
    33b4:	2084703a 	and	r2,r4,r2
    33b8:	103f9c26 	beq	r2,zero,322c <___vfprintf_internal_r+0x1c70>
    33bc:	003f6606 	br	3158 <___vfprintf_internal_r+0x1b9c>
    33c0:	d9800804 	addi	r6,sp,32
    33c4:	d8c00884 	addi	r3,sp,34
    33c8:	003f5e06 	br	3144 <___vfprintf_internal_r+0x1b88>
    33cc:	00800b44 	movi	r2,45
    33d0:	0121c83a 	sub	r16,zero,r4
    33d4:	d8800845 	stb	r2,33(sp)
    33d8:	003f3d06 	br	30d0 <___vfprintf_internal_r+0x1b14>
    33dc:	00800084 	movi	r2,2
    33e0:	1105c83a 	sub	r2,r2,r4
    33e4:	003fe606 	br	3380 <___vfprintf_internal_r+0x1dc4>
    33e8:	d8014515 	stw	zero,1300(sp)
    33ec:	dc814715 	stw	r18,1308(sp)
    33f0:	003fb106 	br	32b8 <___vfprintf_internal_r+0x1cfc>
    33f4:	000d883a 	mov	r6,zero
    33f8:	000f883a 	mov	r7,zero
    33fc:	8009883a 	mov	r4,r16
    3400:	880b883a 	mov	r5,r17
    3404:	0009d480 	call	9d48 <__nedf2>
    3408:	103f9f26 	beq	r2,zero,3288 <___vfprintf_internal_r+0x1ccc>
    340c:	00800044 	movi	r2,1
    3410:	1509c83a 	sub	r4,r2,r20
    3414:	d9000515 	stw	r4,20(sp)
    3418:	003f9b06 	br	3288 <___vfprintf_internal_r+0x1ccc>
    341c:	98000d1e 	bne	r19,zero,3454 <___vfprintf_internal_r+0x1e98>
    3420:	d8c14c17 	ldw	r3,1328(sp)
    3424:	1880004c 	andi	r2,r3,1
    3428:	10000a1e 	bne	r2,zero,3454 <___vfprintf_internal_r+0x1e98>
    342c:	01000044 	movi	r4,1
    3430:	200f883a 	mov	r7,r4
    3434:	d9014515 	stw	r4,1300(sp)
    3438:	003f4a06 	br	3164 <___vfprintf_internal_r+0x1ba8>
    343c:	3cc00017 	ldw	r19,0(r7)
    3440:	39c00104 	addi	r7,r7,4
    3444:	983d0e0e 	bge	r19,zero,2880 <___vfprintf_internal_r+0x12c4>
    3448:	b8c00007 	ldb	r3,0(r23)
    344c:	04ffffc4 	movi	r19,-1
    3450:	0038d906 	br	17b8 <___vfprintf_internal_r+0x1fc>
    3454:	9cc00084 	addi	r19,r19,2
    3458:	dcc14515 	stw	r19,1300(sp)
    345c:	980f883a 	mov	r7,r19
    3460:	983f400e 	bge	r19,zero,3164 <___vfprintf_internal_r+0x1ba8>
    3464:	003f7306 	br	3234 <___vfprintf_internal_r+0x1c78>

00003468 <__vfprintf_internal>:
    3468:	00800074 	movhi	r2,1
    346c:	108eef04 	addi	r2,r2,15292
    3470:	2013883a 	mov	r9,r4
    3474:	11000017 	ldw	r4,0(r2)
    3478:	2805883a 	mov	r2,r5
    347c:	300f883a 	mov	r7,r6
    3480:	480b883a 	mov	r5,r9
    3484:	100d883a 	mov	r6,r2
    3488:	00015bc1 	jmpi	15bc <___vfprintf_internal_r>

0000348c <__swsetup_r>:
    348c:	00800074 	movhi	r2,1
    3490:	108eef04 	addi	r2,r2,15292
    3494:	10c00017 	ldw	r3,0(r2)
    3498:	defffd04 	addi	sp,sp,-12
    349c:	dc400115 	stw	r17,4(sp)
    34a0:	dc000015 	stw	r16,0(sp)
    34a4:	dfc00215 	stw	ra,8(sp)
    34a8:	2023883a 	mov	r17,r4
    34ac:	2821883a 	mov	r16,r5
    34b0:	18000226 	beq	r3,zero,34bc <__swsetup_r+0x30>
    34b4:	18800e17 	ldw	r2,56(r3)
    34b8:	10001f26 	beq	r2,zero,3538 <__swsetup_r+0xac>
    34bc:	8100030b 	ldhu	r4,12(r16)
    34c0:	2080020c 	andi	r2,r4,8
    34c4:	10002826 	beq	r2,zero,3568 <__swsetup_r+0xdc>
    34c8:	81400417 	ldw	r5,16(r16)
    34cc:	28001d26 	beq	r5,zero,3544 <__swsetup_r+0xb8>
    34d0:	2080004c 	andi	r2,r4,1
    34d4:	1005003a 	cmpeq	r2,r2,zero
    34d8:	10000b26 	beq	r2,zero,3508 <__swsetup_r+0x7c>
    34dc:	2080008c 	andi	r2,r4,2
    34e0:	10001226 	beq	r2,zero,352c <__swsetup_r+0xa0>
    34e4:	0005883a 	mov	r2,zero
    34e8:	80800215 	stw	r2,8(r16)
    34ec:	28000b26 	beq	r5,zero,351c <__swsetup_r+0x90>
    34f0:	0005883a 	mov	r2,zero
    34f4:	dfc00217 	ldw	ra,8(sp)
    34f8:	dc400117 	ldw	r17,4(sp)
    34fc:	dc000017 	ldw	r16,0(sp)
    3500:	dec00304 	addi	sp,sp,12
    3504:	f800283a 	ret
    3508:	80800517 	ldw	r2,20(r16)
    350c:	80000215 	stw	zero,8(r16)
    3510:	0085c83a 	sub	r2,zero,r2
    3514:	80800615 	stw	r2,24(r16)
    3518:	283ff51e 	bne	r5,zero,34f0 <__swsetup_r+0x64>
    351c:	2080200c 	andi	r2,r4,128
    3520:	103ff326 	beq	r2,zero,34f0 <__swsetup_r+0x64>
    3524:	00bfffc4 	movi	r2,-1
    3528:	003ff206 	br	34f4 <__swsetup_r+0x68>
    352c:	80800517 	ldw	r2,20(r16)
    3530:	80800215 	stw	r2,8(r16)
    3534:	003fed06 	br	34ec <__swsetup_r+0x60>
    3538:	1809883a 	mov	r4,r3
    353c:	000502c0 	call	502c <__sinit>
    3540:	003fde06 	br	34bc <__swsetup_r+0x30>
    3544:	20c0a00c 	andi	r3,r4,640
    3548:	00808004 	movi	r2,512
    354c:	18bfe026 	beq	r3,r2,34d0 <__swsetup_r+0x44>
    3550:	8809883a 	mov	r4,r17
    3554:	800b883a 	mov	r5,r16
    3558:	0005da40 	call	5da4 <__smakebuf_r>
    355c:	8100030b 	ldhu	r4,12(r16)
    3560:	81400417 	ldw	r5,16(r16)
    3564:	003fda06 	br	34d0 <__swsetup_r+0x44>
    3568:	2080040c 	andi	r2,r4,16
    356c:	103fed26 	beq	r2,zero,3524 <__swsetup_r+0x98>
    3570:	2080010c 	andi	r2,r4,4
    3574:	10001226 	beq	r2,zero,35c0 <__swsetup_r+0x134>
    3578:	81400c17 	ldw	r5,48(r16)
    357c:	28000526 	beq	r5,zero,3594 <__swsetup_r+0x108>
    3580:	80801004 	addi	r2,r16,64
    3584:	28800226 	beq	r5,r2,3590 <__swsetup_r+0x104>
    3588:	8809883a 	mov	r4,r17
    358c:	00053b00 	call	53b0 <_free_r>
    3590:	80000c15 	stw	zero,48(r16)
    3594:	8080030b 	ldhu	r2,12(r16)
    3598:	81400417 	ldw	r5,16(r16)
    359c:	80000115 	stw	zero,4(r16)
    35a0:	10bff6cc 	andi	r2,r2,65499
    35a4:	8080030d 	sth	r2,12(r16)
    35a8:	81400015 	stw	r5,0(r16)
    35ac:	8080030b 	ldhu	r2,12(r16)
    35b0:	10800214 	ori	r2,r2,8
    35b4:	113fffcc 	andi	r4,r2,65535
    35b8:	8080030d 	sth	r2,12(r16)
    35bc:	003fc306 	br	34cc <__swsetup_r+0x40>
    35c0:	81400417 	ldw	r5,16(r16)
    35c4:	003ff906 	br	35ac <__swsetup_r+0x120>

000035c8 <quorem>:
    35c8:	28c00417 	ldw	r3,16(r5)
    35cc:	20800417 	ldw	r2,16(r4)
    35d0:	defff604 	addi	sp,sp,-40
    35d4:	ddc00715 	stw	r23,28(sp)
    35d8:	dd400515 	stw	r21,20(sp)
    35dc:	dfc00915 	stw	ra,36(sp)
    35e0:	df000815 	stw	fp,32(sp)
    35e4:	dd800615 	stw	r22,24(sp)
    35e8:	dd000415 	stw	r20,16(sp)
    35ec:	dcc00315 	stw	r19,12(sp)
    35f0:	dc800215 	stw	r18,8(sp)
    35f4:	dc400115 	stw	r17,4(sp)
    35f8:	dc000015 	stw	r16,0(sp)
    35fc:	202f883a 	mov	r23,r4
    3600:	282b883a 	mov	r21,r5
    3604:	10c07416 	blt	r2,r3,37d8 <quorem+0x210>
    3608:	1c7fffc4 	addi	r17,r3,-1
    360c:	8c45883a 	add	r2,r17,r17
    3610:	1085883a 	add	r2,r2,r2
    3614:	2c000504 	addi	r16,r5,20
    3618:	24c00504 	addi	r19,r4,20
    361c:	14ed883a 	add	r22,r2,r19
    3620:	80a5883a 	add	r18,r16,r2
    3624:	b7000017 	ldw	fp,0(r22)
    3628:	91400017 	ldw	r5,0(r18)
    362c:	e009883a 	mov	r4,fp
    3630:	29400044 	addi	r5,r5,1
    3634:	000a4080 	call	a408 <__udivsi3>
    3638:	1029883a 	mov	r20,r2
    363c:	10003c1e 	bne	r2,zero,3730 <quorem+0x168>
    3640:	a80b883a 	mov	r5,r21
    3644:	b809883a 	mov	r4,r23
    3648:	00069980 	call	6998 <__mcmp>
    364c:	10002b16 	blt	r2,zero,36fc <quorem+0x134>
    3650:	a5000044 	addi	r20,r20,1
    3654:	980f883a 	mov	r7,r19
    3658:	0011883a 	mov	r8,zero
    365c:	0009883a 	mov	r4,zero
    3660:	81400017 	ldw	r5,0(r16)
    3664:	38c00017 	ldw	r3,0(r7)
    3668:	84000104 	addi	r16,r16,4
    366c:	28bfffcc 	andi	r2,r5,65535
    3670:	2085883a 	add	r2,r4,r2
    3674:	11bfffcc 	andi	r6,r2,65535
    3678:	193fffcc 	andi	r4,r3,65535
    367c:	1004d43a 	srli	r2,r2,16
    3680:	280ad43a 	srli	r5,r5,16
    3684:	2189c83a 	sub	r4,r4,r6
    3688:	2209883a 	add	r4,r4,r8
    368c:	1806d43a 	srli	r3,r3,16
    3690:	288b883a 	add	r5,r5,r2
    3694:	200dd43a 	srai	r6,r4,16
    3698:	28bfffcc 	andi	r2,r5,65535
    369c:	1887c83a 	sub	r3,r3,r2
    36a0:	1987883a 	add	r3,r3,r6
    36a4:	3900000d 	sth	r4,0(r7)
    36a8:	38c0008d 	sth	r3,2(r7)
    36ac:	2808d43a 	srli	r4,r5,16
    36b0:	39c00104 	addi	r7,r7,4
    36b4:	1811d43a 	srai	r8,r3,16
    36b8:	943fe92e 	bgeu	r18,r16,3660 <quorem+0x98>
    36bc:	8c45883a 	add	r2,r17,r17
    36c0:	1085883a 	add	r2,r2,r2
    36c4:	9885883a 	add	r2,r19,r2
    36c8:	10c00017 	ldw	r3,0(r2)
    36cc:	18000b1e 	bne	r3,zero,36fc <quorem+0x134>
    36d0:	113fff04 	addi	r4,r2,-4
    36d4:	9900082e 	bgeu	r19,r4,36f8 <quorem+0x130>
    36d8:	10bfff17 	ldw	r2,-4(r2)
    36dc:	10000326 	beq	r2,zero,36ec <quorem+0x124>
    36e0:	00000506 	br	36f8 <quorem+0x130>
    36e4:	20800017 	ldw	r2,0(r4)
    36e8:	1000031e 	bne	r2,zero,36f8 <quorem+0x130>
    36ec:	213fff04 	addi	r4,r4,-4
    36f0:	8c7fffc4 	addi	r17,r17,-1
    36f4:	993ffb36 	bltu	r19,r4,36e4 <quorem+0x11c>
    36f8:	bc400415 	stw	r17,16(r23)
    36fc:	a005883a 	mov	r2,r20
    3700:	dfc00917 	ldw	ra,36(sp)
    3704:	df000817 	ldw	fp,32(sp)
    3708:	ddc00717 	ldw	r23,28(sp)
    370c:	dd800617 	ldw	r22,24(sp)
    3710:	dd400517 	ldw	r21,20(sp)
    3714:	dd000417 	ldw	r20,16(sp)
    3718:	dcc00317 	ldw	r19,12(sp)
    371c:	dc800217 	ldw	r18,8(sp)
    3720:	dc400117 	ldw	r17,4(sp)
    3724:	dc000017 	ldw	r16,0(sp)
    3728:	dec00a04 	addi	sp,sp,40
    372c:	f800283a 	ret
    3730:	980f883a 	mov	r7,r19
    3734:	8011883a 	mov	r8,r16
    3738:	0013883a 	mov	r9,zero
    373c:	000d883a 	mov	r6,zero
    3740:	40c00017 	ldw	r3,0(r8)
    3744:	39000017 	ldw	r4,0(r7)
    3748:	42000104 	addi	r8,r8,4
    374c:	18bfffcc 	andi	r2,r3,65535
    3750:	a085383a 	mul	r2,r20,r2
    3754:	1806d43a 	srli	r3,r3,16
    3758:	217fffcc 	andi	r5,r4,65535
    375c:	3085883a 	add	r2,r6,r2
    3760:	11bfffcc 	andi	r6,r2,65535
    3764:	a0c7383a 	mul	r3,r20,r3
    3768:	1004d43a 	srli	r2,r2,16
    376c:	298bc83a 	sub	r5,r5,r6
    3770:	2a4b883a 	add	r5,r5,r9
    3774:	2008d43a 	srli	r4,r4,16
    3778:	1887883a 	add	r3,r3,r2
    377c:	280dd43a 	srai	r6,r5,16
    3780:	18bfffcc 	andi	r2,r3,65535
    3784:	2089c83a 	sub	r4,r4,r2
    3788:	2189883a 	add	r4,r4,r6
    378c:	3900008d 	sth	r4,2(r7)
    3790:	3940000d 	sth	r5,0(r7)
    3794:	180cd43a 	srli	r6,r3,16
    3798:	39c00104 	addi	r7,r7,4
    379c:	2013d43a 	srai	r9,r4,16
    37a0:	923fe72e 	bgeu	r18,r8,3740 <quorem+0x178>
    37a4:	e03fa61e 	bne	fp,zero,3640 <quorem+0x78>
    37a8:	b0ffff04 	addi	r3,r22,-4
    37ac:	98c0082e 	bgeu	r19,r3,37d0 <quorem+0x208>
    37b0:	b0bfff17 	ldw	r2,-4(r22)
    37b4:	10000326 	beq	r2,zero,37c4 <quorem+0x1fc>
    37b8:	00000506 	br	37d0 <quorem+0x208>
    37bc:	18800017 	ldw	r2,0(r3)
    37c0:	1000031e 	bne	r2,zero,37d0 <quorem+0x208>
    37c4:	18ffff04 	addi	r3,r3,-4
    37c8:	8c7fffc4 	addi	r17,r17,-1
    37cc:	98fffb36 	bltu	r19,r3,37bc <quorem+0x1f4>
    37d0:	bc400415 	stw	r17,16(r23)
    37d4:	003f9a06 	br	3640 <quorem+0x78>
    37d8:	0005883a 	mov	r2,zero
    37dc:	003fc806 	br	3700 <quorem+0x138>

000037e0 <_dtoa_r>:
    37e0:	22001017 	ldw	r8,64(r4)
    37e4:	deffda04 	addi	sp,sp,-152
    37e8:	dd402115 	stw	r21,132(sp)
    37ec:	dd002015 	stw	r20,128(sp)
    37f0:	dc801e15 	stw	r18,120(sp)
    37f4:	dc401d15 	stw	r17,116(sp)
    37f8:	dfc02515 	stw	ra,148(sp)
    37fc:	df002415 	stw	fp,144(sp)
    3800:	ddc02315 	stw	r23,140(sp)
    3804:	dd802215 	stw	r22,136(sp)
    3808:	dcc01f15 	stw	r19,124(sp)
    380c:	dc001c15 	stw	r16,112(sp)
    3810:	d9001615 	stw	r4,88(sp)
    3814:	3023883a 	mov	r17,r6
    3818:	2829883a 	mov	r20,r5
    381c:	d9c01715 	stw	r7,92(sp)
    3820:	dc802817 	ldw	r18,160(sp)
    3824:	302b883a 	mov	r21,r6
    3828:	40000a26 	beq	r8,zero,3854 <_dtoa_r+0x74>
    382c:	20801117 	ldw	r2,68(r4)
    3830:	400b883a 	mov	r5,r8
    3834:	40800115 	stw	r2,4(r8)
    3838:	20c01117 	ldw	r3,68(r4)
    383c:	00800044 	movi	r2,1
    3840:	10c4983a 	sll	r2,r2,r3
    3844:	40800215 	stw	r2,8(r8)
    3848:	000683c0 	call	683c <_Bfree>
    384c:	d8c01617 	ldw	r3,88(sp)
    3850:	18001015 	stw	zero,64(r3)
    3854:	8800a316 	blt	r17,zero,3ae4 <_dtoa_r+0x304>
    3858:	90000015 	stw	zero,0(r18)
    385c:	a8dffc2c 	andhi	r3,r21,32752
    3860:	009ffc34 	movhi	r2,32752
    3864:	18809126 	beq	r3,r2,3aac <_dtoa_r+0x2cc>
    3868:	000d883a 	mov	r6,zero
    386c:	000f883a 	mov	r7,zero
    3870:	a009883a 	mov	r4,r20
    3874:	a80b883a 	mov	r5,r21
    3878:	dd001215 	stw	r20,72(sp)
    387c:	dd401315 	stw	r21,76(sp)
    3880:	0009d480 	call	9d48 <__nedf2>
    3884:	1000171e 	bne	r2,zero,38e4 <_dtoa_r+0x104>
    3888:	d9802717 	ldw	r6,156(sp)
    388c:	00800044 	movi	r2,1
    3890:	30800015 	stw	r2,0(r6)
    3894:	d8802917 	ldw	r2,164(sp)
    3898:	10029b26 	beq	r2,zero,4308 <_dtoa_r+0xb28>
    389c:	d9002917 	ldw	r4,164(sp)
    38a0:	00800074 	movhi	r2,1
    38a4:	10866244 	addi	r2,r2,6537
    38a8:	10ffffc4 	addi	r3,r2,-1
    38ac:	20800015 	stw	r2,0(r4)
    38b0:	1805883a 	mov	r2,r3
    38b4:	dfc02517 	ldw	ra,148(sp)
    38b8:	df002417 	ldw	fp,144(sp)
    38bc:	ddc02317 	ldw	r23,140(sp)
    38c0:	dd802217 	ldw	r22,136(sp)
    38c4:	dd402117 	ldw	r21,132(sp)
    38c8:	dd002017 	ldw	r20,128(sp)
    38cc:	dcc01f17 	ldw	r19,124(sp)
    38d0:	dc801e17 	ldw	r18,120(sp)
    38d4:	dc401d17 	ldw	r17,116(sp)
    38d8:	dc001c17 	ldw	r16,112(sp)
    38dc:	dec02604 	addi	sp,sp,152
    38e0:	f800283a 	ret
    38e4:	d9001617 	ldw	r4,88(sp)
    38e8:	d9401217 	ldw	r5,72(sp)
    38ec:	d8800104 	addi	r2,sp,4
    38f0:	a80d883a 	mov	r6,r21
    38f4:	d9c00204 	addi	r7,sp,8
    38f8:	d8800015 	stw	r2,0(sp)
    38fc:	0006e780 	call	6e78 <__d2b>
    3900:	d8800715 	stw	r2,28(sp)
    3904:	a804d53a 	srli	r2,r21,20
    3908:	1101ffcc 	andi	r4,r2,2047
    390c:	20008626 	beq	r4,zero,3b28 <_dtoa_r+0x348>
    3910:	d8c01217 	ldw	r3,72(sp)
    3914:	00800434 	movhi	r2,16
    3918:	10bfffc4 	addi	r2,r2,-1
    391c:	ddc00117 	ldw	r23,4(sp)
    3920:	a884703a 	and	r2,r21,r2
    3924:	1811883a 	mov	r8,r3
    3928:	124ffc34 	orhi	r9,r2,16368
    392c:	25bf0044 	addi	r22,r4,-1023
    3930:	d8000815 	stw	zero,32(sp)
    3934:	0005883a 	mov	r2,zero
    3938:	00cffe34 	movhi	r3,16376
    393c:	480b883a 	mov	r5,r9
    3940:	4009883a 	mov	r4,r8
    3944:	180f883a 	mov	r7,r3
    3948:	100d883a 	mov	r6,r2
    394c:	00095b00 	call	95b0 <__subdf3>
    3950:	0218dbf4 	movhi	r8,25455
    3954:	4210d844 	addi	r8,r8,17249
    3958:	024ff4f4 	movhi	r9,16339
    395c:	4a61e9c4 	addi	r9,r9,-30809
    3960:	480f883a 	mov	r7,r9
    3964:	400d883a 	mov	r6,r8
    3968:	180b883a 	mov	r5,r3
    396c:	1009883a 	mov	r4,r2
    3970:	00096a40 	call	96a4 <__muldf3>
    3974:	0222d874 	movhi	r8,35681
    3978:	42322cc4 	addi	r8,r8,-14157
    397c:	024ff1f4 	movhi	r9,16327
    3980:	4a628a04 	addi	r9,r9,-30168
    3984:	480f883a 	mov	r7,r9
    3988:	400d883a 	mov	r6,r8
    398c:	180b883a 	mov	r5,r3
    3990:	1009883a 	mov	r4,r2
    3994:	00096300 	call	9630 <__adddf3>
    3998:	b009883a 	mov	r4,r22
    399c:	1021883a 	mov	r16,r2
    39a0:	1823883a 	mov	r17,r3
    39a4:	0009f680 	call	9f68 <__floatsidf>
    39a8:	021427f4 	movhi	r8,20639
    39ac:	421e7ec4 	addi	r8,r8,31227
    39b0:	024ff4f4 	movhi	r9,16339
    39b4:	4a5104c4 	addi	r9,r9,17427
    39b8:	480f883a 	mov	r7,r9
    39bc:	400d883a 	mov	r6,r8
    39c0:	180b883a 	mov	r5,r3
    39c4:	1009883a 	mov	r4,r2
    39c8:	00096a40 	call	96a4 <__muldf3>
    39cc:	180f883a 	mov	r7,r3
    39d0:	880b883a 	mov	r5,r17
    39d4:	100d883a 	mov	r6,r2
    39d8:	8009883a 	mov	r4,r16
    39dc:	00096300 	call	9630 <__adddf3>
    39e0:	1009883a 	mov	r4,r2
    39e4:	180b883a 	mov	r5,r3
    39e8:	1021883a 	mov	r16,r2
    39ec:	1823883a 	mov	r17,r3
    39f0:	000a0600 	call	a060 <__fixdfsi>
    39f4:	000d883a 	mov	r6,zero
    39f8:	000f883a 	mov	r7,zero
    39fc:	8009883a 	mov	r4,r16
    3a00:	880b883a 	mov	r5,r17
    3a04:	d8800d15 	stw	r2,52(sp)
    3a08:	0009ee00 	call	9ee0 <__ltdf2>
    3a0c:	10031716 	blt	r2,zero,466c <_dtoa_r+0xe8c>
    3a10:	d8c00d17 	ldw	r3,52(sp)
    3a14:	00800584 	movi	r2,22
    3a18:	10c1482e 	bgeu	r2,r3,3f3c <_dtoa_r+0x75c>
    3a1c:	01000044 	movi	r4,1
    3a20:	d9000c15 	stw	r4,48(sp)
    3a24:	bd85c83a 	sub	r2,r23,r22
    3a28:	11bfffc4 	addi	r6,r2,-1
    3a2c:	30030b16 	blt	r6,zero,465c <_dtoa_r+0xe7c>
    3a30:	d9800a15 	stw	r6,40(sp)
    3a34:	d8001115 	stw	zero,68(sp)
    3a38:	d8c00d17 	ldw	r3,52(sp)
    3a3c:	1802ff16 	blt	r3,zero,463c <_dtoa_r+0xe5c>
    3a40:	d9000a17 	ldw	r4,40(sp)
    3a44:	d8c00915 	stw	r3,36(sp)
    3a48:	d8001015 	stw	zero,64(sp)
    3a4c:	20c9883a 	add	r4,r4,r3
    3a50:	d9000a15 	stw	r4,40(sp)
    3a54:	d9001717 	ldw	r4,92(sp)
    3a58:	00800244 	movi	r2,9
    3a5c:	11004636 	bltu	r2,r4,3b78 <_dtoa_r+0x398>
    3a60:	00800144 	movi	r2,5
    3a64:	11020416 	blt	r2,r4,4278 <_dtoa_r+0xa98>
    3a68:	04400044 	movi	r17,1
    3a6c:	d8c01717 	ldw	r3,92(sp)
    3a70:	00800144 	movi	r2,5
    3a74:	10c1ed36 	bltu	r2,r3,422c <_dtoa_r+0xa4c>
    3a78:	18c5883a 	add	r2,r3,r3
    3a7c:	1085883a 	add	r2,r2,r2
    3a80:	00c00034 	movhi	r3,0
    3a84:	18cea504 	addi	r3,r3,14996
    3a88:	10c5883a 	add	r2,r2,r3
    3a8c:	11000017 	ldw	r4,0(r2)
    3a90:	2000683a 	jmp	r4
    3a94:	00003b80 	call	3b8 <audio_ISR+0x100>
    3a98:	00003b80 	call	3b8 <audio_ISR+0x100>
    3a9c:	00004580 	call	458 <audio_ISR+0x1a0>
    3aa0:	00004558 	cmpnei	zero,zero,277
    3aa4:	0000459c 	xori	zero,zero,278
    3aa8:	000045a8 	cmpgeui	zero,zero,278
    3aac:	d9002717 	ldw	r4,156(sp)
    3ab0:	0089c3c4 	movi	r2,9999
    3ab4:	20800015 	stw	r2,0(r4)
    3ab8:	a0001026 	beq	r20,zero,3afc <_dtoa_r+0x31c>
    3abc:	00c00074 	movhi	r3,1
    3ac0:	18c66e04 	addi	r3,r3,6584
    3ac4:	d9802917 	ldw	r6,164(sp)
    3ac8:	303f7926 	beq	r6,zero,38b0 <_dtoa_r+0xd0>
    3acc:	188000c7 	ldb	r2,3(r3)
    3ad0:	190000c4 	addi	r4,r3,3
    3ad4:	1000101e 	bne	r2,zero,3b18 <_dtoa_r+0x338>
    3ad8:	d8802917 	ldw	r2,164(sp)
    3adc:	11000015 	stw	r4,0(r2)
    3ae0:	003f7306 	br	38b0 <_dtoa_r+0xd0>
    3ae4:	00a00034 	movhi	r2,32768
    3ae8:	10bfffc4 	addi	r2,r2,-1
    3aec:	00c00044 	movi	r3,1
    3af0:	88aa703a 	and	r21,r17,r2
    3af4:	90c00015 	stw	r3,0(r18)
    3af8:	003f5806 	br	385c <_dtoa_r+0x7c>
    3afc:	00800434 	movhi	r2,16
    3b00:	10bfffc4 	addi	r2,r2,-1
    3b04:	a884703a 	and	r2,r21,r2
    3b08:	103fec1e 	bne	r2,zero,3abc <_dtoa_r+0x2dc>
    3b0c:	00c00074 	movhi	r3,1
    3b10:	18c66b04 	addi	r3,r3,6572
    3b14:	003feb06 	br	3ac4 <_dtoa_r+0x2e4>
    3b18:	d8802917 	ldw	r2,164(sp)
    3b1c:	19000204 	addi	r4,r3,8
    3b20:	11000015 	stw	r4,0(r2)
    3b24:	003f6206 	br	38b0 <_dtoa_r+0xd0>
    3b28:	ddc00117 	ldw	r23,4(sp)
    3b2c:	d8800217 	ldw	r2,8(sp)
    3b30:	01000804 	movi	r4,32
    3b34:	b8c10c84 	addi	r3,r23,1074
    3b38:	18a3883a 	add	r17,r3,r2
    3b3c:	2441b80e 	bge	r4,r17,4220 <_dtoa_r+0xa40>
    3b40:	00c01004 	movi	r3,64
    3b44:	1c47c83a 	sub	r3,r3,r17
    3b48:	88bff804 	addi	r2,r17,-32
    3b4c:	a8c6983a 	sll	r3,r21,r3
    3b50:	a084d83a 	srl	r2,r20,r2
    3b54:	1888b03a 	or	r4,r3,r2
    3b58:	000a1380 	call	a138 <__floatunsidf>
    3b5c:	1011883a 	mov	r8,r2
    3b60:	00bf8434 	movhi	r2,65040
    3b64:	01000044 	movi	r4,1
    3b68:	10d3883a 	add	r9,r2,r3
    3b6c:	8dbef344 	addi	r22,r17,-1075
    3b70:	d9000815 	stw	r4,32(sp)
    3b74:	003f6f06 	br	3934 <_dtoa_r+0x154>
    3b78:	d8001715 	stw	zero,92(sp)
    3b7c:	04400044 	movi	r17,1
    3b80:	00bfffc4 	movi	r2,-1
    3b84:	00c00044 	movi	r3,1
    3b88:	d8800e15 	stw	r2,56(sp)
    3b8c:	d8002615 	stw	zero,152(sp)
    3b90:	d8800f15 	stw	r2,60(sp)
    3b94:	d8c00b15 	stw	r3,44(sp)
    3b98:	1021883a 	mov	r16,r2
    3b9c:	d8801617 	ldw	r2,88(sp)
    3ba0:	10001115 	stw	zero,68(r2)
    3ba4:	d8801617 	ldw	r2,88(sp)
    3ba8:	11401117 	ldw	r5,68(r2)
    3bac:	1009883a 	mov	r4,r2
    3bb0:	0006dbc0 	call	6dbc <_Balloc>
    3bb4:	d8c01617 	ldw	r3,88(sp)
    3bb8:	d8800515 	stw	r2,20(sp)
    3bbc:	18801015 	stw	r2,64(r3)
    3bc0:	00800384 	movi	r2,14
    3bc4:	14006836 	bltu	r2,r16,3d68 <_dtoa_r+0x588>
    3bc8:	8805003a 	cmpeq	r2,r17,zero
    3bcc:	1000661e 	bne	r2,zero,3d68 <_dtoa_r+0x588>
    3bd0:	d9000d17 	ldw	r4,52(sp)
    3bd4:	0102300e 	bge	zero,r4,4498 <_dtoa_r+0xcb8>
    3bd8:	208003cc 	andi	r2,r4,15
    3bdc:	100490fa 	slli	r2,r2,3
    3be0:	2025d13a 	srai	r18,r4,4
    3be4:	00c00074 	movhi	r3,1
    3be8:	18c68004 	addi	r3,r3,6656
    3bec:	10c5883a 	add	r2,r2,r3
    3bf0:	90c0040c 	andi	r3,r18,16
    3bf4:	14000017 	ldw	r16,0(r2)
    3bf8:	14400117 	ldw	r17,4(r2)
    3bfc:	18036a1e 	bne	r3,zero,49a8 <_dtoa_r+0x11c8>
    3c00:	05800084 	movi	r22,2
    3c04:	90001026 	beq	r18,zero,3c48 <_dtoa_r+0x468>
    3c08:	04c00074 	movhi	r19,1
    3c0c:	9cc6b204 	addi	r19,r19,6856
    3c10:	9080004c 	andi	r2,r18,1
    3c14:	1005003a 	cmpeq	r2,r2,zero
    3c18:	1000081e 	bne	r2,zero,3c3c <_dtoa_r+0x45c>
    3c1c:	99800017 	ldw	r6,0(r19)
    3c20:	99c00117 	ldw	r7,4(r19)
    3c24:	880b883a 	mov	r5,r17
    3c28:	8009883a 	mov	r4,r16
    3c2c:	00096a40 	call	96a4 <__muldf3>
    3c30:	1021883a 	mov	r16,r2
    3c34:	b5800044 	addi	r22,r22,1
    3c38:	1823883a 	mov	r17,r3
    3c3c:	9025d07a 	srai	r18,r18,1
    3c40:	9cc00204 	addi	r19,r19,8
    3c44:	903ff21e 	bne	r18,zero,3c10 <_dtoa_r+0x430>
    3c48:	a80b883a 	mov	r5,r21
    3c4c:	a009883a 	mov	r4,r20
    3c50:	880f883a 	mov	r7,r17
    3c54:	800d883a 	mov	r6,r16
    3c58:	0009a680 	call	9a68 <__divdf3>
    3c5c:	1029883a 	mov	r20,r2
    3c60:	182b883a 	mov	r21,r3
    3c64:	d8c00c17 	ldw	r3,48(sp)
    3c68:	1805003a 	cmpeq	r2,r3,zero
    3c6c:	1000081e 	bne	r2,zero,3c90 <_dtoa_r+0x4b0>
    3c70:	0005883a 	mov	r2,zero
    3c74:	00cffc34 	movhi	r3,16368
    3c78:	180f883a 	mov	r7,r3
    3c7c:	a009883a 	mov	r4,r20
    3c80:	a80b883a 	mov	r5,r21
    3c84:	100d883a 	mov	r6,r2
    3c88:	0009ee00 	call	9ee0 <__ltdf2>
    3c8c:	1003fe16 	blt	r2,zero,4c88 <_dtoa_r+0x14a8>
    3c90:	b009883a 	mov	r4,r22
    3c94:	0009f680 	call	9f68 <__floatsidf>
    3c98:	180b883a 	mov	r5,r3
    3c9c:	1009883a 	mov	r4,r2
    3ca0:	a00d883a 	mov	r6,r20
    3ca4:	a80f883a 	mov	r7,r21
    3ca8:	00096a40 	call	96a4 <__muldf3>
    3cac:	0011883a 	mov	r8,zero
    3cb0:	02500734 	movhi	r9,16412
    3cb4:	1009883a 	mov	r4,r2
    3cb8:	180b883a 	mov	r5,r3
    3cbc:	480f883a 	mov	r7,r9
    3cc0:	400d883a 	mov	r6,r8
    3cc4:	00096300 	call	9630 <__adddf3>
    3cc8:	d9000f17 	ldw	r4,60(sp)
    3ccc:	102d883a 	mov	r22,r2
    3cd0:	00bf3034 	movhi	r2,64704
    3cd4:	18b9883a 	add	fp,r3,r2
    3cd8:	e02f883a 	mov	r23,fp
    3cdc:	20028f1e 	bne	r4,zero,471c <_dtoa_r+0xf3c>
    3ce0:	0005883a 	mov	r2,zero
    3ce4:	00d00534 	movhi	r3,16404
    3ce8:	a009883a 	mov	r4,r20
    3cec:	a80b883a 	mov	r5,r21
    3cf0:	180f883a 	mov	r7,r3
    3cf4:	100d883a 	mov	r6,r2
    3cf8:	00095b00 	call	95b0 <__subdf3>
    3cfc:	1009883a 	mov	r4,r2
    3d00:	e00f883a 	mov	r7,fp
    3d04:	180b883a 	mov	r5,r3
    3d08:	b00d883a 	mov	r6,r22
    3d0c:	1025883a 	mov	r18,r2
    3d10:	1827883a 	mov	r19,r3
    3d14:	0009dd00 	call	9dd0 <__gtdf2>
    3d18:	00834f16 	blt	zero,r2,4a58 <_dtoa_r+0x1278>
    3d1c:	e0e0003c 	xorhi	r3,fp,32768
    3d20:	9009883a 	mov	r4,r18
    3d24:	980b883a 	mov	r5,r19
    3d28:	180f883a 	mov	r7,r3
    3d2c:	b00d883a 	mov	r6,r22
    3d30:	0009ee00 	call	9ee0 <__ltdf2>
    3d34:	1000080e 	bge	r2,zero,3d58 <_dtoa_r+0x578>
    3d38:	0027883a 	mov	r19,zero
    3d3c:	0025883a 	mov	r18,zero
    3d40:	d8802617 	ldw	r2,152(sp)
    3d44:	df000517 	ldw	fp,20(sp)
    3d48:	d8000615 	stw	zero,24(sp)
    3d4c:	0084303a 	nor	r2,zero,r2
    3d50:	d8800d15 	stw	r2,52(sp)
    3d54:	00019b06 	br	43c4 <_dtoa_r+0xbe4>
    3d58:	d9801217 	ldw	r6,72(sp)
    3d5c:	d8801317 	ldw	r2,76(sp)
    3d60:	3029883a 	mov	r20,r6
    3d64:	102b883a 	mov	r21,r2
    3d68:	d8c00217 	ldw	r3,8(sp)
    3d6c:	18008516 	blt	r3,zero,3f84 <_dtoa_r+0x7a4>
    3d70:	d9000d17 	ldw	r4,52(sp)
    3d74:	00800384 	movi	r2,14
    3d78:	11008216 	blt	r2,r4,3f84 <_dtoa_r+0x7a4>
    3d7c:	200490fa 	slli	r2,r4,3
    3d80:	d9802617 	ldw	r6,152(sp)
    3d84:	00c00074 	movhi	r3,1
    3d88:	18c68004 	addi	r3,r3,6656
    3d8c:	10c5883a 	add	r2,r2,r3
    3d90:	14800017 	ldw	r18,0(r2)
    3d94:	14c00117 	ldw	r19,4(r2)
    3d98:	30031e16 	blt	r6,zero,4a14 <_dtoa_r+0x1234>
    3d9c:	d9000517 	ldw	r4,20(sp)
    3da0:	d8c00f17 	ldw	r3,60(sp)
    3da4:	a823883a 	mov	r17,r21
    3da8:	a021883a 	mov	r16,r20
    3dac:	192b883a 	add	r21,r3,r4
    3db0:	2039883a 	mov	fp,r4
    3db4:	00000f06 	br	3df4 <_dtoa_r+0x614>
    3db8:	0005883a 	mov	r2,zero
    3dbc:	00d00934 	movhi	r3,16420
    3dc0:	5009883a 	mov	r4,r10
    3dc4:	580b883a 	mov	r5,r11
    3dc8:	180f883a 	mov	r7,r3
    3dcc:	100d883a 	mov	r6,r2
    3dd0:	00096a40 	call	96a4 <__muldf3>
    3dd4:	180b883a 	mov	r5,r3
    3dd8:	000d883a 	mov	r6,zero
    3ddc:	000f883a 	mov	r7,zero
    3de0:	1009883a 	mov	r4,r2
    3de4:	1021883a 	mov	r16,r2
    3de8:	1823883a 	mov	r17,r3
    3dec:	0009d480 	call	9d48 <__nedf2>
    3df0:	10004526 	beq	r2,zero,3f08 <_dtoa_r+0x728>
    3df4:	900d883a 	mov	r6,r18
    3df8:	980f883a 	mov	r7,r19
    3dfc:	8009883a 	mov	r4,r16
    3e00:	880b883a 	mov	r5,r17
    3e04:	0009a680 	call	9a68 <__divdf3>
    3e08:	180b883a 	mov	r5,r3
    3e0c:	1009883a 	mov	r4,r2
    3e10:	000a0600 	call	a060 <__fixdfsi>
    3e14:	1009883a 	mov	r4,r2
    3e18:	1029883a 	mov	r20,r2
    3e1c:	0009f680 	call	9f68 <__floatsidf>
    3e20:	180f883a 	mov	r7,r3
    3e24:	9009883a 	mov	r4,r18
    3e28:	980b883a 	mov	r5,r19
    3e2c:	100d883a 	mov	r6,r2
    3e30:	00096a40 	call	96a4 <__muldf3>
    3e34:	180f883a 	mov	r7,r3
    3e38:	880b883a 	mov	r5,r17
    3e3c:	8009883a 	mov	r4,r16
    3e40:	100d883a 	mov	r6,r2
    3e44:	00095b00 	call	95b0 <__subdf3>
    3e48:	1015883a 	mov	r10,r2
    3e4c:	a0800c04 	addi	r2,r20,48
    3e50:	e0800005 	stb	r2,0(fp)
    3e54:	e7000044 	addi	fp,fp,1
    3e58:	1817883a 	mov	r11,r3
    3e5c:	e57fd61e 	bne	fp,r21,3db8 <_dtoa_r+0x5d8>
    3e60:	500d883a 	mov	r6,r10
    3e64:	180f883a 	mov	r7,r3
    3e68:	5009883a 	mov	r4,r10
    3e6c:	180b883a 	mov	r5,r3
    3e70:	00096300 	call	9630 <__adddf3>
    3e74:	100d883a 	mov	r6,r2
    3e78:	9009883a 	mov	r4,r18
    3e7c:	980b883a 	mov	r5,r19
    3e80:	180f883a 	mov	r7,r3
    3e84:	1021883a 	mov	r16,r2
    3e88:	1823883a 	mov	r17,r3
    3e8c:	0009ee00 	call	9ee0 <__ltdf2>
    3e90:	10000816 	blt	r2,zero,3eb4 <_dtoa_r+0x6d4>
    3e94:	980b883a 	mov	r5,r19
    3e98:	800d883a 	mov	r6,r16
    3e9c:	880f883a 	mov	r7,r17
    3ea0:	9009883a 	mov	r4,r18
    3ea4:	0009cc00 	call	9cc0 <__eqdf2>
    3ea8:	1000171e 	bne	r2,zero,3f08 <_dtoa_r+0x728>
    3eac:	a080004c 	andi	r2,r20,1
    3eb0:	10001526 	beq	r2,zero,3f08 <_dtoa_r+0x728>
    3eb4:	d8800d17 	ldw	r2,52(sp)
    3eb8:	d8800415 	stw	r2,16(sp)
    3ebc:	e009883a 	mov	r4,fp
    3ec0:	213fffc4 	addi	r4,r4,-1
    3ec4:	20c00007 	ldb	r3,0(r4)
    3ec8:	00800e44 	movi	r2,57
    3ecc:	1880081e 	bne	r3,r2,3ef0 <_dtoa_r+0x710>
    3ed0:	d8800517 	ldw	r2,20(sp)
    3ed4:	113ffa1e 	bne	r2,r4,3ec0 <_dtoa_r+0x6e0>
    3ed8:	d8c00417 	ldw	r3,16(sp)
    3edc:	d9800517 	ldw	r6,20(sp)
    3ee0:	00800c04 	movi	r2,48
    3ee4:	18c00044 	addi	r3,r3,1
    3ee8:	d8c00415 	stw	r3,16(sp)
    3eec:	30800005 	stb	r2,0(r6)
    3ef0:	20800003 	ldbu	r2,0(r4)
    3ef4:	d8c00417 	ldw	r3,16(sp)
    3ef8:	27000044 	addi	fp,r4,1
    3efc:	10800044 	addi	r2,r2,1
    3f00:	d8c00d15 	stw	r3,52(sp)
    3f04:	20800005 	stb	r2,0(r4)
    3f08:	d9001617 	ldw	r4,88(sp)
    3f0c:	d9400717 	ldw	r5,28(sp)
    3f10:	000683c0 	call	683c <_Bfree>
    3f14:	e0000005 	stb	zero,0(fp)
    3f18:	d9800d17 	ldw	r6,52(sp)
    3f1c:	d8c02717 	ldw	r3,156(sp)
    3f20:	d9002917 	ldw	r4,164(sp)
    3f24:	30800044 	addi	r2,r6,1
    3f28:	18800015 	stw	r2,0(r3)
    3f2c:	20029c26 	beq	r4,zero,49a0 <_dtoa_r+0x11c0>
    3f30:	d8c00517 	ldw	r3,20(sp)
    3f34:	27000015 	stw	fp,0(r4)
    3f38:	003e5d06 	br	38b0 <_dtoa_r+0xd0>
    3f3c:	d9800d17 	ldw	r6,52(sp)
    3f40:	00c00074 	movhi	r3,1
    3f44:	18c68004 	addi	r3,r3,6656
    3f48:	d9001217 	ldw	r4,72(sp)
    3f4c:	300490fa 	slli	r2,r6,3
    3f50:	d9401317 	ldw	r5,76(sp)
    3f54:	10c5883a 	add	r2,r2,r3
    3f58:	12000017 	ldw	r8,0(r2)
    3f5c:	12400117 	ldw	r9,4(r2)
    3f60:	400d883a 	mov	r6,r8
    3f64:	480f883a 	mov	r7,r9
    3f68:	0009ee00 	call	9ee0 <__ltdf2>
    3f6c:	1000030e 	bge	r2,zero,3f7c <_dtoa_r+0x79c>
    3f70:	d8800d17 	ldw	r2,52(sp)
    3f74:	10bfffc4 	addi	r2,r2,-1
    3f78:	d8800d15 	stw	r2,52(sp)
    3f7c:	d8000c15 	stw	zero,48(sp)
    3f80:	003ea806 	br	3a24 <_dtoa_r+0x244>
    3f84:	d9000b17 	ldw	r4,44(sp)
    3f88:	202cc03a 	cmpne	r22,r4,zero
    3f8c:	b000c71e 	bne	r22,zero,42ac <_dtoa_r+0xacc>
    3f90:	dc001117 	ldw	r16,68(sp)
    3f94:	dc801017 	ldw	r18,64(sp)
    3f98:	0027883a 	mov	r19,zero
    3f9c:	04000b0e 	bge	zero,r16,3fcc <_dtoa_r+0x7ec>
    3fa0:	d8c00a17 	ldw	r3,40(sp)
    3fa4:	00c0090e 	bge	zero,r3,3fcc <_dtoa_r+0x7ec>
    3fa8:	8005883a 	mov	r2,r16
    3fac:	1c011316 	blt	r3,r16,43fc <_dtoa_r+0xc1c>
    3fb0:	d9000a17 	ldw	r4,40(sp)
    3fb4:	d9801117 	ldw	r6,68(sp)
    3fb8:	80a1c83a 	sub	r16,r16,r2
    3fbc:	2089c83a 	sub	r4,r4,r2
    3fc0:	308dc83a 	sub	r6,r6,r2
    3fc4:	d9000a15 	stw	r4,40(sp)
    3fc8:	d9801115 	stw	r6,68(sp)
    3fcc:	d8801017 	ldw	r2,64(sp)
    3fd0:	0080150e 	bge	zero,r2,4028 <_dtoa_r+0x848>
    3fd4:	d8c00b17 	ldw	r3,44(sp)
    3fd8:	1805003a 	cmpeq	r2,r3,zero
    3fdc:	1001c91e 	bne	r2,zero,4704 <_dtoa_r+0xf24>
    3fe0:	04800e0e 	bge	zero,r18,401c <_dtoa_r+0x83c>
    3fe4:	d9001617 	ldw	r4,88(sp)
    3fe8:	980b883a 	mov	r5,r19
    3fec:	900d883a 	mov	r6,r18
    3ff0:	00075f00 	call	75f0 <__pow5mult>
    3ff4:	d9001617 	ldw	r4,88(sp)
    3ff8:	d9800717 	ldw	r6,28(sp)
    3ffc:	100b883a 	mov	r5,r2
    4000:	1027883a 	mov	r19,r2
    4004:	00072cc0 	call	72cc <__multiply>
    4008:	d9001617 	ldw	r4,88(sp)
    400c:	d9400717 	ldw	r5,28(sp)
    4010:	1023883a 	mov	r17,r2
    4014:	000683c0 	call	683c <_Bfree>
    4018:	dc400715 	stw	r17,28(sp)
    401c:	d9001017 	ldw	r4,64(sp)
    4020:	248dc83a 	sub	r6,r4,r18
    4024:	30010e1e 	bne	r6,zero,4460 <_dtoa_r+0xc80>
    4028:	d9001617 	ldw	r4,88(sp)
    402c:	04400044 	movi	r17,1
    4030:	880b883a 	mov	r5,r17
    4034:	00074b40 	call	74b4 <__i2b>
    4038:	d9800917 	ldw	r6,36(sp)
    403c:	1025883a 	mov	r18,r2
    4040:	0180040e 	bge	zero,r6,4054 <_dtoa_r+0x874>
    4044:	d9001617 	ldw	r4,88(sp)
    4048:	100b883a 	mov	r5,r2
    404c:	00075f00 	call	75f0 <__pow5mult>
    4050:	1025883a 	mov	r18,r2
    4054:	d8801717 	ldw	r2,92(sp)
    4058:	8880f30e 	bge	r17,r2,4428 <_dtoa_r+0xc48>
    405c:	0023883a 	mov	r17,zero
    4060:	d9800917 	ldw	r6,36(sp)
    4064:	30019e1e 	bne	r6,zero,46e0 <_dtoa_r+0xf00>
    4068:	00c00044 	movi	r3,1
    406c:	d9000a17 	ldw	r4,40(sp)
    4070:	20c5883a 	add	r2,r4,r3
    4074:	10c007cc 	andi	r3,r2,31
    4078:	1800841e 	bne	r3,zero,428c <_dtoa_r+0xaac>
    407c:	00800704 	movi	r2,28
    4080:	d9000a17 	ldw	r4,40(sp)
    4084:	d9801117 	ldw	r6,68(sp)
    4088:	80a1883a 	add	r16,r16,r2
    408c:	2089883a 	add	r4,r4,r2
    4090:	308d883a 	add	r6,r6,r2
    4094:	d9000a15 	stw	r4,40(sp)
    4098:	d9801115 	stw	r6,68(sp)
    409c:	d8801117 	ldw	r2,68(sp)
    40a0:	0080050e 	bge	zero,r2,40b8 <_dtoa_r+0x8d8>
    40a4:	d9400717 	ldw	r5,28(sp)
    40a8:	d9001617 	ldw	r4,88(sp)
    40ac:	100d883a 	mov	r6,r2
    40b0:	00071800 	call	7180 <__lshift>
    40b4:	d8800715 	stw	r2,28(sp)
    40b8:	d8c00a17 	ldw	r3,40(sp)
    40bc:	00c0050e 	bge	zero,r3,40d4 <_dtoa_r+0x8f4>
    40c0:	d9001617 	ldw	r4,88(sp)
    40c4:	900b883a 	mov	r5,r18
    40c8:	180d883a 	mov	r6,r3
    40cc:	00071800 	call	7180 <__lshift>
    40d0:	1025883a 	mov	r18,r2
    40d4:	d9000c17 	ldw	r4,48(sp)
    40d8:	2005003a 	cmpeq	r2,r4,zero
    40dc:	10016f26 	beq	r2,zero,469c <_dtoa_r+0xebc>
    40e0:	d9000f17 	ldw	r4,60(sp)
    40e4:	0102170e 	bge	zero,r4,4944 <_dtoa_r+0x1164>
    40e8:	d9800b17 	ldw	r6,44(sp)
    40ec:	3005003a 	cmpeq	r2,r6,zero
    40f0:	1000881e 	bne	r2,zero,4314 <_dtoa_r+0xb34>
    40f4:	0400050e 	bge	zero,r16,410c <_dtoa_r+0x92c>
    40f8:	d9001617 	ldw	r4,88(sp)
    40fc:	980b883a 	mov	r5,r19
    4100:	800d883a 	mov	r6,r16
    4104:	00071800 	call	7180 <__lshift>
    4108:	1027883a 	mov	r19,r2
    410c:	8804c03a 	cmpne	r2,r17,zero
    4110:	1002541e 	bne	r2,zero,4a64 <_dtoa_r+0x1284>
    4114:	980b883a 	mov	r5,r19
    4118:	dd800517 	ldw	r22,20(sp)
    411c:	dcc00615 	stw	r19,24(sp)
    4120:	a700004c 	andi	fp,r20,1
    4124:	2827883a 	mov	r19,r5
    4128:	d9000717 	ldw	r4,28(sp)
    412c:	900b883a 	mov	r5,r18
    4130:	00035c80 	call	35c8 <quorem>
    4134:	d9000717 	ldw	r4,28(sp)
    4138:	d9400617 	ldw	r5,24(sp)
    413c:	1023883a 	mov	r17,r2
    4140:	8dc00c04 	addi	r23,r17,48
    4144:	00069980 	call	6998 <__mcmp>
    4148:	d9001617 	ldw	r4,88(sp)
    414c:	900b883a 	mov	r5,r18
    4150:	980d883a 	mov	r6,r19
    4154:	1029883a 	mov	r20,r2
    4158:	0006ff40 	call	6ff4 <__mdiff>
    415c:	102b883a 	mov	r21,r2
    4160:	10800317 	ldw	r2,12(r2)
    4164:	1001281e 	bne	r2,zero,4608 <_dtoa_r+0xe28>
    4168:	d9000717 	ldw	r4,28(sp)
    416c:	a80b883a 	mov	r5,r21
    4170:	00069980 	call	6998 <__mcmp>
    4174:	d9001617 	ldw	r4,88(sp)
    4178:	1021883a 	mov	r16,r2
    417c:	a80b883a 	mov	r5,r21
    4180:	000683c0 	call	683c <_Bfree>
    4184:	8000041e 	bne	r16,zero,4198 <_dtoa_r+0x9b8>
    4188:	d8801717 	ldw	r2,92(sp)
    418c:	1000021e 	bne	r2,zero,4198 <_dtoa_r+0x9b8>
    4190:	e004c03a 	cmpne	r2,fp,zero
    4194:	10011726 	beq	r2,zero,45f4 <_dtoa_r+0xe14>
    4198:	a0010616 	blt	r20,zero,45b4 <_dtoa_r+0xdd4>
    419c:	a000041e 	bne	r20,zero,41b0 <_dtoa_r+0x9d0>
    41a0:	d8c01717 	ldw	r3,92(sp)
    41a4:	1800021e 	bne	r3,zero,41b0 <_dtoa_r+0x9d0>
    41a8:	e004c03a 	cmpne	r2,fp,zero
    41ac:	10010126 	beq	r2,zero,45b4 <_dtoa_r+0xdd4>
    41b0:	04023d16 	blt	zero,r16,4aa8 <_dtoa_r+0x12c8>
    41b4:	b5c00005 	stb	r23,0(r22)
    41b8:	d9800517 	ldw	r6,20(sp)
    41bc:	d9000f17 	ldw	r4,60(sp)
    41c0:	b5800044 	addi	r22,r22,1
    41c4:	3105883a 	add	r2,r6,r4
    41c8:	b0806526 	beq	r22,r2,4360 <_dtoa_r+0xb80>
    41cc:	d9400717 	ldw	r5,28(sp)
    41d0:	d9001617 	ldw	r4,88(sp)
    41d4:	01800284 	movi	r6,10
    41d8:	000f883a 	mov	r7,zero
    41dc:	00074f00 	call	74f0 <__multadd>
    41e0:	d8800715 	stw	r2,28(sp)
    41e4:	d8800617 	ldw	r2,24(sp)
    41e8:	14c10c26 	beq	r2,r19,461c <_dtoa_r+0xe3c>
    41ec:	d9400617 	ldw	r5,24(sp)
    41f0:	d9001617 	ldw	r4,88(sp)
    41f4:	01800284 	movi	r6,10
    41f8:	000f883a 	mov	r7,zero
    41fc:	00074f00 	call	74f0 <__multadd>
    4200:	d9001617 	ldw	r4,88(sp)
    4204:	980b883a 	mov	r5,r19
    4208:	01800284 	movi	r6,10
    420c:	000f883a 	mov	r7,zero
    4210:	d8800615 	stw	r2,24(sp)
    4214:	00074f00 	call	74f0 <__multadd>
    4218:	1027883a 	mov	r19,r2
    421c:	003fc206 	br	4128 <_dtoa_r+0x948>
    4220:	2445c83a 	sub	r2,r4,r17
    4224:	a088983a 	sll	r4,r20,r2
    4228:	003e4b06 	br	3b58 <_dtoa_r+0x378>
    422c:	01bfffc4 	movi	r6,-1
    4230:	00800044 	movi	r2,1
    4234:	d9800e15 	stw	r6,56(sp)
    4238:	d9800f15 	stw	r6,60(sp)
    423c:	d8800b15 	stw	r2,44(sp)
    4240:	d8c01617 	ldw	r3,88(sp)
    4244:	008005c4 	movi	r2,23
    4248:	18001115 	stw	zero,68(r3)
    424c:	1580082e 	bgeu	r2,r22,4270 <_dtoa_r+0xa90>
    4250:	00c00104 	movi	r3,4
    4254:	0009883a 	mov	r4,zero
    4258:	18c7883a 	add	r3,r3,r3
    425c:	18800504 	addi	r2,r3,20
    4260:	21000044 	addi	r4,r4,1
    4264:	b0bffc2e 	bgeu	r22,r2,4258 <_dtoa_r+0xa78>
    4268:	d9801617 	ldw	r6,88(sp)
    426c:	31001115 	stw	r4,68(r6)
    4270:	dc000f17 	ldw	r16,60(sp)
    4274:	003e4b06 	br	3ba4 <_dtoa_r+0x3c4>
    4278:	d9801717 	ldw	r6,92(sp)
    427c:	0023883a 	mov	r17,zero
    4280:	31bfff04 	addi	r6,r6,-4
    4284:	d9801715 	stw	r6,92(sp)
    4288:	003df806 	br	3a6c <_dtoa_r+0x28c>
    428c:	00800804 	movi	r2,32
    4290:	10c9c83a 	sub	r4,r2,r3
    4294:	00c00104 	movi	r3,4
    4298:	19005a16 	blt	r3,r4,4404 <_dtoa_r+0xc24>
    429c:	008000c4 	movi	r2,3
    42a0:	113f7e16 	blt	r2,r4,409c <_dtoa_r+0x8bc>
    42a4:	20800704 	addi	r2,r4,28
    42a8:	003f7506 	br	4080 <_dtoa_r+0x8a0>
    42ac:	d9801717 	ldw	r6,92(sp)
    42b0:	00800044 	movi	r2,1
    42b4:	1180a10e 	bge	r2,r6,453c <_dtoa_r+0xd5c>
    42b8:	d9800f17 	ldw	r6,60(sp)
    42bc:	d8c01017 	ldw	r3,64(sp)
    42c0:	30bfffc4 	addi	r2,r6,-1
    42c4:	1881c616 	blt	r3,r2,49e0 <_dtoa_r+0x1200>
    42c8:	18a5c83a 	sub	r18,r3,r2
    42cc:	d8800f17 	ldw	r2,60(sp)
    42d0:	10026216 	blt	r2,zero,4c5c <_dtoa_r+0x147c>
    42d4:	dc001117 	ldw	r16,68(sp)
    42d8:	1007883a 	mov	r3,r2
    42dc:	d9800a17 	ldw	r6,40(sp)
    42e0:	d8801117 	ldw	r2,68(sp)
    42e4:	d9001617 	ldw	r4,88(sp)
    42e8:	30cd883a 	add	r6,r6,r3
    42ec:	10c5883a 	add	r2,r2,r3
    42f0:	01400044 	movi	r5,1
    42f4:	d9800a15 	stw	r6,40(sp)
    42f8:	d8801115 	stw	r2,68(sp)
    42fc:	00074b40 	call	74b4 <__i2b>
    4300:	1027883a 	mov	r19,r2
    4304:	003f2506 	br	3f9c <_dtoa_r+0x7bc>
    4308:	00c00074 	movhi	r3,1
    430c:	18c66204 	addi	r3,r3,6536
    4310:	003d6706 	br	38b0 <_dtoa_r+0xd0>
    4314:	dd800517 	ldw	r22,20(sp)
    4318:	04000044 	movi	r16,1
    431c:	00000706 	br	433c <_dtoa_r+0xb5c>
    4320:	d9400717 	ldw	r5,28(sp)
    4324:	d9001617 	ldw	r4,88(sp)
    4328:	01800284 	movi	r6,10
    432c:	000f883a 	mov	r7,zero
    4330:	00074f00 	call	74f0 <__multadd>
    4334:	d8800715 	stw	r2,28(sp)
    4338:	84000044 	addi	r16,r16,1
    433c:	d9000717 	ldw	r4,28(sp)
    4340:	900b883a 	mov	r5,r18
    4344:	00035c80 	call	35c8 <quorem>
    4348:	15c00c04 	addi	r23,r2,48
    434c:	b5c00005 	stb	r23,0(r22)
    4350:	d8c00f17 	ldw	r3,60(sp)
    4354:	b5800044 	addi	r22,r22,1
    4358:	80fff116 	blt	r16,r3,4320 <_dtoa_r+0xb40>
    435c:	d8000615 	stw	zero,24(sp)
    4360:	d9400717 	ldw	r5,28(sp)
    4364:	d9001617 	ldw	r4,88(sp)
    4368:	01800044 	movi	r6,1
    436c:	00071800 	call	7180 <__lshift>
    4370:	1009883a 	mov	r4,r2
    4374:	900b883a 	mov	r5,r18
    4378:	d8800715 	stw	r2,28(sp)
    437c:	00069980 	call	6998 <__mcmp>
    4380:	00803c0e 	bge	zero,r2,4474 <_dtoa_r+0xc94>
    4384:	b009883a 	mov	r4,r22
    4388:	213fffc4 	addi	r4,r4,-1
    438c:	21400003 	ldbu	r5,0(r4)
    4390:	00800e44 	movi	r2,57
    4394:	28c03fcc 	andi	r3,r5,255
    4398:	18c0201c 	xori	r3,r3,128
    439c:	18ffe004 	addi	r3,r3,-128
    43a0:	1881981e 	bne	r3,r2,4a04 <_dtoa_r+0x1224>
    43a4:	d9800517 	ldw	r6,20(sp)
    43a8:	21bff71e 	bne	r4,r6,4388 <_dtoa_r+0xba8>
    43ac:	d8800d17 	ldw	r2,52(sp)
    43b0:	37000044 	addi	fp,r6,1
    43b4:	10800044 	addi	r2,r2,1
    43b8:	d8800d15 	stw	r2,52(sp)
    43bc:	00800c44 	movi	r2,49
    43c0:	30800005 	stb	r2,0(r6)
    43c4:	d9001617 	ldw	r4,88(sp)
    43c8:	900b883a 	mov	r5,r18
    43cc:	000683c0 	call	683c <_Bfree>
    43d0:	983ecd26 	beq	r19,zero,3f08 <_dtoa_r+0x728>
    43d4:	d8c00617 	ldw	r3,24(sp)
    43d8:	18000426 	beq	r3,zero,43ec <_dtoa_r+0xc0c>
    43dc:	1cc00326 	beq	r3,r19,43ec <_dtoa_r+0xc0c>
    43e0:	d9001617 	ldw	r4,88(sp)
    43e4:	180b883a 	mov	r5,r3
    43e8:	000683c0 	call	683c <_Bfree>
    43ec:	d9001617 	ldw	r4,88(sp)
    43f0:	980b883a 	mov	r5,r19
    43f4:	000683c0 	call	683c <_Bfree>
    43f8:	003ec306 	br	3f08 <_dtoa_r+0x728>
    43fc:	1805883a 	mov	r2,r3
    4400:	003eeb06 	br	3fb0 <_dtoa_r+0x7d0>
    4404:	d9800a17 	ldw	r6,40(sp)
    4408:	d8c01117 	ldw	r3,68(sp)
    440c:	20bfff04 	addi	r2,r4,-4
    4410:	308d883a 	add	r6,r6,r2
    4414:	1887883a 	add	r3,r3,r2
    4418:	80a1883a 	add	r16,r16,r2
    441c:	d9800a15 	stw	r6,40(sp)
    4420:	d8c01115 	stw	r3,68(sp)
    4424:	003f1d06 	br	409c <_dtoa_r+0x8bc>
    4428:	a03f0c1e 	bne	r20,zero,405c <_dtoa_r+0x87c>
    442c:	00800434 	movhi	r2,16
    4430:	10bfffc4 	addi	r2,r2,-1
    4434:	a884703a 	and	r2,r21,r2
    4438:	103f081e 	bne	r2,zero,405c <_dtoa_r+0x87c>
    443c:	a89ffc2c 	andhi	r2,r21,32752
    4440:	103f0626 	beq	r2,zero,405c <_dtoa_r+0x87c>
    4444:	d8c01117 	ldw	r3,68(sp)
    4448:	d9000a17 	ldw	r4,40(sp)
    444c:	18c00044 	addi	r3,r3,1
    4450:	21000044 	addi	r4,r4,1
    4454:	d8c01115 	stw	r3,68(sp)
    4458:	d9000a15 	stw	r4,40(sp)
    445c:	003f0006 	br	4060 <_dtoa_r+0x880>
    4460:	d9400717 	ldw	r5,28(sp)
    4464:	d9001617 	ldw	r4,88(sp)
    4468:	00075f00 	call	75f0 <__pow5mult>
    446c:	d8800715 	stw	r2,28(sp)
    4470:	003eed06 	br	4028 <_dtoa_r+0x848>
    4474:	1000021e 	bne	r2,zero,4480 <_dtoa_r+0xca0>
    4478:	b880004c 	andi	r2,r23,1
    447c:	103fc11e 	bne	r2,zero,4384 <_dtoa_r+0xba4>
    4480:	b5bfffc4 	addi	r22,r22,-1
    4484:	b0c00007 	ldb	r3,0(r22)
    4488:	00800c04 	movi	r2,48
    448c:	18bffc26 	beq	r3,r2,4480 <_dtoa_r+0xca0>
    4490:	b7000044 	addi	fp,r22,1
    4494:	003fcb06 	br	43c4 <_dtoa_r+0xbe4>
    4498:	d9800d17 	ldw	r6,52(sp)
    449c:	018fc83a 	sub	r7,zero,r6
    44a0:	3801f726 	beq	r7,zero,4c80 <_dtoa_r+0x14a0>
    44a4:	398003cc 	andi	r6,r7,15
    44a8:	300c90fa 	slli	r6,r6,3
    44ac:	01400074 	movhi	r5,1
    44b0:	29468004 	addi	r5,r5,6656
    44b4:	d9001217 	ldw	r4,72(sp)
    44b8:	314d883a 	add	r6,r6,r5
    44bc:	30c00117 	ldw	r3,4(r6)
    44c0:	30800017 	ldw	r2,0(r6)
    44c4:	d9401317 	ldw	r5,76(sp)
    44c8:	3821d13a 	srai	r16,r7,4
    44cc:	100d883a 	mov	r6,r2
    44d0:	180f883a 	mov	r7,r3
    44d4:	00096a40 	call	96a4 <__muldf3>
    44d8:	1011883a 	mov	r8,r2
    44dc:	1813883a 	mov	r9,r3
    44e0:	1029883a 	mov	r20,r2
    44e4:	182b883a 	mov	r21,r3
    44e8:	8001e526 	beq	r16,zero,4c80 <_dtoa_r+0x14a0>
    44ec:	05800084 	movi	r22,2
    44f0:	04400074 	movhi	r17,1
    44f4:	8c46b204 	addi	r17,r17,6856
    44f8:	8080004c 	andi	r2,r16,1
    44fc:	1005003a 	cmpeq	r2,r2,zero
    4500:	1000081e 	bne	r2,zero,4524 <_dtoa_r+0xd44>
    4504:	89800017 	ldw	r6,0(r17)
    4508:	89c00117 	ldw	r7,4(r17)
    450c:	480b883a 	mov	r5,r9
    4510:	4009883a 	mov	r4,r8
    4514:	00096a40 	call	96a4 <__muldf3>
    4518:	1011883a 	mov	r8,r2
    451c:	b5800044 	addi	r22,r22,1
    4520:	1813883a 	mov	r9,r3
    4524:	8021d07a 	srai	r16,r16,1
    4528:	8c400204 	addi	r17,r17,8
    452c:	803ff21e 	bne	r16,zero,44f8 <_dtoa_r+0xd18>
    4530:	4029883a 	mov	r20,r8
    4534:	482b883a 	mov	r21,r9
    4538:	003dca06 	br	3c64 <_dtoa_r+0x484>
    453c:	d9000817 	ldw	r4,32(sp)
    4540:	2005003a 	cmpeq	r2,r4,zero
    4544:	1001f61e 	bne	r2,zero,4d20 <_dtoa_r+0x1540>
    4548:	dc001117 	ldw	r16,68(sp)
    454c:	dc801017 	ldw	r18,64(sp)
    4550:	18c10cc4 	addi	r3,r3,1075
    4554:	003f6106 	br	42dc <_dtoa_r+0xafc>
    4558:	d8000b15 	stw	zero,44(sp)
    455c:	d9802617 	ldw	r6,152(sp)
    4560:	d8c00d17 	ldw	r3,52(sp)
    4564:	30800044 	addi	r2,r6,1
    4568:	18ad883a 	add	r22,r3,r2
    456c:	b13fffc4 	addi	r4,r22,-1
    4570:	d9000e15 	stw	r4,56(sp)
    4574:	0581f60e 	bge	zero,r22,4d50 <_dtoa_r+0x1570>
    4578:	dd800f15 	stw	r22,60(sp)
    457c:	003f3006 	br	4240 <_dtoa_r+0xa60>
    4580:	d8000b15 	stw	zero,44(sp)
    4584:	d9002617 	ldw	r4,152(sp)
    4588:	0101eb0e 	bge	zero,r4,4d38 <_dtoa_r+0x1558>
    458c:	202d883a 	mov	r22,r4
    4590:	d9000e15 	stw	r4,56(sp)
    4594:	d9000f15 	stw	r4,60(sp)
    4598:	003f2906 	br	4240 <_dtoa_r+0xa60>
    459c:	01800044 	movi	r6,1
    45a0:	d9800b15 	stw	r6,44(sp)
    45a4:	003ff706 	br	4584 <_dtoa_r+0xda4>
    45a8:	01000044 	movi	r4,1
    45ac:	d9000b15 	stw	r4,44(sp)
    45b0:	003fea06 	br	455c <_dtoa_r+0xd7c>
    45b4:	04000c0e 	bge	zero,r16,45e8 <_dtoa_r+0xe08>
    45b8:	d9400717 	ldw	r5,28(sp)
    45bc:	d9001617 	ldw	r4,88(sp)
    45c0:	01800044 	movi	r6,1
    45c4:	00071800 	call	7180 <__lshift>
    45c8:	1009883a 	mov	r4,r2
    45cc:	900b883a 	mov	r5,r18
    45d0:	d8800715 	stw	r2,28(sp)
    45d4:	00069980 	call	6998 <__mcmp>
    45d8:	0081e00e 	bge	zero,r2,4d5c <_dtoa_r+0x157c>
    45dc:	bdc00044 	addi	r23,r23,1
    45e0:	00800e84 	movi	r2,58
    45e4:	b881a226 	beq	r23,r2,4c70 <_dtoa_r+0x1490>
    45e8:	b7000044 	addi	fp,r22,1
    45ec:	b5c00005 	stb	r23,0(r22)
    45f0:	003f7406 	br	43c4 <_dtoa_r+0xbe4>
    45f4:	00800e44 	movi	r2,57
    45f8:	b8819d26 	beq	r23,r2,4c70 <_dtoa_r+0x1490>
    45fc:	053ffa0e 	bge	zero,r20,45e8 <_dtoa_r+0xe08>
    4600:	8dc00c44 	addi	r23,r17,49
    4604:	003ff806 	br	45e8 <_dtoa_r+0xe08>
    4608:	d9001617 	ldw	r4,88(sp)
    460c:	a80b883a 	mov	r5,r21
    4610:	04000044 	movi	r16,1
    4614:	000683c0 	call	683c <_Bfree>
    4618:	003edf06 	br	4198 <_dtoa_r+0x9b8>
    461c:	d9001617 	ldw	r4,88(sp)
    4620:	980b883a 	mov	r5,r19
    4624:	01800284 	movi	r6,10
    4628:	000f883a 	mov	r7,zero
    462c:	00074f00 	call	74f0 <__multadd>
    4630:	1027883a 	mov	r19,r2
    4634:	d8800615 	stw	r2,24(sp)
    4638:	003ebb06 	br	4128 <_dtoa_r+0x948>
    463c:	d9801117 	ldw	r6,68(sp)
    4640:	d8800d17 	ldw	r2,52(sp)
    4644:	d8000915 	stw	zero,36(sp)
    4648:	308dc83a 	sub	r6,r6,r2
    464c:	0087c83a 	sub	r3,zero,r2
    4650:	d9801115 	stw	r6,68(sp)
    4654:	d8c01015 	stw	r3,64(sp)
    4658:	003cfe06 	br	3a54 <_dtoa_r+0x274>
    465c:	018dc83a 	sub	r6,zero,r6
    4660:	d9801115 	stw	r6,68(sp)
    4664:	d8000a15 	stw	zero,40(sp)
    4668:	003cf306 	br	3a38 <_dtoa_r+0x258>
    466c:	d9000d17 	ldw	r4,52(sp)
    4670:	0009f680 	call	9f68 <__floatsidf>
    4674:	880b883a 	mov	r5,r17
    4678:	8009883a 	mov	r4,r16
    467c:	180f883a 	mov	r7,r3
    4680:	100d883a 	mov	r6,r2
    4684:	0009d480 	call	9d48 <__nedf2>
    4688:	103ce126 	beq	r2,zero,3a10 <_dtoa_r+0x230>
    468c:	d9800d17 	ldw	r6,52(sp)
    4690:	31bfffc4 	addi	r6,r6,-1
    4694:	d9800d15 	stw	r6,52(sp)
    4698:	003cdd06 	br	3a10 <_dtoa_r+0x230>
    469c:	d9000717 	ldw	r4,28(sp)
    46a0:	900b883a 	mov	r5,r18
    46a4:	00069980 	call	6998 <__mcmp>
    46a8:	103e8d0e 	bge	r2,zero,40e0 <_dtoa_r+0x900>
    46ac:	d9400717 	ldw	r5,28(sp)
    46b0:	d9001617 	ldw	r4,88(sp)
    46b4:	01800284 	movi	r6,10
    46b8:	000f883a 	mov	r7,zero
    46bc:	00074f00 	call	74f0 <__multadd>
    46c0:	d9800d17 	ldw	r6,52(sp)
    46c4:	d8800715 	stw	r2,28(sp)
    46c8:	31bfffc4 	addi	r6,r6,-1
    46cc:	d9800d15 	stw	r6,52(sp)
    46d0:	b001a71e 	bne	r22,zero,4d70 <_dtoa_r+0x1590>
    46d4:	d8800e17 	ldw	r2,56(sp)
    46d8:	d8800f15 	stw	r2,60(sp)
    46dc:	003e8006 	br	40e0 <_dtoa_r+0x900>
    46e0:	90800417 	ldw	r2,16(r18)
    46e4:	1085883a 	add	r2,r2,r2
    46e8:	1085883a 	add	r2,r2,r2
    46ec:	1485883a 	add	r2,r2,r18
    46f0:	11000417 	ldw	r4,16(r2)
    46f4:	00068640 	call	6864 <__hi0bits>
    46f8:	00c00804 	movi	r3,32
    46fc:	1887c83a 	sub	r3,r3,r2
    4700:	003e5a06 	br	406c <_dtoa_r+0x88c>
    4704:	d9400717 	ldw	r5,28(sp)
    4708:	d9801017 	ldw	r6,64(sp)
    470c:	d9001617 	ldw	r4,88(sp)
    4710:	00075f00 	call	75f0 <__pow5mult>
    4714:	d8800715 	stw	r2,28(sp)
    4718:	003e4306 	br	4028 <_dtoa_r+0x848>
    471c:	d9800f17 	ldw	r6,60(sp)
    4720:	d8800d17 	ldw	r2,52(sp)
    4724:	d9800315 	stw	r6,12(sp)
    4728:	d8800415 	stw	r2,16(sp)
    472c:	d8c00b17 	ldw	r3,44(sp)
    4730:	1805003a 	cmpeq	r2,r3,zero
    4734:	1000e21e 	bne	r2,zero,4ac0 <_dtoa_r+0x12e0>
    4738:	d9000317 	ldw	r4,12(sp)
    473c:	0005883a 	mov	r2,zero
    4740:	00cff834 	movhi	r3,16352
    4744:	200c90fa 	slli	r6,r4,3
    4748:	01000074 	movhi	r4,1
    474c:	21068004 	addi	r4,r4,6656
    4750:	180b883a 	mov	r5,r3
    4754:	310d883a 	add	r6,r6,r4
    4758:	327fff17 	ldw	r9,-4(r6)
    475c:	323ffe17 	ldw	r8,-8(r6)
    4760:	1009883a 	mov	r4,r2
    4764:	480f883a 	mov	r7,r9
    4768:	400d883a 	mov	r6,r8
    476c:	0009a680 	call	9a68 <__divdf3>
    4770:	180b883a 	mov	r5,r3
    4774:	b00d883a 	mov	r6,r22
    4778:	b80f883a 	mov	r7,r23
    477c:	1009883a 	mov	r4,r2
    4780:	00095b00 	call	95b0 <__subdf3>
    4784:	a80b883a 	mov	r5,r21
    4788:	a009883a 	mov	r4,r20
    478c:	d8c01915 	stw	r3,100(sp)
    4790:	d8801815 	stw	r2,96(sp)
    4794:	000a0600 	call	a060 <__fixdfsi>
    4798:	1009883a 	mov	r4,r2
    479c:	1027883a 	mov	r19,r2
    47a0:	0009f680 	call	9f68 <__floatsidf>
    47a4:	a80b883a 	mov	r5,r21
    47a8:	a009883a 	mov	r4,r20
    47ac:	180f883a 	mov	r7,r3
    47b0:	100d883a 	mov	r6,r2
    47b4:	00095b00 	call	95b0 <__subdf3>
    47b8:	d9801817 	ldw	r6,96(sp)
    47bc:	1823883a 	mov	r17,r3
    47c0:	d8801415 	stw	r2,80(sp)
    47c4:	302d883a 	mov	r22,r6
    47c8:	d9800517 	ldw	r6,20(sp)
    47cc:	9cc00c04 	addi	r19,r19,48
    47d0:	dc401515 	stw	r17,84(sp)
    47d4:	d8c01917 	ldw	r3,100(sp)
    47d8:	34c00005 	stb	r19,0(r6)
    47dc:	d8800517 	ldw	r2,20(sp)
    47e0:	d9401917 	ldw	r5,100(sp)
    47e4:	d9801417 	ldw	r6,80(sp)
    47e8:	b009883a 	mov	r4,r22
    47ec:	880f883a 	mov	r7,r17
    47f0:	182f883a 	mov	r23,r3
    47f4:	17000044 	addi	fp,r2,1
    47f8:	0009dd00 	call	9dd0 <__gtdf2>
    47fc:	00804e16 	blt	zero,r2,4938 <_dtoa_r+0x1158>
    4800:	d9801417 	ldw	r6,80(sp)
    4804:	0005883a 	mov	r2,zero
    4808:	00cffc34 	movhi	r3,16368
    480c:	180b883a 	mov	r5,r3
    4810:	880f883a 	mov	r7,r17
    4814:	1009883a 	mov	r4,r2
    4818:	00095b00 	call	95b0 <__subdf3>
    481c:	d9401917 	ldw	r5,100(sp)
    4820:	180f883a 	mov	r7,r3
    4824:	b009883a 	mov	r4,r22
    4828:	100d883a 	mov	r6,r2
    482c:	0009dd00 	call	9dd0 <__gtdf2>
    4830:	00bda216 	blt	zero,r2,3ebc <_dtoa_r+0x6dc>
    4834:	d8c00317 	ldw	r3,12(sp)
    4838:	00800044 	movi	r2,1
    483c:	10c01216 	blt	r2,r3,4888 <_dtoa_r+0x10a8>
    4840:	003d4506 	br	3d58 <_dtoa_r+0x578>
    4844:	d9801417 	ldw	r6,80(sp)
    4848:	0005883a 	mov	r2,zero
    484c:	00cffc34 	movhi	r3,16368
    4850:	180b883a 	mov	r5,r3
    4854:	880f883a 	mov	r7,r17
    4858:	1009883a 	mov	r4,r2
    485c:	00095b00 	call	95b0 <__subdf3>
    4860:	d9c01b17 	ldw	r7,108(sp)
    4864:	180b883a 	mov	r5,r3
    4868:	1009883a 	mov	r4,r2
    486c:	b00d883a 	mov	r6,r22
    4870:	0009ee00 	call	9ee0 <__ltdf2>
    4874:	103d9116 	blt	r2,zero,3ebc <_dtoa_r+0x6dc>
    4878:	d9800517 	ldw	r6,20(sp)
    487c:	d9000317 	ldw	r4,12(sp)
    4880:	3105883a 	add	r2,r6,r4
    4884:	e0bd3426 	beq	fp,r2,3d58 <_dtoa_r+0x578>
    4888:	04500934 	movhi	r17,16420
    488c:	0021883a 	mov	r16,zero
    4890:	b80b883a 	mov	r5,r23
    4894:	b009883a 	mov	r4,r22
    4898:	800d883a 	mov	r6,r16
    489c:	880f883a 	mov	r7,r17
    48a0:	00096a40 	call	96a4 <__muldf3>
    48a4:	d9401517 	ldw	r5,84(sp)
    48a8:	d9001417 	ldw	r4,80(sp)
    48ac:	880f883a 	mov	r7,r17
    48b0:	000d883a 	mov	r6,zero
    48b4:	d8801a15 	stw	r2,104(sp)
    48b8:	d8c01b15 	stw	r3,108(sp)
    48bc:	00096a40 	call	96a4 <__muldf3>
    48c0:	180b883a 	mov	r5,r3
    48c4:	1009883a 	mov	r4,r2
    48c8:	1823883a 	mov	r17,r3
    48cc:	1021883a 	mov	r16,r2
    48d0:	000a0600 	call	a060 <__fixdfsi>
    48d4:	1009883a 	mov	r4,r2
    48d8:	102b883a 	mov	r21,r2
    48dc:	0009f680 	call	9f68 <__floatsidf>
    48e0:	880b883a 	mov	r5,r17
    48e4:	8009883a 	mov	r4,r16
    48e8:	180f883a 	mov	r7,r3
    48ec:	100d883a 	mov	r6,r2
    48f0:	00095b00 	call	95b0 <__subdf3>
    48f4:	1021883a 	mov	r16,r2
    48f8:	d9001b17 	ldw	r4,108(sp)
    48fc:	1823883a 	mov	r17,r3
    4900:	dc001415 	stw	r16,80(sp)
    4904:	ad400c04 	addi	r21,r21,48
    4908:	dc401515 	stw	r17,84(sp)
    490c:	d8801a17 	ldw	r2,104(sp)
    4910:	e5400005 	stb	r21,0(fp)
    4914:	202f883a 	mov	r23,r4
    4918:	d9c01b17 	ldw	r7,108(sp)
    491c:	d9001417 	ldw	r4,80(sp)
    4920:	880b883a 	mov	r5,r17
    4924:	100d883a 	mov	r6,r2
    4928:	102d883a 	mov	r22,r2
    492c:	e7000044 	addi	fp,fp,1
    4930:	0009ee00 	call	9ee0 <__ltdf2>
    4934:	103fc30e 	bge	r2,zero,4844 <_dtoa_r+0x1064>
    4938:	d9000417 	ldw	r4,16(sp)
    493c:	d9000d15 	stw	r4,52(sp)
    4940:	003d7106 	br	3f08 <_dtoa_r+0x728>
    4944:	d9801717 	ldw	r6,92(sp)
    4948:	00800084 	movi	r2,2
    494c:	11bde60e 	bge	r2,r6,40e8 <_dtoa_r+0x908>
    4950:	203cfb1e 	bne	r4,zero,3d40 <_dtoa_r+0x560>
    4954:	d9001617 	ldw	r4,88(sp)
    4958:	900b883a 	mov	r5,r18
    495c:	01800144 	movi	r6,5
    4960:	000f883a 	mov	r7,zero
    4964:	00074f00 	call	74f0 <__multadd>
    4968:	d9000717 	ldw	r4,28(sp)
    496c:	100b883a 	mov	r5,r2
    4970:	1025883a 	mov	r18,r2
    4974:	00069980 	call	6998 <__mcmp>
    4978:	00bcf10e 	bge	zero,r2,3d40 <_dtoa_r+0x560>
    497c:	d8c00d17 	ldw	r3,52(sp)
    4980:	d9000517 	ldw	r4,20(sp)
    4984:	d8000615 	stw	zero,24(sp)
    4988:	18c00044 	addi	r3,r3,1
    498c:	d8c00d15 	stw	r3,52(sp)
    4990:	00800c44 	movi	r2,49
    4994:	27000044 	addi	fp,r4,1
    4998:	20800005 	stb	r2,0(r4)
    499c:	003e8906 	br	43c4 <_dtoa_r+0xbe4>
    49a0:	d8c00517 	ldw	r3,20(sp)
    49a4:	003bc206 	br	38b0 <_dtoa_r+0xd0>
    49a8:	01800074 	movhi	r6,1
    49ac:	3186b204 	addi	r6,r6,6856
    49b0:	30c00917 	ldw	r3,36(r6)
    49b4:	30800817 	ldw	r2,32(r6)
    49b8:	d9001217 	ldw	r4,72(sp)
    49bc:	d9401317 	ldw	r5,76(sp)
    49c0:	180f883a 	mov	r7,r3
    49c4:	100d883a 	mov	r6,r2
    49c8:	0009a680 	call	9a68 <__divdf3>
    49cc:	948003cc 	andi	r18,r18,15
    49d0:	058000c4 	movi	r22,3
    49d4:	1029883a 	mov	r20,r2
    49d8:	182b883a 	mov	r21,r3
    49dc:	003c8906 	br	3c04 <_dtoa_r+0x424>
    49e0:	d9001017 	ldw	r4,64(sp)
    49e4:	d9800917 	ldw	r6,36(sp)
    49e8:	0025883a 	mov	r18,zero
    49ec:	1105c83a 	sub	r2,r2,r4
    49f0:	2089883a 	add	r4,r4,r2
    49f4:	308d883a 	add	r6,r6,r2
    49f8:	d9001015 	stw	r4,64(sp)
    49fc:	d9800915 	stw	r6,36(sp)
    4a00:	003e3206 	br	42cc <_dtoa_r+0xaec>
    4a04:	28800044 	addi	r2,r5,1
    4a08:	27000044 	addi	fp,r4,1
    4a0c:	20800005 	stb	r2,0(r4)
    4a10:	003e6c06 	br	43c4 <_dtoa_r+0xbe4>
    4a14:	d8800f17 	ldw	r2,60(sp)
    4a18:	00bce016 	blt	zero,r2,3d9c <_dtoa_r+0x5bc>
    4a1c:	d9800f17 	ldw	r6,60(sp)
    4a20:	303cc51e 	bne	r6,zero,3d38 <_dtoa_r+0x558>
    4a24:	0005883a 	mov	r2,zero
    4a28:	00d00534 	movhi	r3,16404
    4a2c:	980b883a 	mov	r5,r19
    4a30:	180f883a 	mov	r7,r3
    4a34:	9009883a 	mov	r4,r18
    4a38:	100d883a 	mov	r6,r2
    4a3c:	00096a40 	call	96a4 <__muldf3>
    4a40:	180b883a 	mov	r5,r3
    4a44:	a80f883a 	mov	r7,r21
    4a48:	1009883a 	mov	r4,r2
    4a4c:	a00d883a 	mov	r6,r20
    4a50:	0009e580 	call	9e58 <__gedf2>
    4a54:	103cb80e 	bge	r2,zero,3d38 <_dtoa_r+0x558>
    4a58:	0027883a 	mov	r19,zero
    4a5c:	0025883a 	mov	r18,zero
    4a60:	003fc606 	br	497c <_dtoa_r+0x119c>
    4a64:	99400117 	ldw	r5,4(r19)
    4a68:	d9001617 	ldw	r4,88(sp)
    4a6c:	0006dbc0 	call	6dbc <_Balloc>
    4a70:	99800417 	ldw	r6,16(r19)
    4a74:	11000304 	addi	r4,r2,12
    4a78:	99400304 	addi	r5,r19,12
    4a7c:	318d883a 	add	r6,r6,r6
    4a80:	318d883a 	add	r6,r6,r6
    4a84:	31800204 	addi	r6,r6,8
    4a88:	1023883a 	mov	r17,r2
    4a8c:	00013b40 	call	13b4 <memcpy>
    4a90:	d9001617 	ldw	r4,88(sp)
    4a94:	880b883a 	mov	r5,r17
    4a98:	01800044 	movi	r6,1
    4a9c:	00071800 	call	7180 <__lshift>
    4aa0:	100b883a 	mov	r5,r2
    4aa4:	003d9c06 	br	4118 <_dtoa_r+0x938>
    4aa8:	00800e44 	movi	r2,57
    4aac:	b8807026 	beq	r23,r2,4c70 <_dtoa_r+0x1490>
    4ab0:	b8800044 	addi	r2,r23,1
    4ab4:	b7000044 	addi	fp,r22,1
    4ab8:	b0800005 	stb	r2,0(r22)
    4abc:	003e4106 	br	43c4 <_dtoa_r+0xbe4>
    4ac0:	d8800317 	ldw	r2,12(sp)
    4ac4:	01800074 	movhi	r6,1
    4ac8:	31868004 	addi	r6,r6,6656
    4acc:	b009883a 	mov	r4,r22
    4ad0:	100e90fa 	slli	r7,r2,3
    4ad4:	b80b883a 	mov	r5,r23
    4ad8:	398f883a 	add	r7,r7,r6
    4adc:	38bffe17 	ldw	r2,-8(r7)
    4ae0:	d9800517 	ldw	r6,20(sp)
    4ae4:	38ffff17 	ldw	r3,-4(r7)
    4ae8:	37000044 	addi	fp,r6,1
    4aec:	180f883a 	mov	r7,r3
    4af0:	100d883a 	mov	r6,r2
    4af4:	00096a40 	call	96a4 <__muldf3>
    4af8:	a80b883a 	mov	r5,r21
    4afc:	a009883a 	mov	r4,r20
    4b00:	182f883a 	mov	r23,r3
    4b04:	102d883a 	mov	r22,r2
    4b08:	000a0600 	call	a060 <__fixdfsi>
    4b0c:	1009883a 	mov	r4,r2
    4b10:	1027883a 	mov	r19,r2
    4b14:	0009f680 	call	9f68 <__floatsidf>
    4b18:	a80b883a 	mov	r5,r21
    4b1c:	a009883a 	mov	r4,r20
    4b20:	180f883a 	mov	r7,r3
    4b24:	100d883a 	mov	r6,r2
    4b28:	00095b00 	call	95b0 <__subdf3>
    4b2c:	180b883a 	mov	r5,r3
    4b30:	d8c00517 	ldw	r3,20(sp)
    4b34:	9cc00c04 	addi	r19,r19,48
    4b38:	1009883a 	mov	r4,r2
    4b3c:	1cc00005 	stb	r19,0(r3)
    4b40:	2021883a 	mov	r16,r4
    4b44:	d9000317 	ldw	r4,12(sp)
    4b48:	00800044 	movi	r2,1
    4b4c:	2823883a 	mov	r17,r5
    4b50:	20802226 	beq	r4,r2,4bdc <_dtoa_r+0x13fc>
    4b54:	1029883a 	mov	r20,r2
    4b58:	0005883a 	mov	r2,zero
    4b5c:	00d00934 	movhi	r3,16420
    4b60:	180f883a 	mov	r7,r3
    4b64:	100d883a 	mov	r6,r2
    4b68:	880b883a 	mov	r5,r17
    4b6c:	8009883a 	mov	r4,r16
    4b70:	00096a40 	call	96a4 <__muldf3>
    4b74:	180b883a 	mov	r5,r3
    4b78:	1009883a 	mov	r4,r2
    4b7c:	1823883a 	mov	r17,r3
    4b80:	1021883a 	mov	r16,r2
    4b84:	000a0600 	call	a060 <__fixdfsi>
    4b88:	1009883a 	mov	r4,r2
    4b8c:	102b883a 	mov	r21,r2
    4b90:	0009f680 	call	9f68 <__floatsidf>
    4b94:	880b883a 	mov	r5,r17
    4b98:	8009883a 	mov	r4,r16
    4b9c:	180f883a 	mov	r7,r3
    4ba0:	100d883a 	mov	r6,r2
    4ba4:	00095b00 	call	95b0 <__subdf3>
    4ba8:	180b883a 	mov	r5,r3
    4bac:	d8c00517 	ldw	r3,20(sp)
    4bb0:	1009883a 	mov	r4,r2
    4bb4:	ad400c04 	addi	r21,r21,48
    4bb8:	1d05883a 	add	r2,r3,r20
    4bbc:	15400005 	stb	r21,0(r2)
    4bc0:	2021883a 	mov	r16,r4
    4bc4:	d9000317 	ldw	r4,12(sp)
    4bc8:	a5000044 	addi	r20,r20,1
    4bcc:	2823883a 	mov	r17,r5
    4bd0:	a13fe11e 	bne	r20,r4,4b58 <_dtoa_r+0x1378>
    4bd4:	e505883a 	add	r2,fp,r20
    4bd8:	173fffc4 	addi	fp,r2,-1
    4bdc:	0025883a 	mov	r18,zero
    4be0:	04cff834 	movhi	r19,16352
    4be4:	b009883a 	mov	r4,r22
    4be8:	b80b883a 	mov	r5,r23
    4bec:	900d883a 	mov	r6,r18
    4bf0:	980f883a 	mov	r7,r19
    4bf4:	00096300 	call	9630 <__adddf3>
    4bf8:	180b883a 	mov	r5,r3
    4bfc:	1009883a 	mov	r4,r2
    4c00:	800d883a 	mov	r6,r16
    4c04:	880f883a 	mov	r7,r17
    4c08:	0009ee00 	call	9ee0 <__ltdf2>
    4c0c:	103cab16 	blt	r2,zero,3ebc <_dtoa_r+0x6dc>
    4c10:	0009883a 	mov	r4,zero
    4c14:	980b883a 	mov	r5,r19
    4c18:	b80f883a 	mov	r7,r23
    4c1c:	b00d883a 	mov	r6,r22
    4c20:	00095b00 	call	95b0 <__subdf3>
    4c24:	180b883a 	mov	r5,r3
    4c28:	880f883a 	mov	r7,r17
    4c2c:	1009883a 	mov	r4,r2
    4c30:	800d883a 	mov	r6,r16
    4c34:	0009dd00 	call	9dd0 <__gtdf2>
    4c38:	00bc470e 	bge	zero,r2,3d58 <_dtoa_r+0x578>
    4c3c:	00c00c04 	movi	r3,48
    4c40:	e73fffc4 	addi	fp,fp,-1
    4c44:	e0800007 	ldb	r2,0(fp)
    4c48:	10fffd26 	beq	r2,r3,4c40 <_dtoa_r+0x1460>
    4c4c:	d9800417 	ldw	r6,16(sp)
    4c50:	e7000044 	addi	fp,fp,1
    4c54:	d9800d15 	stw	r6,52(sp)
    4c58:	003cab06 	br	3f08 <_dtoa_r+0x728>
    4c5c:	d8c00f17 	ldw	r3,60(sp)
    4c60:	d9001117 	ldw	r4,68(sp)
    4c64:	20e1c83a 	sub	r16,r4,r3
    4c68:	0007883a 	mov	r3,zero
    4c6c:	003d9b06 	br	42dc <_dtoa_r+0xafc>
    4c70:	00800e44 	movi	r2,57
    4c74:	b0800005 	stb	r2,0(r22)
    4c78:	b5800044 	addi	r22,r22,1
    4c7c:	003dc106 	br	4384 <_dtoa_r+0xba4>
    4c80:	05800084 	movi	r22,2
    4c84:	003bf706 	br	3c64 <_dtoa_r+0x484>
    4c88:	d9000f17 	ldw	r4,60(sp)
    4c8c:	013c000e 	bge	zero,r4,3c90 <_dtoa_r+0x4b0>
    4c90:	d9800e17 	ldw	r6,56(sp)
    4c94:	01bc300e 	bge	zero,r6,3d58 <_dtoa_r+0x578>
    4c98:	0005883a 	mov	r2,zero
    4c9c:	00d00934 	movhi	r3,16420
    4ca0:	a80b883a 	mov	r5,r21
    4ca4:	180f883a 	mov	r7,r3
    4ca8:	a009883a 	mov	r4,r20
    4cac:	100d883a 	mov	r6,r2
    4cb0:	00096a40 	call	96a4 <__muldf3>
    4cb4:	b1000044 	addi	r4,r22,1
    4cb8:	1021883a 	mov	r16,r2
    4cbc:	1823883a 	mov	r17,r3
    4cc0:	0009f680 	call	9f68 <__floatsidf>
    4cc4:	880b883a 	mov	r5,r17
    4cc8:	8009883a 	mov	r4,r16
    4ccc:	180f883a 	mov	r7,r3
    4cd0:	100d883a 	mov	r6,r2
    4cd4:	00096a40 	call	96a4 <__muldf3>
    4cd8:	0011883a 	mov	r8,zero
    4cdc:	02500734 	movhi	r9,16412
    4ce0:	180b883a 	mov	r5,r3
    4ce4:	480f883a 	mov	r7,r9
    4ce8:	1009883a 	mov	r4,r2
    4cec:	400d883a 	mov	r6,r8
    4cf0:	00096300 	call	9630 <__adddf3>
    4cf4:	102d883a 	mov	r22,r2
    4cf8:	00bf3034 	movhi	r2,64704
    4cfc:	10ef883a 	add	r23,r2,r3
    4d00:	d8800d17 	ldw	r2,52(sp)
    4d04:	d8c00e17 	ldw	r3,56(sp)
    4d08:	8029883a 	mov	r20,r16
    4d0c:	10bfffc4 	addi	r2,r2,-1
    4d10:	882b883a 	mov	r21,r17
    4d14:	d8800415 	stw	r2,16(sp)
    4d18:	d8c00315 	stw	r3,12(sp)
    4d1c:	003e8306 	br	472c <_dtoa_r+0xf4c>
    4d20:	d8800117 	ldw	r2,4(sp)
    4d24:	dc001117 	ldw	r16,68(sp)
    4d28:	dc801017 	ldw	r18,64(sp)
    4d2c:	00c00d84 	movi	r3,54
    4d30:	1887c83a 	sub	r3,r3,r2
    4d34:	003d6906 	br	42dc <_dtoa_r+0xafc>
    4d38:	01800044 	movi	r6,1
    4d3c:	3021883a 	mov	r16,r6
    4d40:	d9800f15 	stw	r6,60(sp)
    4d44:	d9802615 	stw	r6,152(sp)
    4d48:	d9800e15 	stw	r6,56(sp)
    4d4c:	003b9306 	br	3b9c <_dtoa_r+0x3bc>
    4d50:	b021883a 	mov	r16,r22
    4d54:	dd800f15 	stw	r22,60(sp)
    4d58:	003b9006 	br	3b9c <_dtoa_r+0x3bc>
    4d5c:	103e221e 	bne	r2,zero,45e8 <_dtoa_r+0xe08>
    4d60:	b880004c 	andi	r2,r23,1
    4d64:	1005003a 	cmpeq	r2,r2,zero
    4d68:	103e1f1e 	bne	r2,zero,45e8 <_dtoa_r+0xe08>
    4d6c:	003e1b06 	br	45dc <_dtoa_r+0xdfc>
    4d70:	d9001617 	ldw	r4,88(sp)
    4d74:	980b883a 	mov	r5,r19
    4d78:	01800284 	movi	r6,10
    4d7c:	000f883a 	mov	r7,zero
    4d80:	00074f00 	call	74f0 <__multadd>
    4d84:	d8c00e17 	ldw	r3,56(sp)
    4d88:	1027883a 	mov	r19,r2
    4d8c:	d8c00f15 	stw	r3,60(sp)
    4d90:	003cd306 	br	40e0 <_dtoa_r+0x900>

00004d94 <_fflush_r>:
    4d94:	defffb04 	addi	sp,sp,-20
    4d98:	dcc00315 	stw	r19,12(sp)
    4d9c:	dc800215 	stw	r18,8(sp)
    4da0:	dfc00415 	stw	ra,16(sp)
    4da4:	dc400115 	stw	r17,4(sp)
    4da8:	dc000015 	stw	r16,0(sp)
    4dac:	2027883a 	mov	r19,r4
    4db0:	2825883a 	mov	r18,r5
    4db4:	20000226 	beq	r4,zero,4dc0 <_fflush_r+0x2c>
    4db8:	20800e17 	ldw	r2,56(r4)
    4dbc:	10005626 	beq	r2,zero,4f18 <_fflush_r+0x184>
    4dc0:	9100030b 	ldhu	r4,12(r18)
    4dc4:	20ffffcc 	andi	r3,r4,65535
    4dc8:	18e0001c 	xori	r3,r3,32768
    4dcc:	18e00004 	addi	r3,r3,-32768
    4dd0:	1880020c 	andi	r2,r3,8
    4dd4:	1000261e 	bne	r2,zero,4e70 <_fflush_r+0xdc>
    4dd8:	90c00117 	ldw	r3,4(r18)
    4ddc:	20820014 	ori	r2,r4,2048
    4de0:	9080030d 	sth	r2,12(r18)
    4de4:	1009883a 	mov	r4,r2
    4de8:	00c0400e 	bge	zero,r3,4eec <_fflush_r+0x158>
    4dec:	92000a17 	ldw	r8,40(r18)
    4df0:	40004026 	beq	r8,zero,4ef4 <_fflush_r+0x160>
    4df4:	2084000c 	andi	r2,r4,4096
    4df8:	10005326 	beq	r2,zero,4f48 <_fflush_r+0x1b4>
    4dfc:	94001417 	ldw	r16,80(r18)
    4e00:	9080030b 	ldhu	r2,12(r18)
    4e04:	1080010c 	andi	r2,r2,4
    4e08:	1000481e 	bne	r2,zero,4f2c <_fflush_r+0x198>
    4e0c:	91400717 	ldw	r5,28(r18)
    4e10:	9809883a 	mov	r4,r19
    4e14:	800d883a 	mov	r6,r16
    4e18:	000f883a 	mov	r7,zero
    4e1c:	403ee83a 	callr	r8
    4e20:	8080261e 	bne	r16,r2,4ebc <_fflush_r+0x128>
    4e24:	9080030b 	ldhu	r2,12(r18)
    4e28:	91000417 	ldw	r4,16(r18)
    4e2c:	90000115 	stw	zero,4(r18)
    4e30:	10bdffcc 	andi	r2,r2,63487
    4e34:	10ffffcc 	andi	r3,r2,65535
    4e38:	18c4000c 	andi	r3,r3,4096
    4e3c:	9080030d 	sth	r2,12(r18)
    4e40:	91000015 	stw	r4,0(r18)
    4e44:	18002b26 	beq	r3,zero,4ef4 <_fflush_r+0x160>
    4e48:	0007883a 	mov	r3,zero
    4e4c:	1805883a 	mov	r2,r3
    4e50:	94001415 	stw	r16,80(r18)
    4e54:	dfc00417 	ldw	ra,16(sp)
    4e58:	dcc00317 	ldw	r19,12(sp)
    4e5c:	dc800217 	ldw	r18,8(sp)
    4e60:	dc400117 	ldw	r17,4(sp)
    4e64:	dc000017 	ldw	r16,0(sp)
    4e68:	dec00504 	addi	sp,sp,20
    4e6c:	f800283a 	ret
    4e70:	94400417 	ldw	r17,16(r18)
    4e74:	88001f26 	beq	r17,zero,4ef4 <_fflush_r+0x160>
    4e78:	90800017 	ldw	r2,0(r18)
    4e7c:	18c000cc 	andi	r3,r3,3
    4e80:	94400015 	stw	r17,0(r18)
    4e84:	1461c83a 	sub	r16,r2,r17
    4e88:	18002526 	beq	r3,zero,4f20 <_fflush_r+0x18c>
    4e8c:	0005883a 	mov	r2,zero
    4e90:	90800215 	stw	r2,8(r18)
    4e94:	0400170e 	bge	zero,r16,4ef4 <_fflush_r+0x160>
    4e98:	90c00917 	ldw	r3,36(r18)
    4e9c:	91400717 	ldw	r5,28(r18)
    4ea0:	880d883a 	mov	r6,r17
    4ea4:	800f883a 	mov	r7,r16
    4ea8:	9809883a 	mov	r4,r19
    4eac:	183ee83a 	callr	r3
    4eb0:	88a3883a 	add	r17,r17,r2
    4eb4:	80a1c83a 	sub	r16,r16,r2
    4eb8:	00bff616 	blt	zero,r2,4e94 <_fflush_r+0x100>
    4ebc:	9080030b 	ldhu	r2,12(r18)
    4ec0:	00ffffc4 	movi	r3,-1
    4ec4:	10801014 	ori	r2,r2,64
    4ec8:	9080030d 	sth	r2,12(r18)
    4ecc:	1805883a 	mov	r2,r3
    4ed0:	dfc00417 	ldw	ra,16(sp)
    4ed4:	dcc00317 	ldw	r19,12(sp)
    4ed8:	dc800217 	ldw	r18,8(sp)
    4edc:	dc400117 	ldw	r17,4(sp)
    4ee0:	dc000017 	ldw	r16,0(sp)
    4ee4:	dec00504 	addi	sp,sp,20
    4ee8:	f800283a 	ret
    4eec:	90800f17 	ldw	r2,60(r18)
    4ef0:	00bfbe16 	blt	zero,r2,4dec <_fflush_r+0x58>
    4ef4:	0007883a 	mov	r3,zero
    4ef8:	1805883a 	mov	r2,r3
    4efc:	dfc00417 	ldw	ra,16(sp)
    4f00:	dcc00317 	ldw	r19,12(sp)
    4f04:	dc800217 	ldw	r18,8(sp)
    4f08:	dc400117 	ldw	r17,4(sp)
    4f0c:	dc000017 	ldw	r16,0(sp)
    4f10:	dec00504 	addi	sp,sp,20
    4f14:	f800283a 	ret
    4f18:	000502c0 	call	502c <__sinit>
    4f1c:	003fa806 	br	4dc0 <_fflush_r+0x2c>
    4f20:	90800517 	ldw	r2,20(r18)
    4f24:	90800215 	stw	r2,8(r18)
    4f28:	003fda06 	br	4e94 <_fflush_r+0x100>
    4f2c:	90800117 	ldw	r2,4(r18)
    4f30:	90c00c17 	ldw	r3,48(r18)
    4f34:	80a1c83a 	sub	r16,r16,r2
    4f38:	183fb426 	beq	r3,zero,4e0c <_fflush_r+0x78>
    4f3c:	90800f17 	ldw	r2,60(r18)
    4f40:	80a1c83a 	sub	r16,r16,r2
    4f44:	003fb106 	br	4e0c <_fflush_r+0x78>
    4f48:	91400717 	ldw	r5,28(r18)
    4f4c:	9809883a 	mov	r4,r19
    4f50:	000d883a 	mov	r6,zero
    4f54:	01c00044 	movi	r7,1
    4f58:	403ee83a 	callr	r8
    4f5c:	1021883a 	mov	r16,r2
    4f60:	00bfffc4 	movi	r2,-1
    4f64:	80800226 	beq	r16,r2,4f70 <_fflush_r+0x1dc>
    4f68:	92000a17 	ldw	r8,40(r18)
    4f6c:	003fa406 	br	4e00 <_fflush_r+0x6c>
    4f70:	98c00017 	ldw	r3,0(r19)
    4f74:	00800744 	movi	r2,29
    4f78:	18bfde26 	beq	r3,r2,4ef4 <_fflush_r+0x160>
    4f7c:	9080030b 	ldhu	r2,12(r18)
    4f80:	8007883a 	mov	r3,r16
    4f84:	10801014 	ori	r2,r2,64
    4f88:	9080030d 	sth	r2,12(r18)
    4f8c:	003fcf06 	br	4ecc <_fflush_r+0x138>

00004f90 <fflush>:
    4f90:	01400034 	movhi	r5,0
    4f94:	29536504 	addi	r5,r5,19860
    4f98:	2007883a 	mov	r3,r4
    4f9c:	20000526 	beq	r4,zero,4fb4 <fflush+0x24>
    4fa0:	00800074 	movhi	r2,1
    4fa4:	108eef04 	addi	r2,r2,15292
    4fa8:	11000017 	ldw	r4,0(r2)
    4fac:	180b883a 	mov	r5,r3
    4fb0:	0004d941 	jmpi	4d94 <_fflush_r>
    4fb4:	00800074 	movhi	r2,1
    4fb8:	108ef004 	addi	r2,r2,15296
    4fbc:	11000017 	ldw	r4,0(r2)
    4fc0:	0005b601 	jmpi	5b60 <_fwalk_reent>

00004fc4 <std>:
    4fc4:	00800034 	movhi	r2,0
    4fc8:	109fc104 	addi	r2,r2,32516
    4fcc:	20800b15 	stw	r2,44(r4)
    4fd0:	00800034 	movhi	r2,0
    4fd4:	109ffc04 	addi	r2,r2,32752
    4fd8:	20800815 	stw	r2,32(r4)
    4fdc:	00c00034 	movhi	r3,0
    4fe0:	18dfdd04 	addi	r3,r3,32628
    4fe4:	00800034 	movhi	r2,0
    4fe8:	109fc304 	addi	r2,r2,32524
    4fec:	2140030d 	sth	r5,12(r4)
    4ff0:	2180038d 	sth	r6,14(r4)
    4ff4:	20c00915 	stw	r3,36(r4)
    4ff8:	20800a15 	stw	r2,40(r4)
    4ffc:	20000015 	stw	zero,0(r4)
    5000:	20000115 	stw	zero,4(r4)
    5004:	20000215 	stw	zero,8(r4)
    5008:	20000415 	stw	zero,16(r4)
    500c:	20000515 	stw	zero,20(r4)
    5010:	20000615 	stw	zero,24(r4)
    5014:	21000715 	stw	r4,28(r4)
    5018:	f800283a 	ret

0000501c <__sfp_lock_acquire>:
    501c:	f800283a 	ret

00005020 <__sfp_lock_release>:
    5020:	f800283a 	ret

00005024 <__sinit_lock_acquire>:
    5024:	f800283a 	ret

00005028 <__sinit_lock_release>:
    5028:	f800283a 	ret

0000502c <__sinit>:
    502c:	20800e17 	ldw	r2,56(r4)
    5030:	defffd04 	addi	sp,sp,-12
    5034:	dc400115 	stw	r17,4(sp)
    5038:	dc000015 	stw	r16,0(sp)
    503c:	dfc00215 	stw	ra,8(sp)
    5040:	04400044 	movi	r17,1
    5044:	01400104 	movi	r5,4
    5048:	000d883a 	mov	r6,zero
    504c:	2021883a 	mov	r16,r4
    5050:	2200bb04 	addi	r8,r4,748
    5054:	200f883a 	mov	r7,r4
    5058:	10000526 	beq	r2,zero,5070 <__sinit+0x44>
    505c:	dfc00217 	ldw	ra,8(sp)
    5060:	dc400117 	ldw	r17,4(sp)
    5064:	dc000017 	ldw	r16,0(sp)
    5068:	dec00304 	addi	sp,sp,12
    506c:	f800283a 	ret
    5070:	21000117 	ldw	r4,4(r4)
    5074:	00800034 	movhi	r2,0
    5078:	10944404 	addi	r2,r2,20752
    507c:	00c000c4 	movi	r3,3
    5080:	80800f15 	stw	r2,60(r16)
    5084:	80c0b915 	stw	r3,740(r16)
    5088:	8200ba15 	stw	r8,744(r16)
    508c:	84400e15 	stw	r17,56(r16)
    5090:	8000b815 	stw	zero,736(r16)
    5094:	0004fc40 	call	4fc4 <std>
    5098:	81000217 	ldw	r4,8(r16)
    509c:	880d883a 	mov	r6,r17
    50a0:	800f883a 	mov	r7,r16
    50a4:	01400284 	movi	r5,10
    50a8:	0004fc40 	call	4fc4 <std>
    50ac:	81000317 	ldw	r4,12(r16)
    50b0:	800f883a 	mov	r7,r16
    50b4:	01400484 	movi	r5,18
    50b8:	01800084 	movi	r6,2
    50bc:	dfc00217 	ldw	ra,8(sp)
    50c0:	dc400117 	ldw	r17,4(sp)
    50c4:	dc000017 	ldw	r16,0(sp)
    50c8:	dec00304 	addi	sp,sp,12
    50cc:	0004fc41 	jmpi	4fc4 <std>

000050d0 <__fp_lock>:
    50d0:	0005883a 	mov	r2,zero
    50d4:	f800283a 	ret

000050d8 <__fp_unlock>:
    50d8:	0005883a 	mov	r2,zero
    50dc:	f800283a 	ret

000050e0 <__fp_unlock_all>:
    50e0:	00800074 	movhi	r2,1
    50e4:	108eef04 	addi	r2,r2,15292
    50e8:	11000017 	ldw	r4,0(r2)
    50ec:	01400034 	movhi	r5,0
    50f0:	29543604 	addi	r5,r5,20696
    50f4:	0005c281 	jmpi	5c28 <_fwalk>

000050f8 <__fp_lock_all>:
    50f8:	00800074 	movhi	r2,1
    50fc:	108eef04 	addi	r2,r2,15292
    5100:	11000017 	ldw	r4,0(r2)
    5104:	01400034 	movhi	r5,0
    5108:	29543404 	addi	r5,r5,20688
    510c:	0005c281 	jmpi	5c28 <_fwalk>

00005110 <_cleanup_r>:
    5110:	01400074 	movhi	r5,1
    5114:	29610b04 	addi	r5,r5,-31700
    5118:	0005c281 	jmpi	5c28 <_fwalk>

0000511c <_cleanup>:
    511c:	00800074 	movhi	r2,1
    5120:	108ef004 	addi	r2,r2,15296
    5124:	11000017 	ldw	r4,0(r2)
    5128:	00051101 	jmpi	5110 <_cleanup_r>

0000512c <__sfmoreglue>:
    512c:	defffc04 	addi	sp,sp,-16
    5130:	dc400115 	stw	r17,4(sp)
    5134:	2c401724 	muli	r17,r5,92
    5138:	dc800215 	stw	r18,8(sp)
    513c:	2825883a 	mov	r18,r5
    5140:	89400304 	addi	r5,r17,12
    5144:	dc000015 	stw	r16,0(sp)
    5148:	dfc00315 	stw	ra,12(sp)
    514c:	0005f380 	call	5f38 <_malloc_r>
    5150:	0021883a 	mov	r16,zero
    5154:	880d883a 	mov	r6,r17
    5158:	000b883a 	mov	r5,zero
    515c:	10000626 	beq	r2,zero,5178 <__sfmoreglue+0x4c>
    5160:	11000304 	addi	r4,r2,12
    5164:	14800115 	stw	r18,4(r2)
    5168:	10000015 	stw	zero,0(r2)
    516c:	11000215 	stw	r4,8(r2)
    5170:	1021883a 	mov	r16,r2
    5174:	00014540 	call	1454 <memset>
    5178:	8005883a 	mov	r2,r16
    517c:	dfc00317 	ldw	ra,12(sp)
    5180:	dc800217 	ldw	r18,8(sp)
    5184:	dc400117 	ldw	r17,4(sp)
    5188:	dc000017 	ldw	r16,0(sp)
    518c:	dec00404 	addi	sp,sp,16
    5190:	f800283a 	ret

00005194 <__sfp>:
    5194:	defffd04 	addi	sp,sp,-12
    5198:	00800074 	movhi	r2,1
    519c:	108ef004 	addi	r2,r2,15296
    51a0:	dc000015 	stw	r16,0(sp)
    51a4:	14000017 	ldw	r16,0(r2)
    51a8:	dc400115 	stw	r17,4(sp)
    51ac:	dfc00215 	stw	ra,8(sp)
    51b0:	80800e17 	ldw	r2,56(r16)
    51b4:	2023883a 	mov	r17,r4
    51b8:	10002626 	beq	r2,zero,5254 <__sfp+0xc0>
    51bc:	8400b804 	addi	r16,r16,736
    51c0:	80800117 	ldw	r2,4(r16)
    51c4:	81000217 	ldw	r4,8(r16)
    51c8:	10ffffc4 	addi	r3,r2,-1
    51cc:	18000916 	blt	r3,zero,51f4 <__sfp+0x60>
    51d0:	2080030f 	ldh	r2,12(r4)
    51d4:	10000b26 	beq	r2,zero,5204 <__sfp+0x70>
    51d8:	017fffc4 	movi	r5,-1
    51dc:	00000206 	br	51e8 <__sfp+0x54>
    51e0:	2080030f 	ldh	r2,12(r4)
    51e4:	10000726 	beq	r2,zero,5204 <__sfp+0x70>
    51e8:	18ffffc4 	addi	r3,r3,-1
    51ec:	21001704 	addi	r4,r4,92
    51f0:	197ffb1e 	bne	r3,r5,51e0 <__sfp+0x4c>
    51f4:	80800017 	ldw	r2,0(r16)
    51f8:	10001926 	beq	r2,zero,5260 <__sfp+0xcc>
    51fc:	1021883a 	mov	r16,r2
    5200:	003fef06 	br	51c0 <__sfp+0x2c>
    5204:	00bfffc4 	movi	r2,-1
    5208:	00c00044 	movi	r3,1
    520c:	2080038d 	sth	r2,14(r4)
    5210:	20c0030d 	sth	r3,12(r4)
    5214:	20000015 	stw	zero,0(r4)
    5218:	20000215 	stw	zero,8(r4)
    521c:	20000115 	stw	zero,4(r4)
    5220:	20000415 	stw	zero,16(r4)
    5224:	20000515 	stw	zero,20(r4)
    5228:	20000615 	stw	zero,24(r4)
    522c:	20000c15 	stw	zero,48(r4)
    5230:	20000d15 	stw	zero,52(r4)
    5234:	20001115 	stw	zero,68(r4)
    5238:	20001215 	stw	zero,72(r4)
    523c:	2005883a 	mov	r2,r4
    5240:	dfc00217 	ldw	ra,8(sp)
    5244:	dc400117 	ldw	r17,4(sp)
    5248:	dc000017 	ldw	r16,0(sp)
    524c:	dec00304 	addi	sp,sp,12
    5250:	f800283a 	ret
    5254:	8009883a 	mov	r4,r16
    5258:	000502c0 	call	502c <__sinit>
    525c:	003fd706 	br	51bc <__sfp+0x28>
    5260:	8809883a 	mov	r4,r17
    5264:	01400104 	movi	r5,4
    5268:	000512c0 	call	512c <__sfmoreglue>
    526c:	80800015 	stw	r2,0(r16)
    5270:	103fe21e 	bne	r2,zero,51fc <__sfp+0x68>
    5274:	00800304 	movi	r2,12
    5278:	0009883a 	mov	r4,zero
    527c:	88800015 	stw	r2,0(r17)
    5280:	003fee06 	br	523c <__sfp+0xa8>

00005284 <_malloc_trim_r>:
    5284:	defffb04 	addi	sp,sp,-20
    5288:	dcc00315 	stw	r19,12(sp)
    528c:	04c00074 	movhi	r19,1
    5290:	9cc87e04 	addi	r19,r19,8696
    5294:	dc800215 	stw	r18,8(sp)
    5298:	dc400115 	stw	r17,4(sp)
    529c:	dc000015 	stw	r16,0(sp)
    52a0:	2823883a 	mov	r17,r5
    52a4:	2025883a 	mov	r18,r4
    52a8:	dfc00415 	stw	ra,16(sp)
    52ac:	000b2880 	call	b288 <__malloc_lock>
    52b0:	98800217 	ldw	r2,8(r19)
    52b4:	9009883a 	mov	r4,r18
    52b8:	000b883a 	mov	r5,zero
    52bc:	10c00117 	ldw	r3,4(r2)
    52c0:	00bfff04 	movi	r2,-4
    52c4:	18a0703a 	and	r16,r3,r2
    52c8:	8463c83a 	sub	r17,r16,r17
    52cc:	8c43fbc4 	addi	r17,r17,4079
    52d0:	8822d33a 	srli	r17,r17,12
    52d4:	0083ffc4 	movi	r2,4095
    52d8:	8c7fffc4 	addi	r17,r17,-1
    52dc:	8822933a 	slli	r17,r17,12
    52e0:	1440060e 	bge	r2,r17,52fc <_malloc_trim_r+0x78>
    52e4:	0007e940 	call	7e94 <_sbrk_r>
    52e8:	98c00217 	ldw	r3,8(r19)
    52ec:	9009883a 	mov	r4,r18
    52f0:	044bc83a 	sub	r5,zero,r17
    52f4:	80c7883a 	add	r3,r16,r3
    52f8:	10c00926 	beq	r2,r3,5320 <_malloc_trim_r+0x9c>
    52fc:	000b2a80 	call	b2a8 <__malloc_unlock>
    5300:	0005883a 	mov	r2,zero
    5304:	dfc00417 	ldw	ra,16(sp)
    5308:	dcc00317 	ldw	r19,12(sp)
    530c:	dc800217 	ldw	r18,8(sp)
    5310:	dc400117 	ldw	r17,4(sp)
    5314:	dc000017 	ldw	r16,0(sp)
    5318:	dec00504 	addi	sp,sp,20
    531c:	f800283a 	ret
    5320:	9009883a 	mov	r4,r18
    5324:	0007e940 	call	7e94 <_sbrk_r>
    5328:	844dc83a 	sub	r6,r16,r17
    532c:	00ffffc4 	movi	r3,-1
    5330:	9009883a 	mov	r4,r18
    5334:	000b883a 	mov	r5,zero
    5338:	01c00074 	movhi	r7,1
    533c:	39d69504 	addi	r7,r7,23124
    5340:	31800054 	ori	r6,r6,1
    5344:	10c00926 	beq	r2,r3,536c <_malloc_trim_r+0xe8>
    5348:	38800017 	ldw	r2,0(r7)
    534c:	98c00217 	ldw	r3,8(r19)
    5350:	9009883a 	mov	r4,r18
    5354:	1445c83a 	sub	r2,r2,r17
    5358:	38800015 	stw	r2,0(r7)
    535c:	19800115 	stw	r6,4(r3)
    5360:	000b2a80 	call	b2a8 <__malloc_unlock>
    5364:	00800044 	movi	r2,1
    5368:	003fe606 	br	5304 <_malloc_trim_r+0x80>
    536c:	0007e940 	call	7e94 <_sbrk_r>
    5370:	99800217 	ldw	r6,8(r19)
    5374:	100f883a 	mov	r7,r2
    5378:	9009883a 	mov	r4,r18
    537c:	1187c83a 	sub	r3,r2,r6
    5380:	008003c4 	movi	r2,15
    5384:	19400054 	ori	r5,r3,1
    5388:	10ffdc0e 	bge	r2,r3,52fc <_malloc_trim_r+0x78>
    538c:	00800074 	movhi	r2,1
    5390:	108ef404 	addi	r2,r2,15312
    5394:	10c00017 	ldw	r3,0(r2)
    5398:	00800074 	movhi	r2,1
    539c:	10969504 	addi	r2,r2,23124
    53a0:	31400115 	stw	r5,4(r6)
    53a4:	38c7c83a 	sub	r3,r7,r3
    53a8:	10c00015 	stw	r3,0(r2)
    53ac:	003fd306 	br	52fc <_malloc_trim_r+0x78>

000053b0 <_free_r>:
    53b0:	defffd04 	addi	sp,sp,-12
    53b4:	dc400115 	stw	r17,4(sp)
    53b8:	dc000015 	stw	r16,0(sp)
    53bc:	dfc00215 	stw	ra,8(sp)
    53c0:	2821883a 	mov	r16,r5
    53c4:	2023883a 	mov	r17,r4
    53c8:	28005a26 	beq	r5,zero,5534 <_free_r+0x184>
    53cc:	000b2880 	call	b288 <__malloc_lock>
    53d0:	823ffe04 	addi	r8,r16,-8
    53d4:	41400117 	ldw	r5,4(r8)
    53d8:	00bfff84 	movi	r2,-2
    53dc:	02800074 	movhi	r10,1
    53e0:	52887e04 	addi	r10,r10,8696
    53e4:	288e703a 	and	r7,r5,r2
    53e8:	41cd883a 	add	r6,r8,r7
    53ec:	30c00117 	ldw	r3,4(r6)
    53f0:	51000217 	ldw	r4,8(r10)
    53f4:	00bfff04 	movi	r2,-4
    53f8:	1892703a 	and	r9,r3,r2
    53fc:	5017883a 	mov	r11,r10
    5400:	31006726 	beq	r6,r4,55a0 <_free_r+0x1f0>
    5404:	2880004c 	andi	r2,r5,1
    5408:	1005003a 	cmpeq	r2,r2,zero
    540c:	32400115 	stw	r9,4(r6)
    5410:	10001a1e 	bne	r2,zero,547c <_free_r+0xcc>
    5414:	000b883a 	mov	r5,zero
    5418:	3247883a 	add	r3,r6,r9
    541c:	18800117 	ldw	r2,4(r3)
    5420:	1080004c 	andi	r2,r2,1
    5424:	1000231e 	bne	r2,zero,54b4 <_free_r+0x104>
    5428:	280ac03a 	cmpne	r5,r5,zero
    542c:	3a4f883a 	add	r7,r7,r9
    5430:	2800451e 	bne	r5,zero,5548 <_free_r+0x198>
    5434:	31000217 	ldw	r4,8(r6)
    5438:	00800074 	movhi	r2,1
    543c:	10888004 	addi	r2,r2,8704
    5440:	20807b26 	beq	r4,r2,5630 <_free_r+0x280>
    5444:	30800317 	ldw	r2,12(r6)
    5448:	3a07883a 	add	r3,r7,r8
    544c:	19c00015 	stw	r7,0(r3)
    5450:	11000215 	stw	r4,8(r2)
    5454:	20800315 	stw	r2,12(r4)
    5458:	38800054 	ori	r2,r7,1
    545c:	40800115 	stw	r2,4(r8)
    5460:	28001a26 	beq	r5,zero,54cc <_free_r+0x11c>
    5464:	8809883a 	mov	r4,r17
    5468:	dfc00217 	ldw	ra,8(sp)
    546c:	dc400117 	ldw	r17,4(sp)
    5470:	dc000017 	ldw	r16,0(sp)
    5474:	dec00304 	addi	sp,sp,12
    5478:	000b2a81 	jmpi	b2a8 <__malloc_unlock>
    547c:	80bffe17 	ldw	r2,-8(r16)
    5480:	50c00204 	addi	r3,r10,8
    5484:	4091c83a 	sub	r8,r8,r2
    5488:	41000217 	ldw	r4,8(r8)
    548c:	388f883a 	add	r7,r7,r2
    5490:	20c06126 	beq	r4,r3,5618 <_free_r+0x268>
    5494:	40800317 	ldw	r2,12(r8)
    5498:	3247883a 	add	r3,r6,r9
    549c:	000b883a 	mov	r5,zero
    54a0:	11000215 	stw	r4,8(r2)
    54a4:	20800315 	stw	r2,12(r4)
    54a8:	18800117 	ldw	r2,4(r3)
    54ac:	1080004c 	andi	r2,r2,1
    54b0:	103fdd26 	beq	r2,zero,5428 <_free_r+0x78>
    54b4:	38800054 	ori	r2,r7,1
    54b8:	3a07883a 	add	r3,r7,r8
    54bc:	280ac03a 	cmpne	r5,r5,zero
    54c0:	40800115 	stw	r2,4(r8)
    54c4:	19c00015 	stw	r7,0(r3)
    54c8:	283fe61e 	bne	r5,zero,5464 <_free_r+0xb4>
    54cc:	00807fc4 	movi	r2,511
    54d0:	11c01f2e 	bgeu	r2,r7,5550 <_free_r+0x1a0>
    54d4:	3806d27a 	srli	r3,r7,9
    54d8:	1800481e 	bne	r3,zero,55fc <_free_r+0x24c>
    54dc:	3804d0fa 	srli	r2,r7,3
    54e0:	100690fa 	slli	r3,r2,3
    54e4:	1acd883a 	add	r6,r3,r11
    54e8:	31400217 	ldw	r5,8(r6)
    54ec:	31405926 	beq	r6,r5,5654 <_free_r+0x2a4>
    54f0:	28800117 	ldw	r2,4(r5)
    54f4:	00ffff04 	movi	r3,-4
    54f8:	10c4703a 	and	r2,r2,r3
    54fc:	3880022e 	bgeu	r7,r2,5508 <_free_r+0x158>
    5500:	29400217 	ldw	r5,8(r5)
    5504:	317ffa1e 	bne	r6,r5,54f0 <_free_r+0x140>
    5508:	29800317 	ldw	r6,12(r5)
    550c:	41800315 	stw	r6,12(r8)
    5510:	41400215 	stw	r5,8(r8)
    5514:	8809883a 	mov	r4,r17
    5518:	2a000315 	stw	r8,12(r5)
    551c:	32000215 	stw	r8,8(r6)
    5520:	dfc00217 	ldw	ra,8(sp)
    5524:	dc400117 	ldw	r17,4(sp)
    5528:	dc000017 	ldw	r16,0(sp)
    552c:	dec00304 	addi	sp,sp,12
    5530:	000b2a81 	jmpi	b2a8 <__malloc_unlock>
    5534:	dfc00217 	ldw	ra,8(sp)
    5538:	dc400117 	ldw	r17,4(sp)
    553c:	dc000017 	ldw	r16,0(sp)
    5540:	dec00304 	addi	sp,sp,12
    5544:	f800283a 	ret
    5548:	31000217 	ldw	r4,8(r6)
    554c:	003fbd06 	br	5444 <_free_r+0x94>
    5550:	3806d0fa 	srli	r3,r7,3
    5554:	00800044 	movi	r2,1
    5558:	51400117 	ldw	r5,4(r10)
    555c:	180890fa 	slli	r4,r3,3
    5560:	1807d0ba 	srai	r3,r3,2
    5564:	22c9883a 	add	r4,r4,r11
    5568:	21800217 	ldw	r6,8(r4)
    556c:	10c4983a 	sll	r2,r2,r3
    5570:	41000315 	stw	r4,12(r8)
    5574:	41800215 	stw	r6,8(r8)
    5578:	288ab03a 	or	r5,r5,r2
    557c:	22000215 	stw	r8,8(r4)
    5580:	8809883a 	mov	r4,r17
    5584:	51400115 	stw	r5,4(r10)
    5588:	32000315 	stw	r8,12(r6)
    558c:	dfc00217 	ldw	ra,8(sp)
    5590:	dc400117 	ldw	r17,4(sp)
    5594:	dc000017 	ldw	r16,0(sp)
    5598:	dec00304 	addi	sp,sp,12
    559c:	000b2a81 	jmpi	b2a8 <__malloc_unlock>
    55a0:	2880004c 	andi	r2,r5,1
    55a4:	3a4d883a 	add	r6,r7,r9
    55a8:	1000071e 	bne	r2,zero,55c8 <_free_r+0x218>
    55ac:	80bffe17 	ldw	r2,-8(r16)
    55b0:	4091c83a 	sub	r8,r8,r2
    55b4:	41000317 	ldw	r4,12(r8)
    55b8:	40c00217 	ldw	r3,8(r8)
    55bc:	308d883a 	add	r6,r6,r2
    55c0:	20c00215 	stw	r3,8(r4)
    55c4:	19000315 	stw	r4,12(r3)
    55c8:	00800074 	movhi	r2,1
    55cc:	108ef304 	addi	r2,r2,15308
    55d0:	11000017 	ldw	r4,0(r2)
    55d4:	30c00054 	ori	r3,r6,1
    55d8:	52000215 	stw	r8,8(r10)
    55dc:	40c00115 	stw	r3,4(r8)
    55e0:	313fa036 	bltu	r6,r4,5464 <_free_r+0xb4>
    55e4:	00800074 	movhi	r2,1
    55e8:	10968b04 	addi	r2,r2,23084
    55ec:	11400017 	ldw	r5,0(r2)
    55f0:	8809883a 	mov	r4,r17
    55f4:	00052840 	call	5284 <_malloc_trim_r>
    55f8:	003f9a06 	br	5464 <_free_r+0xb4>
    55fc:	00800104 	movi	r2,4
    5600:	10c0072e 	bgeu	r2,r3,5620 <_free_r+0x270>
    5604:	00800504 	movi	r2,20
    5608:	10c01936 	bltu	r2,r3,5670 <_free_r+0x2c0>
    560c:	188016c4 	addi	r2,r3,91
    5610:	100690fa 	slli	r3,r2,3
    5614:	003fb306 	br	54e4 <_free_r+0x134>
    5618:	01400044 	movi	r5,1
    561c:	003f7e06 	br	5418 <_free_r+0x68>
    5620:	3804d1ba 	srli	r2,r7,6
    5624:	10800e04 	addi	r2,r2,56
    5628:	100690fa 	slli	r3,r2,3
    562c:	003fad06 	br	54e4 <_free_r+0x134>
    5630:	22000315 	stw	r8,12(r4)
    5634:	22000215 	stw	r8,8(r4)
    5638:	3a05883a 	add	r2,r7,r8
    563c:	38c00054 	ori	r3,r7,1
    5640:	11c00015 	stw	r7,0(r2)
    5644:	41000215 	stw	r4,8(r8)
    5648:	40c00115 	stw	r3,4(r8)
    564c:	41000315 	stw	r4,12(r8)
    5650:	003f8406 	br	5464 <_free_r+0xb4>
    5654:	1005d0ba 	srai	r2,r2,2
    5658:	00c00044 	movi	r3,1
    565c:	51000117 	ldw	r4,4(r10)
    5660:	1886983a 	sll	r3,r3,r2
    5664:	20c8b03a 	or	r4,r4,r3
    5668:	51000115 	stw	r4,4(r10)
    566c:	003fa706 	br	550c <_free_r+0x15c>
    5670:	00801504 	movi	r2,84
    5674:	10c00436 	bltu	r2,r3,5688 <_free_r+0x2d8>
    5678:	3804d33a 	srli	r2,r7,12
    567c:	10801b84 	addi	r2,r2,110
    5680:	100690fa 	slli	r3,r2,3
    5684:	003f9706 	br	54e4 <_free_r+0x134>
    5688:	00805504 	movi	r2,340
    568c:	10c00436 	bltu	r2,r3,56a0 <_free_r+0x2f0>
    5690:	3804d3fa 	srli	r2,r7,15
    5694:	10801dc4 	addi	r2,r2,119
    5698:	100690fa 	slli	r3,r2,3
    569c:	003f9106 	br	54e4 <_free_r+0x134>
    56a0:	00815504 	movi	r2,1364
    56a4:	10c0032e 	bgeu	r2,r3,56b4 <_free_r+0x304>
    56a8:	00801f84 	movi	r2,126
    56ac:	00c0fc04 	movi	r3,1008
    56b0:	003f8c06 	br	54e4 <_free_r+0x134>
    56b4:	3804d4ba 	srli	r2,r7,18
    56b8:	10801f04 	addi	r2,r2,124
    56bc:	100690fa 	slli	r3,r2,3
    56c0:	003f8806 	br	54e4 <_free_r+0x134>

000056c4 <__sfvwrite_r>:
    56c4:	30800217 	ldw	r2,8(r6)
    56c8:	defff504 	addi	sp,sp,-44
    56cc:	df000915 	stw	fp,36(sp)
    56d0:	dd800715 	stw	r22,28(sp)
    56d4:	dc800315 	stw	r18,12(sp)
    56d8:	dfc00a15 	stw	ra,40(sp)
    56dc:	ddc00815 	stw	r23,32(sp)
    56e0:	dd400615 	stw	r21,24(sp)
    56e4:	dd000515 	stw	r20,20(sp)
    56e8:	dcc00415 	stw	r19,16(sp)
    56ec:	dc400215 	stw	r17,8(sp)
    56f0:	dc000115 	stw	r16,4(sp)
    56f4:	302d883a 	mov	r22,r6
    56f8:	2039883a 	mov	fp,r4
    56fc:	2825883a 	mov	r18,r5
    5700:	10001c26 	beq	r2,zero,5774 <__sfvwrite_r+0xb0>
    5704:	29c0030b 	ldhu	r7,12(r5)
    5708:	3880020c 	andi	r2,r7,8
    570c:	10002726 	beq	r2,zero,57ac <__sfvwrite_r+0xe8>
    5710:	28800417 	ldw	r2,16(r5)
    5714:	10002526 	beq	r2,zero,57ac <__sfvwrite_r+0xe8>
    5718:	3880008c 	andi	r2,r7,2
    571c:	b5400017 	ldw	r21,0(r22)
    5720:	10002826 	beq	r2,zero,57c4 <__sfvwrite_r+0x100>
    5724:	0021883a 	mov	r16,zero
    5728:	0023883a 	mov	r17,zero
    572c:	880d883a 	mov	r6,r17
    5730:	e009883a 	mov	r4,fp
    5734:	00810004 	movi	r2,1024
    5738:	80006e26 	beq	r16,zero,58f4 <__sfvwrite_r+0x230>
    573c:	800f883a 	mov	r7,r16
    5740:	91400717 	ldw	r5,28(r18)
    5744:	1400012e 	bgeu	r2,r16,574c <__sfvwrite_r+0x88>
    5748:	100f883a 	mov	r7,r2
    574c:	90c00917 	ldw	r3,36(r18)
    5750:	183ee83a 	callr	r3
    5754:	1007883a 	mov	r3,r2
    5758:	80a1c83a 	sub	r16,r16,r2
    575c:	88a3883a 	add	r17,r17,r2
    5760:	00806d0e 	bge	zero,r2,5918 <__sfvwrite_r+0x254>
    5764:	b0800217 	ldw	r2,8(r22)
    5768:	10c5c83a 	sub	r2,r2,r3
    576c:	b0800215 	stw	r2,8(r22)
    5770:	103fee1e 	bne	r2,zero,572c <__sfvwrite_r+0x68>
    5774:	0009883a 	mov	r4,zero
    5778:	2005883a 	mov	r2,r4
    577c:	dfc00a17 	ldw	ra,40(sp)
    5780:	df000917 	ldw	fp,36(sp)
    5784:	ddc00817 	ldw	r23,32(sp)
    5788:	dd800717 	ldw	r22,28(sp)
    578c:	dd400617 	ldw	r21,24(sp)
    5790:	dd000517 	ldw	r20,20(sp)
    5794:	dcc00417 	ldw	r19,16(sp)
    5798:	dc800317 	ldw	r18,12(sp)
    579c:	dc400217 	ldw	r17,8(sp)
    57a0:	dc000117 	ldw	r16,4(sp)
    57a4:	dec00b04 	addi	sp,sp,44
    57a8:	f800283a 	ret
    57ac:	000348c0 	call	348c <__swsetup_r>
    57b0:	1000e41e 	bne	r2,zero,5b44 <__sfvwrite_r+0x480>
    57b4:	91c0030b 	ldhu	r7,12(r18)
    57b8:	b5400017 	ldw	r21,0(r22)
    57bc:	3880008c 	andi	r2,r7,2
    57c0:	103fd81e 	bne	r2,zero,5724 <__sfvwrite_r+0x60>
    57c4:	3880004c 	andi	r2,r7,1
    57c8:	1005003a 	cmpeq	r2,r2,zero
    57cc:	10005726 	beq	r2,zero,592c <__sfvwrite_r+0x268>
    57d0:	0029883a 	mov	r20,zero
    57d4:	002f883a 	mov	r23,zero
    57d8:	a0004226 	beq	r20,zero,58e4 <__sfvwrite_r+0x220>
    57dc:	3880800c 	andi	r2,r7,512
    57e0:	94000217 	ldw	r16,8(r18)
    57e4:	10008b26 	beq	r2,zero,5a14 <__sfvwrite_r+0x350>
    57e8:	800d883a 	mov	r6,r16
    57ec:	a400a536 	bltu	r20,r16,5a84 <__sfvwrite_r+0x3c0>
    57f0:	3881200c 	andi	r2,r7,1152
    57f4:	10002726 	beq	r2,zero,5894 <__sfvwrite_r+0x1d0>
    57f8:	90800517 	ldw	r2,20(r18)
    57fc:	92000417 	ldw	r8,16(r18)
    5800:	91400017 	ldw	r5,0(r18)
    5804:	1087883a 	add	r3,r2,r2
    5808:	1887883a 	add	r3,r3,r2
    580c:	1808d7fa 	srli	r4,r3,31
    5810:	2a21c83a 	sub	r16,r5,r8
    5814:	80800044 	addi	r2,r16,1
    5818:	20c9883a 	add	r4,r4,r3
    581c:	2027d07a 	srai	r19,r4,1
    5820:	a085883a 	add	r2,r20,r2
    5824:	980d883a 	mov	r6,r19
    5828:	9880022e 	bgeu	r19,r2,5834 <__sfvwrite_r+0x170>
    582c:	1027883a 	mov	r19,r2
    5830:	100d883a 	mov	r6,r2
    5834:	3881000c 	andi	r2,r7,1024
    5838:	1000b826 	beq	r2,zero,5b1c <__sfvwrite_r+0x458>
    583c:	300b883a 	mov	r5,r6
    5840:	e009883a 	mov	r4,fp
    5844:	0005f380 	call	5f38 <_malloc_r>
    5848:	10003126 	beq	r2,zero,5910 <__sfvwrite_r+0x24c>
    584c:	91400417 	ldw	r5,16(r18)
    5850:	1009883a 	mov	r4,r2
    5854:	800d883a 	mov	r6,r16
    5858:	1023883a 	mov	r17,r2
    585c:	00013b40 	call	13b4 <memcpy>
    5860:	90c0030b 	ldhu	r3,12(r18)
    5864:	00beffc4 	movi	r2,-1025
    5868:	1886703a 	and	r3,r3,r2
    586c:	18c02014 	ori	r3,r3,128
    5870:	90c0030d 	sth	r3,12(r18)
    5874:	9c07c83a 	sub	r3,r19,r16
    5878:	8c05883a 	add	r2,r17,r16
    587c:	a00d883a 	mov	r6,r20
    5880:	a021883a 	mov	r16,r20
    5884:	90800015 	stw	r2,0(r18)
    5888:	90c00215 	stw	r3,8(r18)
    588c:	94400415 	stw	r17,16(r18)
    5890:	94c00515 	stw	r19,20(r18)
    5894:	91000017 	ldw	r4,0(r18)
    5898:	b80b883a 	mov	r5,r23
    589c:	a023883a 	mov	r17,r20
    58a0:	000675c0 	call	675c <memmove>
    58a4:	90c00217 	ldw	r3,8(r18)
    58a8:	90800017 	ldw	r2,0(r18)
    58ac:	a027883a 	mov	r19,r20
    58b0:	1c07c83a 	sub	r3,r3,r16
    58b4:	1405883a 	add	r2,r2,r16
    58b8:	90c00215 	stw	r3,8(r18)
    58bc:	a021883a 	mov	r16,r20
    58c0:	90800015 	stw	r2,0(r18)
    58c4:	b0800217 	ldw	r2,8(r22)
    58c8:	1405c83a 	sub	r2,r2,r16
    58cc:	b0800215 	stw	r2,8(r22)
    58d0:	103fa826 	beq	r2,zero,5774 <__sfvwrite_r+0xb0>
    58d4:	a469c83a 	sub	r20,r20,r17
    58d8:	91c0030b 	ldhu	r7,12(r18)
    58dc:	bcef883a 	add	r23,r23,r19
    58e0:	a03fbe1e 	bne	r20,zero,57dc <__sfvwrite_r+0x118>
    58e4:	adc00017 	ldw	r23,0(r21)
    58e8:	ad000117 	ldw	r20,4(r21)
    58ec:	ad400204 	addi	r21,r21,8
    58f0:	003fb906 	br	57d8 <__sfvwrite_r+0x114>
    58f4:	ac400017 	ldw	r17,0(r21)
    58f8:	ac000117 	ldw	r16,4(r21)
    58fc:	ad400204 	addi	r21,r21,8
    5900:	003f8a06 	br	572c <__sfvwrite_r+0x68>
    5904:	91400417 	ldw	r5,16(r18)
    5908:	e009883a 	mov	r4,fp
    590c:	00053b00 	call	53b0 <_free_r>
    5910:	00800304 	movi	r2,12
    5914:	e0800015 	stw	r2,0(fp)
    5918:	9080030b 	ldhu	r2,12(r18)
    591c:	013fffc4 	movi	r4,-1
    5920:	10801014 	ori	r2,r2,64
    5924:	9080030d 	sth	r2,12(r18)
    5928:	003f9306 	br	5778 <__sfvwrite_r+0xb4>
    592c:	0027883a 	mov	r19,zero
    5930:	002f883a 	mov	r23,zero
    5934:	d8000015 	stw	zero,0(sp)
    5938:	0029883a 	mov	r20,zero
    593c:	98001e26 	beq	r19,zero,59b8 <__sfvwrite_r+0x2f4>
    5940:	d8c00017 	ldw	r3,0(sp)
    5944:	1804c03a 	cmpne	r2,r3,zero
    5948:	10005e26 	beq	r2,zero,5ac4 <__sfvwrite_r+0x400>
    594c:	9821883a 	mov	r16,r19
    5950:	a4c0012e 	bgeu	r20,r19,5958 <__sfvwrite_r+0x294>
    5954:	a021883a 	mov	r16,r20
    5958:	91000017 	ldw	r4,0(r18)
    595c:	90800417 	ldw	r2,16(r18)
    5960:	91800217 	ldw	r6,8(r18)
    5964:	91c00517 	ldw	r7,20(r18)
    5968:	1100022e 	bgeu	r2,r4,5974 <__sfvwrite_r+0x2b0>
    596c:	31e3883a 	add	r17,r6,r7
    5970:	8c001616 	blt	r17,r16,59cc <__sfvwrite_r+0x308>
    5974:	81c03816 	blt	r16,r7,5a58 <__sfvwrite_r+0x394>
    5978:	90c00917 	ldw	r3,36(r18)
    597c:	91400717 	ldw	r5,28(r18)
    5980:	e009883a 	mov	r4,fp
    5984:	b80d883a 	mov	r6,r23
    5988:	183ee83a 	callr	r3
    598c:	1023883a 	mov	r17,r2
    5990:	00bfe10e 	bge	zero,r2,5918 <__sfvwrite_r+0x254>
    5994:	a469c83a 	sub	r20,r20,r17
    5998:	a0001826 	beq	r20,zero,59fc <__sfvwrite_r+0x338>
    599c:	b0800217 	ldw	r2,8(r22)
    59a0:	1445c83a 	sub	r2,r2,r17
    59a4:	b0800215 	stw	r2,8(r22)
    59a8:	103f7226 	beq	r2,zero,5774 <__sfvwrite_r+0xb0>
    59ac:	9c67c83a 	sub	r19,r19,r17
    59b0:	bc6f883a 	add	r23,r23,r17
    59b4:	983fe21e 	bne	r19,zero,5940 <__sfvwrite_r+0x27c>
    59b8:	adc00017 	ldw	r23,0(r21)
    59bc:	acc00117 	ldw	r19,4(r21)
    59c0:	ad400204 	addi	r21,r21,8
    59c4:	d8000015 	stw	zero,0(sp)
    59c8:	003fdc06 	br	593c <__sfvwrite_r+0x278>
    59cc:	b80b883a 	mov	r5,r23
    59d0:	880d883a 	mov	r6,r17
    59d4:	000675c0 	call	675c <memmove>
    59d8:	90c00017 	ldw	r3,0(r18)
    59dc:	e009883a 	mov	r4,fp
    59e0:	900b883a 	mov	r5,r18
    59e4:	1c47883a 	add	r3,r3,r17
    59e8:	90c00015 	stw	r3,0(r18)
    59ec:	0004d940 	call	4d94 <_fflush_r>
    59f0:	103fc91e 	bne	r2,zero,5918 <__sfvwrite_r+0x254>
    59f4:	a469c83a 	sub	r20,r20,r17
    59f8:	a03fe81e 	bne	r20,zero,599c <__sfvwrite_r+0x2d8>
    59fc:	e009883a 	mov	r4,fp
    5a00:	900b883a 	mov	r5,r18
    5a04:	0004d940 	call	4d94 <_fflush_r>
    5a08:	103fc31e 	bne	r2,zero,5918 <__sfvwrite_r+0x254>
    5a0c:	d8000015 	stw	zero,0(sp)
    5a10:	003fe206 	br	599c <__sfvwrite_r+0x2d8>
    5a14:	91000017 	ldw	r4,0(r18)
    5a18:	90800417 	ldw	r2,16(r18)
    5a1c:	1100022e 	bgeu	r2,r4,5a28 <__sfvwrite_r+0x364>
    5a20:	8023883a 	mov	r17,r16
    5a24:	85003136 	bltu	r16,r20,5aec <__sfvwrite_r+0x428>
    5a28:	91c00517 	ldw	r7,20(r18)
    5a2c:	a1c01836 	bltu	r20,r7,5a90 <__sfvwrite_r+0x3cc>
    5a30:	90c00917 	ldw	r3,36(r18)
    5a34:	91400717 	ldw	r5,28(r18)
    5a38:	e009883a 	mov	r4,fp
    5a3c:	b80d883a 	mov	r6,r23
    5a40:	183ee83a 	callr	r3
    5a44:	1021883a 	mov	r16,r2
    5a48:	00bfb30e 	bge	zero,r2,5918 <__sfvwrite_r+0x254>
    5a4c:	1023883a 	mov	r17,r2
    5a50:	1027883a 	mov	r19,r2
    5a54:	003f9b06 	br	58c4 <__sfvwrite_r+0x200>
    5a58:	b80b883a 	mov	r5,r23
    5a5c:	800d883a 	mov	r6,r16
    5a60:	000675c0 	call	675c <memmove>
    5a64:	90c00217 	ldw	r3,8(r18)
    5a68:	90800017 	ldw	r2,0(r18)
    5a6c:	8023883a 	mov	r17,r16
    5a70:	1c07c83a 	sub	r3,r3,r16
    5a74:	1405883a 	add	r2,r2,r16
    5a78:	90c00215 	stw	r3,8(r18)
    5a7c:	90800015 	stw	r2,0(r18)
    5a80:	003fc406 	br	5994 <__sfvwrite_r+0x2d0>
    5a84:	a00d883a 	mov	r6,r20
    5a88:	a021883a 	mov	r16,r20
    5a8c:	003f8106 	br	5894 <__sfvwrite_r+0x1d0>
    5a90:	b80b883a 	mov	r5,r23
    5a94:	a00d883a 	mov	r6,r20
    5a98:	000675c0 	call	675c <memmove>
    5a9c:	90c00217 	ldw	r3,8(r18)
    5aa0:	90800017 	ldw	r2,0(r18)
    5aa4:	a021883a 	mov	r16,r20
    5aa8:	1d07c83a 	sub	r3,r3,r20
    5aac:	1505883a 	add	r2,r2,r20
    5ab0:	a023883a 	mov	r17,r20
    5ab4:	a027883a 	mov	r19,r20
    5ab8:	90c00215 	stw	r3,8(r18)
    5abc:	90800015 	stw	r2,0(r18)
    5ac0:	003f8006 	br	58c4 <__sfvwrite_r+0x200>
    5ac4:	b809883a 	mov	r4,r23
    5ac8:	01400284 	movi	r5,10
    5acc:	980d883a 	mov	r6,r19
    5ad0:	00066780 	call	6678 <memchr>
    5ad4:	10001726 	beq	r2,zero,5b34 <__sfvwrite_r+0x470>
    5ad8:	15c5c83a 	sub	r2,r2,r23
    5adc:	15000044 	addi	r20,r2,1
    5ae0:	00800044 	movi	r2,1
    5ae4:	d8800015 	stw	r2,0(sp)
    5ae8:	003f9806 	br	594c <__sfvwrite_r+0x288>
    5aec:	b80b883a 	mov	r5,r23
    5af0:	800d883a 	mov	r6,r16
    5af4:	000675c0 	call	675c <memmove>
    5af8:	90c00017 	ldw	r3,0(r18)
    5afc:	e009883a 	mov	r4,fp
    5b00:	900b883a 	mov	r5,r18
    5b04:	1c07883a 	add	r3,r3,r16
    5b08:	90c00015 	stw	r3,0(r18)
    5b0c:	8027883a 	mov	r19,r16
    5b10:	0004d940 	call	4d94 <_fflush_r>
    5b14:	103f6b26 	beq	r2,zero,58c4 <__sfvwrite_r+0x200>
    5b18:	003f7f06 	br	5918 <__sfvwrite_r+0x254>
    5b1c:	400b883a 	mov	r5,r8
    5b20:	e009883a 	mov	r4,fp
    5b24:	00078300 	call	7830 <_realloc_r>
    5b28:	103f7626 	beq	r2,zero,5904 <__sfvwrite_r+0x240>
    5b2c:	1023883a 	mov	r17,r2
    5b30:	003f5006 	br	5874 <__sfvwrite_r+0x1b0>
    5b34:	00c00044 	movi	r3,1
    5b38:	9d000044 	addi	r20,r19,1
    5b3c:	d8c00015 	stw	r3,0(sp)
    5b40:	003f8206 	br	594c <__sfvwrite_r+0x288>
    5b44:	9080030b 	ldhu	r2,12(r18)
    5b48:	00c00244 	movi	r3,9
    5b4c:	013fffc4 	movi	r4,-1
    5b50:	10801014 	ori	r2,r2,64
    5b54:	9080030d 	sth	r2,12(r18)
    5b58:	e0c00015 	stw	r3,0(fp)
    5b5c:	003f0606 	br	5778 <__sfvwrite_r+0xb4>

00005b60 <_fwalk_reent>:
    5b60:	defff704 	addi	sp,sp,-36
    5b64:	dcc00315 	stw	r19,12(sp)
    5b68:	24c0b804 	addi	r19,r4,736
    5b6c:	dd800615 	stw	r22,24(sp)
    5b70:	dd400515 	stw	r21,20(sp)
    5b74:	dfc00815 	stw	ra,32(sp)
    5b78:	ddc00715 	stw	r23,28(sp)
    5b7c:	dd000415 	stw	r20,16(sp)
    5b80:	dc800215 	stw	r18,8(sp)
    5b84:	dc400115 	stw	r17,4(sp)
    5b88:	dc000015 	stw	r16,0(sp)
    5b8c:	202b883a 	mov	r21,r4
    5b90:	282d883a 	mov	r22,r5
    5b94:	000501c0 	call	501c <__sfp_lock_acquire>
    5b98:	98002126 	beq	r19,zero,5c20 <_fwalk_reent+0xc0>
    5b9c:	002f883a 	mov	r23,zero
    5ba0:	9c800117 	ldw	r18,4(r19)
    5ba4:	9c000217 	ldw	r16,8(r19)
    5ba8:	90bfffc4 	addi	r2,r18,-1
    5bac:	10000d16 	blt	r2,zero,5be4 <_fwalk_reent+0x84>
    5bb0:	0023883a 	mov	r17,zero
    5bb4:	053fffc4 	movi	r20,-1
    5bb8:	8080030f 	ldh	r2,12(r16)
    5bbc:	8c400044 	addi	r17,r17,1
    5bc0:	10000626 	beq	r2,zero,5bdc <_fwalk_reent+0x7c>
    5bc4:	8080038f 	ldh	r2,14(r16)
    5bc8:	800b883a 	mov	r5,r16
    5bcc:	a809883a 	mov	r4,r21
    5bd0:	15000226 	beq	r2,r20,5bdc <_fwalk_reent+0x7c>
    5bd4:	b03ee83a 	callr	r22
    5bd8:	b8aeb03a 	or	r23,r23,r2
    5bdc:	84001704 	addi	r16,r16,92
    5be0:	947ff51e 	bne	r18,r17,5bb8 <_fwalk_reent+0x58>
    5be4:	9cc00017 	ldw	r19,0(r19)
    5be8:	983fed1e 	bne	r19,zero,5ba0 <_fwalk_reent+0x40>
    5bec:	00050200 	call	5020 <__sfp_lock_release>
    5bf0:	b805883a 	mov	r2,r23
    5bf4:	dfc00817 	ldw	ra,32(sp)
    5bf8:	ddc00717 	ldw	r23,28(sp)
    5bfc:	dd800617 	ldw	r22,24(sp)
    5c00:	dd400517 	ldw	r21,20(sp)
    5c04:	dd000417 	ldw	r20,16(sp)
    5c08:	dcc00317 	ldw	r19,12(sp)
    5c0c:	dc800217 	ldw	r18,8(sp)
    5c10:	dc400117 	ldw	r17,4(sp)
    5c14:	dc000017 	ldw	r16,0(sp)
    5c18:	dec00904 	addi	sp,sp,36
    5c1c:	f800283a 	ret
    5c20:	002f883a 	mov	r23,zero
    5c24:	003ff106 	br	5bec <_fwalk_reent+0x8c>

00005c28 <_fwalk>:
    5c28:	defff804 	addi	sp,sp,-32
    5c2c:	dcc00315 	stw	r19,12(sp)
    5c30:	24c0b804 	addi	r19,r4,736
    5c34:	dd400515 	stw	r21,20(sp)
    5c38:	dfc00715 	stw	ra,28(sp)
    5c3c:	dd800615 	stw	r22,24(sp)
    5c40:	dd000415 	stw	r20,16(sp)
    5c44:	dc800215 	stw	r18,8(sp)
    5c48:	dc400115 	stw	r17,4(sp)
    5c4c:	dc000015 	stw	r16,0(sp)
    5c50:	282b883a 	mov	r21,r5
    5c54:	000501c0 	call	501c <__sfp_lock_acquire>
    5c58:	98001f26 	beq	r19,zero,5cd8 <_fwalk+0xb0>
    5c5c:	002d883a 	mov	r22,zero
    5c60:	9c800117 	ldw	r18,4(r19)
    5c64:	9c000217 	ldw	r16,8(r19)
    5c68:	90bfffc4 	addi	r2,r18,-1
    5c6c:	10000c16 	blt	r2,zero,5ca0 <_fwalk+0x78>
    5c70:	0023883a 	mov	r17,zero
    5c74:	053fffc4 	movi	r20,-1
    5c78:	8080030f 	ldh	r2,12(r16)
    5c7c:	8c400044 	addi	r17,r17,1
    5c80:	10000526 	beq	r2,zero,5c98 <_fwalk+0x70>
    5c84:	8080038f 	ldh	r2,14(r16)
    5c88:	8009883a 	mov	r4,r16
    5c8c:	15000226 	beq	r2,r20,5c98 <_fwalk+0x70>
    5c90:	a83ee83a 	callr	r21
    5c94:	b0acb03a 	or	r22,r22,r2
    5c98:	84001704 	addi	r16,r16,92
    5c9c:	947ff61e 	bne	r18,r17,5c78 <_fwalk+0x50>
    5ca0:	9cc00017 	ldw	r19,0(r19)
    5ca4:	983fee1e 	bne	r19,zero,5c60 <_fwalk+0x38>
    5ca8:	00050200 	call	5020 <__sfp_lock_release>
    5cac:	b005883a 	mov	r2,r22
    5cb0:	dfc00717 	ldw	ra,28(sp)
    5cb4:	dd800617 	ldw	r22,24(sp)
    5cb8:	dd400517 	ldw	r21,20(sp)
    5cbc:	dd000417 	ldw	r20,16(sp)
    5cc0:	dcc00317 	ldw	r19,12(sp)
    5cc4:	dc800217 	ldw	r18,8(sp)
    5cc8:	dc400117 	ldw	r17,4(sp)
    5ccc:	dc000017 	ldw	r16,0(sp)
    5cd0:	dec00804 	addi	sp,sp,32
    5cd4:	f800283a 	ret
    5cd8:	002d883a 	mov	r22,zero
    5cdc:	003ff206 	br	5ca8 <_fwalk+0x80>

00005ce0 <__locale_charset>:
    5ce0:	d0a00317 	ldw	r2,-32756(gp)
    5ce4:	f800283a 	ret

00005ce8 <_localeconv_r>:
    5ce8:	00800074 	movhi	r2,1
    5cec:	10867404 	addi	r2,r2,6608
    5cf0:	f800283a 	ret

00005cf4 <localeconv>:
    5cf4:	00800074 	movhi	r2,1
    5cf8:	108eef04 	addi	r2,r2,15292
    5cfc:	11000017 	ldw	r4,0(r2)
    5d00:	0005ce81 	jmpi	5ce8 <_localeconv_r>

00005d04 <_setlocale_r>:
    5d04:	defffc04 	addi	sp,sp,-16
    5d08:	00c00074 	movhi	r3,1
    5d0c:	18c66f04 	addi	r3,r3,6588
    5d10:	dc800215 	stw	r18,8(sp)
    5d14:	dc400115 	stw	r17,4(sp)
    5d18:	dc000015 	stw	r16,0(sp)
    5d1c:	2023883a 	mov	r17,r4
    5d20:	2825883a 	mov	r18,r5
    5d24:	dfc00315 	stw	ra,12(sp)
    5d28:	3021883a 	mov	r16,r6
    5d2c:	3009883a 	mov	r4,r6
    5d30:	180b883a 	mov	r5,r3
    5d34:	30000926 	beq	r6,zero,5d5c <_setlocale_r+0x58>
    5d38:	00080500 	call	8050 <strcmp>
    5d3c:	8009883a 	mov	r4,r16
    5d40:	01400074 	movhi	r5,1
    5d44:	29465a04 	addi	r5,r5,6504
    5d48:	10000b1e 	bne	r2,zero,5d78 <_setlocale_r+0x74>
    5d4c:	8c000d15 	stw	r16,52(r17)
    5d50:	8c800c15 	stw	r18,48(r17)
    5d54:	00c00074 	movhi	r3,1
    5d58:	18c66f04 	addi	r3,r3,6588
    5d5c:	1805883a 	mov	r2,r3
    5d60:	dfc00317 	ldw	ra,12(sp)
    5d64:	dc800217 	ldw	r18,8(sp)
    5d68:	dc400117 	ldw	r17,4(sp)
    5d6c:	dc000017 	ldw	r16,0(sp)
    5d70:	dec00404 	addi	sp,sp,16
    5d74:	f800283a 	ret
    5d78:	00080500 	call	8050 <strcmp>
    5d7c:	0007883a 	mov	r3,zero
    5d80:	103ff226 	beq	r2,zero,5d4c <_setlocale_r+0x48>
    5d84:	003ff506 	br	5d5c <_setlocale_r+0x58>

00005d88 <setlocale>:
    5d88:	01800074 	movhi	r6,1
    5d8c:	318eef04 	addi	r6,r6,15292
    5d90:	2007883a 	mov	r3,r4
    5d94:	31000017 	ldw	r4,0(r6)
    5d98:	280d883a 	mov	r6,r5
    5d9c:	180b883a 	mov	r5,r3
    5da0:	0005d041 	jmpi	5d04 <_setlocale_r>

00005da4 <__smakebuf_r>:
    5da4:	2880030b 	ldhu	r2,12(r5)
    5da8:	deffed04 	addi	sp,sp,-76
    5dac:	dc401015 	stw	r17,64(sp)
    5db0:	1080008c 	andi	r2,r2,2
    5db4:	dc000f15 	stw	r16,60(sp)
    5db8:	dfc01215 	stw	ra,72(sp)
    5dbc:	dc801115 	stw	r18,68(sp)
    5dc0:	2821883a 	mov	r16,r5
    5dc4:	2023883a 	mov	r17,r4
    5dc8:	10000b26 	beq	r2,zero,5df8 <__smakebuf_r+0x54>
    5dcc:	28c010c4 	addi	r3,r5,67
    5dd0:	00800044 	movi	r2,1
    5dd4:	28800515 	stw	r2,20(r5)
    5dd8:	28c00415 	stw	r3,16(r5)
    5ddc:	28c00015 	stw	r3,0(r5)
    5de0:	dfc01217 	ldw	ra,72(sp)
    5de4:	dc801117 	ldw	r18,68(sp)
    5de8:	dc401017 	ldw	r17,64(sp)
    5dec:	dc000f17 	ldw	r16,60(sp)
    5df0:	dec01304 	addi	sp,sp,76
    5df4:	f800283a 	ret
    5df8:	2940038f 	ldh	r5,14(r5)
    5dfc:	28002116 	blt	r5,zero,5e84 <__smakebuf_r+0xe0>
    5e00:	d80d883a 	mov	r6,sp
    5e04:	00084400 	call	8440 <_fstat_r>
    5e08:	10001e16 	blt	r2,zero,5e84 <__smakebuf_r+0xe0>
    5e0c:	d8800117 	ldw	r2,4(sp)
    5e10:	00e00014 	movui	r3,32768
    5e14:	113c000c 	andi	r4,r2,61440
    5e18:	20c03126 	beq	r4,r3,5ee0 <__smakebuf_r+0x13c>
    5e1c:	8080030b 	ldhu	r2,12(r16)
    5e20:	00c80004 	movi	r3,8192
    5e24:	10820014 	ori	r2,r2,2048
    5e28:	8080030d 	sth	r2,12(r16)
    5e2c:	20c01e26 	beq	r4,r3,5ea8 <__smakebuf_r+0x104>
    5e30:	04810004 	movi	r18,1024
    5e34:	8809883a 	mov	r4,r17
    5e38:	900b883a 	mov	r5,r18
    5e3c:	0005f380 	call	5f38 <_malloc_r>
    5e40:	1009883a 	mov	r4,r2
    5e44:	10003126 	beq	r2,zero,5f0c <__smakebuf_r+0x168>
    5e48:	80c0030b 	ldhu	r3,12(r16)
    5e4c:	00800034 	movhi	r2,0
    5e50:	10944404 	addi	r2,r2,20752
    5e54:	88800f15 	stw	r2,60(r17)
    5e58:	18c02014 	ori	r3,r3,128
    5e5c:	84800515 	stw	r18,20(r16)
    5e60:	80c0030d 	sth	r3,12(r16)
    5e64:	81000415 	stw	r4,16(r16)
    5e68:	81000015 	stw	r4,0(r16)
    5e6c:	dfc01217 	ldw	ra,72(sp)
    5e70:	dc801117 	ldw	r18,68(sp)
    5e74:	dc401017 	ldw	r17,64(sp)
    5e78:	dc000f17 	ldw	r16,60(sp)
    5e7c:	dec01304 	addi	sp,sp,76
    5e80:	f800283a 	ret
    5e84:	80c0030b 	ldhu	r3,12(r16)
    5e88:	1880200c 	andi	r2,r3,128
    5e8c:	10000426 	beq	r2,zero,5ea0 <__smakebuf_r+0xfc>
    5e90:	04801004 	movi	r18,64
    5e94:	18820014 	ori	r2,r3,2048
    5e98:	8080030d 	sth	r2,12(r16)
    5e9c:	003fe506 	br	5e34 <__smakebuf_r+0x90>
    5ea0:	04810004 	movi	r18,1024
    5ea4:	003ffb06 	br	5e94 <__smakebuf_r+0xf0>
    5ea8:	8140038f 	ldh	r5,14(r16)
    5eac:	8809883a 	mov	r4,r17
    5eb0:	00084b40 	call	84b4 <_isatty_r>
    5eb4:	103fde26 	beq	r2,zero,5e30 <__smakebuf_r+0x8c>
    5eb8:	8080030b 	ldhu	r2,12(r16)
    5ebc:	80c010c4 	addi	r3,r16,67
    5ec0:	04810004 	movi	r18,1024
    5ec4:	10800054 	ori	r2,r2,1
    5ec8:	8080030d 	sth	r2,12(r16)
    5ecc:	00800044 	movi	r2,1
    5ed0:	80c00415 	stw	r3,16(r16)
    5ed4:	80800515 	stw	r2,20(r16)
    5ed8:	80c00015 	stw	r3,0(r16)
    5edc:	003fd506 	br	5e34 <__smakebuf_r+0x90>
    5ee0:	80c00a17 	ldw	r3,40(r16)
    5ee4:	00800034 	movhi	r2,0
    5ee8:	109fc304 	addi	r2,r2,32524
    5eec:	18bfcb1e 	bne	r3,r2,5e1c <__smakebuf_r+0x78>
    5ef0:	8080030b 	ldhu	r2,12(r16)
    5ef4:	00c10004 	movi	r3,1024
    5ef8:	1825883a 	mov	r18,r3
    5efc:	10c4b03a 	or	r2,r2,r3
    5f00:	8080030d 	sth	r2,12(r16)
    5f04:	80c01315 	stw	r3,76(r16)
    5f08:	003fca06 	br	5e34 <__smakebuf_r+0x90>
    5f0c:	8100030b 	ldhu	r4,12(r16)
    5f10:	2080800c 	andi	r2,r4,512
    5f14:	103fb21e 	bne	r2,zero,5de0 <__smakebuf_r+0x3c>
    5f18:	80c010c4 	addi	r3,r16,67
    5f1c:	21000094 	ori	r4,r4,2
    5f20:	00800044 	movi	r2,1
    5f24:	80800515 	stw	r2,20(r16)
    5f28:	8100030d 	sth	r4,12(r16)
    5f2c:	80c00415 	stw	r3,16(r16)
    5f30:	80c00015 	stw	r3,0(r16)
    5f34:	003faa06 	br	5de0 <__smakebuf_r+0x3c>

00005f38 <_malloc_r>:
    5f38:	defff604 	addi	sp,sp,-40
    5f3c:	28c002c4 	addi	r3,r5,11
    5f40:	00800584 	movi	r2,22
    5f44:	dc800215 	stw	r18,8(sp)
    5f48:	dfc00915 	stw	ra,36(sp)
    5f4c:	df000815 	stw	fp,32(sp)
    5f50:	ddc00715 	stw	r23,28(sp)
    5f54:	dd800615 	stw	r22,24(sp)
    5f58:	dd400515 	stw	r21,20(sp)
    5f5c:	dd000415 	stw	r20,16(sp)
    5f60:	dcc00315 	stw	r19,12(sp)
    5f64:	dc400115 	stw	r17,4(sp)
    5f68:	dc000015 	stw	r16,0(sp)
    5f6c:	2025883a 	mov	r18,r4
    5f70:	10c01236 	bltu	r2,r3,5fbc <_malloc_r+0x84>
    5f74:	04400404 	movi	r17,16
    5f78:	8940142e 	bgeu	r17,r5,5fcc <_malloc_r+0x94>
    5f7c:	00800304 	movi	r2,12
    5f80:	0007883a 	mov	r3,zero
    5f84:	90800015 	stw	r2,0(r18)
    5f88:	1805883a 	mov	r2,r3
    5f8c:	dfc00917 	ldw	ra,36(sp)
    5f90:	df000817 	ldw	fp,32(sp)
    5f94:	ddc00717 	ldw	r23,28(sp)
    5f98:	dd800617 	ldw	r22,24(sp)
    5f9c:	dd400517 	ldw	r21,20(sp)
    5fa0:	dd000417 	ldw	r20,16(sp)
    5fa4:	dcc00317 	ldw	r19,12(sp)
    5fa8:	dc800217 	ldw	r18,8(sp)
    5fac:	dc400117 	ldw	r17,4(sp)
    5fb0:	dc000017 	ldw	r16,0(sp)
    5fb4:	dec00a04 	addi	sp,sp,40
    5fb8:	f800283a 	ret
    5fbc:	00bffe04 	movi	r2,-8
    5fc0:	18a2703a 	and	r17,r3,r2
    5fc4:	883fed16 	blt	r17,zero,5f7c <_malloc_r+0x44>
    5fc8:	897fec36 	bltu	r17,r5,5f7c <_malloc_r+0x44>
    5fcc:	9009883a 	mov	r4,r18
    5fd0:	000b2880 	call	b288 <__malloc_lock>
    5fd4:	00807dc4 	movi	r2,503
    5fd8:	14402b2e 	bgeu	r2,r17,6088 <_malloc_r+0x150>
    5fdc:	8806d27a 	srli	r3,r17,9
    5fe0:	18003f1e 	bne	r3,zero,60e0 <_malloc_r+0x1a8>
    5fe4:	880cd0fa 	srli	r6,r17,3
    5fe8:	300490fa 	slli	r2,r6,3
    5fec:	02c00074 	movhi	r11,1
    5ff0:	5ac87e04 	addi	r11,r11,8696
    5ff4:	12cb883a 	add	r5,r2,r11
    5ff8:	2c000317 	ldw	r16,12(r5)
    5ffc:	580f883a 	mov	r7,r11
    6000:	2c00041e 	bne	r5,r16,6014 <_malloc_r+0xdc>
    6004:	00000a06 	br	6030 <_malloc_r+0xf8>
    6008:	1800860e 	bge	r3,zero,6224 <_malloc_r+0x2ec>
    600c:	84000317 	ldw	r16,12(r16)
    6010:	2c000726 	beq	r5,r16,6030 <_malloc_r+0xf8>
    6014:	80800117 	ldw	r2,4(r16)
    6018:	00ffff04 	movi	r3,-4
    601c:	10c8703a 	and	r4,r2,r3
    6020:	2447c83a 	sub	r3,r4,r17
    6024:	008003c4 	movi	r2,15
    6028:	10fff70e 	bge	r2,r3,6008 <_malloc_r+0xd0>
    602c:	31bfffc4 	addi	r6,r6,-1
    6030:	32400044 	addi	r9,r6,1
    6034:	02800074 	movhi	r10,1
    6038:	52888004 	addi	r10,r10,8704
    603c:	54000217 	ldw	r16,8(r10)
    6040:	8280a026 	beq	r16,r10,62c4 <_malloc_r+0x38c>
    6044:	80800117 	ldw	r2,4(r16)
    6048:	00ffff04 	movi	r3,-4
    604c:	10ca703a 	and	r5,r2,r3
    6050:	2c4dc83a 	sub	r6,r5,r17
    6054:	008003c4 	movi	r2,15
    6058:	11808316 	blt	r2,r6,6268 <_malloc_r+0x330>
    605c:	52800315 	stw	r10,12(r10)
    6060:	52800215 	stw	r10,8(r10)
    6064:	30002916 	blt	r6,zero,610c <_malloc_r+0x1d4>
    6068:	8147883a 	add	r3,r16,r5
    606c:	18800117 	ldw	r2,4(r3)
    6070:	9009883a 	mov	r4,r18
    6074:	10800054 	ori	r2,r2,1
    6078:	18800115 	stw	r2,4(r3)
    607c:	000b2a80 	call	b2a8 <__malloc_unlock>
    6080:	80c00204 	addi	r3,r16,8
    6084:	003fc006 	br	5f88 <_malloc_r+0x50>
    6088:	02c00074 	movhi	r11,1
    608c:	5ac87e04 	addi	r11,r11,8696
    6090:	8ac5883a 	add	r2,r17,r11
    6094:	14000317 	ldw	r16,12(r2)
    6098:	580f883a 	mov	r7,r11
    609c:	8806d0fa 	srli	r3,r17,3
    60a0:	14006c26 	beq	r2,r16,6254 <_malloc_r+0x31c>
    60a4:	80c00117 	ldw	r3,4(r16)
    60a8:	00bfff04 	movi	r2,-4
    60ac:	81800317 	ldw	r6,12(r16)
    60b0:	1886703a 	and	r3,r3,r2
    60b4:	80c7883a 	add	r3,r16,r3
    60b8:	18800117 	ldw	r2,4(r3)
    60bc:	81400217 	ldw	r5,8(r16)
    60c0:	9009883a 	mov	r4,r18
    60c4:	10800054 	ori	r2,r2,1
    60c8:	18800115 	stw	r2,4(r3)
    60cc:	31400215 	stw	r5,8(r6)
    60d0:	29800315 	stw	r6,12(r5)
    60d4:	000b2a80 	call	b2a8 <__malloc_unlock>
    60d8:	80c00204 	addi	r3,r16,8
    60dc:	003faa06 	br	5f88 <_malloc_r+0x50>
    60e0:	00800104 	movi	r2,4
    60e4:	10c0052e 	bgeu	r2,r3,60fc <_malloc_r+0x1c4>
    60e8:	00800504 	movi	r2,20
    60ec:	10c07836 	bltu	r2,r3,62d0 <_malloc_r+0x398>
    60f0:	198016c4 	addi	r6,r3,91
    60f4:	300490fa 	slli	r2,r6,3
    60f8:	003fbc06 	br	5fec <_malloc_r+0xb4>
    60fc:	8804d1ba 	srli	r2,r17,6
    6100:	11800e04 	addi	r6,r2,56
    6104:	300490fa 	slli	r2,r6,3
    6108:	003fb806 	br	5fec <_malloc_r+0xb4>
    610c:	00807fc4 	movi	r2,511
    6110:	1140bb36 	bltu	r2,r5,6400 <_malloc_r+0x4c8>
    6114:	2806d0fa 	srli	r3,r5,3
    6118:	573ffe04 	addi	fp,r10,-8
    611c:	00800044 	movi	r2,1
    6120:	180890fa 	slli	r4,r3,3
    6124:	1807d0ba 	srai	r3,r3,2
    6128:	e1c00117 	ldw	r7,4(fp)
    612c:	5909883a 	add	r4,r11,r4
    6130:	21400217 	ldw	r5,8(r4)
    6134:	10c4983a 	sll	r2,r2,r3
    6138:	81000315 	stw	r4,12(r16)
    613c:	81400215 	stw	r5,8(r16)
    6140:	388eb03a 	or	r7,r7,r2
    6144:	2c000315 	stw	r16,12(r5)
    6148:	24000215 	stw	r16,8(r4)
    614c:	e1c00115 	stw	r7,4(fp)
    6150:	4807883a 	mov	r3,r9
    6154:	4800cd16 	blt	r9,zero,648c <_malloc_r+0x554>
    6158:	1807d0ba 	srai	r3,r3,2
    615c:	00800044 	movi	r2,1
    6160:	10c8983a 	sll	r4,r2,r3
    6164:	39004436 	bltu	r7,r4,6278 <_malloc_r+0x340>
    6168:	21c4703a 	and	r2,r4,r7
    616c:	10000a1e 	bne	r2,zero,6198 <_malloc_r+0x260>
    6170:	2109883a 	add	r4,r4,r4
    6174:	00bfff04 	movi	r2,-4
    6178:	4884703a 	and	r2,r9,r2
    617c:	3906703a 	and	r3,r7,r4
    6180:	12400104 	addi	r9,r2,4
    6184:	1800041e 	bne	r3,zero,6198 <_malloc_r+0x260>
    6188:	2109883a 	add	r4,r4,r4
    618c:	3904703a 	and	r2,r7,r4
    6190:	4a400104 	addi	r9,r9,4
    6194:	103ffc26 	beq	r2,zero,6188 <_malloc_r+0x250>
    6198:	480490fa 	slli	r2,r9,3
    619c:	4819883a 	mov	r12,r9
    61a0:	023fff04 	movi	r8,-4
    61a4:	589b883a 	add	r13,r11,r2
    61a8:	6807883a 	mov	r3,r13
    61ac:	014003c4 	movi	r5,15
    61b0:	1c000317 	ldw	r16,12(r3)
    61b4:	1c00041e 	bne	r3,r16,61c8 <_malloc_r+0x290>
    61b8:	0000a706 	br	6458 <_malloc_r+0x520>
    61bc:	3000ab0e 	bge	r6,zero,646c <_malloc_r+0x534>
    61c0:	84000317 	ldw	r16,12(r16)
    61c4:	1c00a426 	beq	r3,r16,6458 <_malloc_r+0x520>
    61c8:	80800117 	ldw	r2,4(r16)
    61cc:	1204703a 	and	r2,r2,r8
    61d0:	144dc83a 	sub	r6,r2,r17
    61d4:	29bff90e 	bge	r5,r6,61bc <_malloc_r+0x284>
    61d8:	81000317 	ldw	r4,12(r16)
    61dc:	80c00217 	ldw	r3,8(r16)
    61e0:	89400054 	ori	r5,r17,1
    61e4:	8445883a 	add	r2,r16,r17
    61e8:	20c00215 	stw	r3,8(r4)
    61ec:	19000315 	stw	r4,12(r3)
    61f0:	81400115 	stw	r5,4(r16)
    61f4:	1187883a 	add	r3,r2,r6
    61f8:	31000054 	ori	r4,r6,1
    61fc:	50800315 	stw	r2,12(r10)
    6200:	50800215 	stw	r2,8(r10)
    6204:	19800015 	stw	r6,0(r3)
    6208:	11000115 	stw	r4,4(r2)
    620c:	12800215 	stw	r10,8(r2)
    6210:	12800315 	stw	r10,12(r2)
    6214:	9009883a 	mov	r4,r18
    6218:	000b2a80 	call	b2a8 <__malloc_unlock>
    621c:	80c00204 	addi	r3,r16,8
    6220:	003f5906 	br	5f88 <_malloc_r+0x50>
    6224:	8109883a 	add	r4,r16,r4
    6228:	20800117 	ldw	r2,4(r4)
    622c:	80c00217 	ldw	r3,8(r16)
    6230:	81400317 	ldw	r5,12(r16)
    6234:	10800054 	ori	r2,r2,1
    6238:	20800115 	stw	r2,4(r4)
    623c:	28c00215 	stw	r3,8(r5)
    6240:	19400315 	stw	r5,12(r3)
    6244:	9009883a 	mov	r4,r18
    6248:	000b2a80 	call	b2a8 <__malloc_unlock>
    624c:	80c00204 	addi	r3,r16,8
    6250:	003f4d06 	br	5f88 <_malloc_r+0x50>
    6254:	80800204 	addi	r2,r16,8
    6258:	14000317 	ldw	r16,12(r2)
    625c:	143f911e 	bne	r2,r16,60a4 <_malloc_r+0x16c>
    6260:	1a400084 	addi	r9,r3,2
    6264:	003f7306 	br	6034 <_malloc_r+0xfc>
    6268:	88c00054 	ori	r3,r17,1
    626c:	8445883a 	add	r2,r16,r17
    6270:	80c00115 	stw	r3,4(r16)
    6274:	003fdf06 	br	61f4 <_malloc_r+0x2bc>
    6278:	e4000217 	ldw	r16,8(fp)
    627c:	00bfff04 	movi	r2,-4
    6280:	80c00117 	ldw	r3,4(r16)
    6284:	802d883a 	mov	r22,r16
    6288:	18aa703a 	and	r21,r3,r2
    628c:	ac401636 	bltu	r21,r17,62e8 <_malloc_r+0x3b0>
    6290:	ac49c83a 	sub	r4,r21,r17
    6294:	008003c4 	movi	r2,15
    6298:	1100130e 	bge	r2,r4,62e8 <_malloc_r+0x3b0>
    629c:	88800054 	ori	r2,r17,1
    62a0:	8447883a 	add	r3,r16,r17
    62a4:	80800115 	stw	r2,4(r16)
    62a8:	20800054 	ori	r2,r4,1
    62ac:	18800115 	stw	r2,4(r3)
    62b0:	e0c00215 	stw	r3,8(fp)
    62b4:	9009883a 	mov	r4,r18
    62b8:	000b2a80 	call	b2a8 <__malloc_unlock>
    62bc:	80c00204 	addi	r3,r16,8
    62c0:	003f3106 	br	5f88 <_malloc_r+0x50>
    62c4:	39c00117 	ldw	r7,4(r7)
    62c8:	573ffe04 	addi	fp,r10,-8
    62cc:	003fa006 	br	6150 <_malloc_r+0x218>
    62d0:	00801504 	movi	r2,84
    62d4:	10c06736 	bltu	r2,r3,6474 <_malloc_r+0x53c>
    62d8:	8804d33a 	srli	r2,r17,12
    62dc:	11801b84 	addi	r6,r2,110
    62e0:	300490fa 	slli	r2,r6,3
    62e4:	003f4106 	br	5fec <_malloc_r+0xb4>
    62e8:	d0a79c17 	ldw	r2,-24976(gp)
    62ec:	d0e00517 	ldw	r3,-32748(gp)
    62f0:	053fffc4 	movi	r20,-1
    62f4:	10800404 	addi	r2,r2,16
    62f8:	88a7883a 	add	r19,r17,r2
    62fc:	1d000326 	beq	r3,r20,630c <_malloc_r+0x3d4>
    6300:	98c3ffc4 	addi	r3,r19,4095
    6304:	00bc0004 	movi	r2,-4096
    6308:	18a6703a 	and	r19,r3,r2
    630c:	9009883a 	mov	r4,r18
    6310:	980b883a 	mov	r5,r19
    6314:	0007e940 	call	7e94 <_sbrk_r>
    6318:	1009883a 	mov	r4,r2
    631c:	15000426 	beq	r2,r20,6330 <_malloc_r+0x3f8>
    6320:	854b883a 	add	r5,r16,r21
    6324:	1029883a 	mov	r20,r2
    6328:	11405a2e 	bgeu	r2,r5,6494 <_malloc_r+0x55c>
    632c:	87000c26 	beq	r16,fp,6360 <_malloc_r+0x428>
    6330:	e4000217 	ldw	r16,8(fp)
    6334:	80c00117 	ldw	r3,4(r16)
    6338:	00bfff04 	movi	r2,-4
    633c:	1884703a 	and	r2,r3,r2
    6340:	14400336 	bltu	r2,r17,6350 <_malloc_r+0x418>
    6344:	1449c83a 	sub	r4,r2,r17
    6348:	008003c4 	movi	r2,15
    634c:	113fd316 	blt	r2,r4,629c <_malloc_r+0x364>
    6350:	9009883a 	mov	r4,r18
    6354:	000b2a80 	call	b2a8 <__malloc_unlock>
    6358:	0007883a 	mov	r3,zero
    635c:	003f0a06 	br	5f88 <_malloc_r+0x50>
    6360:	05c00074 	movhi	r23,1
    6364:	bdd69504 	addi	r23,r23,23124
    6368:	b8800017 	ldw	r2,0(r23)
    636c:	988d883a 	add	r6,r19,r2
    6370:	b9800015 	stw	r6,0(r23)
    6374:	d0e00517 	ldw	r3,-32748(gp)
    6378:	00bfffc4 	movi	r2,-1
    637c:	18808e26 	beq	r3,r2,65b8 <_malloc_r+0x680>
    6380:	2145c83a 	sub	r2,r4,r5
    6384:	3085883a 	add	r2,r6,r2
    6388:	b8800015 	stw	r2,0(r23)
    638c:	20c001cc 	andi	r3,r4,7
    6390:	18005f1e 	bne	r3,zero,6510 <_malloc_r+0x5d8>
    6394:	000b883a 	mov	r5,zero
    6398:	a4c5883a 	add	r2,r20,r19
    639c:	1083ffcc 	andi	r2,r2,4095
    63a0:	00c40004 	movi	r3,4096
    63a4:	1887c83a 	sub	r3,r3,r2
    63a8:	28e7883a 	add	r19,r5,r3
    63ac:	9009883a 	mov	r4,r18
    63b0:	980b883a 	mov	r5,r19
    63b4:	0007e940 	call	7e94 <_sbrk_r>
    63b8:	1007883a 	mov	r3,r2
    63bc:	00bfffc4 	movi	r2,-1
    63c0:	18807a26 	beq	r3,r2,65ac <_malloc_r+0x674>
    63c4:	1d05c83a 	sub	r2,r3,r20
    63c8:	9885883a 	add	r2,r19,r2
    63cc:	10c00054 	ori	r3,r2,1
    63d0:	b8800017 	ldw	r2,0(r23)
    63d4:	a021883a 	mov	r16,r20
    63d8:	a0c00115 	stw	r3,4(r20)
    63dc:	9885883a 	add	r2,r19,r2
    63e0:	b8800015 	stw	r2,0(r23)
    63e4:	e5000215 	stw	r20,8(fp)
    63e8:	b7003626 	beq	r22,fp,64c4 <_malloc_r+0x58c>
    63ec:	018003c4 	movi	r6,15
    63f0:	35404b36 	bltu	r6,r21,6520 <_malloc_r+0x5e8>
    63f4:	00800044 	movi	r2,1
    63f8:	a0800115 	stw	r2,4(r20)
    63fc:	003fcd06 	br	6334 <_malloc_r+0x3fc>
    6400:	2808d27a 	srli	r4,r5,9
    6404:	2000371e 	bne	r4,zero,64e4 <_malloc_r+0x5ac>
    6408:	2808d0fa 	srli	r4,r5,3
    640c:	200690fa 	slli	r3,r4,3
    6410:	1ad1883a 	add	r8,r3,r11
    6414:	41800217 	ldw	r6,8(r8)
    6418:	41805b26 	beq	r8,r6,6588 <_malloc_r+0x650>
    641c:	30800117 	ldw	r2,4(r6)
    6420:	00ffff04 	movi	r3,-4
    6424:	10c4703a 	and	r2,r2,r3
    6428:	2880022e 	bgeu	r5,r2,6434 <_malloc_r+0x4fc>
    642c:	31800217 	ldw	r6,8(r6)
    6430:	41bffa1e 	bne	r8,r6,641c <_malloc_r+0x4e4>
    6434:	32000317 	ldw	r8,12(r6)
    6438:	39c00117 	ldw	r7,4(r7)
    643c:	82000315 	stw	r8,12(r16)
    6440:	81800215 	stw	r6,8(r16)
    6444:	07000074 	movhi	fp,1
    6448:	e7087e04 	addi	fp,fp,8696
    644c:	34000315 	stw	r16,12(r6)
    6450:	44000215 	stw	r16,8(r8)
    6454:	003f3e06 	br	6150 <_malloc_r+0x218>
    6458:	63000044 	addi	r12,r12,1
    645c:	608000cc 	andi	r2,r12,3
    6460:	10005d26 	beq	r2,zero,65d8 <_malloc_r+0x6a0>
    6464:	18c00204 	addi	r3,r3,8
    6468:	003f5106 	br	61b0 <_malloc_r+0x278>
    646c:	8089883a 	add	r4,r16,r2
    6470:	003f6d06 	br	6228 <_malloc_r+0x2f0>
    6474:	00805504 	movi	r2,340
    6478:	10c02036 	bltu	r2,r3,64fc <_malloc_r+0x5c4>
    647c:	8804d3fa 	srli	r2,r17,15
    6480:	11801dc4 	addi	r6,r2,119
    6484:	300490fa 	slli	r2,r6,3
    6488:	003ed806 	br	5fec <_malloc_r+0xb4>
    648c:	48c000c4 	addi	r3,r9,3
    6490:	003f3106 	br	6158 <_malloc_r+0x220>
    6494:	05c00074 	movhi	r23,1
    6498:	bdd69504 	addi	r23,r23,23124
    649c:	b8800017 	ldw	r2,0(r23)
    64a0:	988d883a 	add	r6,r19,r2
    64a4:	b9800015 	stw	r6,0(r23)
    64a8:	293fb21e 	bne	r5,r4,6374 <_malloc_r+0x43c>
    64ac:	2083ffcc 	andi	r2,r4,4095
    64b0:	103fb01e 	bne	r2,zero,6374 <_malloc_r+0x43c>
    64b4:	e4000217 	ldw	r16,8(fp)
    64b8:	9d45883a 	add	r2,r19,r21
    64bc:	10800054 	ori	r2,r2,1
    64c0:	80800115 	stw	r2,4(r16)
    64c4:	b8c00017 	ldw	r3,0(r23)
    64c8:	d0a79d17 	ldw	r2,-24972(gp)
    64cc:	10c0012e 	bgeu	r2,r3,64d4 <_malloc_r+0x59c>
    64d0:	d0e79d15 	stw	r3,-24972(gp)
    64d4:	d0a79e17 	ldw	r2,-24968(gp)
    64d8:	10ff962e 	bgeu	r2,r3,6334 <_malloc_r+0x3fc>
    64dc:	d0e79e15 	stw	r3,-24968(gp)
    64e0:	003f9406 	br	6334 <_malloc_r+0x3fc>
    64e4:	00800104 	movi	r2,4
    64e8:	11001e36 	bltu	r2,r4,6564 <_malloc_r+0x62c>
    64ec:	2804d1ba 	srli	r2,r5,6
    64f0:	11000e04 	addi	r4,r2,56
    64f4:	200690fa 	slli	r3,r4,3
    64f8:	003fc506 	br	6410 <_malloc_r+0x4d8>
    64fc:	00815504 	movi	r2,1364
    6500:	10c01d2e 	bgeu	r2,r3,6578 <_malloc_r+0x640>
    6504:	01801f84 	movi	r6,126
    6508:	0080fc04 	movi	r2,1008
    650c:	003eb706 	br	5fec <_malloc_r+0xb4>
    6510:	00800204 	movi	r2,8
    6514:	10cbc83a 	sub	r5,r2,r3
    6518:	2169883a 	add	r20,r4,r5
    651c:	003f9e06 	br	6398 <_malloc_r+0x460>
    6520:	00bffe04 	movi	r2,-8
    6524:	a93ffd04 	addi	r4,r21,-12
    6528:	2088703a 	and	r4,r4,r2
    652c:	b10b883a 	add	r5,r22,r4
    6530:	00c00144 	movi	r3,5
    6534:	28c00215 	stw	r3,8(r5)
    6538:	28c00115 	stw	r3,4(r5)
    653c:	b0800117 	ldw	r2,4(r22)
    6540:	1080004c 	andi	r2,r2,1
    6544:	2084b03a 	or	r2,r4,r2
    6548:	b0800115 	stw	r2,4(r22)
    654c:	313fdd2e 	bgeu	r6,r4,64c4 <_malloc_r+0x58c>
    6550:	b1400204 	addi	r5,r22,8
    6554:	9009883a 	mov	r4,r18
    6558:	00053b00 	call	53b0 <_free_r>
    655c:	e4000217 	ldw	r16,8(fp)
    6560:	003fd806 	br	64c4 <_malloc_r+0x58c>
    6564:	00800504 	movi	r2,20
    6568:	11001536 	bltu	r2,r4,65c0 <_malloc_r+0x688>
    656c:	210016c4 	addi	r4,r4,91
    6570:	200690fa 	slli	r3,r4,3
    6574:	003fa606 	br	6410 <_malloc_r+0x4d8>
    6578:	8804d4ba 	srli	r2,r17,18
    657c:	11801f04 	addi	r6,r2,124
    6580:	300490fa 	slli	r2,r6,3
    6584:	003e9906 	br	5fec <_malloc_r+0xb4>
    6588:	2009d0ba 	srai	r4,r4,2
    658c:	01400074 	movhi	r5,1
    6590:	29487e04 	addi	r5,r5,8696
    6594:	00c00044 	movi	r3,1
    6598:	28800117 	ldw	r2,4(r5)
    659c:	1906983a 	sll	r3,r3,r4
    65a0:	10c4b03a 	or	r2,r2,r3
    65a4:	28800115 	stw	r2,4(r5)
    65a8:	003fa306 	br	6438 <_malloc_r+0x500>
    65ac:	0027883a 	mov	r19,zero
    65b0:	00c00044 	movi	r3,1
    65b4:	003f8606 	br	63d0 <_malloc_r+0x498>
    65b8:	d1200515 	stw	r4,-32748(gp)
    65bc:	003f7306 	br	638c <_malloc_r+0x454>
    65c0:	00801504 	movi	r2,84
    65c4:	11001936 	bltu	r2,r4,662c <_malloc_r+0x6f4>
    65c8:	2804d33a 	srli	r2,r5,12
    65cc:	11001b84 	addi	r4,r2,110
    65d0:	200690fa 	slli	r3,r4,3
    65d4:	003f8e06 	br	6410 <_malloc_r+0x4d8>
    65d8:	480b883a 	mov	r5,r9
    65dc:	6807883a 	mov	r3,r13
    65e0:	288000cc 	andi	r2,r5,3
    65e4:	18fffe04 	addi	r3,r3,-8
    65e8:	297fffc4 	addi	r5,r5,-1
    65ec:	10001526 	beq	r2,zero,6644 <_malloc_r+0x70c>
    65f0:	18800217 	ldw	r2,8(r3)
    65f4:	10fffa26 	beq	r2,r3,65e0 <_malloc_r+0x6a8>
    65f8:	2109883a 	add	r4,r4,r4
    65fc:	393f1e36 	bltu	r7,r4,6278 <_malloc_r+0x340>
    6600:	203f1d26 	beq	r4,zero,6278 <_malloc_r+0x340>
    6604:	21c4703a 	and	r2,r4,r7
    6608:	10000226 	beq	r2,zero,6614 <_malloc_r+0x6dc>
    660c:	6013883a 	mov	r9,r12
    6610:	003ee106 	br	6198 <_malloc_r+0x260>
    6614:	2109883a 	add	r4,r4,r4
    6618:	3904703a 	and	r2,r7,r4
    661c:	63000104 	addi	r12,r12,4
    6620:	103ffc26 	beq	r2,zero,6614 <_malloc_r+0x6dc>
    6624:	6013883a 	mov	r9,r12
    6628:	003edb06 	br	6198 <_malloc_r+0x260>
    662c:	00805504 	movi	r2,340
    6630:	11000836 	bltu	r2,r4,6654 <_malloc_r+0x71c>
    6634:	2804d3fa 	srli	r2,r5,15
    6638:	11001dc4 	addi	r4,r2,119
    663c:	200690fa 	slli	r3,r4,3
    6640:	003f7306 	br	6410 <_malloc_r+0x4d8>
    6644:	0104303a 	nor	r2,zero,r4
    6648:	388e703a 	and	r7,r7,r2
    664c:	e1c00115 	stw	r7,4(fp)
    6650:	003fe906 	br	65f8 <_malloc_r+0x6c0>
    6654:	00815504 	movi	r2,1364
    6658:	1100032e 	bgeu	r2,r4,6668 <_malloc_r+0x730>
    665c:	01001f84 	movi	r4,126
    6660:	00c0fc04 	movi	r3,1008
    6664:	003f6a06 	br	6410 <_malloc_r+0x4d8>
    6668:	2804d4ba 	srli	r2,r5,18
    666c:	11001f04 	addi	r4,r2,124
    6670:	200690fa 	slli	r3,r4,3
    6674:	003f6606 	br	6410 <_malloc_r+0x4d8>

00006678 <memchr>:
    6678:	008000c4 	movi	r2,3
    667c:	29403fcc 	andi	r5,r5,255
    6680:	2007883a 	mov	r3,r4
    6684:	1180022e 	bgeu	r2,r6,6690 <memchr+0x18>
    6688:	2084703a 	and	r2,r4,r2
    668c:	10000b26 	beq	r2,zero,66bc <memchr+0x44>
    6690:	313fffc4 	addi	r4,r6,-1
    6694:	3000051e 	bne	r6,zero,66ac <memchr+0x34>
    6698:	00002c06 	br	674c <memchr+0xd4>
    669c:	213fffc4 	addi	r4,r4,-1
    66a0:	00bfffc4 	movi	r2,-1
    66a4:	18c00044 	addi	r3,r3,1
    66a8:	20802826 	beq	r4,r2,674c <memchr+0xd4>
    66ac:	18800003 	ldbu	r2,0(r3)
    66b0:	28bffa1e 	bne	r5,r2,669c <memchr+0x24>
    66b4:	1805883a 	mov	r2,r3
    66b8:	f800283a 	ret
    66bc:	0011883a 	mov	r8,zero
    66c0:	0007883a 	mov	r3,zero
    66c4:	01c00104 	movi	r7,4
    66c8:	4004923a 	slli	r2,r8,8
    66cc:	18c00044 	addi	r3,r3,1
    66d0:	1151883a 	add	r8,r2,r5
    66d4:	19fffc1e 	bne	r3,r7,66c8 <memchr+0x50>
    66d8:	02bfbff4 	movhi	r10,65279
    66dc:	52bfbfc4 	addi	r10,r10,-257
    66e0:	02602074 	movhi	r9,32897
    66e4:	4a602004 	addi	r9,r9,-32640
    66e8:	02c000c4 	movi	r11,3
    66ec:	20800017 	ldw	r2,0(r4)
    66f0:	31bfff04 	addi	r6,r6,-4
    66f4:	200f883a 	mov	r7,r4
    66f8:	1204f03a 	xor	r2,r2,r8
    66fc:	1287883a 	add	r3,r2,r10
    6700:	1a46703a 	and	r3,r3,r9
    6704:	0084303a 	nor	r2,zero,r2
    6708:	10c4703a 	and	r2,r2,r3
    670c:	10000b26 	beq	r2,zero,673c <memchr+0xc4>
    6710:	20800003 	ldbu	r2,0(r4)
    6714:	28800f26 	beq	r5,r2,6754 <memchr+0xdc>
    6718:	20800043 	ldbu	r2,1(r4)
    671c:	21c00044 	addi	r7,r4,1
    6720:	28800c26 	beq	r5,r2,6754 <memchr+0xdc>
    6724:	20800083 	ldbu	r2,2(r4)
    6728:	21c00084 	addi	r7,r4,2
    672c:	28800926 	beq	r5,r2,6754 <memchr+0xdc>
    6730:	208000c3 	ldbu	r2,3(r4)
    6734:	21c000c4 	addi	r7,r4,3
    6738:	28800626 	beq	r5,r2,6754 <memchr+0xdc>
    673c:	21000104 	addi	r4,r4,4
    6740:	59bfea36 	bltu	r11,r6,66ec <memchr+0x74>
    6744:	2007883a 	mov	r3,r4
    6748:	003fd106 	br	6690 <memchr+0x18>
    674c:	0005883a 	mov	r2,zero
    6750:	f800283a 	ret
    6754:	3805883a 	mov	r2,r7
    6758:	f800283a 	ret

0000675c <memmove>:
    675c:	2807883a 	mov	r3,r5
    6760:	2011883a 	mov	r8,r4
    6764:	29000c2e 	bgeu	r5,r4,6798 <memmove+0x3c>
    6768:	298f883a 	add	r7,r5,r6
    676c:	21c00a2e 	bgeu	r4,r7,6798 <memmove+0x3c>
    6770:	30000726 	beq	r6,zero,6790 <memmove+0x34>
    6774:	2187883a 	add	r3,r4,r6
    6778:	198dc83a 	sub	r6,r3,r6
    677c:	39ffffc4 	addi	r7,r7,-1
    6780:	38800003 	ldbu	r2,0(r7)
    6784:	18ffffc4 	addi	r3,r3,-1
    6788:	18800005 	stb	r2,0(r3)
    678c:	19bffb1e 	bne	r3,r6,677c <memmove+0x20>
    6790:	2005883a 	mov	r2,r4
    6794:	f800283a 	ret
    6798:	01c003c4 	movi	r7,15
    679c:	39800a36 	bltu	r7,r6,67c8 <memmove+0x6c>
    67a0:	303ffb26 	beq	r6,zero,6790 <memmove+0x34>
    67a4:	400f883a 	mov	r7,r8
    67a8:	320d883a 	add	r6,r6,r8
    67ac:	28800003 	ldbu	r2,0(r5)
    67b0:	29400044 	addi	r5,r5,1
    67b4:	38800005 	stb	r2,0(r7)
    67b8:	39c00044 	addi	r7,r7,1
    67bc:	39bffb1e 	bne	r7,r6,67ac <memmove+0x50>
    67c0:	2005883a 	mov	r2,r4
    67c4:	f800283a 	ret
    67c8:	1904b03a 	or	r2,r3,r4
    67cc:	108000cc 	andi	r2,r2,3
    67d0:	103ff31e 	bne	r2,zero,67a0 <memmove+0x44>
    67d4:	3811883a 	mov	r8,r7
    67d8:	180b883a 	mov	r5,r3
    67dc:	200f883a 	mov	r7,r4
    67e0:	28c00017 	ldw	r3,0(r5)
    67e4:	31bffc04 	addi	r6,r6,-16
    67e8:	38c00015 	stw	r3,0(r7)
    67ec:	28800117 	ldw	r2,4(r5)
    67f0:	38800115 	stw	r2,4(r7)
    67f4:	28c00217 	ldw	r3,8(r5)
    67f8:	38c00215 	stw	r3,8(r7)
    67fc:	28800317 	ldw	r2,12(r5)
    6800:	29400404 	addi	r5,r5,16
    6804:	38800315 	stw	r2,12(r7)
    6808:	39c00404 	addi	r7,r7,16
    680c:	41bff436 	bltu	r8,r6,67e0 <memmove+0x84>
    6810:	008000c4 	movi	r2,3
    6814:	1180072e 	bgeu	r2,r6,6834 <memmove+0xd8>
    6818:	1007883a 	mov	r3,r2
    681c:	28800017 	ldw	r2,0(r5)
    6820:	31bfff04 	addi	r6,r6,-4
    6824:	29400104 	addi	r5,r5,4
    6828:	38800015 	stw	r2,0(r7)
    682c:	39c00104 	addi	r7,r7,4
    6830:	19bffa36 	bltu	r3,r6,681c <memmove+0xc0>
    6834:	3811883a 	mov	r8,r7
    6838:	003fd906 	br	67a0 <memmove+0x44>

0000683c <_Bfree>:
    683c:	28000826 	beq	r5,zero,6860 <_Bfree+0x24>
    6840:	28800117 	ldw	r2,4(r5)
    6844:	21001317 	ldw	r4,76(r4)
    6848:	1085883a 	add	r2,r2,r2
    684c:	1085883a 	add	r2,r2,r2
    6850:	1105883a 	add	r2,r2,r4
    6854:	10c00017 	ldw	r3,0(r2)
    6858:	28c00015 	stw	r3,0(r5)
    685c:	11400015 	stw	r5,0(r2)
    6860:	f800283a 	ret

00006864 <__hi0bits>:
    6864:	20bfffec 	andhi	r2,r4,65535
    6868:	10001426 	beq	r2,zero,68bc <__hi0bits+0x58>
    686c:	0007883a 	mov	r3,zero
    6870:	20bfc02c 	andhi	r2,r4,65280
    6874:	1000021e 	bne	r2,zero,6880 <__hi0bits+0x1c>
    6878:	2008923a 	slli	r4,r4,8
    687c:	18c00204 	addi	r3,r3,8
    6880:	20bc002c 	andhi	r2,r4,61440
    6884:	1000021e 	bne	r2,zero,6890 <__hi0bits+0x2c>
    6888:	2008913a 	slli	r4,r4,4
    688c:	18c00104 	addi	r3,r3,4
    6890:	20b0002c 	andhi	r2,r4,49152
    6894:	1000031e 	bne	r2,zero,68a4 <__hi0bits+0x40>
    6898:	2105883a 	add	r2,r4,r4
    689c:	18c00084 	addi	r3,r3,2
    68a0:	1089883a 	add	r4,r2,r2
    68a4:	20000316 	blt	r4,zero,68b4 <__hi0bits+0x50>
    68a8:	2090002c 	andhi	r2,r4,16384
    68ac:	10000626 	beq	r2,zero,68c8 <__hi0bits+0x64>
    68b0:	18c00044 	addi	r3,r3,1
    68b4:	1805883a 	mov	r2,r3
    68b8:	f800283a 	ret
    68bc:	2008943a 	slli	r4,r4,16
    68c0:	00c00404 	movi	r3,16
    68c4:	003fea06 	br	6870 <__hi0bits+0xc>
    68c8:	00c00804 	movi	r3,32
    68cc:	1805883a 	mov	r2,r3
    68d0:	f800283a 	ret

000068d4 <__lo0bits>:
    68d4:	20c00017 	ldw	r3,0(r4)
    68d8:	188001cc 	andi	r2,r3,7
    68dc:	10000a26 	beq	r2,zero,6908 <__lo0bits+0x34>
    68e0:	1880004c 	andi	r2,r3,1
    68e4:	1005003a 	cmpeq	r2,r2,zero
    68e8:	10002126 	beq	r2,zero,6970 <__lo0bits+0x9c>
    68ec:	1880008c 	andi	r2,r3,2
    68f0:	1000251e 	bne	r2,zero,6988 <__lo0bits+0xb4>
    68f4:	1804d0ba 	srli	r2,r3,2
    68f8:	01400084 	movi	r5,2
    68fc:	20800015 	stw	r2,0(r4)
    6900:	2805883a 	mov	r2,r5
    6904:	f800283a 	ret
    6908:	18bfffcc 	andi	r2,r3,65535
    690c:	10001526 	beq	r2,zero,6964 <__lo0bits+0x90>
    6910:	000b883a 	mov	r5,zero
    6914:	18803fcc 	andi	r2,r3,255
    6918:	1000021e 	bne	r2,zero,6924 <__lo0bits+0x50>
    691c:	1806d23a 	srli	r3,r3,8
    6920:	29400204 	addi	r5,r5,8
    6924:	188003cc 	andi	r2,r3,15
    6928:	1000021e 	bne	r2,zero,6934 <__lo0bits+0x60>
    692c:	1806d13a 	srli	r3,r3,4
    6930:	29400104 	addi	r5,r5,4
    6934:	188000cc 	andi	r2,r3,3
    6938:	1000021e 	bne	r2,zero,6944 <__lo0bits+0x70>
    693c:	1806d0ba 	srli	r3,r3,2
    6940:	29400084 	addi	r5,r5,2
    6944:	1880004c 	andi	r2,r3,1
    6948:	1000031e 	bne	r2,zero,6958 <__lo0bits+0x84>
    694c:	1806d07a 	srli	r3,r3,1
    6950:	18000a26 	beq	r3,zero,697c <__lo0bits+0xa8>
    6954:	29400044 	addi	r5,r5,1
    6958:	2805883a 	mov	r2,r5
    695c:	20c00015 	stw	r3,0(r4)
    6960:	f800283a 	ret
    6964:	1806d43a 	srli	r3,r3,16
    6968:	01400404 	movi	r5,16
    696c:	003fe906 	br	6914 <__lo0bits+0x40>
    6970:	000b883a 	mov	r5,zero
    6974:	2805883a 	mov	r2,r5
    6978:	f800283a 	ret
    697c:	01400804 	movi	r5,32
    6980:	2805883a 	mov	r2,r5
    6984:	f800283a 	ret
    6988:	1804d07a 	srli	r2,r3,1
    698c:	01400044 	movi	r5,1
    6990:	20800015 	stw	r2,0(r4)
    6994:	003fda06 	br	6900 <__lo0bits+0x2c>

00006998 <__mcmp>:
    6998:	20800417 	ldw	r2,16(r4)
    699c:	28c00417 	ldw	r3,16(r5)
    69a0:	10cfc83a 	sub	r7,r2,r3
    69a4:	38000c1e 	bne	r7,zero,69d8 <__mcmp+0x40>
    69a8:	18c5883a 	add	r2,r3,r3
    69ac:	1085883a 	add	r2,r2,r2
    69b0:	10c00504 	addi	r3,r2,20
    69b4:	21000504 	addi	r4,r4,20
    69b8:	28cb883a 	add	r5,r5,r3
    69bc:	2085883a 	add	r2,r4,r2
    69c0:	10bfff04 	addi	r2,r2,-4
    69c4:	297fff04 	addi	r5,r5,-4
    69c8:	11800017 	ldw	r6,0(r2)
    69cc:	28c00017 	ldw	r3,0(r5)
    69d0:	30c0031e 	bne	r6,r3,69e0 <__mcmp+0x48>
    69d4:	20bffa36 	bltu	r4,r2,69c0 <__mcmp+0x28>
    69d8:	3805883a 	mov	r2,r7
    69dc:	f800283a 	ret
    69e0:	30c00336 	bltu	r6,r3,69f0 <__mcmp+0x58>
    69e4:	01c00044 	movi	r7,1
    69e8:	3805883a 	mov	r2,r7
    69ec:	f800283a 	ret
    69f0:	01ffffc4 	movi	r7,-1
    69f4:	003ff806 	br	69d8 <__mcmp+0x40>

000069f8 <__ulp>:
    69f8:	295ffc2c 	andhi	r5,r5,32752
    69fc:	013f3034 	movhi	r4,64704
    6a00:	290b883a 	add	r5,r5,r4
    6a04:	0145c83a 	sub	r2,zero,r5
    6a08:	1007d53a 	srai	r3,r2,20
    6a0c:	000d883a 	mov	r6,zero
    6a10:	0140040e 	bge	zero,r5,6a24 <__ulp+0x2c>
    6a14:	280f883a 	mov	r7,r5
    6a18:	3807883a 	mov	r3,r7
    6a1c:	3005883a 	mov	r2,r6
    6a20:	f800283a 	ret
    6a24:	008004c4 	movi	r2,19
    6a28:	193ffb04 	addi	r4,r3,-20
    6a2c:	10c00c0e 	bge	r2,r3,6a60 <__ulp+0x68>
    6a30:	008007c4 	movi	r2,31
    6a34:	1107c83a 	sub	r3,r2,r4
    6a38:	00800784 	movi	r2,30
    6a3c:	01400044 	movi	r5,1
    6a40:	11000216 	blt	r2,r4,6a4c <__ulp+0x54>
    6a44:	00800044 	movi	r2,1
    6a48:	10ca983a 	sll	r5,r2,r3
    6a4c:	000f883a 	mov	r7,zero
    6a50:	280d883a 	mov	r6,r5
    6a54:	3807883a 	mov	r3,r7
    6a58:	3005883a 	mov	r2,r6
    6a5c:	f800283a 	ret
    6a60:	00800234 	movhi	r2,8
    6a64:	10cfd83a 	sra	r7,r2,r3
    6a68:	000d883a 	mov	r6,zero
    6a6c:	3005883a 	mov	r2,r6
    6a70:	3807883a 	mov	r3,r7
    6a74:	f800283a 	ret

00006a78 <__b2d>:
    6a78:	20800417 	ldw	r2,16(r4)
    6a7c:	defff904 	addi	sp,sp,-28
    6a80:	dd000415 	stw	r20,16(sp)
    6a84:	1085883a 	add	r2,r2,r2
    6a88:	25000504 	addi	r20,r4,20
    6a8c:	1085883a 	add	r2,r2,r2
    6a90:	dc000015 	stw	r16,0(sp)
    6a94:	a0a1883a 	add	r16,r20,r2
    6a98:	dd400515 	stw	r21,20(sp)
    6a9c:	857fff17 	ldw	r21,-4(r16)
    6aa0:	dc400115 	stw	r17,4(sp)
    6aa4:	dfc00615 	stw	ra,24(sp)
    6aa8:	a809883a 	mov	r4,r21
    6aac:	2823883a 	mov	r17,r5
    6ab0:	dcc00315 	stw	r19,12(sp)
    6ab4:	dc800215 	stw	r18,8(sp)
    6ab8:	00068640 	call	6864 <__hi0bits>
    6abc:	100b883a 	mov	r5,r2
    6ac0:	00800804 	movi	r2,32
    6ac4:	1145c83a 	sub	r2,r2,r5
    6ac8:	88800015 	stw	r2,0(r17)
    6acc:	00800284 	movi	r2,10
    6ad0:	80ffff04 	addi	r3,r16,-4
    6ad4:	11401416 	blt	r2,r5,6b28 <__b2d+0xb0>
    6ad8:	008002c4 	movi	r2,11
    6adc:	1149c83a 	sub	r4,r2,r5
    6ae0:	a0c02736 	bltu	r20,r3,6b80 <__b2d+0x108>
    6ae4:	000d883a 	mov	r6,zero
    6ae8:	28800544 	addi	r2,r5,21
    6aec:	a906d83a 	srl	r3,r21,r4
    6af0:	a884983a 	sll	r2,r21,r2
    6af4:	1ccffc34 	orhi	r19,r3,16368
    6af8:	11a4b03a 	or	r18,r2,r6
    6afc:	9005883a 	mov	r2,r18
    6b00:	9807883a 	mov	r3,r19
    6b04:	dfc00617 	ldw	ra,24(sp)
    6b08:	dd400517 	ldw	r21,20(sp)
    6b0c:	dd000417 	ldw	r20,16(sp)
    6b10:	dcc00317 	ldw	r19,12(sp)
    6b14:	dc800217 	ldw	r18,8(sp)
    6b18:	dc400117 	ldw	r17,4(sp)
    6b1c:	dc000017 	ldw	r16,0(sp)
    6b20:	dec00704 	addi	sp,sp,28
    6b24:	f800283a 	ret
    6b28:	a0c00e36 	bltu	r20,r3,6b64 <__b2d+0xec>
    6b2c:	293ffd44 	addi	r4,r5,-11
    6b30:	000d883a 	mov	r6,zero
    6b34:	20000f26 	beq	r4,zero,6b74 <__b2d+0xfc>
    6b38:	00800804 	movi	r2,32
    6b3c:	110bc83a 	sub	r5,r2,r4
    6b40:	a0c01236 	bltu	r20,r3,6b8c <__b2d+0x114>
    6b44:	000f883a 	mov	r7,zero
    6b48:	a904983a 	sll	r2,r21,r4
    6b4c:	3146d83a 	srl	r3,r6,r5
    6b50:	3108983a 	sll	r4,r6,r4
    6b54:	108ffc34 	orhi	r2,r2,16368
    6b58:	18a6b03a 	or	r19,r3,r2
    6b5c:	3924b03a 	or	r18,r7,r4
    6b60:	003fe606 	br	6afc <__b2d+0x84>
    6b64:	293ffd44 	addi	r4,r5,-11
    6b68:	81bffe17 	ldw	r6,-8(r16)
    6b6c:	80fffe04 	addi	r3,r16,-8
    6b70:	203ff11e 	bne	r4,zero,6b38 <__b2d+0xc0>
    6b74:	accffc34 	orhi	r19,r21,16368
    6b78:	3025883a 	mov	r18,r6
    6b7c:	003fdf06 	br	6afc <__b2d+0x84>
    6b80:	18bfff17 	ldw	r2,-4(r3)
    6b84:	110cd83a 	srl	r6,r2,r4
    6b88:	003fd706 	br	6ae8 <__b2d+0x70>
    6b8c:	18bfff17 	ldw	r2,-4(r3)
    6b90:	114ed83a 	srl	r7,r2,r5
    6b94:	003fec06 	br	6b48 <__b2d+0xd0>

00006b98 <__ratio>:
    6b98:	defff904 	addi	sp,sp,-28
    6b9c:	dc400215 	stw	r17,8(sp)
    6ba0:	2823883a 	mov	r17,r5
    6ba4:	d80b883a 	mov	r5,sp
    6ba8:	dfc00615 	stw	ra,24(sp)
    6bac:	dd000515 	stw	r20,20(sp)
    6bb0:	dcc00415 	stw	r19,16(sp)
    6bb4:	dc800315 	stw	r18,12(sp)
    6bb8:	2025883a 	mov	r18,r4
    6bbc:	0006a780 	call	6a78 <__b2d>
    6bc0:	8809883a 	mov	r4,r17
    6bc4:	d9400104 	addi	r5,sp,4
    6bc8:	1027883a 	mov	r19,r2
    6bcc:	1829883a 	mov	r20,r3
    6bd0:	0006a780 	call	6a78 <__b2d>
    6bd4:	89000417 	ldw	r4,16(r17)
    6bd8:	91c00417 	ldw	r7,16(r18)
    6bdc:	d9800117 	ldw	r6,4(sp)
    6be0:	180b883a 	mov	r5,r3
    6be4:	390fc83a 	sub	r7,r7,r4
    6be8:	1009883a 	mov	r4,r2
    6bec:	d8800017 	ldw	r2,0(sp)
    6bf0:	380e917a 	slli	r7,r7,5
    6bf4:	2011883a 	mov	r8,r4
    6bf8:	1185c83a 	sub	r2,r2,r6
    6bfc:	11c5883a 	add	r2,r2,r7
    6c00:	1006953a 	slli	r3,r2,20
    6c04:	2813883a 	mov	r9,r5
    6c08:	00800d0e 	bge	zero,r2,6c40 <__ratio+0xa8>
    6c0c:	1d29883a 	add	r20,r3,r20
    6c10:	a00b883a 	mov	r5,r20
    6c14:	480f883a 	mov	r7,r9
    6c18:	9809883a 	mov	r4,r19
    6c1c:	400d883a 	mov	r6,r8
    6c20:	0009a680 	call	9a68 <__divdf3>
    6c24:	dfc00617 	ldw	ra,24(sp)
    6c28:	dd000517 	ldw	r20,20(sp)
    6c2c:	dcc00417 	ldw	r19,16(sp)
    6c30:	dc800317 	ldw	r18,12(sp)
    6c34:	dc400217 	ldw	r17,8(sp)
    6c38:	dec00704 	addi	sp,sp,28
    6c3c:	f800283a 	ret
    6c40:	28d3c83a 	sub	r9,r5,r3
    6c44:	003ff206 	br	6c10 <__ratio+0x78>

00006c48 <_mprec_log10>:
    6c48:	defffe04 	addi	sp,sp,-8
    6c4c:	008005c4 	movi	r2,23
    6c50:	dc000015 	stw	r16,0(sp)
    6c54:	dfc00115 	stw	ra,4(sp)
    6c58:	2021883a 	mov	r16,r4
    6c5c:	11000c16 	blt	r2,r4,6c90 <_mprec_log10+0x48>
    6c60:	200490fa 	slli	r2,r4,3
    6c64:	00c00074 	movhi	r3,1
    6c68:	18c68004 	addi	r3,r3,6656
    6c6c:	10c5883a 	add	r2,r2,r3
    6c70:	12400117 	ldw	r9,4(r2)
    6c74:	12000017 	ldw	r8,0(r2)
    6c78:	4807883a 	mov	r3,r9
    6c7c:	4005883a 	mov	r2,r8
    6c80:	dfc00117 	ldw	ra,4(sp)
    6c84:	dc000017 	ldw	r16,0(sp)
    6c88:	dec00204 	addi	sp,sp,8
    6c8c:	f800283a 	ret
    6c90:	0011883a 	mov	r8,zero
    6c94:	024ffc34 	movhi	r9,16368
    6c98:	0005883a 	mov	r2,zero
    6c9c:	00d00934 	movhi	r3,16420
    6ca0:	480b883a 	mov	r5,r9
    6ca4:	4009883a 	mov	r4,r8
    6ca8:	180f883a 	mov	r7,r3
    6cac:	100d883a 	mov	r6,r2
    6cb0:	00096a40 	call	96a4 <__muldf3>
    6cb4:	843fffc4 	addi	r16,r16,-1
    6cb8:	1011883a 	mov	r8,r2
    6cbc:	1813883a 	mov	r9,r3
    6cc0:	803ff51e 	bne	r16,zero,6c98 <_mprec_log10+0x50>
    6cc4:	4005883a 	mov	r2,r8
    6cc8:	4807883a 	mov	r3,r9
    6ccc:	dfc00117 	ldw	ra,4(sp)
    6cd0:	dc000017 	ldw	r16,0(sp)
    6cd4:	dec00204 	addi	sp,sp,8
    6cd8:	f800283a 	ret

00006cdc <__copybits>:
    6cdc:	297fffc4 	addi	r5,r5,-1
    6ce0:	30800417 	ldw	r2,16(r6)
    6ce4:	280bd17a 	srai	r5,r5,5
    6ce8:	31800504 	addi	r6,r6,20
    6cec:	1085883a 	add	r2,r2,r2
    6cf0:	294b883a 	add	r5,r5,r5
    6cf4:	294b883a 	add	r5,r5,r5
    6cf8:	1085883a 	add	r2,r2,r2
    6cfc:	290b883a 	add	r5,r5,r4
    6d00:	3087883a 	add	r3,r6,r2
    6d04:	29400104 	addi	r5,r5,4
    6d08:	30c0052e 	bgeu	r6,r3,6d20 <__copybits+0x44>
    6d0c:	30800017 	ldw	r2,0(r6)
    6d10:	31800104 	addi	r6,r6,4
    6d14:	20800015 	stw	r2,0(r4)
    6d18:	21000104 	addi	r4,r4,4
    6d1c:	30fffb36 	bltu	r6,r3,6d0c <__copybits+0x30>
    6d20:	2140032e 	bgeu	r4,r5,6d30 <__copybits+0x54>
    6d24:	20000015 	stw	zero,0(r4)
    6d28:	21000104 	addi	r4,r4,4
    6d2c:	217ffd36 	bltu	r4,r5,6d24 <__copybits+0x48>
    6d30:	f800283a 	ret

00006d34 <__any_on>:
    6d34:	20800417 	ldw	r2,16(r4)
    6d38:	2807d17a 	srai	r3,r5,5
    6d3c:	21000504 	addi	r4,r4,20
    6d40:	10c00d0e 	bge	r2,r3,6d78 <__any_on+0x44>
    6d44:	1085883a 	add	r2,r2,r2
    6d48:	1085883a 	add	r2,r2,r2
    6d4c:	208d883a 	add	r6,r4,r2
    6d50:	2180182e 	bgeu	r4,r6,6db4 <__any_on+0x80>
    6d54:	30bfff17 	ldw	r2,-4(r6)
    6d58:	30ffff04 	addi	r3,r6,-4
    6d5c:	1000041e 	bne	r2,zero,6d70 <__any_on+0x3c>
    6d60:	20c0142e 	bgeu	r4,r3,6db4 <__any_on+0x80>
    6d64:	18ffff04 	addi	r3,r3,-4
    6d68:	18800017 	ldw	r2,0(r3)
    6d6c:	103ffc26 	beq	r2,zero,6d60 <__any_on+0x2c>
    6d70:	00800044 	movi	r2,1
    6d74:	f800283a 	ret
    6d78:	18800a0e 	bge	r3,r2,6da4 <__any_on+0x70>
    6d7c:	294007cc 	andi	r5,r5,31
    6d80:	28000826 	beq	r5,zero,6da4 <__any_on+0x70>
    6d84:	18c5883a 	add	r2,r3,r3
    6d88:	1085883a 	add	r2,r2,r2
    6d8c:	208d883a 	add	r6,r4,r2
    6d90:	30c00017 	ldw	r3,0(r6)
    6d94:	1944d83a 	srl	r2,r3,r5
    6d98:	1144983a 	sll	r2,r2,r5
    6d9c:	18bff41e 	bne	r3,r2,6d70 <__any_on+0x3c>
    6da0:	003feb06 	br	6d50 <__any_on+0x1c>
    6da4:	18c5883a 	add	r2,r3,r3
    6da8:	1085883a 	add	r2,r2,r2
    6dac:	208d883a 	add	r6,r4,r2
    6db0:	003fe706 	br	6d50 <__any_on+0x1c>
    6db4:	0005883a 	mov	r2,zero
    6db8:	f800283a 	ret

00006dbc <_Balloc>:
    6dbc:	20c01317 	ldw	r3,76(r4)
    6dc0:	defffb04 	addi	sp,sp,-20
    6dc4:	dcc00315 	stw	r19,12(sp)
    6dc8:	dc800215 	stw	r18,8(sp)
    6dcc:	dfc00415 	stw	ra,16(sp)
    6dd0:	2825883a 	mov	r18,r5
    6dd4:	dc400115 	stw	r17,4(sp)
    6dd8:	dc000015 	stw	r16,0(sp)
    6ddc:	2027883a 	mov	r19,r4
    6de0:	01800404 	movi	r6,16
    6de4:	01400104 	movi	r5,4
    6de8:	18001726 	beq	r3,zero,6e48 <_Balloc+0x8c>
    6dec:	01400044 	movi	r5,1
    6df0:	9485883a 	add	r2,r18,r18
    6df4:	2ca2983a 	sll	r17,r5,r18
    6df8:	1085883a 	add	r2,r2,r2
    6dfc:	10c7883a 	add	r3,r2,r3
    6e00:	1c000017 	ldw	r16,0(r3)
    6e04:	8c4d883a 	add	r6,r17,r17
    6e08:	318d883a 	add	r6,r6,r6
    6e0c:	9809883a 	mov	r4,r19
    6e10:	31800504 	addi	r6,r6,20
    6e14:	80001226 	beq	r16,zero,6e60 <_Balloc+0xa4>
    6e18:	80800017 	ldw	r2,0(r16)
    6e1c:	18800015 	stw	r2,0(r3)
    6e20:	80000415 	stw	zero,16(r16)
    6e24:	80000315 	stw	zero,12(r16)
    6e28:	8005883a 	mov	r2,r16
    6e2c:	dfc00417 	ldw	ra,16(sp)
    6e30:	dcc00317 	ldw	r19,12(sp)
    6e34:	dc800217 	ldw	r18,8(sp)
    6e38:	dc400117 	ldw	r17,4(sp)
    6e3c:	dc000017 	ldw	r16,0(sp)
    6e40:	dec00504 	addi	sp,sp,20
    6e44:	f800283a 	ret
    6e48:	00081f80 	call	81f8 <_calloc_r>
    6e4c:	1007883a 	mov	r3,r2
    6e50:	0021883a 	mov	r16,zero
    6e54:	98801315 	stw	r2,76(r19)
    6e58:	103fe41e 	bne	r2,zero,6dec <_Balloc+0x30>
    6e5c:	003ff206 	br	6e28 <_Balloc+0x6c>
    6e60:	00081f80 	call	81f8 <_calloc_r>
    6e64:	103ff026 	beq	r2,zero,6e28 <_Balloc+0x6c>
    6e68:	1021883a 	mov	r16,r2
    6e6c:	14800115 	stw	r18,4(r2)
    6e70:	14400215 	stw	r17,8(r2)
    6e74:	003fea06 	br	6e20 <_Balloc+0x64>

00006e78 <__d2b>:
    6e78:	defff504 	addi	sp,sp,-44
    6e7c:	dcc00515 	stw	r19,20(sp)
    6e80:	04c00044 	movi	r19,1
    6e84:	dc000215 	stw	r16,8(sp)
    6e88:	2821883a 	mov	r16,r5
    6e8c:	980b883a 	mov	r5,r19
    6e90:	ddc00915 	stw	r23,36(sp)
    6e94:	dd800815 	stw	r22,32(sp)
    6e98:	dd400715 	stw	r21,28(sp)
    6e9c:	dd000615 	stw	r20,24(sp)
    6ea0:	dc800415 	stw	r18,16(sp)
    6ea4:	dc400315 	stw	r17,12(sp)
    6ea8:	dfc00a15 	stw	ra,40(sp)
    6eac:	3023883a 	mov	r17,r6
    6eb0:	382d883a 	mov	r22,r7
    6eb4:	ddc00b17 	ldw	r23,44(sp)
    6eb8:	0006dbc0 	call	6dbc <_Balloc>
    6ebc:	1025883a 	mov	r18,r2
    6ec0:	00a00034 	movhi	r2,32768
    6ec4:	10bfffc4 	addi	r2,r2,-1
    6ec8:	8888703a 	and	r4,r17,r2
    6ecc:	202ad53a 	srli	r21,r4,20
    6ed0:	00800434 	movhi	r2,16
    6ed4:	10bfffc4 	addi	r2,r2,-1
    6ed8:	8886703a 	and	r3,r17,r2
    6edc:	a829003a 	cmpeq	r20,r21,zero
    6ee0:	800b883a 	mov	r5,r16
    6ee4:	d8c00115 	stw	r3,4(sp)
    6ee8:	94000504 	addi	r16,r18,20
    6eec:	a000021e 	bne	r20,zero,6ef8 <__d2b+0x80>
    6ef0:	18c00434 	orhi	r3,r3,16
    6ef4:	d8c00115 	stw	r3,4(sp)
    6ef8:	28002726 	beq	r5,zero,6f98 <__d2b+0x120>
    6efc:	d809883a 	mov	r4,sp
    6f00:	d9400015 	stw	r5,0(sp)
    6f04:	00068d40 	call	68d4 <__lo0bits>
    6f08:	100d883a 	mov	r6,r2
    6f0c:	10003526 	beq	r2,zero,6fe4 <__d2b+0x16c>
    6f10:	d8c00117 	ldw	r3,4(sp)
    6f14:	00800804 	movi	r2,32
    6f18:	1185c83a 	sub	r2,r2,r6
    6f1c:	d9000017 	ldw	r4,0(sp)
    6f20:	1886983a 	sll	r3,r3,r2
    6f24:	1906b03a 	or	r3,r3,r4
    6f28:	90c00515 	stw	r3,20(r18)
    6f2c:	d8c00117 	ldw	r3,4(sp)
    6f30:	1986d83a 	srl	r3,r3,r6
    6f34:	d8c00115 	stw	r3,4(sp)
    6f38:	180b003a 	cmpeq	r5,r3,zero
    6f3c:	00800084 	movi	r2,2
    6f40:	114bc83a 	sub	r5,r2,r5
    6f44:	80c00115 	stw	r3,4(r16)
    6f48:	91400415 	stw	r5,16(r18)
    6f4c:	a0001a1e 	bne	r20,zero,6fb8 <__d2b+0x140>
    6f50:	3545883a 	add	r2,r6,r21
    6f54:	10bef344 	addi	r2,r2,-1075
    6f58:	00c00d44 	movi	r3,53
    6f5c:	b0800015 	stw	r2,0(r22)
    6f60:	1987c83a 	sub	r3,r3,r6
    6f64:	b8c00015 	stw	r3,0(r23)
    6f68:	9005883a 	mov	r2,r18
    6f6c:	dfc00a17 	ldw	ra,40(sp)
    6f70:	ddc00917 	ldw	r23,36(sp)
    6f74:	dd800817 	ldw	r22,32(sp)
    6f78:	dd400717 	ldw	r21,28(sp)
    6f7c:	dd000617 	ldw	r20,24(sp)
    6f80:	dcc00517 	ldw	r19,20(sp)
    6f84:	dc800417 	ldw	r18,16(sp)
    6f88:	dc400317 	ldw	r17,12(sp)
    6f8c:	dc000217 	ldw	r16,8(sp)
    6f90:	dec00b04 	addi	sp,sp,44
    6f94:	f800283a 	ret
    6f98:	d9000104 	addi	r4,sp,4
    6f9c:	00068d40 	call	68d4 <__lo0bits>
    6fa0:	11800804 	addi	r6,r2,32
    6fa4:	d8800117 	ldw	r2,4(sp)
    6fa8:	94c00415 	stw	r19,16(r18)
    6fac:	980b883a 	mov	r5,r19
    6fb0:	90800515 	stw	r2,20(r18)
    6fb4:	a03fe626 	beq	r20,zero,6f50 <__d2b+0xd8>
    6fb8:	2945883a 	add	r2,r5,r5
    6fbc:	1085883a 	add	r2,r2,r2
    6fc0:	1405883a 	add	r2,r2,r16
    6fc4:	113fff17 	ldw	r4,-4(r2)
    6fc8:	30fef384 	addi	r3,r6,-1074
    6fcc:	2820917a 	slli	r16,r5,5
    6fd0:	b0c00015 	stw	r3,0(r22)
    6fd4:	00068640 	call	6864 <__hi0bits>
    6fd8:	80a1c83a 	sub	r16,r16,r2
    6fdc:	bc000015 	stw	r16,0(r23)
    6fe0:	003fe106 	br	6f68 <__d2b+0xf0>
    6fe4:	d8800017 	ldw	r2,0(sp)
    6fe8:	90800515 	stw	r2,20(r18)
    6fec:	d8c00117 	ldw	r3,4(sp)
    6ff0:	003fd106 	br	6f38 <__d2b+0xc0>

00006ff4 <__mdiff>:
    6ff4:	defffb04 	addi	sp,sp,-20
    6ff8:	dc000015 	stw	r16,0(sp)
    6ffc:	2821883a 	mov	r16,r5
    7000:	dc800215 	stw	r18,8(sp)
    7004:	300b883a 	mov	r5,r6
    7008:	2025883a 	mov	r18,r4
    700c:	8009883a 	mov	r4,r16
    7010:	dc400115 	stw	r17,4(sp)
    7014:	dfc00415 	stw	ra,16(sp)
    7018:	dcc00315 	stw	r19,12(sp)
    701c:	3023883a 	mov	r17,r6
    7020:	00069980 	call	6998 <__mcmp>
    7024:	10004226 	beq	r2,zero,7130 <__mdiff+0x13c>
    7028:	10005016 	blt	r2,zero,716c <__mdiff+0x178>
    702c:	0027883a 	mov	r19,zero
    7030:	81400117 	ldw	r5,4(r16)
    7034:	9009883a 	mov	r4,r18
    7038:	0006dbc0 	call	6dbc <_Balloc>
    703c:	1019883a 	mov	r12,r2
    7040:	82800417 	ldw	r10,16(r16)
    7044:	88800417 	ldw	r2,16(r17)
    7048:	81800504 	addi	r6,r16,20
    704c:	5287883a 	add	r3,r10,r10
    7050:	1085883a 	add	r2,r2,r2
    7054:	18c7883a 	add	r3,r3,r3
    7058:	1085883a 	add	r2,r2,r2
    705c:	8a000504 	addi	r8,r17,20
    7060:	64c00315 	stw	r19,12(r12)
    7064:	30db883a 	add	r13,r6,r3
    7068:	4097883a 	add	r11,r8,r2
    706c:	61c00504 	addi	r7,r12,20
    7070:	0013883a 	mov	r9,zero
    7074:	31000017 	ldw	r4,0(r6)
    7078:	41400017 	ldw	r5,0(r8)
    707c:	42000104 	addi	r8,r8,4
    7080:	20bfffcc 	andi	r2,r4,65535
    7084:	28ffffcc 	andi	r3,r5,65535
    7088:	10c5c83a 	sub	r2,r2,r3
    708c:	1245883a 	add	r2,r2,r9
    7090:	2008d43a 	srli	r4,r4,16
    7094:	280ad43a 	srli	r5,r5,16
    7098:	1007d43a 	srai	r3,r2,16
    709c:	3880000d 	sth	r2,0(r7)
    70a0:	2149c83a 	sub	r4,r4,r5
    70a4:	20c9883a 	add	r4,r4,r3
    70a8:	3900008d 	sth	r4,2(r7)
    70ac:	31800104 	addi	r6,r6,4
    70b0:	39c00104 	addi	r7,r7,4
    70b4:	2013d43a 	srai	r9,r4,16
    70b8:	42ffee36 	bltu	r8,r11,7074 <__mdiff+0x80>
    70bc:	33400c2e 	bgeu	r6,r13,70f0 <__mdiff+0xfc>
    70c0:	30800017 	ldw	r2,0(r6)
    70c4:	31800104 	addi	r6,r6,4
    70c8:	10ffffcc 	andi	r3,r2,65535
    70cc:	1a47883a 	add	r3,r3,r9
    70d0:	1004d43a 	srli	r2,r2,16
    70d4:	1809d43a 	srai	r4,r3,16
    70d8:	38c0000d 	sth	r3,0(r7)
    70dc:	1105883a 	add	r2,r2,r4
    70e0:	3880008d 	sth	r2,2(r7)
    70e4:	1013d43a 	srai	r9,r2,16
    70e8:	39c00104 	addi	r7,r7,4
    70ec:	337ff436 	bltu	r6,r13,70c0 <__mdiff+0xcc>
    70f0:	38bfff17 	ldw	r2,-4(r7)
    70f4:	38ffff04 	addi	r3,r7,-4
    70f8:	1000041e 	bne	r2,zero,710c <__mdiff+0x118>
    70fc:	18ffff04 	addi	r3,r3,-4
    7100:	18800017 	ldw	r2,0(r3)
    7104:	52bfffc4 	addi	r10,r10,-1
    7108:	103ffc26 	beq	r2,zero,70fc <__mdiff+0x108>
    710c:	6005883a 	mov	r2,r12
    7110:	62800415 	stw	r10,16(r12)
    7114:	dfc00417 	ldw	ra,16(sp)
    7118:	dcc00317 	ldw	r19,12(sp)
    711c:	dc800217 	ldw	r18,8(sp)
    7120:	dc400117 	ldw	r17,4(sp)
    7124:	dc000017 	ldw	r16,0(sp)
    7128:	dec00504 	addi	sp,sp,20
    712c:	f800283a 	ret
    7130:	9009883a 	mov	r4,r18
    7134:	000b883a 	mov	r5,zero
    7138:	0006dbc0 	call	6dbc <_Balloc>
    713c:	1019883a 	mov	r12,r2
    7140:	00800044 	movi	r2,1
    7144:	60800415 	stw	r2,16(r12)
    7148:	6005883a 	mov	r2,r12
    714c:	60000515 	stw	zero,20(r12)
    7150:	dfc00417 	ldw	ra,16(sp)
    7154:	dcc00317 	ldw	r19,12(sp)
    7158:	dc800217 	ldw	r18,8(sp)
    715c:	dc400117 	ldw	r17,4(sp)
    7160:	dc000017 	ldw	r16,0(sp)
    7164:	dec00504 	addi	sp,sp,20
    7168:	f800283a 	ret
    716c:	880d883a 	mov	r6,r17
    7170:	04c00044 	movi	r19,1
    7174:	8023883a 	mov	r17,r16
    7178:	3021883a 	mov	r16,r6
    717c:	003fac06 	br	7030 <__mdiff+0x3c>

00007180 <__lshift>:
    7180:	defff904 	addi	sp,sp,-28
    7184:	28800417 	ldw	r2,16(r5)
    7188:	dc000015 	stw	r16,0(sp)
    718c:	3021d17a 	srai	r16,r6,5
    7190:	28c00217 	ldw	r3,8(r5)
    7194:	10800044 	addi	r2,r2,1
    7198:	dc400115 	stw	r17,4(sp)
    719c:	80a3883a 	add	r17,r16,r2
    71a0:	dd400515 	stw	r21,20(sp)
    71a4:	dd000415 	stw	r20,16(sp)
    71a8:	dc800215 	stw	r18,8(sp)
    71ac:	dfc00615 	stw	ra,24(sp)
    71b0:	2825883a 	mov	r18,r5
    71b4:	dcc00315 	stw	r19,12(sp)
    71b8:	3029883a 	mov	r20,r6
    71bc:	202b883a 	mov	r21,r4
    71c0:	29400117 	ldw	r5,4(r5)
    71c4:	1c40030e 	bge	r3,r17,71d4 <__lshift+0x54>
    71c8:	18c7883a 	add	r3,r3,r3
    71cc:	29400044 	addi	r5,r5,1
    71d0:	1c7ffd16 	blt	r3,r17,71c8 <__lshift+0x48>
    71d4:	a809883a 	mov	r4,r21
    71d8:	0006dbc0 	call	6dbc <_Balloc>
    71dc:	1027883a 	mov	r19,r2
    71e0:	11400504 	addi	r5,r2,20
    71e4:	0400090e 	bge	zero,r16,720c <__lshift+0x8c>
    71e8:	2805883a 	mov	r2,r5
    71ec:	0007883a 	mov	r3,zero
    71f0:	18c00044 	addi	r3,r3,1
    71f4:	10000015 	stw	zero,0(r2)
    71f8:	10800104 	addi	r2,r2,4
    71fc:	80fffc1e 	bne	r16,r3,71f0 <__lshift+0x70>
    7200:	8405883a 	add	r2,r16,r16
    7204:	1085883a 	add	r2,r2,r2
    7208:	288b883a 	add	r5,r5,r2
    720c:	90800417 	ldw	r2,16(r18)
    7210:	91000504 	addi	r4,r18,20
    7214:	a18007cc 	andi	r6,r20,31
    7218:	1085883a 	add	r2,r2,r2
    721c:	1085883a 	add	r2,r2,r2
    7220:	208f883a 	add	r7,r4,r2
    7224:	30001e26 	beq	r6,zero,72a0 <__lshift+0x120>
    7228:	00800804 	movi	r2,32
    722c:	1191c83a 	sub	r8,r2,r6
    7230:	0007883a 	mov	r3,zero
    7234:	20800017 	ldw	r2,0(r4)
    7238:	1184983a 	sll	r2,r2,r6
    723c:	1884b03a 	or	r2,r3,r2
    7240:	28800015 	stw	r2,0(r5)
    7244:	20c00017 	ldw	r3,0(r4)
    7248:	21000104 	addi	r4,r4,4
    724c:	29400104 	addi	r5,r5,4
    7250:	1a06d83a 	srl	r3,r3,r8
    7254:	21fff736 	bltu	r4,r7,7234 <__lshift+0xb4>
    7258:	28c00015 	stw	r3,0(r5)
    725c:	18000126 	beq	r3,zero,7264 <__lshift+0xe4>
    7260:	8c400044 	addi	r17,r17,1
    7264:	88bfffc4 	addi	r2,r17,-1
    7268:	98800415 	stw	r2,16(r19)
    726c:	a809883a 	mov	r4,r21
    7270:	900b883a 	mov	r5,r18
    7274:	000683c0 	call	683c <_Bfree>
    7278:	9805883a 	mov	r2,r19
    727c:	dfc00617 	ldw	ra,24(sp)
    7280:	dd400517 	ldw	r21,20(sp)
    7284:	dd000417 	ldw	r20,16(sp)
    7288:	dcc00317 	ldw	r19,12(sp)
    728c:	dc800217 	ldw	r18,8(sp)
    7290:	dc400117 	ldw	r17,4(sp)
    7294:	dc000017 	ldw	r16,0(sp)
    7298:	dec00704 	addi	sp,sp,28
    729c:	f800283a 	ret
    72a0:	20800017 	ldw	r2,0(r4)
    72a4:	21000104 	addi	r4,r4,4
    72a8:	28800015 	stw	r2,0(r5)
    72ac:	29400104 	addi	r5,r5,4
    72b0:	21ffec2e 	bgeu	r4,r7,7264 <__lshift+0xe4>
    72b4:	20800017 	ldw	r2,0(r4)
    72b8:	21000104 	addi	r4,r4,4
    72bc:	28800015 	stw	r2,0(r5)
    72c0:	29400104 	addi	r5,r5,4
    72c4:	21fff636 	bltu	r4,r7,72a0 <__lshift+0x120>
    72c8:	003fe606 	br	7264 <__lshift+0xe4>

000072cc <__multiply>:
    72cc:	defff904 	addi	sp,sp,-28
    72d0:	dcc00315 	stw	r19,12(sp)
    72d4:	dc800215 	stw	r18,8(sp)
    72d8:	2cc00417 	ldw	r19,16(r5)
    72dc:	34800417 	ldw	r18,16(r6)
    72e0:	dd000415 	stw	r20,16(sp)
    72e4:	dc400115 	stw	r17,4(sp)
    72e8:	dfc00615 	stw	ra,24(sp)
    72ec:	dd400515 	stw	r21,20(sp)
    72f0:	dc000015 	stw	r16,0(sp)
    72f4:	2823883a 	mov	r17,r5
    72f8:	3029883a 	mov	r20,r6
    72fc:	9c80040e 	bge	r19,r18,7310 <__multiply+0x44>
    7300:	9027883a 	mov	r19,r18
    7304:	2c800417 	ldw	r18,16(r5)
    7308:	2829883a 	mov	r20,r5
    730c:	3023883a 	mov	r17,r6
    7310:	88800217 	ldw	r2,8(r17)
    7314:	9ca1883a 	add	r16,r19,r18
    7318:	89400117 	ldw	r5,4(r17)
    731c:	1400010e 	bge	r2,r16,7324 <__multiply+0x58>
    7320:	29400044 	addi	r5,r5,1
    7324:	0006dbc0 	call	6dbc <_Balloc>
    7328:	102b883a 	mov	r21,r2
    732c:	8405883a 	add	r2,r16,r16
    7330:	1085883a 	add	r2,r2,r2
    7334:	a9000504 	addi	r4,r21,20
    7338:	209d883a 	add	r14,r4,r2
    733c:	2380042e 	bgeu	r4,r14,7350 <__multiply+0x84>
    7340:	2005883a 	mov	r2,r4
    7344:	10000015 	stw	zero,0(r2)
    7348:	10800104 	addi	r2,r2,4
    734c:	13bffd36 	bltu	r2,r14,7344 <__multiply+0x78>
    7350:	9485883a 	add	r2,r18,r18
    7354:	9cc7883a 	add	r3,r19,r19
    7358:	a1800504 	addi	r6,r20,20
    735c:	1085883a 	add	r2,r2,r2
    7360:	8b400504 	addi	r13,r17,20
    7364:	18c7883a 	add	r3,r3,r3
    7368:	309f883a 	add	r15,r6,r2
    736c:	68d7883a 	add	r11,r13,r3
    7370:	33c03b2e 	bgeu	r6,r15,7460 <__multiply+0x194>
    7374:	2019883a 	mov	r12,r4
    7378:	30800017 	ldw	r2,0(r6)
    737c:	127fffcc 	andi	r9,r2,65535
    7380:	48001826 	beq	r9,zero,73e4 <__multiply+0x118>
    7384:	6811883a 	mov	r8,r13
    7388:	600f883a 	mov	r7,r12
    738c:	0015883a 	mov	r10,zero
    7390:	40c00017 	ldw	r3,0(r8)
    7394:	39400017 	ldw	r5,0(r7)
    7398:	42000104 	addi	r8,r8,4
    739c:	193fffcc 	andi	r4,r3,65535
    73a0:	4909383a 	mul	r4,r9,r4
    73a4:	1806d43a 	srli	r3,r3,16
    73a8:	28bfffcc 	andi	r2,r5,65535
    73ac:	5085883a 	add	r2,r10,r2
    73b0:	2089883a 	add	r4,r4,r2
    73b4:	48c7383a 	mul	r3,r9,r3
    73b8:	280ad43a 	srli	r5,r5,16
    73bc:	2004d43a 	srli	r2,r4,16
    73c0:	3900000d 	sth	r4,0(r7)
    73c4:	1947883a 	add	r3,r3,r5
    73c8:	10c5883a 	add	r2,r2,r3
    73cc:	3880008d 	sth	r2,2(r7)
    73d0:	1014d43a 	srli	r10,r2,16
    73d4:	39c00104 	addi	r7,r7,4
    73d8:	42ffed36 	bltu	r8,r11,7390 <__multiply+0xc4>
    73dc:	3a800015 	stw	r10,0(r7)
    73e0:	30800017 	ldw	r2,0(r6)
    73e4:	1012d43a 	srli	r9,r2,16
    73e8:	48001926 	beq	r9,zero,7450 <__multiply+0x184>
    73ec:	60800017 	ldw	r2,0(r12)
    73f0:	6811883a 	mov	r8,r13
    73f4:	600f883a 	mov	r7,r12
    73f8:	0015883a 	mov	r10,zero
    73fc:	100b883a 	mov	r5,r2
    7400:	41000017 	ldw	r4,0(r8)
    7404:	2806d43a 	srli	r3,r5,16
    7408:	3880000d 	sth	r2,0(r7)
    740c:	20bfffcc 	andi	r2,r4,65535
    7410:	4885383a 	mul	r2,r9,r2
    7414:	50c7883a 	add	r3,r10,r3
    7418:	2008d43a 	srli	r4,r4,16
    741c:	10c5883a 	add	r2,r2,r3
    7420:	3880008d 	sth	r2,2(r7)
    7424:	39c00104 	addi	r7,r7,4
    7428:	39400017 	ldw	r5,0(r7)
    742c:	4909383a 	mul	r4,r9,r4
    7430:	1004d43a 	srli	r2,r2,16
    7434:	28ffffcc 	andi	r3,r5,65535
    7438:	20c9883a 	add	r4,r4,r3
    743c:	1105883a 	add	r2,r2,r4
    7440:	42000104 	addi	r8,r8,4
    7444:	1014d43a 	srli	r10,r2,16
    7448:	42ffed36 	bltu	r8,r11,7400 <__multiply+0x134>
    744c:	38800015 	stw	r2,0(r7)
    7450:	31800104 	addi	r6,r6,4
    7454:	33c0022e 	bgeu	r6,r15,7460 <__multiply+0x194>
    7458:	63000104 	addi	r12,r12,4
    745c:	003fc606 	br	7378 <__multiply+0xac>
    7460:	0400090e 	bge	zero,r16,7488 <__multiply+0x1bc>
    7464:	70bfff17 	ldw	r2,-4(r14)
    7468:	70ffff04 	addi	r3,r14,-4
    746c:	10000326 	beq	r2,zero,747c <__multiply+0x1b0>
    7470:	00000506 	br	7488 <__multiply+0x1bc>
    7474:	18800017 	ldw	r2,0(r3)
    7478:	1000031e 	bne	r2,zero,7488 <__multiply+0x1bc>
    747c:	843fffc4 	addi	r16,r16,-1
    7480:	18ffff04 	addi	r3,r3,-4
    7484:	803ffb1e 	bne	r16,zero,7474 <__multiply+0x1a8>
    7488:	a805883a 	mov	r2,r21
    748c:	ac000415 	stw	r16,16(r21)
    7490:	dfc00617 	ldw	ra,24(sp)
    7494:	dd400517 	ldw	r21,20(sp)
    7498:	dd000417 	ldw	r20,16(sp)
    749c:	dcc00317 	ldw	r19,12(sp)
    74a0:	dc800217 	ldw	r18,8(sp)
    74a4:	dc400117 	ldw	r17,4(sp)
    74a8:	dc000017 	ldw	r16,0(sp)
    74ac:	dec00704 	addi	sp,sp,28
    74b0:	f800283a 	ret

000074b4 <__i2b>:
    74b4:	defffd04 	addi	sp,sp,-12
    74b8:	dc000015 	stw	r16,0(sp)
    74bc:	04000044 	movi	r16,1
    74c0:	dc800115 	stw	r18,4(sp)
    74c4:	2825883a 	mov	r18,r5
    74c8:	800b883a 	mov	r5,r16
    74cc:	dfc00215 	stw	ra,8(sp)
    74d0:	0006dbc0 	call	6dbc <_Balloc>
    74d4:	14000415 	stw	r16,16(r2)
    74d8:	14800515 	stw	r18,20(r2)
    74dc:	dfc00217 	ldw	ra,8(sp)
    74e0:	dc800117 	ldw	r18,4(sp)
    74e4:	dc000017 	ldw	r16,0(sp)
    74e8:	dec00304 	addi	sp,sp,12
    74ec:	f800283a 	ret

000074f0 <__multadd>:
    74f0:	defffa04 	addi	sp,sp,-24
    74f4:	dc800215 	stw	r18,8(sp)
    74f8:	2c800417 	ldw	r18,16(r5)
    74fc:	dd000415 	stw	r20,16(sp)
    7500:	dcc00315 	stw	r19,12(sp)
    7504:	dc000015 	stw	r16,0(sp)
    7508:	dfc00515 	stw	ra,20(sp)
    750c:	3821883a 	mov	r16,r7
    7510:	dc400115 	stw	r17,4(sp)
    7514:	2827883a 	mov	r19,r5
    7518:	2029883a 	mov	r20,r4
    751c:	2a000504 	addi	r8,r5,20
    7520:	000f883a 	mov	r7,zero
    7524:	40800017 	ldw	r2,0(r8)
    7528:	39c00044 	addi	r7,r7,1
    752c:	10ffffcc 	andi	r3,r2,65535
    7530:	1987383a 	mul	r3,r3,r6
    7534:	1004d43a 	srli	r2,r2,16
    7538:	1c07883a 	add	r3,r3,r16
    753c:	180ad43a 	srli	r5,r3,16
    7540:	1185383a 	mul	r2,r2,r6
    7544:	18ffffcc 	andi	r3,r3,65535
    7548:	1145883a 	add	r2,r2,r5
    754c:	1008943a 	slli	r4,r2,16
    7550:	1020d43a 	srli	r16,r2,16
    7554:	20c9883a 	add	r4,r4,r3
    7558:	41000015 	stw	r4,0(r8)
    755c:	42000104 	addi	r8,r8,4
    7560:	3cbff016 	blt	r7,r18,7524 <__multadd+0x34>
    7564:	80000826 	beq	r16,zero,7588 <__multadd+0x98>
    7568:	98800217 	ldw	r2,8(r19)
    756c:	90800f0e 	bge	r18,r2,75ac <__multadd+0xbc>
    7570:	9485883a 	add	r2,r18,r18
    7574:	1085883a 	add	r2,r2,r2
    7578:	14c5883a 	add	r2,r2,r19
    757c:	90c00044 	addi	r3,r18,1
    7580:	14000515 	stw	r16,20(r2)
    7584:	98c00415 	stw	r3,16(r19)
    7588:	9805883a 	mov	r2,r19
    758c:	dfc00517 	ldw	ra,20(sp)
    7590:	dd000417 	ldw	r20,16(sp)
    7594:	dcc00317 	ldw	r19,12(sp)
    7598:	dc800217 	ldw	r18,8(sp)
    759c:	dc400117 	ldw	r17,4(sp)
    75a0:	dc000017 	ldw	r16,0(sp)
    75a4:	dec00604 	addi	sp,sp,24
    75a8:	f800283a 	ret
    75ac:	99400117 	ldw	r5,4(r19)
    75b0:	a009883a 	mov	r4,r20
    75b4:	29400044 	addi	r5,r5,1
    75b8:	0006dbc0 	call	6dbc <_Balloc>
    75bc:	99800417 	ldw	r6,16(r19)
    75c0:	99400304 	addi	r5,r19,12
    75c4:	11000304 	addi	r4,r2,12
    75c8:	318d883a 	add	r6,r6,r6
    75cc:	318d883a 	add	r6,r6,r6
    75d0:	31800204 	addi	r6,r6,8
    75d4:	1023883a 	mov	r17,r2
    75d8:	00013b40 	call	13b4 <memcpy>
    75dc:	980b883a 	mov	r5,r19
    75e0:	a009883a 	mov	r4,r20
    75e4:	000683c0 	call	683c <_Bfree>
    75e8:	8827883a 	mov	r19,r17
    75ec:	003fe006 	br	7570 <__multadd+0x80>

000075f0 <__pow5mult>:
    75f0:	defffa04 	addi	sp,sp,-24
    75f4:	308000cc 	andi	r2,r6,3
    75f8:	dd000415 	stw	r20,16(sp)
    75fc:	dcc00315 	stw	r19,12(sp)
    7600:	dc000015 	stw	r16,0(sp)
    7604:	dfc00515 	stw	ra,20(sp)
    7608:	dc800215 	stw	r18,8(sp)
    760c:	dc400115 	stw	r17,4(sp)
    7610:	3021883a 	mov	r16,r6
    7614:	2027883a 	mov	r19,r4
    7618:	2829883a 	mov	r20,r5
    761c:	10002b1e 	bne	r2,zero,76cc <__pow5mult+0xdc>
    7620:	8025d0ba 	srai	r18,r16,2
    7624:	90001b26 	beq	r18,zero,7694 <__pow5mult+0xa4>
    7628:	9c001217 	ldw	r16,72(r19)
    762c:	8000081e 	bne	r16,zero,7650 <__pow5mult+0x60>
    7630:	00003006 	br	76f4 <__pow5mult+0x104>
    7634:	800b883a 	mov	r5,r16
    7638:	800d883a 	mov	r6,r16
    763c:	9809883a 	mov	r4,r19
    7640:	90001426 	beq	r18,zero,7694 <__pow5mult+0xa4>
    7644:	80800017 	ldw	r2,0(r16)
    7648:	10001b26 	beq	r2,zero,76b8 <__pow5mult+0xc8>
    764c:	1021883a 	mov	r16,r2
    7650:	9080004c 	andi	r2,r18,1
    7654:	1005003a 	cmpeq	r2,r2,zero
    7658:	9025d07a 	srai	r18,r18,1
    765c:	800d883a 	mov	r6,r16
    7660:	9809883a 	mov	r4,r19
    7664:	a00b883a 	mov	r5,r20
    7668:	103ff21e 	bne	r2,zero,7634 <__pow5mult+0x44>
    766c:	00072cc0 	call	72cc <__multiply>
    7670:	a00b883a 	mov	r5,r20
    7674:	9809883a 	mov	r4,r19
    7678:	1023883a 	mov	r17,r2
    767c:	000683c0 	call	683c <_Bfree>
    7680:	8829883a 	mov	r20,r17
    7684:	800b883a 	mov	r5,r16
    7688:	800d883a 	mov	r6,r16
    768c:	9809883a 	mov	r4,r19
    7690:	903fec1e 	bne	r18,zero,7644 <__pow5mult+0x54>
    7694:	a005883a 	mov	r2,r20
    7698:	dfc00517 	ldw	ra,20(sp)
    769c:	dd000417 	ldw	r20,16(sp)
    76a0:	dcc00317 	ldw	r19,12(sp)
    76a4:	dc800217 	ldw	r18,8(sp)
    76a8:	dc400117 	ldw	r17,4(sp)
    76ac:	dc000017 	ldw	r16,0(sp)
    76b0:	dec00604 	addi	sp,sp,24
    76b4:	f800283a 	ret
    76b8:	00072cc0 	call	72cc <__multiply>
    76bc:	80800015 	stw	r2,0(r16)
    76c0:	1021883a 	mov	r16,r2
    76c4:	10000015 	stw	zero,0(r2)
    76c8:	003fe106 	br	7650 <__pow5mult+0x60>
    76cc:	1085883a 	add	r2,r2,r2
    76d0:	00c00074 	movhi	r3,1
    76d4:	18c6c604 	addi	r3,r3,6936
    76d8:	1085883a 	add	r2,r2,r2
    76dc:	10c5883a 	add	r2,r2,r3
    76e0:	11bfff17 	ldw	r6,-4(r2)
    76e4:	000f883a 	mov	r7,zero
    76e8:	00074f00 	call	74f0 <__multadd>
    76ec:	1029883a 	mov	r20,r2
    76f0:	003fcb06 	br	7620 <__pow5mult+0x30>
    76f4:	9809883a 	mov	r4,r19
    76f8:	01409c44 	movi	r5,625
    76fc:	00074b40 	call	74b4 <__i2b>
    7700:	98801215 	stw	r2,72(r19)
    7704:	1021883a 	mov	r16,r2
    7708:	10000015 	stw	zero,0(r2)
    770c:	003fd006 	br	7650 <__pow5mult+0x60>

00007710 <__s2b>:
    7710:	defff904 	addi	sp,sp,-28
    7714:	dcc00315 	stw	r19,12(sp)
    7718:	dc800215 	stw	r18,8(sp)
    771c:	2827883a 	mov	r19,r5
    7720:	2025883a 	mov	r18,r4
    7724:	01400244 	movi	r5,9
    7728:	39000204 	addi	r4,r7,8
    772c:	dd000415 	stw	r20,16(sp)
    7730:	dc400115 	stw	r17,4(sp)
    7734:	dfc00615 	stw	ra,24(sp)
    7738:	dd400515 	stw	r21,20(sp)
    773c:	dc000015 	stw	r16,0(sp)
    7740:	3829883a 	mov	r20,r7
    7744:	3023883a 	mov	r17,r6
    7748:	000a3480 	call	a348 <__divsi3>
    774c:	00c00044 	movi	r3,1
    7750:	1880350e 	bge	r3,r2,7828 <__s2b+0x118>
    7754:	000b883a 	mov	r5,zero
    7758:	18c7883a 	add	r3,r3,r3
    775c:	29400044 	addi	r5,r5,1
    7760:	18bffd16 	blt	r3,r2,7758 <__s2b+0x48>
    7764:	9009883a 	mov	r4,r18
    7768:	0006dbc0 	call	6dbc <_Balloc>
    776c:	1011883a 	mov	r8,r2
    7770:	d8800717 	ldw	r2,28(sp)
    7774:	00c00044 	movi	r3,1
    7778:	01800244 	movi	r6,9
    777c:	40800515 	stw	r2,20(r8)
    7780:	40c00415 	stw	r3,16(r8)
    7784:	3440260e 	bge	r6,r17,7820 <__s2b+0x110>
    7788:	3021883a 	mov	r16,r6
    778c:	99ab883a 	add	r21,r19,r6
    7790:	9c05883a 	add	r2,r19,r16
    7794:	11c00007 	ldb	r7,0(r2)
    7798:	400b883a 	mov	r5,r8
    779c:	9009883a 	mov	r4,r18
    77a0:	39fff404 	addi	r7,r7,-48
    77a4:	01800284 	movi	r6,10
    77a8:	00074f00 	call	74f0 <__multadd>
    77ac:	84000044 	addi	r16,r16,1
    77b0:	1011883a 	mov	r8,r2
    77b4:	8c3ff61e 	bne	r17,r16,7790 <__s2b+0x80>
    77b8:	ac45883a 	add	r2,r21,r17
    77bc:	117ffe04 	addi	r5,r2,-8
    77c0:	880d883a 	mov	r6,r17
    77c4:	35000c0e 	bge	r6,r20,77f8 <__s2b+0xe8>
    77c8:	a185c83a 	sub	r2,r20,r6
    77cc:	2821883a 	mov	r16,r5
    77d0:	28a3883a 	add	r17,r5,r2
    77d4:	81c00007 	ldb	r7,0(r16)
    77d8:	400b883a 	mov	r5,r8
    77dc:	9009883a 	mov	r4,r18
    77e0:	39fff404 	addi	r7,r7,-48
    77e4:	01800284 	movi	r6,10
    77e8:	00074f00 	call	74f0 <__multadd>
    77ec:	84000044 	addi	r16,r16,1
    77f0:	1011883a 	mov	r8,r2
    77f4:	847ff71e 	bne	r16,r17,77d4 <__s2b+0xc4>
    77f8:	4005883a 	mov	r2,r8
    77fc:	dfc00617 	ldw	ra,24(sp)
    7800:	dd400517 	ldw	r21,20(sp)
    7804:	dd000417 	ldw	r20,16(sp)
    7808:	dcc00317 	ldw	r19,12(sp)
    780c:	dc800217 	ldw	r18,8(sp)
    7810:	dc400117 	ldw	r17,4(sp)
    7814:	dc000017 	ldw	r16,0(sp)
    7818:	dec00704 	addi	sp,sp,28
    781c:	f800283a 	ret
    7820:	99400284 	addi	r5,r19,10
    7824:	003fe706 	br	77c4 <__s2b+0xb4>
    7828:	000b883a 	mov	r5,zero
    782c:	003fcd06 	br	7764 <__s2b+0x54>

00007830 <_realloc_r>:
    7830:	defff404 	addi	sp,sp,-48
    7834:	dd800815 	stw	r22,32(sp)
    7838:	dc800415 	stw	r18,16(sp)
    783c:	dc400315 	stw	r17,12(sp)
    7840:	dfc00b15 	stw	ra,44(sp)
    7844:	df000a15 	stw	fp,40(sp)
    7848:	ddc00915 	stw	r23,36(sp)
    784c:	dd400715 	stw	r21,28(sp)
    7850:	dd000615 	stw	r20,24(sp)
    7854:	dcc00515 	stw	r19,20(sp)
    7858:	dc000215 	stw	r16,8(sp)
    785c:	2825883a 	mov	r18,r5
    7860:	3023883a 	mov	r17,r6
    7864:	202d883a 	mov	r22,r4
    7868:	2800c926 	beq	r5,zero,7b90 <_realloc_r+0x360>
    786c:	000b2880 	call	b288 <__malloc_lock>
    7870:	943ffe04 	addi	r16,r18,-8
    7874:	88c002c4 	addi	r3,r17,11
    7878:	00800584 	movi	r2,22
    787c:	82000117 	ldw	r8,4(r16)
    7880:	10c01b2e 	bgeu	r2,r3,78f0 <_realloc_r+0xc0>
    7884:	00bffe04 	movi	r2,-8
    7888:	188e703a 	and	r7,r3,r2
    788c:	3839883a 	mov	fp,r7
    7890:	38001a16 	blt	r7,zero,78fc <_realloc_r+0xcc>
    7894:	e4401936 	bltu	fp,r17,78fc <_realloc_r+0xcc>
    7898:	013fff04 	movi	r4,-4
    789c:	4126703a 	and	r19,r8,r4
    78a0:	99c02616 	blt	r19,r7,793c <_realloc_r+0x10c>
    78a4:	802b883a 	mov	r21,r16
    78a8:	9829883a 	mov	r20,r19
    78ac:	84000204 	addi	r16,r16,8
    78b0:	a80f883a 	mov	r7,r21
    78b4:	a70dc83a 	sub	r6,r20,fp
    78b8:	008003c4 	movi	r2,15
    78bc:	1180c136 	bltu	r2,r6,7bc4 <_realloc_r+0x394>
    78c0:	38800117 	ldw	r2,4(r7)
    78c4:	a549883a 	add	r4,r20,r21
    78c8:	1080004c 	andi	r2,r2,1
    78cc:	a084b03a 	or	r2,r20,r2
    78d0:	38800115 	stw	r2,4(r7)
    78d4:	20c00117 	ldw	r3,4(r4)
    78d8:	18c00054 	ori	r3,r3,1
    78dc:	20c00115 	stw	r3,4(r4)
    78e0:	b009883a 	mov	r4,r22
    78e4:	000b2a80 	call	b2a8 <__malloc_unlock>
    78e8:	8023883a 	mov	r17,r16
    78ec:	00000606 	br	7908 <_realloc_r+0xd8>
    78f0:	01c00404 	movi	r7,16
    78f4:	3839883a 	mov	fp,r7
    78f8:	e47fe72e 	bgeu	fp,r17,7898 <_realloc_r+0x68>
    78fc:	00800304 	movi	r2,12
    7900:	0023883a 	mov	r17,zero
    7904:	b0800015 	stw	r2,0(r22)
    7908:	8805883a 	mov	r2,r17
    790c:	dfc00b17 	ldw	ra,44(sp)
    7910:	df000a17 	ldw	fp,40(sp)
    7914:	ddc00917 	ldw	r23,36(sp)
    7918:	dd800817 	ldw	r22,32(sp)
    791c:	dd400717 	ldw	r21,28(sp)
    7920:	dd000617 	ldw	r20,24(sp)
    7924:	dcc00517 	ldw	r19,20(sp)
    7928:	dc800417 	ldw	r18,16(sp)
    792c:	dc400317 	ldw	r17,12(sp)
    7930:	dc000217 	ldw	r16,8(sp)
    7934:	dec00c04 	addi	sp,sp,48
    7938:	f800283a 	ret
    793c:	00800074 	movhi	r2,1
    7940:	10887e04 	addi	r2,r2,8696
    7944:	12400217 	ldw	r9,8(r2)
    7948:	84cd883a 	add	r6,r16,r19
    794c:	802b883a 	mov	r21,r16
    7950:	3240b926 	beq	r6,r9,7c38 <_realloc_r+0x408>
    7954:	31400117 	ldw	r5,4(r6)
    7958:	00bfff84 	movi	r2,-2
    795c:	2884703a 	and	r2,r5,r2
    7960:	1185883a 	add	r2,r2,r6
    7964:	10c00117 	ldw	r3,4(r2)
    7968:	18c0004c 	andi	r3,r3,1
    796c:	1807003a 	cmpeq	r3,r3,zero
    7970:	1800a326 	beq	r3,zero,7c00 <_realloc_r+0x3d0>
    7974:	2908703a 	and	r4,r5,r4
    7978:	9929883a 	add	r20,r19,r4
    797c:	a1c0a30e 	bge	r20,r7,7c0c <_realloc_r+0x3dc>
    7980:	4080004c 	andi	r2,r8,1
    7984:	1000551e 	bne	r2,zero,7adc <_realloc_r+0x2ac>
    7988:	80800017 	ldw	r2,0(r16)
    798c:	80afc83a 	sub	r23,r16,r2
    7990:	b8c00117 	ldw	r3,4(r23)
    7994:	00bfff04 	movi	r2,-4
    7998:	1884703a 	and	r2,r3,r2
    799c:	30002e26 	beq	r6,zero,7a58 <_realloc_r+0x228>
    79a0:	3240b926 	beq	r6,r9,7c88 <_realloc_r+0x458>
    79a4:	98a9883a 	add	r20,r19,r2
    79a8:	2509883a 	add	r4,r4,r20
    79ac:	d9000015 	stw	r4,0(sp)
    79b0:	21c02a16 	blt	r4,r7,7a5c <_realloc_r+0x22c>
    79b4:	30800317 	ldw	r2,12(r6)
    79b8:	30c00217 	ldw	r3,8(r6)
    79bc:	01400904 	movi	r5,36
    79c0:	99bfff04 	addi	r6,r19,-4
    79c4:	18800315 	stw	r2,12(r3)
    79c8:	10c00215 	stw	r3,8(r2)
    79cc:	b9000317 	ldw	r4,12(r23)
    79d0:	b8800217 	ldw	r2,8(r23)
    79d4:	b82b883a 	mov	r21,r23
    79d8:	bc000204 	addi	r16,r23,8
    79dc:	20800215 	stw	r2,8(r4)
    79e0:	11000315 	stw	r4,12(r2)
    79e4:	2980e436 	bltu	r5,r6,7d78 <_realloc_r+0x548>
    79e8:	008004c4 	movi	r2,19
    79ec:	9009883a 	mov	r4,r18
    79f0:	8011883a 	mov	r8,r16
    79f4:	11800f2e 	bgeu	r2,r6,7a34 <_realloc_r+0x204>
    79f8:	90800017 	ldw	r2,0(r18)
    79fc:	ba000404 	addi	r8,r23,16
    7a00:	91000204 	addi	r4,r18,8
    7a04:	b8800215 	stw	r2,8(r23)
    7a08:	90c00117 	ldw	r3,4(r18)
    7a0c:	008006c4 	movi	r2,27
    7a10:	b8c00315 	stw	r3,12(r23)
    7a14:	1180072e 	bgeu	r2,r6,7a34 <_realloc_r+0x204>
    7a18:	90c00217 	ldw	r3,8(r18)
    7a1c:	ba000604 	addi	r8,r23,24
    7a20:	91000404 	addi	r4,r18,16
    7a24:	b8c00415 	stw	r3,16(r23)
    7a28:	90800317 	ldw	r2,12(r18)
    7a2c:	b8800515 	stw	r2,20(r23)
    7a30:	3140e726 	beq	r6,r5,7dd0 <_realloc_r+0x5a0>
    7a34:	20800017 	ldw	r2,0(r4)
    7a38:	dd000017 	ldw	r20,0(sp)
    7a3c:	b80f883a 	mov	r7,r23
    7a40:	40800015 	stw	r2,0(r8)
    7a44:	20c00117 	ldw	r3,4(r4)
    7a48:	40c00115 	stw	r3,4(r8)
    7a4c:	20800217 	ldw	r2,8(r4)
    7a50:	40800215 	stw	r2,8(r8)
    7a54:	003f9706 	br	78b4 <_realloc_r+0x84>
    7a58:	98a9883a 	add	r20,r19,r2
    7a5c:	a1c01f16 	blt	r20,r7,7adc <_realloc_r+0x2ac>
    7a60:	b8c00317 	ldw	r3,12(r23)
    7a64:	b8800217 	ldw	r2,8(r23)
    7a68:	99bfff04 	addi	r6,r19,-4
    7a6c:	01400904 	movi	r5,36
    7a70:	b82b883a 	mov	r21,r23
    7a74:	18800215 	stw	r2,8(r3)
    7a78:	10c00315 	stw	r3,12(r2)
    7a7c:	bc000204 	addi	r16,r23,8
    7a80:	2980c336 	bltu	r5,r6,7d90 <_realloc_r+0x560>
    7a84:	008004c4 	movi	r2,19
    7a88:	9009883a 	mov	r4,r18
    7a8c:	8011883a 	mov	r8,r16
    7a90:	11800f2e 	bgeu	r2,r6,7ad0 <_realloc_r+0x2a0>
    7a94:	90800017 	ldw	r2,0(r18)
    7a98:	ba000404 	addi	r8,r23,16
    7a9c:	91000204 	addi	r4,r18,8
    7aa0:	b8800215 	stw	r2,8(r23)
    7aa4:	90c00117 	ldw	r3,4(r18)
    7aa8:	008006c4 	movi	r2,27
    7aac:	b8c00315 	stw	r3,12(r23)
    7ab0:	1180072e 	bgeu	r2,r6,7ad0 <_realloc_r+0x2a0>
    7ab4:	90c00217 	ldw	r3,8(r18)
    7ab8:	ba000604 	addi	r8,r23,24
    7abc:	91000404 	addi	r4,r18,16
    7ac0:	b8c00415 	stw	r3,16(r23)
    7ac4:	90800317 	ldw	r2,12(r18)
    7ac8:	b8800515 	stw	r2,20(r23)
    7acc:	3140c726 	beq	r6,r5,7dec <_realloc_r+0x5bc>
    7ad0:	20800017 	ldw	r2,0(r4)
    7ad4:	b80f883a 	mov	r7,r23
    7ad8:	003fd906 	br	7a40 <_realloc_r+0x210>
    7adc:	880b883a 	mov	r5,r17
    7ae0:	b009883a 	mov	r4,r22
    7ae4:	0005f380 	call	5f38 <_malloc_r>
    7ae8:	1023883a 	mov	r17,r2
    7aec:	10002526 	beq	r2,zero,7b84 <_realloc_r+0x354>
    7af0:	80800117 	ldw	r2,4(r16)
    7af4:	00ffff84 	movi	r3,-2
    7af8:	893ffe04 	addi	r4,r17,-8
    7afc:	10c4703a 	and	r2,r2,r3
    7b00:	8085883a 	add	r2,r16,r2
    7b04:	20809526 	beq	r4,r2,7d5c <_realloc_r+0x52c>
    7b08:	99bfff04 	addi	r6,r19,-4
    7b0c:	01c00904 	movi	r7,36
    7b10:	39804536 	bltu	r7,r6,7c28 <_realloc_r+0x3f8>
    7b14:	008004c4 	movi	r2,19
    7b18:	9009883a 	mov	r4,r18
    7b1c:	880b883a 	mov	r5,r17
    7b20:	11800f2e 	bgeu	r2,r6,7b60 <_realloc_r+0x330>
    7b24:	90800017 	ldw	r2,0(r18)
    7b28:	89400204 	addi	r5,r17,8
    7b2c:	91000204 	addi	r4,r18,8
    7b30:	88800015 	stw	r2,0(r17)
    7b34:	90c00117 	ldw	r3,4(r18)
    7b38:	008006c4 	movi	r2,27
    7b3c:	88c00115 	stw	r3,4(r17)
    7b40:	1180072e 	bgeu	r2,r6,7b60 <_realloc_r+0x330>
    7b44:	90c00217 	ldw	r3,8(r18)
    7b48:	89400404 	addi	r5,r17,16
    7b4c:	91000404 	addi	r4,r18,16
    7b50:	88c00215 	stw	r3,8(r17)
    7b54:	90800317 	ldw	r2,12(r18)
    7b58:	88800315 	stw	r2,12(r17)
    7b5c:	31c09126 	beq	r6,r7,7da4 <_realloc_r+0x574>
    7b60:	20800017 	ldw	r2,0(r4)
    7b64:	28800015 	stw	r2,0(r5)
    7b68:	20c00117 	ldw	r3,4(r4)
    7b6c:	28c00115 	stw	r3,4(r5)
    7b70:	20800217 	ldw	r2,8(r4)
    7b74:	28800215 	stw	r2,8(r5)
    7b78:	900b883a 	mov	r5,r18
    7b7c:	b009883a 	mov	r4,r22
    7b80:	00053b00 	call	53b0 <_free_r>
    7b84:	b009883a 	mov	r4,r22
    7b88:	000b2a80 	call	b2a8 <__malloc_unlock>
    7b8c:	003f5e06 	br	7908 <_realloc_r+0xd8>
    7b90:	300b883a 	mov	r5,r6
    7b94:	dfc00b17 	ldw	ra,44(sp)
    7b98:	df000a17 	ldw	fp,40(sp)
    7b9c:	ddc00917 	ldw	r23,36(sp)
    7ba0:	dd800817 	ldw	r22,32(sp)
    7ba4:	dd400717 	ldw	r21,28(sp)
    7ba8:	dd000617 	ldw	r20,24(sp)
    7bac:	dcc00517 	ldw	r19,20(sp)
    7bb0:	dc800417 	ldw	r18,16(sp)
    7bb4:	dc400317 	ldw	r17,12(sp)
    7bb8:	dc000217 	ldw	r16,8(sp)
    7bbc:	dec00c04 	addi	sp,sp,48
    7bc0:	0005f381 	jmpi	5f38 <_malloc_r>
    7bc4:	38800117 	ldw	r2,4(r7)
    7bc8:	e54b883a 	add	r5,fp,r21
    7bcc:	31000054 	ori	r4,r6,1
    7bd0:	1080004c 	andi	r2,r2,1
    7bd4:	1704b03a 	or	r2,r2,fp
    7bd8:	38800115 	stw	r2,4(r7)
    7bdc:	29000115 	stw	r4,4(r5)
    7be0:	2987883a 	add	r3,r5,r6
    7be4:	18800117 	ldw	r2,4(r3)
    7be8:	29400204 	addi	r5,r5,8
    7bec:	b009883a 	mov	r4,r22
    7bf0:	10800054 	ori	r2,r2,1
    7bf4:	18800115 	stw	r2,4(r3)
    7bf8:	00053b00 	call	53b0 <_free_r>
    7bfc:	003f3806 	br	78e0 <_realloc_r+0xb0>
    7c00:	000d883a 	mov	r6,zero
    7c04:	0009883a 	mov	r4,zero
    7c08:	003f5d06 	br	7980 <_realloc_r+0x150>
    7c0c:	30c00217 	ldw	r3,8(r6)
    7c10:	30800317 	ldw	r2,12(r6)
    7c14:	800f883a 	mov	r7,r16
    7c18:	84000204 	addi	r16,r16,8
    7c1c:	10c00215 	stw	r3,8(r2)
    7c20:	18800315 	stw	r2,12(r3)
    7c24:	003f2306 	br	78b4 <_realloc_r+0x84>
    7c28:	8809883a 	mov	r4,r17
    7c2c:	900b883a 	mov	r5,r18
    7c30:	000675c0 	call	675c <memmove>
    7c34:	003fd006 	br	7b78 <_realloc_r+0x348>
    7c38:	30800117 	ldw	r2,4(r6)
    7c3c:	e0c00404 	addi	r3,fp,16
    7c40:	1108703a 	and	r4,r2,r4
    7c44:	9905883a 	add	r2,r19,r4
    7c48:	10ff4d16 	blt	r2,r3,7980 <_realloc_r+0x150>
    7c4c:	1705c83a 	sub	r2,r2,fp
    7c50:	870b883a 	add	r5,r16,fp
    7c54:	10800054 	ori	r2,r2,1
    7c58:	28800115 	stw	r2,4(r5)
    7c5c:	80c00117 	ldw	r3,4(r16)
    7c60:	00800074 	movhi	r2,1
    7c64:	10887e04 	addi	r2,r2,8696
    7c68:	b009883a 	mov	r4,r22
    7c6c:	18c0004c 	andi	r3,r3,1
    7c70:	e0c6b03a 	or	r3,fp,r3
    7c74:	11400215 	stw	r5,8(r2)
    7c78:	80c00115 	stw	r3,4(r16)
    7c7c:	000b2a80 	call	b2a8 <__malloc_unlock>
    7c80:	84400204 	addi	r17,r16,8
    7c84:	003f2006 	br	7908 <_realloc_r+0xd8>
    7c88:	98a9883a 	add	r20,r19,r2
    7c8c:	2509883a 	add	r4,r4,r20
    7c90:	e0800404 	addi	r2,fp,16
    7c94:	d9000115 	stw	r4,4(sp)
    7c98:	20bf7016 	blt	r4,r2,7a5c <_realloc_r+0x22c>
    7c9c:	b8c00317 	ldw	r3,12(r23)
    7ca0:	b8800217 	ldw	r2,8(r23)
    7ca4:	99bfff04 	addi	r6,r19,-4
    7ca8:	01400904 	movi	r5,36
    7cac:	18800215 	stw	r2,8(r3)
    7cb0:	10c00315 	stw	r3,12(r2)
    7cb4:	bc400204 	addi	r17,r23,8
    7cb8:	29804136 	bltu	r5,r6,7dc0 <_realloc_r+0x590>
    7cbc:	008004c4 	movi	r2,19
    7cc0:	9009883a 	mov	r4,r18
    7cc4:	880f883a 	mov	r7,r17
    7cc8:	11800f2e 	bgeu	r2,r6,7d08 <_realloc_r+0x4d8>
    7ccc:	90800017 	ldw	r2,0(r18)
    7cd0:	b9c00404 	addi	r7,r23,16
    7cd4:	91000204 	addi	r4,r18,8
    7cd8:	b8800215 	stw	r2,8(r23)
    7cdc:	90c00117 	ldw	r3,4(r18)
    7ce0:	008006c4 	movi	r2,27
    7ce4:	b8c00315 	stw	r3,12(r23)
    7ce8:	1180072e 	bgeu	r2,r6,7d08 <_realloc_r+0x4d8>
    7cec:	90c00217 	ldw	r3,8(r18)
    7cf0:	b9c00604 	addi	r7,r23,24
    7cf4:	91000404 	addi	r4,r18,16
    7cf8:	b8c00415 	stw	r3,16(r23)
    7cfc:	90800317 	ldw	r2,12(r18)
    7d00:	b8800515 	stw	r2,20(r23)
    7d04:	31404026 	beq	r6,r5,7e08 <_realloc_r+0x5d8>
    7d08:	20800017 	ldw	r2,0(r4)
    7d0c:	38800015 	stw	r2,0(r7)
    7d10:	20c00117 	ldw	r3,4(r4)
    7d14:	38c00115 	stw	r3,4(r7)
    7d18:	20800217 	ldw	r2,8(r4)
    7d1c:	38800215 	stw	r2,8(r7)
    7d20:	d8c00117 	ldw	r3,4(sp)
    7d24:	bf0b883a 	add	r5,r23,fp
    7d28:	b009883a 	mov	r4,r22
    7d2c:	1f05c83a 	sub	r2,r3,fp
    7d30:	10800054 	ori	r2,r2,1
    7d34:	28800115 	stw	r2,4(r5)
    7d38:	b8c00117 	ldw	r3,4(r23)
    7d3c:	00800074 	movhi	r2,1
    7d40:	10887e04 	addi	r2,r2,8696
    7d44:	11400215 	stw	r5,8(r2)
    7d48:	18c0004c 	andi	r3,r3,1
    7d4c:	e0c6b03a 	or	r3,fp,r3
    7d50:	b8c00115 	stw	r3,4(r23)
    7d54:	000b2a80 	call	b2a8 <__malloc_unlock>
    7d58:	003eeb06 	br	7908 <_realloc_r+0xd8>
    7d5c:	20800117 	ldw	r2,4(r4)
    7d60:	00ffff04 	movi	r3,-4
    7d64:	800f883a 	mov	r7,r16
    7d68:	10c4703a 	and	r2,r2,r3
    7d6c:	98a9883a 	add	r20,r19,r2
    7d70:	84000204 	addi	r16,r16,8
    7d74:	003ecf06 	br	78b4 <_realloc_r+0x84>
    7d78:	900b883a 	mov	r5,r18
    7d7c:	8009883a 	mov	r4,r16
    7d80:	000675c0 	call	675c <memmove>
    7d84:	dd000017 	ldw	r20,0(sp)
    7d88:	b80f883a 	mov	r7,r23
    7d8c:	003ec906 	br	78b4 <_realloc_r+0x84>
    7d90:	900b883a 	mov	r5,r18
    7d94:	8009883a 	mov	r4,r16
    7d98:	000675c0 	call	675c <memmove>
    7d9c:	b80f883a 	mov	r7,r23
    7da0:	003ec406 	br	78b4 <_realloc_r+0x84>
    7da4:	90c00417 	ldw	r3,16(r18)
    7da8:	89400604 	addi	r5,r17,24
    7dac:	91000604 	addi	r4,r18,24
    7db0:	88c00415 	stw	r3,16(r17)
    7db4:	90800517 	ldw	r2,20(r18)
    7db8:	88800515 	stw	r2,20(r17)
    7dbc:	003f6806 	br	7b60 <_realloc_r+0x330>
    7dc0:	900b883a 	mov	r5,r18
    7dc4:	8809883a 	mov	r4,r17
    7dc8:	000675c0 	call	675c <memmove>
    7dcc:	003fd406 	br	7d20 <_realloc_r+0x4f0>
    7dd0:	90c00417 	ldw	r3,16(r18)
    7dd4:	91000604 	addi	r4,r18,24
    7dd8:	ba000804 	addi	r8,r23,32
    7ddc:	b8c00615 	stw	r3,24(r23)
    7de0:	90800517 	ldw	r2,20(r18)
    7de4:	b8800715 	stw	r2,28(r23)
    7de8:	003f1206 	br	7a34 <_realloc_r+0x204>
    7dec:	90c00417 	ldw	r3,16(r18)
    7df0:	91000604 	addi	r4,r18,24
    7df4:	ba000804 	addi	r8,r23,32
    7df8:	b8c00615 	stw	r3,24(r23)
    7dfc:	90800517 	ldw	r2,20(r18)
    7e00:	b8800715 	stw	r2,28(r23)
    7e04:	003f3206 	br	7ad0 <_realloc_r+0x2a0>
    7e08:	90c00417 	ldw	r3,16(r18)
    7e0c:	91000604 	addi	r4,r18,24
    7e10:	b9c00804 	addi	r7,r23,32
    7e14:	b8c00615 	stw	r3,24(r23)
    7e18:	90800517 	ldw	r2,20(r18)
    7e1c:	b8800715 	stw	r2,28(r23)
    7e20:	003fb906 	br	7d08 <_realloc_r+0x4d8>

00007e24 <__isinfd>:
    7e24:	200d883a 	mov	r6,r4
    7e28:	0109c83a 	sub	r4,zero,r4
    7e2c:	2188b03a 	or	r4,r4,r6
    7e30:	2008d7fa 	srli	r4,r4,31
    7e34:	00a00034 	movhi	r2,32768
    7e38:	10bfffc4 	addi	r2,r2,-1
    7e3c:	1144703a 	and	r2,r2,r5
    7e40:	2088b03a 	or	r4,r4,r2
    7e44:	009ffc34 	movhi	r2,32752
    7e48:	1105c83a 	sub	r2,r2,r4
    7e4c:	0087c83a 	sub	r3,zero,r2
    7e50:	10c4b03a 	or	r2,r2,r3
    7e54:	1004d7fa 	srli	r2,r2,31
    7e58:	00c00044 	movi	r3,1
    7e5c:	1885c83a 	sub	r2,r3,r2
    7e60:	f800283a 	ret

00007e64 <__isnand>:
    7e64:	200d883a 	mov	r6,r4
    7e68:	0109c83a 	sub	r4,zero,r4
    7e6c:	2188b03a 	or	r4,r4,r6
    7e70:	2008d7fa 	srli	r4,r4,31
    7e74:	00a00034 	movhi	r2,32768
    7e78:	10bfffc4 	addi	r2,r2,-1
    7e7c:	1144703a 	and	r2,r2,r5
    7e80:	2088b03a 	or	r4,r4,r2
    7e84:	009ffc34 	movhi	r2,32752
    7e88:	1105c83a 	sub	r2,r2,r4
    7e8c:	1004d7fa 	srli	r2,r2,31
    7e90:	f800283a 	ret

00007e94 <_sbrk_r>:
    7e94:	defffd04 	addi	sp,sp,-12
    7e98:	dc000015 	stw	r16,0(sp)
    7e9c:	04000074 	movhi	r16,1
    7ea0:	84168e04 	addi	r16,r16,23096
    7ea4:	dc400115 	stw	r17,4(sp)
    7ea8:	80000015 	stw	zero,0(r16)
    7eac:	2023883a 	mov	r17,r4
    7eb0:	2809883a 	mov	r4,r5
    7eb4:	dfc00215 	stw	ra,8(sp)
    7eb8:	000b7400 	call	b740 <sbrk>
    7ebc:	1007883a 	mov	r3,r2
    7ec0:	00bfffc4 	movi	r2,-1
    7ec4:	18800626 	beq	r3,r2,7ee0 <_sbrk_r+0x4c>
    7ec8:	1805883a 	mov	r2,r3
    7ecc:	dfc00217 	ldw	ra,8(sp)
    7ed0:	dc400117 	ldw	r17,4(sp)
    7ed4:	dc000017 	ldw	r16,0(sp)
    7ed8:	dec00304 	addi	sp,sp,12
    7edc:	f800283a 	ret
    7ee0:	80800017 	ldw	r2,0(r16)
    7ee4:	103ff826 	beq	r2,zero,7ec8 <_sbrk_r+0x34>
    7ee8:	88800015 	stw	r2,0(r17)
    7eec:	1805883a 	mov	r2,r3
    7ef0:	dfc00217 	ldw	ra,8(sp)
    7ef4:	dc400117 	ldw	r17,4(sp)
    7ef8:	dc000017 	ldw	r16,0(sp)
    7efc:	dec00304 	addi	sp,sp,12
    7f00:	f800283a 	ret

00007f04 <__sclose>:
    7f04:	2940038f 	ldh	r5,14(r5)
    7f08:	00082ac1 	jmpi	82ac <_close_r>

00007f0c <__sseek>:
    7f0c:	defffe04 	addi	sp,sp,-8
    7f10:	dc000015 	stw	r16,0(sp)
    7f14:	2821883a 	mov	r16,r5
    7f18:	2940038f 	ldh	r5,14(r5)
    7f1c:	dfc00115 	stw	ra,4(sp)
    7f20:	00085240 	call	8524 <_lseek_r>
    7f24:	1007883a 	mov	r3,r2
    7f28:	00bfffc4 	movi	r2,-1
    7f2c:	18800926 	beq	r3,r2,7f54 <__sseek+0x48>
    7f30:	8080030b 	ldhu	r2,12(r16)
    7f34:	80c01415 	stw	r3,80(r16)
    7f38:	10840014 	ori	r2,r2,4096
    7f3c:	8080030d 	sth	r2,12(r16)
    7f40:	1805883a 	mov	r2,r3
    7f44:	dfc00117 	ldw	ra,4(sp)
    7f48:	dc000017 	ldw	r16,0(sp)
    7f4c:	dec00204 	addi	sp,sp,8
    7f50:	f800283a 	ret
    7f54:	8080030b 	ldhu	r2,12(r16)
    7f58:	10bbffcc 	andi	r2,r2,61439
    7f5c:	8080030d 	sth	r2,12(r16)
    7f60:	1805883a 	mov	r2,r3
    7f64:	dfc00117 	ldw	ra,4(sp)
    7f68:	dc000017 	ldw	r16,0(sp)
    7f6c:	dec00204 	addi	sp,sp,8
    7f70:	f800283a 	ret

00007f74 <__swrite>:
    7f74:	2880030b 	ldhu	r2,12(r5)
    7f78:	defffb04 	addi	sp,sp,-20
    7f7c:	dcc00315 	stw	r19,12(sp)
    7f80:	1080400c 	andi	r2,r2,256
    7f84:	dc800215 	stw	r18,8(sp)
    7f88:	dc400115 	stw	r17,4(sp)
    7f8c:	dc000015 	stw	r16,0(sp)
    7f90:	3027883a 	mov	r19,r6
    7f94:	3825883a 	mov	r18,r7
    7f98:	dfc00415 	stw	ra,16(sp)
    7f9c:	2821883a 	mov	r16,r5
    7fa0:	000d883a 	mov	r6,zero
    7fa4:	01c00084 	movi	r7,2
    7fa8:	2023883a 	mov	r17,r4
    7fac:	10000226 	beq	r2,zero,7fb8 <__swrite+0x44>
    7fb0:	2940038f 	ldh	r5,14(r5)
    7fb4:	00085240 	call	8524 <_lseek_r>
    7fb8:	8080030b 	ldhu	r2,12(r16)
    7fbc:	8140038f 	ldh	r5,14(r16)
    7fc0:	8809883a 	mov	r4,r17
    7fc4:	10bbffcc 	andi	r2,r2,61439
    7fc8:	980d883a 	mov	r6,r19
    7fcc:	900f883a 	mov	r7,r18
    7fd0:	8080030d 	sth	r2,12(r16)
    7fd4:	dfc00417 	ldw	ra,16(sp)
    7fd8:	dcc00317 	ldw	r19,12(sp)
    7fdc:	dc800217 	ldw	r18,8(sp)
    7fe0:	dc400117 	ldw	r17,4(sp)
    7fe4:	dc000017 	ldw	r16,0(sp)
    7fe8:	dec00504 	addi	sp,sp,20
    7fec:	00081801 	jmpi	8180 <_write_r>

00007ff0 <__sread>:
    7ff0:	defffe04 	addi	sp,sp,-8
    7ff4:	dc000015 	stw	r16,0(sp)
    7ff8:	2821883a 	mov	r16,r5
    7ffc:	2940038f 	ldh	r5,14(r5)
    8000:	dfc00115 	stw	ra,4(sp)
    8004:	000859c0 	call	859c <_read_r>
    8008:	1007883a 	mov	r3,r2
    800c:	10000816 	blt	r2,zero,8030 <__sread+0x40>
    8010:	80801417 	ldw	r2,80(r16)
    8014:	10c5883a 	add	r2,r2,r3
    8018:	80801415 	stw	r2,80(r16)
    801c:	1805883a 	mov	r2,r3
    8020:	dfc00117 	ldw	ra,4(sp)
    8024:	dc000017 	ldw	r16,0(sp)
    8028:	dec00204 	addi	sp,sp,8
    802c:	f800283a 	ret
    8030:	8080030b 	ldhu	r2,12(r16)
    8034:	10bbffcc 	andi	r2,r2,61439
    8038:	8080030d 	sth	r2,12(r16)
    803c:	1805883a 	mov	r2,r3
    8040:	dfc00117 	ldw	ra,4(sp)
    8044:	dc000017 	ldw	r16,0(sp)
    8048:	dec00204 	addi	sp,sp,8
    804c:	f800283a 	ret

00008050 <strcmp>:
    8050:	2144b03a 	or	r2,r4,r5
    8054:	108000cc 	andi	r2,r2,3
    8058:	10001d1e 	bne	r2,zero,80d0 <strcmp+0x80>
    805c:	200f883a 	mov	r7,r4
    8060:	28800017 	ldw	r2,0(r5)
    8064:	21000017 	ldw	r4,0(r4)
    8068:	280d883a 	mov	r6,r5
    806c:	2080161e 	bne	r4,r2,80c8 <strcmp+0x78>
    8070:	023fbff4 	movhi	r8,65279
    8074:	423fbfc4 	addi	r8,r8,-257
    8078:	2207883a 	add	r3,r4,r8
    807c:	01602074 	movhi	r5,32897
    8080:	29602004 	addi	r5,r5,-32640
    8084:	1946703a 	and	r3,r3,r5
    8088:	0104303a 	nor	r2,zero,r4
    808c:	10c4703a 	and	r2,r2,r3
    8090:	10001c1e 	bne	r2,zero,8104 <strcmp+0xb4>
    8094:	4013883a 	mov	r9,r8
    8098:	2811883a 	mov	r8,r5
    809c:	00000106 	br	80a4 <strcmp+0x54>
    80a0:	1800181e 	bne	r3,zero,8104 <strcmp+0xb4>
    80a4:	39c00104 	addi	r7,r7,4
    80a8:	39000017 	ldw	r4,0(r7)
    80ac:	31800104 	addi	r6,r6,4
    80b0:	31400017 	ldw	r5,0(r6)
    80b4:	2245883a 	add	r2,r4,r9
    80b8:	1204703a 	and	r2,r2,r8
    80bc:	0106303a 	nor	r3,zero,r4
    80c0:	1886703a 	and	r3,r3,r2
    80c4:	217ff626 	beq	r4,r5,80a0 <strcmp+0x50>
    80c8:	3809883a 	mov	r4,r7
    80cc:	300b883a 	mov	r5,r6
    80d0:	20c00007 	ldb	r3,0(r4)
    80d4:	1800051e 	bne	r3,zero,80ec <strcmp+0x9c>
    80d8:	00000606 	br	80f4 <strcmp+0xa4>
    80dc:	21000044 	addi	r4,r4,1
    80e0:	20c00007 	ldb	r3,0(r4)
    80e4:	29400044 	addi	r5,r5,1
    80e8:	18000226 	beq	r3,zero,80f4 <strcmp+0xa4>
    80ec:	28800007 	ldb	r2,0(r5)
    80f0:	18bffa26 	beq	r3,r2,80dc <strcmp+0x8c>
    80f4:	20c00003 	ldbu	r3,0(r4)
    80f8:	28800003 	ldbu	r2,0(r5)
    80fc:	1885c83a 	sub	r2,r3,r2
    8100:	f800283a 	ret
    8104:	0005883a 	mov	r2,zero
    8108:	f800283a 	ret

0000810c <strlen>:
    810c:	208000cc 	andi	r2,r4,3
    8110:	2011883a 	mov	r8,r4
    8114:	1000161e 	bne	r2,zero,8170 <strlen+0x64>
    8118:	20c00017 	ldw	r3,0(r4)
    811c:	017fbff4 	movhi	r5,65279
    8120:	297fbfc4 	addi	r5,r5,-257
    8124:	01e02074 	movhi	r7,32897
    8128:	39e02004 	addi	r7,r7,-32640
    812c:	1945883a 	add	r2,r3,r5
    8130:	11c4703a 	and	r2,r2,r7
    8134:	00c6303a 	nor	r3,zero,r3
    8138:	1886703a 	and	r3,r3,r2
    813c:	18000c1e 	bne	r3,zero,8170 <strlen+0x64>
    8140:	280d883a 	mov	r6,r5
    8144:	380b883a 	mov	r5,r7
    8148:	21000104 	addi	r4,r4,4
    814c:	20800017 	ldw	r2,0(r4)
    8150:	1187883a 	add	r3,r2,r6
    8154:	1946703a 	and	r3,r3,r5
    8158:	0084303a 	nor	r2,zero,r2
    815c:	10c4703a 	and	r2,r2,r3
    8160:	103ff926 	beq	r2,zero,8148 <strlen+0x3c>
    8164:	20800007 	ldb	r2,0(r4)
    8168:	10000326 	beq	r2,zero,8178 <strlen+0x6c>
    816c:	21000044 	addi	r4,r4,1
    8170:	20800007 	ldb	r2,0(r4)
    8174:	103ffd1e 	bne	r2,zero,816c <strlen+0x60>
    8178:	2205c83a 	sub	r2,r4,r8
    817c:	f800283a 	ret

00008180 <_write_r>:
    8180:	defffd04 	addi	sp,sp,-12
    8184:	dc000015 	stw	r16,0(sp)
    8188:	04000074 	movhi	r16,1
    818c:	84168e04 	addi	r16,r16,23096
    8190:	dc400115 	stw	r17,4(sp)
    8194:	80000015 	stw	zero,0(r16)
    8198:	2023883a 	mov	r17,r4
    819c:	2809883a 	mov	r4,r5
    81a0:	300b883a 	mov	r5,r6
    81a4:	380d883a 	mov	r6,r7
    81a8:	dfc00215 	stw	ra,8(sp)
    81ac:	000b7fc0 	call	b7fc <write>
    81b0:	1007883a 	mov	r3,r2
    81b4:	00bfffc4 	movi	r2,-1
    81b8:	18800626 	beq	r3,r2,81d4 <_write_r+0x54>
    81bc:	1805883a 	mov	r2,r3
    81c0:	dfc00217 	ldw	ra,8(sp)
    81c4:	dc400117 	ldw	r17,4(sp)
    81c8:	dc000017 	ldw	r16,0(sp)
    81cc:	dec00304 	addi	sp,sp,12
    81d0:	f800283a 	ret
    81d4:	80800017 	ldw	r2,0(r16)
    81d8:	103ff826 	beq	r2,zero,81bc <_write_r+0x3c>
    81dc:	88800015 	stw	r2,0(r17)
    81e0:	1805883a 	mov	r2,r3
    81e4:	dfc00217 	ldw	ra,8(sp)
    81e8:	dc400117 	ldw	r17,4(sp)
    81ec:	dc000017 	ldw	r16,0(sp)
    81f0:	dec00304 	addi	sp,sp,12
    81f4:	f800283a 	ret

000081f8 <_calloc_r>:
    81f8:	298b383a 	mul	r5,r5,r6
    81fc:	defffe04 	addi	sp,sp,-8
    8200:	dc000015 	stw	r16,0(sp)
    8204:	dfc00115 	stw	ra,4(sp)
    8208:	0005f380 	call	5f38 <_malloc_r>
    820c:	1021883a 	mov	r16,r2
    8210:	01c00904 	movi	r7,36
    8214:	10000d26 	beq	r2,zero,824c <_calloc_r+0x54>
    8218:	10ffff17 	ldw	r3,-4(r2)
    821c:	1009883a 	mov	r4,r2
    8220:	00bfff04 	movi	r2,-4
    8224:	1886703a 	and	r3,r3,r2
    8228:	1887883a 	add	r3,r3,r2
    822c:	180d883a 	mov	r6,r3
    8230:	000b883a 	mov	r5,zero
    8234:	38c01736 	bltu	r7,r3,8294 <_calloc_r+0x9c>
    8238:	008004c4 	movi	r2,19
    823c:	10c00836 	bltu	r2,r3,8260 <_calloc_r+0x68>
    8240:	20000215 	stw	zero,8(r4)
    8244:	20000015 	stw	zero,0(r4)
    8248:	20000115 	stw	zero,4(r4)
    824c:	8005883a 	mov	r2,r16
    8250:	dfc00117 	ldw	ra,4(sp)
    8254:	dc000017 	ldw	r16,0(sp)
    8258:	dec00204 	addi	sp,sp,8
    825c:	f800283a 	ret
    8260:	008006c4 	movi	r2,27
    8264:	80000015 	stw	zero,0(r16)
    8268:	80000115 	stw	zero,4(r16)
    826c:	81000204 	addi	r4,r16,8
    8270:	10fff32e 	bgeu	r2,r3,8240 <_calloc_r+0x48>
    8274:	80000215 	stw	zero,8(r16)
    8278:	80000315 	stw	zero,12(r16)
    827c:	81000404 	addi	r4,r16,16
    8280:	19ffef1e 	bne	r3,r7,8240 <_calloc_r+0x48>
    8284:	81000604 	addi	r4,r16,24
    8288:	80000415 	stw	zero,16(r16)
    828c:	80000515 	stw	zero,20(r16)
    8290:	003feb06 	br	8240 <_calloc_r+0x48>
    8294:	00014540 	call	1454 <memset>
    8298:	8005883a 	mov	r2,r16
    829c:	dfc00117 	ldw	ra,4(sp)
    82a0:	dc000017 	ldw	r16,0(sp)
    82a4:	dec00204 	addi	sp,sp,8
    82a8:	f800283a 	ret

000082ac <_close_r>:
    82ac:	defffd04 	addi	sp,sp,-12
    82b0:	dc000015 	stw	r16,0(sp)
    82b4:	04000074 	movhi	r16,1
    82b8:	84168e04 	addi	r16,r16,23096
    82bc:	dc400115 	stw	r17,4(sp)
    82c0:	80000015 	stw	zero,0(r16)
    82c4:	2023883a 	mov	r17,r4
    82c8:	2809883a 	mov	r4,r5
    82cc:	dfc00215 	stw	ra,8(sp)
    82d0:	000aa440 	call	aa44 <close>
    82d4:	1007883a 	mov	r3,r2
    82d8:	00bfffc4 	movi	r2,-1
    82dc:	18800626 	beq	r3,r2,82f8 <_close_r+0x4c>
    82e0:	1805883a 	mov	r2,r3
    82e4:	dfc00217 	ldw	ra,8(sp)
    82e8:	dc400117 	ldw	r17,4(sp)
    82ec:	dc000017 	ldw	r16,0(sp)
    82f0:	dec00304 	addi	sp,sp,12
    82f4:	f800283a 	ret
    82f8:	80800017 	ldw	r2,0(r16)
    82fc:	103ff826 	beq	r2,zero,82e0 <_close_r+0x34>
    8300:	88800015 	stw	r2,0(r17)
    8304:	1805883a 	mov	r2,r3
    8308:	dfc00217 	ldw	ra,8(sp)
    830c:	dc400117 	ldw	r17,4(sp)
    8310:	dc000017 	ldw	r16,0(sp)
    8314:	dec00304 	addi	sp,sp,12
    8318:	f800283a 	ret

0000831c <_fclose_r>:
    831c:	defffc04 	addi	sp,sp,-16
    8320:	dc400115 	stw	r17,4(sp)
    8324:	dc000015 	stw	r16,0(sp)
    8328:	dfc00315 	stw	ra,12(sp)
    832c:	dc800215 	stw	r18,8(sp)
    8330:	2821883a 	mov	r16,r5
    8334:	2023883a 	mov	r17,r4
    8338:	28002926 	beq	r5,zero,83e0 <_fclose_r+0xc4>
    833c:	000501c0 	call	501c <__sfp_lock_acquire>
    8340:	88000226 	beq	r17,zero,834c <_fclose_r+0x30>
    8344:	88800e17 	ldw	r2,56(r17)
    8348:	10002d26 	beq	r2,zero,8400 <_fclose_r+0xe4>
    834c:	8080030f 	ldh	r2,12(r16)
    8350:	10002226 	beq	r2,zero,83dc <_fclose_r+0xc0>
    8354:	8809883a 	mov	r4,r17
    8358:	800b883a 	mov	r5,r16
    835c:	0004d940 	call	4d94 <_fflush_r>
    8360:	1025883a 	mov	r18,r2
    8364:	80800b17 	ldw	r2,44(r16)
    8368:	10000426 	beq	r2,zero,837c <_fclose_r+0x60>
    836c:	81400717 	ldw	r5,28(r16)
    8370:	8809883a 	mov	r4,r17
    8374:	103ee83a 	callr	r2
    8378:	10002a16 	blt	r2,zero,8424 <_fclose_r+0x108>
    837c:	8080030b 	ldhu	r2,12(r16)
    8380:	1080200c 	andi	r2,r2,128
    8384:	1000231e 	bne	r2,zero,8414 <_fclose_r+0xf8>
    8388:	81400c17 	ldw	r5,48(r16)
    838c:	28000526 	beq	r5,zero,83a4 <_fclose_r+0x88>
    8390:	80801004 	addi	r2,r16,64
    8394:	28800226 	beq	r5,r2,83a0 <_fclose_r+0x84>
    8398:	8809883a 	mov	r4,r17
    839c:	00053b00 	call	53b0 <_free_r>
    83a0:	80000c15 	stw	zero,48(r16)
    83a4:	81401117 	ldw	r5,68(r16)
    83a8:	28000326 	beq	r5,zero,83b8 <_fclose_r+0x9c>
    83ac:	8809883a 	mov	r4,r17
    83b0:	00053b00 	call	53b0 <_free_r>
    83b4:	80001115 	stw	zero,68(r16)
    83b8:	8000030d 	sth	zero,12(r16)
    83bc:	00050200 	call	5020 <__sfp_lock_release>
    83c0:	9005883a 	mov	r2,r18
    83c4:	dfc00317 	ldw	ra,12(sp)
    83c8:	dc800217 	ldw	r18,8(sp)
    83cc:	dc400117 	ldw	r17,4(sp)
    83d0:	dc000017 	ldw	r16,0(sp)
    83d4:	dec00404 	addi	sp,sp,16
    83d8:	f800283a 	ret
    83dc:	00050200 	call	5020 <__sfp_lock_release>
    83e0:	0025883a 	mov	r18,zero
    83e4:	9005883a 	mov	r2,r18
    83e8:	dfc00317 	ldw	ra,12(sp)
    83ec:	dc800217 	ldw	r18,8(sp)
    83f0:	dc400117 	ldw	r17,4(sp)
    83f4:	dc000017 	ldw	r16,0(sp)
    83f8:	dec00404 	addi	sp,sp,16
    83fc:	f800283a 	ret
    8400:	8809883a 	mov	r4,r17
    8404:	000502c0 	call	502c <__sinit>
    8408:	8080030f 	ldh	r2,12(r16)
    840c:	103fd11e 	bne	r2,zero,8354 <_fclose_r+0x38>
    8410:	003ff206 	br	83dc <_fclose_r+0xc0>
    8414:	81400417 	ldw	r5,16(r16)
    8418:	8809883a 	mov	r4,r17
    841c:	00053b00 	call	53b0 <_free_r>
    8420:	003fd906 	br	8388 <_fclose_r+0x6c>
    8424:	04bfffc4 	movi	r18,-1
    8428:	003fd406 	br	837c <_fclose_r+0x60>

0000842c <fclose>:
    842c:	00800074 	movhi	r2,1
    8430:	108eef04 	addi	r2,r2,15292
    8434:	200b883a 	mov	r5,r4
    8438:	11000017 	ldw	r4,0(r2)
    843c:	000831c1 	jmpi	831c <_fclose_r>

00008440 <_fstat_r>:
    8440:	defffd04 	addi	sp,sp,-12
    8444:	dc000015 	stw	r16,0(sp)
    8448:	04000074 	movhi	r16,1
    844c:	84168e04 	addi	r16,r16,23096
    8450:	dc400115 	stw	r17,4(sp)
    8454:	80000015 	stw	zero,0(r16)
    8458:	2023883a 	mov	r17,r4
    845c:	2809883a 	mov	r4,r5
    8460:	300b883a 	mov	r5,r6
    8464:	dfc00215 	stw	ra,8(sp)
    8468:	000abcc0 	call	abcc <fstat>
    846c:	1007883a 	mov	r3,r2
    8470:	00bfffc4 	movi	r2,-1
    8474:	18800626 	beq	r3,r2,8490 <_fstat_r+0x50>
    8478:	1805883a 	mov	r2,r3
    847c:	dfc00217 	ldw	ra,8(sp)
    8480:	dc400117 	ldw	r17,4(sp)
    8484:	dc000017 	ldw	r16,0(sp)
    8488:	dec00304 	addi	sp,sp,12
    848c:	f800283a 	ret
    8490:	80800017 	ldw	r2,0(r16)
    8494:	103ff826 	beq	r2,zero,8478 <_fstat_r+0x38>
    8498:	88800015 	stw	r2,0(r17)
    849c:	1805883a 	mov	r2,r3
    84a0:	dfc00217 	ldw	ra,8(sp)
    84a4:	dc400117 	ldw	r17,4(sp)
    84a8:	dc000017 	ldw	r16,0(sp)
    84ac:	dec00304 	addi	sp,sp,12
    84b0:	f800283a 	ret

000084b4 <_isatty_r>:
    84b4:	defffd04 	addi	sp,sp,-12
    84b8:	dc000015 	stw	r16,0(sp)
    84bc:	04000074 	movhi	r16,1
    84c0:	84168e04 	addi	r16,r16,23096
    84c4:	dc400115 	stw	r17,4(sp)
    84c8:	80000015 	stw	zero,0(r16)
    84cc:	2023883a 	mov	r17,r4
    84d0:	2809883a 	mov	r4,r5
    84d4:	dfc00215 	stw	ra,8(sp)
    84d8:	000aec00 	call	aec0 <isatty>
    84dc:	1007883a 	mov	r3,r2
    84e0:	00bfffc4 	movi	r2,-1
    84e4:	18800626 	beq	r3,r2,8500 <_isatty_r+0x4c>
    84e8:	1805883a 	mov	r2,r3
    84ec:	dfc00217 	ldw	ra,8(sp)
    84f0:	dc400117 	ldw	r17,4(sp)
    84f4:	dc000017 	ldw	r16,0(sp)
    84f8:	dec00304 	addi	sp,sp,12
    84fc:	f800283a 	ret
    8500:	80800017 	ldw	r2,0(r16)
    8504:	103ff826 	beq	r2,zero,84e8 <_isatty_r+0x34>
    8508:	88800015 	stw	r2,0(r17)
    850c:	1805883a 	mov	r2,r3
    8510:	dfc00217 	ldw	ra,8(sp)
    8514:	dc400117 	ldw	r17,4(sp)
    8518:	dc000017 	ldw	r16,0(sp)
    851c:	dec00304 	addi	sp,sp,12
    8520:	f800283a 	ret

00008524 <_lseek_r>:
    8524:	defffd04 	addi	sp,sp,-12
    8528:	dc000015 	stw	r16,0(sp)
    852c:	04000074 	movhi	r16,1
    8530:	84168e04 	addi	r16,r16,23096
    8534:	dc400115 	stw	r17,4(sp)
    8538:	80000015 	stw	zero,0(r16)
    853c:	2023883a 	mov	r17,r4
    8540:	2809883a 	mov	r4,r5
    8544:	300b883a 	mov	r5,r6
    8548:	380d883a 	mov	r6,r7
    854c:	dfc00215 	stw	ra,8(sp)
    8550:	000b0cc0 	call	b0cc <lseek>
    8554:	1007883a 	mov	r3,r2
    8558:	00bfffc4 	movi	r2,-1
    855c:	18800626 	beq	r3,r2,8578 <_lseek_r+0x54>
    8560:	1805883a 	mov	r2,r3
    8564:	dfc00217 	ldw	ra,8(sp)
    8568:	dc400117 	ldw	r17,4(sp)
    856c:	dc000017 	ldw	r16,0(sp)
    8570:	dec00304 	addi	sp,sp,12
    8574:	f800283a 	ret
    8578:	80800017 	ldw	r2,0(r16)
    857c:	103ff826 	beq	r2,zero,8560 <_lseek_r+0x3c>
    8580:	88800015 	stw	r2,0(r17)
    8584:	1805883a 	mov	r2,r3
    8588:	dfc00217 	ldw	ra,8(sp)
    858c:	dc400117 	ldw	r17,4(sp)
    8590:	dc000017 	ldw	r16,0(sp)
    8594:	dec00304 	addi	sp,sp,12
    8598:	f800283a 	ret

0000859c <_read_r>:
    859c:	defffd04 	addi	sp,sp,-12
    85a0:	dc000015 	stw	r16,0(sp)
    85a4:	04000074 	movhi	r16,1
    85a8:	84168e04 	addi	r16,r16,23096
    85ac:	dc400115 	stw	r17,4(sp)
    85b0:	80000015 	stw	zero,0(r16)
    85b4:	2023883a 	mov	r17,r4
    85b8:	2809883a 	mov	r4,r5
    85bc:	300b883a 	mov	r5,r6
    85c0:	380d883a 	mov	r6,r7
    85c4:	dfc00215 	stw	ra,8(sp)
    85c8:	000b5600 	call	b560 <read>
    85cc:	1007883a 	mov	r3,r2
    85d0:	00bfffc4 	movi	r2,-1
    85d4:	18800626 	beq	r3,r2,85f0 <_read_r+0x54>
    85d8:	1805883a 	mov	r2,r3
    85dc:	dfc00217 	ldw	ra,8(sp)
    85e0:	dc400117 	ldw	r17,4(sp)
    85e4:	dc000017 	ldw	r16,0(sp)
    85e8:	dec00304 	addi	sp,sp,12
    85ec:	f800283a 	ret
    85f0:	80800017 	ldw	r2,0(r16)
    85f4:	103ff826 	beq	r2,zero,85d8 <_read_r+0x3c>
    85f8:	88800015 	stw	r2,0(r17)
    85fc:	1805883a 	mov	r2,r3
    8600:	dfc00217 	ldw	ra,8(sp)
    8604:	dc400117 	ldw	r17,4(sp)
    8608:	dc000017 	ldw	r16,0(sp)
    860c:	dec00304 	addi	sp,sp,12
    8610:	f800283a 	ret

00008614 <__udivdi3>:
    8614:	defff004 	addi	sp,sp,-64
    8618:	2005883a 	mov	r2,r4
    861c:	3011883a 	mov	r8,r6
    8620:	df000e15 	stw	fp,56(sp)
    8624:	dd000a15 	stw	r20,40(sp)
    8628:	dc000615 	stw	r16,24(sp)
    862c:	dfc00f15 	stw	ra,60(sp)
    8630:	ddc00d15 	stw	r23,52(sp)
    8634:	dd800c15 	stw	r22,48(sp)
    8638:	dd400b15 	stw	r21,44(sp)
    863c:	dcc00915 	stw	r19,36(sp)
    8640:	dc800815 	stw	r18,32(sp)
    8644:	dc400715 	stw	r17,28(sp)
    8648:	4021883a 	mov	r16,r8
    864c:	1039883a 	mov	fp,r2
    8650:	2829883a 	mov	r20,r5
    8654:	38003b1e 	bne	r7,zero,8744 <__udivdi3+0x130>
    8658:	2a005c36 	bltu	r5,r8,87cc <__udivdi3+0x1b8>
    865c:	4000a626 	beq	r8,zero,88f8 <__udivdi3+0x2e4>
    8660:	00bfffd4 	movui	r2,65535
    8664:	14009e36 	bltu	r2,r16,88e0 <__udivdi3+0x2cc>
    8668:	00803fc4 	movi	r2,255
    866c:	14013d36 	bltu	r2,r16,8b64 <__udivdi3+0x550>
    8670:	000b883a 	mov	r5,zero
    8674:	0005883a 	mov	r2,zero
    8678:	8084d83a 	srl	r2,r16,r2
    867c:	01000074 	movhi	r4,1
    8680:	2106ce04 	addi	r4,r4,6968
    8684:	01800804 	movi	r6,32
    8688:	1105883a 	add	r2,r2,r4
    868c:	10c00003 	ldbu	r3,0(r2)
    8690:	28c7883a 	add	r3,r5,r3
    8694:	30edc83a 	sub	r22,r6,r3
    8698:	b000ee1e 	bne	r22,zero,8a54 <__udivdi3+0x440>
    869c:	802ad43a 	srli	r21,r16,16
    86a0:	00800044 	movi	r2,1
    86a4:	a423c83a 	sub	r17,r20,r16
    86a8:	85ffffcc 	andi	r23,r16,65535
    86ac:	d8800315 	stw	r2,12(sp)
    86b0:	8809883a 	mov	r4,r17
    86b4:	a80b883a 	mov	r5,r21
    86b8:	000a4080 	call	a408 <__udivsi3>
    86bc:	8809883a 	mov	r4,r17
    86c0:	a80b883a 	mov	r5,r21
    86c4:	102d883a 	mov	r22,r2
    86c8:	000a4100 	call	a410 <__umodsi3>
    86cc:	1004943a 	slli	r2,r2,16
    86d0:	e006d43a 	srli	r3,fp,16
    86d4:	bda3383a 	mul	r17,r23,r22
    86d8:	10c4b03a 	or	r2,r2,r3
    86dc:	1440042e 	bgeu	r2,r17,86f0 <__udivdi3+0xdc>
    86e0:	1405883a 	add	r2,r2,r16
    86e4:	b5bfffc4 	addi	r22,r22,-1
    86e8:	14000136 	bltu	r2,r16,86f0 <__udivdi3+0xdc>
    86ec:	14413d36 	bltu	r2,r17,8be4 <__udivdi3+0x5d0>
    86f0:	1463c83a 	sub	r17,r2,r17
    86f4:	8809883a 	mov	r4,r17
    86f8:	a80b883a 	mov	r5,r21
    86fc:	000a4080 	call	a408 <__udivsi3>
    8700:	8809883a 	mov	r4,r17
    8704:	a80b883a 	mov	r5,r21
    8708:	1029883a 	mov	r20,r2
    870c:	000a4100 	call	a410 <__umodsi3>
    8710:	1004943a 	slli	r2,r2,16
    8714:	bd09383a 	mul	r4,r23,r20
    8718:	e0ffffcc 	andi	r3,fp,65535
    871c:	10c4b03a 	or	r2,r2,r3
    8720:	1100042e 	bgeu	r2,r4,8734 <__udivdi3+0x120>
    8724:	8085883a 	add	r2,r16,r2
    8728:	a53fffc4 	addi	r20,r20,-1
    872c:	14000136 	bltu	r2,r16,8734 <__udivdi3+0x120>
    8730:	11012036 	bltu	r2,r4,8bb4 <__udivdi3+0x5a0>
    8734:	b004943a 	slli	r2,r22,16
    8738:	d9000317 	ldw	r4,12(sp)
    873c:	a084b03a 	or	r2,r20,r2
    8740:	00001506 	br	8798 <__udivdi3+0x184>
    8744:	380d883a 	mov	r6,r7
    8748:	29c06236 	bltu	r5,r7,88d4 <__udivdi3+0x2c0>
    874c:	00bfffd4 	movui	r2,65535
    8750:	11c05a36 	bltu	r2,r7,88bc <__udivdi3+0x2a8>
    8754:	00803fc4 	movi	r2,255
    8758:	11c0fc36 	bltu	r2,r7,8b4c <__udivdi3+0x538>
    875c:	000b883a 	mov	r5,zero
    8760:	0005883a 	mov	r2,zero
    8764:	3084d83a 	srl	r2,r6,r2
    8768:	01000074 	movhi	r4,1
    876c:	2106ce04 	addi	r4,r4,6968
    8770:	01c00804 	movi	r7,32
    8774:	1105883a 	add	r2,r2,r4
    8778:	10c00003 	ldbu	r3,0(r2)
    877c:	28c7883a 	add	r3,r5,r3
    8780:	38efc83a 	sub	r23,r7,r3
    8784:	b800691e 	bne	r23,zero,892c <__udivdi3+0x318>
    8788:	35000136 	bltu	r6,r20,8790 <__udivdi3+0x17c>
    878c:	e4005136 	bltu	fp,r16,88d4 <__udivdi3+0x2c0>
    8790:	00800044 	movi	r2,1
    8794:	0009883a 	mov	r4,zero
    8798:	2007883a 	mov	r3,r4
    879c:	dfc00f17 	ldw	ra,60(sp)
    87a0:	df000e17 	ldw	fp,56(sp)
    87a4:	ddc00d17 	ldw	r23,52(sp)
    87a8:	dd800c17 	ldw	r22,48(sp)
    87ac:	dd400b17 	ldw	r21,44(sp)
    87b0:	dd000a17 	ldw	r20,40(sp)
    87b4:	dcc00917 	ldw	r19,36(sp)
    87b8:	dc800817 	ldw	r18,32(sp)
    87bc:	dc400717 	ldw	r17,28(sp)
    87c0:	dc000617 	ldw	r16,24(sp)
    87c4:	dec01004 	addi	sp,sp,64
    87c8:	f800283a 	ret
    87cc:	00bfffd4 	movui	r2,65535
    87d0:	12005036 	bltu	r2,r8,8914 <__udivdi3+0x300>
    87d4:	00803fc4 	movi	r2,255
    87d8:	1200e836 	bltu	r2,r8,8b7c <__udivdi3+0x568>
    87dc:	000b883a 	mov	r5,zero
    87e0:	0005883a 	mov	r2,zero
    87e4:	8084d83a 	srl	r2,r16,r2
    87e8:	01000074 	movhi	r4,1
    87ec:	2106ce04 	addi	r4,r4,6968
    87f0:	01800804 	movi	r6,32
    87f4:	1105883a 	add	r2,r2,r4
    87f8:	10c00003 	ldbu	r3,0(r2)
    87fc:	28c7883a 	add	r3,r5,r3
    8800:	30cbc83a 	sub	r5,r6,r3
    8804:	28000626 	beq	r5,zero,8820 <__udivdi3+0x20c>
    8808:	3145c83a 	sub	r2,r6,r5
    880c:	e084d83a 	srl	r2,fp,r2
    8810:	a146983a 	sll	r3,r20,r5
    8814:	e178983a 	sll	fp,fp,r5
    8818:	8160983a 	sll	r16,r16,r5
    881c:	18a8b03a 	or	r20,r3,r2
    8820:	802ad43a 	srli	r21,r16,16
    8824:	a009883a 	mov	r4,r20
    8828:	85ffffcc 	andi	r23,r16,65535
    882c:	a80b883a 	mov	r5,r21
    8830:	000a4080 	call	a408 <__udivsi3>
    8834:	a009883a 	mov	r4,r20
    8838:	a80b883a 	mov	r5,r21
    883c:	102d883a 	mov	r22,r2
    8840:	000a4100 	call	a410 <__umodsi3>
    8844:	1004943a 	slli	r2,r2,16
    8848:	e006d43a 	srli	r3,fp,16
    884c:	bda3383a 	mul	r17,r23,r22
    8850:	10c4b03a 	or	r2,r2,r3
    8854:	1440042e 	bgeu	r2,r17,8868 <__udivdi3+0x254>
    8858:	1405883a 	add	r2,r2,r16
    885c:	b5bfffc4 	addi	r22,r22,-1
    8860:	14000136 	bltu	r2,r16,8868 <__udivdi3+0x254>
    8864:	1440d536 	bltu	r2,r17,8bbc <__udivdi3+0x5a8>
    8868:	1463c83a 	sub	r17,r2,r17
    886c:	8809883a 	mov	r4,r17
    8870:	a80b883a 	mov	r5,r21
    8874:	000a4080 	call	a408 <__udivsi3>
    8878:	8809883a 	mov	r4,r17
    887c:	a80b883a 	mov	r5,r21
    8880:	1029883a 	mov	r20,r2
    8884:	000a4100 	call	a410 <__umodsi3>
    8888:	1004943a 	slli	r2,r2,16
    888c:	bd09383a 	mul	r4,r23,r20
    8890:	e0ffffcc 	andi	r3,fp,65535
    8894:	10c4b03a 	or	r2,r2,r3
    8898:	1100042e 	bgeu	r2,r4,88ac <__udivdi3+0x298>
    889c:	8085883a 	add	r2,r16,r2
    88a0:	a53fffc4 	addi	r20,r20,-1
    88a4:	14000136 	bltu	r2,r16,88ac <__udivdi3+0x298>
    88a8:	1100c736 	bltu	r2,r4,8bc8 <__udivdi3+0x5b4>
    88ac:	b004943a 	slli	r2,r22,16
    88b0:	0009883a 	mov	r4,zero
    88b4:	a084b03a 	or	r2,r20,r2
    88b8:	003fb706 	br	8798 <__udivdi3+0x184>
    88bc:	00804034 	movhi	r2,256
    88c0:	10bfffc4 	addi	r2,r2,-1
    88c4:	11c0a436 	bltu	r2,r7,8b58 <__udivdi3+0x544>
    88c8:	01400404 	movi	r5,16
    88cc:	2805883a 	mov	r2,r5
    88d0:	003fa406 	br	8764 <__udivdi3+0x150>
    88d4:	0005883a 	mov	r2,zero
    88d8:	0009883a 	mov	r4,zero
    88dc:	003fae06 	br	8798 <__udivdi3+0x184>
    88e0:	00804034 	movhi	r2,256
    88e4:	10bfffc4 	addi	r2,r2,-1
    88e8:	1400a136 	bltu	r2,r16,8b70 <__udivdi3+0x55c>
    88ec:	01400404 	movi	r5,16
    88f0:	2805883a 	mov	r2,r5
    88f4:	003f6006 	br	8678 <__udivdi3+0x64>
    88f8:	01000044 	movi	r4,1
    88fc:	000b883a 	mov	r5,zero
    8900:	000a4080 	call	a408 <__udivsi3>
    8904:	1021883a 	mov	r16,r2
    8908:	00bfffd4 	movui	r2,65535
    890c:	143ff436 	bltu	r2,r16,88e0 <__udivdi3+0x2cc>
    8910:	003f5506 	br	8668 <__udivdi3+0x54>
    8914:	00804034 	movhi	r2,256
    8918:	10bfffc4 	addi	r2,r2,-1
    891c:	12009a36 	bltu	r2,r8,8b88 <__udivdi3+0x574>
    8920:	01400404 	movi	r5,16
    8924:	2805883a 	mov	r2,r5
    8928:	003fae06 	br	87e4 <__udivdi3+0x1d0>
    892c:	3dc5c83a 	sub	r2,r7,r23
    8930:	35c8983a 	sll	r4,r6,r23
    8934:	8086d83a 	srl	r3,r16,r2
    8938:	a0a2d83a 	srl	r17,r20,r2
    893c:	e084d83a 	srl	r2,fp,r2
    8940:	20eab03a 	or	r21,r4,r3
    8944:	a82cd43a 	srli	r22,r21,16
    8948:	a5c6983a 	sll	r3,r20,r23
    894c:	8809883a 	mov	r4,r17
    8950:	b00b883a 	mov	r5,r22
    8954:	1886b03a 	or	r3,r3,r2
    8958:	d8c00215 	stw	r3,8(sp)
    895c:	000a4080 	call	a408 <__udivsi3>
    8960:	8809883a 	mov	r4,r17
    8964:	b00b883a 	mov	r5,r22
    8968:	1029883a 	mov	r20,r2
    896c:	000a4100 	call	a410 <__umodsi3>
    8970:	a8ffffcc 	andi	r3,r21,65535
    8974:	d8c00515 	stw	r3,20(sp)
    8978:	d9000217 	ldw	r4,8(sp)
    897c:	d9400517 	ldw	r5,20(sp)
    8980:	1004943a 	slli	r2,r2,16
    8984:	2006d43a 	srli	r3,r4,16
    8988:	85e0983a 	sll	r16,r16,r23
    898c:	2d23383a 	mul	r17,r5,r20
    8990:	10c4b03a 	or	r2,r2,r3
    8994:	dc000015 	stw	r16,0(sp)
    8998:	1440032e 	bgeu	r2,r17,89a8 <__udivdi3+0x394>
    899c:	1545883a 	add	r2,r2,r21
    89a0:	a53fffc4 	addi	r20,r20,-1
    89a4:	15407f2e 	bgeu	r2,r21,8ba4 <__udivdi3+0x590>
    89a8:	1463c83a 	sub	r17,r2,r17
    89ac:	8809883a 	mov	r4,r17
    89b0:	b00b883a 	mov	r5,r22
    89b4:	000a4080 	call	a408 <__udivsi3>
    89b8:	8809883a 	mov	r4,r17
    89bc:	b00b883a 	mov	r5,r22
    89c0:	1021883a 	mov	r16,r2
    89c4:	000a4100 	call	a410 <__umodsi3>
    89c8:	d8c00517 	ldw	r3,20(sp)
    89cc:	d9000217 	ldw	r4,8(sp)
    89d0:	1004943a 	slli	r2,r2,16
    89d4:	1c0f383a 	mul	r7,r3,r16
    89d8:	20ffffcc 	andi	r3,r4,65535
    89dc:	10e2b03a 	or	r17,r2,r3
    89e0:	89c0032e 	bgeu	r17,r7,89f0 <__udivdi3+0x3dc>
    89e4:	8d63883a 	add	r17,r17,r21
    89e8:	843fffc4 	addi	r16,r16,-1
    89ec:	8d40692e 	bgeu	r17,r21,8b94 <__udivdi3+0x580>
    89f0:	a008943a 	slli	r4,r20,16
    89f4:	d9400017 	ldw	r5,0(sp)
    89f8:	89e3c83a 	sub	r17,r17,r7
    89fc:	8110b03a 	or	r8,r16,r4
    8a00:	280cd43a 	srli	r6,r5,16
    8a04:	28ffffcc 	andi	r3,r5,65535
    8a08:	40bfffcc 	andi	r2,r8,65535
    8a0c:	400ad43a 	srli	r5,r8,16
    8a10:	10d3383a 	mul	r9,r2,r3
    8a14:	1185383a 	mul	r2,r2,r6
    8a18:	28c7383a 	mul	r3,r5,r3
    8a1c:	4808d43a 	srli	r4,r9,16
    8a20:	298b383a 	mul	r5,r5,r6
    8a24:	10c5883a 	add	r2,r2,r3
    8a28:	2089883a 	add	r4,r4,r2
    8a2c:	20c0022e 	bgeu	r4,r3,8a38 <__udivdi3+0x424>
    8a30:	00800074 	movhi	r2,1
    8a34:	288b883a 	add	r5,r5,r2
    8a38:	2004d43a 	srli	r2,r4,16
    8a3c:	288b883a 	add	r5,r5,r2
    8a40:	89403f36 	bltu	r17,r5,8b40 <__udivdi3+0x52c>
    8a44:	89403926 	beq	r17,r5,8b2c <__udivdi3+0x518>
    8a48:	4005883a 	mov	r2,r8
    8a4c:	0009883a 	mov	r4,zero
    8a50:	003f5106 	br	8798 <__udivdi3+0x184>
    8a54:	85a0983a 	sll	r16,r16,r22
    8a58:	3585c83a 	sub	r2,r6,r22
    8a5c:	a0a2d83a 	srl	r17,r20,r2
    8a60:	802ad43a 	srli	r21,r16,16
    8a64:	e084d83a 	srl	r2,fp,r2
    8a68:	a586983a 	sll	r3,r20,r22
    8a6c:	8809883a 	mov	r4,r17
    8a70:	a80b883a 	mov	r5,r21
    8a74:	1886b03a 	or	r3,r3,r2
    8a78:	d8c00115 	stw	r3,4(sp)
    8a7c:	000a4080 	call	a408 <__udivsi3>
    8a80:	8809883a 	mov	r4,r17
    8a84:	a80b883a 	mov	r5,r21
    8a88:	d8800415 	stw	r2,16(sp)
    8a8c:	000a4100 	call	a410 <__umodsi3>
    8a90:	d9000117 	ldw	r4,4(sp)
    8a94:	d9400417 	ldw	r5,16(sp)
    8a98:	1004943a 	slli	r2,r2,16
    8a9c:	85ffffcc 	andi	r23,r16,65535
    8aa0:	2006d43a 	srli	r3,r4,16
    8aa4:	b963383a 	mul	r17,r23,r5
    8aa8:	10c4b03a 	or	r2,r2,r3
    8aac:	1440042e 	bgeu	r2,r17,8ac0 <__udivdi3+0x4ac>
    8ab0:	297fffc4 	addi	r5,r5,-1
    8ab4:	1405883a 	add	r2,r2,r16
    8ab8:	d9400415 	stw	r5,16(sp)
    8abc:	1400442e 	bgeu	r2,r16,8bd0 <__udivdi3+0x5bc>
    8ac0:	1463c83a 	sub	r17,r2,r17
    8ac4:	8809883a 	mov	r4,r17
    8ac8:	a80b883a 	mov	r5,r21
    8acc:	000a4080 	call	a408 <__udivsi3>
    8ad0:	8809883a 	mov	r4,r17
    8ad4:	a80b883a 	mov	r5,r21
    8ad8:	1029883a 	mov	r20,r2
    8adc:	000a4100 	call	a410 <__umodsi3>
    8ae0:	d9400117 	ldw	r5,4(sp)
    8ae4:	1004943a 	slli	r2,r2,16
    8ae8:	bd09383a 	mul	r4,r23,r20
    8aec:	28ffffcc 	andi	r3,r5,65535
    8af0:	10c6b03a 	or	r3,r2,r3
    8af4:	1900062e 	bgeu	r3,r4,8b10 <__udivdi3+0x4fc>
    8af8:	1c07883a 	add	r3,r3,r16
    8afc:	a53fffc4 	addi	r20,r20,-1
    8b00:	1c000336 	bltu	r3,r16,8b10 <__udivdi3+0x4fc>
    8b04:	1900022e 	bgeu	r3,r4,8b10 <__udivdi3+0x4fc>
    8b08:	a53fffc4 	addi	r20,r20,-1
    8b0c:	1c07883a 	add	r3,r3,r16
    8b10:	d9400417 	ldw	r5,16(sp)
    8b14:	e5b8983a 	sll	fp,fp,r22
    8b18:	1923c83a 	sub	r17,r3,r4
    8b1c:	2804943a 	slli	r2,r5,16
    8b20:	a0a8b03a 	or	r20,r20,r2
    8b24:	dd000315 	stw	r20,12(sp)
    8b28:	003ee106 	br	86b0 <__udivdi3+0x9c>
    8b2c:	2004943a 	slli	r2,r4,16
    8b30:	e5c8983a 	sll	r4,fp,r23
    8b34:	48ffffcc 	andi	r3,r9,65535
    8b38:	10c5883a 	add	r2,r2,r3
    8b3c:	20bfc22e 	bgeu	r4,r2,8a48 <__udivdi3+0x434>
    8b40:	40bfffc4 	addi	r2,r8,-1
    8b44:	0009883a 	mov	r4,zero
    8b48:	003f1306 	br	8798 <__udivdi3+0x184>
    8b4c:	01400204 	movi	r5,8
    8b50:	2805883a 	mov	r2,r5
    8b54:	003f0306 	br	8764 <__udivdi3+0x150>
    8b58:	01400604 	movi	r5,24
    8b5c:	2805883a 	mov	r2,r5
    8b60:	003f0006 	br	8764 <__udivdi3+0x150>
    8b64:	01400204 	movi	r5,8
    8b68:	2805883a 	mov	r2,r5
    8b6c:	003ec206 	br	8678 <__udivdi3+0x64>
    8b70:	01400604 	movi	r5,24
    8b74:	2805883a 	mov	r2,r5
    8b78:	003ebf06 	br	8678 <__udivdi3+0x64>
    8b7c:	01400204 	movi	r5,8
    8b80:	2805883a 	mov	r2,r5
    8b84:	003f1706 	br	87e4 <__udivdi3+0x1d0>
    8b88:	01400604 	movi	r5,24
    8b8c:	2805883a 	mov	r2,r5
    8b90:	003f1406 	br	87e4 <__udivdi3+0x1d0>
    8b94:	89ff962e 	bgeu	r17,r7,89f0 <__udivdi3+0x3dc>
    8b98:	8d63883a 	add	r17,r17,r21
    8b9c:	843fffc4 	addi	r16,r16,-1
    8ba0:	003f9306 	br	89f0 <__udivdi3+0x3dc>
    8ba4:	147f802e 	bgeu	r2,r17,89a8 <__udivdi3+0x394>
    8ba8:	a53fffc4 	addi	r20,r20,-1
    8bac:	1545883a 	add	r2,r2,r21
    8bb0:	003f7d06 	br	89a8 <__udivdi3+0x394>
    8bb4:	a53fffc4 	addi	r20,r20,-1
    8bb8:	003ede06 	br	8734 <__udivdi3+0x120>
    8bbc:	b5bfffc4 	addi	r22,r22,-1
    8bc0:	1405883a 	add	r2,r2,r16
    8bc4:	003f2806 	br	8868 <__udivdi3+0x254>
    8bc8:	a53fffc4 	addi	r20,r20,-1
    8bcc:	003f3706 	br	88ac <__udivdi3+0x298>
    8bd0:	147fbb2e 	bgeu	r2,r17,8ac0 <__udivdi3+0x4ac>
    8bd4:	297fffc4 	addi	r5,r5,-1
    8bd8:	1405883a 	add	r2,r2,r16
    8bdc:	d9400415 	stw	r5,16(sp)
    8be0:	003fb706 	br	8ac0 <__udivdi3+0x4ac>
    8be4:	b5bfffc4 	addi	r22,r22,-1
    8be8:	1405883a 	add	r2,r2,r16
    8bec:	003ec006 	br	86f0 <__udivdi3+0xdc>

00008bf0 <__umoddi3>:
    8bf0:	defff104 	addi	sp,sp,-60
    8bf4:	dd800b15 	stw	r22,44(sp)
    8bf8:	dd000915 	stw	r20,36(sp)
    8bfc:	dc000515 	stw	r16,20(sp)
    8c00:	dfc00e15 	stw	ra,56(sp)
    8c04:	df000d15 	stw	fp,52(sp)
    8c08:	ddc00c15 	stw	r23,48(sp)
    8c0c:	dd400a15 	stw	r21,40(sp)
    8c10:	dcc00815 	stw	r19,32(sp)
    8c14:	dc800715 	stw	r18,28(sp)
    8c18:	dc400615 	stw	r17,24(sp)
    8c1c:	3021883a 	mov	r16,r6
    8c20:	202d883a 	mov	r22,r4
    8c24:	2829883a 	mov	r20,r5
    8c28:	38002b1e 	bne	r7,zero,8cd8 <__umoddi3+0xe8>
    8c2c:	29805036 	bltu	r5,r6,8d70 <__umoddi3+0x180>
    8c30:	30008a26 	beq	r6,zero,8e5c <__umoddi3+0x26c>
    8c34:	00bfffd4 	movui	r2,65535
    8c38:	14008236 	bltu	r2,r16,8e44 <__umoddi3+0x254>
    8c3c:	00803fc4 	movi	r2,255
    8c40:	14013636 	bltu	r2,r16,911c <__umoddi3+0x52c>
    8c44:	000b883a 	mov	r5,zero
    8c48:	0005883a 	mov	r2,zero
    8c4c:	8084d83a 	srl	r2,r16,r2
    8c50:	01000074 	movhi	r4,1
    8c54:	2106ce04 	addi	r4,r4,6968
    8c58:	01800804 	movi	r6,32
    8c5c:	1105883a 	add	r2,r2,r4
    8c60:	10c00003 	ldbu	r3,0(r2)
    8c64:	28c7883a 	add	r3,r5,r3
    8c68:	30efc83a 	sub	r23,r6,r3
    8c6c:	b800941e 	bne	r23,zero,8ec0 <__umoddi3+0x2d0>
    8c70:	802ad43a 	srli	r21,r16,16
    8c74:	a423c83a 	sub	r17,r20,r16
    8c78:	0039883a 	mov	fp,zero
    8c7c:	853fffcc 	andi	r20,r16,65535
    8c80:	8809883a 	mov	r4,r17
    8c84:	a80b883a 	mov	r5,r21
    8c88:	000a4080 	call	a408 <__udivsi3>
    8c8c:	8809883a 	mov	r4,r17
    8c90:	a80b883a 	mov	r5,r21
    8c94:	a0a3383a 	mul	r17,r20,r2
    8c98:	000a4100 	call	a410 <__umodsi3>
    8c9c:	1004943a 	slli	r2,r2,16
    8ca0:	b006d43a 	srli	r3,r22,16
    8ca4:	10c4b03a 	or	r2,r2,r3
    8ca8:	1440032e 	bgeu	r2,r17,8cb8 <__umoddi3+0xc8>
    8cac:	1405883a 	add	r2,r2,r16
    8cb0:	14000136 	bltu	r2,r16,8cb8 <__umoddi3+0xc8>
    8cb4:	14413536 	bltu	r2,r17,918c <__umoddi3+0x59c>
    8cb8:	1463c83a 	sub	r17,r2,r17
    8cbc:	8809883a 	mov	r4,r17
    8cc0:	a80b883a 	mov	r5,r21
    8cc4:	000a4080 	call	a408 <__udivsi3>
    8cc8:	8809883a 	mov	r4,r17
    8ccc:	a0a3383a 	mul	r17,r20,r2
    8cd0:	a80b883a 	mov	r5,r21
    8cd4:	00004d06 	br	8e0c <__umoddi3+0x21c>
    8cd8:	380d883a 	mov	r6,r7
    8cdc:	29c0102e 	bgeu	r5,r7,8d20 <__umoddi3+0x130>
    8ce0:	2011883a 	mov	r8,r4
    8ce4:	2813883a 	mov	r9,r5
    8ce8:	4005883a 	mov	r2,r8
    8cec:	4807883a 	mov	r3,r9
    8cf0:	dfc00e17 	ldw	ra,56(sp)
    8cf4:	df000d17 	ldw	fp,52(sp)
    8cf8:	ddc00c17 	ldw	r23,48(sp)
    8cfc:	dd800b17 	ldw	r22,44(sp)
    8d00:	dd400a17 	ldw	r21,40(sp)
    8d04:	dd000917 	ldw	r20,36(sp)
    8d08:	dcc00817 	ldw	r19,32(sp)
    8d0c:	dc800717 	ldw	r18,28(sp)
    8d10:	dc400617 	ldw	r17,24(sp)
    8d14:	dc000517 	ldw	r16,20(sp)
    8d18:	dec00f04 	addi	sp,sp,60
    8d1c:	f800283a 	ret
    8d20:	00bfffd4 	movui	r2,65535
    8d24:	11c05a36 	bltu	r2,r7,8e90 <__umoddi3+0x2a0>
    8d28:	00803fc4 	movi	r2,255
    8d2c:	11c0fe36 	bltu	r2,r7,9128 <__umoddi3+0x538>
    8d30:	000b883a 	mov	r5,zero
    8d34:	0005883a 	mov	r2,zero
    8d38:	3084d83a 	srl	r2,r6,r2
    8d3c:	01000074 	movhi	r4,1
    8d40:	2106ce04 	addi	r4,r4,6968
    8d44:	01c00804 	movi	r7,32
    8d48:	1105883a 	add	r2,r2,r4
    8d4c:	10c00003 	ldbu	r3,0(r2)
    8d50:	28c7883a 	add	r3,r5,r3
    8d54:	38ebc83a 	sub	r21,r7,r3
    8d58:	a800851e 	bne	r21,zero,8f70 <__umoddi3+0x380>
    8d5c:	35005236 	bltu	r6,r20,8ea8 <__umoddi3+0x2b8>
    8d60:	b400512e 	bgeu	r22,r16,8ea8 <__umoddi3+0x2b8>
    8d64:	b011883a 	mov	r8,r22
    8d68:	a013883a 	mov	r9,r20
    8d6c:	003fde06 	br	8ce8 <__umoddi3+0xf8>
    8d70:	00bfffd4 	movui	r2,65535
    8d74:	11804036 	bltu	r2,r6,8e78 <__umoddi3+0x288>
    8d78:	00803fc4 	movi	r2,255
    8d7c:	1180ed36 	bltu	r2,r6,9134 <__umoddi3+0x544>
    8d80:	000b883a 	mov	r5,zero
    8d84:	0005883a 	mov	r2,zero
    8d88:	8084d83a 	srl	r2,r16,r2
    8d8c:	01000074 	movhi	r4,1
    8d90:	2106ce04 	addi	r4,r4,6968
    8d94:	01800804 	movi	r6,32
    8d98:	1105883a 	add	r2,r2,r4
    8d9c:	10c00003 	ldbu	r3,0(r2)
    8da0:	28c7883a 	add	r3,r5,r3
    8da4:	30c7c83a 	sub	r3,r6,r3
    8da8:	1800bf1e 	bne	r3,zero,90a8 <__umoddi3+0x4b8>
    8dac:	0039883a 	mov	fp,zero
    8db0:	802ad43a 	srli	r21,r16,16
    8db4:	a009883a 	mov	r4,r20
    8db8:	85ffffcc 	andi	r23,r16,65535
    8dbc:	a80b883a 	mov	r5,r21
    8dc0:	000a4080 	call	a408 <__udivsi3>
    8dc4:	a009883a 	mov	r4,r20
    8dc8:	a80b883a 	mov	r5,r21
    8dcc:	b8a3383a 	mul	r17,r23,r2
    8dd0:	000a4100 	call	a410 <__umodsi3>
    8dd4:	1004943a 	slli	r2,r2,16
    8dd8:	b006d43a 	srli	r3,r22,16
    8ddc:	10c4b03a 	or	r2,r2,r3
    8de0:	1440032e 	bgeu	r2,r17,8df0 <__umoddi3+0x200>
    8de4:	1405883a 	add	r2,r2,r16
    8de8:	14000136 	bltu	r2,r16,8df0 <__umoddi3+0x200>
    8dec:	1440e536 	bltu	r2,r17,9184 <__umoddi3+0x594>
    8df0:	1463c83a 	sub	r17,r2,r17
    8df4:	8809883a 	mov	r4,r17
    8df8:	a80b883a 	mov	r5,r21
    8dfc:	000a4080 	call	a408 <__udivsi3>
    8e00:	8809883a 	mov	r4,r17
    8e04:	b8a3383a 	mul	r17,r23,r2
    8e08:	a80b883a 	mov	r5,r21
    8e0c:	000a4100 	call	a410 <__umodsi3>
    8e10:	1004943a 	slli	r2,r2,16
    8e14:	b0ffffcc 	andi	r3,r22,65535
    8e18:	10c4b03a 	or	r2,r2,r3
    8e1c:	1440042e 	bgeu	r2,r17,8e30 <__umoddi3+0x240>
    8e20:	1405883a 	add	r2,r2,r16
    8e24:	14000236 	bltu	r2,r16,8e30 <__umoddi3+0x240>
    8e28:	1440012e 	bgeu	r2,r17,8e30 <__umoddi3+0x240>
    8e2c:	1405883a 	add	r2,r2,r16
    8e30:	1445c83a 	sub	r2,r2,r17
    8e34:	1724d83a 	srl	r18,r2,fp
    8e38:	0013883a 	mov	r9,zero
    8e3c:	9011883a 	mov	r8,r18
    8e40:	003fa906 	br	8ce8 <__umoddi3+0xf8>
    8e44:	00804034 	movhi	r2,256
    8e48:	10bfffc4 	addi	r2,r2,-1
    8e4c:	1400b036 	bltu	r2,r16,9110 <__umoddi3+0x520>
    8e50:	01400404 	movi	r5,16
    8e54:	2805883a 	mov	r2,r5
    8e58:	003f7c06 	br	8c4c <__umoddi3+0x5c>
    8e5c:	01000044 	movi	r4,1
    8e60:	000b883a 	mov	r5,zero
    8e64:	000a4080 	call	a408 <__udivsi3>
    8e68:	1021883a 	mov	r16,r2
    8e6c:	00bfffd4 	movui	r2,65535
    8e70:	143ff436 	bltu	r2,r16,8e44 <__umoddi3+0x254>
    8e74:	003f7106 	br	8c3c <__umoddi3+0x4c>
    8e78:	00804034 	movhi	r2,256
    8e7c:	10bfffc4 	addi	r2,r2,-1
    8e80:	1180af36 	bltu	r2,r6,9140 <__umoddi3+0x550>
    8e84:	01400404 	movi	r5,16
    8e88:	2805883a 	mov	r2,r5
    8e8c:	003fbe06 	br	8d88 <__umoddi3+0x198>
    8e90:	00804034 	movhi	r2,256
    8e94:	10bfffc4 	addi	r2,r2,-1
    8e98:	11c0ac36 	bltu	r2,r7,914c <__umoddi3+0x55c>
    8e9c:	01400404 	movi	r5,16
    8ea0:	2805883a 	mov	r2,r5
    8ea4:	003fa406 	br	8d38 <__umoddi3+0x148>
    8ea8:	b409c83a 	sub	r4,r22,r16
    8eac:	b105803a 	cmpltu	r2,r22,r4
    8eb0:	a187c83a 	sub	r3,r20,r6
    8eb4:	18a9c83a 	sub	r20,r3,r2
    8eb8:	202d883a 	mov	r22,r4
    8ebc:	003fa906 	br	8d64 <__umoddi3+0x174>
    8ec0:	85e0983a 	sll	r16,r16,r23
    8ec4:	35c5c83a 	sub	r2,r6,r23
    8ec8:	a0a2d83a 	srl	r17,r20,r2
    8ecc:	802ad43a 	srli	r21,r16,16
    8ed0:	b084d83a 	srl	r2,r22,r2
    8ed4:	a5c6983a 	sll	r3,r20,r23
    8ed8:	8809883a 	mov	r4,r17
    8edc:	a80b883a 	mov	r5,r21
    8ee0:	1886b03a 	or	r3,r3,r2
    8ee4:	d8c00115 	stw	r3,4(sp)
    8ee8:	853fffcc 	andi	r20,r16,65535
    8eec:	000a4080 	call	a408 <__udivsi3>
    8ef0:	8809883a 	mov	r4,r17
    8ef4:	a80b883a 	mov	r5,r21
    8ef8:	a0a3383a 	mul	r17,r20,r2
    8efc:	000a4100 	call	a410 <__umodsi3>
    8f00:	d9000117 	ldw	r4,4(sp)
    8f04:	1004943a 	slli	r2,r2,16
    8f08:	b839883a 	mov	fp,r23
    8f0c:	2006d43a 	srli	r3,r4,16
    8f10:	10c4b03a 	or	r2,r2,r3
    8f14:	1440022e 	bgeu	r2,r17,8f20 <__umoddi3+0x330>
    8f18:	1405883a 	add	r2,r2,r16
    8f1c:	1400962e 	bgeu	r2,r16,9178 <__umoddi3+0x588>
    8f20:	1463c83a 	sub	r17,r2,r17
    8f24:	8809883a 	mov	r4,r17
    8f28:	a80b883a 	mov	r5,r21
    8f2c:	000a4080 	call	a408 <__udivsi3>
    8f30:	8809883a 	mov	r4,r17
    8f34:	a80b883a 	mov	r5,r21
    8f38:	a0a3383a 	mul	r17,r20,r2
    8f3c:	000a4100 	call	a410 <__umodsi3>
    8f40:	d9400117 	ldw	r5,4(sp)
    8f44:	1004943a 	slli	r2,r2,16
    8f48:	28ffffcc 	andi	r3,r5,65535
    8f4c:	10c4b03a 	or	r2,r2,r3
    8f50:	1440042e 	bgeu	r2,r17,8f64 <__umoddi3+0x374>
    8f54:	1405883a 	add	r2,r2,r16
    8f58:	14000236 	bltu	r2,r16,8f64 <__umoddi3+0x374>
    8f5c:	1440012e 	bgeu	r2,r17,8f64 <__umoddi3+0x374>
    8f60:	1405883a 	add	r2,r2,r16
    8f64:	b5ec983a 	sll	r22,r22,r23
    8f68:	1463c83a 	sub	r17,r2,r17
    8f6c:	003f4406 	br	8c80 <__umoddi3+0x90>
    8f70:	3d4fc83a 	sub	r7,r7,r21
    8f74:	3546983a 	sll	r3,r6,r21
    8f78:	81c4d83a 	srl	r2,r16,r7
    8f7c:	a1e2d83a 	srl	r17,r20,r7
    8f80:	a54c983a 	sll	r6,r20,r21
    8f84:	18aeb03a 	or	r23,r3,r2
    8f88:	b828d43a 	srli	r20,r23,16
    8f8c:	b1c4d83a 	srl	r2,r22,r7
    8f90:	8809883a 	mov	r4,r17
    8f94:	a00b883a 	mov	r5,r20
    8f98:	308cb03a 	or	r6,r6,r2
    8f9c:	d9c00315 	stw	r7,12(sp)
    8fa0:	d9800215 	stw	r6,8(sp)
    8fa4:	000a4080 	call	a408 <__udivsi3>
    8fa8:	8809883a 	mov	r4,r17
    8fac:	a00b883a 	mov	r5,r20
    8fb0:	1039883a 	mov	fp,r2
    8fb4:	000a4100 	call	a410 <__umodsi3>
    8fb8:	b8ffffcc 	andi	r3,r23,65535
    8fbc:	d8c00415 	stw	r3,16(sp)
    8fc0:	d9000217 	ldw	r4,8(sp)
    8fc4:	d9400417 	ldw	r5,16(sp)
    8fc8:	1004943a 	slli	r2,r2,16
    8fcc:	2006d43a 	srli	r3,r4,16
    8fd0:	8560983a 	sll	r16,r16,r21
    8fd4:	2f23383a 	mul	r17,r5,fp
    8fd8:	10c4b03a 	or	r2,r2,r3
    8fdc:	dc000015 	stw	r16,0(sp)
    8fe0:	b56c983a 	sll	r22,r22,r21
    8fe4:	1440032e 	bgeu	r2,r17,8ff4 <__umoddi3+0x404>
    8fe8:	15c5883a 	add	r2,r2,r23
    8fec:	e73fffc4 	addi	fp,fp,-1
    8ff0:	15c05d2e 	bgeu	r2,r23,9168 <__umoddi3+0x578>
    8ff4:	1463c83a 	sub	r17,r2,r17
    8ff8:	8809883a 	mov	r4,r17
    8ffc:	a00b883a 	mov	r5,r20
    9000:	000a4080 	call	a408 <__udivsi3>
    9004:	8809883a 	mov	r4,r17
    9008:	a00b883a 	mov	r5,r20
    900c:	1021883a 	mov	r16,r2
    9010:	000a4100 	call	a410 <__umodsi3>
    9014:	d8c00417 	ldw	r3,16(sp)
    9018:	d9000217 	ldw	r4,8(sp)
    901c:	1004943a 	slli	r2,r2,16
    9020:	1c23383a 	mul	r17,r3,r16
    9024:	20ffffcc 	andi	r3,r4,65535
    9028:	10ceb03a 	or	r7,r2,r3
    902c:	3c40032e 	bgeu	r7,r17,903c <__umoddi3+0x44c>
    9030:	3dcf883a 	add	r7,r7,r23
    9034:	843fffc4 	addi	r16,r16,-1
    9038:	3dc0472e 	bgeu	r7,r23,9158 <__umoddi3+0x568>
    903c:	e004943a 	slli	r2,fp,16
    9040:	d9400017 	ldw	r5,0(sp)
    9044:	3c4fc83a 	sub	r7,r7,r17
    9048:	8084b03a 	or	r2,r16,r2
    904c:	28ffffcc 	andi	r3,r5,65535
    9050:	280cd43a 	srli	r6,r5,16
    9054:	100ad43a 	srli	r5,r2,16
    9058:	10bfffcc 	andi	r2,r2,65535
    905c:	10d1383a 	mul	r8,r2,r3
    9060:	28c7383a 	mul	r3,r5,r3
    9064:	1185383a 	mul	r2,r2,r6
    9068:	4008d43a 	srli	r4,r8,16
    906c:	298b383a 	mul	r5,r5,r6
    9070:	10c5883a 	add	r2,r2,r3
    9074:	2089883a 	add	r4,r4,r2
    9078:	20c0022e 	bgeu	r4,r3,9084 <__umoddi3+0x494>
    907c:	00800074 	movhi	r2,1
    9080:	288b883a 	add	r5,r5,r2
    9084:	2004d43a 	srli	r2,r4,16
    9088:	2008943a 	slli	r4,r4,16
    908c:	40ffffcc 	andi	r3,r8,65535
    9090:	288b883a 	add	r5,r5,r2
    9094:	20c9883a 	add	r4,r4,r3
    9098:	39400b36 	bltu	r7,r5,90c8 <__umoddi3+0x4d8>
    909c:	39403d26 	beq	r7,r5,9194 <__umoddi3+0x5a4>
    90a0:	394bc83a 	sub	r5,r7,r5
    90a4:	00000f06 	br	90e4 <__umoddi3+0x4f4>
    90a8:	30c5c83a 	sub	r2,r6,r3
    90ac:	1839883a 	mov	fp,r3
    90b0:	b084d83a 	srl	r2,r22,r2
    90b4:	a0c6983a 	sll	r3,r20,r3
    90b8:	8720983a 	sll	r16,r16,fp
    90bc:	b72c983a 	sll	r22,r22,fp
    90c0:	18a8b03a 	or	r20,r3,r2
    90c4:	003f3a06 	br	8db0 <__umoddi3+0x1c0>
    90c8:	d8c00017 	ldw	r3,0(sp)
    90cc:	20c5c83a 	sub	r2,r4,r3
    90d0:	2089803a 	cmpltu	r4,r4,r2
    90d4:	2dc7c83a 	sub	r3,r5,r23
    90d8:	1907c83a 	sub	r3,r3,r4
    90dc:	38cbc83a 	sub	r5,r7,r3
    90e0:	1009883a 	mov	r4,r2
    90e4:	b105c83a 	sub	r2,r22,r4
    90e8:	b087803a 	cmpltu	r3,r22,r2
    90ec:	28c7c83a 	sub	r3,r5,r3
    90f0:	d9400317 	ldw	r5,12(sp)
    90f4:	1544d83a 	srl	r2,r2,r21
    90f8:	1948983a 	sll	r4,r3,r5
    90fc:	1d46d83a 	srl	r3,r3,r21
    9100:	20a4b03a 	or	r18,r4,r2
    9104:	9011883a 	mov	r8,r18
    9108:	1813883a 	mov	r9,r3
    910c:	003ef606 	br	8ce8 <__umoddi3+0xf8>
    9110:	01400604 	movi	r5,24
    9114:	2805883a 	mov	r2,r5
    9118:	003ecc06 	br	8c4c <__umoddi3+0x5c>
    911c:	01400204 	movi	r5,8
    9120:	2805883a 	mov	r2,r5
    9124:	003ec906 	br	8c4c <__umoddi3+0x5c>
    9128:	01400204 	movi	r5,8
    912c:	2805883a 	mov	r2,r5
    9130:	003f0106 	br	8d38 <__umoddi3+0x148>
    9134:	01400204 	movi	r5,8
    9138:	2805883a 	mov	r2,r5
    913c:	003f1206 	br	8d88 <__umoddi3+0x198>
    9140:	01400604 	movi	r5,24
    9144:	2805883a 	mov	r2,r5
    9148:	003f0f06 	br	8d88 <__umoddi3+0x198>
    914c:	01400604 	movi	r5,24
    9150:	2805883a 	mov	r2,r5
    9154:	003ef806 	br	8d38 <__umoddi3+0x148>
    9158:	3c7fb82e 	bgeu	r7,r17,903c <__umoddi3+0x44c>
    915c:	843fffc4 	addi	r16,r16,-1
    9160:	3dcf883a 	add	r7,r7,r23
    9164:	003fb506 	br	903c <__umoddi3+0x44c>
    9168:	147fa22e 	bgeu	r2,r17,8ff4 <__umoddi3+0x404>
    916c:	e73fffc4 	addi	fp,fp,-1
    9170:	15c5883a 	add	r2,r2,r23
    9174:	003f9f06 	br	8ff4 <__umoddi3+0x404>
    9178:	147f692e 	bgeu	r2,r17,8f20 <__umoddi3+0x330>
    917c:	1405883a 	add	r2,r2,r16
    9180:	003f6706 	br	8f20 <__umoddi3+0x330>
    9184:	1405883a 	add	r2,r2,r16
    9188:	003f1906 	br	8df0 <__umoddi3+0x200>
    918c:	1405883a 	add	r2,r2,r16
    9190:	003ec906 	br	8cb8 <__umoddi3+0xc8>
    9194:	b13fcc36 	bltu	r22,r4,90c8 <__umoddi3+0x4d8>
    9198:	000b883a 	mov	r5,zero
    919c:	003fd106 	br	90e4 <__umoddi3+0x4f4>

000091a0 <_fpadd_parts>:
    91a0:	defff804 	addi	sp,sp,-32
    91a4:	dcc00315 	stw	r19,12(sp)
    91a8:	2027883a 	mov	r19,r4
    91ac:	21000017 	ldw	r4,0(r4)
    91b0:	00c00044 	movi	r3,1
    91b4:	dd400515 	stw	r21,20(sp)
    91b8:	dd000415 	stw	r20,16(sp)
    91bc:	ddc00715 	stw	r23,28(sp)
    91c0:	dd800615 	stw	r22,24(sp)
    91c4:	dc800215 	stw	r18,8(sp)
    91c8:	dc400115 	stw	r17,4(sp)
    91cc:	dc000015 	stw	r16,0(sp)
    91d0:	282b883a 	mov	r21,r5
    91d4:	3029883a 	mov	r20,r6
    91d8:	1900632e 	bgeu	r3,r4,9368 <_fpadd_parts+0x1c8>
    91dc:	28800017 	ldw	r2,0(r5)
    91e0:	1880812e 	bgeu	r3,r2,93e8 <_fpadd_parts+0x248>
    91e4:	00c00104 	movi	r3,4
    91e8:	20c0dc26 	beq	r4,r3,955c <_fpadd_parts+0x3bc>
    91ec:	10c07e26 	beq	r2,r3,93e8 <_fpadd_parts+0x248>
    91f0:	00c00084 	movi	r3,2
    91f4:	10c06726 	beq	r2,r3,9394 <_fpadd_parts+0x1f4>
    91f8:	20c07b26 	beq	r4,r3,93e8 <_fpadd_parts+0x248>
    91fc:	9dc00217 	ldw	r23,8(r19)
    9200:	28c00217 	ldw	r3,8(r5)
    9204:	9c400317 	ldw	r17,12(r19)
    9208:	2bc00317 	ldw	r15,12(r5)
    920c:	b8cdc83a 	sub	r6,r23,r3
    9210:	9c800417 	ldw	r18,16(r19)
    9214:	2c000417 	ldw	r16,16(r5)
    9218:	3009883a 	mov	r4,r6
    921c:	30009716 	blt	r6,zero,947c <_fpadd_parts+0x2dc>
    9220:	00800fc4 	movi	r2,63
    9224:	11806b16 	blt	r2,r6,93d4 <_fpadd_parts+0x234>
    9228:	0100a40e 	bge	zero,r4,94bc <_fpadd_parts+0x31c>
    922c:	35bff804 	addi	r22,r6,-32
    9230:	b000bc16 	blt	r22,zero,9524 <_fpadd_parts+0x384>
    9234:	8596d83a 	srl	r11,r16,r22
    9238:	0019883a 	mov	r12,zero
    923c:	0013883a 	mov	r9,zero
    9240:	01000044 	movi	r4,1
    9244:	0015883a 	mov	r10,zero
    9248:	b000be16 	blt	r22,zero,9544 <_fpadd_parts+0x3a4>
    924c:	2590983a 	sll	r8,r4,r22
    9250:	000f883a 	mov	r7,zero
    9254:	00bfffc4 	movi	r2,-1
    9258:	3889883a 	add	r4,r7,r2
    925c:	408b883a 	add	r5,r8,r2
    9260:	21cd803a 	cmpltu	r6,r4,r7
    9264:	314b883a 	add	r5,r6,r5
    9268:	7904703a 	and	r2,r15,r4
    926c:	8146703a 	and	r3,r16,r5
    9270:	10c4b03a 	or	r2,r2,r3
    9274:	10000226 	beq	r2,zero,9280 <_fpadd_parts+0xe0>
    9278:	02400044 	movi	r9,1
    927c:	0015883a 	mov	r10,zero
    9280:	5a5eb03a 	or	r15,r11,r9
    9284:	62a0b03a 	or	r16,r12,r10
    9288:	99400117 	ldw	r5,4(r19)
    928c:	a8800117 	ldw	r2,4(r21)
    9290:	28806e26 	beq	r5,r2,944c <_fpadd_parts+0x2ac>
    9294:	28006626 	beq	r5,zero,9430 <_fpadd_parts+0x290>
    9298:	7c45c83a 	sub	r2,r15,r17
    929c:	7889803a 	cmpltu	r4,r15,r2
    92a0:	8487c83a 	sub	r3,r16,r18
    92a4:	1909c83a 	sub	r4,r3,r4
    92a8:	100d883a 	mov	r6,r2
    92ac:	200f883a 	mov	r7,r4
    92b0:	38007716 	blt	r7,zero,9490 <_fpadd_parts+0x2f0>
    92b4:	a5c00215 	stw	r23,8(r20)
    92b8:	a1c00415 	stw	r7,16(r20)
    92bc:	a0000115 	stw	zero,4(r20)
    92c0:	a1800315 	stw	r6,12(r20)
    92c4:	a2000317 	ldw	r8,12(r20)
    92c8:	a2400417 	ldw	r9,16(r20)
    92cc:	00bfffc4 	movi	r2,-1
    92d0:	408b883a 	add	r5,r8,r2
    92d4:	2a09803a 	cmpltu	r4,r5,r8
    92d8:	488d883a 	add	r6,r9,r2
    92dc:	01c40034 	movhi	r7,4096
    92e0:	39ffffc4 	addi	r7,r7,-1
    92e4:	218d883a 	add	r6,r4,r6
    92e8:	39801736 	bltu	r7,r6,9348 <_fpadd_parts+0x1a8>
    92ec:	31c06526 	beq	r6,r7,9484 <_fpadd_parts+0x2e4>
    92f0:	a3000217 	ldw	r12,8(r20)
    92f4:	4209883a 	add	r4,r8,r8
    92f8:	00bfffc4 	movi	r2,-1
    92fc:	220f803a 	cmpltu	r7,r4,r8
    9300:	4a4b883a 	add	r5,r9,r9
    9304:	394f883a 	add	r7,r7,r5
    9308:	2095883a 	add	r10,r4,r2
    930c:	3897883a 	add	r11,r7,r2
    9310:	510d803a 	cmpltu	r6,r10,r4
    9314:	6099883a 	add	r12,r12,r2
    9318:	32d7883a 	add	r11,r6,r11
    931c:	00840034 	movhi	r2,4096
    9320:	10bfffc4 	addi	r2,r2,-1
    9324:	2011883a 	mov	r8,r4
    9328:	3813883a 	mov	r9,r7
    932c:	a1000315 	stw	r4,12(r20)
    9330:	a1c00415 	stw	r7,16(r20)
    9334:	a3000215 	stw	r12,8(r20)
    9338:	12c00336 	bltu	r2,r11,9348 <_fpadd_parts+0x1a8>
    933c:	58bfed1e 	bne	r11,r2,92f4 <_fpadd_parts+0x154>
    9340:	00bfff84 	movi	r2,-2
    9344:	12bfeb2e 	bgeu	r2,r10,92f4 <_fpadd_parts+0x154>
    9348:	a2800417 	ldw	r10,16(r20)
    934c:	008000c4 	movi	r2,3
    9350:	00c80034 	movhi	r3,8192
    9354:	18ffffc4 	addi	r3,r3,-1
    9358:	a2400317 	ldw	r9,12(r20)
    935c:	a0800015 	stw	r2,0(r20)
    9360:	1a802336 	bltu	r3,r10,93f0 <_fpadd_parts+0x250>
    9364:	a027883a 	mov	r19,r20
    9368:	9805883a 	mov	r2,r19
    936c:	ddc00717 	ldw	r23,28(sp)
    9370:	dd800617 	ldw	r22,24(sp)
    9374:	dd400517 	ldw	r21,20(sp)
    9378:	dd000417 	ldw	r20,16(sp)
    937c:	dcc00317 	ldw	r19,12(sp)
    9380:	dc800217 	ldw	r18,8(sp)
    9384:	dc400117 	ldw	r17,4(sp)
    9388:	dc000017 	ldw	r16,0(sp)
    938c:	dec00804 	addi	sp,sp,32
    9390:	f800283a 	ret
    9394:	20fff41e 	bne	r4,r3,9368 <_fpadd_parts+0x1c8>
    9398:	31000015 	stw	r4,0(r6)
    939c:	98800117 	ldw	r2,4(r19)
    93a0:	30800115 	stw	r2,4(r6)
    93a4:	98c00217 	ldw	r3,8(r19)
    93a8:	30c00215 	stw	r3,8(r6)
    93ac:	98800317 	ldw	r2,12(r19)
    93b0:	30800315 	stw	r2,12(r6)
    93b4:	98c00417 	ldw	r3,16(r19)
    93b8:	30c00415 	stw	r3,16(r6)
    93bc:	98800117 	ldw	r2,4(r19)
    93c0:	28c00117 	ldw	r3,4(r5)
    93c4:	3027883a 	mov	r19,r6
    93c8:	10c4703a 	and	r2,r2,r3
    93cc:	30800115 	stw	r2,4(r6)
    93d0:	003fe506 	br	9368 <_fpadd_parts+0x1c8>
    93d4:	1dc02616 	blt	r3,r23,9470 <_fpadd_parts+0x2d0>
    93d8:	0023883a 	mov	r17,zero
    93dc:	182f883a 	mov	r23,r3
    93e0:	0025883a 	mov	r18,zero
    93e4:	003fa806 	br	9288 <_fpadd_parts+0xe8>
    93e8:	a827883a 	mov	r19,r21
    93ec:	003fde06 	br	9368 <_fpadd_parts+0x1c8>
    93f0:	01800044 	movi	r6,1
    93f4:	500497fa 	slli	r2,r10,31
    93f8:	4808d07a 	srli	r4,r9,1
    93fc:	518ad83a 	srl	r5,r10,r6
    9400:	a2000217 	ldw	r8,8(r20)
    9404:	1108b03a 	or	r4,r2,r4
    9408:	0007883a 	mov	r3,zero
    940c:	4984703a 	and	r2,r9,r6
    9410:	208cb03a 	or	r6,r4,r2
    9414:	28ceb03a 	or	r7,r5,r3
    9418:	42000044 	addi	r8,r8,1
    941c:	a027883a 	mov	r19,r20
    9420:	a1c00415 	stw	r7,16(r20)
    9424:	a2000215 	stw	r8,8(r20)
    9428:	a1800315 	stw	r6,12(r20)
    942c:	003fce06 	br	9368 <_fpadd_parts+0x1c8>
    9430:	8bc5c83a 	sub	r2,r17,r15
    9434:	8889803a 	cmpltu	r4,r17,r2
    9438:	9407c83a 	sub	r3,r18,r16
    943c:	1909c83a 	sub	r4,r3,r4
    9440:	100d883a 	mov	r6,r2
    9444:	200f883a 	mov	r7,r4
    9448:	003f9906 	br	92b0 <_fpadd_parts+0x110>
    944c:	7c45883a 	add	r2,r15,r17
    9450:	13c9803a 	cmpltu	r4,r2,r15
    9454:	8487883a 	add	r3,r16,r18
    9458:	20c9883a 	add	r4,r4,r3
    945c:	a1400115 	stw	r5,4(r20)
    9460:	a5c00215 	stw	r23,8(r20)
    9464:	a0800315 	stw	r2,12(r20)
    9468:	a1000415 	stw	r4,16(r20)
    946c:	003fb606 	br	9348 <_fpadd_parts+0x1a8>
    9470:	001f883a 	mov	r15,zero
    9474:	0021883a 	mov	r16,zero
    9478:	003f8306 	br	9288 <_fpadd_parts+0xe8>
    947c:	018dc83a 	sub	r6,zero,r6
    9480:	003f6706 	br	9220 <_fpadd_parts+0x80>
    9484:	00bfff84 	movi	r2,-2
    9488:	117faf36 	bltu	r2,r5,9348 <_fpadd_parts+0x1a8>
    948c:	003f9806 	br	92f0 <_fpadd_parts+0x150>
    9490:	0005883a 	mov	r2,zero
    9494:	1189c83a 	sub	r4,r2,r6
    9498:	1105803a 	cmpltu	r2,r2,r4
    949c:	01cbc83a 	sub	r5,zero,r7
    94a0:	2885c83a 	sub	r2,r5,r2
    94a4:	01800044 	movi	r6,1
    94a8:	a1800115 	stw	r6,4(r20)
    94ac:	a5c00215 	stw	r23,8(r20)
    94b0:	a1000315 	stw	r4,12(r20)
    94b4:	a0800415 	stw	r2,16(r20)
    94b8:	003f8206 	br	92c4 <_fpadd_parts+0x124>
    94bc:	203f7226 	beq	r4,zero,9288 <_fpadd_parts+0xe8>
    94c0:	35bff804 	addi	r22,r6,-32
    94c4:	b9af883a 	add	r23,r23,r6
    94c8:	b0003116 	blt	r22,zero,9590 <_fpadd_parts+0x3f0>
    94cc:	959ad83a 	srl	r13,r18,r22
    94d0:	001d883a 	mov	r14,zero
    94d4:	000f883a 	mov	r7,zero
    94d8:	01000044 	movi	r4,1
    94dc:	0011883a 	mov	r8,zero
    94e0:	b0002516 	blt	r22,zero,9578 <_fpadd_parts+0x3d8>
    94e4:	2594983a 	sll	r10,r4,r22
    94e8:	0013883a 	mov	r9,zero
    94ec:	00bfffc4 	movi	r2,-1
    94f0:	4889883a 	add	r4,r9,r2
    94f4:	508b883a 	add	r5,r10,r2
    94f8:	224d803a 	cmpltu	r6,r4,r9
    94fc:	314b883a 	add	r5,r6,r5
    9500:	8904703a 	and	r2,r17,r4
    9504:	9146703a 	and	r3,r18,r5
    9508:	10c4b03a 	or	r2,r2,r3
    950c:	10000226 	beq	r2,zero,9518 <_fpadd_parts+0x378>
    9510:	01c00044 	movi	r7,1
    9514:	0011883a 	mov	r8,zero
    9518:	69e2b03a 	or	r17,r13,r7
    951c:	7224b03a 	or	r18,r14,r8
    9520:	003f5906 	br	9288 <_fpadd_parts+0xe8>
    9524:	8407883a 	add	r3,r16,r16
    9528:	008007c4 	movi	r2,31
    952c:	1185c83a 	sub	r2,r2,r6
    9530:	1886983a 	sll	r3,r3,r2
    9534:	7996d83a 	srl	r11,r15,r6
    9538:	8198d83a 	srl	r12,r16,r6
    953c:	1ad6b03a 	or	r11,r3,r11
    9540:	003f3e06 	br	923c <_fpadd_parts+0x9c>
    9544:	2006d07a 	srli	r3,r4,1
    9548:	008007c4 	movi	r2,31
    954c:	1185c83a 	sub	r2,r2,r6
    9550:	1890d83a 	srl	r8,r3,r2
    9554:	218e983a 	sll	r7,r4,r6
    9558:	003f3e06 	br	9254 <_fpadd_parts+0xb4>
    955c:	113f821e 	bne	r2,r4,9368 <_fpadd_parts+0x1c8>
    9560:	28c00117 	ldw	r3,4(r5)
    9564:	98800117 	ldw	r2,4(r19)
    9568:	10ff7f26 	beq	r2,r3,9368 <_fpadd_parts+0x1c8>
    956c:	04c00074 	movhi	r19,1
    9570:	9cc6c904 	addi	r19,r19,6948
    9574:	003f7c06 	br	9368 <_fpadd_parts+0x1c8>
    9578:	2006d07a 	srli	r3,r4,1
    957c:	008007c4 	movi	r2,31
    9580:	1185c83a 	sub	r2,r2,r6
    9584:	1894d83a 	srl	r10,r3,r2
    9588:	2192983a 	sll	r9,r4,r6
    958c:	003fd706 	br	94ec <_fpadd_parts+0x34c>
    9590:	9487883a 	add	r3,r18,r18
    9594:	008007c4 	movi	r2,31
    9598:	1185c83a 	sub	r2,r2,r6
    959c:	1886983a 	sll	r3,r3,r2
    95a0:	899ad83a 	srl	r13,r17,r6
    95a4:	919cd83a 	srl	r14,r18,r6
    95a8:	1b5ab03a 	or	r13,r3,r13
    95ac:	003fc906 	br	94d4 <_fpadd_parts+0x334>

000095b0 <__subdf3>:
    95b0:	deffea04 	addi	sp,sp,-88
    95b4:	dcc01415 	stw	r19,80(sp)
    95b8:	dcc00404 	addi	r19,sp,16
    95bc:	2011883a 	mov	r8,r4
    95c0:	2813883a 	mov	r9,r5
    95c4:	dc401315 	stw	r17,76(sp)
    95c8:	d809883a 	mov	r4,sp
    95cc:	980b883a 	mov	r5,r19
    95d0:	dc400904 	addi	r17,sp,36
    95d4:	dfc01515 	stw	ra,84(sp)
    95d8:	da400115 	stw	r9,4(sp)
    95dc:	d9c00315 	stw	r7,12(sp)
    95e0:	da000015 	stw	r8,0(sp)
    95e4:	d9800215 	stw	r6,8(sp)
    95e8:	000a8440 	call	a844 <__unpack_d>
    95ec:	d9000204 	addi	r4,sp,8
    95f0:	880b883a 	mov	r5,r17
    95f4:	000a8440 	call	a844 <__unpack_d>
    95f8:	d8800a17 	ldw	r2,40(sp)
    95fc:	880b883a 	mov	r5,r17
    9600:	9809883a 	mov	r4,r19
    9604:	d9800e04 	addi	r6,sp,56
    9608:	1080005c 	xori	r2,r2,1
    960c:	d8800a15 	stw	r2,40(sp)
    9610:	00091a00 	call	91a0 <_fpadd_parts>
    9614:	1009883a 	mov	r4,r2
    9618:	000a5300 	call	a530 <__pack_d>
    961c:	dfc01517 	ldw	ra,84(sp)
    9620:	dcc01417 	ldw	r19,80(sp)
    9624:	dc401317 	ldw	r17,76(sp)
    9628:	dec01604 	addi	sp,sp,88
    962c:	f800283a 	ret

00009630 <__adddf3>:
    9630:	deffea04 	addi	sp,sp,-88
    9634:	dcc01415 	stw	r19,80(sp)
    9638:	dcc00404 	addi	r19,sp,16
    963c:	2011883a 	mov	r8,r4
    9640:	2813883a 	mov	r9,r5
    9644:	dc401315 	stw	r17,76(sp)
    9648:	d809883a 	mov	r4,sp
    964c:	980b883a 	mov	r5,r19
    9650:	dc400904 	addi	r17,sp,36
    9654:	dfc01515 	stw	ra,84(sp)
    9658:	da400115 	stw	r9,4(sp)
    965c:	d9c00315 	stw	r7,12(sp)
    9660:	da000015 	stw	r8,0(sp)
    9664:	d9800215 	stw	r6,8(sp)
    9668:	000a8440 	call	a844 <__unpack_d>
    966c:	d9000204 	addi	r4,sp,8
    9670:	880b883a 	mov	r5,r17
    9674:	000a8440 	call	a844 <__unpack_d>
    9678:	d9800e04 	addi	r6,sp,56
    967c:	9809883a 	mov	r4,r19
    9680:	880b883a 	mov	r5,r17
    9684:	00091a00 	call	91a0 <_fpadd_parts>
    9688:	1009883a 	mov	r4,r2
    968c:	000a5300 	call	a530 <__pack_d>
    9690:	dfc01517 	ldw	ra,84(sp)
    9694:	dcc01417 	ldw	r19,80(sp)
    9698:	dc401317 	ldw	r17,76(sp)
    969c:	dec01604 	addi	sp,sp,88
    96a0:	f800283a 	ret

000096a4 <__muldf3>:
    96a4:	deffe004 	addi	sp,sp,-128
    96a8:	dc401815 	stw	r17,96(sp)
    96ac:	dc400404 	addi	r17,sp,16
    96b0:	2011883a 	mov	r8,r4
    96b4:	2813883a 	mov	r9,r5
    96b8:	dc001715 	stw	r16,92(sp)
    96bc:	d809883a 	mov	r4,sp
    96c0:	880b883a 	mov	r5,r17
    96c4:	dc000904 	addi	r16,sp,36
    96c8:	dfc01f15 	stw	ra,124(sp)
    96cc:	da400115 	stw	r9,4(sp)
    96d0:	d9c00315 	stw	r7,12(sp)
    96d4:	da000015 	stw	r8,0(sp)
    96d8:	d9800215 	stw	r6,8(sp)
    96dc:	ddc01e15 	stw	r23,120(sp)
    96e0:	dd801d15 	stw	r22,116(sp)
    96e4:	dd401c15 	stw	r21,112(sp)
    96e8:	dd001b15 	stw	r20,108(sp)
    96ec:	dcc01a15 	stw	r19,104(sp)
    96f0:	dc801915 	stw	r18,100(sp)
    96f4:	000a8440 	call	a844 <__unpack_d>
    96f8:	d9000204 	addi	r4,sp,8
    96fc:	800b883a 	mov	r5,r16
    9700:	000a8440 	call	a844 <__unpack_d>
    9704:	d9000417 	ldw	r4,16(sp)
    9708:	00800044 	movi	r2,1
    970c:	1100102e 	bgeu	r2,r4,9750 <__muldf3+0xac>
    9710:	d8c00917 	ldw	r3,36(sp)
    9714:	10c0062e 	bgeu	r2,r3,9730 <__muldf3+0x8c>
    9718:	00800104 	movi	r2,4
    971c:	20800a26 	beq	r4,r2,9748 <__muldf3+0xa4>
    9720:	1880cc26 	beq	r3,r2,9a54 <__muldf3+0x3b0>
    9724:	00800084 	movi	r2,2
    9728:	20800926 	beq	r4,r2,9750 <__muldf3+0xac>
    972c:	1880191e 	bne	r3,r2,9794 <__muldf3+0xf0>
    9730:	d8c00a17 	ldw	r3,40(sp)
    9734:	d8800517 	ldw	r2,20(sp)
    9738:	8009883a 	mov	r4,r16
    973c:	10c4c03a 	cmpne	r2,r2,r3
    9740:	d8800a15 	stw	r2,40(sp)
    9744:	00000706 	br	9764 <__muldf3+0xc0>
    9748:	00800084 	movi	r2,2
    974c:	1880c326 	beq	r3,r2,9a5c <__muldf3+0x3b8>
    9750:	d8800517 	ldw	r2,20(sp)
    9754:	d8c00a17 	ldw	r3,40(sp)
    9758:	8809883a 	mov	r4,r17
    975c:	10c4c03a 	cmpne	r2,r2,r3
    9760:	d8800515 	stw	r2,20(sp)
    9764:	000a5300 	call	a530 <__pack_d>
    9768:	dfc01f17 	ldw	ra,124(sp)
    976c:	ddc01e17 	ldw	r23,120(sp)
    9770:	dd801d17 	ldw	r22,116(sp)
    9774:	dd401c17 	ldw	r21,112(sp)
    9778:	dd001b17 	ldw	r20,108(sp)
    977c:	dcc01a17 	ldw	r19,104(sp)
    9780:	dc801917 	ldw	r18,100(sp)
    9784:	dc401817 	ldw	r17,96(sp)
    9788:	dc001717 	ldw	r16,92(sp)
    978c:	dec02004 	addi	sp,sp,128
    9790:	f800283a 	ret
    9794:	dd800717 	ldw	r22,28(sp)
    9798:	dc800c17 	ldw	r18,48(sp)
    979c:	002b883a 	mov	r21,zero
    97a0:	0023883a 	mov	r17,zero
    97a4:	a80b883a 	mov	r5,r21
    97a8:	b00d883a 	mov	r6,r22
    97ac:	880f883a 	mov	r7,r17
    97b0:	ddc00817 	ldw	r23,32(sp)
    97b4:	dcc00d17 	ldw	r19,52(sp)
    97b8:	9009883a 	mov	r4,r18
    97bc:	000a4180 	call	a418 <__muldi3>
    97c0:	001b883a 	mov	r13,zero
    97c4:	680f883a 	mov	r7,r13
    97c8:	b009883a 	mov	r4,r22
    97cc:	000b883a 	mov	r5,zero
    97d0:	980d883a 	mov	r6,r19
    97d4:	b82d883a 	mov	r22,r23
    97d8:	002f883a 	mov	r23,zero
    97dc:	db401615 	stw	r13,88(sp)
    97e0:	d8801315 	stw	r2,76(sp)
    97e4:	d8c01415 	stw	r3,80(sp)
    97e8:	dcc01515 	stw	r19,84(sp)
    97ec:	000a4180 	call	a418 <__muldi3>
    97f0:	b00d883a 	mov	r6,r22
    97f4:	000b883a 	mov	r5,zero
    97f8:	9009883a 	mov	r4,r18
    97fc:	b80f883a 	mov	r7,r23
    9800:	1021883a 	mov	r16,r2
    9804:	1823883a 	mov	r17,r3
    9808:	000a4180 	call	a418 <__muldi3>
    980c:	8085883a 	add	r2,r16,r2
    9810:	140d803a 	cmpltu	r6,r2,r16
    9814:	88c7883a 	add	r3,r17,r3
    9818:	30cd883a 	add	r6,r6,r3
    981c:	1029883a 	mov	r20,r2
    9820:	302b883a 	mov	r21,r6
    9824:	da801317 	ldw	r10,76(sp)
    9828:	dac01417 	ldw	r11,80(sp)
    982c:	db001517 	ldw	r12,84(sp)
    9830:	db401617 	ldw	r13,88(sp)
    9834:	3440612e 	bgeu	r6,r17,99bc <__muldf3+0x318>
    9838:	0009883a 	mov	r4,zero
    983c:	5105883a 	add	r2,r10,r4
    9840:	128d803a 	cmpltu	r6,r2,r10
    9844:	5d07883a 	add	r3,r11,r20
    9848:	30cd883a 	add	r6,r6,r3
    984c:	0021883a 	mov	r16,zero
    9850:	04400044 	movi	r17,1
    9854:	1025883a 	mov	r18,r2
    9858:	3027883a 	mov	r19,r6
    985c:	32c06236 	bltu	r6,r11,99e8 <__muldf3+0x344>
    9860:	59807a26 	beq	r11,r6,9a4c <__muldf3+0x3a8>
    9864:	680b883a 	mov	r5,r13
    9868:	b80f883a 	mov	r7,r23
    986c:	6009883a 	mov	r4,r12
    9870:	b00d883a 	mov	r6,r22
    9874:	000a4180 	call	a418 <__muldi3>
    9878:	1009883a 	mov	r4,r2
    987c:	000f883a 	mov	r7,zero
    9880:	1545883a 	add	r2,r2,r21
    9884:	1111803a 	cmpltu	r8,r2,r4
    9888:	19c7883a 	add	r3,r3,r7
    988c:	40c7883a 	add	r3,r8,r3
    9890:	88cb883a 	add	r5,r17,r3
    9894:	d8c00617 	ldw	r3,24(sp)
    9898:	8089883a 	add	r4,r16,r2
    989c:	d8800b17 	ldw	r2,44(sp)
    98a0:	18c00104 	addi	r3,r3,4
    98a4:	240d803a 	cmpltu	r6,r4,r16
    98a8:	10c7883a 	add	r3,r2,r3
    98ac:	2013883a 	mov	r9,r4
    98b0:	d8800a17 	ldw	r2,40(sp)
    98b4:	d9000517 	ldw	r4,20(sp)
    98b8:	314d883a 	add	r6,r6,r5
    98bc:	3015883a 	mov	r10,r6
    98c0:	2088c03a 	cmpne	r4,r4,r2
    98c4:	00880034 	movhi	r2,8192
    98c8:	10bfffc4 	addi	r2,r2,-1
    98cc:	d9000f15 	stw	r4,60(sp)
    98d0:	d8c01015 	stw	r3,64(sp)
    98d4:	1180162e 	bgeu	r2,r6,9930 <__muldf3+0x28c>
    98d8:	1811883a 	mov	r8,r3
    98dc:	101f883a 	mov	r15,r2
    98e0:	980497fa 	slli	r2,r19,31
    98e4:	9016d07a 	srli	r11,r18,1
    98e8:	500697fa 	slli	r3,r10,31
    98ec:	480cd07a 	srli	r6,r9,1
    98f0:	500ed07a 	srli	r7,r10,1
    98f4:	12d6b03a 	or	r11,r2,r11
    98f8:	00800044 	movi	r2,1
    98fc:	198cb03a 	or	r6,r3,r6
    9900:	4888703a 	and	r4,r9,r2
    9904:	9818d07a 	srli	r12,r19,1
    9908:	001b883a 	mov	r13,zero
    990c:	03a00034 	movhi	r14,32768
    9910:	3013883a 	mov	r9,r6
    9914:	3815883a 	mov	r10,r7
    9918:	4091883a 	add	r8,r8,r2
    991c:	20000226 	beq	r4,zero,9928 <__muldf3+0x284>
    9920:	5b64b03a 	or	r18,r11,r13
    9924:	63a6b03a 	or	r19,r12,r14
    9928:	7abfed36 	bltu	r15,r10,98e0 <__muldf3+0x23c>
    992c:	da001015 	stw	r8,64(sp)
    9930:	00840034 	movhi	r2,4096
    9934:	10bfffc4 	addi	r2,r2,-1
    9938:	12801436 	bltu	r2,r10,998c <__muldf3+0x2e8>
    993c:	da001017 	ldw	r8,64(sp)
    9940:	101f883a 	mov	r15,r2
    9944:	4a45883a 	add	r2,r9,r9
    9948:	124d803a 	cmpltu	r6,r2,r9
    994c:	5287883a 	add	r3,r10,r10
    9950:	9497883a 	add	r11,r18,r18
    9954:	5c8f803a 	cmpltu	r7,r11,r18
    9958:	9cd9883a 	add	r12,r19,r19
    995c:	01000044 	movi	r4,1
    9960:	30cd883a 	add	r6,r6,r3
    9964:	3b0f883a 	add	r7,r7,r12
    9968:	423fffc4 	addi	r8,r8,-1
    996c:	1013883a 	mov	r9,r2
    9970:	3015883a 	mov	r10,r6
    9974:	111ab03a 	or	r13,r2,r4
    9978:	98003016 	blt	r19,zero,9a3c <__muldf3+0x398>
    997c:	5825883a 	mov	r18,r11
    9980:	3827883a 	mov	r19,r7
    9984:	7abfef2e 	bgeu	r15,r10,9944 <__muldf3+0x2a0>
    9988:	da001015 	stw	r8,64(sp)
    998c:	00803fc4 	movi	r2,255
    9990:	488e703a 	and	r7,r9,r2
    9994:	00802004 	movi	r2,128
    9998:	0007883a 	mov	r3,zero
    999c:	0011883a 	mov	r8,zero
    99a0:	38801826 	beq	r7,r2,9a04 <__muldf3+0x360>
    99a4:	008000c4 	movi	r2,3
    99a8:	d9000e04 	addi	r4,sp,56
    99ac:	da801215 	stw	r10,72(sp)
    99b0:	d8800e15 	stw	r2,56(sp)
    99b4:	da401115 	stw	r9,68(sp)
    99b8:	003f6a06 	br	9764 <__muldf3+0xc0>
    99bc:	89802126 	beq	r17,r6,9a44 <__muldf3+0x3a0>
    99c0:	0009883a 	mov	r4,zero
    99c4:	5105883a 	add	r2,r10,r4
    99c8:	128d803a 	cmpltu	r6,r2,r10
    99cc:	5d07883a 	add	r3,r11,r20
    99d0:	30cd883a 	add	r6,r6,r3
    99d4:	0021883a 	mov	r16,zero
    99d8:	0023883a 	mov	r17,zero
    99dc:	1025883a 	mov	r18,r2
    99e0:	3027883a 	mov	r19,r6
    99e4:	32ff9e2e 	bgeu	r6,r11,9860 <__muldf3+0x1bc>
    99e8:	00800044 	movi	r2,1
    99ec:	8089883a 	add	r4,r16,r2
    99f0:	240d803a 	cmpltu	r6,r4,r16
    99f4:	344d883a 	add	r6,r6,r17
    99f8:	2021883a 	mov	r16,r4
    99fc:	3023883a 	mov	r17,r6
    9a00:	003f9806 	br	9864 <__muldf3+0x1c0>
    9a04:	403fe71e 	bne	r8,zero,99a4 <__muldf3+0x300>
    9a08:	01004004 	movi	r4,256
    9a0c:	4904703a 	and	r2,r9,r4
    9a10:	10c4b03a 	or	r2,r2,r3
    9a14:	103fe31e 	bne	r2,zero,99a4 <__muldf3+0x300>
    9a18:	94c4b03a 	or	r2,r18,r19
    9a1c:	103fe126 	beq	r2,zero,99a4 <__muldf3+0x300>
    9a20:	49c5883a 	add	r2,r9,r7
    9a24:	1251803a 	cmpltu	r8,r2,r9
    9a28:	4291883a 	add	r8,r8,r10
    9a2c:	013fc004 	movi	r4,-256
    9a30:	1112703a 	and	r9,r2,r4
    9a34:	4015883a 	mov	r10,r8
    9a38:	003fda06 	br	99a4 <__muldf3+0x300>
    9a3c:	6813883a 	mov	r9,r13
    9a40:	003fce06 	br	997c <__muldf3+0x2d8>
    9a44:	143f7c36 	bltu	r2,r16,9838 <__muldf3+0x194>
    9a48:	003fdd06 	br	99c0 <__muldf3+0x31c>
    9a4c:	12bf852e 	bgeu	r2,r10,9864 <__muldf3+0x1c0>
    9a50:	003fe506 	br	99e8 <__muldf3+0x344>
    9a54:	00800084 	movi	r2,2
    9a58:	20bf351e 	bne	r4,r2,9730 <__muldf3+0x8c>
    9a5c:	01000074 	movhi	r4,1
    9a60:	2106c904 	addi	r4,r4,6948
    9a64:	003f3f06 	br	9764 <__muldf3+0xc0>

00009a68 <__divdf3>:
    9a68:	deffed04 	addi	sp,sp,-76
    9a6c:	dcc01115 	stw	r19,68(sp)
    9a70:	dcc00404 	addi	r19,sp,16
    9a74:	2011883a 	mov	r8,r4
    9a78:	2813883a 	mov	r9,r5
    9a7c:	dc000e15 	stw	r16,56(sp)
    9a80:	d809883a 	mov	r4,sp
    9a84:	980b883a 	mov	r5,r19
    9a88:	dc000904 	addi	r16,sp,36
    9a8c:	dfc01215 	stw	ra,72(sp)
    9a90:	da400115 	stw	r9,4(sp)
    9a94:	d9c00315 	stw	r7,12(sp)
    9a98:	da000015 	stw	r8,0(sp)
    9a9c:	d9800215 	stw	r6,8(sp)
    9aa0:	dc801015 	stw	r18,64(sp)
    9aa4:	dc400f15 	stw	r17,60(sp)
    9aa8:	000a8440 	call	a844 <__unpack_d>
    9aac:	d9000204 	addi	r4,sp,8
    9ab0:	800b883a 	mov	r5,r16
    9ab4:	000a8440 	call	a844 <__unpack_d>
    9ab8:	d9000417 	ldw	r4,16(sp)
    9abc:	00800044 	movi	r2,1
    9ac0:	11000b2e 	bgeu	r2,r4,9af0 <__divdf3+0x88>
    9ac4:	d9400917 	ldw	r5,36(sp)
    9ac8:	1140762e 	bgeu	r2,r5,9ca4 <__divdf3+0x23c>
    9acc:	d8800517 	ldw	r2,20(sp)
    9ad0:	d8c00a17 	ldw	r3,40(sp)
    9ad4:	01800104 	movi	r6,4
    9ad8:	10c4f03a 	xor	r2,r2,r3
    9adc:	d8800515 	stw	r2,20(sp)
    9ae0:	21800226 	beq	r4,r6,9aec <__divdf3+0x84>
    9ae4:	00800084 	movi	r2,2
    9ae8:	2080141e 	bne	r4,r2,9b3c <__divdf3+0xd4>
    9aec:	29000926 	beq	r5,r4,9b14 <__divdf3+0xac>
    9af0:	9809883a 	mov	r4,r19
    9af4:	000a5300 	call	a530 <__pack_d>
    9af8:	dfc01217 	ldw	ra,72(sp)
    9afc:	dcc01117 	ldw	r19,68(sp)
    9b00:	dc801017 	ldw	r18,64(sp)
    9b04:	dc400f17 	ldw	r17,60(sp)
    9b08:	dc000e17 	ldw	r16,56(sp)
    9b0c:	dec01304 	addi	sp,sp,76
    9b10:	f800283a 	ret
    9b14:	01000074 	movhi	r4,1
    9b18:	2106c904 	addi	r4,r4,6948
    9b1c:	000a5300 	call	a530 <__pack_d>
    9b20:	dfc01217 	ldw	ra,72(sp)
    9b24:	dcc01117 	ldw	r19,68(sp)
    9b28:	dc801017 	ldw	r18,64(sp)
    9b2c:	dc400f17 	ldw	r17,60(sp)
    9b30:	dc000e17 	ldw	r16,56(sp)
    9b34:	dec01304 	addi	sp,sp,76
    9b38:	f800283a 	ret
    9b3c:	29805b26 	beq	r5,r6,9cac <__divdf3+0x244>
    9b40:	28802d26 	beq	r5,r2,9bf8 <__divdf3+0x190>
    9b44:	d8c00617 	ldw	r3,24(sp)
    9b48:	d8800b17 	ldw	r2,44(sp)
    9b4c:	d9c00817 	ldw	r7,32(sp)
    9b50:	dc400d17 	ldw	r17,52(sp)
    9b54:	188bc83a 	sub	r5,r3,r2
    9b58:	d9800717 	ldw	r6,28(sp)
    9b5c:	dc000c17 	ldw	r16,48(sp)
    9b60:	d9400615 	stw	r5,24(sp)
    9b64:	3c403836 	bltu	r7,r17,9c48 <__divdf3+0x1e0>
    9b68:	89c03626 	beq	r17,r7,9c44 <__divdf3+0x1dc>
    9b6c:	0015883a 	mov	r10,zero
    9b70:	001d883a 	mov	r14,zero
    9b74:	02c40034 	movhi	r11,4096
    9b78:	001f883a 	mov	r15,zero
    9b7c:	003f883a 	mov	ra,zero
    9b80:	04800f44 	movi	r18,61
    9b84:	00000f06 	br	9bc4 <__divdf3+0x15c>
    9b88:	601d883a 	mov	r14,r12
    9b8c:	681f883a 	mov	r15,r13
    9b90:	400d883a 	mov	r6,r8
    9b94:	100f883a 	mov	r7,r2
    9b98:	3191883a 	add	r8,r6,r6
    9b9c:	5808d07a 	srli	r4,r11,1
    9ba0:	4185803a 	cmpltu	r2,r8,r6
    9ba4:	39d3883a 	add	r9,r7,r7
    9ba8:	28c6b03a 	or	r3,r5,r3
    9bac:	1245883a 	add	r2,r2,r9
    9bb0:	1815883a 	mov	r10,r3
    9bb4:	2017883a 	mov	r11,r4
    9bb8:	400d883a 	mov	r6,r8
    9bbc:	100f883a 	mov	r7,r2
    9bc0:	fc801726 	beq	ra,r18,9c20 <__divdf3+0x1b8>
    9bc4:	580a97fa 	slli	r5,r11,31
    9bc8:	5006d07a 	srli	r3,r10,1
    9bcc:	ffc00044 	addi	ra,ra,1
    9bd0:	3c7ff136 	bltu	r7,r17,9b98 <__divdf3+0x130>
    9bd4:	3411c83a 	sub	r8,r6,r16
    9bd8:	3205803a 	cmpltu	r2,r6,r8
    9bdc:	3c53c83a 	sub	r9,r7,r17
    9be0:	7298b03a 	or	r12,r14,r10
    9be4:	7adab03a 	or	r13,r15,r11
    9be8:	4885c83a 	sub	r2,r9,r2
    9bec:	89ffe61e 	bne	r17,r7,9b88 <__divdf3+0x120>
    9bf0:	343fe936 	bltu	r6,r16,9b98 <__divdf3+0x130>
    9bf4:	003fe406 	br	9b88 <__divdf3+0x120>
    9bf8:	9809883a 	mov	r4,r19
    9bfc:	d9800415 	stw	r6,16(sp)
    9c00:	000a5300 	call	a530 <__pack_d>
    9c04:	dfc01217 	ldw	ra,72(sp)
    9c08:	dcc01117 	ldw	r19,68(sp)
    9c0c:	dc801017 	ldw	r18,64(sp)
    9c10:	dc400f17 	ldw	r17,60(sp)
    9c14:	dc000e17 	ldw	r16,56(sp)
    9c18:	dec01304 	addi	sp,sp,76
    9c1c:	f800283a 	ret
    9c20:	00803fc4 	movi	r2,255
    9c24:	7090703a 	and	r8,r14,r2
    9c28:	00802004 	movi	r2,128
    9c2c:	0007883a 	mov	r3,zero
    9c30:	0013883a 	mov	r9,zero
    9c34:	40800d26 	beq	r8,r2,9c6c <__divdf3+0x204>
    9c38:	dbc00815 	stw	r15,32(sp)
    9c3c:	db800715 	stw	r14,28(sp)
    9c40:	003fab06 	br	9af0 <__divdf3+0x88>
    9c44:	343fc92e 	bgeu	r6,r16,9b6c <__divdf3+0x104>
    9c48:	3185883a 	add	r2,r6,r6
    9c4c:	1189803a 	cmpltu	r4,r2,r6
    9c50:	39c7883a 	add	r3,r7,r7
    9c54:	20c9883a 	add	r4,r4,r3
    9c58:	297fffc4 	addi	r5,r5,-1
    9c5c:	100d883a 	mov	r6,r2
    9c60:	200f883a 	mov	r7,r4
    9c64:	d9400615 	stw	r5,24(sp)
    9c68:	003fc006 	br	9b6c <__divdf3+0x104>
    9c6c:	483ff21e 	bne	r9,zero,9c38 <__divdf3+0x1d0>
    9c70:	01004004 	movi	r4,256
    9c74:	7104703a 	and	r2,r14,r4
    9c78:	10c4b03a 	or	r2,r2,r3
    9c7c:	103fee1e 	bne	r2,zero,9c38 <__divdf3+0x1d0>
    9c80:	31c4b03a 	or	r2,r6,r7
    9c84:	103fec26 	beq	r2,zero,9c38 <__divdf3+0x1d0>
    9c88:	7205883a 	add	r2,r14,r8
    9c8c:	1391803a 	cmpltu	r8,r2,r14
    9c90:	43d1883a 	add	r8,r8,r15
    9c94:	013fc004 	movi	r4,-256
    9c98:	111c703a 	and	r14,r2,r4
    9c9c:	401f883a 	mov	r15,r8
    9ca0:	003fe506 	br	9c38 <__divdf3+0x1d0>
    9ca4:	8009883a 	mov	r4,r16
    9ca8:	003f9206 	br	9af4 <__divdf3+0x8c>
    9cac:	9809883a 	mov	r4,r19
    9cb0:	d8000715 	stw	zero,28(sp)
    9cb4:	d8000815 	stw	zero,32(sp)
    9cb8:	d8000615 	stw	zero,24(sp)
    9cbc:	003f8d06 	br	9af4 <__divdf3+0x8c>

00009cc0 <__eqdf2>:
    9cc0:	deffef04 	addi	sp,sp,-68
    9cc4:	dc400f15 	stw	r17,60(sp)
    9cc8:	dc400404 	addi	r17,sp,16
    9ccc:	2005883a 	mov	r2,r4
    9cd0:	2807883a 	mov	r3,r5
    9cd4:	dc000e15 	stw	r16,56(sp)
    9cd8:	d809883a 	mov	r4,sp
    9cdc:	880b883a 	mov	r5,r17
    9ce0:	dc000904 	addi	r16,sp,36
    9ce4:	d8c00115 	stw	r3,4(sp)
    9ce8:	d8800015 	stw	r2,0(sp)
    9cec:	d9800215 	stw	r6,8(sp)
    9cf0:	dfc01015 	stw	ra,64(sp)
    9cf4:	d9c00315 	stw	r7,12(sp)
    9cf8:	000a8440 	call	a844 <__unpack_d>
    9cfc:	d9000204 	addi	r4,sp,8
    9d00:	800b883a 	mov	r5,r16
    9d04:	000a8440 	call	a844 <__unpack_d>
    9d08:	d8800417 	ldw	r2,16(sp)
    9d0c:	00c00044 	movi	r3,1
    9d10:	180d883a 	mov	r6,r3
    9d14:	1880062e 	bgeu	r3,r2,9d30 <__eqdf2+0x70>
    9d18:	d8800917 	ldw	r2,36(sp)
    9d1c:	8809883a 	mov	r4,r17
    9d20:	800b883a 	mov	r5,r16
    9d24:	1880022e 	bgeu	r3,r2,9d30 <__eqdf2+0x70>
    9d28:	000a97c0 	call	a97c <__fpcmp_parts_d>
    9d2c:	100d883a 	mov	r6,r2
    9d30:	3005883a 	mov	r2,r6
    9d34:	dfc01017 	ldw	ra,64(sp)
    9d38:	dc400f17 	ldw	r17,60(sp)
    9d3c:	dc000e17 	ldw	r16,56(sp)
    9d40:	dec01104 	addi	sp,sp,68
    9d44:	f800283a 	ret

00009d48 <__nedf2>:
    9d48:	deffef04 	addi	sp,sp,-68
    9d4c:	dc400f15 	stw	r17,60(sp)
    9d50:	dc400404 	addi	r17,sp,16
    9d54:	2005883a 	mov	r2,r4
    9d58:	2807883a 	mov	r3,r5
    9d5c:	dc000e15 	stw	r16,56(sp)
    9d60:	d809883a 	mov	r4,sp
    9d64:	880b883a 	mov	r5,r17
    9d68:	dc000904 	addi	r16,sp,36
    9d6c:	d8c00115 	stw	r3,4(sp)
    9d70:	d8800015 	stw	r2,0(sp)
    9d74:	d9800215 	stw	r6,8(sp)
    9d78:	dfc01015 	stw	ra,64(sp)
    9d7c:	d9c00315 	stw	r7,12(sp)
    9d80:	000a8440 	call	a844 <__unpack_d>
    9d84:	d9000204 	addi	r4,sp,8
    9d88:	800b883a 	mov	r5,r16
    9d8c:	000a8440 	call	a844 <__unpack_d>
    9d90:	d8800417 	ldw	r2,16(sp)
    9d94:	00c00044 	movi	r3,1
    9d98:	180d883a 	mov	r6,r3
    9d9c:	1880062e 	bgeu	r3,r2,9db8 <__nedf2+0x70>
    9da0:	d8800917 	ldw	r2,36(sp)
    9da4:	8809883a 	mov	r4,r17
    9da8:	800b883a 	mov	r5,r16
    9dac:	1880022e 	bgeu	r3,r2,9db8 <__nedf2+0x70>
    9db0:	000a97c0 	call	a97c <__fpcmp_parts_d>
    9db4:	100d883a 	mov	r6,r2
    9db8:	3005883a 	mov	r2,r6
    9dbc:	dfc01017 	ldw	ra,64(sp)
    9dc0:	dc400f17 	ldw	r17,60(sp)
    9dc4:	dc000e17 	ldw	r16,56(sp)
    9dc8:	dec01104 	addi	sp,sp,68
    9dcc:	f800283a 	ret

00009dd0 <__gtdf2>:
    9dd0:	deffef04 	addi	sp,sp,-68
    9dd4:	dc400f15 	stw	r17,60(sp)
    9dd8:	dc400404 	addi	r17,sp,16
    9ddc:	2005883a 	mov	r2,r4
    9de0:	2807883a 	mov	r3,r5
    9de4:	dc000e15 	stw	r16,56(sp)
    9de8:	d809883a 	mov	r4,sp
    9dec:	880b883a 	mov	r5,r17
    9df0:	dc000904 	addi	r16,sp,36
    9df4:	d8c00115 	stw	r3,4(sp)
    9df8:	d8800015 	stw	r2,0(sp)
    9dfc:	d9800215 	stw	r6,8(sp)
    9e00:	dfc01015 	stw	ra,64(sp)
    9e04:	d9c00315 	stw	r7,12(sp)
    9e08:	000a8440 	call	a844 <__unpack_d>
    9e0c:	d9000204 	addi	r4,sp,8
    9e10:	800b883a 	mov	r5,r16
    9e14:	000a8440 	call	a844 <__unpack_d>
    9e18:	d8800417 	ldw	r2,16(sp)
    9e1c:	00c00044 	movi	r3,1
    9e20:	01bfffc4 	movi	r6,-1
    9e24:	1880062e 	bgeu	r3,r2,9e40 <__gtdf2+0x70>
    9e28:	d8800917 	ldw	r2,36(sp)
    9e2c:	8809883a 	mov	r4,r17
    9e30:	800b883a 	mov	r5,r16
    9e34:	1880022e 	bgeu	r3,r2,9e40 <__gtdf2+0x70>
    9e38:	000a97c0 	call	a97c <__fpcmp_parts_d>
    9e3c:	100d883a 	mov	r6,r2
    9e40:	3005883a 	mov	r2,r6
    9e44:	dfc01017 	ldw	ra,64(sp)
    9e48:	dc400f17 	ldw	r17,60(sp)
    9e4c:	dc000e17 	ldw	r16,56(sp)
    9e50:	dec01104 	addi	sp,sp,68
    9e54:	f800283a 	ret

00009e58 <__gedf2>:
    9e58:	deffef04 	addi	sp,sp,-68
    9e5c:	dc400f15 	stw	r17,60(sp)
    9e60:	dc400404 	addi	r17,sp,16
    9e64:	2005883a 	mov	r2,r4
    9e68:	2807883a 	mov	r3,r5
    9e6c:	dc000e15 	stw	r16,56(sp)
    9e70:	d809883a 	mov	r4,sp
    9e74:	880b883a 	mov	r5,r17
    9e78:	dc000904 	addi	r16,sp,36
    9e7c:	d8c00115 	stw	r3,4(sp)
    9e80:	d8800015 	stw	r2,0(sp)
    9e84:	d9800215 	stw	r6,8(sp)
    9e88:	dfc01015 	stw	ra,64(sp)
    9e8c:	d9c00315 	stw	r7,12(sp)
    9e90:	000a8440 	call	a844 <__unpack_d>
    9e94:	d9000204 	addi	r4,sp,8
    9e98:	800b883a 	mov	r5,r16
    9e9c:	000a8440 	call	a844 <__unpack_d>
    9ea0:	d8800417 	ldw	r2,16(sp)
    9ea4:	00c00044 	movi	r3,1
    9ea8:	01bfffc4 	movi	r6,-1
    9eac:	1880062e 	bgeu	r3,r2,9ec8 <__gedf2+0x70>
    9eb0:	d8800917 	ldw	r2,36(sp)
    9eb4:	8809883a 	mov	r4,r17
    9eb8:	800b883a 	mov	r5,r16
    9ebc:	1880022e 	bgeu	r3,r2,9ec8 <__gedf2+0x70>
    9ec0:	000a97c0 	call	a97c <__fpcmp_parts_d>
    9ec4:	100d883a 	mov	r6,r2
    9ec8:	3005883a 	mov	r2,r6
    9ecc:	dfc01017 	ldw	ra,64(sp)
    9ed0:	dc400f17 	ldw	r17,60(sp)
    9ed4:	dc000e17 	ldw	r16,56(sp)
    9ed8:	dec01104 	addi	sp,sp,68
    9edc:	f800283a 	ret

00009ee0 <__ltdf2>:
    9ee0:	deffef04 	addi	sp,sp,-68
    9ee4:	dc400f15 	stw	r17,60(sp)
    9ee8:	dc400404 	addi	r17,sp,16
    9eec:	2005883a 	mov	r2,r4
    9ef0:	2807883a 	mov	r3,r5
    9ef4:	dc000e15 	stw	r16,56(sp)
    9ef8:	d809883a 	mov	r4,sp
    9efc:	880b883a 	mov	r5,r17
    9f00:	dc000904 	addi	r16,sp,36
    9f04:	d8c00115 	stw	r3,4(sp)
    9f08:	d8800015 	stw	r2,0(sp)
    9f0c:	d9800215 	stw	r6,8(sp)
    9f10:	dfc01015 	stw	ra,64(sp)
    9f14:	d9c00315 	stw	r7,12(sp)
    9f18:	000a8440 	call	a844 <__unpack_d>
    9f1c:	d9000204 	addi	r4,sp,8
    9f20:	800b883a 	mov	r5,r16
    9f24:	000a8440 	call	a844 <__unpack_d>
    9f28:	d8800417 	ldw	r2,16(sp)
    9f2c:	00c00044 	movi	r3,1
    9f30:	180d883a 	mov	r6,r3
    9f34:	1880062e 	bgeu	r3,r2,9f50 <__ltdf2+0x70>
    9f38:	d8800917 	ldw	r2,36(sp)
    9f3c:	8809883a 	mov	r4,r17
    9f40:	800b883a 	mov	r5,r16
    9f44:	1880022e 	bgeu	r3,r2,9f50 <__ltdf2+0x70>
    9f48:	000a97c0 	call	a97c <__fpcmp_parts_d>
    9f4c:	100d883a 	mov	r6,r2
    9f50:	3005883a 	mov	r2,r6
    9f54:	dfc01017 	ldw	ra,64(sp)
    9f58:	dc400f17 	ldw	r17,60(sp)
    9f5c:	dc000e17 	ldw	r16,56(sp)
    9f60:	dec01104 	addi	sp,sp,68
    9f64:	f800283a 	ret

00009f68 <__floatsidf>:
    9f68:	2006d7fa 	srli	r3,r4,31
    9f6c:	defff604 	addi	sp,sp,-40
    9f70:	008000c4 	movi	r2,3
    9f74:	dfc00915 	stw	ra,36(sp)
    9f78:	dcc00815 	stw	r19,32(sp)
    9f7c:	dc800715 	stw	r18,28(sp)
    9f80:	dc400615 	stw	r17,24(sp)
    9f84:	dc000515 	stw	r16,20(sp)
    9f88:	d8800015 	stw	r2,0(sp)
    9f8c:	d8c00115 	stw	r3,4(sp)
    9f90:	20000f1e 	bne	r4,zero,9fd0 <__floatsidf+0x68>
    9f94:	00800084 	movi	r2,2
    9f98:	d8800015 	stw	r2,0(sp)
    9f9c:	d809883a 	mov	r4,sp
    9fa0:	000a5300 	call	a530 <__pack_d>
    9fa4:	1009883a 	mov	r4,r2
    9fa8:	180b883a 	mov	r5,r3
    9fac:	2005883a 	mov	r2,r4
    9fb0:	2807883a 	mov	r3,r5
    9fb4:	dfc00917 	ldw	ra,36(sp)
    9fb8:	dcc00817 	ldw	r19,32(sp)
    9fbc:	dc800717 	ldw	r18,28(sp)
    9fc0:	dc400617 	ldw	r17,24(sp)
    9fc4:	dc000517 	ldw	r16,20(sp)
    9fc8:	dec00a04 	addi	sp,sp,40
    9fcc:	f800283a 	ret
    9fd0:	00800f04 	movi	r2,60
    9fd4:	1807003a 	cmpeq	r3,r3,zero
    9fd8:	d8800215 	stw	r2,8(sp)
    9fdc:	18001126 	beq	r3,zero,a024 <__floatsidf+0xbc>
    9fe0:	0027883a 	mov	r19,zero
    9fe4:	2025883a 	mov	r18,r4
    9fe8:	d9000315 	stw	r4,12(sp)
    9fec:	dcc00415 	stw	r19,16(sp)
    9ff0:	000a4b00 	call	a4b0 <__clzsi2>
    9ff4:	11000744 	addi	r4,r2,29
    9ff8:	013fe80e 	bge	zero,r4,9f9c <__floatsidf+0x34>
    9ffc:	10bfff44 	addi	r2,r2,-3
    a000:	10000c16 	blt	r2,zero,a034 <__floatsidf+0xcc>
    a004:	90a2983a 	sll	r17,r18,r2
    a008:	0021883a 	mov	r16,zero
    a00c:	d8800217 	ldw	r2,8(sp)
    a010:	dc400415 	stw	r17,16(sp)
    a014:	dc000315 	stw	r16,12(sp)
    a018:	1105c83a 	sub	r2,r2,r4
    a01c:	d8800215 	stw	r2,8(sp)
    a020:	003fde06 	br	9f9c <__floatsidf+0x34>
    a024:	00a00034 	movhi	r2,32768
    a028:	20800a26 	beq	r4,r2,a054 <__floatsidf+0xec>
    a02c:	0109c83a 	sub	r4,zero,r4
    a030:	003feb06 	br	9fe0 <__floatsidf+0x78>
    a034:	9006d07a 	srli	r3,r18,1
    a038:	008007c4 	movi	r2,31
    a03c:	1105c83a 	sub	r2,r2,r4
    a040:	1886d83a 	srl	r3,r3,r2
    a044:	9922983a 	sll	r17,r19,r4
    a048:	9120983a 	sll	r16,r18,r4
    a04c:	1c62b03a 	or	r17,r3,r17
    a050:	003fee06 	br	a00c <__floatsidf+0xa4>
    a054:	0009883a 	mov	r4,zero
    a058:	01707834 	movhi	r5,49632
    a05c:	003fd306 	br	9fac <__floatsidf+0x44>

0000a060 <__fixdfsi>:
    a060:	defff804 	addi	sp,sp,-32
    a064:	2005883a 	mov	r2,r4
    a068:	2807883a 	mov	r3,r5
    a06c:	d809883a 	mov	r4,sp
    a070:	d9400204 	addi	r5,sp,8
    a074:	d8c00115 	stw	r3,4(sp)
    a078:	d8800015 	stw	r2,0(sp)
    a07c:	dfc00715 	stw	ra,28(sp)
    a080:	000a8440 	call	a844 <__unpack_d>
    a084:	d8c00217 	ldw	r3,8(sp)
    a088:	00800084 	movi	r2,2
    a08c:	1880051e 	bne	r3,r2,a0a4 <__fixdfsi+0x44>
    a090:	0007883a 	mov	r3,zero
    a094:	1805883a 	mov	r2,r3
    a098:	dfc00717 	ldw	ra,28(sp)
    a09c:	dec00804 	addi	sp,sp,32
    a0a0:	f800283a 	ret
    a0a4:	00800044 	movi	r2,1
    a0a8:	10fff92e 	bgeu	r2,r3,a090 <__fixdfsi+0x30>
    a0ac:	00800104 	movi	r2,4
    a0b0:	18800426 	beq	r3,r2,a0c4 <__fixdfsi+0x64>
    a0b4:	d8c00417 	ldw	r3,16(sp)
    a0b8:	183ff516 	blt	r3,zero,a090 <__fixdfsi+0x30>
    a0bc:	00800784 	movi	r2,30
    a0c0:	10c0080e 	bge	r2,r3,a0e4 <__fixdfsi+0x84>
    a0c4:	d8800317 	ldw	r2,12(sp)
    a0c8:	1000121e 	bne	r2,zero,a114 <__fixdfsi+0xb4>
    a0cc:	00e00034 	movhi	r3,32768
    a0d0:	18ffffc4 	addi	r3,r3,-1
    a0d4:	1805883a 	mov	r2,r3
    a0d8:	dfc00717 	ldw	ra,28(sp)
    a0dc:	dec00804 	addi	sp,sp,32
    a0e0:	f800283a 	ret
    a0e4:	00800f04 	movi	r2,60
    a0e8:	10d1c83a 	sub	r8,r2,r3
    a0ec:	40bff804 	addi	r2,r8,-32
    a0f0:	d9800517 	ldw	r6,20(sp)
    a0f4:	d9c00617 	ldw	r7,24(sp)
    a0f8:	10000816 	blt	r2,zero,a11c <__fixdfsi+0xbc>
    a0fc:	3888d83a 	srl	r4,r7,r2
    a100:	d8800317 	ldw	r2,12(sp)
    a104:	2007883a 	mov	r3,r4
    a108:	103fe226 	beq	r2,zero,a094 <__fixdfsi+0x34>
    a10c:	0107c83a 	sub	r3,zero,r4
    a110:	003fe006 	br	a094 <__fixdfsi+0x34>
    a114:	00e00034 	movhi	r3,32768
    a118:	003fde06 	br	a094 <__fixdfsi+0x34>
    a11c:	39c7883a 	add	r3,r7,r7
    a120:	008007c4 	movi	r2,31
    a124:	1205c83a 	sub	r2,r2,r8
    a128:	1886983a 	sll	r3,r3,r2
    a12c:	3208d83a 	srl	r4,r6,r8
    a130:	1908b03a 	or	r4,r3,r4
    a134:	003ff206 	br	a100 <__fixdfsi+0xa0>

0000a138 <__floatunsidf>:
    a138:	defff204 	addi	sp,sp,-56
    a13c:	dfc00d15 	stw	ra,52(sp)
    a140:	ddc00c15 	stw	r23,48(sp)
    a144:	dd800b15 	stw	r22,44(sp)
    a148:	dd400a15 	stw	r21,40(sp)
    a14c:	dd000915 	stw	r20,36(sp)
    a150:	dcc00815 	stw	r19,32(sp)
    a154:	dc800715 	stw	r18,28(sp)
    a158:	dc400615 	stw	r17,24(sp)
    a15c:	dc000515 	stw	r16,20(sp)
    a160:	d8000115 	stw	zero,4(sp)
    a164:	20000f1e 	bne	r4,zero,a1a4 <__floatunsidf+0x6c>
    a168:	00800084 	movi	r2,2
    a16c:	d8800015 	stw	r2,0(sp)
    a170:	d809883a 	mov	r4,sp
    a174:	000a5300 	call	a530 <__pack_d>
    a178:	dfc00d17 	ldw	ra,52(sp)
    a17c:	ddc00c17 	ldw	r23,48(sp)
    a180:	dd800b17 	ldw	r22,44(sp)
    a184:	dd400a17 	ldw	r21,40(sp)
    a188:	dd000917 	ldw	r20,36(sp)
    a18c:	dcc00817 	ldw	r19,32(sp)
    a190:	dc800717 	ldw	r18,28(sp)
    a194:	dc400617 	ldw	r17,24(sp)
    a198:	dc000517 	ldw	r16,20(sp)
    a19c:	dec00e04 	addi	sp,sp,56
    a1a0:	f800283a 	ret
    a1a4:	008000c4 	movi	r2,3
    a1a8:	00c00f04 	movi	r3,60
    a1ac:	002f883a 	mov	r23,zero
    a1b0:	202d883a 	mov	r22,r4
    a1b4:	d8800015 	stw	r2,0(sp)
    a1b8:	d8c00215 	stw	r3,8(sp)
    a1bc:	d9000315 	stw	r4,12(sp)
    a1c0:	ddc00415 	stw	r23,16(sp)
    a1c4:	000a4b00 	call	a4b0 <__clzsi2>
    a1c8:	12400744 	addi	r9,r2,29
    a1cc:	48000b16 	blt	r9,zero,a1fc <__floatunsidf+0xc4>
    a1d0:	483fe726 	beq	r9,zero,a170 <__floatunsidf+0x38>
    a1d4:	10bfff44 	addi	r2,r2,-3
    a1d8:	10002e16 	blt	r2,zero,a294 <__floatunsidf+0x15c>
    a1dc:	b0a2983a 	sll	r17,r22,r2
    a1e0:	0021883a 	mov	r16,zero
    a1e4:	d8800217 	ldw	r2,8(sp)
    a1e8:	dc400415 	stw	r17,16(sp)
    a1ec:	dc000315 	stw	r16,12(sp)
    a1f0:	1245c83a 	sub	r2,r2,r9
    a1f4:	d8800215 	stw	r2,8(sp)
    a1f8:	003fdd06 	br	a170 <__floatunsidf+0x38>
    a1fc:	0255c83a 	sub	r10,zero,r9
    a200:	51bff804 	addi	r6,r10,-32
    a204:	30001b16 	blt	r6,zero,a274 <__floatunsidf+0x13c>
    a208:	b9a8d83a 	srl	r20,r23,r6
    a20c:	002b883a 	mov	r21,zero
    a210:	000f883a 	mov	r7,zero
    a214:	01000044 	movi	r4,1
    a218:	0011883a 	mov	r8,zero
    a21c:	30002516 	blt	r6,zero,a2b4 <__floatunsidf+0x17c>
    a220:	21a6983a 	sll	r19,r4,r6
    a224:	0025883a 	mov	r18,zero
    a228:	00bfffc4 	movi	r2,-1
    a22c:	9089883a 	add	r4,r18,r2
    a230:	988b883a 	add	r5,r19,r2
    a234:	248d803a 	cmpltu	r6,r4,r18
    a238:	314b883a 	add	r5,r6,r5
    a23c:	b104703a 	and	r2,r22,r4
    a240:	b946703a 	and	r3,r23,r5
    a244:	10c4b03a 	or	r2,r2,r3
    a248:	10000226 	beq	r2,zero,a254 <__floatunsidf+0x11c>
    a24c:	01c00044 	movi	r7,1
    a250:	0011883a 	mov	r8,zero
    a254:	d9000217 	ldw	r4,8(sp)
    a258:	a1c4b03a 	or	r2,r20,r7
    a25c:	aa06b03a 	or	r3,r21,r8
    a260:	2249c83a 	sub	r4,r4,r9
    a264:	d8c00415 	stw	r3,16(sp)
    a268:	d9000215 	stw	r4,8(sp)
    a26c:	d8800315 	stw	r2,12(sp)
    a270:	003fbf06 	br	a170 <__floatunsidf+0x38>
    a274:	bdc7883a 	add	r3,r23,r23
    a278:	008007c4 	movi	r2,31
    a27c:	1285c83a 	sub	r2,r2,r10
    a280:	1886983a 	sll	r3,r3,r2
    a284:	b2a8d83a 	srl	r20,r22,r10
    a288:	baaad83a 	srl	r21,r23,r10
    a28c:	1d28b03a 	or	r20,r3,r20
    a290:	003fdf06 	br	a210 <__floatunsidf+0xd8>
    a294:	b006d07a 	srli	r3,r22,1
    a298:	008007c4 	movi	r2,31
    a29c:	1245c83a 	sub	r2,r2,r9
    a2a0:	1886d83a 	srl	r3,r3,r2
    a2a4:	ba62983a 	sll	r17,r23,r9
    a2a8:	b260983a 	sll	r16,r22,r9
    a2ac:	1c62b03a 	or	r17,r3,r17
    a2b0:	003fcc06 	br	a1e4 <__floatunsidf+0xac>
    a2b4:	2006d07a 	srli	r3,r4,1
    a2b8:	008007c4 	movi	r2,31
    a2bc:	1285c83a 	sub	r2,r2,r10
    a2c0:	18a6d83a 	srl	r19,r3,r2
    a2c4:	22a4983a 	sll	r18,r4,r10
    a2c8:	003fd706 	br	a228 <__floatunsidf+0xf0>

0000a2cc <udivmodsi4>:
    a2cc:	29001b2e 	bgeu	r5,r4,a33c <udivmodsi4+0x70>
    a2d0:	28001a16 	blt	r5,zero,a33c <udivmodsi4+0x70>
    a2d4:	00800044 	movi	r2,1
    a2d8:	0007883a 	mov	r3,zero
    a2dc:	01c007c4 	movi	r7,31
    a2e0:	00000306 	br	a2f0 <udivmodsi4+0x24>
    a2e4:	19c01326 	beq	r3,r7,a334 <udivmodsi4+0x68>
    a2e8:	18c00044 	addi	r3,r3,1
    a2ec:	28000416 	blt	r5,zero,a300 <udivmodsi4+0x34>
    a2f0:	294b883a 	add	r5,r5,r5
    a2f4:	1085883a 	add	r2,r2,r2
    a2f8:	293ffa36 	bltu	r5,r4,a2e4 <udivmodsi4+0x18>
    a2fc:	10000d26 	beq	r2,zero,a334 <udivmodsi4+0x68>
    a300:	0007883a 	mov	r3,zero
    a304:	21400236 	bltu	r4,r5,a310 <udivmodsi4+0x44>
    a308:	2149c83a 	sub	r4,r4,r5
    a30c:	1886b03a 	or	r3,r3,r2
    a310:	1004d07a 	srli	r2,r2,1
    a314:	280ad07a 	srli	r5,r5,1
    a318:	103ffa1e 	bne	r2,zero,a304 <udivmodsi4+0x38>
    a31c:	30000226 	beq	r6,zero,a328 <udivmodsi4+0x5c>
    a320:	2005883a 	mov	r2,r4
    a324:	f800283a 	ret
    a328:	1809883a 	mov	r4,r3
    a32c:	2005883a 	mov	r2,r4
    a330:	f800283a 	ret
    a334:	0007883a 	mov	r3,zero
    a338:	003ff806 	br	a31c <udivmodsi4+0x50>
    a33c:	00800044 	movi	r2,1
    a340:	0007883a 	mov	r3,zero
    a344:	003fef06 	br	a304 <udivmodsi4+0x38>

0000a348 <__divsi3>:
    a348:	defffe04 	addi	sp,sp,-8
    a34c:	dc000015 	stw	r16,0(sp)
    a350:	dfc00115 	stw	ra,4(sp)
    a354:	0021883a 	mov	r16,zero
    a358:	20000c16 	blt	r4,zero,a38c <__divsi3+0x44>
    a35c:	000d883a 	mov	r6,zero
    a360:	28000e16 	blt	r5,zero,a39c <__divsi3+0x54>
    a364:	000a2cc0 	call	a2cc <udivmodsi4>
    a368:	1007883a 	mov	r3,r2
    a36c:	8005003a 	cmpeq	r2,r16,zero
    a370:	1000011e 	bne	r2,zero,a378 <__divsi3+0x30>
    a374:	00c7c83a 	sub	r3,zero,r3
    a378:	1805883a 	mov	r2,r3
    a37c:	dfc00117 	ldw	ra,4(sp)
    a380:	dc000017 	ldw	r16,0(sp)
    a384:	dec00204 	addi	sp,sp,8
    a388:	f800283a 	ret
    a38c:	0109c83a 	sub	r4,zero,r4
    a390:	04000044 	movi	r16,1
    a394:	000d883a 	mov	r6,zero
    a398:	283ff20e 	bge	r5,zero,a364 <__divsi3+0x1c>
    a39c:	014bc83a 	sub	r5,zero,r5
    a3a0:	8021003a 	cmpeq	r16,r16,zero
    a3a4:	003fef06 	br	a364 <__divsi3+0x1c>

0000a3a8 <__modsi3>:
    a3a8:	deffff04 	addi	sp,sp,-4
    a3ac:	dfc00015 	stw	ra,0(sp)
    a3b0:	01800044 	movi	r6,1
    a3b4:	2807883a 	mov	r3,r5
    a3b8:	20000416 	blt	r4,zero,a3cc <__modsi3+0x24>
    a3bc:	28000c16 	blt	r5,zero,a3f0 <__modsi3+0x48>
    a3c0:	dfc00017 	ldw	ra,0(sp)
    a3c4:	dec00104 	addi	sp,sp,4
    a3c8:	000a2cc1 	jmpi	a2cc <udivmodsi4>
    a3cc:	0109c83a 	sub	r4,zero,r4
    a3d0:	28000b16 	blt	r5,zero,a400 <__modsi3+0x58>
    a3d4:	180b883a 	mov	r5,r3
    a3d8:	01800044 	movi	r6,1
    a3dc:	000a2cc0 	call	a2cc <udivmodsi4>
    a3e0:	0085c83a 	sub	r2,zero,r2
    a3e4:	dfc00017 	ldw	ra,0(sp)
    a3e8:	dec00104 	addi	sp,sp,4
    a3ec:	f800283a 	ret
    a3f0:	014bc83a 	sub	r5,zero,r5
    a3f4:	dfc00017 	ldw	ra,0(sp)
    a3f8:	dec00104 	addi	sp,sp,4
    a3fc:	000a2cc1 	jmpi	a2cc <udivmodsi4>
    a400:	0147c83a 	sub	r3,zero,r5
    a404:	003ff306 	br	a3d4 <__modsi3+0x2c>

0000a408 <__udivsi3>:
    a408:	000d883a 	mov	r6,zero
    a40c:	000a2cc1 	jmpi	a2cc <udivmodsi4>

0000a410 <__umodsi3>:
    a410:	01800044 	movi	r6,1
    a414:	000a2cc1 	jmpi	a2cc <udivmodsi4>

0000a418 <__muldi3>:
    a418:	2011883a 	mov	r8,r4
    a41c:	427fffcc 	andi	r9,r8,65535
    a420:	4018d43a 	srli	r12,r8,16
    a424:	32bfffcc 	andi	r10,r6,65535
    a428:	3016d43a 	srli	r11,r6,16
    a42c:	4a85383a 	mul	r2,r9,r10
    a430:	6295383a 	mul	r10,r12,r10
    a434:	4ad3383a 	mul	r9,r9,r11
    a438:	113fffcc 	andi	r4,r2,65535
    a43c:	1004d43a 	srli	r2,r2,16
    a440:	4a93883a 	add	r9,r9,r10
    a444:	3807883a 	mov	r3,r7
    a448:	1245883a 	add	r2,r2,r9
    a44c:	280f883a 	mov	r7,r5
    a450:	180b883a 	mov	r5,r3
    a454:	1006943a 	slli	r3,r2,16
    a458:	defffd04 	addi	sp,sp,-12
    a45c:	dc800215 	stw	r18,8(sp)
    a460:	1907883a 	add	r3,r3,r4
    a464:	dc400115 	stw	r17,4(sp)
    a468:	dc000015 	stw	r16,0(sp)
    a46c:	4165383a 	mul	r18,r8,r5
    a470:	31e3383a 	mul	r17,r6,r7
    a474:	1012d43a 	srli	r9,r2,16
    a478:	62d9383a 	mul	r12,r12,r11
    a47c:	181f883a 	mov	r15,r3
    a480:	1280022e 	bgeu	r2,r10,a48c <__muldi3+0x74>
    a484:	00800074 	movhi	r2,1
    a488:	6099883a 	add	r12,r12,r2
    a48c:	624d883a 	add	r6,r12,r9
    a490:	9187883a 	add	r3,r18,r6
    a494:	88c7883a 	add	r3,r17,r3
    a498:	7805883a 	mov	r2,r15
    a49c:	dc800217 	ldw	r18,8(sp)
    a4a0:	dc400117 	ldw	r17,4(sp)
    a4a4:	dc000017 	ldw	r16,0(sp)
    a4a8:	dec00304 	addi	sp,sp,12
    a4ac:	f800283a 	ret

0000a4b0 <__clzsi2>:
    a4b0:	00bfffd4 	movui	r2,65535
    a4b4:	11000e36 	bltu	r2,r4,a4f0 <__clzsi2+0x40>
    a4b8:	00803fc4 	movi	r2,255
    a4bc:	01400204 	movi	r5,8
    a4c0:	0007883a 	mov	r3,zero
    a4c4:	11001036 	bltu	r2,r4,a508 <__clzsi2+0x58>
    a4c8:	000b883a 	mov	r5,zero
    a4cc:	20c6d83a 	srl	r3,r4,r3
    a4d0:	00800074 	movhi	r2,1
    a4d4:	1086ce04 	addi	r2,r2,6968
    a4d8:	1887883a 	add	r3,r3,r2
    a4dc:	18800003 	ldbu	r2,0(r3)
    a4e0:	00c00804 	movi	r3,32
    a4e4:	2885883a 	add	r2,r5,r2
    a4e8:	1885c83a 	sub	r2,r3,r2
    a4ec:	f800283a 	ret
    a4f0:	01400404 	movi	r5,16
    a4f4:	00804034 	movhi	r2,256
    a4f8:	10bfffc4 	addi	r2,r2,-1
    a4fc:	2807883a 	mov	r3,r5
    a500:	113ff22e 	bgeu	r2,r4,a4cc <__clzsi2+0x1c>
    a504:	01400604 	movi	r5,24
    a508:	2807883a 	mov	r3,r5
    a50c:	20c6d83a 	srl	r3,r4,r3
    a510:	00800074 	movhi	r2,1
    a514:	1086ce04 	addi	r2,r2,6968
    a518:	1887883a 	add	r3,r3,r2
    a51c:	18800003 	ldbu	r2,0(r3)
    a520:	00c00804 	movi	r3,32
    a524:	2885883a 	add	r2,r5,r2
    a528:	1885c83a 	sub	r2,r3,r2
    a52c:	f800283a 	ret

0000a530 <__pack_d>:
    a530:	20c00017 	ldw	r3,0(r4)
    a534:	defffd04 	addi	sp,sp,-12
    a538:	dc000015 	stw	r16,0(sp)
    a53c:	dc800215 	stw	r18,8(sp)
    a540:	dc400115 	stw	r17,4(sp)
    a544:	00800044 	movi	r2,1
    a548:	22000317 	ldw	r8,12(r4)
    a54c:	001f883a 	mov	r15,zero
    a550:	22400417 	ldw	r9,16(r4)
    a554:	24000117 	ldw	r16,4(r4)
    a558:	10c0552e 	bgeu	r2,r3,a6b0 <__pack_d+0x180>
    a55c:	00800104 	movi	r2,4
    a560:	18804f26 	beq	r3,r2,a6a0 <__pack_d+0x170>
    a564:	00800084 	movi	r2,2
    a568:	18800226 	beq	r3,r2,a574 <__pack_d+0x44>
    a56c:	4244b03a 	or	r2,r8,r9
    a570:	10001a1e 	bne	r2,zero,a5dc <__pack_d+0xac>
    a574:	000d883a 	mov	r6,zero
    a578:	000f883a 	mov	r7,zero
    a57c:	0011883a 	mov	r8,zero
    a580:	00800434 	movhi	r2,16
    a584:	10bfffc4 	addi	r2,r2,-1
    a588:	301d883a 	mov	r14,r6
    a58c:	3884703a 	and	r2,r7,r2
    a590:	400a953a 	slli	r5,r8,20
    a594:	79bffc2c 	andhi	r6,r15,65520
    a598:	308cb03a 	or	r6,r6,r2
    a59c:	00e00434 	movhi	r3,32784
    a5a0:	18ffffc4 	addi	r3,r3,-1
    a5a4:	800497fa 	slli	r2,r16,31
    a5a8:	30c6703a 	and	r3,r6,r3
    a5ac:	1946b03a 	or	r3,r3,r5
    a5b0:	01600034 	movhi	r5,32768
    a5b4:	297fffc4 	addi	r5,r5,-1
    a5b8:	194a703a 	and	r5,r3,r5
    a5bc:	288ab03a 	or	r5,r5,r2
    a5c0:	2807883a 	mov	r3,r5
    a5c4:	7005883a 	mov	r2,r14
    a5c8:	dc800217 	ldw	r18,8(sp)
    a5cc:	dc400117 	ldw	r17,4(sp)
    a5d0:	dc000017 	ldw	r16,0(sp)
    a5d4:	dec00304 	addi	sp,sp,12
    a5d8:	f800283a 	ret
    a5dc:	21000217 	ldw	r4,8(r4)
    a5e0:	00bf0084 	movi	r2,-1022
    a5e4:	20803f16 	blt	r4,r2,a6e4 <__pack_d+0x1b4>
    a5e8:	0080ffc4 	movi	r2,1023
    a5ec:	11002c16 	blt	r2,r4,a6a0 <__pack_d+0x170>
    a5f0:	00803fc4 	movi	r2,255
    a5f4:	408c703a 	and	r6,r8,r2
    a5f8:	00802004 	movi	r2,128
    a5fc:	0007883a 	mov	r3,zero
    a600:	000f883a 	mov	r7,zero
    a604:	2280ffc4 	addi	r10,r4,1023
    a608:	30801e26 	beq	r6,r2,a684 <__pack_d+0x154>
    a60c:	00801fc4 	movi	r2,127
    a610:	4089883a 	add	r4,r8,r2
    a614:	220d803a 	cmpltu	r6,r4,r8
    a618:	324d883a 	add	r6,r6,r9
    a61c:	2011883a 	mov	r8,r4
    a620:	3013883a 	mov	r9,r6
    a624:	00880034 	movhi	r2,8192
    a628:	10bfffc4 	addi	r2,r2,-1
    a62c:	12400d36 	bltu	r2,r9,a664 <__pack_d+0x134>
    a630:	4804963a 	slli	r2,r9,24
    a634:	400cd23a 	srli	r6,r8,8
    a638:	480ed23a 	srli	r7,r9,8
    a63c:	013fffc4 	movi	r4,-1
    a640:	118cb03a 	or	r6,r2,r6
    a644:	01400434 	movhi	r5,16
    a648:	297fffc4 	addi	r5,r5,-1
    a64c:	3104703a 	and	r2,r6,r4
    a650:	3946703a 	and	r3,r7,r5
    a654:	5201ffcc 	andi	r8,r10,2047
    a658:	100d883a 	mov	r6,r2
    a65c:	180f883a 	mov	r7,r3
    a660:	003fc706 	br	a580 <__pack_d+0x50>
    a664:	480897fa 	slli	r4,r9,31
    a668:	4004d07a 	srli	r2,r8,1
    a66c:	4806d07a 	srli	r3,r9,1
    a670:	52800044 	addi	r10,r10,1
    a674:	2084b03a 	or	r2,r4,r2
    a678:	1011883a 	mov	r8,r2
    a67c:	1813883a 	mov	r9,r3
    a680:	003feb06 	br	a630 <__pack_d+0x100>
    a684:	383fe11e 	bne	r7,zero,a60c <__pack_d+0xdc>
    a688:	01004004 	movi	r4,256
    a68c:	4104703a 	and	r2,r8,r4
    a690:	10c4b03a 	or	r2,r2,r3
    a694:	103fe326 	beq	r2,zero,a624 <__pack_d+0xf4>
    a698:	3005883a 	mov	r2,r6
    a69c:	003fdc06 	br	a610 <__pack_d+0xe0>
    a6a0:	000d883a 	mov	r6,zero
    a6a4:	000f883a 	mov	r7,zero
    a6a8:	0201ffc4 	movi	r8,2047
    a6ac:	003fb406 	br	a580 <__pack_d+0x50>
    a6b0:	0005883a 	mov	r2,zero
    a6b4:	00c00234 	movhi	r3,8
    a6b8:	408cb03a 	or	r6,r8,r2
    a6bc:	48ceb03a 	or	r7,r9,r3
    a6c0:	013fffc4 	movi	r4,-1
    a6c4:	01400434 	movhi	r5,16
    a6c8:	297fffc4 	addi	r5,r5,-1
    a6cc:	3104703a 	and	r2,r6,r4
    a6d0:	3946703a 	and	r3,r7,r5
    a6d4:	100d883a 	mov	r6,r2
    a6d8:	180f883a 	mov	r7,r3
    a6dc:	0201ffc4 	movi	r8,2047
    a6e0:	003fa706 	br	a580 <__pack_d+0x50>
    a6e4:	1109c83a 	sub	r4,r2,r4
    a6e8:	00800e04 	movi	r2,56
    a6ec:	11004316 	blt	r2,r4,a7fc <__pack_d+0x2cc>
    a6f0:	21fff804 	addi	r7,r4,-32
    a6f4:	38004516 	blt	r7,zero,a80c <__pack_d+0x2dc>
    a6f8:	49d8d83a 	srl	r12,r9,r7
    a6fc:	001b883a 	mov	r13,zero
    a700:	0023883a 	mov	r17,zero
    a704:	01400044 	movi	r5,1
    a708:	0025883a 	mov	r18,zero
    a70c:	38004716 	blt	r7,zero,a82c <__pack_d+0x2fc>
    a710:	29d6983a 	sll	r11,r5,r7
    a714:	0015883a 	mov	r10,zero
    a718:	00bfffc4 	movi	r2,-1
    a71c:	5089883a 	add	r4,r10,r2
    a720:	588b883a 	add	r5,r11,r2
    a724:	228d803a 	cmpltu	r6,r4,r10
    a728:	314b883a 	add	r5,r6,r5
    a72c:	4104703a 	and	r2,r8,r4
    a730:	4946703a 	and	r3,r9,r5
    a734:	10c4b03a 	or	r2,r2,r3
    a738:	10000226 	beq	r2,zero,a744 <__pack_d+0x214>
    a73c:	04400044 	movi	r17,1
    a740:	0025883a 	mov	r18,zero
    a744:	00803fc4 	movi	r2,255
    a748:	644eb03a 	or	r7,r12,r17
    a74c:	3892703a 	and	r9,r7,r2
    a750:	00802004 	movi	r2,128
    a754:	6c90b03a 	or	r8,r13,r18
    a758:	0015883a 	mov	r10,zero
    a75c:	48801626 	beq	r9,r2,a7b8 <__pack_d+0x288>
    a760:	01001fc4 	movi	r4,127
    a764:	3905883a 	add	r2,r7,r4
    a768:	11cd803a 	cmpltu	r6,r2,r7
    a76c:	320d883a 	add	r6,r6,r8
    a770:	100f883a 	mov	r7,r2
    a774:	00840034 	movhi	r2,4096
    a778:	10bfffc4 	addi	r2,r2,-1
    a77c:	3011883a 	mov	r8,r6
    a780:	0007883a 	mov	r3,zero
    a784:	11801b36 	bltu	r2,r6,a7f4 <__pack_d+0x2c4>
    a788:	4004963a 	slli	r2,r8,24
    a78c:	3808d23a 	srli	r4,r7,8
    a790:	400ad23a 	srli	r5,r8,8
    a794:	1813883a 	mov	r9,r3
    a798:	1108b03a 	or	r4,r2,r4
    a79c:	00bfffc4 	movi	r2,-1
    a7a0:	00c00434 	movhi	r3,16
    a7a4:	18ffffc4 	addi	r3,r3,-1
    a7a8:	208c703a 	and	r6,r4,r2
    a7ac:	28ce703a 	and	r7,r5,r3
    a7b0:	4a01ffcc 	andi	r8,r9,2047
    a7b4:	003f7206 	br	a580 <__pack_d+0x50>
    a7b8:	503fe91e 	bne	r10,zero,a760 <__pack_d+0x230>
    a7bc:	01004004 	movi	r4,256
    a7c0:	3904703a 	and	r2,r7,r4
    a7c4:	0007883a 	mov	r3,zero
    a7c8:	10c4b03a 	or	r2,r2,r3
    a7cc:	10000626 	beq	r2,zero,a7e8 <__pack_d+0x2b8>
    a7d0:	3a45883a 	add	r2,r7,r9
    a7d4:	11cd803a 	cmpltu	r6,r2,r7
    a7d8:	320d883a 	add	r6,r6,r8
    a7dc:	100f883a 	mov	r7,r2
    a7e0:	3011883a 	mov	r8,r6
    a7e4:	0007883a 	mov	r3,zero
    a7e8:	00840034 	movhi	r2,4096
    a7ec:	10bfffc4 	addi	r2,r2,-1
    a7f0:	123fe52e 	bgeu	r2,r8,a788 <__pack_d+0x258>
    a7f4:	00c00044 	movi	r3,1
    a7f8:	003fe306 	br	a788 <__pack_d+0x258>
    a7fc:	0009883a 	mov	r4,zero
    a800:	0013883a 	mov	r9,zero
    a804:	000b883a 	mov	r5,zero
    a808:	003fe406 	br	a79c <__pack_d+0x26c>
    a80c:	4a47883a 	add	r3,r9,r9
    a810:	008007c4 	movi	r2,31
    a814:	1105c83a 	sub	r2,r2,r4
    a818:	1886983a 	sll	r3,r3,r2
    a81c:	4118d83a 	srl	r12,r8,r4
    a820:	491ad83a 	srl	r13,r9,r4
    a824:	1b18b03a 	or	r12,r3,r12
    a828:	003fb506 	br	a700 <__pack_d+0x1d0>
    a82c:	2806d07a 	srli	r3,r5,1
    a830:	008007c4 	movi	r2,31
    a834:	1105c83a 	sub	r2,r2,r4
    a838:	1896d83a 	srl	r11,r3,r2
    a83c:	2914983a 	sll	r10,r5,r4
    a840:	003fb506 	br	a718 <__pack_d+0x1e8>

0000a844 <__unpack_d>:
    a844:	20c00117 	ldw	r3,4(r4)
    a848:	22400017 	ldw	r9,0(r4)
    a84c:	00800434 	movhi	r2,16
    a850:	10bfffc4 	addi	r2,r2,-1
    a854:	1808d53a 	srli	r4,r3,20
    a858:	180cd7fa 	srli	r6,r3,31
    a85c:	1894703a 	and	r10,r3,r2
    a860:	2201ffcc 	andi	r8,r4,2047
    a864:	281b883a 	mov	r13,r5
    a868:	4817883a 	mov	r11,r9
    a86c:	29800115 	stw	r6,4(r5)
    a870:	5019883a 	mov	r12,r10
    a874:	40001e1e 	bne	r8,zero,a8f0 <__unpack_d+0xac>
    a878:	4a84b03a 	or	r2,r9,r10
    a87c:	10001926 	beq	r2,zero,a8e4 <__unpack_d+0xa0>
    a880:	4804d63a 	srli	r2,r9,24
    a884:	500c923a 	slli	r6,r10,8
    a888:	013f0084 	movi	r4,-1022
    a88c:	00c40034 	movhi	r3,4096
    a890:	18ffffc4 	addi	r3,r3,-1
    a894:	118cb03a 	or	r6,r2,r6
    a898:	008000c4 	movi	r2,3
    a89c:	480a923a 	slli	r5,r9,8
    a8a0:	68800015 	stw	r2,0(r13)
    a8a4:	69000215 	stw	r4,8(r13)
    a8a8:	19800b36 	bltu	r3,r6,a8d8 <__unpack_d+0x94>
    a8ac:	200f883a 	mov	r7,r4
    a8b0:	1811883a 	mov	r8,r3
    a8b4:	2945883a 	add	r2,r5,r5
    a8b8:	1149803a 	cmpltu	r4,r2,r5
    a8bc:	3187883a 	add	r3,r6,r6
    a8c0:	20c9883a 	add	r4,r4,r3
    a8c4:	100b883a 	mov	r5,r2
    a8c8:	200d883a 	mov	r6,r4
    a8cc:	39ffffc4 	addi	r7,r7,-1
    a8d0:	413ff82e 	bgeu	r8,r4,a8b4 <__unpack_d+0x70>
    a8d4:	69c00215 	stw	r7,8(r13)
    a8d8:	69800415 	stw	r6,16(r13)
    a8dc:	69400315 	stw	r5,12(r13)
    a8e0:	f800283a 	ret
    a8e4:	00800084 	movi	r2,2
    a8e8:	28800015 	stw	r2,0(r5)
    a8ec:	f800283a 	ret
    a8f0:	0081ffc4 	movi	r2,2047
    a8f4:	40800f26 	beq	r8,r2,a934 <__unpack_d+0xf0>
    a8f8:	480cd63a 	srli	r6,r9,24
    a8fc:	5006923a 	slli	r3,r10,8
    a900:	4804923a 	slli	r2,r9,8
    a904:	0009883a 	mov	r4,zero
    a908:	30c6b03a 	or	r3,r6,r3
    a90c:	01440034 	movhi	r5,4096
    a910:	110cb03a 	or	r6,r2,r4
    a914:	423f0044 	addi	r8,r8,-1023
    a918:	194eb03a 	or	r7,r3,r5
    a91c:	008000c4 	movi	r2,3
    a920:	69c00415 	stw	r7,16(r13)
    a924:	6a000215 	stw	r8,8(r13)
    a928:	68800015 	stw	r2,0(r13)
    a92c:	69800315 	stw	r6,12(r13)
    a930:	f800283a 	ret
    a934:	4a84b03a 	or	r2,r9,r10
    a938:	1000031e 	bne	r2,zero,a948 <__unpack_d+0x104>
    a93c:	00800104 	movi	r2,4
    a940:	28800015 	stw	r2,0(r5)
    a944:	f800283a 	ret
    a948:	0009883a 	mov	r4,zero
    a94c:	01400234 	movhi	r5,8
    a950:	4904703a 	and	r2,r9,r4
    a954:	5146703a 	and	r3,r10,r5
    a958:	10c4b03a 	or	r2,r2,r3
    a95c:	10000526 	beq	r2,zero,a974 <__unpack_d+0x130>
    a960:	00800044 	movi	r2,1
    a964:	68800015 	stw	r2,0(r13)
    a968:	6b000415 	stw	r12,16(r13)
    a96c:	6ac00315 	stw	r11,12(r13)
    a970:	f800283a 	ret
    a974:	68000015 	stw	zero,0(r13)
    a978:	003ffb06 	br	a968 <__unpack_d+0x124>

0000a97c <__fpcmp_parts_d>:
    a97c:	21800017 	ldw	r6,0(r4)
    a980:	00c00044 	movi	r3,1
    a984:	19800a2e 	bgeu	r3,r6,a9b0 <__fpcmp_parts_d+0x34>
    a988:	28800017 	ldw	r2,0(r5)
    a98c:	1880082e 	bgeu	r3,r2,a9b0 <__fpcmp_parts_d+0x34>
    a990:	00c00104 	movi	r3,4
    a994:	30c02626 	beq	r6,r3,aa30 <__fpcmp_parts_d+0xb4>
    a998:	10c02226 	beq	r2,r3,aa24 <__fpcmp_parts_d+0xa8>
    a99c:	00c00084 	movi	r3,2
    a9a0:	30c00526 	beq	r6,r3,a9b8 <__fpcmp_parts_d+0x3c>
    a9a4:	10c0071e 	bne	r2,r3,a9c4 <__fpcmp_parts_d+0x48>
    a9a8:	20800117 	ldw	r2,4(r4)
    a9ac:	1000091e 	bne	r2,zero,a9d4 <__fpcmp_parts_d+0x58>
    a9b0:	00800044 	movi	r2,1
    a9b4:	f800283a 	ret
    a9b8:	10c01a1e 	bne	r2,r3,aa24 <__fpcmp_parts_d+0xa8>
    a9bc:	0005883a 	mov	r2,zero
    a9c0:	f800283a 	ret
    a9c4:	22000117 	ldw	r8,4(r4)
    a9c8:	28800117 	ldw	r2,4(r5)
    a9cc:	40800326 	beq	r8,r2,a9dc <__fpcmp_parts_d+0x60>
    a9d0:	403ff726 	beq	r8,zero,a9b0 <__fpcmp_parts_d+0x34>
    a9d4:	00bfffc4 	movi	r2,-1
    a9d8:	f800283a 	ret
    a9dc:	20c00217 	ldw	r3,8(r4)
    a9e0:	28800217 	ldw	r2,8(r5)
    a9e4:	10fffa16 	blt	r2,r3,a9d0 <__fpcmp_parts_d+0x54>
    a9e8:	18800916 	blt	r3,r2,aa10 <__fpcmp_parts_d+0x94>
    a9ec:	21c00417 	ldw	r7,16(r4)
    a9f0:	28c00417 	ldw	r3,16(r5)
    a9f4:	21800317 	ldw	r6,12(r4)
    a9f8:	28800317 	ldw	r2,12(r5)
    a9fc:	19fff436 	bltu	r3,r7,a9d0 <__fpcmp_parts_d+0x54>
    aa00:	38c00526 	beq	r7,r3,aa18 <__fpcmp_parts_d+0x9c>
    aa04:	38c00236 	bltu	r7,r3,aa10 <__fpcmp_parts_d+0x94>
    aa08:	19ffec1e 	bne	r3,r7,a9bc <__fpcmp_parts_d+0x40>
    aa0c:	30bfeb2e 	bgeu	r6,r2,a9bc <__fpcmp_parts_d+0x40>
    aa10:	403fe71e 	bne	r8,zero,a9b0 <__fpcmp_parts_d+0x34>
    aa14:	003fef06 	br	a9d4 <__fpcmp_parts_d+0x58>
    aa18:	11bffa2e 	bgeu	r2,r6,aa04 <__fpcmp_parts_d+0x88>
    aa1c:	403fe426 	beq	r8,zero,a9b0 <__fpcmp_parts_d+0x34>
    aa20:	003fec06 	br	a9d4 <__fpcmp_parts_d+0x58>
    aa24:	28800117 	ldw	r2,4(r5)
    aa28:	103fe11e 	bne	r2,zero,a9b0 <__fpcmp_parts_d+0x34>
    aa2c:	003fe906 	br	a9d4 <__fpcmp_parts_d+0x58>
    aa30:	11bfdd1e 	bne	r2,r6,a9a8 <__fpcmp_parts_d+0x2c>
    aa34:	28c00117 	ldw	r3,4(r5)
    aa38:	20800117 	ldw	r2,4(r4)
    aa3c:	1885c83a 	sub	r2,r3,r2
    aa40:	f800283a 	ret

0000aa44 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    aa44:	defff804 	addi	sp,sp,-32
    aa48:	dfc00715 	stw	ra,28(sp)
    aa4c:	df000615 	stw	fp,24(sp)
    aa50:	df000604 	addi	fp,sp,24
    aa54:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    aa58:	e0bffc17 	ldw	r2,-16(fp)
    aa5c:	1004803a 	cmplt	r2,r2,zero
    aa60:	1000081e 	bne	r2,zero,aa84 <close+0x40>
    aa64:	e0bffc17 	ldw	r2,-16(fp)
    aa68:	10800324 	muli	r2,r2,12
    aa6c:	1007883a 	mov	r3,r2
    aa70:	00800074 	movhi	r2,1
    aa74:	10898a04 	addi	r2,r2,9768
    aa78:	1887883a 	add	r3,r3,r2
    aa7c:	e0ffff15 	stw	r3,-4(fp)
    aa80:	00000106 	br	aa88 <close+0x44>
    aa84:	e03fff15 	stw	zero,-4(fp)
    aa88:	e0bfff17 	ldw	r2,-4(fp)
    aa8c:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    aa90:	e0bffb17 	ldw	r2,-20(fp)
    aa94:	1005003a 	cmpeq	r2,r2,zero
    aa98:	10001d1e 	bne	r2,zero,ab10 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    aa9c:	e0bffb17 	ldw	r2,-20(fp)
    aaa0:	10800017 	ldw	r2,0(r2)
    aaa4:	10800417 	ldw	r2,16(r2)
    aaa8:	1005003a 	cmpeq	r2,r2,zero
    aaac:	1000071e 	bne	r2,zero,aacc <close+0x88>
    aab0:	e0bffb17 	ldw	r2,-20(fp)
    aab4:	10800017 	ldw	r2,0(r2)
    aab8:	10800417 	ldw	r2,16(r2)
    aabc:	e13ffb17 	ldw	r4,-20(fp)
    aac0:	103ee83a 	callr	r2
    aac4:	e0bffe15 	stw	r2,-8(fp)
    aac8:	00000106 	br	aad0 <close+0x8c>
    aacc:	e03ffe15 	stw	zero,-8(fp)
    aad0:	e0bffe17 	ldw	r2,-8(fp)
    aad4:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    aad8:	e13ffc17 	ldw	r4,-16(fp)
    aadc:	000b6e00 	call	b6e0 <alt_release_fd>
    if (rval < 0)
    aae0:	e0bffa17 	ldw	r2,-24(fp)
    aae4:	1004403a 	cmpge	r2,r2,zero
    aae8:	1000071e 	bne	r2,zero,ab08 <close+0xc4>
    {
      ALT_ERRNO = -rval;
    aaec:	000ab400 	call	ab40 <alt_get_errno>
    aaf0:	e0fffa17 	ldw	r3,-24(fp)
    aaf4:	00c7c83a 	sub	r3,zero,r3
    aaf8:	10c00015 	stw	r3,0(r2)
      return -1;
    aafc:	00bfffc4 	movi	r2,-1
    ab00:	e0bffd15 	stw	r2,-12(fp)
    ab04:	00000806 	br	ab28 <close+0xe4>
    }
    return 0;
    ab08:	e03ffd15 	stw	zero,-12(fp)
    ab0c:	00000606 	br	ab28 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    ab10:	000ab400 	call	ab40 <alt_get_errno>
    ab14:	1007883a 	mov	r3,r2
    ab18:	00801444 	movi	r2,81
    ab1c:	18800015 	stw	r2,0(r3)
    return -1;
    ab20:	00bfffc4 	movi	r2,-1
    ab24:	e0bffd15 	stw	r2,-12(fp)
    ab28:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    ab2c:	e037883a 	mov	sp,fp
    ab30:	dfc00117 	ldw	ra,4(sp)
    ab34:	df000017 	ldw	fp,0(sp)
    ab38:	dec00204 	addi	sp,sp,8
    ab3c:	f800283a 	ret

0000ab40 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ab40:	defffd04 	addi	sp,sp,-12
    ab44:	dfc00215 	stw	ra,8(sp)
    ab48:	df000115 	stw	fp,4(sp)
    ab4c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    ab50:	00800074 	movhi	r2,1
    ab54:	108efa04 	addi	r2,r2,15336
    ab58:	10800017 	ldw	r2,0(r2)
    ab5c:	1005003a 	cmpeq	r2,r2,zero
    ab60:	1000061e 	bne	r2,zero,ab7c <alt_get_errno+0x3c>
    ab64:	00800074 	movhi	r2,1
    ab68:	108efa04 	addi	r2,r2,15336
    ab6c:	10800017 	ldw	r2,0(r2)
    ab70:	103ee83a 	callr	r2
    ab74:	e0bfff15 	stw	r2,-4(fp)
    ab78:	00000306 	br	ab88 <alt_get_errno+0x48>
    ab7c:	00800074 	movhi	r2,1
    ab80:	10968e04 	addi	r2,r2,23096
    ab84:	e0bfff15 	stw	r2,-4(fp)
    ab88:	e0bfff17 	ldw	r2,-4(fp)
}
    ab8c:	e037883a 	mov	sp,fp
    ab90:	dfc00117 	ldw	ra,4(sp)
    ab94:	df000017 	ldw	fp,0(sp)
    ab98:	dec00204 	addi	sp,sp,8
    ab9c:	f800283a 	ret

0000aba0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    aba0:	defffc04 	addi	sp,sp,-16
    aba4:	df000315 	stw	fp,12(sp)
    aba8:	df000304 	addi	fp,sp,12
    abac:	e13ffd15 	stw	r4,-12(fp)
    abb0:	e17ffe15 	stw	r5,-8(fp)
    abb4:	e1bfff15 	stw	r6,-4(fp)
  return len;
    abb8:	e0bfff17 	ldw	r2,-4(fp)
}
    abbc:	e037883a 	mov	sp,fp
    abc0:	df000017 	ldw	fp,0(sp)
    abc4:	dec00104 	addi	sp,sp,4
    abc8:	f800283a 	ret

0000abcc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    abcc:	defff904 	addi	sp,sp,-28
    abd0:	dfc00615 	stw	ra,24(sp)
    abd4:	df000515 	stw	fp,20(sp)
    abd8:	df000504 	addi	fp,sp,20
    abdc:	e13ffc15 	stw	r4,-16(fp)
    abe0:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    abe4:	e0bffc17 	ldw	r2,-16(fp)
    abe8:	1004803a 	cmplt	r2,r2,zero
    abec:	1000081e 	bne	r2,zero,ac10 <fstat+0x44>
    abf0:	e0bffc17 	ldw	r2,-16(fp)
    abf4:	10800324 	muli	r2,r2,12
    abf8:	1007883a 	mov	r3,r2
    abfc:	00800074 	movhi	r2,1
    ac00:	10898a04 	addi	r2,r2,9768
    ac04:	1887883a 	add	r3,r3,r2
    ac08:	e0ffff15 	stw	r3,-4(fp)
    ac0c:	00000106 	br	ac14 <fstat+0x48>
    ac10:	e03fff15 	stw	zero,-4(fp)
    ac14:	e0bfff17 	ldw	r2,-4(fp)
    ac18:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    ac1c:	e0bffb17 	ldw	r2,-20(fp)
    ac20:	1005003a 	cmpeq	r2,r2,zero
    ac24:	1000121e 	bne	r2,zero,ac70 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    ac28:	e0bffb17 	ldw	r2,-20(fp)
    ac2c:	10800017 	ldw	r2,0(r2)
    ac30:	10800817 	ldw	r2,32(r2)
    ac34:	1005003a 	cmpeq	r2,r2,zero
    ac38:	1000081e 	bne	r2,zero,ac5c <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
    ac3c:	e0bffb17 	ldw	r2,-20(fp)
    ac40:	10800017 	ldw	r2,0(r2)
    ac44:	10800817 	ldw	r2,32(r2)
    ac48:	e13ffb17 	ldw	r4,-20(fp)
    ac4c:	e17ffd17 	ldw	r5,-12(fp)
    ac50:	103ee83a 	callr	r2
    ac54:	e0bffe15 	stw	r2,-8(fp)
    ac58:	00000b06 	br	ac88 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    ac5c:	e0fffd17 	ldw	r3,-12(fp)
    ac60:	00880004 	movi	r2,8192
    ac64:	18800115 	stw	r2,4(r3)
      return 0;
    ac68:	e03ffe15 	stw	zero,-8(fp)
    ac6c:	00000606 	br	ac88 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    ac70:	000aca00 	call	aca0 <alt_get_errno>
    ac74:	1007883a 	mov	r3,r2
    ac78:	00801444 	movi	r2,81
    ac7c:	18800015 	stw	r2,0(r3)
    return -1;
    ac80:	00bfffc4 	movi	r2,-1
    ac84:	e0bffe15 	stw	r2,-8(fp)
    ac88:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    ac8c:	e037883a 	mov	sp,fp
    ac90:	dfc00117 	ldw	ra,4(sp)
    ac94:	df000017 	ldw	fp,0(sp)
    ac98:	dec00204 	addi	sp,sp,8
    ac9c:	f800283a 	ret

0000aca0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    aca0:	defffd04 	addi	sp,sp,-12
    aca4:	dfc00215 	stw	ra,8(sp)
    aca8:	df000115 	stw	fp,4(sp)
    acac:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    acb0:	00800074 	movhi	r2,1
    acb4:	108efa04 	addi	r2,r2,15336
    acb8:	10800017 	ldw	r2,0(r2)
    acbc:	1005003a 	cmpeq	r2,r2,zero
    acc0:	1000061e 	bne	r2,zero,acdc <alt_get_errno+0x3c>
    acc4:	00800074 	movhi	r2,1
    acc8:	108efa04 	addi	r2,r2,15336
    accc:	10800017 	ldw	r2,0(r2)
    acd0:	103ee83a 	callr	r2
    acd4:	e0bfff15 	stw	r2,-4(fp)
    acd8:	00000306 	br	ace8 <alt_get_errno+0x48>
    acdc:	00800074 	movhi	r2,1
    ace0:	10968e04 	addi	r2,r2,23096
    ace4:	e0bfff15 	stw	r2,-4(fp)
    ace8:	e0bfff17 	ldw	r2,-4(fp)
}
    acec:	e037883a 	mov	sp,fp
    acf0:	dfc00117 	ldw	ra,4(sp)
    acf4:	df000017 	ldw	fp,0(sp)
    acf8:	dec00204 	addi	sp,sp,8
    acfc:	f800283a 	ret

0000ad00 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    ad00:	deffef04 	addi	sp,sp,-68
    ad04:	df001015 	stw	fp,64(sp)
    ad08:	df001004 	addi	fp,sp,64
    ad0c:	e13ffc15 	stw	r4,-16(fp)
    ad10:	e17ffd15 	stw	r5,-12(fp)
    ad14:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
    ad18:	00bffa84 	movi	r2,-22
    ad1c:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    ad20:	e0bffc17 	ldw	r2,-16(fp)
    ad24:	10800828 	cmpgeui	r2,r2,32
    ad28:	1000601e 	bne	r2,zero,aeac <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ad2c:	0005303a 	rdctl	r2,status
    ad30:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ad34:	e0fff917 	ldw	r3,-28(fp)
    ad38:	00bfff84 	movi	r2,-2
    ad3c:	1884703a 	and	r2,r3,r2
    ad40:	1001703a 	wrctl	status,r2
  
  return context;
    ad44:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
    ad48:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
    ad4c:	e0bffc17 	ldw	r2,-16(fp)
    ad50:	00c00fb4 	movhi	r3,62
    ad54:	18d8e604 	addi	r3,r3,25496
    ad58:	100490fa 	slli	r2,r2,3
    ad5c:	10c7883a 	add	r3,r2,r3
    ad60:	e0bffe17 	ldw	r2,-8(fp)
    ad64:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
    ad68:	e0bffc17 	ldw	r2,-16(fp)
    ad6c:	00c00fb4 	movhi	r3,62
    ad70:	18d8e604 	addi	r3,r3,25496
    ad74:	100490fa 	slli	r2,r2,3
    ad78:	10c5883a 	add	r2,r2,r3
    ad7c:	10c00104 	addi	r3,r2,4
    ad80:	e0bffd17 	ldw	r2,-12(fp)
    ad84:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    ad88:	e0bffe17 	ldw	r2,-8(fp)
    ad8c:	1005003a 	cmpeq	r2,r2,zero
    ad90:	1000201e 	bne	r2,zero,ae14 <alt_irq_register+0x114>
    ad94:	e0bffc17 	ldw	r2,-16(fp)
    ad98:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ad9c:	0005303a 	rdctl	r2,status
    ada0:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ada4:	e0fff617 	ldw	r3,-40(fp)
    ada8:	00bfff84 	movi	r2,-2
    adac:	1884703a 	and	r2,r3,r2
    adb0:	1001703a 	wrctl	status,r2
  
  return context;
    adb4:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    adb8:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
    adbc:	e0fff717 	ldw	r3,-36(fp)
    adc0:	00800044 	movi	r2,1
    adc4:	10c4983a 	sll	r2,r2,r3
    adc8:	1007883a 	mov	r3,r2
    adcc:	00800074 	movhi	r2,1
    add0:	10968f04 	addi	r2,r2,23100
    add4:	10800017 	ldw	r2,0(r2)
    add8:	1886b03a 	or	r3,r3,r2
    addc:	00800074 	movhi	r2,1
    ade0:	10968f04 	addi	r2,r2,23100
    ade4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    ade8:	00800074 	movhi	r2,1
    adec:	10968f04 	addi	r2,r2,23100
    adf0:	10800017 	ldw	r2,0(r2)
    adf4:	100170fa 	wrctl	ienable,r2
    adf8:	e0bff817 	ldw	r2,-32(fp)
    adfc:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ae00:	e0bff517 	ldw	r2,-44(fp)
    ae04:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    ae08:	0005883a 	mov	r2,zero
    ae0c:	e0bfff15 	stw	r2,-4(fp)
    ae10:	00002006 	br	ae94 <alt_irq_register+0x194>
    ae14:	e0bffc17 	ldw	r2,-16(fp)
    ae18:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ae1c:	0005303a 	rdctl	r2,status
    ae20:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ae24:	e0fff217 	ldw	r3,-56(fp)
    ae28:	00bfff84 	movi	r2,-2
    ae2c:	1884703a 	and	r2,r3,r2
    ae30:	1001703a 	wrctl	status,r2
  
  return context;
    ae34:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    ae38:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
    ae3c:	e0fff317 	ldw	r3,-52(fp)
    ae40:	00800044 	movi	r2,1
    ae44:	10c4983a 	sll	r2,r2,r3
    ae48:	0084303a 	nor	r2,zero,r2
    ae4c:	1007883a 	mov	r3,r2
    ae50:	00800074 	movhi	r2,1
    ae54:	10968f04 	addi	r2,r2,23100
    ae58:	10800017 	ldw	r2,0(r2)
    ae5c:	1886703a 	and	r3,r3,r2
    ae60:	00800074 	movhi	r2,1
    ae64:	10968f04 	addi	r2,r2,23100
    ae68:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    ae6c:	00800074 	movhi	r2,1
    ae70:	10968f04 	addi	r2,r2,23100
    ae74:	10800017 	ldw	r2,0(r2)
    ae78:	100170fa 	wrctl	ienable,r2
    ae7c:	e0bff417 	ldw	r2,-48(fp)
    ae80:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ae84:	e0bff117 	ldw	r2,-60(fp)
    ae88:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    ae8c:	0005883a 	mov	r2,zero
    ae90:	e0bfff15 	stw	r2,-4(fp)
    ae94:	e0bfff17 	ldw	r2,-4(fp)
    ae98:	e0bffb15 	stw	r2,-20(fp)
    ae9c:	e0bffa17 	ldw	r2,-24(fp)
    aea0:	e0bff015 	stw	r2,-64(fp)
    aea4:	e0bff017 	ldw	r2,-64(fp)
    aea8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
    aeac:	e0bffb17 	ldw	r2,-20(fp)
}
    aeb0:	e037883a 	mov	sp,fp
    aeb4:	df000017 	ldw	fp,0(sp)
    aeb8:	dec00104 	addi	sp,sp,4
    aebc:	f800283a 	ret

0000aec0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    aec0:	deffeb04 	addi	sp,sp,-84
    aec4:	dfc01415 	stw	ra,80(sp)
    aec8:	df001315 	stw	fp,76(sp)
    aecc:	df001304 	addi	fp,sp,76
    aed0:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    aed4:	e0bffd17 	ldw	r2,-12(fp)
    aed8:	1004803a 	cmplt	r2,r2,zero
    aedc:	1000081e 	bne	r2,zero,af00 <isatty+0x40>
    aee0:	e0bffd17 	ldw	r2,-12(fp)
    aee4:	10800324 	muli	r2,r2,12
    aee8:	1007883a 	mov	r3,r2
    aeec:	00800074 	movhi	r2,1
    aef0:	10898a04 	addi	r2,r2,9768
    aef4:	1887883a 	add	r3,r3,r2
    aef8:	e0ffff15 	stw	r3,-4(fp)
    aefc:	00000106 	br	af04 <isatty+0x44>
    af00:	e03fff15 	stw	zero,-4(fp)
    af04:	e0bfff17 	ldw	r2,-4(fp)
    af08:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
    af0c:	e0bfed17 	ldw	r2,-76(fp)
    af10:	1005003a 	cmpeq	r2,r2,zero
    af14:	10000f1e 	bne	r2,zero,af54 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    af18:	e0bfed17 	ldw	r2,-76(fp)
    af1c:	10800017 	ldw	r2,0(r2)
    af20:	10800817 	ldw	r2,32(r2)
    af24:	1004c03a 	cmpne	r2,r2,zero
    af28:	1000031e 	bne	r2,zero,af38 <isatty+0x78>
    {
      return 1;
    af2c:	00800044 	movi	r2,1
    af30:	e0bffe15 	stw	r2,-8(fp)
    af34:	00000c06 	br	af68 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    af38:	e17fee04 	addi	r5,fp,-72
    af3c:	e13ffd17 	ldw	r4,-12(fp)
    af40:	000abcc0 	call	abcc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    af44:	e0bfef17 	ldw	r2,-68(fp)
    af48:	10880020 	cmpeqi	r2,r2,8192
    af4c:	e0bffe15 	stw	r2,-8(fp)
    af50:	00000506 	br	af68 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    af54:	000af800 	call	af80 <alt_get_errno>
    af58:	1007883a 	mov	r3,r2
    af5c:	00801444 	movi	r2,81
    af60:	18800015 	stw	r2,0(r3)
    return 0;
    af64:	e03ffe15 	stw	zero,-8(fp)
    af68:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    af6c:	e037883a 	mov	sp,fp
    af70:	dfc00117 	ldw	ra,4(sp)
    af74:	df000017 	ldw	fp,0(sp)
    af78:	dec00204 	addi	sp,sp,8
    af7c:	f800283a 	ret

0000af80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    af80:	defffd04 	addi	sp,sp,-12
    af84:	dfc00215 	stw	ra,8(sp)
    af88:	df000115 	stw	fp,4(sp)
    af8c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    af90:	00800074 	movhi	r2,1
    af94:	108efa04 	addi	r2,r2,15336
    af98:	10800017 	ldw	r2,0(r2)
    af9c:	1005003a 	cmpeq	r2,r2,zero
    afa0:	1000061e 	bne	r2,zero,afbc <alt_get_errno+0x3c>
    afa4:	00800074 	movhi	r2,1
    afa8:	108efa04 	addi	r2,r2,15336
    afac:	10800017 	ldw	r2,0(r2)
    afb0:	103ee83a 	callr	r2
    afb4:	e0bfff15 	stw	r2,-4(fp)
    afb8:	00000306 	br	afc8 <alt_get_errno+0x48>
    afbc:	00800074 	movhi	r2,1
    afc0:	10968e04 	addi	r2,r2,23096
    afc4:	e0bfff15 	stw	r2,-4(fp)
    afc8:	e0bfff17 	ldw	r2,-4(fp)
}
    afcc:	e037883a 	mov	sp,fp
    afd0:	dfc00117 	ldw	ra,4(sp)
    afd4:	df000017 	ldw	fp,0(sp)
    afd8:	dec00204 	addi	sp,sp,8
    afdc:	f800283a 	ret

0000afe0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    afe0:	defffe04 	addi	sp,sp,-8
    afe4:	dfc00115 	stw	ra,4(sp)
    afe8:	df000015 	stw	fp,0(sp)
    afec:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    aff0:	01000074 	movhi	r4,1
    aff4:	210eff04 	addi	r4,r4,15356
    aff8:	01400074 	movhi	r5,1
    affc:	29477b04 	addi	r5,r5,7660
    b000:	01800074 	movhi	r6,1
    b004:	318eff04 	addi	r6,r6,15356
    b008:	000b0600 	call	b060 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    b00c:	01000034 	movhi	r4,0
    b010:	21000804 	addi	r4,r4,32
    b014:	01400034 	movhi	r5,0
    b018:	29400804 	addi	r5,r5,32
    b01c:	01800034 	movhi	r6,0
    b020:	31806e04 	addi	r6,r6,440
    b024:	000b0600 	call	b060 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    b028:	01000074 	movhi	r4,1
    b02c:	21058204 	addi	r4,r4,5640
    b030:	01400074 	movhi	r5,1
    b034:	29458204 	addi	r5,r5,5640
    b038:	01800074 	movhi	r6,1
    b03c:	31877b04 	addi	r6,r6,7660
    b040:	000b0600 	call	b060 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    b044:	00102800 	call	10280 <alt_dcache_flush_all>
  alt_icache_flush_all();
    b048:	001050c0 	call	1050c <alt_icache_flush_all>
}
    b04c:	e037883a 	mov	sp,fp
    b050:	dfc00117 	ldw	ra,4(sp)
    b054:	df000017 	ldw	fp,0(sp)
    b058:	dec00204 	addi	sp,sp,8
    b05c:	f800283a 	ret

0000b060 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    b060:	defffc04 	addi	sp,sp,-16
    b064:	df000315 	stw	fp,12(sp)
    b068:	df000304 	addi	fp,sp,12
    b06c:	e13ffd15 	stw	r4,-12(fp)
    b070:	e17ffe15 	stw	r5,-8(fp)
    b074:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    b078:	e0fffe17 	ldw	r3,-8(fp)
    b07c:	e0bffd17 	ldw	r2,-12(fp)
    b080:	18800e26 	beq	r3,r2,b0bc <alt_load_section+0x5c>
  {
    while( to != end )
    b084:	00000a06 	br	b0b0 <alt_load_section+0x50>
    {
      *to++ = *from++;
    b088:	e0bffd17 	ldw	r2,-12(fp)
    b08c:	10c00017 	ldw	r3,0(r2)
    b090:	e0bffe17 	ldw	r2,-8(fp)
    b094:	10c00015 	stw	r3,0(r2)
    b098:	e0bffe17 	ldw	r2,-8(fp)
    b09c:	10800104 	addi	r2,r2,4
    b0a0:	e0bffe15 	stw	r2,-8(fp)
    b0a4:	e0bffd17 	ldw	r2,-12(fp)
    b0a8:	10800104 	addi	r2,r2,4
    b0ac:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    b0b0:	e0fffe17 	ldw	r3,-8(fp)
    b0b4:	e0bfff17 	ldw	r2,-4(fp)
    b0b8:	18bff31e 	bne	r3,r2,b088 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    b0bc:	e037883a 	mov	sp,fp
    b0c0:	df000017 	ldw	fp,0(sp)
    b0c4:	dec00104 	addi	sp,sp,4
    b0c8:	f800283a 	ret

0000b0cc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    b0cc:	defff804 	addi	sp,sp,-32
    b0d0:	dfc00715 	stw	ra,28(sp)
    b0d4:	df000615 	stw	fp,24(sp)
    b0d8:	df000604 	addi	fp,sp,24
    b0dc:	e13ffc15 	stw	r4,-16(fp)
    b0e0:	e17ffd15 	stw	r5,-12(fp)
    b0e4:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    b0e8:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b0ec:	e0bffc17 	ldw	r2,-16(fp)
    b0f0:	1004803a 	cmplt	r2,r2,zero
    b0f4:	1000081e 	bne	r2,zero,b118 <lseek+0x4c>
    b0f8:	e0bffc17 	ldw	r2,-16(fp)
    b0fc:	10800324 	muli	r2,r2,12
    b100:	1007883a 	mov	r3,r2
    b104:	00800074 	movhi	r2,1
    b108:	10898a04 	addi	r2,r2,9768
    b10c:	1887883a 	add	r3,r3,r2
    b110:	e0ffff15 	stw	r3,-4(fp)
    b114:	00000106 	br	b11c <lseek+0x50>
    b118:	e03fff15 	stw	zero,-4(fp)
    b11c:	e0bfff17 	ldw	r2,-4(fp)
    b120:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
    b124:	e0bffb17 	ldw	r2,-20(fp)
    b128:	1005003a 	cmpeq	r2,r2,zero
    b12c:	1000111e 	bne	r2,zero,b174 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    b130:	e0bffb17 	ldw	r2,-20(fp)
    b134:	10800017 	ldw	r2,0(r2)
    b138:	10800717 	ldw	r2,28(r2)
    b13c:	1005003a 	cmpeq	r2,r2,zero
    b140:	1000091e 	bne	r2,zero,b168 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    b144:	e0bffb17 	ldw	r2,-20(fp)
    b148:	10800017 	ldw	r2,0(r2)
    b14c:	10800717 	ldw	r2,28(r2)
    b150:	e13ffb17 	ldw	r4,-20(fp)
    b154:	e17ffd17 	ldw	r5,-12(fp)
    b158:	e1bffe17 	ldw	r6,-8(fp)
    b15c:	103ee83a 	callr	r2
    b160:	e0bffa15 	stw	r2,-24(fp)
    b164:	00000506 	br	b17c <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    b168:	00bfde84 	movi	r2,-134
    b16c:	e0bffa15 	stw	r2,-24(fp)
    b170:	00000206 	br	b17c <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
    b174:	00bfebc4 	movi	r2,-81
    b178:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
    b17c:	e0bffa17 	ldw	r2,-24(fp)
    b180:	1004403a 	cmpge	r2,r2,zero
    b184:	1000071e 	bne	r2,zero,b1a4 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
    b188:	000b1bc0 	call	b1bc <alt_get_errno>
    b18c:	1007883a 	mov	r3,r2
    b190:	e0bffa17 	ldw	r2,-24(fp)
    b194:	0085c83a 	sub	r2,zero,r2
    b198:	18800015 	stw	r2,0(r3)
    rc = -1;
    b19c:	00bfffc4 	movi	r2,-1
    b1a0:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
    b1a4:	e0bffa17 	ldw	r2,-24(fp)
}
    b1a8:	e037883a 	mov	sp,fp
    b1ac:	dfc00117 	ldw	ra,4(sp)
    b1b0:	df000017 	ldw	fp,0(sp)
    b1b4:	dec00204 	addi	sp,sp,8
    b1b8:	f800283a 	ret

0000b1bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b1bc:	defffd04 	addi	sp,sp,-12
    b1c0:	dfc00215 	stw	ra,8(sp)
    b1c4:	df000115 	stw	fp,4(sp)
    b1c8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b1cc:	00800074 	movhi	r2,1
    b1d0:	108efa04 	addi	r2,r2,15336
    b1d4:	10800017 	ldw	r2,0(r2)
    b1d8:	1005003a 	cmpeq	r2,r2,zero
    b1dc:	1000061e 	bne	r2,zero,b1f8 <alt_get_errno+0x3c>
    b1e0:	00800074 	movhi	r2,1
    b1e4:	108efa04 	addi	r2,r2,15336
    b1e8:	10800017 	ldw	r2,0(r2)
    b1ec:	103ee83a 	callr	r2
    b1f0:	e0bfff15 	stw	r2,-4(fp)
    b1f4:	00000306 	br	b204 <alt_get_errno+0x48>
    b1f8:	00800074 	movhi	r2,1
    b1fc:	10968e04 	addi	r2,r2,23096
    b200:	e0bfff15 	stw	r2,-4(fp)
    b204:	e0bfff17 	ldw	r2,-4(fp)
}
    b208:	e037883a 	mov	sp,fp
    b20c:	dfc00117 	ldw	ra,4(sp)
    b210:	df000017 	ldw	fp,0(sp)
    b214:	dec00204 	addi	sp,sp,8
    b218:	f800283a 	ret

0000b21c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    b21c:	defffd04 	addi	sp,sp,-12
    b220:	dfc00215 	stw	ra,8(sp)
    b224:	df000115 	stw	fp,4(sp)
    b228:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    b22c:	0009883a 	mov	r4,zero
    b230:	000b97c0 	call	b97c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    b234:	000b9b00 	call	b9b0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    b238:	01000074 	movhi	r4,1
    b23c:	21071104 	addi	r4,r4,7236
    b240:	01400074 	movhi	r5,1
    b244:	29471104 	addi	r5,r5,7236
    b248:	01800074 	movhi	r6,1
    b24c:	31871104 	addi	r6,r6,7236
    b250:	00106000 	call	10600 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    b254:	00103b00 	call	103b0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    b258:	01000074 	movhi	r4,1
    b25c:	21010504 	addi	r4,r4,1044
    b260:	0010ec40 	call	10ec4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    b264:	d127a117 	ldw	r4,-24956(gp)
    b268:	d167a217 	ldw	r5,-24952(gp)
    b26c:	d1a7a317 	ldw	r6,-24948(gp)
    b270:	000058c0 	call	58c <main>
    b274:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    b278:	01000044 	movi	r4,1
    b27c:	000aa440 	call	aa44 <close>
  exit (result);
    b280:	e13fff17 	ldw	r4,-4(fp)
    b284:	0010ed80 	call	10ed8 <exit>

0000b288 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    b288:	defffe04 	addi	sp,sp,-8
    b28c:	df000115 	stw	fp,4(sp)
    b290:	df000104 	addi	fp,sp,4
    b294:	e13fff15 	stw	r4,-4(fp)
}
    b298:	e037883a 	mov	sp,fp
    b29c:	df000017 	ldw	fp,0(sp)
    b2a0:	dec00104 	addi	sp,sp,4
    b2a4:	f800283a 	ret

0000b2a8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    b2a8:	defffe04 	addi	sp,sp,-8
    b2ac:	df000115 	stw	fp,4(sp)
    b2b0:	df000104 	addi	fp,sp,4
    b2b4:	e13fff15 	stw	r4,-4(fp)
}
    b2b8:	e037883a 	mov	sp,fp
    b2bc:	df000017 	ldw	fp,0(sp)
    b2c0:	dec00104 	addi	sp,sp,4
    b2c4:	f800283a 	ret

0000b2c8 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    b2c8:	defff204 	addi	sp,sp,-56
    b2cc:	dfc00a15 	stw	ra,40(sp)
    b2d0:	df000915 	stw	fp,36(sp)
    b2d4:	df000904 	addi	fp,sp,36
    b2d8:	e1400215 	stw	r5,8(fp)
    b2dc:	e1800315 	stw	r6,12(fp)
    b2e0:	e1c00415 	stw	r7,16(fp)
    b2e4:	e13fff15 	stw	r4,-4(fp)
	va_list args;
	va_start(args, fmt);
    b2e8:	e0800204 	addi	r2,fp,8
    b2ec:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    b2f0:	e0bfff17 	ldw	r2,-4(fp)
    b2f4:	e0bffd15 	stw	r2,-12(fp)
    while ((c = *w++) != 0)
    b2f8:	00007806 	br	b4dc <alt_printf+0x214>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    b2fc:	e0bffc07 	ldb	r2,-16(fp)
    b300:	10800960 	cmpeqi	r2,r2,37
    b304:	1000031e 	bne	r2,zero,b314 <alt_printf+0x4c>
        {
            alt_putchar(c);
    b308:	e13ffc07 	ldb	r4,-16(fp)
    b30c:	000b5200 	call	b520 <alt_putchar>
    b310:	00007206 	br	b4dc <alt_printf+0x214>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
    b314:	e0bffd17 	ldw	r2,-12(fp)
    b318:	10800003 	ldbu	r2,0(r2)
    b31c:	e0bffc05 	stb	r2,-16(fp)
    b320:	e0bffc07 	ldb	r2,-16(fp)
    b324:	1004c03a 	cmpne	r2,r2,zero
    b328:	1007883a 	mov	r3,r2
    b32c:	e0bffd17 	ldw	r2,-12(fp)
    b330:	10800044 	addi	r2,r2,1
    b334:	e0bffd15 	stw	r2,-12(fp)
    b338:	18803fcc 	andi	r2,r3,255
    b33c:	1005003a 	cmpeq	r2,r2,zero
    b340:	1000721e 	bne	r2,zero,b50c <alt_printf+0x244>
            {
                if (c == '%')
    b344:	e0bffc07 	ldb	r2,-16(fp)
    b348:	10800958 	cmpnei	r2,r2,37
    b34c:	1000031e 	bne	r2,zero,b35c <alt_printf+0x94>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
    b350:	e13ffc07 	ldb	r4,-16(fp)
    b354:	000b5200 	call	b520 <alt_putchar>
    b358:	00006006 	br	b4dc <alt_printf+0x214>
                } 
                else if (c == 'c')
    b35c:	e0bffc07 	ldb	r2,-16(fp)
    b360:	108018d8 	cmpnei	r2,r2,99
    b364:	1000091e 	bne	r2,zero,b38c <alt_printf+0xc4>
                {
                    int v = va_arg(args, int);
    b368:	e0fffe17 	ldw	r3,-8(fp)
    b36c:	18800104 	addi	r2,r3,4
    b370:	e0bffe15 	stw	r2,-8(fp)
    b374:	1805883a 	mov	r2,r3
    b378:	10800017 	ldw	r2,0(r2)
    b37c:	e0bffb15 	stw	r2,-20(fp)
                    alt_putchar(v);
    b380:	e13ffb17 	ldw	r4,-20(fp)
    b384:	000b5200 	call	b520 <alt_putchar>
    b388:	00005406 	br	b4dc <alt_printf+0x214>
                }
                else if (c == 'x')
    b38c:	e0bffc07 	ldb	r2,-16(fp)
    b390:	10801e18 	cmpnei	r2,r2,120
    b394:	1000371e 	bne	r2,zero,b474 <alt_printf+0x1ac>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
    b398:	e0fffe17 	ldw	r3,-8(fp)
    b39c:	18800104 	addi	r2,r3,4
    b3a0:	e0bffe15 	stw	r2,-8(fp)
    b3a4:	1805883a 	mov	r2,r3
    b3a8:	10800017 	ldw	r2,0(r2)
    b3ac:	e0bffa15 	stw	r2,-24(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    b3b0:	e0bffa17 	ldw	r2,-24(fp)
    b3b4:	1004c03a 	cmpne	r2,r2,zero
    b3b8:	1000031e 	bne	r2,zero,b3c8 <alt_printf+0x100>
                    {
                        alt_putchar('0');
    b3bc:	01000c04 	movi	r4,48
    b3c0:	000b5200 	call	b520 <alt_putchar>
                        continue;
    b3c4:	00004506 	br	b4dc <alt_printf+0x214>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
    b3c8:	00800704 	movi	r2,28
    b3cc:	e0bff815 	stw	r2,-32(fp)
                    while (!(v & (0xF << digit_shift)))
    b3d0:	00000306 	br	b3e0 <alt_printf+0x118>
                        digit_shift -= 4;
    b3d4:	e0bff817 	ldw	r2,-32(fp)
    b3d8:	10bfff04 	addi	r2,r2,-4
    b3dc:	e0bff815 	stw	r2,-32(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    b3e0:	00c003c4 	movi	r3,15
    b3e4:	e0bff817 	ldw	r2,-32(fp)
    b3e8:	1884983a 	sll	r2,r3,r2
    b3ec:	1007883a 	mov	r3,r2
    b3f0:	e0bffa17 	ldw	r2,-24(fp)
    b3f4:	1884703a 	and	r2,r3,r2
    b3f8:	1005003a 	cmpeq	r2,r2,zero
    b3fc:	103ff51e 	bne	r2,zero,b3d4 <alt_printf+0x10c>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    b400:	00001806 	br	b464 <alt_printf+0x19c>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    b404:	00c003c4 	movi	r3,15
    b408:	e0bff817 	ldw	r2,-32(fp)
    b40c:	1884983a 	sll	r2,r3,r2
    b410:	1007883a 	mov	r3,r2
    b414:	e0bffa17 	ldw	r2,-24(fp)
    b418:	1886703a 	and	r3,r3,r2
    b41c:	e0bff817 	ldw	r2,-32(fp)
    b420:	1884d83a 	srl	r2,r3,r2
    b424:	e0bff915 	stw	r2,-28(fp)
                        if (digit <= 9)
    b428:	e0bff917 	ldw	r2,-28(fp)
    b42c:	108002a8 	cmpgeui	r2,r2,10
    b430:	1000041e 	bne	r2,zero,b444 <alt_printf+0x17c>
                            c = '0' + digit;
    b434:	e0bff917 	ldw	r2,-28(fp)
    b438:	10800c04 	addi	r2,r2,48
    b43c:	e0bffc05 	stb	r2,-16(fp)
    b440:	00000306 	br	b450 <alt_printf+0x188>
                        else
                            c = 'a' + digit - 10;
    b444:	e0bff917 	ldw	r2,-28(fp)
    b448:	108015c4 	addi	r2,r2,87
    b44c:	e0bffc05 	stb	r2,-16(fp)
                        alt_putchar(c);
    b450:	e13ffc07 	ldb	r4,-16(fp)
    b454:	000b5200 	call	b520 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    b458:	e0bff817 	ldw	r2,-32(fp)
    b45c:	10bfff04 	addi	r2,r2,-4
    b460:	e0bff815 	stw	r2,-32(fp)
    b464:	e0bff817 	ldw	r2,-32(fp)
    b468:	1004403a 	cmpge	r2,r2,zero
    b46c:	103fe51e 	bne	r2,zero,b404 <alt_printf+0x13c>
    b470:	00001a06 	br	b4dc <alt_printf+0x214>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    b474:	e0bffc07 	ldb	r2,-16(fp)
    b478:	10801cd8 	cmpnei	r2,r2,115
    b47c:	1000171e 	bne	r2,zero,b4dc <alt_printf+0x214>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
    b480:	e0fffe17 	ldw	r3,-8(fp)
    b484:	18800104 	addi	r2,r3,4
    b488:	e0bffe15 	stw	r2,-8(fp)
    b48c:	1805883a 	mov	r2,r3
    b490:	10800017 	ldw	r2,0(r2)
    b494:	e0bff715 	stw	r2,-36(fp)

                    while(*s)
    b498:	00000906 	br	b4c0 <alt_printf+0x1f8>
                      alt_putchar(*s++);
    b49c:	e0bff717 	ldw	r2,-36(fp)
    b4a0:	10800003 	ldbu	r2,0(r2)
    b4a4:	11003fcc 	andi	r4,r2,255
    b4a8:	2100201c 	xori	r4,r4,128
    b4ac:	213fe004 	addi	r4,r4,-128
    b4b0:	e0bff717 	ldw	r2,-36(fp)
    b4b4:	10800044 	addi	r2,r2,1
    b4b8:	e0bff715 	stw	r2,-36(fp)
    b4bc:	000b5200 	call	b520 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
    b4c0:	e0bff717 	ldw	r2,-36(fp)
    b4c4:	10800003 	ldbu	r2,0(r2)
    b4c8:	10803fcc 	andi	r2,r2,255
    b4cc:	1080201c 	xori	r2,r2,128
    b4d0:	10bfe004 	addi	r2,r2,-128
    b4d4:	1004c03a 	cmpne	r2,r2,zero
    b4d8:	103ff01e 	bne	r2,zero,b49c <alt_printf+0x1d4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    b4dc:	e0bffd17 	ldw	r2,-12(fp)
    b4e0:	10800003 	ldbu	r2,0(r2)
    b4e4:	e0bffc05 	stb	r2,-16(fp)
    b4e8:	e0bffc07 	ldb	r2,-16(fp)
    b4ec:	1004c03a 	cmpne	r2,r2,zero
    b4f0:	1007883a 	mov	r3,r2
    b4f4:	e0bffd17 	ldw	r2,-12(fp)
    b4f8:	10800044 	addi	r2,r2,1
    b4fc:	e0bffd15 	stw	r2,-12(fp)
    b500:	18803fcc 	andi	r2,r3,255
    b504:	1004c03a 	cmpne	r2,r2,zero
    b508:	103f7c1e 	bne	r2,zero,b2fc <alt_printf+0x34>
            {
                break;
            }
        }
    }
}
    b50c:	e037883a 	mov	sp,fp
    b510:	dfc00117 	ldw	ra,4(sp)
    b514:	df000017 	ldw	fp,0(sp)
    b518:	dec00504 	addi	sp,sp,20
    b51c:	f800283a 	ret

0000b520 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    b520:	defffd04 	addi	sp,sp,-12
    b524:	dfc00215 	stw	ra,8(sp)
    b528:	df000115 	stw	fp,4(sp)
    b52c:	df000104 	addi	fp,sp,4
    b530:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
    b534:	00800074 	movhi	r2,1
    b538:	108eef04 	addi	r2,r2,15292
    b53c:	10800017 	ldw	r2,0(r2)
    b540:	11400217 	ldw	r5,8(r2)
    b544:	e13fff17 	ldw	r4,-4(fp)
    b548:	0010f840 	call	10f84 <putc>
#endif
}
    b54c:	e037883a 	mov	sp,fp
    b550:	dfc00117 	ldw	ra,4(sp)
    b554:	df000017 	ldw	fp,0(sp)
    b558:	dec00204 	addi	sp,sp,8
    b55c:	f800283a 	ret

0000b560 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    b560:	defff704 	addi	sp,sp,-36
    b564:	dfc00815 	stw	ra,32(sp)
    b568:	df000715 	stw	fp,28(sp)
    b56c:	df000704 	addi	fp,sp,28
    b570:	e13ffb15 	stw	r4,-20(fp)
    b574:	e17ffc15 	stw	r5,-16(fp)
    b578:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b57c:	e0bffb17 	ldw	r2,-20(fp)
    b580:	1004803a 	cmplt	r2,r2,zero
    b584:	1000081e 	bne	r2,zero,b5a8 <read+0x48>
    b588:	e0bffb17 	ldw	r2,-20(fp)
    b58c:	10800324 	muli	r2,r2,12
    b590:	1007883a 	mov	r3,r2
    b594:	00800074 	movhi	r2,1
    b598:	10898a04 	addi	r2,r2,9768
    b59c:	1887883a 	add	r3,r3,r2
    b5a0:	e0ffff15 	stw	r3,-4(fp)
    b5a4:	00000106 	br	b5ac <read+0x4c>
    b5a8:	e03fff15 	stw	zero,-4(fp)
    b5ac:	e0bfff17 	ldw	r2,-4(fp)
    b5b0:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    b5b4:	e0bffa17 	ldw	r2,-24(fp)
    b5b8:	1005003a 	cmpeq	r2,r2,zero
    b5bc:	1000241e 	bne	r2,zero,b650 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    b5c0:	e0bffa17 	ldw	r2,-24(fp)
    b5c4:	10800217 	ldw	r2,8(r2)
    b5c8:	108000cc 	andi	r2,r2,3
    b5cc:	10800060 	cmpeqi	r2,r2,1
    b5d0:	10001a1e 	bne	r2,zero,b63c <read+0xdc>
    b5d4:	e0bffa17 	ldw	r2,-24(fp)
    b5d8:	10800017 	ldw	r2,0(r2)
    b5dc:	10800517 	ldw	r2,20(r2)
    b5e0:	1005003a 	cmpeq	r2,r2,zero
    b5e4:	1000151e 	bne	r2,zero,b63c <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    b5e8:	e0bffa17 	ldw	r2,-24(fp)
    b5ec:	10800017 	ldw	r2,0(r2)
    b5f0:	10800517 	ldw	r2,20(r2)
    b5f4:	e17ffc17 	ldw	r5,-16(fp)
    b5f8:	e1bffd17 	ldw	r6,-12(fp)
    b5fc:	e13ffa17 	ldw	r4,-24(fp)
    b600:	103ee83a 	callr	r2
    b604:	e0bff915 	stw	r2,-28(fp)
    b608:	e0bff917 	ldw	r2,-28(fp)
    b60c:	1004403a 	cmpge	r2,r2,zero
    b610:	1000071e 	bne	r2,zero,b630 <read+0xd0>
        {
          ALT_ERRNO = -rval;
    b614:	000b6800 	call	b680 <alt_get_errno>
    b618:	e0fff917 	ldw	r3,-28(fp)
    b61c:	00c7c83a 	sub	r3,zero,r3
    b620:	10c00015 	stw	r3,0(r2)
          return -1;
    b624:	00bfffc4 	movi	r2,-1
    b628:	e0bffe15 	stw	r2,-8(fp)
    b62c:	00000e06 	br	b668 <read+0x108>
        }
        return rval;
    b630:	e0bff917 	ldw	r2,-28(fp)
    b634:	e0bffe15 	stw	r2,-8(fp)
    b638:	00000b06 	br	b668 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
    b63c:	000b6800 	call	b680 <alt_get_errno>
    b640:	1007883a 	mov	r3,r2
    b644:	00800344 	movi	r2,13
    b648:	18800015 	stw	r2,0(r3)
    b64c:	00000406 	br	b660 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    b650:	000b6800 	call	b680 <alt_get_errno>
    b654:	1007883a 	mov	r3,r2
    b658:	00801444 	movi	r2,81
    b65c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    b660:	00bfffc4 	movi	r2,-1
    b664:	e0bffe15 	stw	r2,-8(fp)
    b668:	e0bffe17 	ldw	r2,-8(fp)
}
    b66c:	e037883a 	mov	sp,fp
    b670:	dfc00117 	ldw	ra,4(sp)
    b674:	df000017 	ldw	fp,0(sp)
    b678:	dec00204 	addi	sp,sp,8
    b67c:	f800283a 	ret

0000b680 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b680:	defffd04 	addi	sp,sp,-12
    b684:	dfc00215 	stw	ra,8(sp)
    b688:	df000115 	stw	fp,4(sp)
    b68c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b690:	00800074 	movhi	r2,1
    b694:	108efa04 	addi	r2,r2,15336
    b698:	10800017 	ldw	r2,0(r2)
    b69c:	1005003a 	cmpeq	r2,r2,zero
    b6a0:	1000061e 	bne	r2,zero,b6bc <alt_get_errno+0x3c>
    b6a4:	00800074 	movhi	r2,1
    b6a8:	108efa04 	addi	r2,r2,15336
    b6ac:	10800017 	ldw	r2,0(r2)
    b6b0:	103ee83a 	callr	r2
    b6b4:	e0bfff15 	stw	r2,-4(fp)
    b6b8:	00000306 	br	b6c8 <alt_get_errno+0x48>
    b6bc:	00800074 	movhi	r2,1
    b6c0:	10968e04 	addi	r2,r2,23096
    b6c4:	e0bfff15 	stw	r2,-4(fp)
    b6c8:	e0bfff17 	ldw	r2,-4(fp)
}
    b6cc:	e037883a 	mov	sp,fp
    b6d0:	dfc00117 	ldw	ra,4(sp)
    b6d4:	df000017 	ldw	fp,0(sp)
    b6d8:	dec00204 	addi	sp,sp,8
    b6dc:	f800283a 	ret

0000b6e0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    b6e0:	defffe04 	addi	sp,sp,-8
    b6e4:	df000115 	stw	fp,4(sp)
    b6e8:	df000104 	addi	fp,sp,4
    b6ec:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    b6f0:	e0bfff17 	ldw	r2,-4(fp)
    b6f4:	108000d0 	cmplti	r2,r2,3
    b6f8:	10000d1e 	bne	r2,zero,b730 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    b6fc:	e0bfff17 	ldw	r2,-4(fp)
    b700:	00c00074 	movhi	r3,1
    b704:	18c98a04 	addi	r3,r3,9768
    b708:	10800324 	muli	r2,r2,12
    b70c:	10c5883a 	add	r2,r2,r3
    b710:	10800204 	addi	r2,r2,8
    b714:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    b718:	e0bfff17 	ldw	r2,-4(fp)
    b71c:	00c00074 	movhi	r3,1
    b720:	18c98a04 	addi	r3,r3,9768
    b724:	10800324 	muli	r2,r2,12
    b728:	10c5883a 	add	r2,r2,r3
    b72c:	10000015 	stw	zero,0(r2)
  }
}
    b730:	e037883a 	mov	sp,fp
    b734:	df000017 	ldw	fp,0(sp)
    b738:	dec00104 	addi	sp,sp,4
    b73c:	f800283a 	ret

0000b740 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    b740:	defff804 	addi	sp,sp,-32
    b744:	df000715 	stw	fp,28(sp)
    b748:	df000704 	addi	fp,sp,28
    b74c:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b750:	0005303a 	rdctl	r2,status
    b754:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b758:	e0fffb17 	ldw	r3,-20(fp)
    b75c:	00bfff84 	movi	r2,-2
    b760:	1884703a 	and	r2,r3,r2
    b764:	1001703a 	wrctl	status,r2
  
  return context;
    b768:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    b76c:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    b770:	d0a00d17 	ldw	r2,-32716(gp)
    b774:	10c000c4 	addi	r3,r2,3
    b778:	00bfff04 	movi	r2,-4
    b77c:	1884703a 	and	r2,r3,r2
    b780:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    b784:	d0e00d17 	ldw	r3,-32716(gp)
    b788:	e0bffe17 	ldw	r2,-8(fp)
    b78c:	1887883a 	add	r3,r3,r2
    b790:	00802034 	movhi	r2,128
    b794:	10800004 	addi	r2,r2,0
    b798:	10c0072e 	bgeu	r2,r3,b7b8 <sbrk+0x78>
    b79c:	e0bffd17 	ldw	r2,-12(fp)
    b7a0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b7a4:	e0bffa17 	ldw	r2,-24(fp)
    b7a8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    b7ac:	00bfffc4 	movi	r2,-1
    b7b0:	e0bfff15 	stw	r2,-4(fp)
    b7b4:	00000c06 	br	b7e8 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
    b7b8:	d0a00d17 	ldw	r2,-32716(gp)
    b7bc:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
    b7c0:	d0e00d17 	ldw	r3,-32716(gp)
    b7c4:	e0bffe17 	ldw	r2,-8(fp)
    b7c8:	1885883a 	add	r2,r3,r2
    b7cc:	d0a00d15 	stw	r2,-32716(gp)
    b7d0:	e0bffd17 	ldw	r2,-12(fp)
    b7d4:	e0bff915 	stw	r2,-28(fp)
    b7d8:	e0bff917 	ldw	r2,-28(fp)
    b7dc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    b7e0:	e0bffc17 	ldw	r2,-16(fp)
    b7e4:	e0bfff15 	stw	r2,-4(fp)
    b7e8:	e0bfff17 	ldw	r2,-4(fp)
} 
    b7ec:	e037883a 	mov	sp,fp
    b7f0:	df000017 	ldw	fp,0(sp)
    b7f4:	dec00104 	addi	sp,sp,4
    b7f8:	f800283a 	ret

0000b7fc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    b7fc:	defff704 	addi	sp,sp,-36
    b800:	dfc00815 	stw	ra,32(sp)
    b804:	df000715 	stw	fp,28(sp)
    b808:	df000704 	addi	fp,sp,28
    b80c:	e13ffb15 	stw	r4,-20(fp)
    b810:	e17ffc15 	stw	r5,-16(fp)
    b814:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b818:	e0bffb17 	ldw	r2,-20(fp)
    b81c:	1004803a 	cmplt	r2,r2,zero
    b820:	1000081e 	bne	r2,zero,b844 <write+0x48>
    b824:	e0bffb17 	ldw	r2,-20(fp)
    b828:	10800324 	muli	r2,r2,12
    b82c:	1007883a 	mov	r3,r2
    b830:	00800074 	movhi	r2,1
    b834:	10898a04 	addi	r2,r2,9768
    b838:	1887883a 	add	r3,r3,r2
    b83c:	e0ffff15 	stw	r3,-4(fp)
    b840:	00000106 	br	b848 <write+0x4c>
    b844:	e03fff15 	stw	zero,-4(fp)
    b848:	e0bfff17 	ldw	r2,-4(fp)
    b84c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    b850:	e0bffa17 	ldw	r2,-24(fp)
    b854:	1005003a 	cmpeq	r2,r2,zero
    b858:	1000241e 	bne	r2,zero,b8ec <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    b85c:	e0bffa17 	ldw	r2,-24(fp)
    b860:	10800217 	ldw	r2,8(r2)
    b864:	108000cc 	andi	r2,r2,3
    b868:	1005003a 	cmpeq	r2,r2,zero
    b86c:	10001a1e 	bne	r2,zero,b8d8 <write+0xdc>
    b870:	e0bffa17 	ldw	r2,-24(fp)
    b874:	10800017 	ldw	r2,0(r2)
    b878:	10800617 	ldw	r2,24(r2)
    b87c:	1005003a 	cmpeq	r2,r2,zero
    b880:	1000151e 	bne	r2,zero,b8d8 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    b884:	e0bffa17 	ldw	r2,-24(fp)
    b888:	10800017 	ldw	r2,0(r2)
    b88c:	10800617 	ldw	r2,24(r2)
    b890:	e17ffc17 	ldw	r5,-16(fp)
    b894:	e1bffd17 	ldw	r6,-12(fp)
    b898:	e13ffa17 	ldw	r4,-24(fp)
    b89c:	103ee83a 	callr	r2
    b8a0:	e0bff915 	stw	r2,-28(fp)
    b8a4:	e0bff917 	ldw	r2,-28(fp)
    b8a8:	1004403a 	cmpge	r2,r2,zero
    b8ac:	1000071e 	bne	r2,zero,b8cc <write+0xd0>
      {
        ALT_ERRNO = -rval;
    b8b0:	000b91c0 	call	b91c <alt_get_errno>
    b8b4:	e0fff917 	ldw	r3,-28(fp)
    b8b8:	00c7c83a 	sub	r3,zero,r3
    b8bc:	10c00015 	stw	r3,0(r2)
        return -1;
    b8c0:	00bfffc4 	movi	r2,-1
    b8c4:	e0bffe15 	stw	r2,-8(fp)
    b8c8:	00000e06 	br	b904 <write+0x108>
      }
      return rval;
    b8cc:	e0bff917 	ldw	r2,-28(fp)
    b8d0:	e0bffe15 	stw	r2,-8(fp)
    b8d4:	00000b06 	br	b904 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
    b8d8:	000b91c0 	call	b91c <alt_get_errno>
    b8dc:	1007883a 	mov	r3,r2
    b8e0:	00800344 	movi	r2,13
    b8e4:	18800015 	stw	r2,0(r3)
    b8e8:	00000406 	br	b8fc <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    b8ec:	000b91c0 	call	b91c <alt_get_errno>
    b8f0:	1007883a 	mov	r3,r2
    b8f4:	00801444 	movi	r2,81
    b8f8:	18800015 	stw	r2,0(r3)
  }
  return -1;
    b8fc:	00bfffc4 	movi	r2,-1
    b900:	e0bffe15 	stw	r2,-8(fp)
    b904:	e0bffe17 	ldw	r2,-8(fp)
}
    b908:	e037883a 	mov	sp,fp
    b90c:	dfc00117 	ldw	ra,4(sp)
    b910:	df000017 	ldw	fp,0(sp)
    b914:	dec00204 	addi	sp,sp,8
    b918:	f800283a 	ret

0000b91c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b91c:	defffd04 	addi	sp,sp,-12
    b920:	dfc00215 	stw	ra,8(sp)
    b924:	df000115 	stw	fp,4(sp)
    b928:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b92c:	00800074 	movhi	r2,1
    b930:	108efa04 	addi	r2,r2,15336
    b934:	10800017 	ldw	r2,0(r2)
    b938:	1005003a 	cmpeq	r2,r2,zero
    b93c:	1000061e 	bne	r2,zero,b958 <alt_get_errno+0x3c>
    b940:	00800074 	movhi	r2,1
    b944:	108efa04 	addi	r2,r2,15336
    b948:	10800017 	ldw	r2,0(r2)
    b94c:	103ee83a 	callr	r2
    b950:	e0bfff15 	stw	r2,-4(fp)
    b954:	00000306 	br	b964 <alt_get_errno+0x48>
    b958:	00800074 	movhi	r2,1
    b95c:	10968e04 	addi	r2,r2,23096
    b960:	e0bfff15 	stw	r2,-4(fp)
    b964:	e0bfff17 	ldw	r2,-4(fp)
}
    b968:	e037883a 	mov	sp,fp
    b96c:	dfc00117 	ldw	ra,4(sp)
    b970:	df000017 	ldw	fp,0(sp)
    b974:	dec00204 	addi	sp,sp,8
    b978:	f800283a 	ret

0000b97c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    b97c:	defffd04 	addi	sp,sp,-12
    b980:	dfc00215 	stw	ra,8(sp)
    b984:	df000115 	stw	fp,4(sp)
    b988:	df000104 	addi	fp,sp,4
    b98c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, CPU);
    b990:	0010b100 	call	10b10 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    b994:	00800044 	movi	r2,1
    b998:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    b99c:	e037883a 	mov	sp,fp
    b9a0:	dfc00117 	ldw	ra,4(sp)
    b9a4:	df000017 	ldw	fp,0(sp)
    b9a8:	dec00204 	addi	sp,sp,8
    b9ac:	f800283a 	ret

0000b9b0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    b9b0:	defffd04 	addi	sp,sp,-12
    b9b4:	dfc00215 	stw	ra,8(sp)
    b9b8:	df000115 	stw	fp,4(sp)
    b9bc:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
    b9c0:	01040034 	movhi	r4,4096
    b9c4:	21080004 	addi	r4,r4,8192
    b9c8:	000b883a 	mov	r5,zero
    b9cc:	000d883a 	mov	r6,zero
    b9d0:	01c00204 	movi	r7,8
    b9d4:	000c9040 	call	c904 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
    b9d8:	01000074 	movhi	r4,1
    b9dc:	2109f404 	addi	r4,r4,10192
    b9e0:	000b883a 	mov	r5,zero
    b9e4:	01800204 	movi	r6,8
    b9e8:	000bf300 	call	bf30 <altera_avalon_jtag_uart_init>
    b9ec:	01000074 	movhi	r4,1
    b9f0:	2109ea04 	addi	r4,r4,10152
    b9f4:	000bdb00 	call	bdb0 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
    b9f8:	01000074 	movhi	r4,1
    b9fc:	210e0204 	addi	r4,r4,14344
    ba00:	000bdb00 	call	bdb0 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO, Audio);
    ba04:	01000074 	movhi	r4,1
    ba08:	210e0e04 	addi	r4,r4,14392
    ba0c:	000bdb00 	call	bdb0 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
    ba10:	01000074 	movhi	r4,1
    ba14:	210e1a04 	addi	r4,r4,14440
    ba18:	000d2480 	call	d248 <alt_up_character_lcd_init>
    ba1c:	01000074 	movhi	r4,1
    ba20:	210e1a04 	addi	r4,r4,14440
    ba24:	000bdb00 	call	bdb0 <alt_dev_reg>
    ALTERA_UP_AVALON_ETHERNET_INIT ( ETHERNET, Ethernet);
    ba28:	01000074 	movhi	r4,1
    ba2c:	210e2504 	addi	r4,r4,14484
    ba30:	000d6c80 	call	d6c8 <alt_up_ethernet_init>
    ba34:	01000074 	movhi	r4,1
    ba38:	210e2504 	addi	r4,r4,14484
    ba3c:	000bdb00 	call	bdb0 <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA_UART, IrDA_UART);
    ba40:	01000074 	movhi	r4,1
    ba44:	210e3404 	addi	r4,r4,14544
    ba48:	000bdb00 	call	bdb0 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP1, Expansion_JP1);
    ba4c:	01000074 	movhi	r4,1
    ba50:	210e3f04 	addi	r4,r4,14588
    ba54:	000bdb00 	call	bdb0 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP2, Expansion_JP2);
    ba58:	01000074 	movhi	r4,1
    ba5c:	210e4a04 	addi	r4,r4,14632
    ba60:	000bdb00 	call	bdb0 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
    ba64:	01000074 	movhi	r4,1
    ba68:	210e5504 	addi	r4,r4,14676
    ba6c:	000bdb00 	call	bdb0 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
    ba70:	01000074 	movhi	r4,1
    ba74:	210e6004 	addi	r4,r4,14720
    ba78:	000bdb00 	call	bdb0 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
    ba7c:	01000074 	movhi	r4,1
    ba80:	210e6b04 	addi	r4,r4,14764
    ba84:	000bdb00 	call	bdb0 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
    ba88:	01000074 	movhi	r4,1
    ba8c:	210e7604 	addi	r4,r4,14808
    ba90:	000bdb00 	call	bdb0 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
    ba94:	01000074 	movhi	r4,1
    ba98:	210e8104 	addi	r4,r4,14852
    ba9c:	000bdb00 	call	bdb0 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
    baa0:	01000074 	movhi	r4,1
    baa4:	210e8c04 	addi	r4,r4,14896
    baa8:	000bdb00 	call	bdb0 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
    baac:	01000074 	movhi	r4,1
    bab0:	210e9704 	addi	r4,r4,14940
    bab4:	000df500 	call	df50 <alt_up_ps2_init>
    bab8:	01000074 	movhi	r4,1
    babc:	210e9704 	addi	r4,r4,14940
    bac0:	000bdb00 	call	bdb0 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
    bac4:	01000074 	movhi	r4,1
    bac8:	210ea504 	addi	r4,r4,14996
    bacc:	000bdb00 	call	bdb0 <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
    bad0:	01000074 	movhi	r4,1
    bad4:	210eb004 	addi	r4,r4,15040
    bad8:	000bdb00 	call	bdb0 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VGA_CHAR_BUFFER, VGA_Char_Buffer);
    badc:	00800074 	movhi	r2,1
    bae0:	108ebd04 	addi	r2,r2,15092
    bae4:	10800a17 	ldw	r2,40(r2)
    bae8:	10800104 	addi	r2,r2,4
    baec:	10800017 	ldw	r2,0(r2)
    baf0:	10ffffcc 	andi	r3,r2,65535
    baf4:	00800074 	movhi	r2,1
    baf8:	108ebd04 	addi	r2,r2,15092
    bafc:	10c00c15 	stw	r3,48(r2)
    bb00:	00800074 	movhi	r2,1
    bb04:	108ebd04 	addi	r2,r2,15092
    bb08:	10800a17 	ldw	r2,40(r2)
    bb0c:	10800104 	addi	r2,r2,4
    bb10:	10800017 	ldw	r2,0(r2)
    bb14:	1005d43a 	srai	r2,r2,16
    bb18:	10ffffcc 	andi	r3,r2,65535
    bb1c:	00800074 	movhi	r2,1
    bb20:	108ebd04 	addi	r2,r2,15092
    bb24:	10c00d15 	stw	r3,52(r2)
    bb28:	00800074 	movhi	r2,1
    bb2c:	108ebd04 	addi	r2,r2,15092
    bb30:	10800c17 	ldw	r2,48(r2)
    bb34:	10801068 	cmpgeui	r2,r2,65
    bb38:	1000081e 	bne	r2,zero,bb5c <alt_sys_init+0x1ac>
    bb3c:	00c00074 	movhi	r3,1
    bb40:	18cebd04 	addi	r3,r3,15092
    bb44:	00800fc4 	movi	r2,63
    bb48:	18800f15 	stw	r2,60(r3)
    bb4c:	00c00074 	movhi	r3,1
    bb50:	18cebd04 	addi	r3,r3,15092
    bb54:	00800184 	movi	r2,6
    bb58:	18801015 	stw	r2,64(r3)
    bb5c:	00800074 	movhi	r2,1
    bb60:	108ebd04 	addi	r2,r2,15092
    bb64:	10800d17 	ldw	r2,52(r2)
    bb68:	10800868 	cmpgeui	r2,r2,33
    bb6c:	1000041e 	bne	r2,zero,bb80 <alt_sys_init+0x1d0>
    bb70:	00c00074 	movhi	r3,1
    bb74:	18cebd04 	addi	r3,r3,15092
    bb78:	008007c4 	movi	r2,31
    bb7c:	18801115 	stw	r2,68(r3)
    bb80:	01000074 	movhi	r4,1
    bb84:	210ebd04 	addi	r4,r4,15092
    bb88:	000e8bc0 	call	e8bc <alt_up_char_buffer_init>
    bb8c:	01000074 	movhi	r4,1
    bb90:	210ebd04 	addi	r4,r4,15092
    bb94:	000bdb00 	call	bdb0 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_PIXEL_BUFFER, VGA_Pixel_Buffer);
    bb98:	00800074 	movhi	r2,1
    bb9c:	108ecf04 	addi	r2,r2,15164
    bba0:	10800a17 	ldw	r2,40(r2)
    bba4:	10800017 	ldw	r2,0(r2)
    bba8:	1007883a 	mov	r3,r2
    bbac:	00800074 	movhi	r2,1
    bbb0:	108ecf04 	addi	r2,r2,15164
    bbb4:	10c00b15 	stw	r3,44(r2)
    bbb8:	00800074 	movhi	r2,1
    bbbc:	108ecf04 	addi	r2,r2,15164
    bbc0:	10800a17 	ldw	r2,40(r2)
    bbc4:	10800104 	addi	r2,r2,4
    bbc8:	10800017 	ldw	r2,0(r2)
    bbcc:	1007883a 	mov	r3,r2
    bbd0:	00800074 	movhi	r2,1
    bbd4:	108ecf04 	addi	r2,r2,15164
    bbd8:	10c00c15 	stw	r3,48(r2)
    bbdc:	00800074 	movhi	r2,1
    bbe0:	108ecf04 	addi	r2,r2,15164
    bbe4:	10800a17 	ldw	r2,40(r2)
    bbe8:	10800204 	addi	r2,r2,8
    bbec:	10800017 	ldw	r2,0(r2)
    bbf0:	10ffffcc 	andi	r3,r2,65535
    bbf4:	00800074 	movhi	r2,1
    bbf8:	108ecf04 	addi	r2,r2,15164
    bbfc:	10c00f15 	stw	r3,60(r2)
    bc00:	00800074 	movhi	r2,1
    bc04:	108ecf04 	addi	r2,r2,15164
    bc08:	10800a17 	ldw	r2,40(r2)
    bc0c:	10800204 	addi	r2,r2,8
    bc10:	10800017 	ldw	r2,0(r2)
    bc14:	1005d43a 	srai	r2,r2,16
    bc18:	10ffffcc 	andi	r3,r2,65535
    bc1c:	00800074 	movhi	r2,1
    bc20:	108ecf04 	addi	r2,r2,15164
    bc24:	10c01015 	stw	r3,64(r2)
    bc28:	00800074 	movhi	r2,1
    bc2c:	108ecf04 	addi	r2,r2,15164
    bc30:	10800a17 	ldw	r2,40(r2)
    bc34:	10800304 	addi	r2,r2,12
    bc38:	10800017 	ldw	r2,0(r2)
    bc3c:	1005d07a 	srai	r2,r2,1
    bc40:	10c0004c 	andi	r3,r2,1
    bc44:	00800074 	movhi	r2,1
    bc48:	108ecf04 	addi	r2,r2,15164
    bc4c:	10c00d15 	stw	r3,52(r2)
    bc50:	00800074 	movhi	r2,1
    bc54:	108ecf04 	addi	r2,r2,15164
    bc58:	10800a17 	ldw	r2,40(r2)
    bc5c:	10800304 	addi	r2,r2,12
    bc60:	10800017 	ldw	r2,0(r2)
    bc64:	1005d13a 	srai	r2,r2,4
    bc68:	10c003cc 	andi	r3,r2,15
    bc6c:	00800074 	movhi	r2,1
    bc70:	108ecf04 	addi	r2,r2,15164
    bc74:	10c00e15 	stw	r3,56(r2)
    bc78:	00800074 	movhi	r2,1
    bc7c:	108ecf04 	addi	r2,r2,15164
    bc80:	10800a17 	ldw	r2,40(r2)
    bc84:	10800304 	addi	r2,r2,12
    bc88:	10800017 	ldw	r2,0(r2)
    bc8c:	1005d43a 	srai	r2,r2,16
    bc90:	1007883a 	mov	r3,r2
    bc94:	00bfffc4 	movi	r2,-1
    bc98:	1884703a 	and	r2,r3,r2
    bc9c:	e0bfff45 	stb	r2,-3(fp)
    bca0:	00800074 	movhi	r2,1
    bca4:	108ecf04 	addi	r2,r2,15164
    bca8:	10800a17 	ldw	r2,40(r2)
    bcac:	10800304 	addi	r2,r2,12
    bcb0:	10800017 	ldw	r2,0(r2)
    bcb4:	1005d63a 	srai	r2,r2,24
    bcb8:	1007883a 	mov	r3,r2
    bcbc:	00bfffc4 	movi	r2,-1
    bcc0:	1884703a 	and	r2,r3,r2
    bcc4:	e0bfff05 	stb	r2,-4(fp)
    bcc8:	00800074 	movhi	r2,1
    bccc:	108ecf04 	addi	r2,r2,15164
    bcd0:	10800e17 	ldw	r2,56(r2)
    bcd4:	10800058 	cmpnei	r2,r2,1
    bcd8:	1000041e 	bne	r2,zero,bcec <alt_sys_init+0x33c>
    bcdc:	00800074 	movhi	r2,1
    bce0:	108ecf04 	addi	r2,r2,15164
    bce4:	10001115 	stw	zero,68(r2)
    bce8:	00000e06 	br	bd24 <alt_sys_init+0x374>
    bcec:	00800074 	movhi	r2,1
    bcf0:	108ecf04 	addi	r2,r2,15164
    bcf4:	10800e17 	ldw	r2,56(r2)
    bcf8:	10800098 	cmpnei	r2,r2,2
    bcfc:	1000051e 	bne	r2,zero,bd14 <alt_sys_init+0x364>
    bd00:	00c00074 	movhi	r3,1
    bd04:	18cecf04 	addi	r3,r3,15164
    bd08:	00800044 	movi	r2,1
    bd0c:	18801115 	stw	r2,68(r3)
    bd10:	00000406 	br	bd24 <alt_sys_init+0x374>
    bd14:	00c00074 	movhi	r3,1
    bd18:	18cecf04 	addi	r3,r3,15164
    bd1c:	00800084 	movi	r2,2
    bd20:	18801115 	stw	r2,68(r3)
    bd24:	e0ffff43 	ldbu	r3,-3(fp)
    bd28:	00800804 	movi	r2,32
    bd2c:	10c7c83a 	sub	r3,r2,r3
    bd30:	00bfffc4 	movi	r2,-1
    bd34:	10c6d83a 	srl	r3,r2,r3
    bd38:	00800074 	movhi	r2,1
    bd3c:	108ecf04 	addi	r2,r2,15164
    bd40:	10c01215 	stw	r3,72(r2)
    bd44:	e0ffff43 	ldbu	r3,-3(fp)
    bd48:	00800074 	movhi	r2,1
    bd4c:	108ecf04 	addi	r2,r2,15164
    bd50:	10801117 	ldw	r2,68(r2)
    bd54:	1887883a 	add	r3,r3,r2
    bd58:	00800074 	movhi	r2,1
    bd5c:	108ecf04 	addi	r2,r2,15164
    bd60:	10c01315 	stw	r3,76(r2)
    bd64:	e0ffff03 	ldbu	r3,-4(fp)
    bd68:	00800804 	movi	r2,32
    bd6c:	10c7c83a 	sub	r3,r2,r3
    bd70:	00bfffc4 	movi	r2,-1
    bd74:	10c6d83a 	srl	r3,r2,r3
    bd78:	00800074 	movhi	r2,1
    bd7c:	108ecf04 	addi	r2,r2,15164
    bd80:	10c01415 	stw	r3,80(r2)
    bd84:	01000074 	movhi	r4,1
    bd88:	210ecf04 	addi	r4,r4,15164
    bd8c:	000bdb00 	call	bdb0 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
    bd90:	01000074 	movhi	r4,1
    bd94:	210ee404 	addi	r4,r4,15248
    bd98:	000bdb00 	call	bdb0 <alt_dev_reg>
}
    bd9c:	e037883a 	mov	sp,fp
    bda0:	dfc00117 	ldw	ra,4(sp)
    bda4:	df000017 	ldw	fp,0(sp)
    bda8:	dec00204 	addi	sp,sp,8
    bdac:	f800283a 	ret

0000bdb0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    bdb0:	defffd04 	addi	sp,sp,-12
    bdb4:	dfc00215 	stw	ra,8(sp)
    bdb8:	df000115 	stw	fp,4(sp)
    bdbc:	df000104 	addi	fp,sp,4
    bdc0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    bdc4:	e13fff17 	ldw	r4,-4(fp)
    bdc8:	01400074 	movhi	r5,1
    bdcc:	294ef704 	addi	r5,r5,15324
    bdd0:	001029c0 	call	1029c <alt_dev_llist_insert>
}
    bdd4:	e037883a 	mov	sp,fp
    bdd8:	dfc00117 	ldw	ra,4(sp)
    bddc:	df000017 	ldw	fp,0(sp)
    bde0:	dec00204 	addi	sp,sp,8
    bde4:	f800283a 	ret

0000bde8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    bde8:	defffa04 	addi	sp,sp,-24
    bdec:	dfc00515 	stw	ra,20(sp)
    bdf0:	df000415 	stw	fp,16(sp)
    bdf4:	df000404 	addi	fp,sp,16
    bdf8:	e13ffd15 	stw	r4,-12(fp)
    bdfc:	e17ffe15 	stw	r5,-8(fp)
    be00:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    be04:	e0bffd17 	ldw	r2,-12(fp)
    be08:	10800017 	ldw	r2,0(r2)
    be0c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    be10:	e0bffc17 	ldw	r2,-16(fp)
    be14:	11000a04 	addi	r4,r2,40
    be18:	e0bffd17 	ldw	r2,-12(fp)
    be1c:	11c00217 	ldw	r7,8(r2)
    be20:	e17ffe17 	ldw	r5,-8(fp)
    be24:	e1bfff17 	ldw	r6,-4(fp)
    be28:	000c42c0 	call	c42c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    be2c:	e037883a 	mov	sp,fp
    be30:	dfc00117 	ldw	ra,4(sp)
    be34:	df000017 	ldw	fp,0(sp)
    be38:	dec00204 	addi	sp,sp,8
    be3c:	f800283a 	ret

0000be40 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    be40:	defffa04 	addi	sp,sp,-24
    be44:	dfc00515 	stw	ra,20(sp)
    be48:	df000415 	stw	fp,16(sp)
    be4c:	df000404 	addi	fp,sp,16
    be50:	e13ffd15 	stw	r4,-12(fp)
    be54:	e17ffe15 	stw	r5,-8(fp)
    be58:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    be5c:	e0bffd17 	ldw	r2,-12(fp)
    be60:	10800017 	ldw	r2,0(r2)
    be64:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    be68:	e0bffc17 	ldw	r2,-16(fp)
    be6c:	11000a04 	addi	r4,r2,40
    be70:	e0bffd17 	ldw	r2,-12(fp)
    be74:	11c00217 	ldw	r7,8(r2)
    be78:	e17ffe17 	ldw	r5,-8(fp)
    be7c:	e1bfff17 	ldw	r6,-4(fp)
    be80:	000c6500 	call	c650 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    be84:	e037883a 	mov	sp,fp
    be88:	dfc00117 	ldw	ra,4(sp)
    be8c:	df000017 	ldw	fp,0(sp)
    be90:	dec00204 	addi	sp,sp,8
    be94:	f800283a 	ret

0000be98 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    be98:	defffc04 	addi	sp,sp,-16
    be9c:	dfc00315 	stw	ra,12(sp)
    bea0:	df000215 	stw	fp,8(sp)
    bea4:	df000204 	addi	fp,sp,8
    bea8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    beac:	e0bfff17 	ldw	r2,-4(fp)
    beb0:	10800017 	ldw	r2,0(r2)
    beb4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    beb8:	e0bffe17 	ldw	r2,-8(fp)
    bebc:	11000a04 	addi	r4,r2,40
    bec0:	e0bfff17 	ldw	r2,-4(fp)
    bec4:	11400217 	ldw	r5,8(r2)
    bec8:	000c2c40 	call	c2c4 <altera_avalon_jtag_uart_close>
}
    becc:	e037883a 	mov	sp,fp
    bed0:	dfc00117 	ldw	ra,4(sp)
    bed4:	df000017 	ldw	fp,0(sp)
    bed8:	dec00204 	addi	sp,sp,8
    bedc:	f800283a 	ret

0000bee0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    bee0:	defffa04 	addi	sp,sp,-24
    bee4:	dfc00515 	stw	ra,20(sp)
    bee8:	df000415 	stw	fp,16(sp)
    beec:	df000404 	addi	fp,sp,16
    bef0:	e13ffd15 	stw	r4,-12(fp)
    bef4:	e17ffe15 	stw	r5,-8(fp)
    bef8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    befc:	e0bffd17 	ldw	r2,-12(fp)
    bf00:	10800017 	ldw	r2,0(r2)
    bf04:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    bf08:	e0bffc17 	ldw	r2,-16(fp)
    bf0c:	11000a04 	addi	r4,r2,40
    bf10:	e17ffe17 	ldw	r5,-8(fp)
    bf14:	e1bfff17 	ldw	r6,-4(fp)
    bf18:	000c3380 	call	c338 <altera_avalon_jtag_uart_ioctl>
}
    bf1c:	e037883a 	mov	sp,fp
    bf20:	dfc00117 	ldw	ra,4(sp)
    bf24:	df000017 	ldw	fp,0(sp)
    bf28:	dec00204 	addi	sp,sp,8
    bf2c:	f800283a 	ret

0000bf30 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    bf30:	defffb04 	addi	sp,sp,-20
    bf34:	dfc00415 	stw	ra,16(sp)
    bf38:	df000315 	stw	fp,12(sp)
    bf3c:	df000304 	addi	fp,sp,12
    bf40:	e13ffd15 	stw	r4,-12(fp)
    bf44:	e17ffe15 	stw	r5,-8(fp)
    bf48:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    bf4c:	e0fffd17 	ldw	r3,-12(fp)
    bf50:	00800044 	movi	r2,1
    bf54:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    bf58:	e0bffd17 	ldw	r2,-12(fp)
    bf5c:	10800017 	ldw	r2,0(r2)
    bf60:	11000104 	addi	r4,r2,4
    bf64:	e0bffd17 	ldw	r2,-12(fp)
    bf68:	10800817 	ldw	r2,32(r2)
    bf6c:	1007883a 	mov	r3,r2
    bf70:	2005883a 	mov	r2,r4
    bf74:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
    bf78:	e13fff17 	ldw	r4,-4(fp)
    bf7c:	e17ffd17 	ldw	r5,-12(fp)
    bf80:	01800074 	movhi	r6,1
    bf84:	31affa04 	addi	r6,r6,-16408
    bf88:	000ad000 	call	ad00 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    bf8c:	e0bffd17 	ldw	r2,-12(fp)
    bf90:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    bf94:	e0bffd17 	ldw	r2,-12(fp)
    bf98:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    bf9c:	00800074 	movhi	r2,1
    bfa0:	10969304 	addi	r2,r2,23116
    bfa4:	10800017 	ldw	r2,0(r2)
    bfa8:	100b883a 	mov	r5,r2
    bfac:	01800074 	movhi	r6,1
    bfb0:	31b08504 	addi	r6,r6,-15852
    bfb4:	e1fffd17 	ldw	r7,-12(fp)
    bfb8:	001012c0 	call	1012c <alt_alarm_start>
    bfbc:	1004403a 	cmpge	r2,r2,zero
    bfc0:	1000041e 	bne	r2,zero,bfd4 <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    bfc4:	e0fffd17 	ldw	r3,-12(fp)
    bfc8:	00a00034 	movhi	r2,32768
    bfcc:	10bfffc4 	addi	r2,r2,-1
    bfd0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    bfd4:	e037883a 	mov	sp,fp
    bfd8:	dfc00117 	ldw	ra,4(sp)
    bfdc:	df000017 	ldw	fp,0(sp)
    bfe0:	dec00204 	addi	sp,sp,8
    bfe4:	f800283a 	ret

0000bfe8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    bfe8:	defff704 	addi	sp,sp,-36
    bfec:	df000815 	stw	fp,32(sp)
    bff0:	df000804 	addi	fp,sp,32
    bff4:	e13ffe15 	stw	r4,-8(fp)
    bff8:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    bffc:	e0bffe17 	ldw	r2,-8(fp)
    c000:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
    c004:	e0bffd17 	ldw	r2,-12(fp)
    c008:	10800017 	ldw	r2,0(r2)
    c00c:	e0bffc15 	stw	r2,-16(fp)
    c010:	00000006 	br	c014 <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    c014:	e0bffc17 	ldw	r2,-16(fp)
    c018:	10800104 	addi	r2,r2,4
    c01c:	10800037 	ldwio	r2,0(r2)
    c020:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    c024:	e0bffb17 	ldw	r2,-20(fp)
    c028:	1080c00c 	andi	r2,r2,768
    c02c:	1005003a 	cmpeq	r2,r2,zero
    c030:	1000741e 	bne	r2,zero,c204 <altera_avalon_jtag_uart_irq+0x21c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    c034:	e0bffb17 	ldw	r2,-20(fp)
    c038:	1080400c 	andi	r2,r2,256
    c03c:	1005003a 	cmpeq	r2,r2,zero
    c040:	1000351e 	bne	r2,zero,c118 <altera_avalon_jtag_uart_irq+0x130>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    c044:	00800074 	movhi	r2,1
    c048:	e0bffa15 	stw	r2,-24(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c04c:	e0bffd17 	ldw	r2,-12(fp)
    c050:	10800a17 	ldw	r2,40(r2)
    c054:	10800044 	addi	r2,r2,1
    c058:	1081ffcc 	andi	r2,r2,2047
    c05c:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
    c060:	e0bffd17 	ldw	r2,-12(fp)
    c064:	10c00b17 	ldw	r3,44(r2)
    c068:	e0bff917 	ldw	r2,-28(fp)
    c06c:	18801626 	beq	r3,r2,c0c8 <altera_avalon_jtag_uart_irq+0xe0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    c070:	e0bffc17 	ldw	r2,-16(fp)
    c074:	10800037 	ldwio	r2,0(r2)
    c078:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    c07c:	e0bffa17 	ldw	r2,-24(fp)
    c080:	10a0000c 	andi	r2,r2,32768
    c084:	1005003a 	cmpeq	r2,r2,zero
    c088:	10000f1e 	bne	r2,zero,c0c8 <altera_avalon_jtag_uart_irq+0xe0>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    c08c:	e0bffd17 	ldw	r2,-12(fp)
    c090:	10c00a17 	ldw	r3,40(r2)
    c094:	e0bffa17 	ldw	r2,-24(fp)
    c098:	1009883a 	mov	r4,r2
    c09c:	e0bffd17 	ldw	r2,-12(fp)
    c0a0:	1885883a 	add	r2,r3,r2
    c0a4:	10800e04 	addi	r2,r2,56
    c0a8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c0ac:	e0bffd17 	ldw	r2,-12(fp)
    c0b0:	10800a17 	ldw	r2,40(r2)
    c0b4:	10800044 	addi	r2,r2,1
    c0b8:	10c1ffcc 	andi	r3,r2,2047
    c0bc:	e0bffd17 	ldw	r2,-12(fp)
    c0c0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    c0c4:	003fe106 	br	c04c <altera_avalon_jtag_uart_irq+0x64>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    c0c8:	e0bffa17 	ldw	r2,-24(fp)
    c0cc:	10bfffec 	andhi	r2,r2,65535
    c0d0:	1005003a 	cmpeq	r2,r2,zero
    c0d4:	1000101e 	bne	r2,zero,c118 <altera_avalon_jtag_uart_irq+0x130>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    c0d8:	e0bffd17 	ldw	r2,-12(fp)
    c0dc:	10c00817 	ldw	r3,32(r2)
    c0e0:	00bfff84 	movi	r2,-2
    c0e4:	1886703a 	and	r3,r3,r2
    c0e8:	e0bffd17 	ldw	r2,-12(fp)
    c0ec:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    c0f0:	e0bffc17 	ldw	r2,-16(fp)
    c0f4:	11000104 	addi	r4,r2,4
    c0f8:	e0bffd17 	ldw	r2,-12(fp)
    c0fc:	10800817 	ldw	r2,32(r2)
    c100:	1007883a 	mov	r3,r2
    c104:	2005883a 	mov	r2,r4
    c108:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    c10c:	e0bffc17 	ldw	r2,-16(fp)
    c110:	10800104 	addi	r2,r2,4
    c114:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    c118:	e0bffb17 	ldw	r2,-20(fp)
    c11c:	1080800c 	andi	r2,r2,512
    c120:	1005003a 	cmpeq	r2,r2,zero
    c124:	103fbb1e 	bne	r2,zero,c014 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    c128:	e0bffb17 	ldw	r2,-20(fp)
    c12c:	10bfffec 	andhi	r2,r2,65535
    c130:	1004d43a 	srli	r2,r2,16
    c134:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    c138:	00001506 	br	c190 <altera_avalon_jtag_uart_irq+0x1a8>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    c13c:	e13ffc17 	ldw	r4,-16(fp)
    c140:	e0bffd17 	ldw	r2,-12(fp)
    c144:	10c00d17 	ldw	r3,52(r2)
    c148:	e0bffd17 	ldw	r2,-12(fp)
    c14c:	1885883a 	add	r2,r3,r2
    c150:	10820e04 	addi	r2,r2,2104
    c154:	10800003 	ldbu	r2,0(r2)
    c158:	10c03fcc 	andi	r3,r2,255
    c15c:	18c0201c 	xori	r3,r3,128
    c160:	18ffe004 	addi	r3,r3,-128
    c164:	2005883a 	mov	r2,r4
    c168:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c16c:	e0bffd17 	ldw	r2,-12(fp)
    c170:	10800d17 	ldw	r2,52(r2)
    c174:	10800044 	addi	r2,r2,1
    c178:	10c1ffcc 	andi	r3,r2,2047
    c17c:	e0bffd17 	ldw	r2,-12(fp)
    c180:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    c184:	e0bff817 	ldw	r2,-32(fp)
    c188:	10bfffc4 	addi	r2,r2,-1
    c18c:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    c190:	e0bff817 	ldw	r2,-32(fp)
    c194:	1005003a 	cmpeq	r2,r2,zero
    c198:	1000051e 	bne	r2,zero,c1b0 <altera_avalon_jtag_uart_irq+0x1c8>
    c19c:	e0bffd17 	ldw	r2,-12(fp)
    c1a0:	10c00d17 	ldw	r3,52(r2)
    c1a4:	e0bffd17 	ldw	r2,-12(fp)
    c1a8:	10800c17 	ldw	r2,48(r2)
    c1ac:	18bfe31e 	bne	r3,r2,c13c <altera_avalon_jtag_uart_irq+0x154>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    c1b0:	e0bff817 	ldw	r2,-32(fp)
    c1b4:	1005003a 	cmpeq	r2,r2,zero
    c1b8:	103f961e 	bne	r2,zero,c014 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    c1bc:	e0bffd17 	ldw	r2,-12(fp)
    c1c0:	10c00817 	ldw	r3,32(r2)
    c1c4:	00bfff44 	movi	r2,-3
    c1c8:	1886703a 	and	r3,r3,r2
    c1cc:	e0bffd17 	ldw	r2,-12(fp)
    c1d0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    c1d4:	e0bffd17 	ldw	r2,-12(fp)
    c1d8:	10800017 	ldw	r2,0(r2)
    c1dc:	11000104 	addi	r4,r2,4
    c1e0:	e0bffd17 	ldw	r2,-12(fp)
    c1e4:	10800817 	ldw	r2,32(r2)
    c1e8:	1007883a 	mov	r3,r2
    c1ec:	2005883a 	mov	r2,r4
    c1f0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    c1f4:	e0bffc17 	ldw	r2,-16(fp)
    c1f8:	10800104 	addi	r2,r2,4
    c1fc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    c200:	003f8406 	br	c014 <altera_avalon_jtag_uart_irq+0x2c>
}
    c204:	e037883a 	mov	sp,fp
    c208:	df000017 	ldw	fp,0(sp)
    c20c:	dec00104 	addi	sp,sp,4
    c210:	f800283a 	ret

0000c214 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    c214:	defffc04 	addi	sp,sp,-16
    c218:	df000315 	stw	fp,12(sp)
    c21c:	df000304 	addi	fp,sp,12
    c220:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    c224:	e0bfff17 	ldw	r2,-4(fp)
    c228:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    c22c:	e0bffe17 	ldw	r2,-8(fp)
    c230:	10800017 	ldw	r2,0(r2)
    c234:	10800104 	addi	r2,r2,4
    c238:	10800037 	ldwio	r2,0(r2)
    c23c:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    c240:	e0bffd17 	ldw	r2,-12(fp)
    c244:	1081000c 	andi	r2,r2,1024
    c248:	1005003a 	cmpeq	r2,r2,zero
    c24c:	10000c1e 	bne	r2,zero,c280 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    c250:	e0bffe17 	ldw	r2,-8(fp)
    c254:	10800017 	ldw	r2,0(r2)
    c258:	11000104 	addi	r4,r2,4
    c25c:	e0bffe17 	ldw	r2,-8(fp)
    c260:	10800817 	ldw	r2,32(r2)
    c264:	10810014 	ori	r2,r2,1024
    c268:	1007883a 	mov	r3,r2
    c26c:	2005883a 	mov	r2,r4
    c270:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    c274:	e0bffe17 	ldw	r2,-8(fp)
    c278:	10000915 	stw	zero,36(r2)
    c27c:	00000a06 	br	c2a8 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    c280:	e0bffe17 	ldw	r2,-8(fp)
    c284:	10c00917 	ldw	r3,36(r2)
    c288:	00a00034 	movhi	r2,32768
    c28c:	10bfff04 	addi	r2,r2,-4
    c290:	10c00536 	bltu	r2,r3,c2a8 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
    c294:	e0bffe17 	ldw	r2,-8(fp)
    c298:	10800917 	ldw	r2,36(r2)
    c29c:	10c00044 	addi	r3,r2,1
    c2a0:	e0bffe17 	ldw	r2,-8(fp)
    c2a4:	10c00915 	stw	r3,36(r2)
    c2a8:	00800074 	movhi	r2,1
    c2ac:	10969304 	addi	r2,r2,23116
    c2b0:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    c2b4:	e037883a 	mov	sp,fp
    c2b8:	df000017 	ldw	fp,0(sp)
    c2bc:	dec00104 	addi	sp,sp,4
    c2c0:	f800283a 	ret

0000c2c4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    c2c4:	defffc04 	addi	sp,sp,-16
    c2c8:	df000315 	stw	fp,12(sp)
    c2cc:	df000304 	addi	fp,sp,12
    c2d0:	e13ffd15 	stw	r4,-12(fp)
    c2d4:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    c2d8:	00000706 	br	c2f8 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    c2dc:	e0bffe17 	ldw	r2,-8(fp)
    c2e0:	1090000c 	andi	r2,r2,16384
    c2e4:	1005003a 	cmpeq	r2,r2,zero
    c2e8:	1000031e 	bne	r2,zero,c2f8 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
    c2ec:	00bffd44 	movi	r2,-11
    c2f0:	e0bfff15 	stw	r2,-4(fp)
    c2f4:	00000b06 	br	c324 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    c2f8:	e0bffd17 	ldw	r2,-12(fp)
    c2fc:	10c00d17 	ldw	r3,52(r2)
    c300:	e0bffd17 	ldw	r2,-12(fp)
    c304:	10800c17 	ldw	r2,48(r2)
    c308:	18800526 	beq	r3,r2,c320 <altera_avalon_jtag_uart_close+0x5c>
    c30c:	e0bffd17 	ldw	r2,-12(fp)
    c310:	10c00917 	ldw	r3,36(r2)
    c314:	e0bffd17 	ldw	r2,-12(fp)
    c318:	10800117 	ldw	r2,4(r2)
    c31c:	18bfef36 	bltu	r3,r2,c2dc <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    c320:	e03fff15 	stw	zero,-4(fp)
    c324:	e0bfff17 	ldw	r2,-4(fp)
}
    c328:	e037883a 	mov	sp,fp
    c32c:	df000017 	ldw	fp,0(sp)
    c330:	dec00104 	addi	sp,sp,4
    c334:	f800283a 	ret

0000c338 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    c338:	defff804 	addi	sp,sp,-32
    c33c:	df000715 	stw	fp,28(sp)
    c340:	df000704 	addi	fp,sp,28
    c344:	e13ffb15 	stw	r4,-20(fp)
    c348:	e17ffc15 	stw	r5,-16(fp)
    c34c:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
    c350:	00bff9c4 	movi	r2,-25
    c354:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
    c358:	e0bffc17 	ldw	r2,-16(fp)
    c35c:	e0bfff15 	stw	r2,-4(fp)
    c360:	e0ffff17 	ldw	r3,-4(fp)
    c364:	189a8060 	cmpeqi	r2,r3,27137
    c368:	1000041e 	bne	r2,zero,c37c <altera_avalon_jtag_uart_ioctl+0x44>
    c36c:	e0ffff17 	ldw	r3,-4(fp)
    c370:	189a80a0 	cmpeqi	r2,r3,27138
    c374:	10001b1e 	bne	r2,zero,c3e4 <altera_avalon_jtag_uart_ioctl+0xac>
    c378:	00002706 	br	c418 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    c37c:	e0bffb17 	ldw	r2,-20(fp)
    c380:	10c00117 	ldw	r3,4(r2)
    c384:	00a00034 	movhi	r2,32768
    c388:	10bfffc4 	addi	r2,r2,-1
    c38c:	18802226 	beq	r3,r2,c418 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
    c390:	e0bffd17 	ldw	r2,-12(fp)
    c394:	10800017 	ldw	r2,0(r2)
    c398:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    c39c:	e0bff917 	ldw	r2,-28(fp)
    c3a0:	10800090 	cmplti	r2,r2,2
    c3a4:	1000071e 	bne	r2,zero,c3c4 <altera_avalon_jtag_uart_ioctl+0x8c>
    c3a8:	e0fff917 	ldw	r3,-28(fp)
    c3ac:	00a00034 	movhi	r2,32768
    c3b0:	10bfffc4 	addi	r2,r2,-1
    c3b4:	18800326 	beq	r3,r2,c3c4 <altera_avalon_jtag_uart_ioctl+0x8c>
    c3b8:	e0bff917 	ldw	r2,-28(fp)
    c3bc:	e0bffe15 	stw	r2,-8(fp)
    c3c0:	00000306 	br	c3d0 <altera_avalon_jtag_uart_ioctl+0x98>
    c3c4:	00e00034 	movhi	r3,32768
    c3c8:	18ffff84 	addi	r3,r3,-2
    c3cc:	e0fffe15 	stw	r3,-8(fp)
    c3d0:	e0bffb17 	ldw	r2,-20(fp)
    c3d4:	e0fffe17 	ldw	r3,-8(fp)
    c3d8:	10c00115 	stw	r3,4(r2)
      rc = 0;
    c3dc:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
    c3e0:	00000d06 	br	c418 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    c3e4:	e0bffb17 	ldw	r2,-20(fp)
    c3e8:	10c00117 	ldw	r3,4(r2)
    c3ec:	00a00034 	movhi	r2,32768
    c3f0:	10bfffc4 	addi	r2,r2,-1
    c3f4:	18800826 	beq	r3,r2,c418 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    c3f8:	e13ffd17 	ldw	r4,-12(fp)
    c3fc:	e0bffb17 	ldw	r2,-20(fp)
    c400:	10c00917 	ldw	r3,36(r2)
    c404:	e0bffb17 	ldw	r2,-20(fp)
    c408:	10800117 	ldw	r2,4(r2)
    c40c:	1885803a 	cmpltu	r2,r3,r2
    c410:	20800015 	stw	r2,0(r4)
      rc = 0;
    c414:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
    c418:	e0bffa17 	ldw	r2,-24(fp)
}
    c41c:	e037883a 	mov	sp,fp
    c420:	df000017 	ldw	fp,0(sp)
    c424:	dec00104 	addi	sp,sp,4
    c428:	f800283a 	ret

0000c42c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    c42c:	defff204 	addi	sp,sp,-56
    c430:	dfc00d15 	stw	ra,52(sp)
    c434:	df000c15 	stw	fp,48(sp)
    c438:	df000c04 	addi	fp,sp,48
    c43c:	e13ffb15 	stw	r4,-20(fp)
    c440:	e17ffc15 	stw	r5,-16(fp)
    c444:	e1bffd15 	stw	r6,-12(fp)
    c448:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
    c44c:	e0bffc17 	ldw	r2,-16(fp)
    c450:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    c454:	00004806 	br	c578 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    c458:	e0bffb17 	ldw	r2,-20(fp)
    c45c:	10800a17 	ldw	r2,40(r2)
    c460:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    c464:	e0bffb17 	ldw	r2,-20(fp)
    c468:	10800b17 	ldw	r2,44(r2)
    c46c:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
    c470:	e0fff717 	ldw	r3,-36(fp)
    c474:	e0bff617 	ldw	r2,-40(fp)
    c478:	18800536 	bltu	r3,r2,c490 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    c47c:	e0bff717 	ldw	r2,-36(fp)
    c480:	e0fff617 	ldw	r3,-40(fp)
    c484:	10c5c83a 	sub	r2,r2,r3
    c488:	e0bff815 	stw	r2,-32(fp)
    c48c:	00000406 	br	c4a0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    c490:	00820004 	movi	r2,2048
    c494:	e0fff617 	ldw	r3,-40(fp)
    c498:	10c5c83a 	sub	r2,r2,r3
    c49c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    c4a0:	e0bff817 	ldw	r2,-32(fp)
    c4a4:	1005003a 	cmpeq	r2,r2,zero
    c4a8:	10001f1e 	bne	r2,zero,c528 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
    c4ac:	e0fffd17 	ldw	r3,-12(fp)
    c4b0:	e0bff817 	ldw	r2,-32(fp)
    c4b4:	1880022e 	bgeu	r3,r2,c4c0 <altera_avalon_jtag_uart_read+0x94>
        n = space;
    c4b8:	e0bffd17 	ldw	r2,-12(fp)
    c4bc:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    c4c0:	e0bffb17 	ldw	r2,-20(fp)
    c4c4:	10c00e04 	addi	r3,r2,56
    c4c8:	e0bff617 	ldw	r2,-40(fp)
    c4cc:	1887883a 	add	r3,r3,r2
    c4d0:	e0bffa17 	ldw	r2,-24(fp)
    c4d4:	1009883a 	mov	r4,r2
    c4d8:	180b883a 	mov	r5,r3
    c4dc:	e1bff817 	ldw	r6,-32(fp)
    c4e0:	00013b40 	call	13b4 <memcpy>
      ptr   += n;
    c4e4:	e0fff817 	ldw	r3,-32(fp)
    c4e8:	e0bffa17 	ldw	r2,-24(fp)
    c4ec:	10c5883a 	add	r2,r2,r3
    c4f0:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
    c4f4:	e0fffd17 	ldw	r3,-12(fp)
    c4f8:	e0bff817 	ldw	r2,-32(fp)
    c4fc:	1885c83a 	sub	r2,r3,r2
    c500:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c504:	e0fff617 	ldw	r3,-40(fp)
    c508:	e0bff817 	ldw	r2,-32(fp)
    c50c:	1885883a 	add	r2,r3,r2
    c510:	10c1ffcc 	andi	r3,r2,2047
    c514:	e0bffb17 	ldw	r2,-20(fp)
    c518:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    c51c:	e0bffd17 	ldw	r2,-12(fp)
    c520:	10800048 	cmpgei	r2,r2,1
    c524:	103fcc1e 	bne	r2,zero,c458 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    c528:	e0fffa17 	ldw	r3,-24(fp)
    c52c:	e0bffc17 	ldw	r2,-16(fp)
    c530:	1880141e 	bne	r3,r2,c584 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    c534:	e0bffe17 	ldw	r2,-8(fp)
    c538:	1090000c 	andi	r2,r2,16384
    c53c:	1004c03a 	cmpne	r2,r2,zero
    c540:	1000101e 	bne	r2,zero,c584 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    c544:	e0bffb17 	ldw	r2,-20(fp)
    c548:	10c00a17 	ldw	r3,40(r2)
    c54c:	e0bff717 	ldw	r2,-36(fp)
    c550:	1880051e 	bne	r3,r2,c568 <altera_avalon_jtag_uart_read+0x13c>
    c554:	e0bffb17 	ldw	r2,-20(fp)
    c558:	10c00917 	ldw	r3,36(r2)
    c55c:	e0bffb17 	ldw	r2,-20(fp)
    c560:	10800117 	ldw	r2,4(r2)
    c564:	18bff736 	bltu	r3,r2,c544 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    c568:	e0bffb17 	ldw	r2,-20(fp)
    c56c:	10c00a17 	ldw	r3,40(r2)
    c570:	e0bff717 	ldw	r2,-36(fp)
    c574:	18800326 	beq	r3,r2,c584 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    c578:	e0bffd17 	ldw	r2,-12(fp)
    c57c:	10800048 	cmpgei	r2,r2,1
    c580:	103fb51e 	bne	r2,zero,c458 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    c584:	e0fffa17 	ldw	r3,-24(fp)
    c588:	e0bffc17 	ldw	r2,-16(fp)
    c58c:	18801926 	beq	r3,r2,c5f4 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c590:	0005303a 	rdctl	r2,status
    c594:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c598:	e0fff517 	ldw	r3,-44(fp)
    c59c:	00bfff84 	movi	r2,-2
    c5a0:	1884703a 	and	r2,r3,r2
    c5a4:	1001703a 	wrctl	status,r2
  
  return context;
    c5a8:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    c5ac:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    c5b0:	e0bffb17 	ldw	r2,-20(fp)
    c5b4:	10800817 	ldw	r2,32(r2)
    c5b8:	10c00054 	ori	r3,r2,1
    c5bc:	e0bffb17 	ldw	r2,-20(fp)
    c5c0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    c5c4:	e0bffb17 	ldw	r2,-20(fp)
    c5c8:	10800017 	ldw	r2,0(r2)
    c5cc:	11000104 	addi	r4,r2,4
    c5d0:	e0bffb17 	ldw	r2,-20(fp)
    c5d4:	10800817 	ldw	r2,32(r2)
    c5d8:	1007883a 	mov	r3,r2
    c5dc:	2005883a 	mov	r2,r4
    c5e0:	10c00035 	stwio	r3,0(r2)
    c5e4:	e0bff917 	ldw	r2,-28(fp)
    c5e8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c5ec:	e0bff417 	ldw	r2,-48(fp)
    c5f0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    c5f4:	e0fffa17 	ldw	r3,-24(fp)
    c5f8:	e0bffc17 	ldw	r2,-16(fp)
    c5fc:	18800526 	beq	r3,r2,c614 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
    c600:	e0fffa17 	ldw	r3,-24(fp)
    c604:	e0bffc17 	ldw	r2,-16(fp)
    c608:	1887c83a 	sub	r3,r3,r2
    c60c:	e0ffff15 	stw	r3,-4(fp)
    c610:	00000906 	br	c638 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
    c614:	e0bffe17 	ldw	r2,-8(fp)
    c618:	1090000c 	andi	r2,r2,16384
    c61c:	1005003a 	cmpeq	r2,r2,zero
    c620:	1000031e 	bne	r2,zero,c630 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    c624:	00bffd44 	movi	r2,-11
    c628:	e0bfff15 	stw	r2,-4(fp)
    c62c:	00000206 	br	c638 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
    c630:	00bffec4 	movi	r2,-5
    c634:	e0bfff15 	stw	r2,-4(fp)
    c638:	e0bfff17 	ldw	r2,-4(fp)
}
    c63c:	e037883a 	mov	sp,fp
    c640:	dfc00117 	ldw	ra,4(sp)
    c644:	df000017 	ldw	fp,0(sp)
    c648:	dec00204 	addi	sp,sp,8
    c64c:	f800283a 	ret

0000c650 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    c650:	defff204 	addi	sp,sp,-56
    c654:	dfc00d15 	stw	ra,52(sp)
    c658:	df000c15 	stw	fp,48(sp)
    c65c:	df000c04 	addi	fp,sp,48
    c660:	e13ffb15 	stw	r4,-20(fp)
    c664:	e17ffc15 	stw	r5,-16(fp)
    c668:	e1bffd15 	stw	r6,-12(fp)
    c66c:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    c670:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    c674:	e0bffc17 	ldw	r2,-16(fp)
    c678:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    c67c:	00003a06 	br	c768 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    c680:	e0bffb17 	ldw	r2,-20(fp)
    c684:	10800c17 	ldw	r2,48(r2)
    c688:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
    c68c:	e0bffb17 	ldw	r2,-20(fp)
    c690:	10800d17 	ldw	r2,52(r2)
    c694:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
    c698:	e0fffa17 	ldw	r3,-24(fp)
    c69c:	e0bff917 	ldw	r2,-28(fp)
    c6a0:	1880062e 	bgeu	r3,r2,c6bc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    c6a4:	e0fff917 	ldw	r3,-28(fp)
    c6a8:	e0bffa17 	ldw	r2,-24(fp)
    c6ac:	1885c83a 	sub	r2,r3,r2
    c6b0:	10bfffc4 	addi	r2,r2,-1
    c6b4:	e0bff815 	stw	r2,-32(fp)
    c6b8:	00000c06 	br	c6ec <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
    c6bc:	e0bff917 	ldw	r2,-28(fp)
    c6c0:	1005003a 	cmpeq	r2,r2,zero
    c6c4:	1000051e 	bne	r2,zero,c6dc <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    c6c8:	00820004 	movi	r2,2048
    c6cc:	e0fffa17 	ldw	r3,-24(fp)
    c6d0:	10c5c83a 	sub	r2,r2,r3
    c6d4:	e0bff815 	stw	r2,-32(fp)
    c6d8:	00000406 	br	c6ec <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    c6dc:	0081ffc4 	movi	r2,2047
    c6e0:	e0fffa17 	ldw	r3,-24(fp)
    c6e4:	10c5c83a 	sub	r2,r2,r3
    c6e8:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    c6ec:	e0bff817 	ldw	r2,-32(fp)
    c6f0:	1005003a 	cmpeq	r2,r2,zero
    c6f4:	10001f1e 	bne	r2,zero,c774 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
    c6f8:	e0fffd17 	ldw	r3,-12(fp)
    c6fc:	e0bff817 	ldw	r2,-32(fp)
    c700:	1880022e 	bgeu	r3,r2,c70c <altera_avalon_jtag_uart_write+0xbc>
        n = count;
    c704:	e0bffd17 	ldw	r2,-12(fp)
    c708:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    c70c:	e0bffb17 	ldw	r2,-20(fp)
    c710:	10c20e04 	addi	r3,r2,2104
    c714:	e0bffa17 	ldw	r2,-24(fp)
    c718:	1885883a 	add	r2,r3,r2
    c71c:	e0fffc17 	ldw	r3,-16(fp)
    c720:	1009883a 	mov	r4,r2
    c724:	180b883a 	mov	r5,r3
    c728:	e1bff817 	ldw	r6,-32(fp)
    c72c:	00013b40 	call	13b4 <memcpy>
      ptr   += n;
    c730:	e0fff817 	ldw	r3,-32(fp)
    c734:	e0bffc17 	ldw	r2,-16(fp)
    c738:	10c5883a 	add	r2,r2,r3
    c73c:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
    c740:	e0fffd17 	ldw	r3,-12(fp)
    c744:	e0bff817 	ldw	r2,-32(fp)
    c748:	1885c83a 	sub	r2,r3,r2
    c74c:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c750:	e0fffa17 	ldw	r3,-24(fp)
    c754:	e0bff817 	ldw	r2,-32(fp)
    c758:	1885883a 	add	r2,r3,r2
    c75c:	10c1ffcc 	andi	r3,r2,2047
    c760:	e0bffb17 	ldw	r2,-20(fp)
    c764:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    c768:	e0bffd17 	ldw	r2,-12(fp)
    c76c:	10800048 	cmpgei	r2,r2,1
    c770:	103fc31e 	bne	r2,zero,c680 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c774:	0005303a 	rdctl	r2,status
    c778:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c77c:	e0fff517 	ldw	r3,-44(fp)
    c780:	00bfff84 	movi	r2,-2
    c784:	1884703a 	and	r2,r3,r2
    c788:	1001703a 	wrctl	status,r2
  
  return context;
    c78c:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    c790:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    c794:	e0bffb17 	ldw	r2,-20(fp)
    c798:	10800817 	ldw	r2,32(r2)
    c79c:	10c00094 	ori	r3,r2,2
    c7a0:	e0bffb17 	ldw	r2,-20(fp)
    c7a4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    c7a8:	e0bffb17 	ldw	r2,-20(fp)
    c7ac:	10800017 	ldw	r2,0(r2)
    c7b0:	11000104 	addi	r4,r2,4
    c7b4:	e0bffb17 	ldw	r2,-20(fp)
    c7b8:	10800817 	ldw	r2,32(r2)
    c7bc:	1007883a 	mov	r3,r2
    c7c0:	2005883a 	mov	r2,r4
    c7c4:	10c00035 	stwio	r3,0(r2)
    c7c8:	e0bff717 	ldw	r2,-36(fp)
    c7cc:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c7d0:	e0bff417 	ldw	r2,-48(fp)
    c7d4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    c7d8:	e0bffd17 	ldw	r2,-12(fp)
    c7dc:	10800050 	cmplti	r2,r2,1
    c7e0:	1000111e 	bne	r2,zero,c828 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
    c7e4:	e0bffe17 	ldw	r2,-8(fp)
    c7e8:	1090000c 	andi	r2,r2,16384
    c7ec:	1004c03a 	cmpne	r2,r2,zero
    c7f0:	1000101e 	bne	r2,zero,c834 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    c7f4:	e0bffb17 	ldw	r2,-20(fp)
    c7f8:	10c00d17 	ldw	r3,52(r2)
    c7fc:	e0bff917 	ldw	r2,-28(fp)
    c800:	1880051e 	bne	r3,r2,c818 <altera_avalon_jtag_uart_write+0x1c8>
    c804:	e0bffb17 	ldw	r2,-20(fp)
    c808:	10c00917 	ldw	r3,36(r2)
    c80c:	e0bffb17 	ldw	r2,-20(fp)
    c810:	10800117 	ldw	r2,4(r2)
    c814:	18bff736 	bltu	r3,r2,c7f4 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    c818:	e0bffb17 	ldw	r2,-20(fp)
    c81c:	10c00d17 	ldw	r3,52(r2)
    c820:	e0bff917 	ldw	r2,-28(fp)
    c824:	18800326 	beq	r3,r2,c834 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
    c828:	e0bffd17 	ldw	r2,-12(fp)
    c82c:	10800048 	cmpgei	r2,r2,1
    c830:	103fcd1e 	bne	r2,zero,c768 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    c834:	e0fffc17 	ldw	r3,-16(fp)
    c838:	e0bff617 	ldw	r2,-40(fp)
    c83c:	18800526 	beq	r3,r2,c854 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
    c840:	e0fffc17 	ldw	r3,-16(fp)
    c844:	e0bff617 	ldw	r2,-40(fp)
    c848:	1887c83a 	sub	r3,r3,r2
    c84c:	e0ffff15 	stw	r3,-4(fp)
    c850:	00000906 	br	c878 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
    c854:	e0bffe17 	ldw	r2,-8(fp)
    c858:	1090000c 	andi	r2,r2,16384
    c85c:	1005003a 	cmpeq	r2,r2,zero
    c860:	1000031e 	bne	r2,zero,c870 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
    c864:	00bffd44 	movi	r2,-11
    c868:	e0bfff15 	stw	r2,-4(fp)
    c86c:	00000206 	br	c878 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    c870:	00bffec4 	movi	r2,-5
    c874:	e0bfff15 	stw	r2,-4(fp)
    c878:	e0bfff17 	ldw	r2,-4(fp)
}
    c87c:	e037883a 	mov	sp,fp
    c880:	dfc00117 	ldw	ra,4(sp)
    c884:	df000017 	ldw	fp,0(sp)
    c888:	dec00204 	addi	sp,sp,8
    c88c:	f800283a 	ret

0000c890 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    c890:	defff904 	addi	sp,sp,-28
    c894:	dfc00615 	stw	ra,24(sp)
    c898:	df000515 	stw	fp,20(sp)
    c89c:	df000504 	addi	fp,sp,20
    c8a0:	e13ffe15 	stw	r4,-8(fp)
    c8a4:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    c8a8:	e0bffe17 	ldw	r2,-8(fp)
    c8ac:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    c8b0:	e0bffe17 	ldw	r2,-8(fp)
    c8b4:	10800104 	addi	r2,r2,4
    c8b8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c8bc:	0005303a 	rdctl	r2,status
    c8c0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c8c4:	e0fffc17 	ldw	r3,-16(fp)
    c8c8:	00bfff84 	movi	r2,-2
    c8cc:	1884703a 	and	r2,r3,r2
    c8d0:	1001703a 	wrctl	status,r2
  
  return context;
    c8d4:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    c8d8:	e0bffd15 	stw	r2,-12(fp)
  alt_tick ();
    c8dc:	00109d40 	call	109d4 <alt_tick>
    c8e0:	e0bffd17 	ldw	r2,-12(fp)
    c8e4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c8e8:	e0bffb17 	ldw	r2,-20(fp)
    c8ec:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    c8f0:	e037883a 	mov	sp,fp
    c8f4:	dfc00117 	ldw	ra,4(sp)
    c8f8:	df000017 	ldw	fp,0(sp)
    c8fc:	dec00204 	addi	sp,sp,8
    c900:	f800283a 	ret

0000c904 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    c904:	defff904 	addi	sp,sp,-28
    c908:	dfc00615 	stw	ra,24(sp)
    c90c:	df000515 	stw	fp,20(sp)
    c910:	df000504 	addi	fp,sp,20
    c914:	e13ffc15 	stw	r4,-16(fp)
    c918:	e17ffd15 	stw	r5,-12(fp)
    c91c:	e1bffe15 	stw	r6,-8(fp)
    c920:	e1ffff15 	stw	r7,-4(fp)
    c924:	e0bfff17 	ldw	r2,-4(fp)
    c928:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    c92c:	00800074 	movhi	r2,1
    c930:	10969304 	addi	r2,r2,23116
    c934:	10800017 	ldw	r2,0(r2)
    c938:	1004c03a 	cmpne	r2,r2,zero
    c93c:	1000041e 	bne	r2,zero,c950 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
    c940:	00c00074 	movhi	r3,1
    c944:	18d69304 	addi	r3,r3,23116
    c948:	e0bffb17 	ldw	r2,-20(fp)
    c94c:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    c950:	e0bffc17 	ldw	r2,-16(fp)
    c954:	10800104 	addi	r2,r2,4
    c958:	1007883a 	mov	r3,r2
    c95c:	008001c4 	movi	r2,7
    c960:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    c964:	e13ffe17 	ldw	r4,-8(fp)
    c968:	e17ffc17 	ldw	r5,-16(fp)
    c96c:	01800074 	movhi	r6,1
    c970:	31b22404 	addi	r6,r6,-14192
    c974:	000ad000 	call	ad00 <alt_irq_register>
#endif  
}
    c978:	e037883a 	mov	sp,fp
    c97c:	dfc00117 	ldw	ra,4(sp)
    c980:	df000017 	ldw	fp,0(sp)
    c984:	dec00204 	addi	sp,sp,8
    c988:	f800283a 	ret

0000c98c <alt_up_audio_open_dev>:
#include "altera_up_avalon_audio_regs.h"

///////////////////////////////////////////////////////////////////////////
// Direct functions
alt_up_audio_dev* alt_up_audio_open_dev(const char* name)
{
    c98c:	defffc04 	addi	sp,sp,-16
    c990:	dfc00315 	stw	ra,12(sp)
    c994:	df000215 	stw	fp,8(sp)
    c998:	df000204 	addi	fp,sp,8
    c99c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_audio_dev *dev = (alt_up_audio_dev*)alt_find_dev(name, &alt_dev_list);
    c9a0:	e13fff17 	ldw	r4,-4(fp)
    c9a4:	01400074 	movhi	r5,1
    c9a8:	294ef704 	addi	r5,r5,15324
    c9ac:	00104780 	call	10478 <alt_find_dev>
    c9b0:	e0bffe15 	stw	r2,-8(fp)
  return dev;
    c9b4:	e0bffe17 	ldw	r2,-8(fp)
}
    c9b8:	e037883a 	mov	sp,fp
    c9bc:	dfc00117 	ldw	ra,4(sp)
    c9c0:	df000017 	ldw	fp,0(sp)
    c9c4:	dec00204 	addi	sp,sp,8
    c9c8:	f800283a 	ret

0000c9cc <alt_up_audio_enable_read_interrupt>:

void alt_up_audio_enable_read_interrupt(alt_up_audio_dev *audio)
{
    c9cc:	defffd04 	addi	sp,sp,-12
    c9d0:	df000215 	stw	fp,8(sp)
    c9d4:	df000204 	addi	fp,sp,8
    c9d8:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    c9dc:	e0bfff17 	ldw	r2,-4(fp)
    c9e0:	10800a17 	ldw	r2,40(r2)
    c9e4:	10800037 	ldwio	r2,0(r2)
    c9e8:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_RE_MSK;
    c9ec:	e0bffe17 	ldw	r2,-8(fp)
    c9f0:	10800054 	ori	r2,r2,1
    c9f4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    c9f8:	e0bfff17 	ldw	r2,-4(fp)
    c9fc:	10800a17 	ldw	r2,40(r2)
    ca00:	e0fffe17 	ldw	r3,-8(fp)
    ca04:	10c00035 	stwio	r3,0(r2)
}
    ca08:	e037883a 	mov	sp,fp
    ca0c:	df000017 	ldw	fp,0(sp)
    ca10:	dec00104 	addi	sp,sp,4
    ca14:	f800283a 	ret

0000ca18 <alt_up_audio_disable_read_interrupt>:

void alt_up_audio_disable_read_interrupt(alt_up_audio_dev *audio)
{
    ca18:	defffd04 	addi	sp,sp,-12
    ca1c:	df000215 	stw	fp,8(sp)
    ca20:	df000204 	addi	fp,sp,8
    ca24:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    ca28:	e0bfff17 	ldw	r2,-4(fp)
    ca2c:	10800a17 	ldw	r2,40(r2)
    ca30:	10800037 	ldwio	r2,0(r2)
    ca34:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_RE_MSK;
    ca38:	e0fffe17 	ldw	r3,-8(fp)
    ca3c:	00bfff84 	movi	r2,-2
    ca40:	1884703a 	and	r2,r3,r2
    ca44:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    ca48:	e0bfff17 	ldw	r2,-4(fp)
    ca4c:	10800a17 	ldw	r2,40(r2)
    ca50:	e0fffe17 	ldw	r3,-8(fp)
    ca54:	10c00035 	stwio	r3,0(r2)
}
    ca58:	e037883a 	mov	sp,fp
    ca5c:	df000017 	ldw	fp,0(sp)
    ca60:	dec00104 	addi	sp,sp,4
    ca64:	f800283a 	ret

0000ca68 <alt_up_audio_enable_write_interrupt>:

void alt_up_audio_enable_write_interrupt(alt_up_audio_dev *audio)
{
    ca68:	defffd04 	addi	sp,sp,-12
    ca6c:	df000215 	stw	fp,8(sp)
    ca70:	df000204 	addi	fp,sp,8
    ca74:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    ca78:	e0bfff17 	ldw	r2,-4(fp)
    ca7c:	10800a17 	ldw	r2,40(r2)
    ca80:	10800037 	ldwio	r2,0(r2)
    ca84:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_WE_MSK;
    ca88:	e0bffe17 	ldw	r2,-8(fp)
    ca8c:	10800094 	ori	r2,r2,2
    ca90:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    ca94:	e0bfff17 	ldw	r2,-4(fp)
    ca98:	10800a17 	ldw	r2,40(r2)
    ca9c:	e0fffe17 	ldw	r3,-8(fp)
    caa0:	10c00035 	stwio	r3,0(r2)
}
    caa4:	e037883a 	mov	sp,fp
    caa8:	df000017 	ldw	fp,0(sp)
    caac:	dec00104 	addi	sp,sp,4
    cab0:	f800283a 	ret

0000cab4 <alt_up_audio_disable_write_interrupt>:

void alt_up_audio_disable_write_interrupt(alt_up_audio_dev *audio)
{
    cab4:	defffd04 	addi	sp,sp,-12
    cab8:	df000215 	stw	fp,8(sp)
    cabc:	df000204 	addi	fp,sp,8
    cac0:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    cac4:	e0bfff17 	ldw	r2,-4(fp)
    cac8:	10800a17 	ldw	r2,40(r2)
    cacc:	10800037 	ldwio	r2,0(r2)
    cad0:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_WE_MSK;
    cad4:	e0fffe17 	ldw	r3,-8(fp)
    cad8:	00bfff44 	movi	r2,-3
    cadc:	1884703a 	and	r2,r3,r2
    cae0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    cae4:	e0bfff17 	ldw	r2,-4(fp)
    cae8:	10800a17 	ldw	r2,40(r2)
    caec:	e0fffe17 	ldw	r3,-8(fp)
    caf0:	10c00035 	stwio	r3,0(r2)
}
    caf4:	e037883a 	mov	sp,fp
    caf8:	df000017 	ldw	fp,0(sp)
    cafc:	dec00104 	addi	sp,sp,4
    cb00:	f800283a 	ret

0000cb04 <alt_up_audio_read_interrupt_pending>:

int alt_up_audio_read_interrupt_pending(alt_up_audio_dev *audio)
{
    cb04:	defffd04 	addi	sp,sp,-12
    cb08:	df000215 	stw	fp,8(sp)
    cb0c:	df000204 	addi	fp,sp,8
    cb10:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    cb14:	e0bfff17 	ldw	r2,-4(fp)
    cb18:	10800a17 	ldw	r2,40(r2)
    cb1c:	10800037 	ldwio	r2,0(r2)
    cb20:	e0bffe15 	stw	r2,-8(fp)
	// return 1 if RI is set to 1
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_RI_MSK) ? 1 : 0 );
    cb24:	e0bffe17 	ldw	r2,-8(fp)
    cb28:	1080400c 	andi	r2,r2,256
    cb2c:	1004c03a 	cmpne	r2,r2,zero
}
    cb30:	e037883a 	mov	sp,fp
    cb34:	df000017 	ldw	fp,0(sp)
    cb38:	dec00104 	addi	sp,sp,4
    cb3c:	f800283a 	ret

0000cb40 <alt_up_audio_write_interrupt_pending>:

int alt_up_audio_write_interrupt_pending(alt_up_audio_dev *audio)
{
    cb40:	defffd04 	addi	sp,sp,-12
    cb44:	df000215 	stw	fp,8(sp)
    cb48:	df000204 	addi	fp,sp,8
    cb4c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    cb50:	e0bfff17 	ldw	r2,-4(fp)
    cb54:	10800a17 	ldw	r2,40(r2)
    cb58:	10800037 	ldwio	r2,0(r2)
    cb5c:	e0bffe15 	stw	r2,-8(fp)
	// return the WI value
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_WI_MSK) ? 1 : 0 );
    cb60:	e0bffe17 	ldw	r2,-8(fp)
    cb64:	1080800c 	andi	r2,r2,512
    cb68:	1004c03a 	cmpne	r2,r2,zero
}
    cb6c:	e037883a 	mov	sp,fp
    cb70:	df000017 	ldw	fp,0(sp)
    cb74:	dec00104 	addi	sp,sp,4
    cb78:	f800283a 	ret

0000cb7c <alt_up_audio_reset_audio_core>:

void alt_up_audio_reset_audio_core(alt_up_audio_dev *audio)
{
    cb7c:	defffd04 	addi	sp,sp,-12
    cb80:	df000215 	stw	fp,8(sp)
    cb84:	df000204 	addi	fp,sp,8
    cb88:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    cb8c:	e0bfff17 	ldw	r2,-4(fp)
    cb90:	10800a17 	ldw	r2,40(r2)
    cb94:	10800037 	ldwio	r2,0(r2)
    cb98:	e0bffe15 	stw	r2,-8(fp)
	// set CR and CW to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CR_MSK;
    cb9c:	e0bffe17 	ldw	r2,-8(fp)
    cba0:	10800114 	ori	r2,r2,4
    cba4:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CW_MSK;
    cba8:	e0bffe17 	ldw	r2,-8(fp)
    cbac:	10800214 	ori	r2,r2,8
    cbb0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    cbb4:	e0bfff17 	ldw	r2,-4(fp)
    cbb8:	10800a17 	ldw	r2,40(r2)
    cbbc:	e0fffe17 	ldw	r3,-8(fp)
    cbc0:	10c00035 	stwio	r3,0(r2)
	// set CR and CW to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CR_MSK;
    cbc4:	e0fffe17 	ldw	r3,-8(fp)
    cbc8:	00bffec4 	movi	r2,-5
    cbcc:	1884703a 	and	r2,r3,r2
    cbd0:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CW_MSK;
    cbd4:	e0fffe17 	ldw	r3,-8(fp)
    cbd8:	00bffdc4 	movi	r2,-9
    cbdc:	1884703a 	and	r2,r3,r2
    cbe0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    cbe4:	e0bfff17 	ldw	r2,-4(fp)
    cbe8:	10800a17 	ldw	r2,40(r2)
    cbec:	e0fffe17 	ldw	r3,-8(fp)
    cbf0:	10c00035 	stwio	r3,0(r2)
}
    cbf4:	e037883a 	mov	sp,fp
    cbf8:	df000017 	ldw	fp,0(sp)
    cbfc:	dec00104 	addi	sp,sp,4
    cc00:	f800283a 	ret

0000cc04 <alt_up_audio_read_fifo_avail>:

/* Provides number of words of data available in the incoming FIFO: RALC or RARC */
unsigned int alt_up_audio_read_fifo_avail(alt_up_audio_dev *audio, int channel)
{
    cc04:	defffb04 	addi	sp,sp,-20
    cc08:	df000415 	stw	fp,16(sp)
    cc0c:	df000404 	addi	fp,sp,16
    cc10:	e13ffd15 	stw	r4,-12(fp)
    cc14:	e17ffe15 	stw	r5,-8(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
    cc18:	e0bffd17 	ldw	r2,-12(fp)
    cc1c:	10800a17 	ldw	r2,40(r2)
    cc20:	10800104 	addi	r2,r2,4
    cc24:	10800037 	ldwio	r2,0(r2)
    cc28:	e0bffc15 	stw	r2,-16(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
    cc2c:	e0bffe17 	ldw	r2,-8(fp)
    cc30:	1004c03a 	cmpne	r2,r2,zero
    cc34:	1000051e 	bne	r2,zero,cc4c <alt_up_audio_read_fifo_avail+0x48>
    cc38:	e0bffc17 	ldw	r2,-16(fp)
    cc3c:	10bfc00c 	andi	r2,r2,65280
    cc40:	1004d23a 	srli	r2,r2,8
    cc44:	e0bfff15 	stw	r2,-4(fp)
    cc48:	00000306 	br	cc58 <alt_up_audio_read_fifo_avail+0x54>
    cc4c:	e0bffc17 	ldw	r2,-16(fp)
    cc50:	10803fcc 	andi	r2,r2,255
    cc54:	e0bfff15 	stw	r2,-4(fp)
    cc58:	e0bfff17 	ldw	r2,-4(fp)
    cc5c:	e0bffc15 	stw	r2,-16(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
	return (fifospace);
    cc60:	e0bffc17 	ldw	r2,-16(fp)
}
    cc64:	e037883a 	mov	sp,fp
    cc68:	df000017 	ldw	fp,0(sp)
    cc6c:	dec00104 	addi	sp,sp,4
    cc70:	f800283a 	ret

0000cc74 <alt_up_audio_record_r>:
/* Checks if the read FIFO for the right channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
    cc74:	defff904 	addi	sp,sp,-28
    cc78:	dfc00615 	stw	ra,24(sp)
    cc7c:	df000515 	stw	fp,20(sp)
    cc80:	df000504 	addi	fp,sp,20
    cc84:	e13ffc15 	stw	r4,-16(fp)
    cc88:	e17ffd15 	stw	r5,-12(fp)
    cc8c:	e1bffe15 	stw	r6,-8(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_RIGHT);
    cc90:	e13ffc17 	ldw	r4,-16(fp)
    cc94:	01400044 	movi	r5,1
    cc98:	000cc040 	call	cc04 <alt_up_audio_read_fifo_avail>
    cc9c:	e0bffb15 	stw	r2,-20(fp)
	if (data_words <= BUF_THRESHOLD)
    cca0:	e0bffb17 	ldw	r2,-20(fp)
    cca4:	10801868 	cmpgeui	r2,r2,97
    cca8:	1000021e 	bne	r2,zero,ccb4 <alt_up_audio_record_r+0x40>
		return 0;
    ccac:	e03fff15 	stw	zero,-4(fp)
    ccb0:	00000606 	br	cccc <alt_up_audio_record_r+0x58>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
    ccb4:	e13ffc17 	ldw	r4,-16(fp)
    ccb8:	e17ffd17 	ldw	r5,-12(fp)
    ccbc:	e1bffe17 	ldw	r6,-8(fp)
    ccc0:	01c00044 	movi	r7,1
    ccc4:	000cea80 	call	cea8 <alt_up_audio_read_fifo>
    ccc8:	e0bfff15 	stw	r2,-4(fp)
    cccc:	e0bfff17 	ldw	r2,-4(fp)
}
    ccd0:	e037883a 	mov	sp,fp
    ccd4:	dfc00117 	ldw	ra,4(sp)
    ccd8:	df000017 	ldw	fp,0(sp)
    ccdc:	dec00204 	addi	sp,sp,8
    cce0:	f800283a 	ret

0000cce4 <alt_up_audio_record_l>:
/* Checks if the read FIFO for the left channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
    cce4:	defff904 	addi	sp,sp,-28
    cce8:	dfc00615 	stw	ra,24(sp)
    ccec:	df000515 	stw	fp,20(sp)
    ccf0:	df000504 	addi	fp,sp,20
    ccf4:	e13ffc15 	stw	r4,-16(fp)
    ccf8:	e17ffd15 	stw	r5,-12(fp)
    ccfc:	e1bffe15 	stw	r6,-8(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_LEFT);
    cd00:	e13ffc17 	ldw	r4,-16(fp)
    cd04:	000b883a 	mov	r5,zero
    cd08:	000cc040 	call	cc04 <alt_up_audio_read_fifo_avail>
    cd0c:	e0bffb15 	stw	r2,-20(fp)
	if (data_words <= BUF_THRESHOLD)
    cd10:	e0bffb17 	ldw	r2,-20(fp)
    cd14:	10801868 	cmpgeui	r2,r2,97
    cd18:	1000021e 	bne	r2,zero,cd24 <alt_up_audio_record_l+0x40>
		return 0;
    cd1c:	e03fff15 	stw	zero,-4(fp)
    cd20:	00000606 	br	cd3c <alt_up_audio_record_l+0x58>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
    cd24:	e13ffc17 	ldw	r4,-16(fp)
    cd28:	e17ffd17 	ldw	r5,-12(fp)
    cd2c:	e1bffe17 	ldw	r6,-8(fp)
    cd30:	000f883a 	mov	r7,zero
    cd34:	000cea80 	call	cea8 <alt_up_audio_read_fifo>
    cd38:	e0bfff15 	stw	r2,-4(fp)
    cd3c:	e0bfff17 	ldw	r2,-4(fp)
}
    cd40:	e037883a 	mov	sp,fp
    cd44:	dfc00117 	ldw	ra,4(sp)
    cd48:	df000017 	ldw	fp,0(sp)
    cd4c:	dec00204 	addi	sp,sp,8
    cd50:	f800283a 	ret

0000cd54 <alt_up_audio_write_fifo_space>:

/* Provides the amount of empty space available in the outgoing FIFO: WSLC or WSRC */
unsigned int alt_up_audio_write_fifo_space(alt_up_audio_dev *audio, int channel)
{
    cd54:	defffb04 	addi	sp,sp,-20
    cd58:	df000415 	stw	fp,16(sp)
    cd5c:	df000404 	addi	fp,sp,16
    cd60:	e13ffd15 	stw	r4,-12(fp)
    cd64:	e17ffe15 	stw	r5,-8(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
    cd68:	e0bffd17 	ldw	r2,-12(fp)
    cd6c:	10800a17 	ldw	r2,40(r2)
    cd70:	10800104 	addi	r2,r2,4
    cd74:	10800037 	ldwio	r2,0(r2)
    cd78:	e0bffc15 	stw	r2,-16(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
    cd7c:	e0bffe17 	ldw	r2,-8(fp)
    cd80:	1004c03a 	cmpne	r2,r2,zero
    cd84:	1000051e 	bne	r2,zero,cd9c <alt_up_audio_write_fifo_space+0x48>
    cd88:	e0bffc17 	ldw	r2,-16(fp)
    cd8c:	10bfc02c 	andhi	r2,r2,65280
    cd90:	1004d63a 	srli	r2,r2,24
    cd94:	e0bfff15 	stw	r2,-4(fp)
    cd98:	00000406 	br	cdac <alt_up_audio_write_fifo_space+0x58>
    cd9c:	e0bffc17 	ldw	r2,-16(fp)
    cda0:	10803fec 	andhi	r2,r2,255
    cda4:	1004d43a 	srli	r2,r2,16
    cda8:	e0bfff15 	stw	r2,-4(fp)
    cdac:	e0bfff17 	ldw	r2,-4(fp)
    cdb0:	e0bffc15 	stw	r2,-16(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
	return (fifospace);
    cdb4:	e0bffc17 	ldw	r2,-16(fp)
}
    cdb8:	e037883a 	mov	sp,fp
    cdbc:	df000017 	ldw	fp,0(sp)
    cdc0:	dec00104 	addi	sp,sp,4
    cdc4:	f800283a 	ret

0000cdc8 <alt_up_audio_play_r>:
/* Checks if the write FIFO for the right channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
    cdc8:	defff904 	addi	sp,sp,-28
    cdcc:	dfc00615 	stw	ra,24(sp)
    cdd0:	df000515 	stw	fp,20(sp)
    cdd4:	df000504 	addi	fp,sp,20
    cdd8:	e13ffc15 	stw	r4,-16(fp)
    cddc:	e17ffd15 	stw	r5,-12(fp)
    cde0:	e1bffe15 	stw	r6,-8(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_RIGHT);
    cde4:	e13ffc17 	ldw	r4,-16(fp)
    cde8:	01400044 	movi	r5,1
    cdec:	000cd540 	call	cd54 <alt_up_audio_write_fifo_space>
    cdf0:	e0bffb15 	stw	r2,-20(fp)
	if (space <= BUF_THRESHOLD)
    cdf4:	e0bffb17 	ldw	r2,-20(fp)
    cdf8:	10801868 	cmpgeui	r2,r2,97
    cdfc:	1000021e 	bne	r2,zero,ce08 <alt_up_audio_play_r+0x40>
		return 0;
    ce00:	e03fff15 	stw	zero,-4(fp)
    ce04:	00000606 	br	ce20 <alt_up_audio_play_r+0x58>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
    ce08:	e13ffc17 	ldw	r4,-16(fp)
    ce0c:	e17ffd17 	ldw	r5,-12(fp)
    ce10:	e1bffe17 	ldw	r6,-8(fp)
    ce14:	01c00044 	movi	r7,1
    ce18:	000cfac0 	call	cfac <alt_up_audio_write_fifo>
    ce1c:	e0bfff15 	stw	r2,-4(fp)
    ce20:	e0bfff17 	ldw	r2,-4(fp)
}
    ce24:	e037883a 	mov	sp,fp
    ce28:	dfc00117 	ldw	ra,4(sp)
    ce2c:	df000017 	ldw	fp,0(sp)
    ce30:	dec00204 	addi	sp,sp,8
    ce34:	f800283a 	ret

0000ce38 <alt_up_audio_play_l>:
/* Checks if the write FIFO for the left channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
    ce38:	defff904 	addi	sp,sp,-28
    ce3c:	dfc00615 	stw	ra,24(sp)
    ce40:	df000515 	stw	fp,20(sp)
    ce44:	df000504 	addi	fp,sp,20
    ce48:	e13ffc15 	stw	r4,-16(fp)
    ce4c:	e17ffd15 	stw	r5,-12(fp)
    ce50:	e1bffe15 	stw	r6,-8(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_LEFT);
    ce54:	e13ffc17 	ldw	r4,-16(fp)
    ce58:	000b883a 	mov	r5,zero
    ce5c:	000cd540 	call	cd54 <alt_up_audio_write_fifo_space>
    ce60:	e0bffb15 	stw	r2,-20(fp)
	if (space <= BUF_THRESHOLD)
    ce64:	e0bffb17 	ldw	r2,-20(fp)
    ce68:	10801868 	cmpgeui	r2,r2,97
    ce6c:	1000021e 	bne	r2,zero,ce78 <alt_up_audio_play_l+0x40>
		return 0;
    ce70:	e03fff15 	stw	zero,-4(fp)
    ce74:	00000606 	br	ce90 <alt_up_audio_play_l+0x58>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
    ce78:	e13ffc17 	ldw	r4,-16(fp)
    ce7c:	e17ffd17 	ldw	r5,-12(fp)
    ce80:	e1bffe17 	ldw	r6,-8(fp)
    ce84:	000f883a 	mov	r7,zero
    ce88:	000cfac0 	call	cfac <alt_up_audio_write_fifo>
    ce8c:	e0bfff15 	stw	r2,-4(fp)
    ce90:	e0bfff17 	ldw	r2,-4(fp)
}
    ce94:	e037883a 	mov	sp,fp
    ce98:	dfc00117 	ldw	ra,4(sp)
    ce9c:	df000017 	ldw	fp,0(sp)
    cea0:	dec00204 	addi	sp,sp,8
    cea4:	f800283a 	ret

0000cea8 <alt_up_audio_read_fifo>:

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
    cea8:	defff604 	addi	sp,sp,-40
    ceac:	df000915 	stw	fp,36(sp)
    ceb0:	df000904 	addi	fp,sp,36
    ceb4:	e13ff915 	stw	r4,-28(fp)
    ceb8:	e17ffa15 	stw	r5,-24(fp)
    cebc:	e1bffb15 	stw	r6,-20(fp)
    cec0:	e1fffc15 	stw	r7,-16(fp)
	unsigned int fifospace;
	int count = 0;
    cec4:	e03ff715 	stw	zero,-36(fp)
	while ( count < len ) 
    cec8:	00003006 	br	cf8c <alt_up_audio_read_fifo+0xe4>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
    cecc:	e0bff917 	ldw	r2,-28(fp)
    ced0:	10800a17 	ldw	r2,40(r2)
    ced4:	10800104 	addi	r2,r2,4
    ced8:	10800037 	ldwio	r2,0(r2)
    cedc:	e0bff815 	stw	r2,-32(fp)
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
    cee0:	e0bffc17 	ldw	r2,-16(fp)
    cee4:	1004c03a 	cmpne	r2,r2,zero
    cee8:	1000051e 	bne	r2,zero,cf00 <alt_up_audio_read_fifo+0x58>
    ceec:	e0bff817 	ldw	r2,-32(fp)
    cef0:	10bfc00c 	andi	r2,r2,65280
    cef4:	1004d23a 	srli	r2,r2,8
    cef8:	e0bfff15 	stw	r2,-4(fp)
    cefc:	00000306 	br	cf0c <alt_up_audio_read_fifo+0x64>
    cf00:	e0bff817 	ldw	r2,-32(fp)
    cf04:	10803fcc 	andi	r2,r2,255
    cf08:	e0bfff15 	stw	r2,-4(fp)
    cf0c:	e0bfff17 	ldw	r2,-4(fp)
    cf10:	e0bff815 	stw	r2,-32(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
    cf14:	e0bff817 	ldw	r2,-32(fp)
    cf18:	1005003a 	cmpeq	r2,r2,zero
    cf1c:	10001e1e 	bne	r2,zero,cf98 <alt_up_audio_read_fifo+0xf0>
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
    cf20:	e0bff717 	ldw	r2,-36(fp)
    cf24:	1085883a 	add	r2,r2,r2
    cf28:	1085883a 	add	r2,r2,r2
    cf2c:	1007883a 	mov	r3,r2
    cf30:	e0bffa17 	ldw	r2,-24(fp)
    cf34:	1887883a 	add	r3,r3,r2
    cf38:	e0fffe15 	stw	r3,-8(fp)
    cf3c:	e0bffc17 	ldw	r2,-16(fp)
    cf40:	1004c03a 	cmpne	r2,r2,zero
    cf44:	1000061e 	bne	r2,zero,cf60 <alt_up_audio_read_fifo+0xb8>
    cf48:	e0bff917 	ldw	r2,-28(fp)
    cf4c:	10800a17 	ldw	r2,40(r2)
    cf50:	10800204 	addi	r2,r2,8
    cf54:	10800037 	ldwio	r2,0(r2)
    cf58:	e0bffd15 	stw	r2,-12(fp)
    cf5c:	00000506 	br	cf74 <alt_up_audio_read_fifo+0xcc>
    cf60:	e0bff917 	ldw	r2,-28(fp)
    cf64:	10800a17 	ldw	r2,40(r2)
    cf68:	10800304 	addi	r2,r2,12
    cf6c:	10800037 	ldwio	r2,0(r2)
    cf70:	e0bffd15 	stw	r2,-12(fp)
    cf74:	e0fffd17 	ldw	r3,-12(fp)
    cf78:	e0bffe17 	ldw	r2,-8(fp)
    cf7c:	10c00015 	stw	r3,0(r2)
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
			count ++;
    cf80:	e0bff717 	ldw	r2,-36(fp)
    cf84:	10800044 	addi	r2,r2,1
    cf88:	e0bff715 	stw	r2,-36(fp)

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
    cf8c:	e0fff717 	ldw	r3,-36(fp)
    cf90:	e0bffb17 	ldw	r2,-20(fp)
    cf94:	18bfcd16 	blt	r3,r2,cecc <alt_up_audio_read_fifo+0x24>
		{
			// no more data to read
			break;
		}
	}
	return count;
    cf98:	e0bff717 	ldw	r2,-36(fp)
}
    cf9c:	e037883a 	mov	sp,fp
    cfa0:	df000017 	ldw	fp,0(sp)
    cfa4:	dec00104 	addi	sp,sp,4
    cfa8:	f800283a 	ret

0000cfac <alt_up_audio_write_fifo>:

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
    cfac:	defff804 	addi	sp,sp,-32
    cfb0:	df000715 	stw	fp,28(sp)
    cfb4:	df000704 	addi	fp,sp,28
    cfb8:	e13ffb15 	stw	r4,-20(fp)
    cfbc:	e17ffc15 	stw	r5,-16(fp)
    cfc0:	e1bffd15 	stw	r6,-12(fp)
    cfc4:	e1fffe15 	stw	r7,-8(fp)
	unsigned int fifospace;
	int count = 0;
    cfc8:	e03ff915 	stw	zero,-28(fp)
	while ( count < len ) 
    cfcc:	00003a06 	br	d0b8 <alt_up_audio_write_fifo+0x10c>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
    cfd0:	e0bffb17 	ldw	r2,-20(fp)
    cfd4:	10800a17 	ldw	r2,40(r2)
    cfd8:	10800104 	addi	r2,r2,4
    cfdc:	10800037 	ldwio	r2,0(r2)
    cfe0:	e0bffa15 	stw	r2,-24(fp)
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
    cfe4:	e0bffe17 	ldw	r2,-8(fp)
    cfe8:	1004c03a 	cmpne	r2,r2,zero
    cfec:	1000051e 	bne	r2,zero,d004 <alt_up_audio_write_fifo+0x58>
    cff0:	e0bffa17 	ldw	r2,-24(fp)
    cff4:	10bfc02c 	andhi	r2,r2,65280
    cff8:	1004d63a 	srli	r2,r2,24
    cffc:	e0bfff15 	stw	r2,-4(fp)
    d000:	00000406 	br	d014 <alt_up_audio_write_fifo+0x68>
    d004:	e0bffa17 	ldw	r2,-24(fp)
    d008:	10803fec 	andhi	r2,r2,255
    d00c:	1004d43a 	srli	r2,r2,16
    d010:	e0bfff15 	stw	r2,-4(fp)
    d014:	e0bfff17 	ldw	r2,-4(fp)
    d018:	e0bffa15 	stw	r2,-24(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
		if (fifospace > 0) 
    d01c:	e0bffa17 	ldw	r2,-24(fp)
    d020:	1005003a 	cmpeq	r2,r2,zero
    d024:	1000271e 	bne	r2,zero,d0c4 <alt_up_audio_write_fifo+0x118>
		{
			if (channel == ALT_UP_AUDIO_LEFT) 
    d028:	e0bffe17 	ldw	r2,-8(fp)
    d02c:	1004c03a 	cmpne	r2,r2,zero
    d030:	1000111e 	bne	r2,zero,d078 <alt_up_audio_write_fifo+0xcc>
				IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, buf[count++]);
    d034:	e0bffb17 	ldw	r2,-20(fp)
    d038:	10800a17 	ldw	r2,40(r2)
    d03c:	11000204 	addi	r4,r2,8
    d040:	e0bff917 	ldw	r2,-28(fp)
    d044:	1085883a 	add	r2,r2,r2
    d048:	1085883a 	add	r2,r2,r2
    d04c:	1007883a 	mov	r3,r2
    d050:	e0bffc17 	ldw	r2,-16(fp)
    d054:	1885883a 	add	r2,r3,r2
    d058:	10800017 	ldw	r2,0(r2)
    d05c:	1007883a 	mov	r3,r2
    d060:	e0bff917 	ldw	r2,-28(fp)
    d064:	10800044 	addi	r2,r2,1
    d068:	e0bff915 	stw	r2,-28(fp)
    d06c:	2005883a 	mov	r2,r4
    d070:	10c00035 	stwio	r3,0(r2)
    d074:	00001006 	br	d0b8 <alt_up_audio_write_fifo+0x10c>
			else
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
    d078:	e0bffb17 	ldw	r2,-20(fp)
    d07c:	10800a17 	ldw	r2,40(r2)
    d080:	11000304 	addi	r4,r2,12
    d084:	e0bff917 	ldw	r2,-28(fp)
    d088:	1085883a 	add	r2,r2,r2
    d08c:	1085883a 	add	r2,r2,r2
    d090:	1007883a 	mov	r3,r2
    d094:	e0bffc17 	ldw	r2,-16(fp)
    d098:	1885883a 	add	r2,r3,r2
    d09c:	10800017 	ldw	r2,0(r2)
    d0a0:	1007883a 	mov	r3,r2
    d0a4:	e0bff917 	ldw	r2,-28(fp)
    d0a8:	10800044 	addi	r2,r2,1
    d0ac:	e0bff915 	stw	r2,-28(fp)
    d0b0:	2005883a 	mov	r2,r4
    d0b4:	10c00035 	stwio	r3,0(r2)

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
    d0b8:	e0fff917 	ldw	r3,-28(fp)
    d0bc:	e0bffd17 	ldw	r2,-12(fp)
    d0c0:	18bfc316 	blt	r3,r2,cfd0 <alt_up_audio_write_fifo+0x24>
		{
			// no more space to write
			break;
		}
	}
	return count;
    d0c4:	e0bff917 	ldw	r2,-28(fp)
}
    d0c8:	e037883a 	mov	sp,fp
    d0cc:	df000017 	ldw	fp,0(sp)
    d0d0:	dec00104 	addi	sp,sp,4
    d0d4:	f800283a 	ret

0000d0d8 <alt_up_audio_read_fifo_head>:

unsigned int alt_up_audio_read_fifo_head(alt_up_audio_dev *audio, int channel)
{
    d0d8:	defffc04 	addi	sp,sp,-16
    d0dc:	df000315 	stw	fp,12(sp)
    d0e0:	df000304 	addi	fp,sp,12
    d0e4:	e13ffd15 	stw	r4,-12(fp)
    d0e8:	e17ffe15 	stw	r5,-8(fp)
	return ( (channel == ALT_UP_AUDIO_LEFT) ?  IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
    d0ec:	e0bffe17 	ldw	r2,-8(fp)
    d0f0:	1004c03a 	cmpne	r2,r2,zero
    d0f4:	1000061e 	bne	r2,zero,d110 <alt_up_audio_read_fifo_head+0x38>
    d0f8:	e0bffd17 	ldw	r2,-12(fp)
    d0fc:	10800a17 	ldw	r2,40(r2)
    d100:	10800204 	addi	r2,r2,8
    d104:	10800037 	ldwio	r2,0(r2)
    d108:	e0bfff15 	stw	r2,-4(fp)
    d10c:	00000506 	br	d124 <alt_up_audio_read_fifo_head+0x4c>
    d110:	e0bffd17 	ldw	r2,-12(fp)
    d114:	10800a17 	ldw	r2,40(r2)
    d118:	10800304 	addi	r2,r2,12
    d11c:	10800037 	ldwio	r2,0(r2)
    d120:	e0bfff15 	stw	r2,-4(fp)
    d124:	e0bfff17 	ldw	r2,-4(fp)
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base) );
}
    d128:	e037883a 	mov	sp,fp
    d12c:	df000017 	ldw	fp,0(sp)
    d130:	dec00104 	addi	sp,sp,4
    d134:	f800283a 	ret

0000d138 <alt_up_audio_write_fifo_head>:

void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
    d138:	defffc04 	addi	sp,sp,-16
    d13c:	df000315 	stw	fp,12(sp)
    d140:	df000304 	addi	fp,sp,12
    d144:	e13ffd15 	stw	r4,-12(fp)
    d148:	e17ffe15 	stw	r5,-8(fp)
    d14c:	e1bfff15 	stw	r6,-4(fp)
	if (channel == ALT_UP_AUDIO_LEFT) 
    d150:	e0bfff17 	ldw	r2,-4(fp)
    d154:	1004c03a 	cmpne	r2,r2,zero
    d158:	1000061e 	bne	r2,zero,d174 <alt_up_audio_write_fifo_head+0x3c>
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
    d15c:	e0bffd17 	ldw	r2,-12(fp)
    d160:	10800a17 	ldw	r2,40(r2)
    d164:	10800204 	addi	r2,r2,8
    d168:	e0fffe17 	ldw	r3,-8(fp)
    d16c:	10c00035 	stwio	r3,0(r2)
    d170:	00000506 	br	d188 <alt_up_audio_write_fifo_head+0x50>
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
    d174:	e0bffd17 	ldw	r2,-12(fp)
    d178:	10800a17 	ldw	r2,40(r2)
    d17c:	10800304 	addi	r2,r2,12
    d180:	e0fffe17 	ldw	r3,-8(fp)
    d184:	10c00035 	stwio	r3,0(r2)
}
    d188:	e037883a 	mov	sp,fp
    d18c:	df000017 	ldw	fp,0(sp)
    d190:	dec00104 	addi	sp,sp,4
    d194:	f800283a 	ret

0000d198 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
    d198:	defffc04 	addi	sp,sp,-16
    d19c:	df000315 	stw	fp,12(sp)
    d1a0:	df000304 	addi	fp,sp,12
    d1a4:	e13ffe15 	stw	r4,-8(fp)
    d1a8:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
    d1ac:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
    d1b0:	e0bfff17 	ldw	r2,-4(fp)
    d1b4:	1004c03a 	cmpne	r2,r2,zero
    d1b8:	1000061e 	bne	r2,zero,d1d4 <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
    d1bc:	e0bffe17 	ldw	r2,-8(fp)
    d1c0:	1007883a 	mov	r3,r2
    d1c4:	e0bffd03 	ldbu	r2,-12(fp)
    d1c8:	10c4b03a 	or	r2,r2,r3
    d1cc:	e0bffd05 	stb	r2,-12(fp)
    d1d0:	00000806 	br	d1f4 <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
    d1d4:	e0bffe17 	ldw	r2,-8(fp)
    d1d8:	1007883a 	mov	r3,r2
    d1dc:	e0bffd03 	ldbu	r2,-12(fp)
    d1e0:	10c4b03a 	or	r2,r2,r3
    d1e4:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
    d1e8:	e0bffd03 	ldbu	r2,-12(fp)
    d1ec:	10801014 	ori	r2,r2,64
    d1f0:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
    d1f4:	e0fffd03 	ldbu	r3,-12(fp)
    d1f8:	00bfe004 	movi	r2,-128
    d1fc:	1884b03a 	or	r2,r3,r2
    d200:	10803fcc 	andi	r2,r2,255
}
    d204:	e037883a 	mov	sp,fp
    d208:	df000017 	ldw	fp,0(sp)
    d20c:	dec00104 	addi	sp,sp,4
    d210:	f800283a 	ret

0000d214 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
    d214:	defffd04 	addi	sp,sp,-12
    d218:	df000215 	stw	fp,8(sp)
    d21c:	df000204 	addi	fp,sp,8
    d220:	e13ffe15 	stw	r4,-8(fp)
    d224:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
    d228:	e0bffe17 	ldw	r2,-8(fp)
    d22c:	10800a17 	ldw	r2,40(r2)
    d230:	e0ffff03 	ldbu	r3,-4(fp)
    d234:	10c00025 	stbio	r3,0(r2)
}
    d238:	e037883a 	mov	sp,fp
    d23c:	df000017 	ldw	fp,0(sp)
    d240:	dec00104 	addi	sp,sp,4
    d244:	f800283a 	ret

0000d248 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
    d248:	defffe04 	addi	sp,sp,-8
    d24c:	df000115 	stw	fp,4(sp)
    d250:	df000104 	addi	fp,sp,4
    d254:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
    d258:	e0bfff17 	ldw	r2,-4(fp)
    d25c:	10800a17 	ldw	r2,40(r2)
    d260:	1007883a 	mov	r3,r2
    d264:	00800044 	movi	r2,1
    d268:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
    d26c:	e037883a 	mov	sp,fp
    d270:	df000017 	ldw	fp,0(sp)
    d274:	dec00104 	addi	sp,sp,4
    d278:	f800283a 	ret

0000d27c <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
    d27c:	defffc04 	addi	sp,sp,-16
    d280:	dfc00315 	stw	ra,12(sp)
    d284:	df000215 	stw	fp,8(sp)
    d288:	df000204 	addi	fp,sp,8
    d28c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
    d290:	e13fff17 	ldw	r4,-4(fp)
    d294:	01400074 	movhi	r5,1
    d298:	294ef704 	addi	r5,r5,15324
    d29c:	00104780 	call	10478 <alt_find_dev>
    d2a0:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    d2a4:	e0bffe17 	ldw	r2,-8(fp)
}
    d2a8:	e037883a 	mov	sp,fp
    d2ac:	dfc00117 	ldw	ra,4(sp)
    d2b0:	df000017 	ldw	fp,0(sp)
    d2b4:	dec00204 	addi	sp,sp,8
    d2b8:	f800283a 	ret

0000d2bc <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
    d2bc:	defffb04 	addi	sp,sp,-20
    d2c0:	df000415 	stw	fp,16(sp)
    d2c4:	df000404 	addi	fp,sp,16
    d2c8:	e13ffd15 	stw	r4,-12(fp)
    d2cc:	e17ffe15 	stw	r5,-8(fp)
    d2d0:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
    d2d4:	e03ffc15 	stw	zero,-16(fp)
    d2d8:	00000f06 	br	d318 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
    d2dc:	e0bffd17 	ldw	r2,-12(fp)
    d2e0:	10800a17 	ldw	r2,40(r2)
    d2e4:	11000044 	addi	r4,r2,1
    d2e8:	e0fffc17 	ldw	r3,-16(fp)
    d2ec:	e0bffe17 	ldw	r2,-8(fp)
    d2f0:	1885883a 	add	r2,r3,r2
    d2f4:	10800003 	ldbu	r2,0(r2)
    d2f8:	10c03fcc 	andi	r3,r2,255
    d2fc:	18c0201c 	xori	r3,r3,128
    d300:	18ffe004 	addi	r3,r3,-128
    d304:	2005883a 	mov	r2,r4
    d308:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
    d30c:	e0bffc17 	ldw	r2,-16(fp)
    d310:	10800044 	addi	r2,r2,1
    d314:	e0bffc15 	stw	r2,-16(fp)
    d318:	e0fffc17 	ldw	r3,-16(fp)
    d31c:	e0bfff17 	ldw	r2,-4(fp)
    d320:	18bfee36 	bltu	r3,r2,d2dc <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
    d324:	e037883a 	mov	sp,fp
    d328:	df000017 	ldw	fp,0(sp)
    d32c:	dec00104 	addi	sp,sp,4
    d330:	f800283a 	ret

0000d334 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
    d334:	defffd04 	addi	sp,sp,-12
    d338:	df000215 	stw	fp,8(sp)
    d33c:	df000204 	addi	fp,sp,8
    d340:	e13ffe15 	stw	r4,-8(fp)
    d344:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
    d348:	00000d06 	br	d380 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
    d34c:	e0bffe17 	ldw	r2,-8(fp)
    d350:	10800a17 	ldw	r2,40(r2)
    d354:	11000044 	addi	r4,r2,1
    d358:	e0bfff17 	ldw	r2,-4(fp)
    d35c:	10800003 	ldbu	r2,0(r2)
    d360:	10c03fcc 	andi	r3,r2,255
    d364:	18c0201c 	xori	r3,r3,128
    d368:	18ffe004 	addi	r3,r3,-128
    d36c:	2005883a 	mov	r2,r4
    d370:	10c00025 	stbio	r3,0(r2)
		++ptr;
    d374:	e0bfff17 	ldw	r2,-4(fp)
    d378:	10800044 	addi	r2,r2,1
    d37c:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
    d380:	e0bfff17 	ldw	r2,-4(fp)
    d384:	10800003 	ldbu	r2,0(r2)
    d388:	10803fcc 	andi	r2,r2,255
    d38c:	1080201c 	xori	r2,r2,128
    d390:	10bfe004 	addi	r2,r2,-128
    d394:	1004c03a 	cmpne	r2,r2,zero
    d398:	103fec1e 	bne	r2,zero,d34c <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
    d39c:	e037883a 	mov	sp,fp
    d3a0:	df000017 	ldw	fp,0(sp)
    d3a4:	dec00104 	addi	sp,sp,4
    d3a8:	f800283a 	ret

0000d3ac <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
    d3ac:	defffb04 	addi	sp,sp,-20
    d3b0:	dfc00415 	stw	ra,16(sp)
    d3b4:	df000315 	stw	fp,12(sp)
    d3b8:	df000304 	addi	fp,sp,12
    d3bc:	e13ffd15 	stw	r4,-12(fp)
    d3c0:	e17ffe15 	stw	r5,-8(fp)
    d3c4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
    d3c8:	e0bffd17 	ldw	r2,-12(fp)
    d3cc:	10800017 	ldw	r2,0(r2)
    d3d0:	1009883a 	mov	r4,r2
    d3d4:	e1bfff17 	ldw	r6,-4(fp)
    d3d8:	e17ffe17 	ldw	r5,-8(fp)
    d3dc:	000d2bc0 	call	d2bc <alt_up_character_lcd_write>
	return 0;
    d3e0:	0005883a 	mov	r2,zero
}
    d3e4:	e037883a 	mov	sp,fp
    d3e8:	dfc00117 	ldw	ra,4(sp)
    d3ec:	df000017 	ldw	fp,0(sp)
    d3f0:	dec00204 	addi	sp,sp,8
    d3f4:	f800283a 	ret

0000d3f8 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
    d3f8:	defff904 	addi	sp,sp,-28
    d3fc:	dfc00615 	stw	ra,24(sp)
    d400:	df000515 	stw	fp,20(sp)
    d404:	df000504 	addi	fp,sp,20
    d408:	e13ffc15 	stw	r4,-16(fp)
    d40c:	e17ffd15 	stw	r5,-12(fp)
    d410:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
    d414:	e0bffd17 	ldw	r2,-12(fp)
    d418:	10800a28 	cmpgeui	r2,r2,40
    d41c:	1000031e 	bne	r2,zero,d42c <alt_up_character_lcd_set_cursor_pos+0x34>
    d420:	e0bffe17 	ldw	r2,-8(fp)
    d424:	108000b0 	cmpltui	r2,r2,2
    d428:	1000031e 	bne	r2,zero,d438 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
    d42c:	00bfffc4 	movi	r2,-1
    d430:	e0bfff15 	stw	r2,-4(fp)
    d434:	00000806 	br	d458 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    d438:	e13ffd17 	ldw	r4,-12(fp)
    d43c:	e17ffe17 	ldw	r5,-8(fp)
    d440:	000d1980 	call	d198 <get_DDRAM_addr>
    d444:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
    d448:	e17ffb03 	ldbu	r5,-20(fp)
    d44c:	e13ffc17 	ldw	r4,-16(fp)
    d450:	000d2140 	call	d214 <alt_up_character_lcd_send_cmd>
	return 0;
    d454:	e03fff15 	stw	zero,-4(fp)
    d458:	e0bfff17 	ldw	r2,-4(fp)
}
    d45c:	e037883a 	mov	sp,fp
    d460:	dfc00117 	ldw	ra,4(sp)
    d464:	df000017 	ldw	fp,0(sp)
    d468:	dec00204 	addi	sp,sp,8
    d46c:	f800283a 	ret

0000d470 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    d470:	defff904 	addi	sp,sp,-28
    d474:	dfc00615 	stw	ra,24(sp)
    d478:	df000515 	stw	fp,20(sp)
    d47c:	df000504 	addi	fp,sp,20
    d480:	e13ffc15 	stw	r4,-16(fp)
    d484:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
    d488:	e0bffd17 	ldw	r2,-12(fp)
    d48c:	1005003a 	cmpeq	r2,r2,zero
    d490:	10001e1e 	bne	r2,zero,d50c <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
    d494:	e0bffd17 	ldw	r2,-12(fp)
    d498:	10800050 	cmplti	r2,r2,1
    d49c:	1000031e 	bne	r2,zero,d4ac <alt_up_character_lcd_shift_cursor+0x3c>
    d4a0:	00800504 	movi	r2,20
    d4a4:	e0bfff05 	stb	r2,-4(fp)
    d4a8:	00000206 	br	d4b4 <alt_up_character_lcd_shift_cursor+0x44>
    d4ac:	00c00404 	movi	r3,16
    d4b0:	e0ffff05 	stb	r3,-4(fp)
    d4b4:	e0bfff03 	ldbu	r2,-4(fp)
    d4b8:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
    d4bc:	e0fffd17 	ldw	r3,-12(fp)
    d4c0:	e0fffe15 	stw	r3,-8(fp)
    d4c4:	e0fffe17 	ldw	r3,-8(fp)
    d4c8:	1804403a 	cmpge	r2,r3,zero
    d4cc:	1000031e 	bne	r2,zero,d4dc <alt_up_character_lcd_shift_cursor+0x6c>
    d4d0:	e0bffe17 	ldw	r2,-8(fp)
    d4d4:	0085c83a 	sub	r2,zero,r2
    d4d8:	e0bffe15 	stw	r2,-8(fp)
    d4dc:	e0fffe17 	ldw	r3,-8(fp)
    d4e0:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
    d4e4:	00000306 	br	d4f4 <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    d4e8:	e17ffb43 	ldbu	r5,-19(fp)
    d4ec:	e13ffc17 	ldw	r4,-16(fp)
    d4f0:	000d2140 	call	d214 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    d4f4:	e0bffb03 	ldbu	r2,-20(fp)
    d4f8:	10bfffc4 	addi	r2,r2,-1
    d4fc:	e0bffb05 	stb	r2,-20(fp)
    d500:	e0bffb03 	ldbu	r2,-20(fp)
    d504:	10803fd8 	cmpnei	r2,r2,255
    d508:	103ff71e 	bne	r2,zero,d4e8 <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    d50c:	e037883a 	mov	sp,fp
    d510:	dfc00117 	ldw	ra,4(sp)
    d514:	df000017 	ldw	fp,0(sp)
    d518:	dec00204 	addi	sp,sp,8
    d51c:	f800283a 	ret

0000d520 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    d520:	defff904 	addi	sp,sp,-28
    d524:	dfc00615 	stw	ra,24(sp)
    d528:	df000515 	stw	fp,20(sp)
    d52c:	df000504 	addi	fp,sp,20
    d530:	e13ffc15 	stw	r4,-16(fp)
    d534:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
    d538:	e0bffd17 	ldw	r2,-12(fp)
    d53c:	1005003a 	cmpeq	r2,r2,zero
    d540:	10001e1e 	bne	r2,zero,d5bc <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
    d544:	e0bffd17 	ldw	r2,-12(fp)
    d548:	10800050 	cmplti	r2,r2,1
    d54c:	1000031e 	bne	r2,zero,d55c <alt_up_character_lcd_shift_display+0x3c>
    d550:	00800704 	movi	r2,28
    d554:	e0bfff05 	stb	r2,-4(fp)
    d558:	00000206 	br	d564 <alt_up_character_lcd_shift_display+0x44>
    d55c:	00c00604 	movi	r3,24
    d560:	e0ffff05 	stb	r3,-4(fp)
    d564:	e0bfff03 	ldbu	r2,-4(fp)
    d568:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
    d56c:	e0fffd17 	ldw	r3,-12(fp)
    d570:	e0fffe15 	stw	r3,-8(fp)
    d574:	e0fffe17 	ldw	r3,-8(fp)
    d578:	1804403a 	cmpge	r2,r3,zero
    d57c:	1000031e 	bne	r2,zero,d58c <alt_up_character_lcd_shift_display+0x6c>
    d580:	e0bffe17 	ldw	r2,-8(fp)
    d584:	0085c83a 	sub	r2,zero,r2
    d588:	e0bffe15 	stw	r2,-8(fp)
    d58c:	e0fffe17 	ldw	r3,-8(fp)
    d590:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
    d594:	00000306 	br	d5a4 <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    d598:	e17ffb43 	ldbu	r5,-19(fp)
    d59c:	e13ffc17 	ldw	r4,-16(fp)
    d5a0:	000d2140 	call	d214 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    d5a4:	e0bffb03 	ldbu	r2,-20(fp)
    d5a8:	10bfffc4 	addi	r2,r2,-1
    d5ac:	e0bffb05 	stb	r2,-20(fp)
    d5b0:	e0bffb03 	ldbu	r2,-20(fp)
    d5b4:	10803fd8 	cmpnei	r2,r2,255
    d5b8:	103ff71e 	bne	r2,zero,d598 <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    d5bc:	e037883a 	mov	sp,fp
    d5c0:	dfc00117 	ldw	ra,4(sp)
    d5c4:	df000017 	ldw	fp,0(sp)
    d5c8:	dec00204 	addi	sp,sp,8
    d5cc:	f800283a 	ret

0000d5d0 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
    d5d0:	defff904 	addi	sp,sp,-28
    d5d4:	dfc00615 	stw	ra,24(sp)
    d5d8:	df000515 	stw	fp,20(sp)
    d5dc:	df000504 	addi	fp,sp,20
    d5e0:	e13ffc15 	stw	r4,-16(fp)
    d5e4:	e17ffd15 	stw	r5,-12(fp)
    d5e8:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
    d5ec:	e0bffd17 	ldw	r2,-12(fp)
    d5f0:	10800a28 	cmpgeui	r2,r2,40
    d5f4:	1000031e 	bne	r2,zero,d604 <alt_up_character_lcd_erase_pos+0x34>
    d5f8:	e0bffe17 	ldw	r2,-8(fp)
    d5fc:	108000b0 	cmpltui	r2,r2,2
    d600:	1000031e 	bne	r2,zero,d610 <alt_up_character_lcd_erase_pos+0x40>
		return -1;
    d604:	00bfffc4 	movi	r2,-1
    d608:	e0bfff15 	stw	r2,-4(fp)
    d60c:	00000e06 	br	d648 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    d610:	e13ffd17 	ldw	r4,-12(fp)
    d614:	e17ffe17 	ldw	r5,-8(fp)
    d618:	000d1980 	call	d198 <get_DDRAM_addr>
    d61c:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
    d620:	e17ffb03 	ldbu	r5,-20(fp)
    d624:	e13ffc17 	ldw	r4,-16(fp)
    d628:	000d2140 	call	d214 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
    d62c:	e0bffc17 	ldw	r2,-16(fp)
    d630:	10800a17 	ldw	r2,40(r2)
    d634:	10800044 	addi	r2,r2,1
    d638:	1007883a 	mov	r3,r2
    d63c:	00800084 	movi	r2,2
    d640:	18800025 	stbio	r2,0(r3)
	return 0;
    d644:	e03fff15 	stw	zero,-4(fp)
    d648:	e0bfff17 	ldw	r2,-4(fp)
}
    d64c:	e037883a 	mov	sp,fp
    d650:	dfc00117 	ldw	ra,4(sp)
    d654:	df000017 	ldw	fp,0(sp)
    d658:	dec00204 	addi	sp,sp,8
    d65c:	f800283a 	ret

0000d660 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
    d660:	defffd04 	addi	sp,sp,-12
    d664:	dfc00215 	stw	ra,8(sp)
    d668:	df000115 	stw	fp,4(sp)
    d66c:	df000104 	addi	fp,sp,4
    d670:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
    d674:	e13fff17 	ldw	r4,-4(fp)
    d678:	01400304 	movi	r5,12
    d67c:	000d2140 	call	d214 <alt_up_character_lcd_send_cmd>
}
    d680:	e037883a 	mov	sp,fp
    d684:	dfc00117 	ldw	ra,4(sp)
    d688:	df000017 	ldw	fp,0(sp)
    d68c:	dec00204 	addi	sp,sp,8
    d690:	f800283a 	ret

0000d694 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
    d694:	defffd04 	addi	sp,sp,-12
    d698:	dfc00215 	stw	ra,8(sp)
    d69c:	df000115 	stw	fp,4(sp)
    d6a0:	df000104 	addi	fp,sp,4
    d6a4:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
    d6a8:	e13fff17 	ldw	r4,-4(fp)
    d6ac:	014003c4 	movi	r5,15
    d6b0:	000d2140 	call	d214 <alt_up_character_lcd_send_cmd>
}
    d6b4:	e037883a 	mov	sp,fp
    d6b8:	dfc00117 	ldw	ra,4(sp)
    d6bc:	df000017 	ldw	fp,0(sp)
    d6c0:	dec00204 	addi	sp,sp,8
    d6c4:	f800283a 	ret

0000d6c8 <alt_up_ethernet_init>:
#include "altera_up_avalon_ethernet.h"
#include "altera_up_avalon_ethernet_regs.h"
#include "altera_up_avalon_ethernet_low_level_driver.h"

void alt_up_ethernet_init(alt_up_ethernet_dev *ethernet)
{
    d6c8:	defffb04 	addi	sp,sp,-20
    d6cc:	dfc00415 	stw	ra,16(sp)
    d6d0:	df000315 	stw	fp,12(sp)
    d6d4:	df000304 	addi	fp,sp,12
    d6d8:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned int base = ethernet->base;
    d6dc:	e0bfff17 	ldw	r2,-4(fp)
    d6e0:	10800a17 	ldw	r2,40(r2)
    d6e4:	e0bffe15 	stw	r2,-8(fp)
	int i;

	// Power on the internal PHY
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_GPR, 0x00 );
    d6e8:	e13ffe17 	ldw	r4,-8(fp)
    d6ec:	014007c4 	movi	r5,31
    d6f0:	000d883a 	mov	r6,zero
    d6f4:	000d8540 	call	d854 <alt_up_ethernet_reg_write>

	// Software Reset of the Ethernet chip
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_NCR, 0x01 );
    d6f8:	e13ffe17 	ldw	r4,-8(fp)
    d6fc:	000b883a 	mov	r5,zero
    d700:	01800044 	movi	r6,1
    d704:	000d8540 	call	d854 <alt_up_ethernet_reg_write>
	usleep(10);
    d708:	01000284 	movi	r4,10
    d70c:	0010ae00 	call	10ae0 <usleep>
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_NCR, 0x00 );
    d710:	e13ffe17 	ldw	r4,-8(fp)
    d714:	000b883a 	mov	r5,zero
    d718:	000d883a 	mov	r6,zero
    d71c:	000d8540 	call	d854 <alt_up_ethernet_reg_write>
	usleep(1);
    d720:	01000044 	movi	r4,1
    d724:	0010ae00 	call	10ae0 <usleep>

	// Initialize the MAC Address
	for (i = 0; i < 6; i++) 
    d728:	e03ffd15 	stw	zero,-12(fp)
    d72c:	00000e06 	br	d768 <alt_up_ethernet_init+0xa0>
		alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_PAR + i, ethernet->mac_addr[i] );
    d730:	e0bffd17 	ldw	r2,-12(fp)
    d734:	10800404 	addi	r2,r2,16
    d738:	100b883a 	mov	r5,r2
    d73c:	e0fffd17 	ldw	r3,-12(fp)
    d740:	e0bfff17 	ldw	r2,-4(fp)
    d744:	1885883a 	add	r2,r3,r2
    d748:	10800d04 	addi	r2,r2,52
    d74c:	10800003 	ldbu	r2,0(r2)
    d750:	11803fcc 	andi	r6,r2,255
    d754:	e13ffe17 	ldw	r4,-8(fp)
    d758:	000d8540 	call	d854 <alt_up_ethernet_reg_write>
	usleep(10);
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_NCR, 0x00 );
	usleep(1);

	// Initialize the MAC Address
	for (i = 0; i < 6; i++) 
    d75c:	e0bffd17 	ldw	r2,-12(fp)
    d760:	10800044 	addi	r2,r2,1
    d764:	e0bffd15 	stw	r2,-12(fp)
    d768:	e0bffd17 	ldw	r2,-12(fp)
    d76c:	10800190 	cmplti	r2,r2,6
    d770:	103fef1e 	bne	r2,zero,d730 <alt_up_ethernet_init+0x68>
		alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_PAR + i, ethernet->mac_addr[i] );

	/* clear any pending interrupt */
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_ISR,  0x3F );
    d774:	e13ffe17 	ldw	r4,-8(fp)
    d778:	01403f84 	movi	r5,254
    d77c:	01800fc4 	movi	r6,63
    d780:	000d8540 	call	d854 <alt_up_ethernet_reg_write>
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_NSR,  0x2C );
    d784:	e13ffe17 	ldw	r4,-8(fp)
    d788:	01400044 	movi	r5,1
    d78c:	01800b04 	movi	r6,44
    d790:	000d8540 	call	d854 <alt_up_ethernet_reg_write>

	/* set PAR bit, don't enable interrupts (do that with the set_interrupts() function */
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_IMR, 0x80 );
    d794:	e13ffe17 	ldw	r4,-8(fp)
    d798:	01403fc4 	movi	r5,255
    d79c:	01802004 	movi	r6,128
    d7a0:	000d8540 	call	d854 <alt_up_ethernet_reg_write>

	/* enable RX (Broadcast/ ALL_MULTICAST) */
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_RCR, 0x39 );
    d7a4:	e13ffe17 	ldw	r4,-8(fp)
    d7a8:	01400144 	movi	r5,5
    d7ac:	01800e44 	movi	r6,57
    d7b0:	000d8540 	call	d854 <alt_up_ethernet_reg_write>

	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_ETXCSR, 0x03 );
    d7b4:	e13ffe17 	ldw	r4,-8(fp)
    d7b8:	01400c04 	movi	r5,48
    d7bc:	018000c4 	movi	r6,3
    d7c0:	000d8540 	call	d854 <alt_up_ethernet_reg_write>

	return;
}
    d7c4:	e037883a 	mov	sp,fp
    d7c8:	dfc00117 	ldw	ra,4(sp)
    d7cc:	df000017 	ldw	fp,0(sp)
    d7d0:	dec00204 	addi	sp,sp,8
    d7d4:	f800283a 	ret

0000d7d8 <alt_up_ethernet_open_dev>:

alt_up_ethernet_dev* alt_up_ethernet_open_dev(const char* name)
{
    d7d8:	defffc04 	addi	sp,sp,-16
    d7dc:	dfc00315 	stw	ra,12(sp)
    d7e0:	df000215 	stw	fp,8(sp)
    d7e4:	df000204 	addi	fp,sp,8
    d7e8:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ethernet_dev * dev = (alt_up_ethernet_dev *) alt_find_dev( name, &alt_dev_list );
    d7ec:	e13fff17 	ldw	r4,-4(fp)
    d7f0:	01400074 	movhi	r5,1
    d7f4:	294ef704 	addi	r5,r5,15324
    d7f8:	00104780 	call	10478 <alt_find_dev>
    d7fc:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    d800:	e0bffe17 	ldw	r2,-8(fp)
}
    d804:	e037883a 	mov	sp,fp
    d808:	dfc00117 	ldw	ra,4(sp)
    d80c:	df000017 	ldw	fp,0(sp)
    d810:	dec00204 	addi	sp,sp,8
    d814:	f800283a 	ret

0000d818 <alt_up_ethernet_reg_read>:
#include "altera_up_avalon_ethernet_low_level_driver.h"
#include "altera_up_avalon_ethernet_regs.h"
#include <unistd.h>

unsigned int alt_up_ethernet_reg_read(unsigned int base, unsigned int reg)
{
    d818:	defffd04 	addi	sp,sp,-12
    d81c:	df000215 	stw	fp,8(sp)
    d820:	df000204 	addi	fp,sp,8
    d824:	e13ffe15 	stw	r4,-8(fp)
    d828:	e17fff15 	stw	r5,-4(fp)
	IOWR_ALTERA_UP_AVALON_ETHERNET_INDEX(base, reg);
    d82c:	e0bffe17 	ldw	r2,-8(fp)
    d830:	e0ffff17 	ldw	r3,-4(fp)
    d834:	10c00035 	stwio	r3,0(r2)
	return IORD_ALTERA_UP_AVALON_ETHERNET_DATA(base);
    d838:	e0bffe17 	ldw	r2,-8(fp)
    d83c:	10800104 	addi	r2,r2,4
    d840:	10800037 	ldwio	r2,0(r2)
}
    d844:	e037883a 	mov	sp,fp
    d848:	df000017 	ldw	fp,0(sp)
    d84c:	dec00104 	addi	sp,sp,4
    d850:	f800283a 	ret

0000d854 <alt_up_ethernet_reg_write>:

void alt_up_ethernet_reg_write(unsigned int base, unsigned int reg, unsigned int data)
{
    d854:	defffc04 	addi	sp,sp,-16
    d858:	df000315 	stw	fp,12(sp)
    d85c:	df000304 	addi	fp,sp,12
    d860:	e13ffd15 	stw	r4,-12(fp)
    d864:	e17ffe15 	stw	r5,-8(fp)
    d868:	e1bfff15 	stw	r6,-4(fp)
	IOWR_ALTERA_UP_AVALON_ETHERNET_INDEX(base, reg);
    d86c:	e0bffd17 	ldw	r2,-12(fp)
    d870:	e0fffe17 	ldw	r3,-8(fp)
    d874:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_UP_AVALON_ETHERNET_DATA(base, data);
    d878:	e0bffd17 	ldw	r2,-12(fp)
    d87c:	10800104 	addi	r2,r2,4
    d880:	e0ffff17 	ldw	r3,-4(fp)
    d884:	10c00035 	stwio	r3,0(r2)
}
    d888:	e037883a 	mov	sp,fp
    d88c:	df000017 	ldw	fp,0(sp)
    d890:	dec00104 	addi	sp,sp,4
    d894:	f800283a 	ret

0000d898 <alt_up_ethernet_phy_reg_read>:

unsigned int alt_up_ethernet_phy_reg_read (unsigned int base, unsigned int reg)
{
    d898:	defffa04 	addi	sp,sp,-24
    d89c:	dfc00515 	stw	ra,20(sp)
    d8a0:	df000415 	stw	fp,16(sp)
    d8a4:	df000404 	addi	fp,sp,16
    d8a8:	e13ffe15 	stw	r4,-8(fp)
    d8ac:	e17fff15 	stw	r5,-4(fp)
	unsigned int result = 0;
    d8b0:	e03ffd15 	stw	zero,-12(fp)
	unsigned int timeout = 0;
    d8b4:	e03ffc15 	stw	zero,-16(fp)

	/* set PHY register address into EPAR REG. 0CH */
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPAR, reg | 0x40);				/* PHY register address setting, and DM9000_PHY offset = 0x40 */
    d8b8:	e0bfff17 	ldw	r2,-4(fp)
    d8bc:	11801014 	ori	r6,r2,64
    d8c0:	e13ffe17 	ldw	r4,-8(fp)
    d8c4:	01400304 	movi	r5,12
    d8c8:	000d8540 	call	d854 <alt_up_ethernet_reg_write>

	/* issue PHY + READ command = 0xC into EPCR REG. 0BH */
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPCR, 0x0C);					/* issue PHY + READ command */
    d8cc:	e13ffe17 	ldw	r4,-8(fp)
    d8d0:	014002c4 	movi	r5,11
    d8d4:	01800304 	movi	r6,12
    d8d8:	000d8540 	call	d854 <alt_up_ethernet_reg_write>
	do {
		usleep(1);
    d8dc:	01000044 	movi	r4,1
    d8e0:	0010ae00 	call	10ae0 <usleep>
		timeout++;
    d8e4:	e0bffc17 	ldw	r2,-16(fp)
    d8e8:	10800044 	addi	r2,r2,1
    d8ec:	e0bffc15 	stw	r2,-16(fp)
	} while ((timeout < 50) && (alt_up_ethernet_reg_read(base, ALT_UP_ETHERNET_EPCR) & 0x01));
    d8f0:	e0bffc17 	ldw	r2,-16(fp)
    d8f4:	10800ca8 	cmpgeui	r2,r2,50
    d8f8:	1000071e 	bne	r2,zero,d918 <alt_up_ethernet_phy_reg_read+0x80>
    d8fc:	e13ffe17 	ldw	r4,-8(fp)
    d900:	014002c4 	movi	r5,11
    d904:	000d8180 	call	d818 <alt_up_ethernet_reg_read>
    d908:	1080004c 	andi	r2,r2,1
    d90c:	10803fcc 	andi	r2,r2,255
    d910:	1004c03a 	cmpne	r2,r2,zero
    d914:	103ff11e 	bne	r2,zero,d8dc <alt_up_ethernet_phy_reg_read+0x44>
	
	usleep(1);
    d918:	01000044 	movi	r4,1
    d91c:	0010ae00 	call	10ae0 <usleep>
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPCR, 0x08);					/* clear PHY command */
    d920:	e13ffe17 	ldw	r4,-8(fp)
    d924:	014002c4 	movi	r5,11
    d928:	01800204 	movi	r6,8
    d92c:	000d8540 	call	d854 <alt_up_ethernet_reg_write>

	/* read PHY data from EPDR REG. 0EH & REG. 0DH */
	result = (alt_up_ethernet_reg_read(base, ALT_UP_ETHERNET_EPDRH) << 8);			/* PHY data high_byte */
    d930:	e13ffe17 	ldw	r4,-8(fp)
    d934:	01400384 	movi	r5,14
    d938:	000d8180 	call	d818 <alt_up_ethernet_reg_read>
    d93c:	1004923a 	slli	r2,r2,8
    d940:	e0bffd15 	stw	r2,-12(fp)
	result |= alt_up_ethernet_reg_read(base, ALT_UP_ETHERNET_EPDRL);				/* PHY data low_byte */
    d944:	e13ffe17 	ldw	r4,-8(fp)
    d948:	01400344 	movi	r5,13
    d94c:	000d8180 	call	d818 <alt_up_ethernet_reg_read>
    d950:	1007883a 	mov	r3,r2
    d954:	e0bffd17 	ldw	r2,-12(fp)
    d958:	10c4b03a 	or	r2,r2,r3
    d95c:	e0bffd15 	stw	r2,-12(fp)

	return result;
    d960:	e0bffd17 	ldw	r2,-12(fp)
}
    d964:	e037883a 	mov	sp,fp
    d968:	dfc00117 	ldw	ra,4(sp)
    d96c:	df000017 	ldw	fp,0(sp)
    d970:	dec00204 	addi	sp,sp,8
    d974:	f800283a 	ret

0000d978 <alt_up_ethernet_phy_reg_write>:

void alt_up_ethernet_phy_reg_write (unsigned int base, unsigned int reg, unsigned int data)
{ 
    d978:	defffa04 	addi	sp,sp,-24
    d97c:	dfc00515 	stw	ra,20(sp)
    d980:	df000415 	stw	fp,16(sp)
    d984:	df000404 	addi	fp,sp,16
    d988:	e13ffd15 	stw	r4,-12(fp)
    d98c:	e17ffe15 	stw	r5,-8(fp)
    d990:	e1bfff15 	stw	r6,-4(fp)
	unsigned int timeout = 0;
    d994:	e03ffc15 	stw	zero,-16(fp)
	
	/* set PHY register address into EPAR REG. 0CH */
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPAR, reg | 0x40);				/* PHY register address setting, and DM9000_PHY offset = 0x40 */
    d998:	e0bffe17 	ldw	r2,-8(fp)
    d99c:	11801014 	ori	r6,r2,64
    d9a0:	e13ffd17 	ldw	r4,-12(fp)
    d9a4:	01400304 	movi	r5,12
    d9a8:	000d8540 	call	d854 <alt_up_ethernet_reg_write>

	/* fill PHY WRITE data into EPDR REG. 0EH & REG. 0DH */
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPDRH, ((data >> 8) & 0xFF));	/* PHY data high_byte */
    d9ac:	e0bfff17 	ldw	r2,-4(fp)
    d9b0:	1004d23a 	srli	r2,r2,8
    d9b4:	11803fcc 	andi	r6,r2,255
    d9b8:	e13ffd17 	ldw	r4,-12(fp)
    d9bc:	01400384 	movi	r5,14
    d9c0:	000d8540 	call	d854 <alt_up_ethernet_reg_write>
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPDRL, data & 0xFF);			/* PHY data low_byte */
    d9c4:	e0bfff17 	ldw	r2,-4(fp)
    d9c8:	11803fcc 	andi	r6,r2,255
    d9cc:	e13ffd17 	ldw	r4,-12(fp)
    d9d0:	01400344 	movi	r5,13
    d9d4:	000d8540 	call	d854 <alt_up_ethernet_reg_write>

	/* issue PHY + WRITE command = 0xA into EPCR REG. 0BH */
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPCR, 0x0A);					/* issue PHY + WRITE command */
    d9d8:	e13ffd17 	ldw	r4,-12(fp)
    d9dc:	014002c4 	movi	r5,11
    d9e0:	01800284 	movi	r6,10
    d9e4:	000d8540 	call	d854 <alt_up_ethernet_reg_write>
	do {
		usleep(1);
    d9e8:	01000044 	movi	r4,1
    d9ec:	0010ae00 	call	10ae0 <usleep>
		timeout++;
    d9f0:	e0bffc17 	ldw	r2,-16(fp)
    d9f4:	10800044 	addi	r2,r2,1
    d9f8:	e0bffc15 	stw	r2,-16(fp)
	} while ((timeout < 50) && (alt_up_ethernet_reg_read(base, ALT_UP_ETHERNET_EPCR) & 0x01));
    d9fc:	e0bffc17 	ldw	r2,-16(fp)
    da00:	10800ca8 	cmpgeui	r2,r2,50
    da04:	1000071e 	bne	r2,zero,da24 <alt_up_ethernet_phy_reg_write+0xac>
    da08:	e13ffd17 	ldw	r4,-12(fp)
    da0c:	014002c4 	movi	r5,11
    da10:	000d8180 	call	d818 <alt_up_ethernet_reg_read>
    da14:	1080004c 	andi	r2,r2,1
    da18:	10803fcc 	andi	r2,r2,255
    da1c:	1004c03a 	cmpne	r2,r2,zero
    da20:	103ff11e 	bne	r2,zero,d9e8 <alt_up_ethernet_phy_reg_write+0x70>
	
	usleep(1);
    da24:	01000044 	movi	r4,1
    da28:	0010ae00 	call	10ae0 <usleep>
	
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPCR, 0x08);					/* clear PHY command */
    da2c:	e13ffd17 	ldw	r4,-12(fp)
    da30:	014002c4 	movi	r5,11
    da34:	01800204 	movi	r6,8
    da38:	000d8540 	call	d854 <alt_up_ethernet_reg_write>
}
    da3c:	e037883a 	mov	sp,fp
    da40:	dfc00117 	ldw	ra,4(sp)
    da44:	df000017 	ldw	fp,0(sp)
    da48:	dec00204 	addi	sp,sp,8
    da4c:	f800283a 	ret

0000da50 <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
    da50:	defffd04 	addi	sp,sp,-12
    da54:	df000215 	stw	fp,8(sp)
    da58:	df000204 	addi	fp,sp,8
    da5c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    da60:	e0bfff17 	ldw	r2,-4(fp)
    da64:	10800a17 	ldw	r2,40(r2)
    da68:	10800104 	addi	r2,r2,4
    da6c:	10800037 	ldwio	r2,0(r2)
    da70:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
    da74:	e0bffe17 	ldw	r2,-8(fp)
    da78:	10800054 	ori	r2,r2,1
    da7c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    da80:	e0bfff17 	ldw	r2,-4(fp)
    da84:	10800a17 	ldw	r2,40(r2)
    da88:	10800104 	addi	r2,r2,4
    da8c:	e0fffe17 	ldw	r3,-8(fp)
    da90:	10c00035 	stwio	r3,0(r2)
}
    da94:	e037883a 	mov	sp,fp
    da98:	df000017 	ldw	fp,0(sp)
    da9c:	dec00104 	addi	sp,sp,4
    daa0:	f800283a 	ret

0000daa4 <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
    daa4:	defffd04 	addi	sp,sp,-12
    daa8:	df000215 	stw	fp,8(sp)
    daac:	df000204 	addi	fp,sp,8
    dab0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    dab4:	e0bfff17 	ldw	r2,-4(fp)
    dab8:	10800a17 	ldw	r2,40(r2)
    dabc:	10800104 	addi	r2,r2,4
    dac0:	10800037 	ldwio	r2,0(r2)
    dac4:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
    dac8:	e0fffe17 	ldw	r3,-8(fp)
    dacc:	00bfff84 	movi	r2,-2
    dad0:	1884703a 	and	r2,r3,r2
    dad4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    dad8:	e0bfff17 	ldw	r2,-4(fp)
    dadc:	10800a17 	ldw	r2,40(r2)
    dae0:	10800104 	addi	r2,r2,4
    dae4:	e0fffe17 	ldw	r3,-8(fp)
    dae8:	10c00035 	stwio	r3,0(r2)
}
    daec:	e037883a 	mov	sp,fp
    daf0:	df000017 	ldw	fp,0(sp)
    daf4:	dec00104 	addi	sp,sp,4
    daf8:	f800283a 	ret

0000dafc <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
    dafc:	defffd04 	addi	sp,sp,-12
    db00:	df000215 	stw	fp,8(sp)
    db04:	df000204 	addi	fp,sp,8
    db08:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
    db0c:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
    db10:	e0bfff17 	ldw	r2,-4(fp)
    db14:	10800a17 	ldw	r2,40(r2)
    db18:	10800084 	addi	r2,r2,2
    db1c:	1080002b 	ldhuio	r2,0(r2)
    db20:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
    db24:	e0bffe0b 	ldhu	r2,-8(fp)
}
    db28:	e037883a 	mov	sp,fp
    db2c:	df000017 	ldw	fp,0(sp)
    db30:	dec00104 	addi	sp,sp,4
    db34:	f800283a 	ret

0000db38 <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
    db38:	defffd04 	addi	sp,sp,-12
    db3c:	df000215 	stw	fp,8(sp)
    db40:	df000204 	addi	fp,sp,8
    db44:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    db48:	e0bfff17 	ldw	r2,-4(fp)
    db4c:	10800a17 	ldw	r2,40(r2)
    db50:	10800104 	addi	r2,r2,4
    db54:	10800037 	ldwio	r2,0(r2)
    db58:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
    db5c:	e0bffe17 	ldw	r2,-8(fp)
    db60:	10bfffec 	andhi	r2,r2,65535
    db64:	1004d43a 	srli	r2,r2,16
}
    db68:	e037883a 	mov	sp,fp
    db6c:	df000017 	ldw	fp,0(sp)
    db70:	dec00104 	addi	sp,sp,4
    db74:	f800283a 	ret

0000db78 <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
    db78:	defffc04 	addi	sp,sp,-16
    db7c:	df000315 	stw	fp,12(sp)
    db80:	df000304 	addi	fp,sp,12
    db84:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
    db88:	e0bffe17 	ldw	r2,-8(fp)
    db8c:	1080800c 	andi	r2,r2,512
    db90:	1004d27a 	srli	r2,r2,9
    db94:	e0bffd15 	stw	r2,-12(fp)
	return (parity_error ? -1 : 0);
    db98:	e0bffd17 	ldw	r2,-12(fp)
    db9c:	1005003a 	cmpeq	r2,r2,zero
    dba0:	1000031e 	bne	r2,zero,dbb0 <alt_up_irda_check_parity+0x38>
    dba4:	00bfffc4 	movi	r2,-1
    dba8:	e0bfff15 	stw	r2,-4(fp)
    dbac:	00000106 	br	dbb4 <alt_up_irda_check_parity+0x3c>
    dbb0:	e03fff15 	stw	zero,-4(fp)
    dbb4:	e0bfff17 	ldw	r2,-4(fp)
}
    dbb8:	e037883a 	mov	sp,fp
    dbbc:	df000017 	ldw	fp,0(sp)
    dbc0:	dec00104 	addi	sp,sp,4
    dbc4:	f800283a 	ret

0000dbc8 <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
    dbc8:	defffc04 	addi	sp,sp,-16
    dbcc:	df000315 	stw	fp,12(sp)
    dbd0:	df000304 	addi	fp,sp,12
    dbd4:	e13ffe15 	stw	r4,-8(fp)
    dbd8:	e17fff05 	stb	r5,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    dbdc:	e0bffe17 	ldw	r2,-8(fp)
    dbe0:	10800a17 	ldw	r2,40(r2)
    dbe4:	10800037 	ldwio	r2,0(r2)
    dbe8:	e0bffd15 	stw	r2,-12(fp)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
    dbec:	e0bffe17 	ldw	r2,-8(fp)
    dbf0:	10800a17 	ldw	r2,40(r2)
    dbf4:	e0ffff03 	ldbu	r3,-4(fp)
    dbf8:	10c00035 	stwio	r3,0(r2)
	return 0;
    dbfc:	0005883a 	mov	r2,zero
}
    dc00:	e037883a 	mov	sp,fp
    dc04:	df000017 	ldw	fp,0(sp)
    dc08:	dec00104 	addi	sp,sp,4
    dc0c:	f800283a 	ret

0000dc10 <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
    dc10:	defffa04 	addi	sp,sp,-24
    dc14:	dfc00515 	stw	ra,20(sp)
    dc18:	df000415 	stw	fp,16(sp)
    dc1c:	df000404 	addi	fp,sp,16
    dc20:	e13ffd15 	stw	r4,-12(fp)
    dc24:	e17ffe15 	stw	r5,-8(fp)
    dc28:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    dc2c:	e0bffd17 	ldw	r2,-12(fp)
    dc30:	10800a17 	ldw	r2,40(r2)
    dc34:	10800037 	ldwio	r2,0(r2)
    dc38:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
    dc3c:	e0bffc17 	ldw	r2,-16(fp)
    dc40:	1007883a 	mov	r3,r2
    dc44:	e0bffe17 	ldw	r2,-8(fp)
    dc48:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
    dc4c:	e13ffc17 	ldw	r4,-16(fp)
    dc50:	000db780 	call	db78 <alt_up_irda_check_parity>
    dc54:	1007883a 	mov	r3,r2
    dc58:	e0bfff17 	ldw	r2,-4(fp)
    dc5c:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
    dc60:	e0bffc17 	ldw	r2,-16(fp)
    dc64:	10a0000c 	andi	r2,r2,32768
    dc68:	1004d3fa 	srli	r2,r2,15
    dc6c:	10bfffc4 	addi	r2,r2,-1
}
    dc70:	e037883a 	mov	sp,fp
    dc74:	dfc00117 	ldw	ra,4(sp)
    dc78:	df000017 	ldw	fp,0(sp)
    dc7c:	dec00204 	addi	sp,sp,8
    dc80:	f800283a 	ret

0000dc84 <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
    dc84:	defff804 	addi	sp,sp,-32
    dc88:	dfc00715 	stw	ra,28(sp)
    dc8c:	df000615 	stw	fp,24(sp)
    dc90:	df000604 	addi	fp,sp,24
    dc94:	e13ffd15 	stw	r4,-12(fp)
    dc98:	e17ffe15 	stw	r5,-8(fp)
    dc9c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    dca0:	e0bffd17 	ldw	r2,-12(fp)
    dca4:	10800017 	ldw	r2,0(r2)
    dca8:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
    dcac:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
    dcb0:	00000c06 	br	dce4 <alt_up_irda_read_fd+0x60>
	{
		if (alt_up_irda_read_data(irda, ptr++, &parity_error)==0)
    dcb4:	e17ffe17 	ldw	r5,-8(fp)
    dcb8:	e0bffe17 	ldw	r2,-8(fp)
    dcbc:	10800044 	addi	r2,r2,1
    dcc0:	e0bffe15 	stw	r2,-8(fp)
    dcc4:	e1bffc04 	addi	r6,fp,-16
    dcc8:	e13ffb17 	ldw	r4,-20(fp)
    dccc:	000dc100 	call	dc10 <alt_up_irda_read_data>
    dcd0:	1004c03a 	cmpne	r2,r2,zero
    dcd4:	1000091e 	bne	r2,zero,dcfc <alt_up_irda_read_fd+0x78>
			count++;
    dcd8:	e0bffa17 	ldw	r2,-24(fp)
    dcdc:	10800044 	addi	r2,r2,1
    dce0:	e0bffa15 	stw	r2,-24(fp)
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    dce4:	e0bfff17 	ldw	r2,-4(fp)
    dce8:	10bfffc4 	addi	r2,r2,-1
    dcec:	e0bfff15 	stw	r2,-4(fp)
    dcf0:	e0bfff17 	ldw	r2,-4(fp)
    dcf4:	10bfffd8 	cmpnei	r2,r2,-1
    dcf8:	103fee1e 	bne	r2,zero,dcb4 <alt_up_irda_read_fd+0x30>
		if (alt_up_irda_read_data(irda, ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
    dcfc:	e0bffa17 	ldw	r2,-24(fp)
}
    dd00:	e037883a 	mov	sp,fp
    dd04:	dfc00117 	ldw	ra,4(sp)
    dd08:	df000017 	ldw	fp,0(sp)
    dd0c:	dec00204 	addi	sp,sp,8
    dd10:	f800283a 	ret

0000dd14 <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
    dd14:	defff904 	addi	sp,sp,-28
    dd18:	dfc00615 	stw	ra,24(sp)
    dd1c:	df000515 	stw	fp,20(sp)
    dd20:	df000504 	addi	fp,sp,20
    dd24:	e13ffd15 	stw	r4,-12(fp)
    dd28:	e17ffe15 	stw	r5,-8(fp)
    dd2c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    dd30:	e0bffd17 	ldw	r2,-12(fp)
    dd34:	10800017 	ldw	r2,0(r2)
    dd38:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
    dd3c:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
    dd40:	00000c06 	br	dd74 <alt_up_irda_write_fd+0x60>
	{
		if (alt_up_irda_write_data(irda, ptr++)==0)
    dd44:	e0bffe17 	ldw	r2,-8(fp)
    dd48:	11403fcc 	andi	r5,r2,255
    dd4c:	e0bffe17 	ldw	r2,-8(fp)
    dd50:	10800044 	addi	r2,r2,1
    dd54:	e0bffe15 	stw	r2,-8(fp)
    dd58:	e13ffc17 	ldw	r4,-16(fp)
    dd5c:	000dbc80 	call	dbc8 <alt_up_irda_write_data>
    dd60:	1004c03a 	cmpne	r2,r2,zero
    dd64:	1000091e 	bne	r2,zero,dd8c <alt_up_irda_write_fd+0x78>
			count++;
    dd68:	e0bffb17 	ldw	r2,-20(fp)
    dd6c:	10800044 	addi	r2,r2,1
    dd70:	e0bffb15 	stw	r2,-20(fp)

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
    dd74:	e0bfff17 	ldw	r2,-4(fp)
    dd78:	10bfffc4 	addi	r2,r2,-1
    dd7c:	e0bfff15 	stw	r2,-4(fp)
    dd80:	e0bfff17 	ldw	r2,-4(fp)
    dd84:	10bfffd8 	cmpnei	r2,r2,-1
    dd88:	103fee1e 	bne	r2,zero,dd44 <alt_up_irda_write_fd+0x30>
		if (alt_up_irda_write_data(irda, ptr++)==0)
			count++;
		else
			break;
	}
	return count;
    dd8c:	e0bffb17 	ldw	r2,-20(fp)
}
    dd90:	e037883a 	mov	sp,fp
    dd94:	dfc00117 	ldw	ra,4(sp)
    dd98:	df000017 	ldw	fp,0(sp)
    dd9c:	dec00204 	addi	sp,sp,8
    dda0:	f800283a 	ret

0000dda4 <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
    dda4:	defffc04 	addi	sp,sp,-16
    dda8:	dfc00315 	stw	ra,12(sp)
    ddac:	df000215 	stw	fp,8(sp)
    ddb0:	df000204 	addi	fp,sp,8
    ddb4:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
    ddb8:	e13fff17 	ldw	r4,-4(fp)
    ddbc:	01400074 	movhi	r5,1
    ddc0:	294ef704 	addi	r5,r5,15324
    ddc4:	00104780 	call	10478 <alt_find_dev>
    ddc8:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    ddcc:	e0bffe17 	ldw	r2,-8(fp)
}
    ddd0:	e037883a 	mov	sp,fp
    ddd4:	dfc00117 	ldw	ra,4(sp)
    ddd8:	df000017 	ldw	fp,0(sp)
    dddc:	dec00204 	addi	sp,sp,8
    dde0:	f800283a 	ret

0000dde4 <alt_up_parallel_port_open_dev>:

#include "altera_up_avalon_parallel_port.h"
#include "altera_up_avalon_parallel_port_regs.h"

alt_up_parallel_port_dev* alt_up_parallel_port_open_dev(const char* name)
{
    dde4:	defffc04 	addi	sp,sp,-16
    dde8:	dfc00315 	stw	ra,12(sp)
    ddec:	df000215 	stw	fp,8(sp)
    ddf0:	df000204 	addi	fp,sp,8
    ddf4:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_parallel_port_dev *dev = (alt_up_parallel_port_dev*)alt_find_dev(name, &alt_dev_list);
    ddf8:	e13fff17 	ldw	r4,-4(fp)
    ddfc:	01400074 	movhi	r5,1
    de00:	294ef704 	addi	r5,r5,15324
    de04:	00104780 	call	10478 <alt_find_dev>
    de08:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    de0c:	e0bffe17 	ldw	r2,-8(fp)
}
    de10:	e037883a 	mov	sp,fp
    de14:	dfc00117 	ldw	ra,4(sp)
    de18:	df000017 	ldw	fp,0(sp)
    de1c:	dec00204 	addi	sp,sp,8
    de20:	f800283a 	ret

0000de24 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
    de24:	defffd04 	addi	sp,sp,-12
    de28:	df000215 	stw	fp,8(sp)
    de2c:	df000204 	addi	fp,sp,8
    de30:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
    de34:	e0bfff17 	ldw	r2,-4(fp)
    de38:	1080400c 	andi	r2,r2,256
    de3c:	1004d23a 	srli	r2,r2,8
    de40:	e0bffe05 	stb	r2,-8(fp)
	return ri;
    de44:	e0bffe03 	ldbu	r2,-8(fp)
}
    de48:	e037883a 	mov	sp,fp
    de4c:	df000017 	ldw	fp,0(sp)
    de50:	dec00104 	addi	sp,sp,4
    de54:	f800283a 	ret

0000de58 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
    de58:	defffd04 	addi	sp,sp,-12
    de5c:	df000215 	stw	fp,8(sp)
    de60:	df000204 	addi	fp,sp,8
    de64:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
    de68:	e0bfff17 	ldw	r2,-4(fp)
    de6c:	1080004c 	andi	r2,r2,1
    de70:	e0bffe05 	stb	r2,-8(fp)
	return re;
    de74:	e0bffe03 	ldbu	r2,-8(fp)
}
    de78:	e037883a 	mov	sp,fp
    de7c:	df000017 	ldw	fp,0(sp)
    de80:	dec00104 	addi	sp,sp,4
    de84:	f800283a 	ret

0000de88 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
    de88:	defffd04 	addi	sp,sp,-12
    de8c:	df000215 	stw	fp,8(sp)
    de90:	df000204 	addi	fp,sp,8
    de94:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
    de98:	e0bfff17 	ldw	r2,-4(fp)
    de9c:	1081000c 	andi	r2,r2,1024
    dea0:	1004d2ba 	srli	r2,r2,10
    dea4:	e0bffe05 	stb	r2,-8(fp)
	return re;
    dea8:	e0bffe03 	ldbu	r2,-8(fp)
}
    deac:	e037883a 	mov	sp,fp
    deb0:	df000017 	ldw	fp,0(sp)
    deb4:	dec00104 	addi	sp,sp,4
    deb8:	f800283a 	ret

0000debc <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
    debc:	defffd04 	addi	sp,sp,-12
    dec0:	df000215 	stw	fp,8(sp)
    dec4:	df000204 	addi	fp,sp,8
    dec8:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
    decc:	e0bfff17 	ldw	r2,-4(fp)
    ded0:	10bfffec 	andhi	r2,r2,65535
    ded4:	1004d43a 	srli	r2,r2,16
    ded8:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
    dedc:	e0bffe0b 	ldhu	r2,-8(fp)
}
    dee0:	e037883a 	mov	sp,fp
    dee4:	df000017 	ldw	fp,0(sp)
    dee8:	dec00104 	addi	sp,sp,4
    deec:	f800283a 	ret

0000def0 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
    def0:	defffd04 	addi	sp,sp,-12
    def4:	df000215 	stw	fp,8(sp)
    def8:	df000204 	addi	fp,sp,8
    defc:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
    df00:	e0bfff17 	ldw	r2,-4(fp)
    df04:	10a0000c 	andi	r2,r2,32768
    df08:	1004d3fa 	srli	r2,r2,15
    df0c:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
    df10:	e0bffe03 	ldbu	r2,-8(fp)
}
    df14:	e037883a 	mov	sp,fp
    df18:	df000017 	ldw	fp,0(sp)
    df1c:	dec00104 	addi	sp,sp,4
    df20:	f800283a 	ret

0000df24 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
    df24:	defffd04 	addi	sp,sp,-12
    df28:	df000215 	stw	fp,8(sp)
    df2c:	df000204 	addi	fp,sp,8
    df30:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
    df34:	e0bfff17 	ldw	r2,-4(fp)
    df38:	e0bffe05 	stb	r2,-8(fp)
	return data;
    df3c:	e0bffe03 	ldbu	r2,-8(fp)
}
    df40:	e037883a 	mov	sp,fp
    df44:	df000017 	ldw	fp,0(sp)
    df48:	dec00104 	addi	sp,sp,4
    df4c:	f800283a 	ret

0000df50 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
    df50:	defffb04 	addi	sp,sp,-20
    df54:	dfc00415 	stw	ra,16(sp)
    df58:	df000315 	stw	fp,12(sp)
    df5c:	df000304 	addi	fp,sp,12
    df60:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
    df64:	e13fff17 	ldw	r4,-4(fp)
    df68:	01403fc4 	movi	r5,255
    df6c:	000e1b00 	call	e1b0 <alt_up_ps2_write_data_byte_with_ack>
    df70:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
    df74:	e0bffd17 	ldw	r2,-12(fp)
    df78:	1004c03a 	cmpne	r2,r2,zero
    df7c:	1000221e 	bne	r2,zero,e008 <alt_up_ps2_init+0xb8>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    df80:	e17ffe04 	addi	r5,fp,-8
    df84:	e13fff17 	ldw	r4,-4(fp)
    df88:	000e21c0 	call	e21c <alt_up_ps2_read_data_byte_timeout>
    df8c:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
    df90:	e0bffd17 	ldw	r2,-12(fp)
    df94:	1004c03a 	cmpne	r2,r2,zero
    df98:	10001b1e 	bne	r2,zero,e008 <alt_up_ps2_init+0xb8>
    df9c:	e0bffe03 	ldbu	r2,-8(fp)
    dfa0:	10803fcc 	andi	r2,r2,255
    dfa4:	10802a98 	cmpnei	r2,r2,170
    dfa8:	1000171e 	bne	r2,zero,e008 <alt_up_ps2_init+0xb8>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    dfac:	e17ffe04 	addi	r5,fp,-8
    dfb0:	e13fff17 	ldw	r4,-4(fp)
    dfb4:	000e21c0 	call	e21c <alt_up_ps2_read_data_byte_timeout>
    dfb8:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
    dfbc:	e0bffd17 	ldw	r2,-12(fp)
    dfc0:	10bfe318 	cmpnei	r2,r2,-116
    dfc4:	1000041e 	bne	r2,zero,dfd8 <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
    dfc8:	e0ffff17 	ldw	r3,-4(fp)
    dfcc:	00800044 	movi	r2,1
    dfd0:	18800d15 	stw	r2,52(r3)
    dfd4:	00000c06 	br	e008 <alt_up_ps2_init+0xb8>
			}
			else if (status == 0 && byte == 0x00)
    dfd8:	e0bffd17 	ldw	r2,-12(fp)
    dfdc:	1004c03a 	cmpne	r2,r2,zero
    dfe0:	1000091e 	bne	r2,zero,e008 <alt_up_ps2_init+0xb8>
    dfe4:	e0bffe03 	ldbu	r2,-8(fp)
    dfe8:	10803fcc 	andi	r2,r2,255
    dfec:	1004c03a 	cmpne	r2,r2,zero
    dff0:	1000051e 	bne	r2,zero,e008 <alt_up_ps2_init+0xb8>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
    dff4:	e0bfff17 	ldw	r2,-4(fp)
    dff8:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
    dffc:	e13fff17 	ldw	r4,-4(fp)
    e000:	01403d04 	movi	r5,244
    e004:	000e0c80 	call	e0c8 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
    e008:	e037883a 	mov	sp,fp
    e00c:	dfc00117 	ldw	ra,4(sp)
    e010:	df000017 	ldw	fp,0(sp)
    e014:	dec00204 	addi	sp,sp,8
    e018:	f800283a 	ret

0000e01c <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
    e01c:	defffd04 	addi	sp,sp,-12
    e020:	df000215 	stw	fp,8(sp)
    e024:	df000204 	addi	fp,sp,8
    e028:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    e02c:	e0bfff17 	ldw	r2,-4(fp)
    e030:	10800a17 	ldw	r2,40(r2)
    e034:	10800104 	addi	r2,r2,4
    e038:	10800037 	ldwio	r2,0(r2)
    e03c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    e040:	e0bffe17 	ldw	r2,-8(fp)
    e044:	10800054 	ori	r2,r2,1
    e048:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    e04c:	e0bfff17 	ldw	r2,-4(fp)
    e050:	10800a17 	ldw	r2,40(r2)
    e054:	10800104 	addi	r2,r2,4
    e058:	e0fffe17 	ldw	r3,-8(fp)
    e05c:	10c00035 	stwio	r3,0(r2)
}
    e060:	e037883a 	mov	sp,fp
    e064:	df000017 	ldw	fp,0(sp)
    e068:	dec00104 	addi	sp,sp,4
    e06c:	f800283a 	ret

0000e070 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
    e070:	defffd04 	addi	sp,sp,-12
    e074:	df000215 	stw	fp,8(sp)
    e078:	df000204 	addi	fp,sp,8
    e07c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    e080:	e0bfff17 	ldw	r2,-4(fp)
    e084:	10800a17 	ldw	r2,40(r2)
    e088:	10800104 	addi	r2,r2,4
    e08c:	10800037 	ldwio	r2,0(r2)
    e090:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    e094:	e0fffe17 	ldw	r3,-8(fp)
    e098:	00bfff84 	movi	r2,-2
    e09c:	1884703a 	and	r2,r3,r2
    e0a0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    e0a4:	e0bfff17 	ldw	r2,-4(fp)
    e0a8:	10800a17 	ldw	r2,40(r2)
    e0ac:	10800104 	addi	r2,r2,4
    e0b0:	e0fffe17 	ldw	r3,-8(fp)
    e0b4:	10c00035 	stwio	r3,0(r2)
}
    e0b8:	e037883a 	mov	sp,fp
    e0bc:	df000017 	ldw	fp,0(sp)
    e0c0:	dec00104 	addi	sp,sp,4
    e0c4:	f800283a 	ret

0000e0c8 <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
    e0c8:	defffa04 	addi	sp,sp,-24
    e0cc:	dfc00515 	stw	ra,20(sp)
    e0d0:	df000415 	stw	fp,16(sp)
    e0d4:	df000404 	addi	fp,sp,16
    e0d8:	e13ffd15 	stw	r4,-12(fp)
    e0dc:	e17ffe05 	stb	r5,-8(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
    e0e0:	e0bffd17 	ldw	r2,-12(fp)
    e0e4:	10800a17 	ldw	r2,40(r2)
    e0e8:	e0fffe03 	ldbu	r3,-8(fp)
    e0ec:	10c00025 	stbio	r3,0(r2)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
    e0f0:	e0bffd17 	ldw	r2,-12(fp)
    e0f4:	10800a17 	ldw	r2,40(r2)
    e0f8:	10800104 	addi	r2,r2,4
    e0fc:	10800037 	ldwio	r2,0(r2)
    e100:	e0bffc15 	stw	r2,-16(fp)
	if (read_CE_bit(ctrl_reg))
    e104:	e13ffc17 	ldw	r4,-16(fp)
    e108:	000de880 	call	de88 <read_CE_bit>
    e10c:	10803fcc 	andi	r2,r2,255
    e110:	1005003a 	cmpeq	r2,r2,zero
    e114:	1000031e 	bne	r2,zero,e124 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
    e118:	00bffec4 	movi	r2,-5
    e11c:	e0bfff15 	stw	r2,-4(fp)
    e120:	00000106 	br	e128 <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
    e124:	e03fff15 	stw	zero,-4(fp)
    e128:	e0bfff17 	ldw	r2,-4(fp)
}
    e12c:	e037883a 	mov	sp,fp
    e130:	dfc00117 	ldw	ra,4(sp)
    e134:	df000017 	ldw	fp,0(sp)
    e138:	dec00204 	addi	sp,sp,8
    e13c:	f800283a 	ret

0000e140 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
    e140:	defffb04 	addi	sp,sp,-20
    e144:	dfc00415 	stw	ra,16(sp)
    e148:	df000315 	stw	fp,12(sp)
    e14c:	df000304 	addi	fp,sp,12
    e150:	e13ffe15 	stw	r4,-8(fp)
	unsigned char data = 0;
    e154:	e03ffd45 	stb	zero,-11(fp)
	unsigned char status = 0;
    e158:	e03ffd05 	stb	zero,-12(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
    e15c:	e17ffd44 	addi	r5,fp,-11
    e160:	e13ffe17 	ldw	r4,-8(fp)
    e164:	000e21c0 	call	e21c <alt_up_ps2_read_data_byte_timeout>
    e168:	e0bffd05 	stb	r2,-12(fp)
		if ( status == 0)
    e16c:	e0bffd03 	ldbu	r2,-12(fp)
    e170:	1004c03a 	cmpne	r2,r2,zero
    e174:	1000061e 	bne	r2,zero,e190 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
    e178:	e0bffd43 	ldbu	r2,-11(fp)
    e17c:	10803fcc 	andi	r2,r2,255
    e180:	10803e98 	cmpnei	r2,r2,250
    e184:	103ff51e 	bne	r2,zero,e15c <alt_up_ps2_wait_for_ack+0x1c>
				return 0;
    e188:	e03fff15 	stw	zero,-4(fp)
    e18c:	00000206 	br	e198 <alt_up_ps2_wait_for_ack+0x58>
		}
		else 
		{
			return status;
    e190:	e0bffd03 	ldbu	r2,-12(fp)
    e194:	e0bfff15 	stw	r2,-4(fp)
    e198:	e0bfff17 	ldw	r2,-4(fp)
		}
	} while(1);
	return -ETIMEDOUT;
}
    e19c:	e037883a 	mov	sp,fp
    e1a0:	dfc00117 	ldw	ra,4(sp)
    e1a4:	df000017 	ldw	fp,0(sp)
    e1a8:	dec00204 	addi	sp,sp,8
    e1ac:	f800283a 	ret

0000e1b0 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
    e1b0:	defff904 	addi	sp,sp,-28
    e1b4:	dfc00615 	stw	ra,24(sp)
    e1b8:	df000515 	stw	fp,20(sp)
    e1bc:	df000504 	addi	fp,sp,20
    e1c0:	e13ffd15 	stw	r4,-12(fp)
    e1c4:	e17ffe05 	stb	r5,-8(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
    e1c8:	e17ffe03 	ldbu	r5,-8(fp)
    e1cc:	e13ffd17 	ldw	r4,-12(fp)
    e1d0:	000e0c80 	call	e0c8 <alt_up_ps2_write_data_byte>
    e1d4:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
    e1d8:	e0bffc17 	ldw	r2,-16(fp)
    e1dc:	1005003a 	cmpeq	r2,r2,zero
    e1e0:	1000031e 	bne	r2,zero,e1f0 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
    e1e4:	e0bffc17 	ldw	r2,-16(fp)
    e1e8:	e0bfff15 	stw	r2,-4(fp)
    e1ec:	00000506 	br	e204 <alt_up_ps2_write_data_byte_with_ack+0x54>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
    e1f0:	e13ffd17 	ldw	r4,-12(fp)
    e1f4:	000e1400 	call	e140 <alt_up_ps2_wait_for_ack>
    e1f8:	e0bffb15 	stw	r2,-20(fp)
	return ack_status;
    e1fc:	e0bffb17 	ldw	r2,-20(fp)
    e200:	e0bfff15 	stw	r2,-4(fp)
    e204:	e0bfff17 	ldw	r2,-4(fp)
}
    e208:	e037883a 	mov	sp,fp
    e20c:	dfc00117 	ldw	ra,4(sp)
    e210:	df000017 	ldw	fp,0(sp)
    e214:	dec00204 	addi	sp,sp,8
    e218:	f800283a 	ret

0000e21c <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    e21c:	defff904 	addi	sp,sp,-28
    e220:	dfc00615 	stw	ra,24(sp)
    e224:	df000515 	stw	fp,20(sp)
    e228:	df000504 	addi	fp,sp,20
    e22c:	e13ffd15 	stw	r4,-12(fp)
    e230:	e17ffe15 	stw	r5,-8(fp)
	unsigned int data_reg = 0; 
    e234:	e03ffc15 	stw	zero,-16(fp)
	unsigned int count = 0;
    e238:	e03ffb15 	stw	zero,-20(fp)
    e23c:	00000006 	br	e240 <alt_up_ps2_read_data_byte_timeout+0x24>
	do {
		count++;
    e240:	e0bffb17 	ldw	r2,-20(fp)
    e244:	10800044 	addi	r2,r2,1
    e248:	e0bffb15 	stw	r2,-20(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    e24c:	e0bffd17 	ldw	r2,-12(fp)
    e250:	10800a17 	ldw	r2,40(r2)
    e254:	10800037 	ldwio	r2,0(r2)
    e258:	e0bffc15 	stw	r2,-16(fp)
		if (read_data_valid(data_reg))
    e25c:	e13ffc17 	ldw	r4,-16(fp)
    e260:	000def00 	call	def0 <read_data_valid>
    e264:	10803fcc 	andi	r2,r2,255
    e268:	1005003a 	cmpeq	r2,r2,zero
    e26c:	1000071e 	bne	r2,zero,e28c <alt_up_ps2_read_data_byte_timeout+0x70>
		{
			*byte = read_data_byte(data_reg);
    e270:	e13ffc17 	ldw	r4,-16(fp)
    e274:	000df240 	call	df24 <read_data_byte>
    e278:	1007883a 	mov	r3,r2
    e27c:	e0bffe17 	ldw	r2,-8(fp)
    e280:	10c00005 	stb	r3,0(r2)
			return 0;
    e284:	e03fff15 	stw	zero,-4(fp)
    e288:	00000a06 	br	e2b4 <alt_up_ps2_read_data_byte_timeout+0x98>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
    e28c:	e0bffd17 	ldw	r2,-12(fp)
    e290:	10800c17 	ldw	r2,48(r2)
    e294:	1005003a 	cmpeq	r2,r2,zero
    e298:	103fe91e 	bne	r2,zero,e240 <alt_up_ps2_read_data_byte_timeout+0x24>
    e29c:	e0bffd17 	ldw	r2,-12(fp)
    e2a0:	10c00c17 	ldw	r3,48(r2)
    e2a4:	e0bffb17 	ldw	r2,-20(fp)
    e2a8:	18bfe52e 	bgeu	r3,r2,e240 <alt_up_ps2_read_data_byte_timeout+0x24>
		{
			return -ETIMEDOUT;
    e2ac:	00bfe304 	movi	r2,-116
    e2b0:	e0bfff15 	stw	r2,-4(fp)
		}
	} while (1);
    e2b4:	e0bfff17 	ldw	r2,-4(fp)
}
    e2b8:	e037883a 	mov	sp,fp
    e2bc:	dfc00117 	ldw	ra,4(sp)
    e2c0:	df000017 	ldw	fp,0(sp)
    e2c4:	dec00204 	addi	sp,sp,8
    e2c8:	f800283a 	ret

0000e2cc <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    e2cc:	defffa04 	addi	sp,sp,-24
    e2d0:	dfc00515 	stw	ra,20(sp)
    e2d4:	df000415 	stw	fp,16(sp)
    e2d8:	df000404 	addi	fp,sp,16
    e2dc:	e13ffd15 	stw	r4,-12(fp)
    e2e0:	e17ffe15 	stw	r5,-8(fp)
	unsigned int data_reg = 0; 
    e2e4:	e03ffc15 	stw	zero,-16(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    e2e8:	e0bffd17 	ldw	r2,-12(fp)
    e2ec:	10800a17 	ldw	r2,40(r2)
    e2f0:	10800037 	ldwio	r2,0(r2)
    e2f4:	e0bffc15 	stw	r2,-16(fp)
	if (read_data_valid(data_reg))
    e2f8:	e13ffc17 	ldw	r4,-16(fp)
    e2fc:	000def00 	call	def0 <read_data_valid>
    e300:	10803fcc 	andi	r2,r2,255
    e304:	1005003a 	cmpeq	r2,r2,zero
    e308:	1000071e 	bne	r2,zero,e328 <alt_up_ps2_read_data_byte+0x5c>
	{
		*byte = read_data_byte(data_reg);
    e30c:	e13ffc17 	ldw	r4,-16(fp)
    e310:	000df240 	call	df24 <read_data_byte>
    e314:	1007883a 	mov	r3,r2
    e318:	e0bffe17 	ldw	r2,-8(fp)
    e31c:	10c00005 	stb	r3,0(r2)
		return 0;
    e320:	e03fff15 	stw	zero,-4(fp)
    e324:	00000206 	br	e330 <alt_up_ps2_read_data_byte+0x64>
	}
	return -1;
    e328:	00bfffc4 	movi	r2,-1
    e32c:	e0bfff15 	stw	r2,-4(fp)
    e330:	e0bfff17 	ldw	r2,-4(fp)
}
    e334:	e037883a 	mov	sp,fp
    e338:	dfc00117 	ldw	ra,4(sp)
    e33c:	df000017 	ldw	fp,0(sp)
    e340:	dec00204 	addi	sp,sp,8
    e344:	f800283a 	ret

0000e348 <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
    e348:	defffb04 	addi	sp,sp,-20
    e34c:	dfc00415 	stw	ra,16(sp)
    e350:	df000315 	stw	fp,12(sp)
    e354:	df000304 	addi	fp,sp,12
    e358:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
    e35c:	e03ffe0d 	sth	zero,-8(fp)
	unsigned int data_reg = 0;
    e360:	e03ffd15 	stw	zero,-12(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    e364:	e0bfff17 	ldw	r2,-4(fp)
    e368:	10800a17 	ldw	r2,40(r2)
    e36c:	10800037 	ldwio	r2,0(r2)
    e370:	e0bffd15 	stw	r2,-12(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
    e374:	e13ffd17 	ldw	r4,-12(fp)
    e378:	000debc0 	call	debc <read_num_bytes_available>
    e37c:	e0bffe0d 	sth	r2,-8(fp)
	} while (num > 0);
    e380:	e0bffe0b 	ldhu	r2,-8(fp)
    e384:	1004c03a 	cmpne	r2,r2,zero
    e388:	103ff61e 	bne	r2,zero,e364 <alt_up_ps2_clear_fifo+0x1c>
}
    e38c:	e037883a 	mov	sp,fp
    e390:	dfc00117 	ldw	ra,4(sp)
    e394:	df000017 	ldw	fp,0(sp)
    e398:	dec00204 	addi	sp,sp,8
    e39c:	f800283a 	ret

0000e3a0 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
    e3a0:	defff704 	addi	sp,sp,-36
    e3a4:	dfc00815 	stw	ra,32(sp)
    e3a8:	df000715 	stw	fp,28(sp)
    e3ac:	df000704 	addi	fp,sp,28
    e3b0:	e13ffc15 	stw	r4,-16(fp)
    e3b4:	e17ffd15 	stw	r5,-12(fp)
    e3b8:	e1bffe15 	stw	r6,-8(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    e3bc:	e0bffc17 	ldw	r2,-16(fp)
    e3c0:	10800017 	ldw	r2,0(r2)
    e3c4:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
    e3c8:	e03ffa15 	stw	zero,-24(fp)
	int count = 0;
    e3cc:	e03ff915 	stw	zero,-28(fp)
	while (count < len);
    e3d0:	e0fff917 	ldw	r3,-28(fp)
    e3d4:	e0bffe17 	ldw	r2,-8(fp)
    e3d8:	18bffd16 	blt	r3,r2,e3d0 <alt_up_ps2_read_fd+0x30>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, ptr++);
    e3dc:	e17ffd17 	ldw	r5,-12(fp)
    e3e0:	e0bffd17 	ldw	r2,-12(fp)
    e3e4:	10800044 	addi	r2,r2,1
    e3e8:	e0bffd15 	stw	r2,-12(fp)
    e3ec:	e13ffb17 	ldw	r4,-20(fp)
    e3f0:	000e21c0 	call	e21c <alt_up_ps2_read_data_byte_timeout>
    e3f4:	e0bffa15 	stw	r2,-24(fp)
		if (status!=0)
    e3f8:	e0bffa17 	ldw	r2,-24(fp)
    e3fc:	1005003a 	cmpeq	r2,r2,zero
    e400:	1000031e 	bne	r2,zero,e410 <alt_up_ps2_read_fd+0x70>
			return count;
    e404:	e0bff917 	ldw	r2,-28(fp)
    e408:	e0bfff15 	stw	r2,-4(fp)
    e40c:	00000506 	br	e424 <alt_up_ps2_read_fd+0x84>
		count++;
    e410:	e0bff917 	ldw	r2,-28(fp)
    e414:	10800044 	addi	r2,r2,1
    e418:	e0bff915 	stw	r2,-28(fp)
	} 
	return count;
    e41c:	e0bff917 	ldw	r2,-28(fp)
    e420:	e0bfff15 	stw	r2,-4(fp)
    e424:	e0bfff17 	ldw	r2,-4(fp)
}
    e428:	e037883a 	mov	sp,fp
    e42c:	dfc00117 	ldw	ra,4(sp)
    e430:	df000017 	ldw	fp,0(sp)
    e434:	dec00204 	addi	sp,sp,8
    e438:	f800283a 	ret

0000e43c <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
    e43c:	defff704 	addi	sp,sp,-36
    e440:	dfc00815 	stw	ra,32(sp)
    e444:	df000715 	stw	fp,28(sp)
    e448:	df000704 	addi	fp,sp,28
    e44c:	e13ffc15 	stw	r4,-16(fp)
    e450:	e17ffd15 	stw	r5,-12(fp)
    e454:	e1bffe15 	stw	r6,-8(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    e458:	e0bffc17 	ldw	r2,-16(fp)
    e45c:	10800017 	ldw	r2,0(r2)
    e460:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
    e464:	e03ffa15 	stw	zero,-24(fp)
	int count = 0;
    e468:	e03ff915 	stw	zero,-28(fp)
	while (count < len)
    e46c:	00001206 	br	e4b8 <alt_up_ps2_write_fd+0x7c>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
    e470:	e0bffd17 	ldw	r2,-12(fp)
    e474:	10800003 	ldbu	r2,0(r2)
    e478:	11403fcc 	andi	r5,r2,255
    e47c:	e0bffd17 	ldw	r2,-12(fp)
    e480:	10800044 	addi	r2,r2,1
    e484:	e0bffd15 	stw	r2,-12(fp)
    e488:	e13ffb17 	ldw	r4,-20(fp)
    e48c:	000e0c80 	call	e0c8 <alt_up_ps2_write_data_byte>
    e490:	e0bffa15 	stw	r2,-24(fp)
		if (status!=0)
    e494:	e0bffa17 	ldw	r2,-24(fp)
    e498:	1005003a 	cmpeq	r2,r2,zero
    e49c:	1000031e 	bne	r2,zero,e4ac <alt_up_ps2_write_fd+0x70>
			return count;
    e4a0:	e0bff917 	ldw	r2,-28(fp)
    e4a4:	e0bfff15 	stw	r2,-4(fp)
    e4a8:	00000806 	br	e4cc <alt_up_ps2_write_fd+0x90>
		count++;
    e4ac:	e0bff917 	ldw	r2,-28(fp)
    e4b0:	10800044 	addi	r2,r2,1
    e4b4:	e0bff915 	stw	r2,-28(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
    e4b8:	e0fff917 	ldw	r3,-28(fp)
    e4bc:	e0bffe17 	ldw	r2,-8(fp)
    e4c0:	18bfeb16 	blt	r3,r2,e470 <alt_up_ps2_write_fd+0x34>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
    e4c4:	e0bff917 	ldw	r2,-28(fp)
    e4c8:	e0bfff15 	stw	r2,-4(fp)
    e4cc:	e0bfff17 	ldw	r2,-4(fp)
}
    e4d0:	e037883a 	mov	sp,fp
    e4d4:	dfc00117 	ldw	ra,4(sp)
    e4d8:	df000017 	ldw	fp,0(sp)
    e4dc:	dec00204 	addi	sp,sp,8
    e4e0:	f800283a 	ret

0000e4e4 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
    e4e4:	defffc04 	addi	sp,sp,-16
    e4e8:	dfc00315 	stw	ra,12(sp)
    e4ec:	df000215 	stw	fp,8(sp)
    e4f0:	df000204 	addi	fp,sp,8
    e4f4:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
    e4f8:	e13fff17 	ldw	r4,-4(fp)
    e4fc:	01400074 	movhi	r5,1
    e500:	294ef704 	addi	r5,r5,15324
    e504:	00104780 	call	10478 <alt_find_dev>
    e508:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    e50c:	e0bffe17 	ldw	r2,-8(fp)
}
    e510:	e037883a 	mov	sp,fp
    e514:	dfc00117 	ldw	ra,4(sp)
    e518:	df000017 	ldw	fp,0(sp)
    e51c:	dec00204 	addi	sp,sp,8
    e520:	f800283a 	ret

0000e524 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
    e524:	defffd04 	addi	sp,sp,-12
    e528:	df000215 	stw	fp,8(sp)
    e52c:	df000204 	addi	fp,sp,8
    e530:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    e534:	e0bfff17 	ldw	r2,-4(fp)
    e538:	10800a17 	ldw	r2,40(r2)
    e53c:	10800104 	addi	r2,r2,4
    e540:	10800037 	ldwio	r2,0(r2)
    e544:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
    e548:	e0bffe17 	ldw	r2,-8(fp)
    e54c:	10800054 	ori	r2,r2,1
    e550:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    e554:	e0bfff17 	ldw	r2,-4(fp)
    e558:	10800a17 	ldw	r2,40(r2)
    e55c:	10800104 	addi	r2,r2,4
    e560:	e0fffe17 	ldw	r3,-8(fp)
    e564:	10c00035 	stwio	r3,0(r2)
}
    e568:	e037883a 	mov	sp,fp
    e56c:	df000017 	ldw	fp,0(sp)
    e570:	dec00104 	addi	sp,sp,4
    e574:	f800283a 	ret

0000e578 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
    e578:	defffd04 	addi	sp,sp,-12
    e57c:	df000215 	stw	fp,8(sp)
    e580:	df000204 	addi	fp,sp,8
    e584:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    e588:	e0bfff17 	ldw	r2,-4(fp)
    e58c:	10800a17 	ldw	r2,40(r2)
    e590:	10800104 	addi	r2,r2,4
    e594:	10800037 	ldwio	r2,0(r2)
    e598:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
    e59c:	e0fffe17 	ldw	r3,-8(fp)
    e5a0:	00bfff84 	movi	r2,-2
    e5a4:	1884703a 	and	r2,r3,r2
    e5a8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    e5ac:	e0bfff17 	ldw	r2,-4(fp)
    e5b0:	10800a17 	ldw	r2,40(r2)
    e5b4:	10800104 	addi	r2,r2,4
    e5b8:	e0fffe17 	ldw	r3,-8(fp)
    e5bc:	10c00035 	stwio	r3,0(r2)
}
    e5c0:	e037883a 	mov	sp,fp
    e5c4:	df000017 	ldw	fp,0(sp)
    e5c8:	dec00104 	addi	sp,sp,4
    e5cc:	f800283a 	ret

0000e5d0 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
    e5d0:	defffd04 	addi	sp,sp,-12
    e5d4:	df000215 	stw	fp,8(sp)
    e5d8:	df000204 	addi	fp,sp,8
    e5dc:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
    e5e0:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
    e5e4:	e0bfff17 	ldw	r2,-4(fp)
    e5e8:	10800a17 	ldw	r2,40(r2)
    e5ec:	10800084 	addi	r2,r2,2
    e5f0:	1080002b 	ldhuio	r2,0(r2)
    e5f4:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
    e5f8:	e0bffe0b 	ldhu	r2,-8(fp)
}
    e5fc:	e037883a 	mov	sp,fp
    e600:	df000017 	ldw	fp,0(sp)
    e604:	dec00104 	addi	sp,sp,4
    e608:	f800283a 	ret

0000e60c <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
    e60c:	defffd04 	addi	sp,sp,-12
    e610:	df000215 	stw	fp,8(sp)
    e614:	df000204 	addi	fp,sp,8
    e618:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    e61c:	e0bfff17 	ldw	r2,-4(fp)
    e620:	10800a17 	ldw	r2,40(r2)
    e624:	10800104 	addi	r2,r2,4
    e628:	10800037 	ldwio	r2,0(r2)
    e62c:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
    e630:	e0bffe17 	ldw	r2,-8(fp)
    e634:	10bfffec 	andhi	r2,r2,65535
    e638:	1004d43a 	srli	r2,r2,16
}
    e63c:	e037883a 	mov	sp,fp
    e640:	df000017 	ldw	fp,0(sp)
    e644:	dec00104 	addi	sp,sp,4
    e648:	f800283a 	ret

0000e64c <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
    e64c:	defffc04 	addi	sp,sp,-16
    e650:	df000315 	stw	fp,12(sp)
    e654:	df000304 	addi	fp,sp,12
    e658:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
    e65c:	e0bffe17 	ldw	r2,-8(fp)
    e660:	1080800c 	andi	r2,r2,512
    e664:	1004d27a 	srli	r2,r2,9
    e668:	e0bffd15 	stw	r2,-12(fp)
	return (parity_error ? -1 : 0);
    e66c:	e0bffd17 	ldw	r2,-12(fp)
    e670:	1005003a 	cmpeq	r2,r2,zero
    e674:	1000031e 	bne	r2,zero,e684 <alt_up_rs232_check_parity+0x38>
    e678:	00bfffc4 	movi	r2,-1
    e67c:	e0bfff15 	stw	r2,-4(fp)
    e680:	00000106 	br	e688 <alt_up_rs232_check_parity+0x3c>
    e684:	e03fff15 	stw	zero,-4(fp)
    e688:	e0bfff17 	ldw	r2,-4(fp)
}
    e68c:	e037883a 	mov	sp,fp
    e690:	df000017 	ldw	fp,0(sp)
    e694:	dec00104 	addi	sp,sp,4
    e698:	f800283a 	ret

0000e69c <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
    e69c:	defffc04 	addi	sp,sp,-16
    e6a0:	df000315 	stw	fp,12(sp)
    e6a4:	df000304 	addi	fp,sp,12
    e6a8:	e13ffe15 	stw	r4,-8(fp)
    e6ac:	e17fff05 	stb	r5,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    e6b0:	e0bffe17 	ldw	r2,-8(fp)
    e6b4:	10800a17 	ldw	r2,40(r2)
    e6b8:	10800037 	ldwio	r2,0(r2)
    e6bc:	e0bffd15 	stw	r2,-12(fp)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
    e6c0:	e0bffe17 	ldw	r2,-8(fp)
    e6c4:	10800a17 	ldw	r2,40(r2)
    e6c8:	e0ffff03 	ldbu	r3,-4(fp)
    e6cc:	10c00035 	stwio	r3,0(r2)
	return 0;
    e6d0:	0005883a 	mov	r2,zero
}
    e6d4:	e037883a 	mov	sp,fp
    e6d8:	df000017 	ldw	fp,0(sp)
    e6dc:	dec00104 	addi	sp,sp,4
    e6e0:	f800283a 	ret

0000e6e4 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
    e6e4:	defffa04 	addi	sp,sp,-24
    e6e8:	dfc00515 	stw	ra,20(sp)
    e6ec:	df000415 	stw	fp,16(sp)
    e6f0:	df000404 	addi	fp,sp,16
    e6f4:	e13ffd15 	stw	r4,-12(fp)
    e6f8:	e17ffe15 	stw	r5,-8(fp)
    e6fc:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    e700:	e0bffd17 	ldw	r2,-12(fp)
    e704:	10800a17 	ldw	r2,40(r2)
    e708:	10800037 	ldwio	r2,0(r2)
    e70c:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
    e710:	e0bffc17 	ldw	r2,-16(fp)
    e714:	1007883a 	mov	r3,r2
    e718:	e0bffe17 	ldw	r2,-8(fp)
    e71c:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
    e720:	e13ffc17 	ldw	r4,-16(fp)
    e724:	000e64c0 	call	e64c <alt_up_rs232_check_parity>
    e728:	1007883a 	mov	r3,r2
    e72c:	e0bfff17 	ldw	r2,-4(fp)
    e730:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
    e734:	e0bffc17 	ldw	r2,-16(fp)
    e738:	10a0000c 	andi	r2,r2,32768
    e73c:	1004d3fa 	srli	r2,r2,15
    e740:	10bfffc4 	addi	r2,r2,-1
}
    e744:	e037883a 	mov	sp,fp
    e748:	dfc00117 	ldw	ra,4(sp)
    e74c:	df000017 	ldw	fp,0(sp)
    e750:	dec00204 	addi	sp,sp,8
    e754:	f800283a 	ret

0000e758 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
    e758:	defff804 	addi	sp,sp,-32
    e75c:	dfc00715 	stw	ra,28(sp)
    e760:	df000615 	stw	fp,24(sp)
    e764:	df000604 	addi	fp,sp,24
    e768:	e13ffd15 	stw	r4,-12(fp)
    e76c:	e17ffe15 	stw	r5,-8(fp)
    e770:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    e774:	e0bffd17 	ldw	r2,-12(fp)
    e778:	10800017 	ldw	r2,0(r2)
    e77c:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
    e780:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
    e784:	00000c06 	br	e7b8 <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
    e788:	e17ffe17 	ldw	r5,-8(fp)
    e78c:	e0bffe17 	ldw	r2,-8(fp)
    e790:	10800044 	addi	r2,r2,1
    e794:	e0bffe15 	stw	r2,-8(fp)
    e798:	e1bffc04 	addi	r6,fp,-16
    e79c:	e13ffb17 	ldw	r4,-20(fp)
    e7a0:	000e6e40 	call	e6e4 <alt_up_rs232_read_data>
    e7a4:	1004c03a 	cmpne	r2,r2,zero
    e7a8:	1000091e 	bne	r2,zero,e7d0 <alt_up_rs232_read_fd+0x78>
			count++;
    e7ac:	e0bffa17 	ldw	r2,-24(fp)
    e7b0:	10800044 	addi	r2,r2,1
    e7b4:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    e7b8:	e0bfff17 	ldw	r2,-4(fp)
    e7bc:	10bfffc4 	addi	r2,r2,-1
    e7c0:	e0bfff15 	stw	r2,-4(fp)
    e7c4:	e0bfff17 	ldw	r2,-4(fp)
    e7c8:	10bfffd8 	cmpnei	r2,r2,-1
    e7cc:	103fee1e 	bne	r2,zero,e788 <alt_up_rs232_read_fd+0x30>
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
    e7d0:	e0bffa17 	ldw	r2,-24(fp)
}
    e7d4:	e037883a 	mov	sp,fp
    e7d8:	dfc00117 	ldw	ra,4(sp)
    e7dc:	df000017 	ldw	fp,0(sp)
    e7e0:	dec00204 	addi	sp,sp,8
    e7e4:	f800283a 	ret

0000e7e8 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
    e7e8:	defff904 	addi	sp,sp,-28
    e7ec:	dfc00615 	stw	ra,24(sp)
    e7f0:	df000515 	stw	fp,20(sp)
    e7f4:	df000504 	addi	fp,sp,20
    e7f8:	e13ffd15 	stw	r4,-12(fp)
    e7fc:	e17ffe15 	stw	r5,-8(fp)
    e800:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    e804:	e0bffd17 	ldw	r2,-12(fp)
    e808:	10800017 	ldw	r2,0(r2)
    e80c:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
    e810:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
    e814:	00000d06 	br	e84c <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
    e818:	e0bffe17 	ldw	r2,-8(fp)
    e81c:	10800003 	ldbu	r2,0(r2)
    e820:	11403fcc 	andi	r5,r2,255
    e824:	e13ffc17 	ldw	r4,-16(fp)
    e828:	000e69c0 	call	e69c <alt_up_rs232_write_data>
    e82c:	1004c03a 	cmpne	r2,r2,zero
    e830:	10000c1e 	bne	r2,zero,e864 <alt_up_rs232_write_fd+0x7c>
		{
			count++;
    e834:	e0bffb17 	ldw	r2,-20(fp)
    e838:	10800044 	addi	r2,r2,1
    e83c:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
    e840:	e0bffe17 	ldw	r2,-8(fp)
    e844:	10800044 	addi	r2,r2,1
    e848:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
    e84c:	e0bfff17 	ldw	r2,-4(fp)
    e850:	10bfffc4 	addi	r2,r2,-1
    e854:	e0bfff15 	stw	r2,-4(fp)
    e858:	e0bfff17 	ldw	r2,-4(fp)
    e85c:	10bfffd8 	cmpnei	r2,r2,-1
    e860:	103fed1e 	bne	r2,zero,e818 <alt_up_rs232_write_fd+0x30>
			ptr++;
		}
		else
			break;
	}
	return count;
    e864:	e0bffb17 	ldw	r2,-20(fp)
}
    e868:	e037883a 	mov	sp,fp
    e86c:	dfc00117 	ldw	ra,4(sp)
    e870:	df000017 	ldw	fp,0(sp)
    e874:	dec00204 	addi	sp,sp,8
    e878:	f800283a 	ret

0000e87c <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
    e87c:	defffc04 	addi	sp,sp,-16
    e880:	dfc00315 	stw	ra,12(sp)
    e884:	df000215 	stw	fp,8(sp)
    e888:	df000204 	addi	fp,sp,8
    e88c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
    e890:	e13fff17 	ldw	r4,-4(fp)
    e894:	01400074 	movhi	r5,1
    e898:	294ef704 	addi	r5,r5,15324
    e89c:	00104780 	call	10478 <alt_find_dev>
    e8a0:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    e8a4:	e0bffe17 	ldw	r2,-8(fp)
}
    e8a8:	e037883a 	mov	sp,fp
    e8ac:	dfc00117 	ldw	ra,4(sp)
    e8b0:	df000017 	ldw	fp,0(sp)
    e8b4:	dec00204 	addi	sp,sp,8
    e8b8:	f800283a 	ret

0000e8bc <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
    e8bc:	defffc04 	addi	sp,sp,-16
    e8c0:	dfc00315 	stw	ra,12(sp)
    e8c4:	df000215 	stw	fp,8(sp)
    e8c8:	df000204 	addi	fp,sp,8
    e8cc:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
    e8d0:	e0bfff17 	ldw	r2,-4(fp)
    e8d4:	10800217 	ldw	r2,8(r2)
    e8d8:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
    e8dc:	00000c06 	br	e910 <alt_up_char_buffer_init+0x54>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
    e8e0:	e13ffe17 	ldw	r4,-8(fp)
    e8e4:	01400074 	movhi	r5,1
    e8e8:	29477404 	addi	r5,r5,7632
    e8ec:	00080500 	call	8050 <strcmp>
    e8f0:	1004c03a 	cmpne	r2,r2,zero
    e8f4:	1000031e 	bne	r2,zero,e904 <alt_up_char_buffer_init+0x48>
			(*name) = '\0';
    e8f8:	e0bffe17 	ldw	r2,-8(fp)
    e8fc:	10000005 	stb	zero,0(r2)
			break;
    e900:	00000a06 	br	e92c <alt_up_char_buffer_init+0x70>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
    e904:	e0bffe17 	ldw	r2,-8(fp)
    e908:	10800044 	addi	r2,r2,1
    e90c:	e0bffe15 	stw	r2,-8(fp)
    e910:	e0bffe17 	ldw	r2,-8(fp)
    e914:	10800003 	ldbu	r2,0(r2)
    e918:	10803fcc 	andi	r2,r2,255
    e91c:	1080201c 	xori	r2,r2,128
    e920:	10bfe004 	addi	r2,r2,-128
    e924:	1004c03a 	cmpne	r2,r2,zero
    e928:	103fed1e 	bne	r2,zero,e8e0 <alt_up_char_buffer_init+0x24>
			break;
		}
	}
	
	return;
}
    e92c:	e037883a 	mov	sp,fp
    e930:	dfc00117 	ldw	ra,4(sp)
    e934:	df000017 	ldw	fp,0(sp)
    e938:	dec00204 	addi	sp,sp,8
    e93c:	f800283a 	ret

0000e940 <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
    e940:	defffc04 	addi	sp,sp,-16
    e944:	dfc00315 	stw	ra,12(sp)
    e948:	df000215 	stw	fp,8(sp)
    e94c:	df000204 	addi	fp,sp,8
    e950:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
    e954:	e13fff17 	ldw	r4,-4(fp)
    e958:	01400074 	movhi	r5,1
    e95c:	294ef704 	addi	r5,r5,15324
    e960:	00104780 	call	10478 <alt_find_dev>
    e964:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    e968:	e0bffe17 	ldw	r2,-8(fp)
}
    e96c:	e037883a 	mov	sp,fp
    e970:	dfc00117 	ldw	ra,4(sp)
    e974:	df000017 	ldw	fp,0(sp)
    e978:	dec00204 	addi	sp,sp,8
    e97c:	f800283a 	ret

0000e980 <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
    e980:	defff904 	addi	sp,sp,-28
    e984:	df000615 	stw	fp,24(sp)
    e988:	df000604 	addi	fp,sp,24
    e98c:	e13ffb15 	stw	r4,-20(fp)
    e990:	e1bffd15 	stw	r6,-12(fp)
    e994:	e1fffe15 	stw	r7,-8(fp)
    e998:	e17ffc05 	stb	r5,-16(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    e99c:	e0bffb17 	ldw	r2,-20(fp)
    e9a0:	10c00c17 	ldw	r3,48(r2)
    e9a4:	e0bffd17 	ldw	r2,-12(fp)
    e9a8:	10c0042e 	bgeu	r2,r3,e9bc <alt_up_char_buffer_draw+0x3c>
    e9ac:	e0bffb17 	ldw	r2,-20(fp)
    e9b0:	10c00d17 	ldw	r3,52(r2)
    e9b4:	e0bffe17 	ldw	r2,-8(fp)
    e9b8:	10c00336 	bltu	r2,r3,e9c8 <alt_up_char_buffer_draw+0x48>
		return -1;
    e9bc:	00bfffc4 	movi	r2,-1
    e9c0:	e0bfff15 	stw	r2,-4(fp)
    e9c4:	00001d06 	br	ea3c <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
    e9c8:	e03ffa15 	stw	zero,-24(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
    e9cc:	e0bffb17 	ldw	r2,-20(fp)
    e9d0:	10c00f17 	ldw	r3,60(r2)
    e9d4:	e0bffd17 	ldw	r2,-12(fp)
    e9d8:	1886703a 	and	r3,r3,r2
    e9dc:	e0bffb17 	ldw	r2,-20(fp)
    e9e0:	10800e17 	ldw	r2,56(r2)
    e9e4:	1886983a 	sll	r3,r3,r2
    e9e8:	e0bffa17 	ldw	r2,-24(fp)
    e9ec:	10c4b03a 	or	r2,r2,r3
    e9f0:	e0bffa15 	stw	r2,-24(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
    e9f4:	e0bffb17 	ldw	r2,-20(fp)
    e9f8:	10c01117 	ldw	r3,68(r2)
    e9fc:	e0bffe17 	ldw	r2,-8(fp)
    ea00:	1886703a 	and	r3,r3,r2
    ea04:	e0bffb17 	ldw	r2,-20(fp)
    ea08:	10801017 	ldw	r2,64(r2)
    ea0c:	1886983a 	sll	r3,r3,r2
    ea10:	e0bffa17 	ldw	r2,-24(fp)
    ea14:	10c4b03a 	or	r2,r2,r3
    ea18:	e0bffa15 	stw	r2,-24(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
    ea1c:	e0bffb17 	ldw	r2,-20(fp)
    ea20:	10800b17 	ldw	r2,44(r2)
    ea24:	1007883a 	mov	r3,r2
    ea28:	e0bffa17 	ldw	r2,-24(fp)
    ea2c:	1885883a 	add	r2,r3,r2
    ea30:	e0fffc03 	ldbu	r3,-16(fp)
    ea34:	10c00025 	stbio	r3,0(r2)

	return 0;
    ea38:	e03fff15 	stw	zero,-4(fp)
    ea3c:	e0bfff17 	ldw	r2,-4(fp)
}
    ea40:	e037883a 	mov	sp,fp
    ea44:	df000017 	ldw	fp,0(sp)
    ea48:	dec00104 	addi	sp,sp,4
    ea4c:	f800283a 	ret

0000ea50 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
    ea50:	defff904 	addi	sp,sp,-28
    ea54:	df000615 	stw	fp,24(sp)
    ea58:	df000604 	addi	fp,sp,24
    ea5c:	e13ffb15 	stw	r4,-20(fp)
    ea60:	e17ffc15 	stw	r5,-16(fp)
    ea64:	e1bffd15 	stw	r6,-12(fp)
    ea68:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    ea6c:	e0bffb17 	ldw	r2,-20(fp)
    ea70:	10c00c17 	ldw	r3,48(r2)
    ea74:	e0bffd17 	ldw	r2,-12(fp)
    ea78:	10c0042e 	bgeu	r2,r3,ea8c <alt_up_char_buffer_string+0x3c>
    ea7c:	e0bffb17 	ldw	r2,-20(fp)
    ea80:	10c00d17 	ldw	r3,52(r2)
    ea84:	e0bffe17 	ldw	r2,-8(fp)
    ea88:	10c00336 	bltu	r2,r3,ea98 <alt_up_char_buffer_string+0x48>
		return -1;
    ea8c:	00bfffc4 	movi	r2,-1
    ea90:	e0bfff15 	stw	r2,-4(fp)
    ea94:	00002e06 	br	eb50 <alt_up_char_buffer_string+0x100>
	
	unsigned int offset = 0;
    ea98:	e03ffa15 	stw	zero,-24(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
    ea9c:	e0bffb17 	ldw	r2,-20(fp)
    eaa0:	10801017 	ldw	r2,64(r2)
    eaa4:	1007883a 	mov	r3,r2
    eaa8:	e0bffe17 	ldw	r2,-8(fp)
    eaac:	10c6983a 	sll	r3,r2,r3
    eab0:	e0bffd17 	ldw	r2,-12(fp)
    eab4:	1885883a 	add	r2,r3,r2
    eab8:	e0bffa15 	stw	r2,-24(fp)

	while ( *ptr )
    eabc:	00001c06 	br	eb30 <alt_up_char_buffer_string+0xe0>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
    eac0:	e0bffb17 	ldw	r2,-20(fp)
    eac4:	10800b17 	ldw	r2,44(r2)
    eac8:	1007883a 	mov	r3,r2
    eacc:	e0bffa17 	ldw	r2,-24(fp)
    ead0:	1889883a 	add	r4,r3,r2
    ead4:	e0bffc17 	ldw	r2,-16(fp)
    ead8:	10800003 	ldbu	r2,0(r2)
    eadc:	10c03fcc 	andi	r3,r2,255
    eae0:	18c0201c 	xori	r3,r3,128
    eae4:	18ffe004 	addi	r3,r3,-128
    eae8:	2005883a 	mov	r2,r4
    eaec:	10c00025 	stbio	r3,0(r2)
		++ptr;
    eaf0:	e0bffc17 	ldw	r2,-16(fp)
    eaf4:	10800044 	addi	r2,r2,1
    eaf8:	e0bffc15 	stw	r2,-16(fp)
		if (++x >= char_buffer->x_resolution)
    eafc:	e0bffd17 	ldw	r2,-12(fp)
    eb00:	10800044 	addi	r2,r2,1
    eb04:	e0bffd15 	stw	r2,-12(fp)
    eb08:	e0bffb17 	ldw	r2,-20(fp)
    eb0c:	10c00c17 	ldw	r3,48(r2)
    eb10:	e0bffd17 	ldw	r2,-12(fp)
    eb14:	10c00336 	bltu	r2,r3,eb24 <alt_up_char_buffer_string+0xd4>
			return -1;
    eb18:	00bfffc4 	movi	r2,-1
    eb1c:	e0bfff15 	stw	r2,-4(fp)
    eb20:	00000b06 	br	eb50 <alt_up_char_buffer_string+0x100>
		++offset;
    eb24:	e0bffa17 	ldw	r2,-24(fp)
    eb28:	10800044 	addi	r2,r2,1
    eb2c:	e0bffa15 	stw	r2,-24(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
    eb30:	e0bffc17 	ldw	r2,-16(fp)
    eb34:	10800003 	ldbu	r2,0(r2)
    eb38:	10803fcc 	andi	r2,r2,255
    eb3c:	1080201c 	xori	r2,r2,128
    eb40:	10bfe004 	addi	r2,r2,-128
    eb44:	1004c03a 	cmpne	r2,r2,zero
    eb48:	103fdd1e 	bne	r2,zero,eac0 <alt_up_char_buffer_string+0x70>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
    eb4c:	e03fff15 	stw	zero,-4(fp)
    eb50:	e0bfff17 	ldw	r2,-4(fp)
}
    eb54:	e037883a 	mov	sp,fp
    eb58:	df000017 	ldw	fp,0(sp)
    eb5c:	dec00104 	addi	sp,sp,4
    eb60:	f800283a 	ret

0000eb64 <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
    eb64:	defffe04 	addi	sp,sp,-8
    eb68:	df000115 	stw	fp,4(sp)
    eb6c:	df000104 	addi	fp,sp,4
    eb70:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
    eb74:	e0bfff17 	ldw	r2,-4(fp)
    eb78:	10800a17 	ldw	r2,40(r2)
    eb7c:	10800084 	addi	r2,r2,2
    eb80:	1007883a 	mov	r3,r2
    eb84:	00800044 	movi	r2,1
    eb88:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
    eb8c:	e0bfff17 	ldw	r2,-4(fp)
    eb90:	10800a17 	ldw	r2,40(r2)
    eb94:	10800084 	addi	r2,r2,2
    eb98:	10800023 	ldbuio	r2,0(r2)
    eb9c:	1080004c 	andi	r2,r2,1
    eba0:	10803fcc 	andi	r2,r2,255
    eba4:	1004c03a 	cmpne	r2,r2,zero
    eba8:	103ff81e 	bne	r2,zero,eb8c <alt_up_char_buffer_clear+0x28>
	return 0;
    ebac:	0005883a 	mov	r2,zero
}
    ebb0:	e037883a 	mov	sp,fp
    ebb4:	df000017 	ldw	fp,0(sp)
    ebb8:	dec00104 	addi	sp,sp,4
    ebbc:	f800283a 	ret

0000ebc0 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
    ebc0:	defffc04 	addi	sp,sp,-16
    ebc4:	dfc00315 	stw	ra,12(sp)
    ebc8:	df000215 	stw	fp,8(sp)
    ebcc:	df000204 	addi	fp,sp,8
    ebd0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
    ebd4:	e13fff17 	ldw	r4,-4(fp)
    ebd8:	01400074 	movhi	r5,1
    ebdc:	294ef704 	addi	r5,r5,15324
    ebe0:	00104780 	call	10478 <alt_find_dev>
    ebe4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    ebe8:	e0bffe17 	ldw	r2,-8(fp)
}
    ebec:	e037883a 	mov	sp,fp
    ebf0:	dfc00117 	ldw	ra,4(sp)
    ebf4:	df000017 	ldw	fp,0(sp)
    ebf8:	dec00204 	addi	sp,sp,8
    ebfc:	f800283a 	ret

0000ec00 <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
    ec00:	defff904 	addi	sp,sp,-28
    ec04:	df000615 	stw	fp,24(sp)
    ec08:	df000604 	addi	fp,sp,24
    ec0c:	e13ffb15 	stw	r4,-20(fp)
    ec10:	e17ffc15 	stw	r5,-16(fp)
    ec14:	e1bffd15 	stw	r6,-12(fp)
    ec18:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
    ec1c:	e0bffb17 	ldw	r2,-20(fp)
    ec20:	10c00f17 	ldw	r3,60(r2)
    ec24:	e0bffd17 	ldw	r2,-12(fp)
    ec28:	10c0042e 	bgeu	r2,r3,ec3c <alt_up_pixel_buffer_dma_draw+0x3c>
    ec2c:	e0bffb17 	ldw	r2,-20(fp)
    ec30:	10c01017 	ldw	r3,64(r2)
    ec34:	e0bffe17 	ldw	r2,-8(fp)
    ec38:	10c00336 	bltu	r2,r3,ec48 <alt_up_pixel_buffer_dma_draw+0x48>
		return -1;
    ec3c:	00bfffc4 	movi	r2,-1
    ec40:	e0bfff15 	stw	r2,-4(fp)
    ec44:	00005106 	br	ed8c <alt_up_pixel_buffer_dma_draw+0x18c>

	unsigned int addr = 0;
    ec48:	e03ffa15 	stw	zero,-24(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    ec4c:	e0bffb17 	ldw	r2,-20(fp)
    ec50:	10800d17 	ldw	r2,52(r2)
    ec54:	1004c03a 	cmpne	r2,r2,zero
    ec58:	1000151e 	bne	r2,zero,ecb0 <alt_up_pixel_buffer_dma_draw+0xb0>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
    ec5c:	e0bffb17 	ldw	r2,-20(fp)
    ec60:	10c01217 	ldw	r3,72(r2)
    ec64:	e0bffd17 	ldw	r2,-12(fp)
    ec68:	1886703a 	and	r3,r3,r2
    ec6c:	e0bffb17 	ldw	r2,-20(fp)
    ec70:	10801117 	ldw	r2,68(r2)
    ec74:	1886983a 	sll	r3,r3,r2
    ec78:	e0bffa17 	ldw	r2,-24(fp)
    ec7c:	10c4b03a 	or	r2,r2,r3
    ec80:	e0bffa15 	stw	r2,-24(fp)
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
    ec84:	e0bffb17 	ldw	r2,-20(fp)
    ec88:	10c01417 	ldw	r3,80(r2)
    ec8c:	e0bffe17 	ldw	r2,-8(fp)
    ec90:	1886703a 	and	r3,r3,r2
    ec94:	e0bffb17 	ldw	r2,-20(fp)
    ec98:	10801317 	ldw	r2,76(r2)
    ec9c:	1886983a 	sll	r3,r3,r2
    eca0:	e0bffa17 	ldw	r2,-24(fp)
    eca4:	10c4b03a 	or	r2,r2,r3
    eca8:	e0bffa15 	stw	r2,-24(fp)
    ecac:	00001706 	br	ed0c <alt_up_pixel_buffer_dma_draw+0x10c>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
    ecb0:	e0bffb17 	ldw	r2,-20(fp)
    ecb4:	10c01217 	ldw	r3,72(r2)
    ecb8:	e0bffd17 	ldw	r2,-12(fp)
    ecbc:	1886703a 	and	r3,r3,r2
    ecc0:	e0bffb17 	ldw	r2,-20(fp)
    ecc4:	10801117 	ldw	r2,68(r2)
    ecc8:	1886983a 	sll	r3,r3,r2
    eccc:	e0bffa17 	ldw	r2,-24(fp)
    ecd0:	10c5883a 	add	r2,r2,r3
    ecd4:	e0bffa15 	stw	r2,-24(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
    ecd8:	e0bffb17 	ldw	r2,-20(fp)
    ecdc:	10c01417 	ldw	r3,80(r2)
    ece0:	e0bffe17 	ldw	r2,-8(fp)
    ece4:	1886703a 	and	r3,r3,r2
    ece8:	e0bffb17 	ldw	r2,-20(fp)
    ecec:	10800f17 	ldw	r2,60(r2)
    ecf0:	1887383a 	mul	r3,r3,r2
    ecf4:	e0bffb17 	ldw	r2,-20(fp)
    ecf8:	10801117 	ldw	r2,68(r2)
    ecfc:	1886983a 	sll	r3,r3,r2
    ed00:	e0bffa17 	ldw	r2,-24(fp)
    ed04:	10c5883a 	add	r2,r2,r3
    ed08:	e0bffa15 	stw	r2,-24(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    ed0c:	e0bffb17 	ldw	r2,-20(fp)
    ed10:	10800e17 	ldw	r2,56(r2)
    ed14:	10800058 	cmpnei	r2,r2,1
    ed18:	1000081e 	bne	r2,zero,ed3c <alt_up_pixel_buffer_dma_draw+0x13c>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    ed1c:	e0bffb17 	ldw	r2,-20(fp)
    ed20:	10800c17 	ldw	r2,48(r2)
    ed24:	1007883a 	mov	r3,r2
    ed28:	e0bffa17 	ldw	r2,-24(fp)
    ed2c:	1885883a 	add	r2,r3,r2
    ed30:	e0fffc17 	ldw	r3,-16(fp)
    ed34:	10c00025 	stbio	r3,0(r2)
    ed38:	00001306 	br	ed88 <alt_up_pixel_buffer_dma_draw+0x188>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    ed3c:	e0bffb17 	ldw	r2,-20(fp)
    ed40:	10800e17 	ldw	r2,56(r2)
    ed44:	10800098 	cmpnei	r2,r2,2
    ed48:	1000081e 	bne	r2,zero,ed6c <alt_up_pixel_buffer_dma_draw+0x16c>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    ed4c:	e0bffb17 	ldw	r2,-20(fp)
    ed50:	10800c17 	ldw	r2,48(r2)
    ed54:	1007883a 	mov	r3,r2
    ed58:	e0bffa17 	ldw	r2,-24(fp)
    ed5c:	1885883a 	add	r2,r3,r2
    ed60:	e0fffc17 	ldw	r3,-16(fp)
    ed64:	10c0002d 	sthio	r3,0(r2)
    ed68:	00000706 	br	ed88 <alt_up_pixel_buffer_dma_draw+0x188>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    ed6c:	e0bffb17 	ldw	r2,-20(fp)
    ed70:	10800c17 	ldw	r2,48(r2)
    ed74:	1007883a 	mov	r3,r2
    ed78:	e0bffa17 	ldw	r2,-24(fp)
    ed7c:	1885883a 	add	r2,r3,r2
    ed80:	e0fffc17 	ldw	r3,-16(fp)
    ed84:	10c00035 	stwio	r3,0(r2)
	}

	return 0;
    ed88:	e03fff15 	stw	zero,-4(fp)
    ed8c:	e0bfff17 	ldw	r2,-4(fp)
}
    ed90:	e037883a 	mov	sp,fp
    ed94:	df000017 	ldw	fp,0(sp)
    ed98:	dec00104 	addi	sp,sp,4
    ed9c:	f800283a 	ret

0000eda0 <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
    eda0:	defffd04 	addi	sp,sp,-12
    eda4:	df000215 	stw	fp,8(sp)
    eda8:	df000204 	addi	fp,sp,8
    edac:	e13ffe15 	stw	r4,-8(fp)
    edb0:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
    edb4:	e0bffe17 	ldw	r2,-8(fp)
    edb8:	10800a17 	ldw	r2,40(r2)
    edbc:	10800104 	addi	r2,r2,4
    edc0:	e0ffff17 	ldw	r3,-4(fp)
    edc4:	10c00035 	stwio	r3,0(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
    edc8:	e0bffe17 	ldw	r2,-8(fp)
    edcc:	10800a17 	ldw	r2,40(r2)
    edd0:	10800104 	addi	r2,r2,4
    edd4:	10800037 	ldwio	r2,0(r2)
    edd8:	1007883a 	mov	r3,r2
    eddc:	e0bffe17 	ldw	r2,-8(fp)
    ede0:	10c00c15 	stw	r3,48(r2)
	return 0;
    ede4:	0005883a 	mov	r2,zero
}
    ede8:	e037883a 	mov	sp,fp
    edec:	df000017 	ldw	fp,0(sp)
    edf0:	dec00104 	addi	sp,sp,4
    edf4:	f800283a 	ret

0000edf8 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
    edf8:	defffe04 	addi	sp,sp,-8
    edfc:	df000115 	stw	fp,4(sp)
    ee00:	df000104 	addi	fp,sp,4
    ee04:	e13fff15 	stw	r4,-4(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
    ee08:	e0bfff17 	ldw	r2,-4(fp)
    ee0c:	11000c17 	ldw	r4,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
    ee10:	e0bfff17 	ldw	r2,-4(fp)
    ee14:	10800a17 	ldw	r2,40(r2)
    ee18:	1007883a 	mov	r3,r2
    ee1c:	00800044 	movi	r2,1
    ee20:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
    ee24:	e0bfff17 	ldw	r2,-4(fp)
    ee28:	10c00b17 	ldw	r3,44(r2)
    ee2c:	e0bfff17 	ldw	r2,-4(fp)
    ee30:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
    ee34:	e0bfff17 	ldw	r2,-4(fp)
    ee38:	11000b15 	stw	r4,44(r2)
	return 0;
    ee3c:	0005883a 	mov	r2,zero
}
    ee40:	e037883a 	mov	sp,fp
    ee44:	df000017 	ldw	fp,0(sp)
    ee48:	dec00104 	addi	sp,sp,4
    ee4c:	f800283a 	ret

0000ee50 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
    ee50:	defffe04 	addi	sp,sp,-8
    ee54:	df000115 	stw	fp,4(sp)
    ee58:	df000104 	addi	fp,sp,4
    ee5c:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
    ee60:	e0bfff17 	ldw	r2,-4(fp)
    ee64:	10800a17 	ldw	r2,40(r2)
    ee68:	10800304 	addi	r2,r2,12
    ee6c:	10800037 	ldwio	r2,0(r2)
    ee70:	1080004c 	andi	r2,r2,1
}
    ee74:	e037883a 	mov	sp,fp
    ee78:	df000017 	ldw	fp,0(sp)
    ee7c:	dec00104 	addi	sp,sp,4
    ee80:	f800283a 	ret

0000ee84 <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
    ee84:	defff604 	addi	sp,sp,-40
    ee88:	df000915 	stw	fp,36(sp)
    ee8c:	df000904 	addi	fp,sp,36
    ee90:	e13ff715 	stw	r4,-36(fp)
    ee94:	e17ff815 	stw	r5,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    ee98:	e0bff817 	ldw	r2,-32(fp)
    ee9c:	10800058 	cmpnei	r2,r2,1
    eea0:	1000041e 	bne	r2,zero,eeb4 <alt_up_pixel_buffer_dma_clear_screen+0x30>
		addr = pixel_buffer->back_buffer_start_address;
    eea4:	e0bff717 	ldw	r2,-36(fp)
    eea8:	10800c17 	ldw	r2,48(r2)
    eeac:	e0bfff15 	stw	r2,-4(fp)
    eeb0:	00000306 	br	eec0 <alt_up_pixel_buffer_dma_clear_screen+0x3c>
	else
		addr = pixel_buffer->buffer_start_address;
    eeb4:	e0bff717 	ldw	r2,-36(fp)
    eeb8:	10800b17 	ldw	r2,44(r2)
    eebc:	e0bfff15 	stw	r2,-4(fp)
	limit_x = pixel_buffer->x_resolution;
    eec0:	e0bff717 	ldw	r2,-36(fp)
    eec4:	10800f17 	ldw	r2,60(r2)
    eec8:	e0bffe15 	stw	r2,-8(fp)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    eecc:	e0bff717 	ldw	r2,-36(fp)
    eed0:	10800e17 	ldw	r2,56(r2)
    eed4:	10800098 	cmpnei	r2,r2,2
    eed8:	1000051e 	bne	r2,zero,eef0 <alt_up_pixel_buffer_dma_clear_screen+0x6c>
		limit_x = limit_x << 1;
    eedc:	e0fffe17 	ldw	r3,-8(fp)
    eee0:	e0fffe17 	ldw	r3,-8(fp)
    eee4:	18c5883a 	add	r2,r3,r3
    eee8:	e0bffe15 	stw	r2,-8(fp)
    eeec:	00000506 	br	ef04 <alt_up_pixel_buffer_dma_clear_screen+0x80>
	} else {
		limit_x = limit_x << 2;
    eef0:	e13ffe17 	ldw	r4,-8(fp)
    eef4:	e13ffe17 	ldw	r4,-8(fp)
    eef8:	2105883a 	add	r2,r4,r4
    eefc:	1085883a 	add	r2,r2,r2
    ef00:	e0bffe15 	stw	r2,-8(fp)
	}	
	limit_y = pixel_buffer->y_resolution;
    ef04:	e0bff717 	ldw	r2,-36(fp)
    ef08:	10801017 	ldw	r2,64(r2)
    ef0c:	e0bffd15 	stw	r2,-12(fp)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    ef10:	e0bff717 	ldw	r2,-36(fp)
    ef14:	10800d17 	ldw	r2,52(r2)
    ef18:	1004c03a 	cmpne	r2,r2,zero
    ef1c:	10001e1e 	bne	r2,zero,ef98 <alt_up_pixel_buffer_dma_clear_screen+0x114>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
    ef20:	e0bff717 	ldw	r2,-36(fp)
    ef24:	10801317 	ldw	r2,76(r2)
    ef28:	e0bffa15 	stw	r2,-24(fp)

		for (y = 0; y < limit_y; y++)
    ef2c:	e03ffb15 	stw	zero,-20(fp)
    ef30:	00001506 	br	ef88 <alt_up_pixel_buffer_dma_clear_screen+0x104>
		{
			for (x = 0; x < limit_x; x = x + 4)
    ef34:	e03ffc15 	stw	zero,-16(fp)
    ef38:	00000706 	br	ef58 <alt_up_pixel_buffer_dma_clear_screen+0xd4>
			{
				IOWR_32DIRECT(addr, x, 0);
    ef3c:	e0ffff17 	ldw	r3,-4(fp)
    ef40:	e0bffc17 	ldw	r2,-16(fp)
    ef44:	1885883a 	add	r2,r3,r2
    ef48:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
    ef4c:	e0bffc17 	ldw	r2,-16(fp)
    ef50:	10800104 	addi	r2,r2,4
    ef54:	e0bffc15 	stw	r2,-16(fp)
    ef58:	e0fffc17 	ldw	r3,-16(fp)
    ef5c:	e13ffe17 	ldw	r4,-8(fp)
    ef60:	193ff636 	bltu	r3,r4,ef3c <alt_up_pixel_buffer_dma_clear_screen+0xb8>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
    ef64:	e0fffa17 	ldw	r3,-24(fp)
    ef68:	00800044 	movi	r2,1
    ef6c:	10c4983a 	sll	r2,r2,r3
    ef70:	e0ffff17 	ldw	r3,-4(fp)
    ef74:	1887883a 	add	r3,r3,r2
    ef78:	e0ffff15 	stw	r3,-4(fp)
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
    ef7c:	e13ffb17 	ldw	r4,-20(fp)
    ef80:	21000044 	addi	r4,r4,1
    ef84:	e13ffb15 	stw	r4,-20(fp)
    ef88:	e0bffb17 	ldw	r2,-20(fp)
    ef8c:	e0fffd17 	ldw	r3,-12(fp)
    ef90:	10ffe836 	bltu	r2,r3,ef34 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
    ef94:	00001006 	br	efd8 <alt_up_pixel_buffer_dma_clear_screen+0x154>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
    ef98:	e13ffd17 	ldw	r4,-12(fp)
    ef9c:	e0bffe17 	ldw	r2,-8(fp)
    efa0:	2089383a 	mul	r4,r4,r2
    efa4:	e13ffd15 	stw	r4,-12(fp)

		for (x = 0; x < limit_y; x = x + 4)
    efa8:	e03ff915 	stw	zero,-28(fp)
    efac:	00000706 	br	efcc <alt_up_pixel_buffer_dma_clear_screen+0x148>
		{
			IOWR_32DIRECT(addr, x, 0);
    efb0:	e0ffff17 	ldw	r3,-4(fp)
    efb4:	e0bff917 	ldw	r2,-28(fp)
    efb8:	1885883a 	add	r2,r3,r2
    efbc:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
    efc0:	e0fff917 	ldw	r3,-28(fp)
    efc4:	18c00104 	addi	r3,r3,4
    efc8:	e0fff915 	stw	r3,-28(fp)
    efcc:	e0bff917 	ldw	r2,-28(fp)
    efd0:	e13ffd17 	ldw	r4,-12(fp)
    efd4:	113ff636 	bltu	r2,r4,efb0 <alt_up_pixel_buffer_dma_clear_screen+0x12c>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
    efd8:	e037883a 	mov	sp,fp
    efdc:	df000017 	ldw	fp,0(sp)
    efe0:	dec00104 	addi	sp,sp,4
    efe4:	f800283a 	ret

0000efe8 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
    efe8:	deffed04 	addi	sp,sp,-76
    efec:	df001215 	stw	fp,72(sp)
    eff0:	df001204 	addi	fp,sp,72
    eff4:	e13fee15 	stw	r4,-72(fp)
    eff8:	e17fef15 	stw	r5,-68(fp)
    effc:	e1bff015 	stw	r6,-64(fp)
    f000:	e1fff115 	stw	r7,-60(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
    f004:	e0bfee17 	ldw	r2,-72(fp)
    f008:	10800f17 	ldw	r2,60(r2)
    f00c:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
    f010:	e0bfee17 	ldw	r2,-72(fp)
    f014:	10801017 	ldw	r2,64(r2)
    f018:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
    f01c:	e0bfef17 	ldw	r2,-68(fp)
    f020:	e0bffb15 	stw	r2,-20(fp)
	register unsigned int r_x = x1;
    f024:	e0fff117 	ldw	r3,-60(fp)
    f028:	e0fffa15 	stw	r3,-24(fp)
	register unsigned int t_y = y0;
    f02c:	e13ff017 	ldw	r4,-64(fp)
    f030:	e13ff915 	stw	r4,-28(fp)
	register unsigned int b_y = y1;
    f034:	e0800117 	ldw	r2,4(fp)
    f038:	e0bff815 	stw	r2,-32(fp)
	register unsigned int local_color = color;
    f03c:	e0c00217 	ldw	r3,8(fp)
    f040:	e0fff715 	stw	r3,-36(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
    f044:	e13ffa17 	ldw	r4,-24(fp)
    f048:	e0bffb17 	ldw	r2,-20(fp)
    f04c:	2080062e 	bgeu	r4,r2,f068 <alt_up_pixel_buffer_dma_draw_box+0x80>
	{
		temp = l_x;
    f050:	e0fffb17 	ldw	r3,-20(fp)
    f054:	e0fffc15 	stw	r3,-16(fp)
		l_x = r_x;
    f058:	e13ffa17 	ldw	r4,-24(fp)
    f05c:	e13ffb15 	stw	r4,-20(fp)
		r_x = temp;
    f060:	e0bffc17 	ldw	r2,-16(fp)
    f064:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y > b_y)
    f068:	e0fff817 	ldw	r3,-32(fp)
    f06c:	e13ff917 	ldw	r4,-28(fp)
    f070:	1900062e 	bgeu	r3,r4,f08c <alt_up_pixel_buffer_dma_draw_box+0xa4>
	{
		temp = t_y;
    f074:	e0bff917 	ldw	r2,-28(fp)
    f078:	e0bffc15 	stw	r2,-16(fp)
		t_y = b_y;
    f07c:	e0fff817 	ldw	r3,-32(fp)
    f080:	e0fff915 	stw	r3,-28(fp)
		b_y = temp;
    f084:	e13ffc17 	ldw	r4,-16(fp)
    f088:	e13ff815 	stw	r4,-32(fp)
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
    f08c:	e0bffb17 	ldw	r2,-20(fp)
    f090:	e0fffe17 	ldw	r3,-8(fp)
    f094:	10c10d2e 	bgeu	r2,r3,f4cc <alt_up_pixel_buffer_dma_draw_box+0x4e4>
    f098:	e13ff917 	ldw	r4,-28(fp)
    f09c:	e0bffd17 	ldw	r2,-12(fp)
    f0a0:	20800136 	bltu	r4,r2,f0a8 <alt_up_pixel_buffer_dma_draw_box+0xc0>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
    f0a4:	00010906 	br	f4cc <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
    f0a8:	e0fffa17 	ldw	r3,-24(fp)
    f0ac:	e13ffe17 	ldw	r4,-8(fp)
    f0b0:	19000336 	bltu	r3,r4,f0c0 <alt_up_pixel_buffer_dma_draw_box+0xd8>
	{
		r_x = limit_x - 1;
    f0b4:	e0bffe17 	ldw	r2,-8(fp)
    f0b8:	10bfffc4 	addi	r2,r2,-1
    f0bc:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
    f0c0:	e0fff817 	ldw	r3,-32(fp)
    f0c4:	e13ffd17 	ldw	r4,-12(fp)
    f0c8:	19000336 	bltu	r3,r4,f0d8 <alt_up_pixel_buffer_dma_draw_box+0xf0>
	{
		b_y = limit_y - 1;
    f0cc:	e0bffd17 	ldw	r2,-12(fp)
    f0d0:	10bfffc4 	addi	r2,r2,-1
    f0d4:	e0bff815 	stw	r2,-32(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    f0d8:	e0800317 	ldw	r2,12(fp)
    f0dc:	10800058 	cmpnei	r2,r2,1
    f0e0:	1000041e 	bne	r2,zero,f0f4 <alt_up_pixel_buffer_dma_draw_box+0x10c>
		addr = pixel_buffer->back_buffer_start_address;
    f0e4:	e0bfee17 	ldw	r2,-72(fp)
    f0e8:	10800c17 	ldw	r2,48(r2)
    f0ec:	e0bfff15 	stw	r2,-4(fp)
    f0f0:	00000306 	br	f100 <alt_up_pixel_buffer_dma_draw_box+0x118>
	else
		addr = pixel_buffer->buffer_start_address;
    f0f4:	e0bfee17 	ldw	r2,-72(fp)
    f0f8:	10800b17 	ldw	r2,44(r2)
    f0fc:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    f100:	e0bfee17 	ldw	r2,-72(fp)
    f104:	10800d17 	ldw	r2,52(r2)
    f108:	1004c03a 	cmpne	r2,r2,zero
    f10c:	1000721e 	bne	r2,zero,f2d8 <alt_up_pixel_buffer_dma_draw_box+0x2f0>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
    f110:	e0bfee17 	ldw	r2,-72(fp)
    f114:	10801317 	ldw	r2,76(r2)
    f118:	e0bff415 	stw	r2,-48(fp)
		addr = addr + (t_y << offset_y);
    f11c:	e0bff417 	ldw	r2,-48(fp)
    f120:	e0fff917 	ldw	r3,-28(fp)
    f124:	1884983a 	sll	r2,r3,r2
    f128:	e13fff17 	ldw	r4,-4(fp)
    f12c:	2089883a 	add	r4,r4,r2
    f130:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    f134:	e0bfee17 	ldw	r2,-72(fp)
    f138:	10800e17 	ldw	r2,56(r2)
    f13c:	10800058 	cmpnei	r2,r2,1
    f140:	10001e1e 	bne	r2,zero,f1bc <alt_up_pixel_buffer_dma_draw_box+0x1d4>
			for (y = t_y; y <= b_y; y++)
    f144:	e0bff917 	ldw	r2,-28(fp)
    f148:	e0bff515 	stw	r2,-44(fp)
    f14c:	00001706 	br	f1ac <alt_up_pixel_buffer_dma_draw_box+0x1c4>
			{
				for (x = l_x; x <= r_x; x++)
    f150:	e0fffb17 	ldw	r3,-20(fp)
    f154:	e0fff615 	stw	r3,-40(fp)
    f158:	00000806 	br	f17c <alt_up_pixel_buffer_dma_draw_box+0x194>
				{
					IOWR_8DIRECT(addr, x, local_color);
    f15c:	e0ffff17 	ldw	r3,-4(fp)
    f160:	e0bff617 	ldw	r2,-40(fp)
    f164:	1885883a 	add	r2,r3,r2
    f168:	e0fff717 	ldw	r3,-36(fp)
    f16c:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    f170:	e13ff617 	ldw	r4,-40(fp)
    f174:	21000044 	addi	r4,r4,1
    f178:	e13ff615 	stw	r4,-40(fp)
    f17c:	e0bffa17 	ldw	r2,-24(fp)
    f180:	e0fff617 	ldw	r3,-40(fp)
    f184:	10fff52e 	bgeu	r2,r3,f15c <alt_up_pixel_buffer_dma_draw_box+0x174>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
    f188:	e0fff417 	ldw	r3,-48(fp)
    f18c:	00800044 	movi	r2,1
    f190:	10c4983a 	sll	r2,r2,r3
    f194:	e13fff17 	ldw	r4,-4(fp)
    f198:	2089883a 	add	r4,r4,r2
    f19c:	e13fff15 	stw	r4,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    f1a0:	e0bff517 	ldw	r2,-44(fp)
    f1a4:	10800044 	addi	r2,r2,1
    f1a8:	e0bff515 	stw	r2,-44(fp)
    f1ac:	e0fff817 	ldw	r3,-32(fp)
    f1b0:	e13ff517 	ldw	r4,-44(fp)
    f1b4:	193fe62e 	bgeu	r3,r4,f150 <alt_up_pixel_buffer_dma_draw_box+0x168>
    f1b8:	0000c406 	br	f4cc <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    f1bc:	e0bfee17 	ldw	r2,-72(fp)
    f1c0:	10800e17 	ldw	r2,56(r2)
    f1c4:	10800098 	cmpnei	r2,r2,2
    f1c8:	1000211e 	bne	r2,zero,f250 <alt_up_pixel_buffer_dma_draw_box+0x268>
			for (y = t_y; y <= b_y; y++)
    f1cc:	e0bff917 	ldw	r2,-28(fp)
    f1d0:	e0bff515 	stw	r2,-44(fp)
    f1d4:	00001a06 	br	f240 <alt_up_pixel_buffer_dma_draw_box+0x258>
			{
				for (x = l_x; x <= r_x; x++)
    f1d8:	e0fffb17 	ldw	r3,-20(fp)
    f1dc:	e0fff615 	stw	r3,-40(fp)
    f1e0:	00000b06 	br	f210 <alt_up_pixel_buffer_dma_draw_box+0x228>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
    f1e4:	e13ff617 	ldw	r4,-40(fp)
    f1e8:	e13ff617 	ldw	r4,-40(fp)
    f1ec:	2105883a 	add	r2,r4,r4
    f1f0:	1007883a 	mov	r3,r2
    f1f4:	e0bfff17 	ldw	r2,-4(fp)
    f1f8:	1885883a 	add	r2,r3,r2
    f1fc:	e0fff717 	ldw	r3,-36(fp)
    f200:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    f204:	e0bff617 	ldw	r2,-40(fp)
    f208:	10800044 	addi	r2,r2,1
    f20c:	e0bff615 	stw	r2,-40(fp)
    f210:	e0fffa17 	ldw	r3,-24(fp)
    f214:	e13ff617 	ldw	r4,-40(fp)
    f218:	193ff22e 	bgeu	r3,r4,f1e4 <alt_up_pixel_buffer_dma_draw_box+0x1fc>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
    f21c:	e0fff417 	ldw	r3,-48(fp)
    f220:	00800044 	movi	r2,1
    f224:	10c4983a 	sll	r2,r2,r3
    f228:	e0ffff17 	ldw	r3,-4(fp)
    f22c:	1887883a 	add	r3,r3,r2
    f230:	e0ffff15 	stw	r3,-4(fp)
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    f234:	e13ff517 	ldw	r4,-44(fp)
    f238:	21000044 	addi	r4,r4,1
    f23c:	e13ff515 	stw	r4,-44(fp)
    f240:	e0bff817 	ldw	r2,-32(fp)
    f244:	e0fff517 	ldw	r3,-44(fp)
    f248:	10ffe32e 	bgeu	r2,r3,f1d8 <alt_up_pixel_buffer_dma_draw_box+0x1f0>
    f24c:	00009f06 	br	f4cc <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    f250:	e13ff917 	ldw	r4,-28(fp)
    f254:	e13ff515 	stw	r4,-44(fp)
    f258:	00001b06 	br	f2c8 <alt_up_pixel_buffer_dma_draw_box+0x2e0>
			{
				for (x = l_x; x <= r_x; x++)
    f25c:	e0bffb17 	ldw	r2,-20(fp)
    f260:	e0bff615 	stw	r2,-40(fp)
    f264:	00000c06 	br	f298 <alt_up_pixel_buffer_dma_draw_box+0x2b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
    f268:	e0fff617 	ldw	r3,-40(fp)
    f26c:	e0fff617 	ldw	r3,-40(fp)
    f270:	18c5883a 	add	r2,r3,r3
    f274:	1085883a 	add	r2,r2,r2
    f278:	1007883a 	mov	r3,r2
    f27c:	e0bfff17 	ldw	r2,-4(fp)
    f280:	1885883a 	add	r2,r3,r2
    f284:	e0fff717 	ldw	r3,-36(fp)
    f288:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    f28c:	e13ff617 	ldw	r4,-40(fp)
    f290:	21000044 	addi	r4,r4,1
    f294:	e13ff615 	stw	r4,-40(fp)
    f298:	e0bffa17 	ldw	r2,-24(fp)
    f29c:	e0fff617 	ldw	r3,-40(fp)
    f2a0:	10fff12e 	bgeu	r2,r3,f268 <alt_up_pixel_buffer_dma_draw_box+0x280>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
    f2a4:	e0fff417 	ldw	r3,-48(fp)
    f2a8:	00800044 	movi	r2,1
    f2ac:	10c4983a 	sll	r2,r2,r3
    f2b0:	e13fff17 	ldw	r4,-4(fp)
    f2b4:	2089883a 	add	r4,r4,r2
    f2b8:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    f2bc:	e0bff517 	ldw	r2,-44(fp)
    f2c0:	10800044 	addi	r2,r2,1
    f2c4:	e0bff515 	stw	r2,-44(fp)
    f2c8:	e0fff817 	ldw	r3,-32(fp)
    f2cc:	e13ff517 	ldw	r4,-44(fp)
    f2d0:	193fe22e 	bgeu	r3,r4,f25c <alt_up_pixel_buffer_dma_draw_box+0x274>
    f2d4:	00007d06 	br	f4cc <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    f2d8:	e0bfee17 	ldw	r2,-72(fp)
    f2dc:	10800e17 	ldw	r2,56(r2)
    f2e0:	10800058 	cmpnei	r2,r2,1
    f2e4:	1000221e 	bne	r2,zero,f370 <alt_up_pixel_buffer_dma_draw_box+0x388>
			addr = addr + t_y * limit_x;
    f2e8:	e0fff917 	ldw	r3,-28(fp)
    f2ec:	e13ffe17 	ldw	r4,-8(fp)
    f2f0:	1905383a 	mul	r2,r3,r4
    f2f4:	e0ffff17 	ldw	r3,-4(fp)
    f2f8:	1887883a 	add	r3,r3,r2
    f2fc:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
    f300:	e13ff917 	ldw	r4,-28(fp)
    f304:	e13ff215 	stw	r4,-56(fp)
    f308:	00001506 	br	f360 <alt_up_pixel_buffer_dma_draw_box+0x378>
			{
				for (x = l_x; x <= r_x; x++)
    f30c:	e0bffb17 	ldw	r2,-20(fp)
    f310:	e0bff315 	stw	r2,-52(fp)
    f314:	00000806 	br	f338 <alt_up_pixel_buffer_dma_draw_box+0x350>
				{
					IOWR_8DIRECT(addr, x, local_color);
    f318:	e0ffff17 	ldw	r3,-4(fp)
    f31c:	e0bff317 	ldw	r2,-52(fp)
    f320:	1885883a 	add	r2,r3,r2
    f324:	e0fff717 	ldw	r3,-36(fp)
    f328:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    f32c:	e0fff317 	ldw	r3,-52(fp)
    f330:	18c00044 	addi	r3,r3,1
    f334:	e0fff315 	stw	r3,-52(fp)
    f338:	e13ffa17 	ldw	r4,-24(fp)
    f33c:	e0bff317 	ldw	r2,-52(fp)
    f340:	20bff52e 	bgeu	r4,r2,f318 <alt_up_pixel_buffer_dma_draw_box+0x330>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
    f344:	e0ffff17 	ldw	r3,-4(fp)
    f348:	e13ffe17 	ldw	r4,-8(fp)
    f34c:	1907883a 	add	r3,r3,r4
    f350:	e0ffff15 	stw	r3,-4(fp)
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    f354:	e0bff217 	ldw	r2,-56(fp)
    f358:	10800044 	addi	r2,r2,1
    f35c:	e0bff215 	stw	r2,-56(fp)
    f360:	e0fff817 	ldw	r3,-32(fp)
    f364:	e13ff217 	ldw	r4,-56(fp)
    f368:	193fe82e 	bgeu	r3,r4,f30c <alt_up_pixel_buffer_dma_draw_box+0x324>
    f36c:	00005706 	br	f4cc <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    f370:	e0bfee17 	ldw	r2,-72(fp)
    f374:	10800e17 	ldw	r2,56(r2)
    f378:	10800098 	cmpnei	r2,r2,2
    f37c:	1000291e 	bne	r2,zero,f424 <alt_up_pixel_buffer_dma_draw_box+0x43c>
			limit_x = limit_x << 1;
    f380:	e0fffe17 	ldw	r3,-8(fp)
    f384:	e0fffe17 	ldw	r3,-8(fp)
    f388:	18c5883a 	add	r2,r3,r3
    f38c:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
    f390:	e13ff917 	ldw	r4,-28(fp)
    f394:	e0fffe17 	ldw	r3,-8(fp)
    f398:	20c5383a 	mul	r2,r4,r3
    f39c:	e13fff17 	ldw	r4,-4(fp)
    f3a0:	2089883a 	add	r4,r4,r2
    f3a4:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
    f3a8:	e0bff917 	ldw	r2,-28(fp)
    f3ac:	e0bff215 	stw	r2,-56(fp)
    f3b0:	00001806 	br	f414 <alt_up_pixel_buffer_dma_draw_box+0x42c>
			{
				for (x = l_x; x <= r_x; x++)
    f3b4:	e0fffb17 	ldw	r3,-20(fp)
    f3b8:	e0fff315 	stw	r3,-52(fp)
    f3bc:	00000b06 	br	f3ec <alt_up_pixel_buffer_dma_draw_box+0x404>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
    f3c0:	e13ff317 	ldw	r4,-52(fp)
    f3c4:	e13ff317 	ldw	r4,-52(fp)
    f3c8:	2105883a 	add	r2,r4,r4
    f3cc:	1007883a 	mov	r3,r2
    f3d0:	e0bfff17 	ldw	r2,-4(fp)
    f3d4:	1885883a 	add	r2,r3,r2
    f3d8:	e0fff717 	ldw	r3,-36(fp)
    f3dc:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    f3e0:	e0bff317 	ldw	r2,-52(fp)
    f3e4:	10800044 	addi	r2,r2,1
    f3e8:	e0bff315 	stw	r2,-52(fp)
    f3ec:	e0fffa17 	ldw	r3,-24(fp)
    f3f0:	e13ff317 	ldw	r4,-52(fp)
    f3f4:	193ff22e 	bgeu	r3,r4,f3c0 <alt_up_pixel_buffer_dma_draw_box+0x3d8>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
    f3f8:	e0bfff17 	ldw	r2,-4(fp)
    f3fc:	e0fffe17 	ldw	r3,-8(fp)
    f400:	10c5883a 	add	r2,r2,r3
    f404:	e0bfff15 	stw	r2,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    f408:	e13ff217 	ldw	r4,-56(fp)
    f40c:	21000044 	addi	r4,r4,1
    f410:	e13ff215 	stw	r4,-56(fp)
    f414:	e0bff817 	ldw	r2,-32(fp)
    f418:	e0fff217 	ldw	r3,-56(fp)
    f41c:	10ffe52e 	bgeu	r2,r3,f3b4 <alt_up_pixel_buffer_dma_draw_box+0x3cc>
    f420:	00002a06 	br	f4cc <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
    f424:	e13ffe17 	ldw	r4,-8(fp)
    f428:	e13ffe17 	ldw	r4,-8(fp)
    f42c:	2105883a 	add	r2,r4,r4
    f430:	1085883a 	add	r2,r2,r2
    f434:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
    f438:	e0fff917 	ldw	r3,-28(fp)
    f43c:	e13ffe17 	ldw	r4,-8(fp)
    f440:	1905383a 	mul	r2,r3,r4
    f444:	e0ffff17 	ldw	r3,-4(fp)
    f448:	1887883a 	add	r3,r3,r2
    f44c:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
    f450:	e13ff917 	ldw	r4,-28(fp)
    f454:	e13ff215 	stw	r4,-56(fp)
    f458:	00001906 	br	f4c0 <alt_up_pixel_buffer_dma_draw_box+0x4d8>
			{
				for (x = l_x; x <= r_x; x++)
    f45c:	e0bffb17 	ldw	r2,-20(fp)
    f460:	e0bff315 	stw	r2,-52(fp)
    f464:	00000c06 	br	f498 <alt_up_pixel_buffer_dma_draw_box+0x4b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
    f468:	e0fff317 	ldw	r3,-52(fp)
    f46c:	e0fff317 	ldw	r3,-52(fp)
    f470:	18c5883a 	add	r2,r3,r3
    f474:	1085883a 	add	r2,r2,r2
    f478:	1007883a 	mov	r3,r2
    f47c:	e0bfff17 	ldw	r2,-4(fp)
    f480:	1885883a 	add	r2,r3,r2
    f484:	e0fff717 	ldw	r3,-36(fp)
    f488:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    f48c:	e13ff317 	ldw	r4,-52(fp)
    f490:	21000044 	addi	r4,r4,1
    f494:	e13ff315 	stw	r4,-52(fp)
    f498:	e0bffa17 	ldw	r2,-24(fp)
    f49c:	e0fff317 	ldw	r3,-52(fp)
    f4a0:	10fff12e 	bgeu	r2,r3,f468 <alt_up_pixel_buffer_dma_draw_box+0x480>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
    f4a4:	e13fff17 	ldw	r4,-4(fp)
    f4a8:	e0bffe17 	ldw	r2,-8(fp)
    f4ac:	2089883a 	add	r4,r4,r2
    f4b0:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    f4b4:	e0fff217 	ldw	r3,-56(fp)
    f4b8:	18c00044 	addi	r3,r3,1
    f4bc:	e0fff215 	stw	r3,-56(fp)
    f4c0:	e13ff817 	ldw	r4,-32(fp)
    f4c4:	e0bff217 	ldw	r2,-56(fp)
    f4c8:	20bfe42e 	bgeu	r4,r2,f45c <alt_up_pixel_buffer_dma_draw_box+0x474>
				}
				addr = addr + limit_x;
			}
		}
	}
}
    f4cc:	e037883a 	mov	sp,fp
    f4d0:	df000017 	ldw	fp,0(sp)
    f4d4:	dec00104 	addi	sp,sp,4
    f4d8:	f800283a 	ret

0000f4dc <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
    f4dc:	defff204 	addi	sp,sp,-56
    f4e0:	df000d15 	stw	fp,52(sp)
    f4e4:	df000d04 	addi	fp,sp,52
    f4e8:	e13ff315 	stw	r4,-52(fp)
    f4ec:	e17ff415 	stw	r5,-48(fp)
    f4f0:	e1bff515 	stw	r6,-44(fp)
    f4f4:	e1fff615 	stw	r7,-40(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
    f4f8:	e0bff317 	ldw	r2,-52(fp)
    f4fc:	10800f17 	ldw	r2,60(r2)
    f500:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
    f504:	e0bff317 	ldw	r2,-52(fp)
    f508:	10801017 	ldw	r2,64(r2)
    f50c:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
    f510:	e0bff417 	ldw	r2,-48(fp)
    f514:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int r_x = x1;
    f518:	e0fff517 	ldw	r3,-44(fp)
    f51c:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int line_y = y;
    f520:	e13ff617 	ldw	r4,-40(fp)
    f524:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
    f528:	e0800117 	ldw	r2,4(fp)
    f52c:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
    f530:	e0fffb17 	ldw	r3,-20(fp)
    f534:	e13ffc17 	ldw	r4,-16(fp)
    f538:	1900042e 	bgeu	r3,r4,f54c <alt_up_pixel_buffer_dma_draw_hline+0x70>
	{
		temp = l_x;
    f53c:	e0bffc17 	ldw	r2,-16(fp)
		l_x = r_x;
    f540:	e0fffb17 	ldw	r3,-20(fp)
    f544:	e0fffc15 	stw	r3,-16(fp)
		r_x = temp;
    f548:	e0bffb15 	stw	r2,-20(fp)
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
    f54c:	e13ffc17 	ldw	r4,-16(fp)
    f550:	e0bffe17 	ldw	r2,-8(fp)
    f554:	2080b12e 	bgeu	r4,r2,f81c <alt_up_pixel_buffer_dma_draw_hline+0x340>
    f558:	e0fffa17 	ldw	r3,-24(fp)
    f55c:	e13ffd17 	ldw	r4,-12(fp)
    f560:	19000136 	bltu	r3,r4,f568 <alt_up_pixel_buffer_dma_draw_hline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
    f564:	0000ad06 	br	f81c <alt_up_pixel_buffer_dma_draw_hline+0x340>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
    f568:	e0bffb17 	ldw	r2,-20(fp)
    f56c:	e0fffe17 	ldw	r3,-8(fp)
    f570:	10c00336 	bltu	r2,r3,f580 <alt_up_pixel_buffer_dma_draw_hline+0xa4>
	{
		r_x = limit_x - 1;
    f574:	e13ffe17 	ldw	r4,-8(fp)
    f578:	213fffc4 	addi	r4,r4,-1
    f57c:	e13ffb15 	stw	r4,-20(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    f580:	e0800217 	ldw	r2,8(fp)
    f584:	10800058 	cmpnei	r2,r2,1
    f588:	1000041e 	bne	r2,zero,f59c <alt_up_pixel_buffer_dma_draw_hline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
    f58c:	e0bff317 	ldw	r2,-52(fp)
    f590:	10800c17 	ldw	r2,48(r2)
    f594:	e0bfff15 	stw	r2,-4(fp)
    f598:	00000306 	br	f5a8 <alt_up_pixel_buffer_dma_draw_hline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
    f59c:	e0bff317 	ldw	r2,-52(fp)
    f5a0:	10800b17 	ldw	r2,44(r2)
    f5a4:	e0bfff15 	stw	r2,-4(fp)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    f5a8:	e0bff317 	ldw	r2,-52(fp)
    f5ac:	10800d17 	ldw	r2,52(r2)
    f5b0:	1004c03a 	cmpne	r2,r2,zero
    f5b4:	1000431e 	bne	r2,zero,f6c4 <alt_up_pixel_buffer_dma_draw_hline+0x1e8>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
    f5b8:	e0bff317 	ldw	r2,-52(fp)
    f5bc:	10801317 	ldw	r2,76(r2)
		addr = addr + (line_y << offset_y);
    f5c0:	e0fffa17 	ldw	r3,-24(fp)
    f5c4:	1884983a 	sll	r2,r3,r2
    f5c8:	e13fff17 	ldw	r4,-4(fp)
    f5cc:	2089883a 	add	r4,r4,r2
    f5d0:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    f5d4:	e0bff317 	ldw	r2,-52(fp)
    f5d8:	10800e17 	ldw	r2,56(r2)
    f5dc:	10800058 	cmpnei	r2,r2,1
    f5e0:	10000f1e 	bne	r2,zero,f620 <alt_up_pixel_buffer_dma_draw_hline+0x144>
			for (x = l_x; x <= r_x; x++)
    f5e4:	e0bffc17 	ldw	r2,-16(fp)
    f5e8:	e0bff815 	stw	r2,-32(fp)
    f5ec:	00000806 	br	f610 <alt_up_pixel_buffer_dma_draw_hline+0x134>
			{
				IOWR_8DIRECT(addr, x, local_color);
    f5f0:	e0ffff17 	ldw	r3,-4(fp)
    f5f4:	e0bff817 	ldw	r2,-32(fp)
    f5f8:	1885883a 	add	r2,r3,r2
    f5fc:	e0fff917 	ldw	r3,-28(fp)
    f600:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
    f604:	e0fff817 	ldw	r3,-32(fp)
    f608:	18c00044 	addi	r3,r3,1
    f60c:	e0fff815 	stw	r3,-32(fp)
    f610:	e13ffb17 	ldw	r4,-20(fp)
    f614:	e0bff817 	ldw	r2,-32(fp)
    f618:	20bff52e 	bgeu	r4,r2,f5f0 <alt_up_pixel_buffer_dma_draw_hline+0x114>
    f61c:	00007f06 	br	f81c <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    f620:	e0bff317 	ldw	r2,-52(fp)
    f624:	10800e17 	ldw	r2,56(r2)
    f628:	10800098 	cmpnei	r2,r2,2
    f62c:	1000121e 	bne	r2,zero,f678 <alt_up_pixel_buffer_dma_draw_hline+0x19c>
			for (x = l_x; x <= r_x; x++)
    f630:	e0fffc17 	ldw	r3,-16(fp)
    f634:	e0fff815 	stw	r3,-32(fp)
    f638:	00000b06 	br	f668 <alt_up_pixel_buffer_dma_draw_hline+0x18c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
    f63c:	e13ff817 	ldw	r4,-32(fp)
    f640:	e13ff817 	ldw	r4,-32(fp)
    f644:	2105883a 	add	r2,r4,r4
    f648:	1007883a 	mov	r3,r2
    f64c:	e0bfff17 	ldw	r2,-4(fp)
    f650:	1885883a 	add	r2,r3,r2
    f654:	e0fff917 	ldw	r3,-28(fp)
    f658:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
    f65c:	e0bff817 	ldw	r2,-32(fp)
    f660:	10800044 	addi	r2,r2,1
    f664:	e0bff815 	stw	r2,-32(fp)
    f668:	e0fffb17 	ldw	r3,-20(fp)
    f66c:	e13ff817 	ldw	r4,-32(fp)
    f670:	193ff22e 	bgeu	r3,r4,f63c <alt_up_pixel_buffer_dma_draw_hline+0x160>
    f674:	00006906 	br	f81c <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
    f678:	e0bffc17 	ldw	r2,-16(fp)
    f67c:	e0bff815 	stw	r2,-32(fp)
    f680:	00000c06 	br	f6b4 <alt_up_pixel_buffer_dma_draw_hline+0x1d8>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
    f684:	e0fff817 	ldw	r3,-32(fp)
    f688:	e0fff817 	ldw	r3,-32(fp)
    f68c:	18c5883a 	add	r2,r3,r3
    f690:	1085883a 	add	r2,r2,r2
    f694:	1007883a 	mov	r3,r2
    f698:	e0bfff17 	ldw	r2,-4(fp)
    f69c:	1885883a 	add	r2,r3,r2
    f6a0:	e0fff917 	ldw	r3,-28(fp)
    f6a4:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
    f6a8:	e13ff817 	ldw	r4,-32(fp)
    f6ac:	21000044 	addi	r4,r4,1
    f6b0:	e13ff815 	stw	r4,-32(fp)
    f6b4:	e0bffb17 	ldw	r2,-20(fp)
    f6b8:	e0fff817 	ldw	r3,-32(fp)
    f6bc:	10fff12e 	bgeu	r2,r3,f684 <alt_up_pixel_buffer_dma_draw_hline+0x1a8>
    f6c0:	00005606 	br	f81c <alt_up_pixel_buffer_dma_draw_hline+0x340>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    f6c4:	e0bff317 	ldw	r2,-52(fp)
    f6c8:	10800e17 	ldw	r2,56(r2)
    f6cc:	10800058 	cmpnei	r2,r2,1
    f6d0:	1000151e 	bne	r2,zero,f728 <alt_up_pixel_buffer_dma_draw_hline+0x24c>
			addr = addr + line_y * limit_x;
    f6d4:	e13ffa17 	ldw	r4,-24(fp)
    f6d8:	e0fffe17 	ldw	r3,-8(fp)
    f6dc:	20c5383a 	mul	r2,r4,r3
    f6e0:	e13fff17 	ldw	r4,-4(fp)
    f6e4:	2089883a 	add	r4,r4,r2
    f6e8:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
    f6ec:	e0bffc17 	ldw	r2,-16(fp)
    f6f0:	e0bff715 	stw	r2,-36(fp)
    f6f4:	00000806 	br	f718 <alt_up_pixel_buffer_dma_draw_hline+0x23c>
			{
				IOWR_8DIRECT(addr, x, local_color);
    f6f8:	e0ffff17 	ldw	r3,-4(fp)
    f6fc:	e0bff717 	ldw	r2,-36(fp)
    f700:	1885883a 	add	r2,r3,r2
    f704:	e0fff917 	ldw	r3,-28(fp)
    f708:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
    f70c:	e0fff717 	ldw	r3,-36(fp)
    f710:	18c00044 	addi	r3,r3,1
    f714:	e0fff715 	stw	r3,-36(fp)
    f718:	e13ffb17 	ldw	r4,-20(fp)
    f71c:	e0bff717 	ldw	r2,-36(fp)
    f720:	20bff52e 	bgeu	r4,r2,f6f8 <alt_up_pixel_buffer_dma_draw_hline+0x21c>
    f724:	00003d06 	br	f81c <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    f728:	e0bff317 	ldw	r2,-52(fp)
    f72c:	10800e17 	ldw	r2,56(r2)
    f730:	10800098 	cmpnei	r2,r2,2
    f734:	10001c1e 	bne	r2,zero,f7a8 <alt_up_pixel_buffer_dma_draw_hline+0x2cc>
			limit_x = limit_x << 1;
    f738:	e0fffe17 	ldw	r3,-8(fp)
    f73c:	e0fffe17 	ldw	r3,-8(fp)
    f740:	18c5883a 	add	r2,r3,r3
    f744:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
    f748:	e13ffa17 	ldw	r4,-24(fp)
    f74c:	e0fffe17 	ldw	r3,-8(fp)
    f750:	20c5383a 	mul	r2,r4,r3
    f754:	e13fff17 	ldw	r4,-4(fp)
    f758:	2089883a 	add	r4,r4,r2
    f75c:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
    f760:	e0bffc17 	ldw	r2,-16(fp)
    f764:	e0bff715 	stw	r2,-36(fp)
    f768:	00000b06 	br	f798 <alt_up_pixel_buffer_dma_draw_hline+0x2bc>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
    f76c:	e0fff717 	ldw	r3,-36(fp)
    f770:	e0fff717 	ldw	r3,-36(fp)
    f774:	18c5883a 	add	r2,r3,r3
    f778:	1007883a 	mov	r3,r2
    f77c:	e0bfff17 	ldw	r2,-4(fp)
    f780:	1885883a 	add	r2,r3,r2
    f784:	e0fff917 	ldw	r3,-28(fp)
    f788:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
    f78c:	e13ff717 	ldw	r4,-36(fp)
    f790:	21000044 	addi	r4,r4,1
    f794:	e13ff715 	stw	r4,-36(fp)
    f798:	e0bffb17 	ldw	r2,-20(fp)
    f79c:	e0fff717 	ldw	r3,-36(fp)
    f7a0:	10fff22e 	bgeu	r2,r3,f76c <alt_up_pixel_buffer_dma_draw_hline+0x290>
    f7a4:	00001d06 	br	f81c <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
    f7a8:	e13ffe17 	ldw	r4,-8(fp)
    f7ac:	e13ffe17 	ldw	r4,-8(fp)
    f7b0:	2105883a 	add	r2,r4,r4
    f7b4:	1085883a 	add	r2,r2,r2
    f7b8:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
    f7bc:	e0fffa17 	ldw	r3,-24(fp)
    f7c0:	e13ffe17 	ldw	r4,-8(fp)
    f7c4:	1905383a 	mul	r2,r3,r4
    f7c8:	e0ffff17 	ldw	r3,-4(fp)
    f7cc:	1887883a 	add	r3,r3,r2
    f7d0:	e0ffff15 	stw	r3,-4(fp)
			for (x = l_x; x <= r_x; x++)
    f7d4:	e13ffc17 	ldw	r4,-16(fp)
    f7d8:	e13ff715 	stw	r4,-36(fp)
    f7dc:	00000c06 	br	f810 <alt_up_pixel_buffer_dma_draw_hline+0x334>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
    f7e0:	e0fff717 	ldw	r3,-36(fp)
    f7e4:	e0fff717 	ldw	r3,-36(fp)
    f7e8:	18c5883a 	add	r2,r3,r3
    f7ec:	1085883a 	add	r2,r2,r2
    f7f0:	1007883a 	mov	r3,r2
    f7f4:	e0bfff17 	ldw	r2,-4(fp)
    f7f8:	1885883a 	add	r2,r3,r2
    f7fc:	e0fff917 	ldw	r3,-28(fp)
    f800:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
    f804:	e13ff717 	ldw	r4,-36(fp)
    f808:	21000044 	addi	r4,r4,1
    f80c:	e13ff715 	stw	r4,-36(fp)
    f810:	e0bffb17 	ldw	r2,-20(fp)
    f814:	e0fff717 	ldw	r3,-36(fp)
    f818:	10fff12e 	bgeu	r2,r3,f7e0 <alt_up_pixel_buffer_dma_draw_hline+0x304>
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
    f81c:	e037883a 	mov	sp,fp
    f820:	df000017 	ldw	fp,0(sp)
    f824:	dec00104 	addi	sp,sp,4
    f828:	f800283a 	ret

0000f82c <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
    f82c:	defff104 	addi	sp,sp,-60
    f830:	df000e15 	stw	fp,56(sp)
    f834:	df000e04 	addi	fp,sp,56
    f838:	e13ff215 	stw	r4,-56(fp)
    f83c:	e17ff315 	stw	r5,-52(fp)
    f840:	e1bff415 	stw	r6,-48(fp)
    f844:	e1fff515 	stw	r7,-44(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
    f848:	e0bff217 	ldw	r2,-56(fp)
    f84c:	10800f17 	ldw	r2,60(r2)
    f850:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
    f854:	e0bff217 	ldw	r2,-56(fp)
    f858:	10801017 	ldw	r2,64(r2)
    f85c:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int line_x = x;
    f860:	e0bff317 	ldw	r2,-52(fp)
    f864:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int t_y = y0;
    f868:	e0fff417 	ldw	r3,-48(fp)
    f86c:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int b_y = y1;
    f870:	e13ff517 	ldw	r4,-44(fp)
    f874:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
    f878:	e0800117 	ldw	r2,4(fp)
    f87c:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
    f880:	e0fffa17 	ldw	r3,-24(fp)
    f884:	e13ffb17 	ldw	r4,-20(fp)
    f888:	1900042e 	bgeu	r3,r4,f89c <alt_up_pixel_buffer_dma_draw_vline+0x70>
	{
		temp = t_y;
    f88c:	e0bffb17 	ldw	r2,-20(fp)
		t_y = b_y;
    f890:	e0fffa17 	ldw	r3,-24(fp)
    f894:	e0fffb15 	stw	r3,-20(fp)
		b_y = temp;
    f898:	e0bffa15 	stw	r2,-24(fp)
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
    f89c:	e13ffc17 	ldw	r4,-16(fp)
    f8a0:	e0bffe17 	ldw	r2,-8(fp)
    f8a4:	2080d12e 	bgeu	r4,r2,fbec <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
    f8a8:	e0fffb17 	ldw	r3,-20(fp)
    f8ac:	e13ffd17 	ldw	r4,-12(fp)
    f8b0:	19000136 	bltu	r3,r4,f8b8 <alt_up_pixel_buffer_dma_draw_vline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
    f8b4:	0000cd06 	br	fbec <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
    f8b8:	e0bffa17 	ldw	r2,-24(fp)
    f8bc:	e0fffd17 	ldw	r3,-12(fp)
    f8c0:	10c00336 	bltu	r2,r3,f8d0 <alt_up_pixel_buffer_dma_draw_vline+0xa4>
	{
		b_y = limit_y - 1;
    f8c4:	e13ffd17 	ldw	r4,-12(fp)
    f8c8:	213fffc4 	addi	r4,r4,-1
    f8cc:	e13ffa15 	stw	r4,-24(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    f8d0:	e0800217 	ldw	r2,8(fp)
    f8d4:	10800058 	cmpnei	r2,r2,1
    f8d8:	1000041e 	bne	r2,zero,f8ec <alt_up_pixel_buffer_dma_draw_vline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
    f8dc:	e0bff217 	ldw	r2,-56(fp)
    f8e0:	10800c17 	ldw	r2,48(r2)
    f8e4:	e0bfff15 	stw	r2,-4(fp)
    f8e8:	00000306 	br	f8f8 <alt_up_pixel_buffer_dma_draw_vline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
    f8ec:	e0bff217 	ldw	r2,-56(fp)
    f8f0:	10800b17 	ldw	r2,44(r2)
    f8f4:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    f8f8:	e0bff217 	ldw	r2,-56(fp)
    f8fc:	10800d17 	ldw	r2,52(r2)
    f900:	1004c03a 	cmpne	r2,r2,zero
    f904:	1000571e 	bne	r2,zero,fa64 <alt_up_pixel_buffer_dma_draw_vline+0x238>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
    f908:	e0bff217 	ldw	r2,-56(fp)
    f90c:	10801317 	ldw	r2,76(r2)
    f910:	e0bff715 	stw	r2,-36(fp)
		addr = addr + (t_y << offset_y);
    f914:	e0bff717 	ldw	r2,-36(fp)
    f918:	e0fffb17 	ldw	r3,-20(fp)
    f91c:	1884983a 	sll	r2,r3,r2
    f920:	e13fff17 	ldw	r4,-4(fp)
    f924:	2089883a 	add	r4,r4,r2
    f928:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    f92c:	e0bff217 	ldw	r2,-56(fp)
    f930:	10800e17 	ldw	r2,56(r2)
    f934:	10800058 	cmpnei	r2,r2,1
    f938:	1000151e 	bne	r2,zero,f990 <alt_up_pixel_buffer_dma_draw_vline+0x164>
			for (y = t_y; y <= b_y; y++)
    f93c:	e0bffb17 	ldw	r2,-20(fp)
    f940:	e0bff815 	stw	r2,-32(fp)
    f944:	00000e06 	br	f980 <alt_up_pixel_buffer_dma_draw_vline+0x154>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
    f948:	e0ffff17 	ldw	r3,-4(fp)
    f94c:	e0bffc17 	ldw	r2,-16(fp)
    f950:	1885883a 	add	r2,r3,r2
    f954:	e0fff917 	ldw	r3,-28(fp)
    f958:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
    f95c:	e0fff717 	ldw	r3,-36(fp)
    f960:	00800044 	movi	r2,1
    f964:	10c4983a 	sll	r2,r2,r3
    f968:	e0ffff17 	ldw	r3,-4(fp)
    f96c:	1887883a 	add	r3,r3,r2
    f970:	e0ffff15 	stw	r3,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    f974:	e13ff817 	ldw	r4,-32(fp)
    f978:	21000044 	addi	r4,r4,1
    f97c:	e13ff815 	stw	r4,-32(fp)
    f980:	e0bffa17 	ldw	r2,-24(fp)
    f984:	e0fff817 	ldw	r3,-32(fp)
    f988:	10ffef2e 	bgeu	r2,r3,f948 <alt_up_pixel_buffer_dma_draw_vline+0x11c>
    f98c:	00009706 	br	fbec <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    f990:	e0bff217 	ldw	r2,-56(fp)
    f994:	10800e17 	ldw	r2,56(r2)
    f998:	10800098 	cmpnei	r2,r2,2
    f99c:	1000181e 	bne	r2,zero,fa00 <alt_up_pixel_buffer_dma_draw_vline+0x1d4>
			for (y = t_y; y <= b_y; y++)
    f9a0:	e13ffb17 	ldw	r4,-20(fp)
    f9a4:	e13ff815 	stw	r4,-32(fp)
    f9a8:	00001106 	br	f9f0 <alt_up_pixel_buffer_dma_draw_vline+0x1c4>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
    f9ac:	e0fffc17 	ldw	r3,-16(fp)
    f9b0:	e0fffc17 	ldw	r3,-16(fp)
    f9b4:	18c5883a 	add	r2,r3,r3
    f9b8:	1007883a 	mov	r3,r2
    f9bc:	e0bfff17 	ldw	r2,-4(fp)
    f9c0:	1885883a 	add	r2,r3,r2
    f9c4:	e0fff917 	ldw	r3,-28(fp)
    f9c8:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
    f9cc:	e0fff717 	ldw	r3,-36(fp)
    f9d0:	00800044 	movi	r2,1
    f9d4:	10c4983a 	sll	r2,r2,r3
    f9d8:	e13fff17 	ldw	r4,-4(fp)
    f9dc:	2089883a 	add	r4,r4,r2
    f9e0:	e13fff15 	stw	r4,-4(fp)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    f9e4:	e0bff817 	ldw	r2,-32(fp)
    f9e8:	10800044 	addi	r2,r2,1
    f9ec:	e0bff815 	stw	r2,-32(fp)
    f9f0:	e0fffa17 	ldw	r3,-24(fp)
    f9f4:	e13ff817 	ldw	r4,-32(fp)
    f9f8:	193fec2e 	bgeu	r3,r4,f9ac <alt_up_pixel_buffer_dma_draw_vline+0x180>
    f9fc:	00007b06 	br	fbec <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    fa00:	e0bffb17 	ldw	r2,-20(fp)
    fa04:	e0bff815 	stw	r2,-32(fp)
    fa08:	00001206 	br	fa54 <alt_up_pixel_buffer_dma_draw_vline+0x228>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
    fa0c:	e0fffc17 	ldw	r3,-16(fp)
    fa10:	e0fffc17 	ldw	r3,-16(fp)
    fa14:	18c5883a 	add	r2,r3,r3
    fa18:	1085883a 	add	r2,r2,r2
    fa1c:	1007883a 	mov	r3,r2
    fa20:	e0bfff17 	ldw	r2,-4(fp)
    fa24:	1885883a 	add	r2,r3,r2
    fa28:	e0fff917 	ldw	r3,-28(fp)
    fa2c:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
    fa30:	e0fff717 	ldw	r3,-36(fp)
    fa34:	00800044 	movi	r2,1
    fa38:	10c4983a 	sll	r2,r2,r3
    fa3c:	e13fff17 	ldw	r4,-4(fp)
    fa40:	2089883a 	add	r4,r4,r2
    fa44:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    fa48:	e0bff817 	ldw	r2,-32(fp)
    fa4c:	10800044 	addi	r2,r2,1
    fa50:	e0bff815 	stw	r2,-32(fp)
    fa54:	e0fffa17 	ldw	r3,-24(fp)
    fa58:	e13ff817 	ldw	r4,-32(fp)
    fa5c:	193feb2e 	bgeu	r3,r4,fa0c <alt_up_pixel_buffer_dma_draw_vline+0x1e0>
    fa60:	00006206 	br	fbec <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    fa64:	e0bff217 	ldw	r2,-56(fp)
    fa68:	10800e17 	ldw	r2,56(r2)
    fa6c:	10800058 	cmpnei	r2,r2,1
    fa70:	1000191e 	bne	r2,zero,fad8 <alt_up_pixel_buffer_dma_draw_vline+0x2ac>
			addr = addr + t_y * limit_x;
    fa74:	e0fffb17 	ldw	r3,-20(fp)
    fa78:	e13ffe17 	ldw	r4,-8(fp)
    fa7c:	1905383a 	mul	r2,r3,r4
    fa80:	e0ffff17 	ldw	r3,-4(fp)
    fa84:	1887883a 	add	r3,r3,r2
    fa88:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
    fa8c:	e13ffb17 	ldw	r4,-20(fp)
    fa90:	e13ff615 	stw	r4,-40(fp)
    fa94:	00000c06 	br	fac8 <alt_up_pixel_buffer_dma_draw_vline+0x29c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
    fa98:	e0ffff17 	ldw	r3,-4(fp)
    fa9c:	e0bffc17 	ldw	r2,-16(fp)
    faa0:	1885883a 	add	r2,r3,r2
    faa4:	e0fff917 	ldw	r3,-28(fp)
    faa8:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
    faac:	e0bfff17 	ldw	r2,-4(fp)
    fab0:	e0fffe17 	ldw	r3,-8(fp)
    fab4:	10c5883a 	add	r2,r2,r3
    fab8:	e0bfff15 	stw	r2,-4(fp)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    fabc:	e13ff617 	ldw	r4,-40(fp)
    fac0:	21000044 	addi	r4,r4,1
    fac4:	e13ff615 	stw	r4,-40(fp)
    fac8:	e0bffa17 	ldw	r2,-24(fp)
    facc:	e0fff617 	ldw	r3,-40(fp)
    fad0:	10fff12e 	bgeu	r2,r3,fa98 <alt_up_pixel_buffer_dma_draw_vline+0x26c>
    fad4:	00004506 	br	fbec <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    fad8:	e0bff217 	ldw	r2,-56(fp)
    fadc:	10800e17 	ldw	r2,56(r2)
    fae0:	10800098 	cmpnei	r2,r2,2
    fae4:	1000201e 	bne	r2,zero,fb68 <alt_up_pixel_buffer_dma_draw_vline+0x33c>
			limit_x = limit_x << 1;
    fae8:	e13ffe17 	ldw	r4,-8(fp)
    faec:	e13ffe17 	ldw	r4,-8(fp)
    faf0:	2105883a 	add	r2,r4,r4
    faf4:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
    faf8:	e0fffb17 	ldw	r3,-20(fp)
    fafc:	e13ffe17 	ldw	r4,-8(fp)
    fb00:	1905383a 	mul	r2,r3,r4
    fb04:	e0ffff17 	ldw	r3,-4(fp)
    fb08:	1887883a 	add	r3,r3,r2
    fb0c:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
    fb10:	e13ffb17 	ldw	r4,-20(fp)
    fb14:	e13ff615 	stw	r4,-40(fp)
    fb18:	00000f06 	br	fb58 <alt_up_pixel_buffer_dma_draw_vline+0x32c>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
    fb1c:	e0fffc17 	ldw	r3,-16(fp)
    fb20:	e0fffc17 	ldw	r3,-16(fp)
    fb24:	18c5883a 	add	r2,r3,r3
    fb28:	1007883a 	mov	r3,r2
    fb2c:	e0bfff17 	ldw	r2,-4(fp)
    fb30:	1885883a 	add	r2,r3,r2
    fb34:	e0fff917 	ldw	r3,-28(fp)
    fb38:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
    fb3c:	e13fff17 	ldw	r4,-4(fp)
    fb40:	e0bffe17 	ldw	r2,-8(fp)
    fb44:	2089883a 	add	r4,r4,r2
    fb48:	e13fff15 	stw	r4,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    fb4c:	e0fff617 	ldw	r3,-40(fp)
    fb50:	18c00044 	addi	r3,r3,1
    fb54:	e0fff615 	stw	r3,-40(fp)
    fb58:	e13ffa17 	ldw	r4,-24(fp)
    fb5c:	e0bff617 	ldw	r2,-40(fp)
    fb60:	20bfee2e 	bgeu	r4,r2,fb1c <alt_up_pixel_buffer_dma_draw_vline+0x2f0>
    fb64:	00002106 	br	fbec <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
    fb68:	e0fffe17 	ldw	r3,-8(fp)
    fb6c:	e0fffe17 	ldw	r3,-8(fp)
    fb70:	18c5883a 	add	r2,r3,r3
    fb74:	1085883a 	add	r2,r2,r2
    fb78:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
    fb7c:	e13ffb17 	ldw	r4,-20(fp)
    fb80:	e0fffe17 	ldw	r3,-8(fp)
    fb84:	20c5383a 	mul	r2,r4,r3
    fb88:	e13fff17 	ldw	r4,-4(fp)
    fb8c:	2089883a 	add	r4,r4,r2
    fb90:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
    fb94:	e0bffb17 	ldw	r2,-20(fp)
    fb98:	e0bff615 	stw	r2,-40(fp)
    fb9c:	00001006 	br	fbe0 <alt_up_pixel_buffer_dma_draw_vline+0x3b4>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
    fba0:	e0fffc17 	ldw	r3,-16(fp)
    fba4:	e0fffc17 	ldw	r3,-16(fp)
    fba8:	18c5883a 	add	r2,r3,r3
    fbac:	1085883a 	add	r2,r2,r2
    fbb0:	1007883a 	mov	r3,r2
    fbb4:	e0bfff17 	ldw	r2,-4(fp)
    fbb8:	1885883a 	add	r2,r3,r2
    fbbc:	e0fff917 	ldw	r3,-28(fp)
    fbc0:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
    fbc4:	e13fff17 	ldw	r4,-4(fp)
    fbc8:	e0bffe17 	ldw	r2,-8(fp)
    fbcc:	2089883a 	add	r4,r4,r2
    fbd0:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    fbd4:	e0fff617 	ldw	r3,-40(fp)
    fbd8:	18c00044 	addi	r3,r3,1
    fbdc:	e0fff615 	stw	r3,-40(fp)
    fbe0:	e13ffa17 	ldw	r4,-24(fp)
    fbe4:	e0bff617 	ldw	r2,-40(fp)
    fbe8:	20bfed2e 	bgeu	r4,r2,fba0 <alt_up_pixel_buffer_dma_draw_vline+0x374>
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
    fbec:	e037883a 	mov	sp,fp
    fbf0:	df000017 	ldw	fp,0(sp)
    fbf4:	dec00104 	addi	sp,sp,4
    fbf8:	f800283a 	ret

0000fbfc <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
    fbfc:	defff804 	addi	sp,sp,-32
    fc00:	dfc00715 	stw	ra,28(sp)
    fc04:	df000615 	stw	fp,24(sp)
    fc08:	df000604 	addi	fp,sp,24
    fc0c:	e13ffc15 	stw	r4,-16(fp)
    fc10:	e17ffd15 	stw	r5,-12(fp)
    fc14:	e1bffe15 	stw	r6,-8(fp)
    fc18:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
    fc1c:	e0800317 	ldw	r2,12(fp)
    fc20:	d8800015 	stw	r2,0(sp)
    fc24:	e0800417 	ldw	r2,16(fp)
    fc28:	d8800115 	stw	r2,4(sp)
    fc2c:	e13ffc17 	ldw	r4,-16(fp)
    fc30:	e17ffd17 	ldw	r5,-12(fp)
    fc34:	e1bfff17 	ldw	r6,-4(fp)
    fc38:	e1fffe17 	ldw	r7,-8(fp)
    fc3c:	000f4dc0 	call	f4dc <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
    fc40:	e0800317 	ldw	r2,12(fp)
    fc44:	d8800015 	stw	r2,0(sp)
    fc48:	e0800417 	ldw	r2,16(fp)
    fc4c:	d8800115 	stw	r2,4(sp)
    fc50:	e13ffc17 	ldw	r4,-16(fp)
    fc54:	e17ffd17 	ldw	r5,-12(fp)
    fc58:	e1bfff17 	ldw	r6,-4(fp)
    fc5c:	e1c00217 	ldw	r7,8(fp)
    fc60:	000f4dc0 	call	f4dc <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
    fc64:	e0800317 	ldw	r2,12(fp)
    fc68:	d8800015 	stw	r2,0(sp)
    fc6c:	e0800417 	ldw	r2,16(fp)
    fc70:	d8800115 	stw	r2,4(sp)
    fc74:	e13ffc17 	ldw	r4,-16(fp)
    fc78:	e17ffd17 	ldw	r5,-12(fp)
    fc7c:	e1bffe17 	ldw	r6,-8(fp)
    fc80:	e1c00217 	ldw	r7,8(fp)
    fc84:	000f82c0 	call	f82c <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
    fc88:	e0800317 	ldw	r2,12(fp)
    fc8c:	d8800015 	stw	r2,0(sp)
    fc90:	e0800417 	ldw	r2,16(fp)
    fc94:	d8800115 	stw	r2,4(sp)
    fc98:	e13ffc17 	ldw	r4,-16(fp)
    fc9c:	e17fff17 	ldw	r5,-4(fp)
    fca0:	e1bffe17 	ldw	r6,-8(fp)
    fca4:	e1c00217 	ldw	r7,8(fp)
    fca8:	000f82c0 	call	f82c <alt_up_pixel_buffer_dma_draw_vline>
}
    fcac:	e037883a 	mov	sp,fp
    fcb0:	dfc00117 	ldw	ra,4(sp)
    fcb4:	df000017 	ldw	fp,0(sp)
    fcb8:	dec00204 	addi	sp,sp,8
    fcbc:	f800283a 	ret

0000fcc0 <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
    fcc0:	defffb04 	addi	sp,sp,-20
    fcc4:	df000415 	stw	fp,16(sp)
    fcc8:	df000404 	addi	fp,sp,16
    fccc:	e13ffc15 	stw	r4,-16(fp)
    fcd0:	e17ffd15 	stw	r5,-12(fp)
    fcd4:	e1bffe15 	stw	r6,-8(fp)
    fcd8:	e1ffff15 	stw	r7,-4(fp)
	if (mode == 0)
    fcdc:	e0c00217 	ldw	r3,8(fp)
    fce0:	1804c03a 	cmpne	r2,r3,zero
    fce4:	10000b1e 	bne	r2,zero,fd14 <helper_plot_pixel+0x54>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
    fce8:	e13ffd17 	ldw	r4,-12(fp)
    fcec:	e0ffff17 	ldw	r3,-4(fp)
    fcf0:	20c5383a 	mul	r2,r4,r3
    fcf4:	e13ffe17 	ldw	r4,-8(fp)
    fcf8:	1105883a 	add	r2,r2,r4
    fcfc:	1007883a 	mov	r3,r2
    fd00:	e0bffc17 	ldw	r2,-16(fp)
    fd04:	1885883a 	add	r2,r3,r2
    fd08:	e0c00117 	ldw	r3,4(fp)
    fd0c:	10c00025 	stbio	r3,0(r2)
    fd10:	00001b06 	br	fd80 <helper_plot_pixel+0xc0>
	else if (mode == 1)
    fd14:	e1000217 	ldw	r4,8(fp)
    fd18:	20800058 	cmpnei	r2,r4,1
    fd1c:	10000c1e 	bne	r2,zero,fd50 <helper_plot_pixel+0x90>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
    fd20:	e0fffd17 	ldw	r3,-12(fp)
    fd24:	e13fff17 	ldw	r4,-4(fp)
    fd28:	1905383a 	mul	r2,r3,r4
    fd2c:	e0fffe17 	ldw	r3,-8(fp)
    fd30:	10c5883a 	add	r2,r2,r3
    fd34:	1085883a 	add	r2,r2,r2
    fd38:	1007883a 	mov	r3,r2
    fd3c:	e0bffc17 	ldw	r2,-16(fp)
    fd40:	1885883a 	add	r2,r3,r2
    fd44:	e1000117 	ldw	r4,4(fp)
    fd48:	1100002d 	sthio	r4,0(r2)
    fd4c:	00000c06 	br	fd80 <helper_plot_pixel+0xc0>
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
    fd50:	e0fffd17 	ldw	r3,-12(fp)
    fd54:	e13fff17 	ldw	r4,-4(fp)
    fd58:	1905383a 	mul	r2,r3,r4
    fd5c:	e0fffe17 	ldw	r3,-8(fp)
    fd60:	10c5883a 	add	r2,r2,r3
    fd64:	1085883a 	add	r2,r2,r2
    fd68:	1085883a 	add	r2,r2,r2
    fd6c:	1007883a 	mov	r3,r2
    fd70:	e0bffc17 	ldw	r2,-16(fp)
    fd74:	1885883a 	add	r2,r3,r2
    fd78:	e1000117 	ldw	r4,4(fp)
    fd7c:	11000035 	stwio	r4,0(r2)
}
    fd80:	e037883a 	mov	sp,fp
    fd84:	df000017 	ldw	fp,0(sp)
    fd88:	dec00104 	addi	sp,sp,4
    fd8c:	f800283a 	ret

0000fd90 <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
    fd90:	deffe404 	addi	sp,sp,-112
    fd94:	dfc01b15 	stw	ra,108(sp)
    fd98:	df001a15 	stw	fp,104(sp)
    fd9c:	df001a04 	addi	fp,sp,104
    fda0:	e13fe815 	stw	r4,-96(fp)
    fda4:	e17fe915 	stw	r5,-92(fp)
    fda8:	e1bfea15 	stw	r6,-88(fp)
    fdac:	e1ffeb15 	stw	r7,-84(fp)
	register int x_0 = x0;
    fdb0:	e0bfe917 	ldw	r2,-92(fp)
    fdb4:	e0bffa15 	stw	r2,-24(fp)
	register int y_0 = y0;
    fdb8:	e0ffea17 	ldw	r3,-88(fp)
    fdbc:	e0fff915 	stw	r3,-28(fp)
	register int x_1 = x1;
    fdc0:	e13feb17 	ldw	r4,-84(fp)
    fdc4:	e13ff815 	stw	r4,-32(fp)
	register int y_1 = y1;
    fdc8:	e0800217 	ldw	r2,8(fp)
    fdcc:	e0bff715 	stw	r2,-36(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
    fdd0:	e0fff717 	ldw	r3,-36(fp)
    fdd4:	e13ff917 	ldw	r4,-28(fp)
    fdd8:	1905c83a 	sub	r2,r3,r4
    fddc:	e0bfff15 	stw	r2,-4(fp)
    fde0:	e0ffff17 	ldw	r3,-4(fp)
    fde4:	1804403a 	cmpge	r2,r3,zero
    fde8:	1000031e 	bne	r2,zero,fdf8 <alt_up_pixel_buffer_dma_draw_line+0x68>
    fdec:	e13fff17 	ldw	r4,-4(fp)
    fdf0:	0109c83a 	sub	r4,zero,r4
    fdf4:	e13fff15 	stw	r4,-4(fp)
    fdf8:	e0fff817 	ldw	r3,-32(fp)
    fdfc:	e13ffa17 	ldw	r4,-24(fp)
    fe00:	1905c83a 	sub	r2,r3,r4
    fe04:	e0bffe15 	stw	r2,-8(fp)
    fe08:	e0fffe17 	ldw	r3,-8(fp)
    fe0c:	1804403a 	cmpge	r2,r3,zero
    fe10:	1000031e 	bne	r2,zero,fe20 <alt_up_pixel_buffer_dma_draw_line+0x90>
    fe14:	e13ffe17 	ldw	r4,-8(fp)
    fe18:	0109c83a 	sub	r4,zero,r4
    fe1c:	e13ffe15 	stw	r4,-8(fp)
    fe20:	e0fffe17 	ldw	r3,-8(fp)
    fe24:	e13fff17 	ldw	r4,-4(fp)
    fe28:	1904803a 	cmplt	r2,r3,r4
    fe2c:	e0bff605 	stb	r2,-40(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
    fe30:	e0bfe817 	ldw	r2,-96(fp)
    fe34:	10800e17 	ldw	r2,56(r2)
    fe38:	10800060 	cmpeqi	r2,r2,1
    fe3c:	10000c1e 	bne	r2,zero,fe70 <alt_up_pixel_buffer_dma_draw_line+0xe0>
    fe40:	e0bfe817 	ldw	r2,-96(fp)
    fe44:	10800e17 	ldw	r2,56(r2)
    fe48:	10800098 	cmpnei	r2,r2,2
    fe4c:	1000031e 	bne	r2,zero,fe5c <alt_up_pixel_buffer_dma_draw_line+0xcc>
    fe50:	00800044 	movi	r2,1
    fe54:	e0bffc15 	stw	r2,-16(fp)
    fe58:	00000206 	br	fe64 <alt_up_pixel_buffer_dma_draw_line+0xd4>
    fe5c:	00c00084 	movi	r3,2
    fe60:	e0fffc15 	stw	r3,-16(fp)
    fe64:	e13ffc17 	ldw	r4,-16(fp)
    fe68:	e13ffd15 	stw	r4,-12(fp)
    fe6c:	00000106 	br	fe74 <alt_up_pixel_buffer_dma_draw_line+0xe4>
    fe70:	e03ffd15 	stw	zero,-12(fp)
    fe74:	e0bffd17 	ldw	r2,-12(fp)
    fe78:	e0bfef15 	stw	r2,-68(fp)
	register int line_color = color;
    fe7c:	e0c00317 	ldw	r3,12(fp)
    fe80:	e0ffee15 	stw	r3,-72(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
    fe84:	e0bfe817 	ldw	r2,-96(fp)
    fe88:	10800d17 	ldw	r2,52(r2)
    fe8c:	1004c03a 	cmpne	r2,r2,zero
    fe90:	1000091e 	bne	r2,zero,feb8 <alt_up_pixel_buffer_dma_draw_line+0x128>
    fe94:	e0bfe817 	ldw	r2,-96(fp)
    fe98:	10c01317 	ldw	r3,76(r2)
    fe9c:	e0bfef17 	ldw	r2,-68(fp)
    fea0:	1885c83a 	sub	r2,r3,r2
    fea4:	1007883a 	mov	r3,r2
    fea8:	00800044 	movi	r2,1
    feac:	10c4983a 	sll	r2,r2,r3
    feb0:	e0bffb15 	stw	r2,-20(fp)
    feb4:	00000306 	br	fec4 <alt_up_pixel_buffer_dma_draw_line+0x134>
    feb8:	e0bfe817 	ldw	r2,-96(fp)
    febc:	10800f17 	ldw	r2,60(r2)
    fec0:	e0bffb15 	stw	r2,-20(fp)
    fec4:	e13ffb17 	ldw	r4,-20(fp)
    fec8:	e13fec15 	stw	r4,-80(fp)

	if (backbuffer == 1)
    fecc:	e0800417 	ldw	r2,16(fp)
    fed0:	10800058 	cmpnei	r2,r2,1
    fed4:	1000041e 	bne	r2,zero,fee8 <alt_up_pixel_buffer_dma_draw_line+0x158>
		buffer_start = pixel_buffer->back_buffer_start_address;
    fed8:	e0bfe817 	ldw	r2,-96(fp)
    fedc:	10800c17 	ldw	r2,48(r2)
    fee0:	e0bfed15 	stw	r2,-76(fp)
    fee4:	00000306 	br	fef4 <alt_up_pixel_buffer_dma_draw_line+0x164>
	else
		buffer_start = pixel_buffer->buffer_start_address;
    fee8:	e0bfe817 	ldw	r2,-96(fp)
    feec:	10800b17 	ldw	r2,44(r2)
    fef0:	e0bfed15 	stw	r2,-76(fp)

	/* Preprocessing inputs */
	if (steep > 0) {
    fef4:	e0fff603 	ldbu	r3,-40(fp)
    fef8:	18803fcc 	andi	r2,r3,255
    fefc:	1080201c 	xori	r2,r2,128
    ff00:	10bfe004 	addi	r2,r2,-128
    ff04:	10800050 	cmplti	r2,r2,1
    ff08:	10000c1e 	bne	r2,zero,ff3c <alt_up_pixel_buffer_dma_draw_line+0x1ac>
		// Swap x_0 and y_0
		error = x_0;
    ff0c:	e13ffa17 	ldw	r4,-24(fp)
    ff10:	e13ff315 	stw	r4,-52(fp)
		x_0 = y_0;
    ff14:	e0bff917 	ldw	r2,-28(fp)
    ff18:	e0bffa15 	stw	r2,-24(fp)
		y_0 = error;
    ff1c:	e0fff317 	ldw	r3,-52(fp)
    ff20:	e0fff915 	stw	r3,-28(fp)
		// Swap x_1 and y_1
		error = x_1;
    ff24:	e13ff817 	ldw	r4,-32(fp)
    ff28:	e13ff315 	stw	r4,-52(fp)
		x_1 = y_1;
    ff2c:	e0bff717 	ldw	r2,-36(fp)
    ff30:	e0bff815 	stw	r2,-32(fp)
		y_1 = error;
    ff34:	e0fff317 	ldw	r3,-52(fp)
    ff38:	e0fff715 	stw	r3,-36(fp)
	}
	if (x_0 > x_1) {
    ff3c:	e13ff817 	ldw	r4,-32(fp)
    ff40:	e0bffa17 	ldw	r2,-24(fp)
    ff44:	20800c0e 	bge	r4,r2,ff78 <alt_up_pixel_buffer_dma_draw_line+0x1e8>
		// Swap x_0 and x_1
		error = x_0;
    ff48:	e0fffa17 	ldw	r3,-24(fp)
    ff4c:	e0fff315 	stw	r3,-52(fp)
		x_0 = x_1;
    ff50:	e13ff817 	ldw	r4,-32(fp)
    ff54:	e13ffa15 	stw	r4,-24(fp)
		x_1 = error;
    ff58:	e0bff317 	ldw	r2,-52(fp)
    ff5c:	e0bff815 	stw	r2,-32(fp)
		// Swap y_0 and y_1
		error = y_0;
    ff60:	e0fff917 	ldw	r3,-28(fp)
    ff64:	e0fff315 	stw	r3,-52(fp)
		y_0 = y_1;
    ff68:	e13ff717 	ldw	r4,-36(fp)
    ff6c:	e13ff915 	stw	r4,-28(fp)
		y_1 = error;
    ff70:	e0bff317 	ldw	r2,-52(fp)
    ff74:	e0bff715 	stw	r2,-36(fp)
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
    ff78:	e0fff817 	ldw	r3,-32(fp)
    ff7c:	e13ffa17 	ldw	r4,-24(fp)
    ff80:	1907c83a 	sub	r3,r3,r4
    ff84:	e0fff515 	stw	r3,-44(fp)
	deltay = ABS(y_1 - y_0);
    ff88:	e0fff717 	ldw	r3,-36(fp)
    ff8c:	e13ff917 	ldw	r4,-28(fp)
    ff90:	1905c83a 	sub	r2,r3,r4
    ff94:	e0bff415 	stw	r2,-48(fp)
    ff98:	e0fff417 	ldw	r3,-48(fp)
    ff9c:	1804403a 	cmpge	r2,r3,zero
    ffa0:	1000031e 	bne	r2,zero,ffb0 <alt_up_pixel_buffer_dma_draw_line+0x220>
    ffa4:	e13ff417 	ldw	r4,-48(fp)
    ffa8:	0109c83a 	sub	r4,zero,r4
    ffac:	e13ff415 	stw	r4,-48(fp)
	error = -(deltax / 2); 
    ffb0:	e0fff517 	ldw	r3,-44(fp)
    ffb4:	1804d7fa 	srli	r2,r3,31
    ffb8:	e13ff517 	ldw	r4,-44(fp)
    ffbc:	1105883a 	add	r2,r2,r4
    ffc0:	1005d07a 	srai	r2,r2,1
    ffc4:	0085c83a 	sub	r2,zero,r2
    ffc8:	e0bff315 	stw	r2,-52(fp)
	y = y_0;
    ffcc:	e0bff917 	ldw	r2,-28(fp)
    ffd0:	e0bff015 	stw	r2,-64(fp)
	if (y_0 < y_1)
    ffd4:	e0fff917 	ldw	r3,-28(fp)
    ffd8:	e13ff717 	ldw	r4,-36(fp)
    ffdc:	1900030e 	bge	r3,r4,ffec <alt_up_pixel_buffer_dma_draw_line+0x25c>
		ystep = 1;
    ffe0:	00800044 	movi	r2,1
    ffe4:	e0bff215 	stw	r2,-56(fp)
    ffe8:	00000206 	br	fff4 <alt_up_pixel_buffer_dma_draw_line+0x264>
	else
		ystep = -1;
    ffec:	00ffffc4 	movi	r3,-1
    fff0:	e0fff215 	stw	r3,-56(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
    fff4:	e13ff603 	ldbu	r4,-40(fp)
    fff8:	20803fcc 	andi	r2,r4,255
    fffc:	1080201c 	xori	r2,r2,128
   10000:	10bfe004 	addi	r2,r2,-128
   10004:	10800058 	cmpnei	r2,r2,1
   10008:	1000221e 	bne	r2,zero,10094 <alt_up_pixel_buffer_dma_draw_line+0x304>
	{
		for (x=x_0; x <= x_1; x++) {
   1000c:	e0bffa17 	ldw	r2,-24(fp)
   10010:	e0bff115 	stw	r2,-60(fp)
   10014:	00001b06 	br	10084 <alt_up_pixel_buffer_dma_draw_line+0x2f4>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
   10018:	e0ffee17 	ldw	r3,-72(fp)
   1001c:	d8c00015 	stw	r3,0(sp)
   10020:	e13fef17 	ldw	r4,-68(fp)
   10024:	d9000115 	stw	r4,4(sp)
   10028:	e13fed17 	ldw	r4,-76(fp)
   1002c:	e17fec17 	ldw	r5,-80(fp)
   10030:	e1bff017 	ldw	r6,-64(fp)
   10034:	e1fff117 	ldw	r7,-60(fp)
   10038:	000fcc00 	call	fcc0 <helper_plot_pixel>
			error = error + deltay;
   1003c:	e0bff317 	ldw	r2,-52(fp)
   10040:	e0fff417 	ldw	r3,-48(fp)
   10044:	10c5883a 	add	r2,r2,r3
   10048:	e0bff315 	stw	r2,-52(fp)
			if (error > 0) {
   1004c:	e13ff317 	ldw	r4,-52(fp)
   10050:	20800050 	cmplti	r2,r4,1
   10054:	1000081e 	bne	r2,zero,10078 <alt_up_pixel_buffer_dma_draw_line+0x2e8>
				y = y + ystep;
   10058:	e0bff017 	ldw	r2,-64(fp)
   1005c:	e0fff217 	ldw	r3,-56(fp)
   10060:	10c5883a 	add	r2,r2,r3
   10064:	e0bff015 	stw	r2,-64(fp)
				error = error - deltax;
   10068:	e13ff317 	ldw	r4,-52(fp)
   1006c:	e0bff517 	ldw	r2,-44(fp)
   10070:	2089c83a 	sub	r4,r4,r2
   10074:	e13ff315 	stw	r4,-52(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
   10078:	e0fff117 	ldw	r3,-60(fp)
   1007c:	18c00044 	addi	r3,r3,1
   10080:	e0fff115 	stw	r3,-60(fp)
   10084:	e13ff817 	ldw	r4,-32(fp)
   10088:	e0bff117 	ldw	r2,-60(fp)
   1008c:	20bfe20e 	bge	r4,r2,10018 <alt_up_pixel_buffer_dma_draw_line+0x288>
   10090:	00002106 	br	10118 <alt_up_pixel_buffer_dma_draw_line+0x388>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
   10094:	e0fffa17 	ldw	r3,-24(fp)
   10098:	e0fff115 	stw	r3,-60(fp)
   1009c:	00001b06 	br	1010c <alt_up_pixel_buffer_dma_draw_line+0x37c>
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
   100a0:	e13fee17 	ldw	r4,-72(fp)
   100a4:	d9000015 	stw	r4,0(sp)
   100a8:	e0bfef17 	ldw	r2,-68(fp)
   100ac:	d8800115 	stw	r2,4(sp)
   100b0:	e13fed17 	ldw	r4,-76(fp)
   100b4:	e17fec17 	ldw	r5,-80(fp)
   100b8:	e1bff117 	ldw	r6,-60(fp)
   100bc:	e1fff017 	ldw	r7,-64(fp)
   100c0:	000fcc00 	call	fcc0 <helper_plot_pixel>
			error = error + deltay;
   100c4:	e0fff317 	ldw	r3,-52(fp)
   100c8:	e13ff417 	ldw	r4,-48(fp)
   100cc:	1907883a 	add	r3,r3,r4
   100d0:	e0fff315 	stw	r3,-52(fp)
			if (error > 0) {
   100d4:	e0fff317 	ldw	r3,-52(fp)
   100d8:	18800050 	cmplti	r2,r3,1
   100dc:	1000081e 	bne	r2,zero,10100 <alt_up_pixel_buffer_dma_draw_line+0x370>
				y = y + ystep;
   100e0:	e13ff017 	ldw	r4,-64(fp)
   100e4:	e0bff217 	ldw	r2,-56(fp)
   100e8:	2089883a 	add	r4,r4,r2
   100ec:	e13ff015 	stw	r4,-64(fp)
				error = error - deltax;
   100f0:	e0fff317 	ldw	r3,-52(fp)
   100f4:	e13ff517 	ldw	r4,-44(fp)
   100f8:	1907c83a 	sub	r3,r3,r4
   100fc:	e0fff315 	stw	r3,-52(fp)
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
   10100:	e0bff117 	ldw	r2,-60(fp)
   10104:	10800044 	addi	r2,r2,1
   10108:	e0bff115 	stw	r2,-60(fp)
   1010c:	e0fff817 	ldw	r3,-32(fp)
   10110:	e13ff117 	ldw	r4,-60(fp)
   10114:	193fe20e 	bge	r3,r4,100a0 <alt_up_pixel_buffer_dma_draw_line+0x310>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
   10118:	e037883a 	mov	sp,fp
   1011c:	dfc00117 	ldw	ra,4(sp)
   10120:	df000017 	ldw	fp,0(sp)
   10124:	dec00204 	addi	sp,sp,8
   10128:	f800283a 	ret

0001012c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   1012c:	defff404 	addi	sp,sp,-48
   10130:	df000b15 	stw	fp,44(sp)
   10134:	df000b04 	addi	fp,sp,44
   10138:	e13ffb15 	stw	r4,-20(fp)
   1013c:	e17ffc15 	stw	r5,-16(fp)
   10140:	e1bffd15 	stw	r6,-12(fp)
   10144:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   10148:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1014c:	00800074 	movhi	r2,1
   10150:	10969304 	addi	r2,r2,23116
   10154:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   10158:	1005003a 	cmpeq	r2,r2,zero
   1015c:	1000411e 	bne	r2,zero,10264 <alt_alarm_start+0x138>
  {
    if (alarm)
   10160:	e0bffb17 	ldw	r2,-20(fp)
   10164:	1005003a 	cmpeq	r2,r2,zero
   10168:	10003b1e 	bne	r2,zero,10258 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   1016c:	e0fffb17 	ldw	r3,-20(fp)
   10170:	e0bffd17 	ldw	r2,-12(fp)
   10174:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   10178:	e0fffb17 	ldw	r3,-20(fp)
   1017c:	e0bffe17 	ldw	r2,-8(fp)
   10180:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10184:	0005303a 	rdctl	r2,status
   10188:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1018c:	e0fff817 	ldw	r3,-32(fp)
   10190:	00bfff84 	movi	r2,-2
   10194:	1884703a 	and	r2,r3,r2
   10198:	1001703a 	wrctl	status,r2
  
  return context;
   1019c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   101a0:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   101a4:	00800074 	movhi	r2,1
   101a8:	10969404 	addi	r2,r2,23120
   101ac:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   101b0:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   101b4:	e0fffc17 	ldw	r3,-16(fp)
   101b8:	e0bff917 	ldw	r2,-28(fp)
   101bc:	1885883a 	add	r2,r3,r2
   101c0:	10c00044 	addi	r3,r2,1
   101c4:	e0bffb17 	ldw	r2,-20(fp)
   101c8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   101cc:	e0bffb17 	ldw	r2,-20(fp)
   101d0:	10c00217 	ldw	r3,8(r2)
   101d4:	e0bff917 	ldw	r2,-28(fp)
   101d8:	1880042e 	bgeu	r3,r2,101ec <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   101dc:	e0fffb17 	ldw	r3,-20(fp)
   101e0:	00800044 	movi	r2,1
   101e4:	18800405 	stb	r2,16(r3)
   101e8:	00000206 	br	101f4 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   101ec:	e0bffb17 	ldw	r2,-20(fp)
   101f0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   101f4:	e0fffb17 	ldw	r3,-20(fp)
   101f8:	00800074 	movhi	r2,1
   101fc:	108efd04 	addi	r2,r2,15348
   10200:	e0bff615 	stw	r2,-40(fp)
   10204:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10208:	e0fff717 	ldw	r3,-36(fp)
   1020c:	e0bff617 	ldw	r2,-40(fp)
   10210:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   10214:	e0bff617 	ldw	r2,-40(fp)
   10218:	10c00017 	ldw	r3,0(r2)
   1021c:	e0bff717 	ldw	r2,-36(fp)
   10220:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   10224:	e0bff617 	ldw	r2,-40(fp)
   10228:	10c00017 	ldw	r3,0(r2)
   1022c:	e0bff717 	ldw	r2,-36(fp)
   10230:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   10234:	e0fff617 	ldw	r3,-40(fp)
   10238:	e0bff717 	ldw	r2,-36(fp)
   1023c:	18800015 	stw	r2,0(r3)
   10240:	e0bffa17 	ldw	r2,-24(fp)
   10244:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10248:	e0bff517 	ldw	r2,-44(fp)
   1024c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   10250:	e03fff15 	stw	zero,-4(fp)
   10254:	00000506 	br	1026c <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   10258:	00bffa84 	movi	r2,-22
   1025c:	e0bfff15 	stw	r2,-4(fp)
   10260:	00000206 	br	1026c <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   10264:	00bfde84 	movi	r2,-134
   10268:	e0bfff15 	stw	r2,-4(fp)
   1026c:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   10270:	e037883a 	mov	sp,fp
   10274:	df000017 	ldw	fp,0(sp)
   10278:	dec00104 	addi	sp,sp,4
   1027c:	f800283a 	ret

00010280 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   10280:	deffff04 	addi	sp,sp,-4
   10284:	df000015 	stw	fp,0(sp)
   10288:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   1028c:	e037883a 	mov	sp,fp
   10290:	df000017 	ldw	fp,0(sp)
   10294:	dec00104 	addi	sp,sp,4
   10298:	f800283a 	ret

0001029c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   1029c:	defff904 	addi	sp,sp,-28
   102a0:	dfc00615 	stw	ra,24(sp)
   102a4:	df000515 	stw	fp,20(sp)
   102a8:	df000504 	addi	fp,sp,20
   102ac:	e13ffd15 	stw	r4,-12(fp)
   102b0:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   102b4:	e0bffd17 	ldw	r2,-12(fp)
   102b8:	1005003a 	cmpeq	r2,r2,zero
   102bc:	1000041e 	bne	r2,zero,102d0 <alt_dev_llist_insert+0x34>
   102c0:	e0bffd17 	ldw	r2,-12(fp)
   102c4:	10800217 	ldw	r2,8(r2)
   102c8:	1004c03a 	cmpne	r2,r2,zero
   102cc:	1000071e 	bne	r2,zero,102ec <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   102d0:	00103500 	call	10350 <alt_get_errno>
   102d4:	1007883a 	mov	r3,r2
   102d8:	00800584 	movi	r2,22
   102dc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   102e0:	00bffa84 	movi	r2,-22
   102e4:	e0bfff15 	stw	r2,-4(fp)
   102e8:	00001306 	br	10338 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   102ec:	e0fffd17 	ldw	r3,-12(fp)
   102f0:	e0bffe17 	ldw	r2,-8(fp)
   102f4:	e0bffb15 	stw	r2,-20(fp)
   102f8:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   102fc:	e0fffc17 	ldw	r3,-16(fp)
   10300:	e0bffb17 	ldw	r2,-20(fp)
   10304:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   10308:	e0bffb17 	ldw	r2,-20(fp)
   1030c:	10c00017 	ldw	r3,0(r2)
   10310:	e0bffc17 	ldw	r2,-16(fp)
   10314:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   10318:	e0bffb17 	ldw	r2,-20(fp)
   1031c:	10c00017 	ldw	r3,0(r2)
   10320:	e0bffc17 	ldw	r2,-16(fp)
   10324:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   10328:	e0fffb17 	ldw	r3,-20(fp)
   1032c:	e0bffc17 	ldw	r2,-16(fp)
   10330:	18800015 	stw	r2,0(r3)

  return 0;  
   10334:	e03fff15 	stw	zero,-4(fp)
   10338:	e0bfff17 	ldw	r2,-4(fp)
}
   1033c:	e037883a 	mov	sp,fp
   10340:	dfc00117 	ldw	ra,4(sp)
   10344:	df000017 	ldw	fp,0(sp)
   10348:	dec00204 	addi	sp,sp,8
   1034c:	f800283a 	ret

00010350 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10350:	defffd04 	addi	sp,sp,-12
   10354:	dfc00215 	stw	ra,8(sp)
   10358:	df000115 	stw	fp,4(sp)
   1035c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   10360:	00800074 	movhi	r2,1
   10364:	108efa04 	addi	r2,r2,15336
   10368:	10800017 	ldw	r2,0(r2)
   1036c:	1005003a 	cmpeq	r2,r2,zero
   10370:	1000061e 	bne	r2,zero,1038c <alt_get_errno+0x3c>
   10374:	00800074 	movhi	r2,1
   10378:	108efa04 	addi	r2,r2,15336
   1037c:	10800017 	ldw	r2,0(r2)
   10380:	103ee83a 	callr	r2
   10384:	e0bfff15 	stw	r2,-4(fp)
   10388:	00000306 	br	10398 <alt_get_errno+0x48>
   1038c:	00800074 	movhi	r2,1
   10390:	10968e04 	addi	r2,r2,23096
   10394:	e0bfff15 	stw	r2,-4(fp)
   10398:	e0bfff17 	ldw	r2,-4(fp)
}
   1039c:	e037883a 	mov	sp,fp
   103a0:	dfc00117 	ldw	ra,4(sp)
   103a4:	df000017 	ldw	fp,0(sp)
   103a8:	dec00204 	addi	sp,sp,8
   103ac:	f800283a 	ret

000103b0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   103b0:	defffd04 	addi	sp,sp,-12
   103b4:	dfc00215 	stw	ra,8(sp)
   103b8:	df000115 	stw	fp,4(sp)
   103bc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   103c0:	00bfff04 	movi	r2,-4
   103c4:	00c00074 	movhi	r3,1
   103c8:	18c58204 	addi	r3,r3,5640
   103cc:	1885883a 	add	r2,r3,r2
   103d0:	e0bfff15 	stw	r2,-4(fp)
   103d4:	00000606 	br	103f0 <_do_ctors+0x40>
        (*ctor) (); 
   103d8:	e0bfff17 	ldw	r2,-4(fp)
   103dc:	10800017 	ldw	r2,0(r2)
   103e0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   103e4:	e0bfff17 	ldw	r2,-4(fp)
   103e8:	10bfff04 	addi	r2,r2,-4
   103ec:	e0bfff15 	stw	r2,-4(fp)
   103f0:	e0ffff17 	ldw	r3,-4(fp)
   103f4:	00800074 	movhi	r2,1
   103f8:	10858104 	addi	r2,r2,5636
   103fc:	18bff62e 	bgeu	r3,r2,103d8 <_do_ctors+0x28>
        (*ctor) (); 
}
   10400:	e037883a 	mov	sp,fp
   10404:	dfc00117 	ldw	ra,4(sp)
   10408:	df000017 	ldw	fp,0(sp)
   1040c:	dec00204 	addi	sp,sp,8
   10410:	f800283a 	ret

00010414 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   10414:	defffd04 	addi	sp,sp,-12
   10418:	dfc00215 	stw	ra,8(sp)
   1041c:	df000115 	stw	fp,4(sp)
   10420:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   10424:	00bfff04 	movi	r2,-4
   10428:	00c00074 	movhi	r3,1
   1042c:	18c58204 	addi	r3,r3,5640
   10430:	1885883a 	add	r2,r3,r2
   10434:	e0bfff15 	stw	r2,-4(fp)
   10438:	00000606 	br	10454 <_do_dtors+0x40>
        (*dtor) (); 
   1043c:	e0bfff17 	ldw	r2,-4(fp)
   10440:	10800017 	ldw	r2,0(r2)
   10444:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   10448:	e0bfff17 	ldw	r2,-4(fp)
   1044c:	10bfff04 	addi	r2,r2,-4
   10450:	e0bfff15 	stw	r2,-4(fp)
   10454:	e0ffff17 	ldw	r3,-4(fp)
   10458:	00800074 	movhi	r2,1
   1045c:	10858204 	addi	r2,r2,5640
   10460:	18bff62e 	bgeu	r3,r2,1043c <_do_dtors+0x28>
        (*dtor) (); 
}
   10464:	e037883a 	mov	sp,fp
   10468:	dfc00117 	ldw	ra,4(sp)
   1046c:	df000017 	ldw	fp,0(sp)
   10470:	dec00204 	addi	sp,sp,8
   10474:	f800283a 	ret

00010478 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   10478:	defff904 	addi	sp,sp,-28
   1047c:	dfc00615 	stw	ra,24(sp)
   10480:	df000515 	stw	fp,20(sp)
   10484:	df000504 	addi	fp,sp,20
   10488:	e13ffd15 	stw	r4,-12(fp)
   1048c:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   10490:	e0bffe17 	ldw	r2,-8(fp)
   10494:	10800017 	ldw	r2,0(r2)
   10498:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   1049c:	e13ffd17 	ldw	r4,-12(fp)
   104a0:	000810c0 	call	810c <strlen>
   104a4:	10800044 	addi	r2,r2,1
   104a8:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   104ac:	00000d06 	br	104e4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   104b0:	e0bffc17 	ldw	r2,-16(fp)
   104b4:	11000217 	ldw	r4,8(r2)
   104b8:	e1bffb17 	ldw	r6,-20(fp)
   104bc:	e17ffd17 	ldw	r5,-12(fp)
   104c0:	0010f100 	call	10f10 <memcmp>
   104c4:	1004c03a 	cmpne	r2,r2,zero
   104c8:	1000031e 	bne	r2,zero,104d8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   104cc:	e0bffc17 	ldw	r2,-16(fp)
   104d0:	e0bfff15 	stw	r2,-4(fp)
   104d4:	00000706 	br	104f4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   104d8:	e0bffc17 	ldw	r2,-16(fp)
   104dc:	10800017 	ldw	r2,0(r2)
   104e0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   104e4:	e0fffe17 	ldw	r3,-8(fp)
   104e8:	e0bffc17 	ldw	r2,-16(fp)
   104ec:	10fff01e 	bne	r2,r3,104b0 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   104f0:	e03fff15 	stw	zero,-4(fp)
   104f4:	e0bfff17 	ldw	r2,-4(fp)
}
   104f8:	e037883a 	mov	sp,fp
   104fc:	dfc00117 	ldw	ra,4(sp)
   10500:	df000017 	ldw	fp,0(sp)
   10504:	dec00204 	addi	sp,sp,8
   10508:	f800283a 	ret

0001050c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1050c:	defffe04 	addi	sp,sp,-8
   10510:	dfc00115 	stw	ra,4(sp)
   10514:	df000015 	stw	fp,0(sp)
   10518:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   1051c:	0009883a 	mov	r4,zero
   10520:	01440004 	movi	r5,4096
   10524:	0010e340 	call	10e34 <alt_icache_flush>
#endif
}
   10528:	e037883a 	mov	sp,fp
   1052c:	dfc00117 	ldw	ra,4(sp)
   10530:	df000017 	ldw	fp,0(sp)
   10534:	dec00204 	addi	sp,sp,8
   10538:	f800283a 	ret

0001053c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   1053c:	defff904 	addi	sp,sp,-28
   10540:	dfc00615 	stw	ra,24(sp)
   10544:	df000515 	stw	fp,20(sp)
   10548:	df000504 	addi	fp,sp,20
   1054c:	e13ffc15 	stw	r4,-16(fp)
   10550:	e17ffd15 	stw	r5,-12(fp)
   10554:	e1bffe15 	stw	r6,-8(fp)
   10558:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   1055c:	e13ffd17 	ldw	r4,-12(fp)
   10560:	e17ffe17 	ldw	r5,-8(fp)
   10564:	e1bfff17 	ldw	r6,-4(fp)
   10568:	00107540 	call	10754 <open>
   1056c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   10570:	e0bffb17 	ldw	r2,-20(fp)
   10574:	1004803a 	cmplt	r2,r2,zero
   10578:	10001c1e 	bne	r2,zero,105ec <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
   1057c:	e0bffb17 	ldw	r2,-20(fp)
   10580:	00c00074 	movhi	r3,1
   10584:	18c98a04 	addi	r3,r3,9768
   10588:	10800324 	muli	r2,r2,12
   1058c:	10c5883a 	add	r2,r2,r3
   10590:	10c00017 	ldw	r3,0(r2)
   10594:	e0bffc17 	ldw	r2,-16(fp)
   10598:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   1059c:	e0bffb17 	ldw	r2,-20(fp)
   105a0:	00c00074 	movhi	r3,1
   105a4:	18c98a04 	addi	r3,r3,9768
   105a8:	10800324 	muli	r2,r2,12
   105ac:	10c5883a 	add	r2,r2,r3
   105b0:	10800104 	addi	r2,r2,4
   105b4:	10c00017 	ldw	r3,0(r2)
   105b8:	e0bffc17 	ldw	r2,-16(fp)
   105bc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   105c0:	e0bffb17 	ldw	r2,-20(fp)
   105c4:	00c00074 	movhi	r3,1
   105c8:	18c98a04 	addi	r3,r3,9768
   105cc:	10800324 	muli	r2,r2,12
   105d0:	10c5883a 	add	r2,r2,r3
   105d4:	10800204 	addi	r2,r2,8
   105d8:	10c00017 	ldw	r3,0(r2)
   105dc:	e0bffc17 	ldw	r2,-16(fp)
   105e0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   105e4:	e13ffb17 	ldw	r4,-20(fp)
   105e8:	000b6e00 	call	b6e0 <alt_release_fd>
  }
} 
   105ec:	e037883a 	mov	sp,fp
   105f0:	dfc00117 	ldw	ra,4(sp)
   105f4:	df000017 	ldw	fp,0(sp)
   105f8:	dec00204 	addi	sp,sp,8
   105fc:	f800283a 	ret

00010600 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   10600:	defffb04 	addi	sp,sp,-20
   10604:	dfc00415 	stw	ra,16(sp)
   10608:	df000315 	stw	fp,12(sp)
   1060c:	df000304 	addi	fp,sp,12
   10610:	e13ffd15 	stw	r4,-12(fp)
   10614:	e17ffe15 	stw	r5,-8(fp)
   10618:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   1061c:	01000074 	movhi	r4,1
   10620:	21098d04 	addi	r4,r4,9780
   10624:	e17ffd17 	ldw	r5,-12(fp)
   10628:	01800044 	movi	r6,1
   1062c:	01c07fc4 	movi	r7,511
   10630:	001053c0 	call	1053c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   10634:	01000074 	movhi	r4,1
   10638:	21098a04 	addi	r4,r4,9768
   1063c:	e17ffe17 	ldw	r5,-8(fp)
   10640:	000d883a 	mov	r6,zero
   10644:	01c07fc4 	movi	r7,511
   10648:	001053c0 	call	1053c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   1064c:	01000074 	movhi	r4,1
   10650:	21099004 	addi	r4,r4,9792
   10654:	e17fff17 	ldw	r5,-4(fp)
   10658:	01800044 	movi	r6,1
   1065c:	01c07fc4 	movi	r7,511
   10660:	001053c0 	call	1053c <alt_open_fd>
}  
   10664:	e037883a 	mov	sp,fp
   10668:	dfc00117 	ldw	ra,4(sp)
   1066c:	df000017 	ldw	fp,0(sp)
   10670:	dec00204 	addi	sp,sp,8
   10674:	f800283a 	ret

00010678 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   10678:	defffc04 	addi	sp,sp,-16
   1067c:	df000315 	stw	fp,12(sp)
   10680:	df000304 	addi	fp,sp,12
   10684:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   10688:	e0bffe17 	ldw	r2,-8(fp)
   1068c:	10800217 	ldw	r2,8(r2)
   10690:	10d00034 	orhi	r3,r2,16384
   10694:	e0bffe17 	ldw	r2,-8(fp)
   10698:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1069c:	e03ffd15 	stw	zero,-12(fp)
   106a0:	00002006 	br	10724 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   106a4:	e0bffd17 	ldw	r2,-12(fp)
   106a8:	00c00074 	movhi	r3,1
   106ac:	18c98a04 	addi	r3,r3,9768
   106b0:	10800324 	muli	r2,r2,12
   106b4:	10c5883a 	add	r2,r2,r3
   106b8:	10c00017 	ldw	r3,0(r2)
   106bc:	e0bffe17 	ldw	r2,-8(fp)
   106c0:	10800017 	ldw	r2,0(r2)
   106c4:	1880141e 	bne	r3,r2,10718 <alt_file_locked+0xa0>
   106c8:	e0bffd17 	ldw	r2,-12(fp)
   106cc:	00c00074 	movhi	r3,1
   106d0:	18c98a04 	addi	r3,r3,9768
   106d4:	10800324 	muli	r2,r2,12
   106d8:	10c5883a 	add	r2,r2,r3
   106dc:	10800204 	addi	r2,r2,8
   106e0:	10800017 	ldw	r2,0(r2)
   106e4:	1004403a 	cmpge	r2,r2,zero
   106e8:	10000b1e 	bne	r2,zero,10718 <alt_file_locked+0xa0>
   106ec:	e0bffd17 	ldw	r2,-12(fp)
   106f0:	10800324 	muli	r2,r2,12
   106f4:	1007883a 	mov	r3,r2
   106f8:	00800074 	movhi	r2,1
   106fc:	10898a04 	addi	r2,r2,9768
   10700:	1887883a 	add	r3,r3,r2
   10704:	e0bffe17 	ldw	r2,-8(fp)
   10708:	18800326 	beq	r3,r2,10718 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   1070c:	00bffcc4 	movi	r2,-13
   10710:	e0bfff15 	stw	r2,-4(fp)
   10714:	00000a06 	br	10740 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   10718:	e0bffd17 	ldw	r2,-12(fp)
   1071c:	10800044 	addi	r2,r2,1
   10720:	e0bffd15 	stw	r2,-12(fp)
   10724:	00800074 	movhi	r2,1
   10728:	108ef904 	addi	r2,r2,15332
   1072c:	10800017 	ldw	r2,0(r2)
   10730:	1007883a 	mov	r3,r2
   10734:	e0bffd17 	ldw	r2,-12(fp)
   10738:	18bfda2e 	bgeu	r3,r2,106a4 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   1073c:	e03fff15 	stw	zero,-4(fp)
   10740:	e0bfff17 	ldw	r2,-4(fp)
}
   10744:	e037883a 	mov	sp,fp
   10748:	df000017 	ldw	fp,0(sp)
   1074c:	dec00104 	addi	sp,sp,4
   10750:	f800283a 	ret

00010754 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   10754:	defff404 	addi	sp,sp,-48
   10758:	dfc00b15 	stw	ra,44(sp)
   1075c:	df000a15 	stw	fp,40(sp)
   10760:	df000a04 	addi	fp,sp,40
   10764:	e13ffb15 	stw	r4,-20(fp)
   10768:	e17ffc15 	stw	r5,-16(fp)
   1076c:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   10770:	00bfffc4 	movi	r2,-1
   10774:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   10778:	00bffb44 	movi	r2,-19
   1077c:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   10780:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   10784:	e13ffb17 	ldw	r4,-20(fp)
   10788:	01400074 	movhi	r5,1
   1078c:	294ef704 	addi	r5,r5,15324
   10790:	00104780 	call	10478 <alt_find_dev>
   10794:	e0bffa15 	stw	r2,-24(fp)
   10798:	e0bffa17 	ldw	r2,-24(fp)
   1079c:	1004c03a 	cmpne	r2,r2,zero
   107a0:	1000051e 	bne	r2,zero,107b8 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   107a4:	e13ffb17 	ldw	r4,-20(fp)
   107a8:	0010c5c0 	call	10c5c <alt_find_file>
   107ac:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   107b0:	00800044 	movi	r2,1
   107b4:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   107b8:	e0bffa17 	ldw	r2,-24(fp)
   107bc:	1005003a 	cmpeq	r2,r2,zero
   107c0:	1000301e 	bne	r2,zero,10884 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
   107c4:	e13ffa17 	ldw	r4,-24(fp)
   107c8:	0010d7c0 	call	10d7c <alt_get_fd>
   107cc:	e0bff815 	stw	r2,-32(fp)
   107d0:	e0bff817 	ldw	r2,-32(fp)
   107d4:	1004403a 	cmpge	r2,r2,zero
   107d8:	1000031e 	bne	r2,zero,107e8 <open+0x94>
    {
      status = index;
   107dc:	e0bff817 	ldw	r2,-32(fp)
   107e0:	e0bff715 	stw	r2,-36(fp)
   107e4:	00002906 	br	1088c <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
   107e8:	e0bff817 	ldw	r2,-32(fp)
   107ec:	10800324 	muli	r2,r2,12
   107f0:	1007883a 	mov	r3,r2
   107f4:	00800074 	movhi	r2,1
   107f8:	10898a04 	addi	r2,r2,9768
   107fc:	1885883a 	add	r2,r3,r2
   10800:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   10804:	e0fffc17 	ldw	r3,-16(fp)
   10808:	00900034 	movhi	r2,16384
   1080c:	10bfffc4 	addi	r2,r2,-1
   10810:	1886703a 	and	r3,r3,r2
   10814:	e0bff917 	ldw	r2,-28(fp)
   10818:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   1081c:	e0bff617 	ldw	r2,-40(fp)
   10820:	1004c03a 	cmpne	r2,r2,zero
   10824:	1000061e 	bne	r2,zero,10840 <open+0xec>
   10828:	e13ff917 	ldw	r4,-28(fp)
   1082c:	00106780 	call	10678 <alt_file_locked>
   10830:	e0bff715 	stw	r2,-36(fp)
   10834:	e0bff717 	ldw	r2,-36(fp)
   10838:	1004803a 	cmplt	r2,r2,zero
   1083c:	1000131e 	bne	r2,zero,1088c <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   10840:	e0bffa17 	ldw	r2,-24(fp)
   10844:	10800317 	ldw	r2,12(r2)
   10848:	1005003a 	cmpeq	r2,r2,zero
   1084c:	1000091e 	bne	r2,zero,10874 <open+0x120>
   10850:	e0bffa17 	ldw	r2,-24(fp)
   10854:	10800317 	ldw	r2,12(r2)
   10858:	e13ff917 	ldw	r4,-28(fp)
   1085c:	e17ffb17 	ldw	r5,-20(fp)
   10860:	e1bffc17 	ldw	r6,-16(fp)
   10864:	e1fffd17 	ldw	r7,-12(fp)
   10868:	103ee83a 	callr	r2
   1086c:	e0bfff15 	stw	r2,-4(fp)
   10870:	00000106 	br	10878 <open+0x124>
   10874:	e03fff15 	stw	zero,-4(fp)
   10878:	e0bfff17 	ldw	r2,-4(fp)
   1087c:	e0bff715 	stw	r2,-36(fp)
   10880:	00000206 	br	1088c <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
   10884:	00bffb44 	movi	r2,-19
   10888:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   1088c:	e0bff717 	ldw	r2,-36(fp)
   10890:	1004403a 	cmpge	r2,r2,zero
   10894:	1000091e 	bne	r2,zero,108bc <open+0x168>
  {
    alt_release_fd (index);  
   10898:	e13ff817 	ldw	r4,-32(fp)
   1089c:	000b6e00 	call	b6e0 <alt_release_fd>
    ALT_ERRNO = -status;
   108a0:	00108dc0 	call	108dc <alt_get_errno>
   108a4:	e0fff717 	ldw	r3,-36(fp)
   108a8:	00c7c83a 	sub	r3,zero,r3
   108ac:	10c00015 	stw	r3,0(r2)
    return -1;
   108b0:	00bfffc4 	movi	r2,-1
   108b4:	e0bffe15 	stw	r2,-8(fp)
   108b8:	00000206 	br	108c4 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
   108bc:	e0bff817 	ldw	r2,-32(fp)
   108c0:	e0bffe15 	stw	r2,-8(fp)
   108c4:	e0bffe17 	ldw	r2,-8(fp)
}
   108c8:	e037883a 	mov	sp,fp
   108cc:	dfc00117 	ldw	ra,4(sp)
   108d0:	df000017 	ldw	fp,0(sp)
   108d4:	dec00204 	addi	sp,sp,8
   108d8:	f800283a 	ret

000108dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   108dc:	defffd04 	addi	sp,sp,-12
   108e0:	dfc00215 	stw	ra,8(sp)
   108e4:	df000115 	stw	fp,4(sp)
   108e8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   108ec:	00800074 	movhi	r2,1
   108f0:	108efa04 	addi	r2,r2,15336
   108f4:	10800017 	ldw	r2,0(r2)
   108f8:	1005003a 	cmpeq	r2,r2,zero
   108fc:	1000061e 	bne	r2,zero,10918 <alt_get_errno+0x3c>
   10900:	00800074 	movhi	r2,1
   10904:	108efa04 	addi	r2,r2,15336
   10908:	10800017 	ldw	r2,0(r2)
   1090c:	103ee83a 	callr	r2
   10910:	e0bfff15 	stw	r2,-4(fp)
   10914:	00000306 	br	10924 <alt_get_errno+0x48>
   10918:	00800074 	movhi	r2,1
   1091c:	10968e04 	addi	r2,r2,23096
   10920:	e0bfff15 	stw	r2,-4(fp)
   10924:	e0bfff17 	ldw	r2,-4(fp)
}
   10928:	e037883a 	mov	sp,fp
   1092c:	dfc00117 	ldw	ra,4(sp)
   10930:	df000017 	ldw	fp,0(sp)
   10934:	dec00204 	addi	sp,sp,8
   10938:	f800283a 	ret

0001093c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   1093c:	defffa04 	addi	sp,sp,-24
   10940:	df000515 	stw	fp,20(sp)
   10944:	df000504 	addi	fp,sp,20
   10948:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1094c:	0005303a 	rdctl	r2,status
   10950:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10954:	e0fffd17 	ldw	r3,-12(fp)
   10958:	00bfff84 	movi	r2,-2
   1095c:	1884703a 	and	r2,r3,r2
   10960:	1001703a 	wrctl	status,r2
  
  return context;
   10964:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   10968:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   1096c:	e0bfff17 	ldw	r2,-4(fp)
   10970:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   10974:	e0bffc17 	ldw	r2,-16(fp)
   10978:	10c00017 	ldw	r3,0(r2)
   1097c:	e0bffc17 	ldw	r2,-16(fp)
   10980:	10800117 	ldw	r2,4(r2)
   10984:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   10988:	e0bffc17 	ldw	r2,-16(fp)
   1098c:	10c00117 	ldw	r3,4(r2)
   10990:	e0bffc17 	ldw	r2,-16(fp)
   10994:	10800017 	ldw	r2,0(r2)
   10998:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   1099c:	e0fffc17 	ldw	r3,-16(fp)
   109a0:	e0bffc17 	ldw	r2,-16(fp)
   109a4:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   109a8:	e0fffc17 	ldw	r3,-16(fp)
   109ac:	e0bffc17 	ldw	r2,-16(fp)
   109b0:	18800015 	stw	r2,0(r3)
   109b4:	e0bffe17 	ldw	r2,-8(fp)
   109b8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   109bc:	e0bffb17 	ldw	r2,-20(fp)
   109c0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   109c4:	e037883a 	mov	sp,fp
   109c8:	df000017 	ldw	fp,0(sp)
   109cc:	dec00104 	addi	sp,sp,4
   109d0:	f800283a 	ret

000109d4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   109d4:	defffb04 	addi	sp,sp,-20
   109d8:	dfc00415 	stw	ra,16(sp)
   109dc:	df000315 	stw	fp,12(sp)
   109e0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   109e4:	d0a00e17 	ldw	r2,-32712(gp)
   109e8:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   109ec:	d0a7a517 	ldw	r2,-24940(gp)
   109f0:	10800044 	addi	r2,r2,1
   109f4:	d0a7a515 	stw	r2,-24940(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   109f8:	00003106 	br	10ac0 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   109fc:	e0bffe17 	ldw	r2,-8(fp)
   10a00:	10800017 	ldw	r2,0(r2)
   10a04:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   10a08:	e0bffe17 	ldw	r2,-8(fp)
   10a0c:	10800403 	ldbu	r2,16(r2)
   10a10:	10803fcc 	andi	r2,r2,255
   10a14:	1005003a 	cmpeq	r2,r2,zero
   10a18:	1000051e 	bne	r2,zero,10a30 <alt_tick+0x5c>
   10a1c:	d0a7a517 	ldw	r2,-24940(gp)
   10a20:	1004c03a 	cmpne	r2,r2,zero
   10a24:	1000021e 	bne	r2,zero,10a30 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   10a28:	e0bffe17 	ldw	r2,-8(fp)
   10a2c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   10a30:	e0bffe17 	ldw	r2,-8(fp)
   10a34:	10c00217 	ldw	r3,8(r2)
   10a38:	d0a7a517 	ldw	r2,-24940(gp)
   10a3c:	10c01e36 	bltu	r2,r3,10ab8 <alt_tick+0xe4>
   10a40:	e0bffe17 	ldw	r2,-8(fp)
   10a44:	10800403 	ldbu	r2,16(r2)
   10a48:	10803fcc 	andi	r2,r2,255
   10a4c:	1004c03a 	cmpne	r2,r2,zero
   10a50:	1000191e 	bne	r2,zero,10ab8 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   10a54:	e0bffe17 	ldw	r2,-8(fp)
   10a58:	10c00317 	ldw	r3,12(r2)
   10a5c:	e0bffe17 	ldw	r2,-8(fp)
   10a60:	11000517 	ldw	r4,20(r2)
   10a64:	183ee83a 	callr	r3
   10a68:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   10a6c:	e0bffd17 	ldw	r2,-12(fp)
   10a70:	1004c03a 	cmpne	r2,r2,zero
   10a74:	1000031e 	bne	r2,zero,10a84 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   10a78:	e13ffe17 	ldw	r4,-8(fp)
   10a7c:	001093c0 	call	1093c <alt_alarm_stop>
   10a80:	00000d06 	br	10ab8 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   10a84:	e0bffe17 	ldw	r2,-8(fp)
   10a88:	10c00217 	ldw	r3,8(r2)
   10a8c:	e0bffd17 	ldw	r2,-12(fp)
   10a90:	1887883a 	add	r3,r3,r2
   10a94:	e0bffe17 	ldw	r2,-8(fp)
   10a98:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   10a9c:	e0bffe17 	ldw	r2,-8(fp)
   10aa0:	10c00217 	ldw	r3,8(r2)
   10aa4:	d0a7a517 	ldw	r2,-24940(gp)
   10aa8:	1880032e 	bgeu	r3,r2,10ab8 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   10aac:	e0fffe17 	ldw	r3,-8(fp)
   10ab0:	00800044 	movi	r2,1
   10ab4:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   10ab8:	e0bfff17 	ldw	r2,-4(fp)
   10abc:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   10ac0:	d0e00e04 	addi	r3,gp,-32712
   10ac4:	e0bffe17 	ldw	r2,-8(fp)
   10ac8:	10ffcc1e 	bne	r2,r3,109fc <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   10acc:	e037883a 	mov	sp,fp
   10ad0:	dfc00117 	ldw	ra,4(sp)
   10ad4:	df000017 	ldw	fp,0(sp)
   10ad8:	dec00204 	addi	sp,sp,8
   10adc:	f800283a 	ret

00010ae0 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   10ae0:	defffd04 	addi	sp,sp,-12
   10ae4:	dfc00215 	stw	ra,8(sp)
   10ae8:	df000115 	stw	fp,4(sp)
   10aec:	df000104 	addi	fp,sp,4
   10af0:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   10af4:	e13fff17 	ldw	r4,-4(fp)
   10af8:	0010b300 	call	10b30 <alt_busy_sleep>
}
   10afc:	e037883a 	mov	sp,fp
   10b00:	dfc00117 	ldw	ra,4(sp)
   10b04:	df000017 	ldw	fp,0(sp)
   10b08:	dec00204 	addi	sp,sp,8
   10b0c:	f800283a 	ret

00010b10 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   10b10:	deffff04 	addi	sp,sp,-4
   10b14:	df000015 	stw	fp,0(sp)
   10b18:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   10b1c:	000170fa 	wrctl	ienable,zero
}
   10b20:	e037883a 	mov	sp,fp
   10b24:	df000017 	ldw	fp,0(sp)
   10b28:	dec00104 	addi	sp,sp,4
   10b2c:	f800283a 	ret

00010b30 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   10b30:	defffb04 	addi	sp,sp,-20
   10b34:	df000415 	stw	fp,16(sp)
   10b38:	df000404 	addi	fp,sp,16
   10b3c:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   10b40:	008000c4 	movi	r2,3
   10b44:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
   10b48:	e0fffc17 	ldw	r3,-16(fp)
   10b4c:	008003f4 	movhi	r2,15
   10b50:	10909004 	addi	r2,r2,16960
   10b54:	1887383a 	mul	r3,r3,r2
   10b58:	0080bef4 	movhi	r2,763
   10b5c:	10bc2004 	addi	r2,r2,-3968
   10b60:	10c7203a 	divu	r3,r2,r3
   10b64:	00a00034 	movhi	r2,32768
   10b68:	10bfffc4 	addi	r2,r2,-1
   10b6c:	10c7203a 	divu	r3,r2,r3
   10b70:	e0bfff17 	ldw	r2,-4(fp)
   10b74:	10c5203a 	divu	r2,r2,r3
   10b78:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   10b7c:	e0bffd17 	ldw	r2,-12(fp)
   10b80:	1005003a 	cmpeq	r2,r2,zero
   10b84:	1000251e 	bne	r2,zero,10c1c <alt_busy_sleep+0xec>
  {
    for(i=0;i<big_loops;i++)
   10b88:	e03ffe15 	stw	zero,-8(fp)
   10b8c:	00001406 	br	10be0 <alt_busy_sleep+0xb0>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   10b90:	00a00034 	movhi	r2,32768
   10b94:	10bfffc4 	addi	r2,r2,-1
   10b98:	10bfffc4 	addi	r2,r2,-1
   10b9c:	103ffe1e 	bne	r2,zero,10b98 <alt_busy_sleep+0x68>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   10ba0:	e0fffc17 	ldw	r3,-16(fp)
   10ba4:	008003f4 	movhi	r2,15
   10ba8:	10909004 	addi	r2,r2,16960
   10bac:	1887383a 	mul	r3,r3,r2
   10bb0:	0080bef4 	movhi	r2,763
   10bb4:	10bc2004 	addi	r2,r2,-3968
   10bb8:	10c7203a 	divu	r3,r2,r3
   10bbc:	00a00034 	movhi	r2,32768
   10bc0:	10bfffc4 	addi	r2,r2,-1
   10bc4:	10c7203a 	divu	r3,r2,r3
   10bc8:	e0bfff17 	ldw	r2,-4(fp)
   10bcc:	10c5c83a 	sub	r2,r2,r3
   10bd0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   10bd4:	e0bffe17 	ldw	r2,-8(fp)
   10bd8:	10800044 	addi	r2,r2,1
   10bdc:	e0bffe15 	stw	r2,-8(fp)
   10be0:	e0fffe17 	ldw	r3,-8(fp)
   10be4:	e0bffd17 	ldw	r2,-12(fp)
   10be8:	18bfe916 	blt	r3,r2,10b90 <alt_busy_sleep+0x60>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   10bec:	e0fffc17 	ldw	r3,-16(fp)
   10bf0:	008003f4 	movhi	r2,15
   10bf4:	10909004 	addi	r2,r2,16960
   10bf8:	1887383a 	mul	r3,r3,r2
   10bfc:	0080bef4 	movhi	r2,763
   10c00:	10bc2004 	addi	r2,r2,-3968
   10c04:	10c7203a 	divu	r3,r2,r3
   10c08:	e0bfff17 	ldw	r2,-4(fp)
   10c0c:	1885383a 	mul	r2,r3,r2
   10c10:	10bfffc4 	addi	r2,r2,-1
   10c14:	103ffe1e 	bne	r2,zero,10c10 <alt_busy_sleep+0xe0>
   10c18:	00000b06 	br	10c48 <alt_busy_sleep+0x118>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   10c1c:	e0fffc17 	ldw	r3,-16(fp)
   10c20:	008003f4 	movhi	r2,15
   10c24:	10909004 	addi	r2,r2,16960
   10c28:	1887383a 	mul	r3,r3,r2
   10c2c:	0080bef4 	movhi	r2,763
   10c30:	10bc2004 	addi	r2,r2,-3968
   10c34:	10c7203a 	divu	r3,r2,r3
   10c38:	e0bfff17 	ldw	r2,-4(fp)
   10c3c:	1885383a 	mul	r2,r3,r2
   10c40:	10bfffc4 	addi	r2,r2,-1
   10c44:	00bffe16 	blt	zero,r2,10c40 <alt_busy_sleep+0x110>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   10c48:	0005883a 	mov	r2,zero
}
   10c4c:	e037883a 	mov	sp,fp
   10c50:	df000017 	ldw	fp,0(sp)
   10c54:	dec00104 	addi	sp,sp,4
   10c58:	f800283a 	ret

00010c5c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   10c5c:	defffa04 	addi	sp,sp,-24
   10c60:	dfc00515 	stw	ra,20(sp)
   10c64:	df000415 	stw	fp,16(sp)
   10c68:	df000404 	addi	fp,sp,16
   10c6c:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   10c70:	00800074 	movhi	r2,1
   10c74:	108ef504 	addi	r2,r2,15316
   10c78:	10800017 	ldw	r2,0(r2)
   10c7c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   10c80:	00003306 	br	10d50 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   10c84:	e0bffd17 	ldw	r2,-12(fp)
   10c88:	11000217 	ldw	r4,8(r2)
   10c8c:	000810c0 	call	810c <strlen>
   10c90:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   10c94:	e0bffd17 	ldw	r2,-12(fp)
   10c98:	10c00217 	ldw	r3,8(r2)
   10c9c:	e0bffc17 	ldw	r2,-16(fp)
   10ca0:	1885883a 	add	r2,r3,r2
   10ca4:	10bfffc4 	addi	r2,r2,-1
   10ca8:	10800003 	ldbu	r2,0(r2)
   10cac:	10803fcc 	andi	r2,r2,255
   10cb0:	1080201c 	xori	r2,r2,128
   10cb4:	10bfe004 	addi	r2,r2,-128
   10cb8:	10800bd8 	cmpnei	r2,r2,47
   10cbc:	1000031e 	bne	r2,zero,10ccc <alt_find_file+0x70>
    {
      len -= 1;
   10cc0:	e0bffc17 	ldw	r2,-16(fp)
   10cc4:	10bfffc4 	addi	r2,r2,-1
   10cc8:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   10ccc:	e0bffc17 	ldw	r2,-16(fp)
   10cd0:	1007883a 	mov	r3,r2
   10cd4:	e0bffe17 	ldw	r2,-8(fp)
   10cd8:	1885883a 	add	r2,r3,r2
   10cdc:	10800003 	ldbu	r2,0(r2)
   10ce0:	10803fcc 	andi	r2,r2,255
   10ce4:	1080201c 	xori	r2,r2,128
   10ce8:	10bfe004 	addi	r2,r2,-128
   10cec:	10800be0 	cmpeqi	r2,r2,47
   10cf0:	10000a1e 	bne	r2,zero,10d1c <alt_find_file+0xc0>
   10cf4:	e0bffc17 	ldw	r2,-16(fp)
   10cf8:	1007883a 	mov	r3,r2
   10cfc:	e0bffe17 	ldw	r2,-8(fp)
   10d00:	1885883a 	add	r2,r3,r2
   10d04:	10800003 	ldbu	r2,0(r2)
   10d08:	10803fcc 	andi	r2,r2,255
   10d0c:	1080201c 	xori	r2,r2,128
   10d10:	10bfe004 	addi	r2,r2,-128
   10d14:	1004c03a 	cmpne	r2,r2,zero
   10d18:	10000a1e 	bne	r2,zero,10d44 <alt_find_file+0xe8>
   10d1c:	e0bffd17 	ldw	r2,-12(fp)
   10d20:	11000217 	ldw	r4,8(r2)
   10d24:	e1bffc17 	ldw	r6,-16(fp)
   10d28:	e17ffe17 	ldw	r5,-8(fp)
   10d2c:	0010f100 	call	10f10 <memcmp>
   10d30:	1004c03a 	cmpne	r2,r2,zero
   10d34:	1000031e 	bne	r2,zero,10d44 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   10d38:	e0bffd17 	ldw	r2,-12(fp)
   10d3c:	e0bfff15 	stw	r2,-4(fp)
   10d40:	00000806 	br	10d64 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   10d44:	e0bffd17 	ldw	r2,-12(fp)
   10d48:	10800017 	ldw	r2,0(r2)
   10d4c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   10d50:	00c00074 	movhi	r3,1
   10d54:	18cef504 	addi	r3,r3,15316
   10d58:	e0bffd17 	ldw	r2,-12(fp)
   10d5c:	10ffc91e 	bne	r2,r3,10c84 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   10d60:	e03fff15 	stw	zero,-4(fp)
   10d64:	e0bfff17 	ldw	r2,-4(fp)
}
   10d68:	e037883a 	mov	sp,fp
   10d6c:	dfc00117 	ldw	ra,4(sp)
   10d70:	df000017 	ldw	fp,0(sp)
   10d74:	dec00204 	addi	sp,sp,8
   10d78:	f800283a 	ret

00010d7c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   10d7c:	defffc04 	addi	sp,sp,-16
   10d80:	df000315 	stw	fp,12(sp)
   10d84:	df000304 	addi	fp,sp,12
   10d88:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   10d8c:	00bffa04 	movi	r2,-24
   10d90:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   10d94:	e03ffe15 	stw	zero,-8(fp)
   10d98:	00001e06 	br	10e14 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
   10d9c:	e0bffe17 	ldw	r2,-8(fp)
   10da0:	00c00074 	movhi	r3,1
   10da4:	18c98a04 	addi	r3,r3,9768
   10da8:	10800324 	muli	r2,r2,12
   10dac:	10c5883a 	add	r2,r2,r3
   10db0:	10800017 	ldw	r2,0(r2)
   10db4:	1004c03a 	cmpne	r2,r2,zero
   10db8:	1000131e 	bne	r2,zero,10e08 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
   10dbc:	e0bffe17 	ldw	r2,-8(fp)
   10dc0:	00c00074 	movhi	r3,1
   10dc4:	18c98a04 	addi	r3,r3,9768
   10dc8:	10800324 	muli	r2,r2,12
   10dcc:	10c7883a 	add	r3,r2,r3
   10dd0:	e0bfff17 	ldw	r2,-4(fp)
   10dd4:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   10dd8:	00800074 	movhi	r2,1
   10ddc:	108ef904 	addi	r2,r2,15332
   10de0:	10c00017 	ldw	r3,0(r2)
   10de4:	e0bffe17 	ldw	r2,-8(fp)
   10de8:	1880040e 	bge	r3,r2,10dfc <alt_get_fd+0x80>
      {
        alt_max_fd = i;
   10dec:	00c00074 	movhi	r3,1
   10df0:	18cef904 	addi	r3,r3,15332
   10df4:	e0bffe17 	ldw	r2,-8(fp)
   10df8:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   10dfc:	e0bffe17 	ldw	r2,-8(fp)
   10e00:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   10e04:	00000606 	br	10e20 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   10e08:	e0bffe17 	ldw	r2,-8(fp)
   10e0c:	10800044 	addi	r2,r2,1
   10e10:	e0bffe15 	stw	r2,-8(fp)
   10e14:	e0bffe17 	ldw	r2,-8(fp)
   10e18:	10800810 	cmplti	r2,r2,32
   10e1c:	103fdf1e 	bne	r2,zero,10d9c <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   10e20:	e0bffd17 	ldw	r2,-12(fp)
}
   10e24:	e037883a 	mov	sp,fp
   10e28:	df000017 	ldw	fp,0(sp)
   10e2c:	dec00104 	addi	sp,sp,4
   10e30:	f800283a 	ret

00010e34 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   10e34:	defffb04 	addi	sp,sp,-20
   10e38:	df000415 	stw	fp,16(sp)
   10e3c:	df000404 	addi	fp,sp,16
   10e40:	e13ffe15 	stw	r4,-8(fp)
   10e44:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   10e48:	e0bfff17 	ldw	r2,-4(fp)
   10e4c:	10840070 	cmpltui	r2,r2,4097
   10e50:	1000021e 	bne	r2,zero,10e5c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   10e54:	00840004 	movi	r2,4096
   10e58:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   10e5c:	e0fffe17 	ldw	r3,-8(fp)
   10e60:	e0bfff17 	ldw	r2,-4(fp)
   10e64:	1885883a 	add	r2,r3,r2
   10e68:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   10e6c:	e0bffe17 	ldw	r2,-8(fp)
   10e70:	e0bffd15 	stw	r2,-12(fp)
   10e74:	00000506 	br	10e8c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   10e78:	e0bffd17 	ldw	r2,-12(fp)
   10e7c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   10e80:	e0bffd17 	ldw	r2,-12(fp)
   10e84:	10800804 	addi	r2,r2,32
   10e88:	e0bffd15 	stw	r2,-12(fp)
   10e8c:	e0fffd17 	ldw	r3,-12(fp)
   10e90:	e0bffc17 	ldw	r2,-16(fp)
   10e94:	18bff836 	bltu	r3,r2,10e78 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   10e98:	e0bffe17 	ldw	r2,-8(fp)
   10e9c:	108007cc 	andi	r2,r2,31
   10ea0:	1005003a 	cmpeq	r2,r2,zero
   10ea4:	1000021e 	bne	r2,zero,10eb0 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   10ea8:	e0bffd17 	ldw	r2,-12(fp)
   10eac:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   10eb0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   10eb4:	e037883a 	mov	sp,fp
   10eb8:	df000017 	ldw	fp,0(sp)
   10ebc:	dec00104 	addi	sp,sp,4
   10ec0:	f800283a 	ret

00010ec4 <atexit>:
   10ec4:	200b883a 	mov	r5,r4
   10ec8:	000d883a 	mov	r6,zero
   10ecc:	0009883a 	mov	r4,zero
   10ed0:	000f883a 	mov	r7,zero
   10ed4:	00112bc1 	jmpi	112bc <__register_exitproc>

00010ed8 <exit>:
   10ed8:	defffe04 	addi	sp,sp,-8
   10edc:	000b883a 	mov	r5,zero
   10ee0:	dc000015 	stw	r16,0(sp)
   10ee4:	dfc00115 	stw	ra,4(sp)
   10ee8:	2021883a 	mov	r16,r4
   10eec:	00113f40 	call	113f4 <__call_exitprocs>
   10ef0:	00800074 	movhi	r2,1
   10ef4:	108ef004 	addi	r2,r2,15296
   10ef8:	11000017 	ldw	r4,0(r2)
   10efc:	20800f17 	ldw	r2,60(r4)
   10f00:	10000126 	beq	r2,zero,10f08 <exit+0x30>
   10f04:	103ee83a 	callr	r2
   10f08:	8009883a 	mov	r4,r16
   10f0c:	00115e40 	call	115e4 <_exit>

00010f10 <memcmp>:
   10f10:	00c000c4 	movi	r3,3
   10f14:	1980032e 	bgeu	r3,r6,10f24 <memcmp+0x14>
   10f18:	2144b03a 	or	r2,r4,r5
   10f1c:	10c4703a 	and	r2,r2,r3
   10f20:	10000f26 	beq	r2,zero,10f60 <memcmp+0x50>
   10f24:	31ffffc4 	addi	r7,r6,-1
   10f28:	3000061e 	bne	r6,zero,10f44 <memcmp+0x34>
   10f2c:	00000a06 	br	10f58 <memcmp+0x48>
   10f30:	39ffffc4 	addi	r7,r7,-1
   10f34:	00bfffc4 	movi	r2,-1
   10f38:	21000044 	addi	r4,r4,1
   10f3c:	29400044 	addi	r5,r5,1
   10f40:	38800526 	beq	r7,r2,10f58 <memcmp+0x48>
   10f44:	20c00003 	ldbu	r3,0(r4)
   10f48:	28800003 	ldbu	r2,0(r5)
   10f4c:	18bff826 	beq	r3,r2,10f30 <memcmp+0x20>
   10f50:	1885c83a 	sub	r2,r3,r2
   10f54:	f800283a 	ret
   10f58:	0005883a 	mov	r2,zero
   10f5c:	f800283a 	ret
   10f60:	180f883a 	mov	r7,r3
   10f64:	20c00017 	ldw	r3,0(r4)
   10f68:	28800017 	ldw	r2,0(r5)
   10f6c:	18bfed1e 	bne	r3,r2,10f24 <memcmp+0x14>
   10f70:	31bfff04 	addi	r6,r6,-4
   10f74:	21000104 	addi	r4,r4,4
   10f78:	29400104 	addi	r5,r5,4
   10f7c:	39bff936 	bltu	r7,r6,10f64 <memcmp+0x54>
   10f80:	003fe806 	br	10f24 <memcmp+0x14>

00010f84 <putc>:
   10f84:	defffc04 	addi	sp,sp,-16
   10f88:	dc800215 	stw	r18,8(sp)
   10f8c:	04800074 	movhi	r18,1
   10f90:	948eef04 	addi	r18,r18,15292
   10f94:	90c00017 	ldw	r3,0(r18)
   10f98:	dc400115 	stw	r17,4(sp)
   10f9c:	dc000015 	stw	r16,0(sp)
   10fa0:	dfc00315 	stw	ra,12(sp)
   10fa4:	2023883a 	mov	r17,r4
   10fa8:	2821883a 	mov	r16,r5
   10fac:	18000226 	beq	r3,zero,10fb8 <putc+0x34>
   10fb0:	18800e17 	ldw	r2,56(r3)
   10fb4:	10001126 	beq	r2,zero,10ffc <putc+0x78>
   10fb8:	80800217 	ldw	r2,8(r16)
   10fbc:	10ffffc4 	addi	r3,r2,-1
   10fc0:	80c00215 	stw	r3,8(r16)
   10fc4:	18001316 	blt	r3,zero,11014 <putc+0x90>
   10fc8:	80800017 	ldw	r2,0(r16)
   10fcc:	14400005 	stb	r17,0(r2)
   10fd0:	80c00017 	ldw	r3,0(r16)
   10fd4:	18800044 	addi	r2,r3,1
   10fd8:	18c00003 	ldbu	r3,0(r3)
   10fdc:	80800015 	stw	r2,0(r16)
   10fe0:	1805883a 	mov	r2,r3
   10fe4:	dfc00317 	ldw	ra,12(sp)
   10fe8:	dc800217 	ldw	r18,8(sp)
   10fec:	dc400117 	ldw	r17,4(sp)
   10ff0:	dc000017 	ldw	r16,0(sp)
   10ff4:	dec00404 	addi	sp,sp,16
   10ff8:	f800283a 	ret
   10ffc:	1809883a 	mov	r4,r3
   11000:	000502c0 	call	502c <__sinit>
   11004:	80800217 	ldw	r2,8(r16)
   11008:	10ffffc4 	addi	r3,r2,-1
   1100c:	80c00215 	stw	r3,8(r16)
   11010:	183fed0e 	bge	r3,zero,10fc8 <putc+0x44>
   11014:	80800617 	ldw	r2,24(r16)
   11018:	18800f16 	blt	r3,r2,11058 <putc+0xd4>
   1101c:	80800017 	ldw	r2,0(r16)
   11020:	14400005 	stb	r17,0(r2)
   11024:	81000017 	ldw	r4,0(r16)
   11028:	00800284 	movi	r2,10
   1102c:	20c00003 	ldbu	r3,0(r4)
   11030:	18801226 	beq	r3,r2,1107c <putc+0xf8>
   11034:	20800044 	addi	r2,r4,1
   11038:	80800015 	stw	r2,0(r16)
   1103c:	1805883a 	mov	r2,r3
   11040:	dfc00317 	ldw	ra,12(sp)
   11044:	dc800217 	ldw	r18,8(sp)
   11048:	dc400117 	ldw	r17,4(sp)
   1104c:	dc000017 	ldw	r16,0(sp)
   11050:	dec00404 	addi	sp,sp,16
   11054:	f800283a 	ret
   11058:	91000017 	ldw	r4,0(r18)
   1105c:	880b883a 	mov	r5,r17
   11060:	800d883a 	mov	r6,r16
   11064:	dfc00317 	ldw	ra,12(sp)
   11068:	dc800217 	ldw	r18,8(sp)
   1106c:	dc400117 	ldw	r17,4(sp)
   11070:	dc000017 	ldw	r16,0(sp)
   11074:	dec00404 	addi	sp,sp,16
   11078:	00111701 	jmpi	11170 <__swbuf_r>
   1107c:	91000017 	ldw	r4,0(r18)
   11080:	180b883a 	mov	r5,r3
   11084:	003ff606 	br	11060 <putc+0xdc>

00011088 <_putc_r>:
   11088:	defffc04 	addi	sp,sp,-16
   1108c:	dc400215 	stw	r17,8(sp)
   11090:	dc000115 	stw	r16,4(sp)
   11094:	dfc00315 	stw	ra,12(sp)
   11098:	2021883a 	mov	r16,r4
   1109c:	2823883a 	mov	r17,r5
   110a0:	20000226 	beq	r4,zero,110ac <_putc_r+0x24>
   110a4:	20800e17 	ldw	r2,56(r4)
   110a8:	10001026 	beq	r2,zero,110ec <_putc_r+0x64>
   110ac:	30800217 	ldw	r2,8(r6)
   110b0:	10ffffc4 	addi	r3,r2,-1
   110b4:	30c00215 	stw	r3,8(r6)
   110b8:	18001316 	blt	r3,zero,11108 <_putc_r+0x80>
   110bc:	30800017 	ldw	r2,0(r6)
   110c0:	14400005 	stb	r17,0(r2)
   110c4:	30c00017 	ldw	r3,0(r6)
   110c8:	18800044 	addi	r2,r3,1
   110cc:	18c00003 	ldbu	r3,0(r3)
   110d0:	30800015 	stw	r2,0(r6)
   110d4:	1805883a 	mov	r2,r3
   110d8:	dfc00317 	ldw	ra,12(sp)
   110dc:	dc400217 	ldw	r17,8(sp)
   110e0:	dc000117 	ldw	r16,4(sp)
   110e4:	dec00404 	addi	sp,sp,16
   110e8:	f800283a 	ret
   110ec:	d9800015 	stw	r6,0(sp)
   110f0:	000502c0 	call	502c <__sinit>
   110f4:	d9800017 	ldw	r6,0(sp)
   110f8:	30800217 	ldw	r2,8(r6)
   110fc:	10ffffc4 	addi	r3,r2,-1
   11100:	30c00215 	stw	r3,8(r6)
   11104:	183fed0e 	bge	r3,zero,110bc <_putc_r+0x34>
   11108:	30800617 	ldw	r2,24(r6)
   1110c:	18800e16 	blt	r3,r2,11148 <_putc_r+0xc0>
   11110:	30800017 	ldw	r2,0(r6)
   11114:	14400005 	stb	r17,0(r2)
   11118:	31000017 	ldw	r4,0(r6)
   1111c:	00800284 	movi	r2,10
   11120:	20c00003 	ldbu	r3,0(r4)
   11124:	18800f26 	beq	r3,r2,11164 <_putc_r+0xdc>
   11128:	20800044 	addi	r2,r4,1
   1112c:	30800015 	stw	r2,0(r6)
   11130:	1805883a 	mov	r2,r3
   11134:	dfc00317 	ldw	ra,12(sp)
   11138:	dc400217 	ldw	r17,8(sp)
   1113c:	dc000117 	ldw	r16,4(sp)
   11140:	dec00404 	addi	sp,sp,16
   11144:	f800283a 	ret
   11148:	8009883a 	mov	r4,r16
   1114c:	880b883a 	mov	r5,r17
   11150:	dfc00317 	ldw	ra,12(sp)
   11154:	dc400217 	ldw	r17,8(sp)
   11158:	dc000117 	ldw	r16,4(sp)
   1115c:	dec00404 	addi	sp,sp,16
   11160:	00111701 	jmpi	11170 <__swbuf_r>
   11164:	8009883a 	mov	r4,r16
   11168:	180b883a 	mov	r5,r3
   1116c:	003ff806 	br	11150 <_putc_r+0xc8>

00011170 <__swbuf_r>:
   11170:	defffc04 	addi	sp,sp,-16
   11174:	dc400215 	stw	r17,8(sp)
   11178:	dc000115 	stw	r16,4(sp)
   1117c:	dfc00315 	stw	ra,12(sp)
   11180:	2023883a 	mov	r17,r4
   11184:	2821883a 	mov	r16,r5
   11188:	20000226 	beq	r4,zero,11194 <__swbuf_r+0x24>
   1118c:	20800e17 	ldw	r2,56(r4)
   11190:	10002f26 	beq	r2,zero,11250 <__swbuf_r+0xe0>
   11194:	3080030b 	ldhu	r2,12(r6)
   11198:	30c00617 	ldw	r3,24(r6)
   1119c:	1080020c 	andi	r2,r2,8
   111a0:	30c00215 	stw	r3,8(r6)
   111a4:	10002226 	beq	r2,zero,11230 <__swbuf_r+0xc0>
   111a8:	30c00417 	ldw	r3,16(r6)
   111ac:	18002026 	beq	r3,zero,11230 <__swbuf_r+0xc0>
   111b0:	31000017 	ldw	r4,0(r6)
   111b4:	30800517 	ldw	r2,20(r6)
   111b8:	20c7c83a 	sub	r3,r4,r3
   111bc:	18802f0e 	bge	r3,r2,1127c <__swbuf_r+0x10c>
   111c0:	19400044 	addi	r5,r3,1
   111c4:	30800217 	ldw	r2,8(r6)
   111c8:	84003fcc 	andi	r16,r16,255
   111cc:	20c00044 	addi	r3,r4,1
   111d0:	10bfffc4 	addi	r2,r2,-1
   111d4:	30800215 	stw	r2,8(r6)
   111d8:	24000005 	stb	r16,0(r4)
   111dc:	30800517 	ldw	r2,20(r6)
   111e0:	30c00015 	stw	r3,0(r6)
   111e4:	11400c26 	beq	r2,r5,11218 <__swbuf_r+0xa8>
   111e8:	3080030b 	ldhu	r2,12(r6)
   111ec:	1080004c 	andi	r2,r2,1
   111f0:	1005003a 	cmpeq	r2,r2,zero
   111f4:	10000626 	beq	r2,zero,11210 <__swbuf_r+0xa0>
   111f8:	8005883a 	mov	r2,r16
   111fc:	dfc00317 	ldw	ra,12(sp)
   11200:	dc400217 	ldw	r17,8(sp)
   11204:	dc000117 	ldw	r16,4(sp)
   11208:	dec00404 	addi	sp,sp,16
   1120c:	f800283a 	ret
   11210:	00800284 	movi	r2,10
   11214:	80bff81e 	bne	r16,r2,111f8 <__swbuf_r+0x88>
   11218:	8809883a 	mov	r4,r17
   1121c:	300b883a 	mov	r5,r6
   11220:	0004d940 	call	4d94 <_fflush_r>
   11224:	103ff426 	beq	r2,zero,111f8 <__swbuf_r+0x88>
   11228:	043fffc4 	movi	r16,-1
   1122c:	003ff206 	br	111f8 <__swbuf_r+0x88>
   11230:	300b883a 	mov	r5,r6
   11234:	8809883a 	mov	r4,r17
   11238:	d9800015 	stw	r6,0(sp)
   1123c:	000348c0 	call	348c <__swsetup_r>
   11240:	d9800017 	ldw	r6,0(sp)
   11244:	1000061e 	bne	r2,zero,11260 <__swbuf_r+0xf0>
   11248:	30c00417 	ldw	r3,16(r6)
   1124c:	003fd806 	br	111b0 <__swbuf_r+0x40>
   11250:	d9800015 	stw	r6,0(sp)
   11254:	000502c0 	call	502c <__sinit>
   11258:	d9800017 	ldw	r6,0(sp)
   1125c:	003fcd06 	br	11194 <__swbuf_r+0x24>
   11260:	3080030b 	ldhu	r2,12(r6)
   11264:	00c00244 	movi	r3,9
   11268:	043fffc4 	movi	r16,-1
   1126c:	10801014 	ori	r2,r2,64
   11270:	3080030d 	sth	r2,12(r6)
   11274:	88c00015 	stw	r3,0(r17)
   11278:	003fdf06 	br	111f8 <__swbuf_r+0x88>
   1127c:	300b883a 	mov	r5,r6
   11280:	8809883a 	mov	r4,r17
   11284:	d9800015 	stw	r6,0(sp)
   11288:	0004d940 	call	4d94 <_fflush_r>
   1128c:	d9800017 	ldw	r6,0(sp)
   11290:	103fe51e 	bne	r2,zero,11228 <__swbuf_r+0xb8>
   11294:	31000017 	ldw	r4,0(r6)
   11298:	01400044 	movi	r5,1
   1129c:	003fc906 	br	111c4 <__swbuf_r+0x54>

000112a0 <__swbuf>:
   112a0:	01800074 	movhi	r6,1
   112a4:	318eef04 	addi	r6,r6,15292
   112a8:	2007883a 	mov	r3,r4
   112ac:	31000017 	ldw	r4,0(r6)
   112b0:	280d883a 	mov	r6,r5
   112b4:	180b883a 	mov	r5,r3
   112b8:	00111701 	jmpi	11170 <__swbuf_r>

000112bc <__register_exitproc>:
   112bc:	defffa04 	addi	sp,sp,-24
   112c0:	00800074 	movhi	r2,1
   112c4:	108ef004 	addi	r2,r2,15296
   112c8:	dc000015 	stw	r16,0(sp)
   112cc:	14000017 	ldw	r16,0(r2)
   112d0:	dd000415 	stw	r20,16(sp)
   112d4:	2829883a 	mov	r20,r5
   112d8:	81405217 	ldw	r5,328(r16)
   112dc:	dcc00315 	stw	r19,12(sp)
   112e0:	dc800215 	stw	r18,8(sp)
   112e4:	dc400115 	stw	r17,4(sp)
   112e8:	dfc00515 	stw	ra,20(sp)
   112ec:	2023883a 	mov	r17,r4
   112f0:	3027883a 	mov	r19,r6
   112f4:	3825883a 	mov	r18,r7
   112f8:	28002526 	beq	r5,zero,11390 <__register_exitproc+0xd4>
   112fc:	29000117 	ldw	r4,4(r5)
   11300:	008007c4 	movi	r2,31
   11304:	11002716 	blt	r2,r4,113a4 <__register_exitproc+0xe8>
   11308:	8800101e 	bne	r17,zero,1134c <__register_exitproc+0x90>
   1130c:	2105883a 	add	r2,r4,r4
   11310:	1085883a 	add	r2,r2,r2
   11314:	20c00044 	addi	r3,r4,1
   11318:	1145883a 	add	r2,r2,r5
   1131c:	0009883a 	mov	r4,zero
   11320:	15000215 	stw	r20,8(r2)
   11324:	28c00115 	stw	r3,4(r5)
   11328:	2005883a 	mov	r2,r4
   1132c:	dfc00517 	ldw	ra,20(sp)
   11330:	dd000417 	ldw	r20,16(sp)
   11334:	dcc00317 	ldw	r19,12(sp)
   11338:	dc800217 	ldw	r18,8(sp)
   1133c:	dc400117 	ldw	r17,4(sp)
   11340:	dc000017 	ldw	r16,0(sp)
   11344:	dec00604 	addi	sp,sp,24
   11348:	f800283a 	ret
   1134c:	29802204 	addi	r6,r5,136
   11350:	00800044 	movi	r2,1
   11354:	110e983a 	sll	r7,r2,r4
   11358:	30c04017 	ldw	r3,256(r6)
   1135c:	2105883a 	add	r2,r4,r4
   11360:	1085883a 	add	r2,r2,r2
   11364:	1185883a 	add	r2,r2,r6
   11368:	19c6b03a 	or	r3,r3,r7
   1136c:	14802015 	stw	r18,128(r2)
   11370:	14c00015 	stw	r19,0(r2)
   11374:	00800084 	movi	r2,2
   11378:	30c04015 	stw	r3,256(r6)
   1137c:	88bfe31e 	bne	r17,r2,1130c <__register_exitproc+0x50>
   11380:	30804117 	ldw	r2,260(r6)
   11384:	11c4b03a 	or	r2,r2,r7
   11388:	30804115 	stw	r2,260(r6)
   1138c:	003fdf06 	br	1130c <__register_exitproc+0x50>
   11390:	00800fb4 	movhi	r2,62
   11394:	10992604 	addi	r2,r2,25752
   11398:	100b883a 	mov	r5,r2
   1139c:	80805215 	stw	r2,328(r16)
   113a0:	003fd606 	br	112fc <__register_exitproc+0x40>
   113a4:	00800034 	movhi	r2,0
   113a8:	10800004 	addi	r2,r2,0
   113ac:	1000021e 	bne	r2,zero,113b8 <__register_exitproc+0xfc>
   113b0:	013fffc4 	movi	r4,-1
   113b4:	003fdc06 	br	11328 <__register_exitproc+0x6c>
   113b8:	01006404 	movi	r4,400
   113bc:	103ee83a 	callr	r2
   113c0:	1007883a 	mov	r3,r2
   113c4:	103ffa26 	beq	r2,zero,113b0 <__register_exitproc+0xf4>
   113c8:	80805217 	ldw	r2,328(r16)
   113cc:	180b883a 	mov	r5,r3
   113d0:	18000115 	stw	zero,4(r3)
   113d4:	18800015 	stw	r2,0(r3)
   113d8:	80c05215 	stw	r3,328(r16)
   113dc:	18006215 	stw	zero,392(r3)
   113e0:	18006315 	stw	zero,396(r3)
   113e4:	0009883a 	mov	r4,zero
   113e8:	883fc826 	beq	r17,zero,1130c <__register_exitproc+0x50>
   113ec:	003fd706 	br	1134c <__register_exitproc+0x90>

000113f0 <register_fini>:
   113f0:	f800283a 	ret

000113f4 <__call_exitprocs>:
   113f4:	00800074 	movhi	r2,1
   113f8:	108ef004 	addi	r2,r2,15296
   113fc:	10800017 	ldw	r2,0(r2)
   11400:	defff304 	addi	sp,sp,-52
   11404:	df000b15 	stw	fp,44(sp)
   11408:	d8800115 	stw	r2,4(sp)
   1140c:	00800034 	movhi	r2,0
   11410:	10800004 	addi	r2,r2,0
   11414:	1005003a 	cmpeq	r2,r2,zero
   11418:	d8800215 	stw	r2,8(sp)
   1141c:	d8800117 	ldw	r2,4(sp)
   11420:	dd400815 	stw	r21,32(sp)
   11424:	dd000715 	stw	r20,28(sp)
   11428:	10805204 	addi	r2,r2,328
   1142c:	dfc00c15 	stw	ra,48(sp)
   11430:	ddc00a15 	stw	r23,40(sp)
   11434:	dd800915 	stw	r22,36(sp)
   11438:	dcc00615 	stw	r19,24(sp)
   1143c:	dc800515 	stw	r18,20(sp)
   11440:	dc400415 	stw	r17,16(sp)
   11444:	dc000315 	stw	r16,12(sp)
   11448:	282b883a 	mov	r21,r5
   1144c:	2039883a 	mov	fp,r4
   11450:	d8800015 	stw	r2,0(sp)
   11454:	2829003a 	cmpeq	r20,r5,zero
   11458:	d8800117 	ldw	r2,4(sp)
   1145c:	14405217 	ldw	r17,328(r2)
   11460:	88001026 	beq	r17,zero,114a4 <__call_exitprocs+0xb0>
   11464:	ddc00017 	ldw	r23,0(sp)
   11468:	88800117 	ldw	r2,4(r17)
   1146c:	8c802204 	addi	r18,r17,136
   11470:	143fffc4 	addi	r16,r2,-1
   11474:	80000916 	blt	r16,zero,1149c <__call_exitprocs+0xa8>
   11478:	05bfffc4 	movi	r22,-1
   1147c:	a000151e 	bne	r20,zero,114d4 <__call_exitprocs+0xe0>
   11480:	8409883a 	add	r4,r16,r16
   11484:	2105883a 	add	r2,r4,r4
   11488:	1485883a 	add	r2,r2,r18
   1148c:	10c02017 	ldw	r3,128(r2)
   11490:	a8c01126 	beq	r21,r3,114d8 <__call_exitprocs+0xe4>
   11494:	843fffc4 	addi	r16,r16,-1
   11498:	85bff81e 	bne	r16,r22,1147c <__call_exitprocs+0x88>
   1149c:	d8800217 	ldw	r2,8(sp)
   114a0:	10003126 	beq	r2,zero,11568 <__call_exitprocs+0x174>
   114a4:	dfc00c17 	ldw	ra,48(sp)
   114a8:	df000b17 	ldw	fp,44(sp)
   114ac:	ddc00a17 	ldw	r23,40(sp)
   114b0:	dd800917 	ldw	r22,36(sp)
   114b4:	dd400817 	ldw	r21,32(sp)
   114b8:	dd000717 	ldw	r20,28(sp)
   114bc:	dcc00617 	ldw	r19,24(sp)
   114c0:	dc800517 	ldw	r18,20(sp)
   114c4:	dc400417 	ldw	r17,16(sp)
   114c8:	dc000317 	ldw	r16,12(sp)
   114cc:	dec00d04 	addi	sp,sp,52
   114d0:	f800283a 	ret
   114d4:	8409883a 	add	r4,r16,r16
   114d8:	88c00117 	ldw	r3,4(r17)
   114dc:	2105883a 	add	r2,r4,r4
   114e0:	1445883a 	add	r2,r2,r17
   114e4:	18ffffc4 	addi	r3,r3,-1
   114e8:	11800217 	ldw	r6,8(r2)
   114ec:	1c001526 	beq	r3,r16,11544 <__call_exitprocs+0x150>
   114f0:	10000215 	stw	zero,8(r2)
   114f4:	303fe726 	beq	r6,zero,11494 <__call_exitprocs+0xa0>
   114f8:	00c00044 	movi	r3,1
   114fc:	1c06983a 	sll	r3,r3,r16
   11500:	90804017 	ldw	r2,256(r18)
   11504:	8cc00117 	ldw	r19,4(r17)
   11508:	1884703a 	and	r2,r3,r2
   1150c:	10001426 	beq	r2,zero,11560 <__call_exitprocs+0x16c>
   11510:	90804117 	ldw	r2,260(r18)
   11514:	1884703a 	and	r2,r3,r2
   11518:	10000c1e 	bne	r2,zero,1154c <__call_exitprocs+0x158>
   1151c:	2105883a 	add	r2,r4,r4
   11520:	1485883a 	add	r2,r2,r18
   11524:	11400017 	ldw	r5,0(r2)
   11528:	e009883a 	mov	r4,fp
   1152c:	303ee83a 	callr	r6
   11530:	88800117 	ldw	r2,4(r17)
   11534:	98bfc81e 	bne	r19,r2,11458 <__call_exitprocs+0x64>
   11538:	b8800017 	ldw	r2,0(r23)
   1153c:	147fd526 	beq	r2,r17,11494 <__call_exitprocs+0xa0>
   11540:	003fc506 	br	11458 <__call_exitprocs+0x64>
   11544:	8c000115 	stw	r16,4(r17)
   11548:	003fea06 	br	114f4 <__call_exitprocs+0x100>
   1154c:	2105883a 	add	r2,r4,r4
   11550:	1485883a 	add	r2,r2,r18
   11554:	11000017 	ldw	r4,0(r2)
   11558:	303ee83a 	callr	r6
   1155c:	003ff406 	br	11530 <__call_exitprocs+0x13c>
   11560:	303ee83a 	callr	r6
   11564:	003ff206 	br	11530 <__call_exitprocs+0x13c>
   11568:	88800117 	ldw	r2,4(r17)
   1156c:	1000081e 	bne	r2,zero,11590 <__call_exitprocs+0x19c>
   11570:	89000017 	ldw	r4,0(r17)
   11574:	20000726 	beq	r4,zero,11594 <__call_exitprocs+0x1a0>
   11578:	b9000015 	stw	r4,0(r23)
   1157c:	8809883a 	mov	r4,r17
   11580:	00000000 	call	0 <__reset>
   11584:	bc400017 	ldw	r17,0(r23)
   11588:	883fb71e 	bne	r17,zero,11468 <__call_exitprocs+0x74>
   1158c:	003fc506 	br	114a4 <__call_exitprocs+0xb0>
   11590:	89000017 	ldw	r4,0(r17)
   11594:	882f883a 	mov	r23,r17
   11598:	2023883a 	mov	r17,r4
   1159c:	883fb21e 	bne	r17,zero,11468 <__call_exitprocs+0x74>
   115a0:	003fc006 	br	114a4 <__call_exitprocs+0xb0>

000115a4 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   115a4:	defffd04 	addi	sp,sp,-12
   115a8:	df000215 	stw	fp,8(sp)
   115ac:	df000204 	addi	fp,sp,8
   115b0:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   115b4:	e0bfff17 	ldw	r2,-4(fp)
   115b8:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   115bc:	e0bffe17 	ldw	r2,-8(fp)
   115c0:	1005003a 	cmpeq	r2,r2,zero
   115c4:	1000021e 	bne	r2,zero,115d0 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   115c8:	002af070 	cmpltui	zero,zero,43969
   115cc:	00000106 	br	115d4 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   115d0:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   115d4:	e037883a 	mov	sp,fp
   115d8:	df000017 	ldw	fp,0(sp)
   115dc:	dec00104 	addi	sp,sp,4
   115e0:	f800283a 	ret

000115e4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   115e4:	defffd04 	addi	sp,sp,-12
   115e8:	dfc00215 	stw	ra,8(sp)
   115ec:	df000115 	stw	fp,4(sp)
   115f0:	df000104 	addi	fp,sp,4
   115f4:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   115f8:	e13fff17 	ldw	r4,-4(fp)
   115fc:	00115a40 	call	115a4 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   11600:	003fff06 	br	11600 <_exit+0x1c>
   11604:	000113f0 	cmpltui	zero,zero,1103
